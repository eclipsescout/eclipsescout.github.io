antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,35.057]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[1,69.076,2,66.332]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1-3",[3,57.081,4,31.382]],["name/1-3",[]],["text/1-3",[]],["component/1-3",[]],["title/1-4",[4,31.382,5,52.828]],["name/1-4",[]],["text/1-4",[]],["component/1-4",[]],["title/1",[6,56.611]],["name/1",[7,1.29]],["text/1",[0,3.321,3,6.573,4,5.654,5,5.01,8,4.753,9,1.952,10,2.343,11,2.516,12,5.487,13,3.951,14,1.928,15,3.33,16,2.45,17,3.206,18,1.669,19,4.351,20,4.114,21,2.643,22,2.578,23,5.233,24,3.442,25,2.939,26,2.26,27,1.507,28,3.768,29,3.321,30,3.121,31,4.721,32,1.991,33,3.635,34,5.123,35,2.067,36,4.599,37,2.161,38,2.27,39,4.526,40,4.268,41,2.377,42,2.966,43,5.917,44,2.532,45,4.153,46,3.6,47,2.031,48,5.353,49,2.754,50,3.641,51,2.504,52,2.818,53,2.796,54,2.678,55,2.715,56,3.055,57,1.788,58,3.865,59,2.643,60,2.828,61,2.841,62,2.888,63,2.29,64,3.608,65,2.081,66,3.276,67,2.017,68,2.161,69,2.643,70,2.504,71,1.733,72,3.034,73,2.643,74,3.234,75,3.518,76,3.304,77,1.428,78,2.311,79,5.078,80,3.37,81,1.585,82,3.608,83,4.284,84,2.504,85,3.608,86,3.234,87,3.422,88,2.775,89,2.643,90,3.194,91,3.321,92,2.222,93,2.425,94,3.422,95,3.024,96,2.476,97,2.49,98,8.372,99,2.343,100,2.365,101,2.343,102,2.311,103,2.195,104,4.284,105,2.128,106,1.997,107,4.284]],["component/1",[11,0.279,108,0.486]],["title/2",[11,10.251,18,19.86,34,29.316,109,23.537]],["name/2",[110,2.036]],["text/2",[0,3.624,8,3.705,11,2.432,18,4.513,22,6.433,34,4.991,48,4.84,57,3.624,60,3.747,71,4.324,76,4.378,92,4.503,111,5.161,112,5.71,113,4.185,114,4.43,115,4.115,116,5.464,117,5.131,118,5.393,119,4.06,120,4.62,121,4.13,122,4.913]],["component/2",[11,0.279,108,0.486]],["title/3-1",[11,13.888,118,34.841]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[81,18.859,123,33.538,124,37.143,125,45.997]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[36,39.932,67,32.527]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3",[]],["name/3",[72,0.943]],["text/3",[0,2.337,8,2.39,11,2.511,18,3.11,36,3.237,40,2.489,41,4.431,50,2.288,57,2.337,60,2.417,65,2.72,67,4.779,71,2.264,72,4.7,77,1.866,81,3.443,84,3.272,96,3.237,113,4.494,118,4.695,119,2.619,120,2.98,121,2.664,122,3.169,124,5.817,126,2.73,127,2.813,128,3.418,129,4.408,130,2.531,131,2.664,132,3.594,133,2.331,134,3.914,135,4.03,136,5.589,137,3.389,138,4.213,139,2.75,140,3.291,141,2.711,142,2.711,143,4.472,144,4.659,145,4.227,146,5.051,147,7.023,148,2.881,149,4.715,150,5.383,151,2.941,152,3.841,153,5.051,154,4.715,155,5.051,156,4.472,157,2.636,158,3.841,159,3.349,160,4.715,161,3.106,162,5.051,163,3.477,164,2.568,165,2.781,166,3.743,167,4.282,168,3.683,169,3.122,170,2.967,171,3.31,172,2.967,173,2.711,174,4.472,175,2.813,176,2.846,177,3.169,178,3.487,179,3.389]],["component/3",[11,0.279,108,0.486]],["title/4-1",[136,35.984,138,36.445]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[136,30.562,138,30.954,180,27.72]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[136,35.984,138,36.445]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4-4",[181,42.341,182,34.573]],["name/4-4",[]],["text/4-4",[]],["component/4-4",[]],["title/4-5",[183,19.716,184,29.009,185,21.002,186,19.621]],["name/4-5",[]],["text/4-5",[]],["component/4-5",[]],["title/4-6",[19,27.886,138,26.901,187,31.253,188,28.289]],["name/4-6",[]],["text/4-6",[]],["component/4-6",[]],["title/4",[]],["name/4",[189,2.036]],["text/4",[8,1.508,9,1.611,11,1.133,14,1.591,18,1.377,19,3.083,27,3.286,35,2.719,37,1.782,38,1.873,44,3.332,45,1.648,50,3.582,57,1.475,60,1.526,77,2.675,81,2.601,109,1.631,111,2.101,114,2.877,115,3.333,117,2.089,118,1.782,119,1.653,120,1.881,121,2.682,122,2,126,1.723,128,1.513,129,2.889,131,3.345,132,1.591,133,1.471,135,3.044,136,4.18,138,6.069,140,5.491,141,4.928,142,5.318,157,1.664,170,2.987,179,2.139,180,1.67,181,2.166,182,1.769,183,2.719,184,2.011,185,3.305,186,4.227,187,3.455,188,5.648,190,2.912,191,4.521,192,1.513,193,2.668,194,1.857,195,3.534,196,3.143,197,6.303,198,1.99,199,1.755,200,4.686,201,2.936,202,3.793,203,2.604,204,5.518,205,1.463,206,1.865,207,3.188,208,3.598,209,5.041,210,3.207,211,2.74,212,2.703,213,2.447,214,1.826,215,2.077,216,3.971,217,4.488,218,2.81,219,4.062,220,4.521,221,1.711,222,2.52,223,2.289,224,2.703,225,1.319,226,3.174,227,2.8,228,2.604,229,2.153,230,2.18,231,1.865,232,1.906,233,3.188,234,2.425,235,2.703,236,2.832,237,1.539,238,2.153,239,5.085,240,1.97,241,2.289,242,1.97,243,1.648,244,1.422,245,2.325,246,2.325,247,3.188,248,2.52,249,1.841,250,1.642,251,2.066,252,2.476,253,1.377,254,3.188,255,3.188,256,2.101,257,2.425,258,2.703,259,2.976,260,3.188,261,2.976,262,3.188,263,2.823,264,3.188,265,1.762,266,3.188,267,2.976,268,1.833,269,1.475,270,2.823,271,1.571,272,2.054,273,1.906,274,2.256,275,2.976,276,2.224,277,2.92,278,2.604,279,1.664,280,4.019,281,2.043,282,2.447,283,3.188,284,2.823,285,2.021,286,1.898,287,3.295,288,1.711,289,2.209,290,2.547,291,2.547,292,1.99]],["component/4",[11,0.279,108,0.486]],["title/5-1",[135,25.4,136,30.562,221,28.403]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[77,16.997,130,16.16,225,19.032,293,19.435]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[77,16.997,130,16.16,204,32.091,227,25.326]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[77,19.558,81,21.701,130,18.595]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5-5",[138,30.954,142,28.403,178,25.622]],["name/5-5",[]],["text/5-5",[]],["component/5-5",[]],["title/5",[]],["name/5",[294,2.036]],["text/5",[0,1.462,8,1.494,11,2.277,14,1.576,18,3.109,27,2.458,37,1.766,38,1.855,44,2.07,45,1.632,57,1.462,60,1.511,65,2.718,70,2.046,71,1.416,72,1.622,77,3.487,78,1.889,81,2.952,84,2.046,106,2.608,114,1.787,118,2.822,119,1.638,120,1.863,121,1.666,122,1.982,128,2.991,129,1.438,130,2.766,132,2.518,133,3.633,134,6.827,135,3.778,136,4.546,138,3.687,140,2.058,141,3.383,142,4.505,144,1.752,176,1.78,178,3.052,180,1.654,181,2.146,185,1.442,188,3.877,191,5.61,196,1.952,199,4.334,200,2.991,201,2.915,202,3.018,204,5.492,206,4.604,214,5.046,221,2.709,225,2.979,227,5.039,230,2.16,232,1.889,234,2.402,236,2.811,244,3.744,252,1.538,253,1.364,265,1.746,269,1.462,271,2.488,282,5.527,285,2.003,286,1.88,292,1.972,293,3.547,295,2.58,296,2.949,297,3.366,298,4.123,299,1.606,300,2.58,301,7.119,302,1.627,303,4.141,304,2.797,305,3.538,306,4.04,307,3.12,308,2.133,309,1.889,310,2.305,311,4.469,312,1.538,313,5.833,314,2.949,315,1.643,316,4.976,317,2.257,318,2.251,319,3.874,320,1.591,321,2.285,322,2.402,323,1.552,324,2.285,325,2.235,326,2.949,327,2.094,328,2.678,329,2.402,330,3.12,331,1.511,332,1.889,333,3.234,334,2.797,335,3.079,336,2.949,337,1.801,338,2.797,339,3.452,340,2.495,341,1.773,342,1.897,343,2.497,344,3.079,345,2.58,346,3.159,347,1.897,348,2.797]],["component/5",[11,0.279,108,0.486]],["title/6-1",[11,13.888,129,28.378]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[77,19.558,129,24.102,131,27.91]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[11,11.796,129,24.102,132,26.405]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[129,28.378,138,36.445]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6",[]],["name/6",[349,2.036]],["text/6",[0,2.238,8,2.288,11,2.444,17,4.869,18,2.088,27,2.722,35,2.586,50,2.191,57,2.238,60,2.314,70,3.133,72,4.207,77,4.052,113,3.03,118,2.704,120,2.853,121,2.55,122,3.034,127,4.564,128,3.888,129,5.199,130,2.879,131,4.322,132,4.089,133,3.223,134,3.747,135,2.321,136,4.032,138,4.084,140,4.55,141,3.747,142,2.595,178,2.341,186,2.063,196,2.989,199,2.663,202,2.892,206,2.828,209,4.451,214,2.77,221,3.747,225,2.001,232,2.892,237,2.334,243,3.609,268,2.781,292,3.019,293,3.792,305,3.431,309,4.9,310,2.208,316,3.682,317,3.122,331,2.314,339,3.307,341,2.715,342,2.905,343,3.823,350,3.526,351,3.206,352,3.286,353,2.542,354,2.483,355,4.515,356,3.205,357,5.218,358,3.646,359,4.295,360,2.804,361,2.758]],["component/6",[11,0.279,108,0.486]],["title/7-1",[77,19.558,129,24.102,339,36.194]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[130,21.893,132,31.09]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7",[]],["name/7",[310,0.463,362,1.125]],["text/7",[0,2.987,8,2.055,11,2.128,14,2.167,27,3.324,35,3.452,50,1.968,57,2.01,60,2.079,71,1.947,72,3.314,76,2.429,77,3.151,81,4.053,117,4.23,120,2.563,121,4.062,122,2.726,126,5.49,129,4.502,130,2.706,132,3.22,135,3.098,136,2.508,182,2.41,183,3.302,186,1.853,192,2.061,196,2.685,198,4.03,199,3.554,201,4.448,205,3.536,206,2.541,225,3.187,232,2.597,244,4.779,249,4.923,251,2.814,252,4.437,253,1.876,257,4.909,279,4.02,285,2.754,292,2.712,293,1.836,302,2.237,303,3.712,309,2.597,310,4.359,312,2.115,316,4.496,317,3.813,339,5.267,350,3.167,363,2.672,364,2.134,365,5.272,366,4.535,367,4.182,368,2.74,369,6.033,370,2.769,371,2.458,372,3.246,373,2.552,374,4.375,375,4.954,376,2.754,377,3.548,378,2.621,379,3.096,380,4.159,381,3.846,382,3.434,383,2.726,384,2.621,385,3.434,386,4.815]],["component/7",[11,0.279,108,0.486]],["title/8-1",[77,19.558,129,24.102,293,22.364]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[130,21.893,132,31.09]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8",[]],["name/8",[387,2.036]],["text/8",[0,2.444,8,1.582,11,1.657,14,1.668,21,2.287,27,3.156,33,2.057,50,1.515,57,1.548,60,1.6,71,1.499,72,2.712,77,2.748,120,1.973,121,4.751,122,2.098,126,5.52,127,1.863,129,3.919,130,3.459,132,2.635,135,2.535,136,1.931,182,1.855,183,3.47,186,1.427,192,1.587,196,2.067,198,5.625,199,2.908,201,3.78,205,3.716,206,1.956,225,2.708,232,2,243,4.827,244,4.731,249,5.983,251,2.167,252,4.191,253,1.444,279,5.476,285,2.12,289,2.317,292,2.088,293,4.378,302,1.722,303,3.037,309,3.914,312,1.629,316,3.921,317,3.325,350,2.438,353,2.776,354,4.156,356,3.413,357,6.431,364,1.643,365,4.314,366,3.711,367,3.422,368,2.109,370,2.131,371,1.892,372,3.947,373,1.964,374,5.801,375,6.605,376,2.12,377,2.731,378,2.018,379,2.383,380,3.403,384,2.018,385,2.643,388,4.677,389,2.961,390,2.961,391,6.546,392,3.591,393,1.695,394,2,395,2.961,396,3.122,397,3.122,398,3.344,399,3.344,400,3.344,401,2.731,402,2.835,403,3.122,404,2.835]],["component/8",[11,0.279,108,0.486]],["title/9-1",[129,24.102,133,24.426,209,33.734]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9",[]],["name/9",[405,2.036]],["text/9",[0,3.251,8,3.324,11,1.566,27,2.739,45,3.63,57,3.251,60,3.362,109,4.61,120,4.145,121,3.705,122,4.408,129,4.103,130,3.165,133,3.242,136,4.057,138,4.109,140,5.87,141,3.77,185,3.208,186,4.243,196,4.342,209,6.687,221,3.77,236,3.913,249,4.057,258,8.432,286,4.182,292,4.386,333,4.502,371,3.975,392,3.854,406,3.825,407,6.189,408,7.788,409,5.541,410,7.026,411,7.788,412,7.788]],["component/9",[11,0.279,108,0.486]],["title/10-1",[77,19.558,129,24.102,358,39.895]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[130,21.893,132,31.09]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10",[]],["name/10",[413,2.036]],["text/10",[0,2.712,8,1.808,11,2.026,14,1.907,27,3.359,50,1.731,57,1.768,60,1.829,71,1.713,72,3.008,76,2.137,77,2.633,120,2.254,121,4.544,122,2.398,126,5.524,129,4.31,130,2.504,132,2.923,135,2.812,136,2.207,182,2.12,183,3.693,186,1.63,188,4.383,192,1.813,196,2.362,198,3.658,199,3.226,201,4.115,205,4.174,206,2.235,225,2.949,232,2.285,237,4.569,243,4.453,244,4.86,249,5.639,251,2.476,252,4.428,253,1.65,279,4.941,285,2.423,286,2.275,289,2.648,292,2.386,293,1.615,302,1.968,303,3.369,309,3.504,312,1.861,316,4.214,317,3.573,350,2.786,354,4.102,358,5.372,359,6.158,363,2.35,364,1.878,365,4.786,366,4.117,367,3.796,368,2.41,370,2.436,371,2.162,372,4.379,373,2.245,374,5.377,375,5.47,376,2.423,377,3.121,378,2.306,379,2.724,380,5.148,384,2.306,385,3.021,392,2.096,401,3.121,402,3.24,404,3.24,414,2.666,415,4.236,416,4.236,417,4.236,418,4.236]],["component/10",[11,0.279,108,0.486]],["title/11-1",[129,24.102,138,30.954,142,28.403]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11",[]],["name/11",[142,0.545,419,1.125]],["text/11",[8,2.699,10,3.459,11,1.271,27,3.496,57,2.64,60,2.73,76,3.19,77,3.313,81,3.217,109,2.919,120,3.366,121,3.008,122,3.579,128,2.707,129,4.083,130,2.004,135,2.738,136,5.576,138,5.244,140,6.292,141,5.752,142,5.433,180,2.988,183,3.363,188,6.227,196,3.526,199,4.32,200,3.381,208,5.551,209,5,218,3.153,221,4.21,224,4.836,225,3.246,238,5.297,252,3.82,263,5.051,292,3.561,301,4.037,305,3.855,312,2.778,313,4.228,316,3.008,317,2.551,322,5.966,330,3.526,341,3.202,342,3.427,343,4.509,407,3.366,420,2.891,421,3.294,422,5.705,423,3.876,424,5.365,425,7.845,426,4.659]],["component/11",[11,0.279,108,0.486]],["title/12-1",[17,28.713,77,19.558,129,24.102]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[130,21.893,132,31.09]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12",[]],["name/12",[427,2.036]],["text/12",[0,2.666,8,1.768,11,1.901,14,1.865,17,5.397,21,2.556,27,3.326,50,1.693,57,1.73,60,1.789,71,1.676,72,2.957,77,2.918,120,2.205,121,4.952,122,2.345,126,5.672,129,4.104,130,2.469,132,2.874,135,2.765,136,2.158,182,2.074,183,3.657,186,1.594,192,1.773,196,2.31,198,4.93,199,3.172,201,4.059,205,3.916,206,2.186,225,2.908,232,2.235,243,3.632,244,4.437,249,6.137,251,2.422,252,4.389,253,1.614,279,5.303,285,2.37,289,2.59,292,2.333,293,1.579,302,1.925,303,3.313,309,4.203,312,1.82,316,4.165,317,3.532,336,3.489,350,2.725,353,3.027,354,3.608,356,2.644,364,1.837,365,4.705,366,4.047,367,3.732,368,2.357,370,2.382,371,2.115,372,4.305,373,2.195,374,5.771,375,6.917,376,2.37,377,3.053,378,2.256,379,2.664,380,3.712,384,2.256,385,2.954,388,5.101,392,3.16,393,2.919,395,3.31,397,3.489,401,3.053,402,3.169,403,3.489,404,3.169,428,2.925,429,5.378,430,3.738,431,3.489,432,3.738,433,3.738]],["component/12",[11,0.279,108,0.486]],["title/13-1",[77,19.558,129,24.102,357,39.552]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13-3",[130,21.893,132,31.09]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["title/13",[]],["name/13",[434,2.036]],["text/13",[0,3.167,8,2.225,11,2.189,14,2.346,27,3.145,50,2.13,57,2.176,60,2.251,71,2.108,72,3.513,76,2.629,77,3.273,120,2.775,121,4.254,122,2.951,126,5.615,129,4.617,130,2.834,132,3.414,135,3.284,136,2.716,182,2.609,183,3.458,186,2.006,192,2.231,196,2.907,198,4.272,199,3.768,201,4.658,205,3.703,206,2.751,225,3.338,232,2.812,244,4.724,249,5.115,251,3.047,252,4.584,253,2.031,279,4.21,285,2.982,292,2.936,293,1.987,302,2.422,303,3.935,309,2.812,312,2.29,316,4.671,317,3.961,350,3.429,357,7.576,363,2.893,364,2.311,365,5.589,366,4.808,367,4.433,368,2.966,370,2.998,371,2.661,372,3.515,373,2.762,374,4.582,375,5.252,376,2.982,377,3.841,378,2.838,379,3.352,380,4.409,384,2.838,385,3.717,435,5.213,436,5.213]],["component/13",[11,0.279,108,0.486]],["title/14-1",[11,10.251,77,16.997,129,20.946,131,24.255]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[130,21.893,132,31.09]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14",[]],["name/14",[437,2.036]],["text/14",[0,1.13,8,1.155,11,2.223,14,2.04,17,1.325,18,2.965,19,1.48,24,1.422,27,3.075,32,2.106,40,1.203,41,1.502,47,1.283,50,1.106,51,2.649,57,1.13,60,1.168,71,3.709,77,2.745,98,1.994,109,1.249,113,4.204,120,1.44,121,1.288,122,1.532,126,2.21,128,1.158,129,3.916,130,2.906,131,4.922,132,3.935,136,1.41,138,1.428,142,1.31,144,2.268,148,2.332,151,2.381,164,2.078,173,1.31,175,4.137,182,2.268,183,3.184,186,4.474,192,4.843,196,1.509,197,1.74,199,1.344,200,2.423,205,3.152,206,2.391,218,1.349,219,3.265,221,1.31,224,2.07,225,2.552,226,1.524,232,1.46,244,3.313,249,4.555,252,3.004,253,2.277,256,1.609,268,1.404,279,4.872,292,1.524,293,1.032,306,2.62,307,1.509,310,1.115,312,1.189,316,3.621,317,3.07,320,1.23,327,2.71,330,1.509,333,2.62,337,2.332,350,1.78,352,1.659,353,2.771,354,4.974,355,2.279,363,1.502,367,1.582,370,1.556,372,1.825,374,5.504,375,4.734,383,2.565,385,1.93,388,2.162,392,1.339,395,2.162,401,1.994,402,2.07,404,2.07,423,1.659,438,2.129,439,1.628,440,2.442,441,3.62,442,2.38,443,2.442,444,2.679,445,2.442,446,4.168,447,1.349,448,1.692,449,1.609,450,1.582,451,2.279,452,1.91,453,1.628,454,1.74,455,1.766,456,2.442,457,5.047,458,2.259,459,3.816,460,2.442,461,1.728,462,2.442,463,2.442,464,2.442,465,2.279,466,2.442,467,4.734,468,5.461,469,4.057,470,2.852,471,3.466,472,4.591,473,3.231,474,3.339,475,2.442,476,3.975,477,2.442,478,5.229,479,2.781,480,2.442,481,1.659,482,1.532,483,1.398,484,3.775,485,2.442,486,2.162,487,2.442,488,2.442,489,1.41,490,2.442,491,3.138,492,4.088,493,2.279,494,2.442]],["component/14",[11,0.279,108,0.486]],["title/15-1",[0,28.838,22,41.561]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15",[]],["name/15",[43,1.19]],["text/15",[0,3.687,8,3.77,11,2.348,18,3.44,35,4.261,43,6.825,48,6.026,50,3.609,57,3.687,60,3.813,111,5.251,112,7.109,113,4.23,115,5.123,116,6.802,120,4.701,121,4.202,122,4.999,196,4.925,265,4.404,301,5.638]],["component/15",[11,0.279,108,0.486]],["title/16-1",[11,10.251,113,19.957,115,24.172,116,32.091]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[11,10.251,113,19.957,116,32.091,495,25.617]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16-3",[170,36.603,496,40.15]],["name/16-3",[]],["text/16-3",[]],["component/16-3",[]],["title/16-4",[113,19.957,116,32.091,164,23.385,497,32.782]],["name/16-4",[]],["text/16-4",[]],["component/16-4",[]],["title/16-5",[0,24.493,71,23.727,113,22.964]],["name/16-5",[]],["text/16-5",[]],["component/16-5",[]],["title/16-6",[27,17.931,116,32.091,447,25.422,497,32.782]],["name/16-6",[]],["text/16-6",[]],["component/16-6",[]],["title/16-7",[337,35.541,498,52.828]],["name/16-7",[]],["text/16-7",[]],["component/16-7",[]],["title/16",[]],["name/16",[499,2.036]],["text/16",[0,2.906,4,1.054,6,1.564,8,2.228,11,2.132,14,4.177,17,3.028,18,2.958,22,1.396,27,1.399,29,3.084,30,2.898,32,1.848,33,1.288,34,1.334,35,2.985,36,1.342,37,1.17,43,3.051,45,1.854,46,2.869,47,2.933,49,1.492,50,0.948,57,0.969,60,2.254,67,1.093,71,3.284,81,1.471,92,2.064,93,1.314,95,1.638,97,1.349,98,1.71,99,2.176,100,2.196,101,2.176,102,2.146,103,2.038,105,1.976,106,1.854,108,0.811,111,1.38,113,4.151,114,2.665,115,3.85,116,6.856,118,1.17,119,2.442,120,1.235,121,1.104,122,2.252,126,1.132,127,1.166,128,0.993,129,2.145,131,3.863,132,1.79,135,1.005,164,2.838,165,1.153,171,1.372,179,1.405,182,1.991,186,0.893,187,1.422,192,1.703,199,4.255,200,3.721,202,2.816,203,1.71,206,4.721,210,2.263,211,1.799,216,1.969,217,1.481,218,1.157,227,1.153,234,1.592,244,2.49,249,2.72,250,1.078,252,1.019,256,1.38,269,3.736,271,2.321,272,2.312,285,1.327,286,2.136,288,1.926,293,0.885,299,1.064,306,2.3,307,1.294,308,1.414,312,1.748,315,1.867,316,5.182,317,2.808,321,1.515,323,2.314,331,3.005,333,3.018,335,1.023,337,3.581,340,1.774,341,2.014,347,1.257,351,2.379,352,4.978,354,1.075,356,0.961,360,1.214,364,1.763,366,1.471,370,3.558,383,2.252,393,2.829,420,1.819,421,2.072,438,1.825,447,1.157,449,1.38,452,5.732,453,1.396,455,1.515,476,2.705,479,1.104,495,4.496,496,2.312,497,5.967,500,6.961,501,3.467,502,2.675,503,4.462,504,2.321,505,1.526,506,4.171,507,1.281,508,2.321,509,2.837,510,1.854,511,1.592,512,1.954,513,3.35,514,1.655,515,1.655,516,1.396,517,2.321,518,1.71,519,1.515,520,2.196,521,2.094,522,1.825,523,3.357,524,4.284,525,1.294,526,1.775,527,1.503,528,2.263,529,2.438,530,2.228,531,2.094,532,1.481,533,1.405,534,2.321,535,2.558,536,1.492,537,2.321,538,1.672,539,2.321,540,2.393,541,2.186,542,1.526,543,1.578,544,1.854,545,2.228,546,1.775,547,1.954,548,2.898,549,1.854,550,1.204,551,1.492,552,1.854,553,1.655,554,2.321,555,2.321,556,1.854,557,1.691,558,1.23,559,2.321,560,1.775,561,2.041,562,3.679,563,4.71,564,2.094,565,2.094,566,2.094,567,2.094,568,2.094,569,1.246,570,2.094,571,2.743,572,3.002,573,1.432,574,2.094,575,2.094,576,1.752,577,1.752,578,3.589,579,3.589,580,2.094,581,2.094,582,1.969,583,2.094,584,1.954,585,2.094,586,2.321,587,1.854]],["component/16",[11,0.279,108,0.486]],["title/17-1",[43,34.29,48,32.712,112,38.592]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17-2",[588,55.237]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["title/17-3",[133,28.76,589,48.285]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["title/17-4",[11,11.796,130,18.595,131,27.91]],["name/17-4",[]],["text/17-4",[]],["component/17-4",[]],["title/17-5",[337,35.541,498,52.828]],["name/17-5",[]],["text/17-5",[]],["component/17-5",[]],["title/17",[]],["name/17",[590,2.036]],["text/17",[0,4.03,8,1.194,9,1.274,11,2.386,13,1.389,14,2.096,18,3.019,27,3.269,32,1.299,35,2.887,36,2.692,40,1.243,43,2.722,46,3.289,47,1.326,48,5.382,49,1.798,50,1.143,57,1.167,60,1.207,69,3.692,71,3.76,72,1.295,77,2.959,81,2.581,93,1.583,103,3.067,105,2.313,106,2.171,109,2.15,113,4.092,114,2.377,115,1.326,116,1.76,119,1.308,120,1.488,121,1.33,122,1.583,126,2.918,129,3.439,130,2.813,131,5.156,135,2.016,139,1.374,148,3.079,151,3.144,157,1.317,164,2.136,165,1.389,169,1.559,171,1.653,173,1.354,180,1.321,182,1.4,186,1.076,187,1.714,197,1.798,199,3.851,202,2.512,205,1.158,206,4.416,208,2.973,209,1.608,214,1.445,216,1.384,218,2.322,225,1.044,229,2.837,232,1.508,249,1.457,251,1.634,252,3.066,256,1.663,279,2.818,287,2.722,302,1.299,306,4.034,310,1.152,312,2.629,316,5.07,317,1.879,321,1.825,330,1.559,331,2.01,335,2.637,337,2.396,340,2.077,352,2.855,354,3.59,360,1.463,363,1.552,364,2.653,366,1.772,367,1.634,370,2.678,374,4.764,392,1.384,406,1.374,407,1.488,420,2.129,421,1.457,423,2.855,444,2.753,447,3.48,448,1.748,449,1.663,452,4.926,454,2.994,469,1.19,472,2.597,476,4.069,479,3.32,489,1.457,495,5.252,501,2.61,502,1.433,503,1.537,507,1.544,518,2.06,522,5.49,523,1.798,524,1.936,526,2.139,542,3.063,548,2.037,549,2.234,552,2.234,588,1.839,589,4.183,591,4.976,592,1.936,593,1.529,594,2.168,595,1.936,596,2.873,597,1.994,598,2.892,599,2.973,600,3.287,601,3.848,602,2.796,603,1.575,604,1.772,605,2.234,606,3.516,607,2.685,608,2.355,609,1.854,610,1.349,611,1.4,612,1.994,613,1.974,614,2.355,615,1.748,616,2.111,617,1.608,618,2.404,619,1.567,620,2.139,621,1.488,622,3.255,623,1.451,624,2.753,625,4.267,626,2.355,627,1.599,628,2.355,629,1.725,630,1.76,631,1.725,632,1.885,633,1.811,634,1.725]],["component/17",[11,0.279,108,0.486]],["title/18-1",[596,42.614,635,69.076]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18-2",[495,42.191]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["title/18-3",[71,33.961]],["name/18-3",[]],["text/18-3",[]],["component/18-3",[]],["title/18-4",[444,49.639]],["name/18-4",[]],["text/18-4",[]],["component/18-4",[]],["title/18-5",[56,59.878]],["name/18-5",[]],["text/18-5",[]],["component/18-5",[]],["title/18",[0,24.493,11,11.796,18,22.852]],["name/18",[636,2.036]],["text/18",[0,2.752,4,1.459,8,1.371,9,1.464,10,1.757,11,2.469,12,1.673,13,2.592,14,1.445,15,1.633,16,1.837,18,2.568,22,1.932,27,3.671,32,1.492,34,1.847,35,2.518,36,3.017,39,4.319,40,3.713,42,3.614,43,3.05,45,3.893,47,1.523,48,3.676,50,1.312,54,2.008,55,2.036,56,5.413,57,3.735,63,2.79,67,2.458,69,3.22,71,2.111,77,1.071,81,2.438,84,1.877,89,1.981,109,3.504,111,1.91,115,1.523,119,3.084,126,2.545,127,2.622,131,2.483,135,4.253,136,2.719,143,2.565,144,2.612,145,2.424,151,4.953,157,2.458,164,2.394,165,1.595,168,2.113,175,1.614,178,2.279,186,1.236,191,2.065,192,2.234,194,3.463,196,1.791,209,3.791,214,1.659,218,1.601,221,1.555,231,2.754,237,2.273,244,1.292,249,1.673,250,1.492,253,1.251,265,2.602,268,1.666,273,2.815,279,3.575,302,2.425,312,3.335,315,3.563,323,2.922,354,3.053,374,2.674,376,1.837,392,3.262,393,1.468,420,1.468,444,3.085,447,2.602,450,1.877,461,2.05,482,3.732,483,1.659,484,1.773,495,1.614,496,1.867,502,1.646,503,1.765,507,1.773,515,2.29,520,1.773,523,2.065,541,1.765,550,1.666,569,1.725,592,3.614,593,2.854,596,4.067,604,4.811,613,4.653,623,1.666,624,3.897,625,4.701,629,1.981,637,2.854,638,3.761,639,2.203,640,2.456,641,2.184,642,2.705,643,2.828,644,3.22,645,3.285,646,1.666,647,1.687,648,3.212,649,1.818,650,2.065,651,1.969,652,2.705,653,2.05,654,2.366,655,2.705,656,2.696,657,2.985,658,3.433,659,4.395,660,2.705,661,2.456,662,3.212,663,4.708,664,2.897,665,2.526,666,2.456,667,2.456,668,4.254,669,3.684,670,2.526,671,2.165,672,4.54,673,2.424,674,1.932,675,3.212,676,2.654,677,2.705,678,2.705,679,2.34,680,3.212,681,2.29,682,2.147,683,2.29,684,3.212,685,4.59,686,2.184,687,2.456,688,1.757,689,2.565,690,2.366,691,2.565,692,2.897,693,2.113,694,2.897,695,2.897,696,1.981,697,2.526]],["component/18",[11,0.279,108,0.486]],["title/19-1",[192,21.823,331,22.01,598,31.661,698,31.454]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[130,14.289,495,22.651,620,34.479,699,35.463,700,37.967]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[11,9.064,113,17.646,323,19.984,394,24.318,516,27.125]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19-4",[130,18.595,186,22.577,478,44.869]],["name/19-4",[]],["text/19-4",[]],["component/19-4",[]],["title/19-5",[51,40.373,52,45.438]],["name/19-5",[]],["text/19-5",[]],["component/19-5",[]],["title/19-6",[52,33.538,495,25.617,609,33.807,701,39.531]],["name/19-6",[]],["text/19-6",[]],["component/19-6",[]],["title/19-7",[65,28.505,93,33.208,633,38.003]],["name/19-7",[]],["text/19-7",[]],["component/19-7",[]],["title/19-8",[186,26.583,454,44.413]],["name/19-8",[]],["text/19-8",[]],["component/19-8",[]],["title/19-9",[52,38.592,113,22.964,139,28.818]],["name/19-9",[]],["text/19-9",[]],["component/19-9",[]],["title/19",[11,9.064,51,26.35,52,29.655,479,21.447,503,24.774]],["name/19",[51,0.658,52,0.74]],["text/19",[0,2.436,4,0.874,5,0.79,8,1.443,9,0.471,10,0.565,11,1.724,12,0.538,13,0.513,14,1.793,15,1.372,16,0.591,17,1.321,18,0.402,19,1.476,22,0.622,23,0.825,24,0.543,25,1.32,27,3.348,32,2.325,33,0.573,34,0.594,35,1.302,37,0.97,38,1.43,42,0.715,43,2.328,44,0.611,45,0.482,46,1.483,48,1.885,50,2.223,51,3.812,52,7.622,57,1.663,60,0.446,65,0.935,66,0.79,67,0.906,70,0.604,75,0.555,76,1.361,77,0.641,82,0.87,88,0.669,92,0.536,93,0.585,97,0.601,99,0.565,100,2.496,101,0.565,102,0.557,103,0.529,105,1.679,106,1.576,109,3.508,113,4.017,114,0.982,115,1.602,117,1.998,121,0.491,124,2.902,126,1.648,127,1.356,128,1.935,130,1.262,131,0.491,132,0.465,133,1.407,135,2.166,137,0.625,139,3.733,144,0.963,150,0.697,157,0.486,159,0.618,163,0.642,164,2.295,170,0.547,173,0.5,177,1.913,178,0.451,179,2.411,180,2.136,182,2.504,183,1.307,185,1.112,186,4.336,187,0.633,190,0.534,192,3.04,194,0.543,199,1.341,200,1.807,201,1.002,206,2.87,212,0.79,214,1.746,215,0.607,216,0.511,218,0.959,220,1.237,231,0.545,237,0.838,238,2.059,240,0.576,241,1.748,243,0.897,249,3.555,250,0.894,252,1.186,253,1.051,256,1.144,265,1.346,268,1.753,269,0.431,271,1.2,273,0.557,279,0.486,280,0.737,286,1.449,287,1.124,288,0.5,297,1.624,301,0.659,307,1.072,309,0.557,310,0.792,312,2.998,316,3.502,317,2.018,321,0.674,323,1.498,330,0.576,331,1.459,332,0.557,333,1.112,335,1.755,337,0.99,340,1.204,341,0.523,342,0.56,347,0.56,351,3.489,353,1.279,354,3.718,360,2.365,363,2.508,364,2.004,373,0.547,374,0.986,378,1.469,383,0.585,392,0.511,394,0.557,409,0.573,414,1.699,420,1.545,421,1.761,424,1.187,439,0.622,447,2.712,449,1.144,453,1.157,454,2.907,458,0.515,467,1.332,469,3.023,470,0.65,472,4.869,473,1.924,478,6.14,479,1.608,481,1.654,489,1.406,491,1.332,495,5.032,496,2.628,502,1.383,503,2.75,507,1.062,516,4.706,518,0.761,519,0.674,520,1.062,522,2.123,523,4.567,524,1.332,532,0.659,541,1.483,542,0.68,543,1.835,544,0.825,558,0.547,572,0.594,593,1.052,595,1.869,596,1.665,597,1.372,598,2.473,599,2.157,609,2.641,610,0.498,611,0.517,612,0.737,613,0.729,617,1.106,620,4.737,621,1.024,622,0.722,624,1.998,625,3.224,631,1.665,633,1.246,634,0.637,638,0.744,646,0.998,655,0.87,658,2.223,666,0.79,668,1.894,681,1.372,686,0.703,688,0.565,698,0.637,699,4.872,700,6.587,701,0.801,702,1.462,703,0.633,704,0.87,705,0.992,706,0.909,707,1.211,708,1.59,709,1.924,710,0.854,711,1.471,712,1.372,713,1.047,714,0.87,715,1.033,716,1.735,717,6.523,718,1.286,719,2.49,720,5.439,721,2.699,722,1.157,723,1.033,724,3.983,725,3.983,726,1.164,727,3.38,728,3.983,729,0.992,730,1.033,731,1.033,732,1.033,733,1.033,734,1.033,735,4.521,736,3.983,737,1.033,738,1.033,739,1.536,740,1.033,741,0.737,742,1.033,743,0.68,744,2.699,745,1.033,746,0.761,747,2.699,748,0.722,749,1.033,750,2.699,751,0.664,752,0.674,753,0.557,754,1.033,755,0.932,756,0.622,757,1.536,758,0.87,759,0.897,760,0.932,761,1.924,762,1.033,763,1.735,764,1.106,765,1.372,766,1.033,767,1.228,768,0.79,769,1.033,770,0.79,771,0.642,772,0.597,773,0.576,774,0.761,775,0.932,776,0.753,777,3.611,778,0.825,779,1.372,780,1.924,781,1.033,782,1.924,783,1.033,784,0.932,785,0.801,786,1.857,787,1.735,788,1.297,789,1.989,790,2.699,791,1.452,792,2.7,793,0.909,794,1.819,795,3.997,796,0.65,797,1.471,798,0.547,799,4.521,800,1.735,801,0.932,802,0.909,803,0.825,804,1.033,805,1.735,806,1.286,807,1.033,808,1.033,809,0.825,810,0.932,811,0.744,812,2.435,813,1.033,814,1.033,815,0.854,816,0.597,817,0.932,818,0.669,819,1.735,820,1.033,821,0.909,822,0.998,823,0.761,824,1.62,825,1.033,826,1.434,827,0.664,828,1.033,829,1.033,830,3.38,831,1.033,832,1.033,833,1.033,834,1.924,835,0.611,836,1.033,837,0.825,838,1.033,839,0.932,840,0.932,841,0.691,842,1.286,843,1.924,844,1.033,845,1.033,846,1.033,847,1.924,848,1.033,849,1.033,850,1.033,851,1.033,852,1.033,853,1.735,854,1.735,855,1.033,856,0.65,857,0.646,858,1.033,859,1.372,860,1.924,861,0.737,862,0.659,863,1.15,864,0.664,865,4.581,866,1.033,867,0.87,868,0.761,869,0.646,870,0.65,871,0.642,872,1.033,873,1.033,874,1.735,875,1.033,876,2.435,877,1.033,878,1.033,879,0.65,880,0.737,881,0.761,882,0.932,883,1.033,884,1.033,885,1.033,886,1.033,887,0.737,888,1.924,889,1.033,890,1.033,891,1.033,892,1.033,893,2.699,894,1.033,895,1.033,896,1.033,897,1.033,898,1.033,899,1.033,900,1.033]],["component/19",[11,0.279,108,0.486]],["title/20-1",[887,59.878]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20-2",[901,56.611]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["title/20-3",[127,34.706,592,47.83]],["name/20-3",[]],["text/20-3",[]],["component/20-3",[]],["title/20-4",[81,25.551,133,28.76]],["name/20-4",[]],["text/20-4",[]],["component/20-4",[]],["title/20-5",[902,70.719]],["name/20-5",[]],["text/20-5",[]],["component/20-5",[]],["title/20",[11,10.251,40,22.669,48,28.428,56,36.356]],["name/20",[56,0.802,774,0.829]],["text/20",[4,1.219,8,1.145,9,2.05,10,3.177,11,2.367,12,1.397,13,1.332,14,2.024,15,2.287,16,1.534,17,1.313,18,3.699,27,3.768,31,1.933,32,2.09,35,1.294,40,1.193,47,1.272,48,3.239,50,1.838,53,1.751,56,5.844,57,1.12,60,1.158,63,1.434,71,1.819,77,1.936,81,2.515,89,1.655,92,1.392,96,2.6,106,2.097,109,1.238,113,1.761,114,1.369,115,2.754,116,1.688,118,1.353,121,1.276,126,2.193,127,4.375,130,1.841,133,1.873,139,2.209,141,2.812,143,2.143,144,1.343,163,1.666,165,1.332,170,1.421,180,1.267,182,2.251,186,2.915,192,1.148,196,1.496,209,1.542,210,1.526,214,3.001,215,1.577,225,1.001,229,1.634,231,2.373,237,1.959,244,1.81,249,2.343,250,1.246,252,2.987,253,1.752,268,1.392,269,5.156,271,1.193,272,2.614,273,1.447,279,3.566,281,4.378,293,1.023,299,1.23,302,3.159,307,1.496,312,3.825,317,2.343,318,1.725,323,1.189,330,1.496,333,1.551,335,2.559,340,2.006,364,1.189,368,1.526,376,1.534,380,1.559,382,1.913,407,1.428,409,1.488,420,1.226,421,1.397,447,1.337,453,1.614,479,2.14,482,4.287,495,1.348,502,2.305,503,1.474,506,3.032,520,2.484,523,2.892,543,1.824,558,1.421,582,1.327,589,1.875,592,5.244,593,1.467,595,1.857,604,2.851,610,3.28,615,1.677,619,1.503,621,1.428,637,1.467,643,1.454,644,1.655,645,1.688,646,2.333,647,1.409,650,1.725,682,1.793,685,2.359,686,4.623,687,3.44,688,1.467,689,3.593,690,1.976,691,2.143,692,2.42,693,1.764,713,1.46,726,1.624,785,2.08,796,1.688,818,1.738,822,1.392,827,3.735,862,1.712,863,1.604,903,2.576,904,1.893,905,2.259,906,2.42,907,1.913,908,1.84,909,1.542,910,1.7,911,2.259,912,2.143,913,2.025,914,2.306,915,2.42,916,2.682,917,1.454,918,2.42,919,2.42,920,4.498,921,1.751,922,1.738,923,2.682,924,2.682,925,1.857,926,1.976,927,3.44,928,2.682,929,1.725,930,2.11,931,2.682,932,2.682,933,3.241,934,1.688,935,4.498,936,3.996,937,2.682,938,1.725,939,2,940,5.196,941,2.42,942,2.42,943,2.42,944,2.08,945,2.42,946,2.025,947,2.42,948,2.682,949,2.051,950,1.824,951,2.871,952,2.259,953,2.42,954,2.08,955,2.08,956,2.42,957,1.415,958,2.42,959,2.42,960,2.682,961,2.143,962,2.682,963,2.259,964,2.42,965,4.498,966,4.498,967,2.682,968,2.42,969,2.682,970,2.051,971,1.808,972,1.172,973,2.259,974,1.824,975,1.688,976,2.259,977,1.577,978,1.764,979,2.217,980,1.913,981,1.893,982,3.114,983,2.259,984,2.659,985,3.717,986,2.143,987,1.976,988,2.576]],["component/20",[11,0.279,108,0.486]],["title/21-1",[887,59.878]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["title/21-2",[588,55.237]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["title/21-3",[591,59.878]],["name/21-3",[]],["text/21-3",[]],["component/21-3",[]],["title/21-4",[133,28.76,589,48.285]],["name/21-4",[]],["text/21-4",[]],["component/21-4",[]],["title/21-5",[672,50.223]],["name/21-5",[]],["text/21-5",[]],["component/21-5",[]],["title/21-6",[130,21.893,131,32.861]],["name/21-6",[]],["text/21-6",[]],["component/21-6",[]],["title/21-7",[337,35.541,498,52.828]],["name/21-7",[]],["text/21-7",[]],["component/21-7",[]],["title/21",[11,9.064,40,20.044,48,25.137,54,28.183,55,28.573]],["name/21",[40,0.346,774,0.573,989,0.777]],["text/21",[0,3.442,4,0.802,8,0.754,9,1.428,10,0.966,11,2.23,12,0.92,13,2.541,14,3.367,15,0.898,16,1.01,17,0.864,18,0.688,19,0.966,27,3.423,30,3.078,32,2.377,33,0.98,34,2.429,35,2.825,36,1.021,40,4.149,41,0.98,43,2.47,44,1.853,46,0.97,47,2.003,48,4.172,49,1.135,50,1.727,53,1.153,54,4.052,55,4.448,60,1.353,67,1.476,69,3.999,71,2.838,73,1.089,77,2.34,81,1.563,84,1.032,93,0.999,103,0.905,105,1.557,106,1.461,109,1.95,111,1.05,112,1.162,113,3.734,117,1.044,118,0.891,119,1.976,121,1.491,126,2.06,127,1.575,129,1.287,130,2.371,131,4.539,133,1.759,135,1.357,137,1.069,139,0.867,144,1.569,148,1.612,151,4.647,157,1.476,163,1.946,164,4.376,165,0.877,169,0.985,171,1.044,178,0.771,179,1.069,180,1.481,182,2.561,183,0.683,186,1.969,191,3.766,197,1.135,199,2.909,200,1.675,202,3.159,205,0.731,206,3.703,209,1.802,210,1.783,214,0.912,216,0.874,218,2.107,231,0.932,232,2.76,237,0.769,241,1.144,249,0.92,250,1.456,251,1.032,252,2.848,253,0.688,256,1.05,265,1.563,269,3.123,272,1.026,273,0.952,279,2.409,287,2.47,288,0.855,302,1.963,305,0.783,306,1.812,310,1.291,312,2.247,315,0.829,316,4.073,317,1.704,321,2.046,323,0.783,330,0.985,331,2.798,333,1.812,335,0.778,337,1.612,340,1.884,347,2.29,351,1.874,352,1.921,354,1.957,356,1.298,363,1.739,364,2.596,370,1.015,371,1.6,374,3.001,392,1.551,394,0.952,407,3.117,420,1.433,421,0.92,423,1.921,444,2.498,447,2.551,448,1.104,449,1.05,457,1.171,469,3.509,472,1.747,474,2.309,476,3.983,479,3.084,489,2.665,495,4.688,496,3.404,497,1.135,501,1.756,502,1.606,518,1.301,520,0.975,523,4.168,524,1.223,542,1.162,549,1.41,553,2.235,562,3.042,588,1.162,589,4.094,591,4.176,592,2.926,593,1.714,594,1.369,595,2.17,596,1.933,597,1.259,598,1.946,599,2.697,600,2.212,601,2.59,602,1.766,603,0.994,604,3.242,605,1.41,606,2.366,607,1.696,609,1.171,610,0.852,611,2.115,613,1.246,614,1.487,616,2.366,617,1.015,621,0.94,623,1.626,624,2.498,625,1.259,627,1.01,628,1.487,629,1.089,630,1.111,631,1.089,632,1.19,633,3.794,634,1.089,643,0.957,646,0.916,656,1.619,658,2.779,668,1.756,672,5.29,677,3.558,678,1.487,690,1.301,722,1.062,743,1.162,752,1.153,753,0.952,759,0.823,794,2.113,796,1.111,798,0.936,806,1.18,816,1.021,822,0.916,864,4.512,868,1.301,871,1.096,901,1.19,917,1.698,974,1.201,990,2.503,991,1.259,992,1.593,993,1.41,994,1.487,995,1.973,996,3.542,997,1.973,998,2.756,999,3.324,1000,1.223,1001,1.593,1002,1.35,1003,1.246,1004,1.104,1005,1.487,1006,1.593,1007,2.827,1008,2.15,1009,1.223,1010,1.153,1011,2.061,1012,1.389,1013,2.827,1014,1.766,1015,1.487,1016,2.827,1017,1.593,1018,3.134,1019,1.766,1020,1.593,1021,3.812,1022,1.593,1023,1.593,1024,1.41,1025,1.766,1026,2.397,1027,1.593,1028,1.026,1029,1.766,1030,1.127,1031,1.459,1032,1.487,1033,1.487,1034,1.41]],["component/21",[11,0.279,108,0.486]],["title/22-1",[887,59.878]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["title/22-2",[588,55.237]],["name/22-2",[]],["text/22-2",[]],["component/22-2",[]],["title/22-3",[81,31.061]],["name/22-3",[]],["text/22-3",[]],["component/22-3",[]],["title/22-4",[113,27.038,479,32.861]],["name/22-4",[]],["text/22-4",[]],["component/22-4",[]],["title/22-5",[113,27.038,164,31.683]],["name/22-5",[]],["text/22-5",[]],["component/22-5",[]],["title/22-6",[81,25.551,150,46.568]],["name/22-6",[]],["text/22-6",[]],["component/22-6",[]],["title/22-7",[479,32.861,1035,38.326]],["name/22-7",[]],["text/22-7",[]],["component/22-7",[]],["title/22-8",[604,53.222]],["name/22-8",[]],["text/22-8",[]],["component/22-8",[]],["title/22-9",[904,59.275]],["name/22-9",[]],["text/22-9",[]],["component/22-9",[]],["title/22-10",[688,37.78,1036,39.1]],["name/22-10",[]],["text/22-10",[]],["component/22-10",[]],["title/22-11",[121,32.861,186,26.583]],["name/22-11",[]],["text/22-11",[]],["component/22-11",[]],["title/22-12",[142,33.442,702,37.431]],["name/22-12",[]],["text/22-12",[]],["component/22-12",[]],["title/22-13",[315,39.409]],["name/22-13",[]],["text/22-13",[]],["component/22-13",[]],["title/22-14",[469,29.4,509,49.256]],["name/22-14",[]],["text/22-14",[]],["component/22-14",[]],["title/22-15",[337,35.541,498,52.828]],["name/22-15",[]],["text/22-15",[]],["component/22-15",[]],["title/22",[11,11.796,40,26.084,48,32.712]],["name/22",[40,0.5,774,0.829]],["text/22",[0,2.05,4,2.23,7,1.356,8,1.272,9,0.975,10,0.634,11,1.966,12,0.604,13,1.063,14,0.963,15,1.088,16,0.663,18,2.281,19,0.634,22,0.697,23,0.926,24,1.566,25,1.468,26,0.611,27,2.823,32,2.722,33,0.643,34,1.714,35,1.789,36,0.67,37,0.585,40,2.783,41,0.643,43,2.168,46,0.637,48,2.068,50,0.874,54,0.724,55,1.889,57,1.548,59,0.715,60,2.335,61,1.419,62,0.781,65,1.04,67,2.047,68,1.503,71,1.758,73,0.715,77,0.994,78,0.625,81,1.372,84,0.677,85,0.976,88,0.751,89,1.32,92,0.601,97,0.674,99,0.634,100,0.64,101,0.634,102,0.625,103,0.594,105,0.576,106,0.54,109,0.535,112,0.762,113,3.574,114,0.591,115,3.909,119,0.542,121,2.068,126,2.12,127,1.864,128,2.101,130,1.556,133,0.891,135,0.502,141,2.619,142,1.036,144,1.071,148,1.101,151,1.566,157,1.008,164,2.686,165,1.063,170,1.134,171,1.265,172,0.614,173,1.036,175,2.184,176,3.961,177,0.656,180,1.011,182,3.133,183,2.265,185,0.477,186,4.046,188,0.643,190,0.599,192,2.101,200,1.144,209,0.666,213,1.482,218,1.486,220,2.385,221,0.561,222,0.826,225,1.833,229,0.706,232,1.154,242,0.646,243,0.54,244,2.357,249,4.181,250,1.385,252,1.91,253,0.451,256,0.689,257,0.795,265,0.578,269,5.229,271,3.227,272,2.156,273,0.625,279,1.403,281,2.838,286,1.149,288,1.036,293,2.062,299,0.981,302,2.514,305,0.514,306,1.237,307,2.068,310,0.477,312,2.377,313,0.775,315,2.304,317,0.467,318,1.376,320,0.972,321,1.397,322,0.795,323,0.948,324,0.756,330,1.662,331,0.5,333,1.237,335,0.511,337,1.101,340,0.517,341,1.083,352,0.71,354,2.013,360,0.606,361,0.596,363,0.643,364,0.514,369,0.74,371,1.092,374,0.594,376,0.663,379,0.745,380,1.244,384,0.631,393,0.53,394,1.154,406,0.569,407,1.139,420,1.696,421,1.553,424,1.839,446,3.1,447,1.849,448,0.724,453,2.232,458,1.067,469,0.911,470,2.335,472,0.646,479,2.786,482,0.656,483,1.54,489,2.264,495,2.467,497,0.745,501,0.649,502,1.527,503,1.176,505,1.407,507,1.181,509,1.526,510,0.926,515,2.645,520,0.64,523,1.916,540,0.697,541,2.038,543,0.788,551,1.916,558,0.614,577,0.875,582,1.475,591,2.125,593,1.63,599,1.902,604,4.409,606,0.875,610,1.438,611,1.071,619,1.199,621,0.617,624,0.685,627,0.663,629,0.715,634,0.715,640,0.886,643,0.628,646,1.11,647,1.124,650,1.376,651,0.71,656,0.599,668,1.199,671,0.781,681,0.826,686,4.257,688,2.029,689,4.321,690,2.196,702,1.615,712,0.826,726,1.295,748,0.81,752,0.756,759,1.729,773,0.646,785,0.899,786,1.638,796,0.729,800,1.376,818,0.751,822,1.546,823,0.854,839,1.046,862,2.775,868,0.854,869,1.338,879,0.729,880,0.826,904,2.104,909,1.23,918,2.689,925,0.802,926,1.577,927,0.886,929,0.745,933,4.221,934,3.09,936,4.718,938,1.376,939,2.222,940,4.019,941,1.046,942,1.046,943,1.046,944,0.899,945,1.93,946,0.875,947,1.046,949,0.886,950,0.788,951,1.366,952,0.976,953,1.93,954,1.659,955,0.899,956,1.046,957,1.129,958,1.046,959,1.046,961,1.709,963,0.976,964,1.046,968,1.046,971,0.781,972,1.302,973,1.802,974,0.788,976,0.976,981,1.51,982,2.064,996,0.802,1007,1.93,1011,1.407,1024,2.381,1031,0.958,1032,0.976,1033,0.976,1034,0.926,1035,1.654,1036,2.099,1037,0.81,1038,1.159,1039,0.795,1040,1.046,1041,1.046,1042,1.314,1043,1.046,1044,1.046,1045,1.636,1046,2.645,1047,1.93,1048,2.14,1049,1.159,1050,2.14,1051,2.14,1052,1.159,1053,1.159,1054,1.93,1055,1.709,1056,0.788,1057,3.921,1058,0.912,1059,4.347,1060,4.429,1061,0.926,1062,1.659,1063,2.14,1064,0.826,1065,1.577,1066,1.159,1067,0.958,1068,1.159,1069,1.046,1070,1.159,1071,0.958,1072,0.926,1073,1.159,1074,1.93,1075,1.43,1076,1.159,1077,1.737,1078,1.802,1079,2.253,1080,1.314,1081,1.159,1082,1.159,1083,1.159,1084,2.196,1085,1.159,1086,0.591,1087,1.737,1088,1.076,1089,0.802,1090,1.802,1091,1.046,1092,1.046,1093,1.046,1094,1.019,1095,0.976,1096,1.93,1097,1.93,1098,3.346,1099,1.046,1100,1.159,1101,1.159,1102,1.272,1103,1.046,1104,1.802,1105,2.98,1106,2.98,1107,2.906,1108,0.715,1109,1.455,1110,0.941,1111,0.976,1112,1.244,1113,1.159,1114,1.159,1115,1.159,1116,0.864,1117,1.159,1118,1.159,1119,0.844,1120,1.159,1121,0.926,1122,1.046,1123,3.921,1124,1.159,1125,1.314,1126,1.314,1127,1.159,1128,2.956,1129,0.71,1130,0.826,1131,0.756,1132,0.976,1133,1.046,1134,0.67,1135,1.804,1136,0.886,1137,0.875,1138,1.159,1139,1.046,1140,1.159,1141,1.314,1142,0.795,1143,1.636,1144,0.941,1145,0.899,1146,1.159,1147,2.14,1148,2.98,1149,1.314,1150,1.046,1151,1.159,1152,1.159,1153,1.159,1154,0.781,1155,0.958,1156,0.926,1157,1.019,1158,1.159,1159,0.926,1160,1.159,1161,1.93,1162,2.14,1163,1.314,1164,1.159,1165,0.637,1166,1.046,1167,0.802,1168,1.046,1169,1.159,1170,1.709,1171,1.046,1172,0.762,1173,0.788,1174,1.046,1175,1.046]],["component/22",[11,0.279,108,0.486]],["title/23-1",[113,27.038,497,44.413]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23-2",[6,46.568,43,40.373]],["name/23-2",[]],["text/23-2",[]],["component/23-2",[]],["title/23-3",[131,24.255,148,26.233,331,22.01,798,27.017]],["name/23-3",[]],["text/23-3",[]],["component/23-3",[]],["title/23-4",[130,18.595,148,30.186,1176,52.928]],["name/23-4",[]],["text/23-4",[]],["component/23-4",[]],["title/23-5",[132,26.405,240,32.712,1177,46.864]],["name/23-5",[]],["text/23-5",[]],["component/23-5",[]],["title/23-6",[244,23.606,759,27.351,1178,52.928]],["name/23-6",[]],["text/23-6",[]],["component/23-6",[]],["title/23-7",[244,23.606,759,27.351,936,34.483]],["name/23-7",[]],["text/23-7",[]],["component/23-7",[]],["title/23-8",[917,45.503]],["name/23-8",[]],["text/23-8",[]],["component/23-8",[]],["title/23-9",[17,24.953,305,22.6,535,32.782,562,30.315]],["name/23-9",[]],["text/23-9",[]],["component/23-9",[]],["title/23-10",[126,28.608,130,18.595,221,28.403]],["name/23-10",[]],["text/23-10",[]],["component/23-10",[]],["title/23-11",[130,16.16,237,22.202,258,38.994,359,28.289]],["name/23-11",[]],["text/23-11",[]],["component/23-11",[]],["title/23-12",[17,28.713,130,18.595,562,34.882]],["name/23-12",[]],["text/23-12",[]],["component/23-12",[]],["title/23-13",[17,24.953,204,32.091,227,25.326,305,22.6]],["name/23-13",[]],["text/23-13",[]],["component/23-13",[]],["title/23-14",[17,22.064,96,26.062,497,28.987,562,26.805,577,34.033]],["name/23-14",[]],["text/23-14",[]],["component/23-14",[]],["title/23-15",[17,28.713,305,26.006,1179,46.864]],["name/23-15",[]],["text/23-15",[]],["component/23-15",[]],["title/23-16",[917,45.503]],["name/23-16",[]],["text/23-16",[]],["component/23-16",[]],["title/23-17",[130,18.595,180,27.72,864,37.722]],["name/23-17",[]],["text/23-17",[]],["component/23-17",[]],["title/23-18",[305,30.619,1180,57.081]],["name/23-18",[]],["text/23-18",[]],["component/23-18",[]],["title/23-19",[11,11.796,185,24.166,1102,34.882]],["name/23-19",[]],["text/23-19",[]],["component/23-19",[]],["title/23-20",[243,23.769,1181,62.853,1182,38.015]],["name/23-20",[]],["text/23-20",[]],["component/23-20",[]],["title/23-21",[243,27.351,496,34.101,864,37.722]],["name/23-21",[]],["text/23-21",[]],["component/23-21",[]],["title/23-22",[187,51.473]],["name/23-22",[]],["text/23-22",[]],["component/23-22",[]],["title/23-23",[356,21.114,535,32.782,562,30.315,1183,40.727]],["name/23-23",[]],["text/23-23",[]],["component/23-23",[]],["title/23-24",[917,45.503]],["name/23-24",[]],["text/23-24",[]],["component/23-24",[]],["title/23-25",[293,19.435,305,22.6,562,30.315,1184,45.997]],["name/23-25",[]],["text/23-25",[]],["component/23-25",[]],["title/23-26",[293,22.364,562,34.882,1116,43.743]],["name/23-26",[]],["text/23-26",[]],["component/23-26",[]],["title/23-27",[293,26.331,393,31.582]],["name/23-27",[]],["text/23-27",[]],["component/23-27",[]],["title/23-28",[81,18.859,305,22.6,310,21.002,1185,45.997]],["name/23-28",[]],["text/23-28",[]],["component/23-28",[]],["title/23-29",[225,21.9,293,22.364,305,26.006]],["name/23-29",[]],["text/23-29",[]],["component/23-29",[]],["title/23-30",[243,21.017,293,17.185,562,40.493,1165,24.774]],["name/23-30",[]],["text/23-30",[]],["component/23-30",[]],["title/23-31",[917,45.503]],["name/23-31",[]],["text/23-31",[]],["component/23-31",[]],["title/23-32",[225,25.422,293,17.185,319,31.216,1112,26.204]],["name/23-32",[]],["text/23-32",[]],["component/23-32",[]],["title/23-33",[225,19.032,293,19.435,1112,29.636,1186,29.316]],["name/23-33",[]],["text/23-33",[]],["component/23-33",[]],["title/23-34",[225,19.032,293,19.435,1112,29.636,1187,34.981]],["name/23-34",[]],["text/23-34",[]],["component/23-34",[]],["title/23-35",[130,18.595,225,21.9,319,40.623]],["name/23-35",[]],["text/23-35",[]],["component/23-35",[]],["title/23-36",[225,13.664,293,13.954,305,16.226,551,23.536,1186,21.048,1188,24.893,1189,30.829]],["name/23-36",[]],["text/23-36",[]],["component/23-36",[]],["title/23-37",[67,27.626,225,21.9,319,40.623]],["name/23-37",[]],["text/23-37",[]],["component/23-37",[]],["title/23-38",[917,45.503]],["name/23-38",[]],["text/23-38",[]],["component/23-38",[]],["title/23-39",[293,22.364,305,26.006,1179,46.864]],["name/23-39",[]],["text/23-39",[]],["component/23-39",[]],["title/23-40",[917,45.503]],["name/23-40",[]],["text/23-40",[]],["component/23-40",[]],["title/23-41",[96,33.915,535,37.722,562,34.882]],["name/23-41",[]],["text/23-41",[]],["component/23-41",[]],["title/23-42",[130,16.16,237,22.202,359,28.289,535,32.782]],["name/23-42",[]],["text/23-42",[]],["component/23-42",[]],["title/23-43",[27,12.874,227,18.183,237,15.94,293,13.954,359,20.311,562,34.465]],["name/23-43",[]],["text/23-43",[]],["component/23-43",[]],["title/23-44",[17,24.953,96,29.474,535,32.782,562,30.315]],["name/23-44",[]],["text/23-44",[]],["component/23-44",[]],["title/23-45",[917,45.503]],["name/23-45",[]],["text/23-45",[]],["component/23-45",[]],["title/23-46",[469,29.4,509,49.256]],["name/23-46",[]],["text/23-46",[]],["component/23-46",[]],["title/23",[11,9.064,18,17.56,43,26.35,45,21.017,53,29.425]],["name/23",[43,0.454,45,0.362,53,0.507]],["text/23",[0,0.901,4,0.154,8,0.145,9,0.254,10,0.246,11,1.574,12,0.06,13,0.057,14,1.416,15,0.229,16,0.066,17,3.966,18,1.619,19,0.186,20,0.111,21,0.722,22,0.069,24,0.404,26,0.061,27,2.807,30,0.406,32,0.308,35,1.484,36,0.197,37,0.59,38,0.462,40,0.051,41,0.25,42,0.158,43,2.833,44,0.805,45,0.159,46,0.187,47,0.777,48,0.19,49,0.147,50,1.37,53,0.149,54,0.415,57,0.233,60,0.376,61,0.076,62,0.229,63,0.062,65,0.926,66,0.175,67,0.362,68,0.335,69,0.071,70,0.388,71,0.907,72,0.106,73,0.071,75,1.023,76,0.872,77,2.2,78,0.183,80,0.354,81,1.829,84,0.851,89,0.141,90,0.335,92,0.556,93,0.316,95,0.24,96,1.101,97,0.261,99,0.246,100,0.424,101,0.246,102,0.525,103,0.6,105,0.859,106,1.193,109,2.096,111,0.267,112,0.076,113,3.148,114,1.016,115,0.777,116,1.089,117,0.692,118,0.115,119,0.502,120,0.181,121,0.265,122,0.129,123,0.15,124,0.084,125,0.406,126,2.655,127,0.732,128,2.095,129,1.561,130,2.445,131,0.603,132,0.896,133,2.486,134,0.75,135,1.108,136,0.854,137,0.138,138,0.121,139,0.112,140,0.572,141,1.125,142,0.705,144,0.058,148,1.472,157,0.263,158,0.079,159,0.397,161,0.309,163,0.072,164,0.156,165,0.114,169,0.064,170,1.01,171,0.201,172,0.568,173,0.165,176,1.379,178,0.244,179,1.947,180,1.454,181,0.208,182,0.954,183,1.02,184,0.61,185,1.296,186,0.799,187,0.777,188,1.587,190,0.397,191,1.388,192,1.519,193,0.173,194,0.061,196,0.19,197,1.054,198,0.433,199,2.202,200,1.999,201,0.854,202,1.983,203,0.251,204,3.454,205,1.574,206,2.531,208,0.809,210,0.721,212,0.26,213,0.08,214,1.116,215,0.134,216,0.38,217,1.534,218,0.862,221,1.277,222,0.082,224,0.088,225,3.569,226,0.714,227,2.148,229,0.531,230,0.071,231,0.061,232,1.028,234,0.598,235,0.26,236,0.685,237,1.517,238,1.054,240,0.486,241,1.452,242,0.19,243,1.772,244,4.032,245,0.77,246,0.296,249,1.125,250,0.452,251,0.067,252,2.315,253,0.674,257,0.527,258,2.859,265,0.726,268,0.344,269,5.119,271,3.471,272,1.107,273,0.358,275,0.192,276,0.214,279,1.671,281,0.842,282,0.158,285,0.669,286,0.522,287,0.509,288,0.422,289,0.91,292,0.314,293,3.349,295,0.085,297,0.762,298,1.829,299,3.154,300,0.489,301,0.87,302,0.308,303,0.233,304,0.53,305,1.892,306,0.948,307,2.783,308,0.274,309,1.165,310,1.462,311,0.614,312,1.321,313,0.227,314,0.47,315,0.312,316,3.228,317,2.468,319,2.545,321,1.244,322,2.013,323,0.92,324,0.294,325,0.49,326,0.379,327,0.203,329,0.079,330,2.411,331,0.86,332,0.062,333,0.62,335,2.114,337,1.277,339,0.071,340,1.749,341,3.241,342,0.244,343,0.082,345,0.331,347,0.416,348,1.452,350,0.505,351,3.358,352,0.657,353,0.508,354,1.457,356,2.325,357,0.154,358,0.155,359,2.074,360,0.762,361,0.175,363,1.897,364,0.845,366,0.864,367,0.388,368,0.193,369,0.074,370,0.673,371,0.339,373,0.18,374,1.231,375,0.877,376,0.38,378,1.713,380,0.386,381,0.092,382,0.835,383,0.065,384,0.584,389,0.53,390,2.344,392,1.788,393,3.158,394,0.981,401,0.168,406,0.274,407,0.297,409,0.368,414,0.484,420,0.791,421,0.559,423,0.208,424,0.955,426,0.331,429,0.47,431,0.192,439,0.271,441,0.272,444,0.068,446,0.082,447,0.434,448,0.415,450,0.134,452,0.615,453,0.138,455,0.075,457,0.509,458,0.224,459,0.192,461,0.49,467,0.46,468,0.272,469,0.698,473,0.082,476,0.078,479,0.162,484,0.248,489,0.507,495,0.226,496,1.057,497,4.758,501,0.919,502,2.04,503,0.063,505,0.224,507,0.646,509,0.473,510,0.183,511,0.667,514,0.321,515,0.321,519,0.569,520,0.481,524,0.08,526,0.088,527,0.148,528,0.317,529,0.071,532,0.287,533,0.07,535,4.931,536,0.359,538,0.245,540,1.446,541,0.696,542,0.573,543,0.078,546,0.344,547,0.903,550,0.344,551,1.596,552,0.092,553,0.082,556,0.092,557,0.166,558,0.238,560,0.26,561,0.584,562,5.449,563,0.877,564,0.104,565,0.104,566,0.104,567,0.104,568,0.104,569,4.227,570,0.104,571,3.914,572,4.038,573,1.941,574,0.406,575,0.406,576,1.169,577,2.53,578,0.307,579,1.397,580,1.143,581,0.786,582,3.711,583,0.104,584,0.379,585,0.307,587,1.088,593,0.125,596,0.071,598,1.018,599,0.217,603,0.374,606,0.173,608,0.286,610,0.056,611,0.682,612,0.163,615,0.072,617,0.066,621,1.014,622,0.314,623,0.119,624,1.981,625,1.713,627,0.131,629,0.277,630,0.073,631,0.071,634,0.071,637,0.477,639,0.157,641,0.451,642,0.097,643,0.244,644,0.21,646,0.119,647,0.061,649,0.129,650,0.074,654,0.489,660,0.192,661,0.088,667,0.175,668,0.128,670,0.091,672,2.236,673,0.087,674,0.069,683,0.082,688,0.063,690,0.085,693,0.076,696,0.141,697,0.18,698,0.141,702,0.302,703,0.534,710,0.095,711,0.088,718,0.911,722,0.704,726,0.465,739,0.935,741,0.163,743,0.076,748,0.16,751,0.074,752,0.764,753,0.301,756,0.069,759,1.594,764,0.673,767,0.217,768,0.175,771,0.477,772,0.62,773,0.127,776,0.635,786,0.126,788,1.566,789,0.085,791,0.173,794,0.229,798,0.462,800,1.169,803,0.092,806,0.153,816,0.677,817,0.104,822,1.033,826,0.495,835,0.634,837,0.359,854,0.104,856,0.418,857,0.072,862,0.287,863,0.758,864,3.3,865,0.097,869,0.545,871,0.541,874,0.206,879,0.214,880,0.242,881,0.085,887,0.321,901,0.154,902,0.192,906,0.104,907,0.321,908,0.079,909,0.131,917,0.527,936,0.801,938,0.074,949,0.088,951,0.989,957,0.294,972,0.794,974,0.306,975,0.917,977,0.068,978,0.15,980,0.082,991,0.398,993,0.092,995,0.351,997,0.144,1003,0.081,1008,0.309,1010,0.075,1011,0.076,1012,0.18,1013,1.229,1015,1.067,1028,0.623,1030,0.287,1035,0.756,1036,0.979,1037,0.16,1039,0.309,1046,0.473,1057,0.104,1065,2.319,1074,0.206,1075,0.077,1084,0.085,1102,0.753,1107,0.153,1108,0.071,1109,0.078,1112,1.948,1116,0.416,1129,0.14,1130,0.082,1135,0.07,1136,0.969,1137,0.173,1142,0.233,1143,0.588,1145,0.089,1165,0.749,1167,0.158,1170,0.092,1171,0.104,1172,0.505,1176,0.206,1177,0.272,1178,0.786,1179,1.237,1180,0.967,1181,3.252,1182,1.792,1183,0.857,1184,0.206,1185,1.948,1186,0.559,1187,0.455,1188,0.522,1189,3.096,1190,0.115,1191,0.085,1192,0.272,1193,0.206,1194,0.53,1195,0.676,1196,0.175,1197,0.307,1198,0.251,1199,0.104,1200,0.115,1201,0.115,1202,0.495,1203,0.104,1204,0.455,1205,0.092,1206,0.115,1207,0.115,1208,0.115,1209,0.307,1210,0.115,1211,0.107,1212,0.24,1213,0.115,1214,0.406,1215,0.248,1216,0.725,1217,0.335,1218,0.206,1219,0.115,1220,0.406,1221,0.307,1222,0.495,1223,0.45,1224,0.231,1225,0.115,1226,0.115,1227,0.34,1228,0.229,1229,0.115,1230,0.45,1231,0.229,1232,0.229,1233,0.229,1234,1.135,1235,0.53,1236,0.229,1237,0.229,1238,0.229,1239,0.115,1240,0.115,1241,0.192,1242,0.229,1243,0.206,1244,0.104,1245,0.111,1246,0.186,1247,0.115,1248,0.115,1249,2.779,1250,0.558,1251,0.396,1252,0.283,1253,0.351,1254,0.08,1255,0.115,1256,0.206,1257,0.34,1258,0.115,1259,0.34,1260,0.115,1261,0.115,1262,0.115,1263,0.115,1264,0.115,1265,0.229,1266,0.558,1267,0.34,1268,1.072,1269,0.34,1270,0.097,1271,0.101,1272,0.558,1273,0.094,1274,0.45,1275,0.34,1276,0.115,1277,0.445,1278,0.206,1279,0.229,1280,0.229,1281,0.229,1282,0.229,1283,0.229,1284,0.229,1285,0.229,1286,0.115,1287,0.115,1288,0.115,1289,0.115,1290,0.115,1291,0.229,1292,0.229,1293,0.115,1294,0.115,1295,0.115,1296,0.115,1297,0.115,1298,2.637,1299,0.229,1300,0.229,1301,0.229,1302,0.229,1303,0.229,1304,0.973,1305,0.229,1306,1.64,1307,0.115,1308,0.115,1309,0.115,1310,0.115,1311,0.115,1312,0.115,1313,0.115,1314,0.115,1315,0.973,1316,0.115,1317,0.115,1318,0.115,1319,0.115,1320,0.115,1321,0.115,1322,0.115,1323,0.092,1324,0.115,1325,0.085,1326,0.752,1327,0.314,1328,0.115,1329,0.115,1330,0.206,1331,0.664,1332,0.229,1333,0.229,1334,0.115,1335,0.406,1336,0.115,1337,0.115,1338,0.306,1339,0.34,1340,0.146,1341,0.34,1342,0.34,1343,0.076,1344,0.168,1345,0.45,1346,0.115,1347,0.115,1348,0.115,1349,0.115,1350,0.115,1351,0.104,1352,0.966,1353,0.356,1354,0.421,1355,0.421,1356,0.115,1357,0.097,1358,0.229,1359,0.115,1360,0.115,1361,0.115,1362,0.115,1363,0.206,1364,0.354,1365,0.115,1366,0.444,1367,0.321,1368,0.272,1369,0.34,1370,0.34,1371,0.34,1372,0.34,1373,0.34,1374,0.34,1375,0.206,1376,0.45,1377,0.229,1378,0.229,1379,0.664,1380,1.752,1381,0.229,1382,0.45,1383,0.45,1384,0.45,1385,0.45,1386,0.45,1387,0.558,1388,0.229,1389,0.45,1390,0.894,1391,0.688,1392,0.206,1393,0.097,1394,0.161,1395,0.104,1396,0.115,1397,0.088,1398,0.104,1399,0.47,1400,0.104,1401,0.115,1402,0.17,1403,0.115,1404,0.871,1405,0.183,1406,0.45,1407,0.34,1408,0.229,1409,1.905,1410,0.34,1411,1.345,1412,0.558,1413,0.696,1414,0.34,1415,0.26,1416,0.229,1417,1.012,1418,0.229,1419,0.45,1420,0.157,1421,0.359,1422,0.359,1423,0.359,1424,0.503,1425,1.362,1426,0.115,1427,0.115,1428,0.115,1429,0.115,1430,0.115,1431,0.34,1432,0.115,1433,0.115,1434,0.085,1435,0.084,1436,0.115,1437,0.104,1438,0.115,1439,0.115,1440,0.115,1441,0.115,1442,0.115,1443,0.115,1444,0.558,1445,0.229,1446,1.184,1447,0.34,1448,0.34,1449,0.45,1450,0.213,1451,0.503,1452,0.115,1453,0.115,1454,0.115,1455,0.115,1456,0.115,1457,0.115,1458,0.229,1459,0.229,1460,0.104,1461,0.115,1462,0.115,1463,0.115,1464,0.115,1465,0.115,1466,0.115,1467,0.229,1468,0.34,1469,0.115,1470,0.183,1471,1.032,1472,0.229,1473,0.229,1474,0.104,1475,0.229,1476,0.229,1477,0.229,1478,0.229,1479,0.229,1480,0.229,1481,0.45,1482,0.229,1483,0.115,1484,0.115,1485,0.115,1486,0.115,1487,0.115,1488,1.73,1489,0.115,1490,0.115,1491,0.115,1492,0.768,1493,0.331,1494,0.077,1495,0.085,1496,0.229,1497,0.115,1498,0.115,1499,0.229,1500,0.097,1501,0.115,1502,0.34,1503,0.095,1504,0.34,1505,0.085,1506,0.229,1507,0.229,1508,0.229,1509,0.115,1510,0.115,1511,0.445,1512,0.359,1513,0.104,1514,0.379,1515,0.45,1516,0.097,1517,0.115,1518,0.115,1519,0.286,1520,0.231,1521,0.379,1522,0.161,1523,0.101,1524,0.115,1525,0.192,1526,0.115,1527,0.115,1528,0.088,1529,0.115,1530,0.115,1531,0.115,1532,0.115,1533,0.229,1534,0.281,1535,0.115,1536,0.34,1537,0.104,1538,0.115,1539,0.104,1540,0.115,1541,0.115,1542,0.115,1543,0.115,1544,0.115,1545,0.115,1546,0.115,1547,0.104,1548,0.115,1549,0.229,1550,0.229,1551,0.115,1552,0.229,1553,0.115,1554,0.115,1555,0.115,1556,0.115,1557,0.115,1558,0.426,1559,0.723,1560,0.104,1561,0.115,1562,0.115,1563,0.115,1564,0.267,1565,0.115,1566,0.115,1567,0.075,1568,0.072,1569,0.387,1570,0.115,1571,0.115,1572,0.115,1573,0.115,1574,0.768,1575,1.456,1576,0.194,1577,0.34,1578,0.115,1579,0.115,1580,0.34,1581,1.456,1582,0.229,1583,0.45,1584,0.229,1585,0.115,1586,0.115,1587,0.115,1588,0.115,1589,0.115,1590,0.115,1591,0.115,1592,0.115,1593,0.115,1594,0.115,1595,0.115,1596,0.115,1597,0.34,1598,0.115,1599,0.104,1600,0.196,1601,0.768,1602,0.537,1603,0.349,1604,0.34,1605,0.307,1606,0.34,1607,0.183,1608,0.115,1609,0.299,1610,0.115,1611,0.115,1612,0.115,1613,0.074,1614,0.115,1615,0.097,1616,0.229,1617,0.229,1618,0.115,1619,0.088,1620,0.115,1621,0.115,1622,0.115,1623,0.45,1624,0.229,1625,0.229,1626,0.115,1627,0.115,1628,0.115,1629,0.115,1630,0.229,1631,0.115,1632,0.115,1633,0.115,1634,0.34,1635,0.115,1636,0.115,1637,0.115,1638,0.206,1639,0.307,1640,0.115,1641,0.115,1642,0.115,1643,0.115,1644,0.229,1645,0.19,1646,0.229,1647,0.092,1648,0.229,1649,0.078,1650,0.229,1651,0.229,1652,0.104,1653,0.558,1654,0.871,1655,1.17,1656,0.082,1657,0.45,1658,0.45,1659,0.115,1660,0.082,1661,0.115,1662,0.115,1663,0.696,1664,0.229,1665,1.456,1666,0.229,1667,0.664,1668,0.115,1669,0.229,1670,0.115,1671,0.115,1672,0.115,1673,0.115,1674,0.115,1675,0.115,1676,0.115,1677,0.115,1678,0.229,1679,0.34,1680,0.104,1681,0.558,1682,0.768,1683,0.768,1684,0.34,1685,0.115,1686,0.115,1687,0.083,1688,0.26,1689,0.115,1690,0.115,1691,0.664,1692,0.229,1693,0.206,1694,0.201,1695,0.432,1696,0.406,1697,0.091,1698,0.398,1699,0.115,1700,0.768,1701,0.309,1702,0.097,1703,0.45,1704,0.193,1705,0.145,1706,0.238,1707,0.083,1708,0.073,1709,0.379,1710,0.558,1711,0.45,1712,0.777,1713,0.245,1714,0.34,1715,0.45,1716,0.229,1717,0.115,1718,0.115,1719,0.115,1720,0.115,1721,0.115,1722,0.229,1723,0.115,1724,0.229,1725,0.229,1726,0.115,1727,0.229,1728,0.115,1729,0.115,1730,0.229,1731,1.229,1732,0.768,1733,1.64,1734,0.558,1735,0.115,1736,0.115,1737,0.115,1738,0.115,1739,0.115,1740,0.647,1741,1.56,1742,0.115,1743,0.115,1744,0.115,1745,0.115,1746,0.115,1747,0.115,1748,0.115,1749,0.229,1750,0.115,1751,0.115,1752,0.229,1753,0.115,1754,0.115,1755,0.115,1756,0.115,1757,0.115,1758,0.34,1759,0.34,1760,0.34,1761,0.34,1762,0.34,1763,0.34,1764,0.558,1765,0.229,1766,0.229,1767,0.229,1768,0.229,1769,0.229,1770,0.558,1771,0.229,1772,0.229,1773,0.229,1774,0.229,1775,0.229,1776,0.45,1777,0.115,1778,0.115,1779,0.115,1780,0.115,1781,0.115,1782,0.34,1783,0.34,1784,0.45,1785,0.115,1786,0.115,1787,0.115,1788,0.115,1789,0.115,1790,0.34,1791,0.34,1792,0.115,1793,0.416,1794,0.115,1795,0.115,1796,0.115,1797,0.115,1798,0.115,1799,0.115,1800,0.115,1801,0.115,1802,0.115,1803,0.664,1804,0.115,1805,0.34,1806,0.45,1807,0.229,1808,0.229,1809,0.229,1810,0.229,1811,0.229,1812,0.229,1813,0.34,1814,0.115,1815,0.229,1816,0.229,1817,0.229,1818,0.115,1819,0.229,1820,0.115,1821,0.115,1822,0.242,1823,0.115,1824,0.115,1825,0.115,1826,0.115,1827,0.115,1828,0.229,1829,0.115,1830,0.115,1831,0.115,1832,0.115,1833,0.115,1834,0.115,1835,0.115,1836,0.45,1837,0.307,1838,0.34,1839,0.229,1840,0.192,1841,0.115,1842,0.45,1843,0.45,1844,0.45,1845,0.34,1846,0.16,1847,0.115,1848,0.115,1849,0.115,1850,0.115,1851,0.115,1852,0.307,1853,0.115,1854,0.115,1855,0.115,1856,0.115,1857,0.115,1858,0.115,1859,0.34,1860,0.206,1861,0.229,1862,0.115,1863,0.104,1864,0.115,1865,0.115,1866,0.115,1867,0.115,1868,0.115,1869,0.115,1870,0.104,1871,0.115,1872,0.115,1873,0.115,1874,0.115,1875,0.115,1876,0.115,1877,0.558,1878,1.147,1879,0.115,1880,0.115,1881,0.115,1882,0.115,1883,0.115,1884,0.664,1885,0.34,1886,0.115,1887,0.115,1888,0.115,1889,0.229,1890,0.115,1891,0.558,1892,0.558,1893,0.229,1894,0.229,1895,0.229,1896,0.115,1897,0.115,1898,0.276,1899,0.161,1900,0.115,1901,0.154,1902,0.085,1903,0.104,1904,0.115,1905,0.115,1906,0.115,1907,0.115,1908,0.085,1909,0.115,1910,0.115,1911,0.115,1912,0.115,1913,0.115,1914,0.115,1915,0.115,1916,0.115,1917,0.115,1918,0.115,1919,0.115,1920,0.115,1921,0.115,1922,0.115,1923,0.115,1924,0.115,1925,0.115,1926,0.115,1927,0.115,1928,0.115,1929,0.104,1930,0.115,1931,0.115,1932,0.115,1933,0.115,1934,0.115,1935,0.115,1936,0.115,1937,0.115,1938,0.115,1939,0.115,1940,0.104,1941,0.115,1942,0.085,1943,0.26,1944,0.206,1945,0.693,1946,0.115,1947,0.45,1948,0.115,1949,0.115,1950,0.192,1951,0.115,1952,0.115,1953,0.115,1954,0.115,1955,0.115,1956,0.115,1957,0.115,1958,0.115,1959,0.115,1960,0.097,1961,0.115,1962,0.153,1963,0.082,1964,0.097,1965,0.092,1966,0.115,1967,0.115,1968,0.34,1969,0.115,1970,0.229,1971,0.229,1972,0.229,1973,0.229,1974,0.229,1975,0.229,1976,0.115,1977,0.104,1978,0.229,1979,0.229,1980,0.229,1981,0.229,1982,0.229,1983,0.34,1984,0.229,1985,0.115,1986,0.115,1987,0.229,1988,0.229,1989,0.229,1990,0.229,1991,0.229,1992,0.229,1993,0.115,1994,0.229,1995,0.229,1996,0.229,1997,0.229,1998,0.229,1999,0.229,2000,0.229,2001,0.229,2002,0.229,2003,0.286,2004,0.092,2005,0.251,2006,0.229,2007,0.115,2008,0.34,2009,0.104,2010,0.115,2011,0.115,2012,0.115,2013,0.115,2014,0.115,2015,0.115,2016,0.104,2017,0.115,2018,0.104,2019,0.115,2020,0.664,2021,0.45,2022,0.086,2023,0.115,2024,0.307,2025,0.34,2026,0.307,2027,0.34,2028,0.34,2029,0.115,2030,0.229,2031,0.115,2032,0.115,2033,0.115,2034,0.115,2035,0.115,2036,0.115,2037,0.115,2038,0.083,2039,0.076,2040,0.161,2041,0.115,2042,0.229,2043,0.599,2044,0.115,2045,0.664,2046,0.115,2047,0.115,2048,0.115,2049,0.229,2050,0.229,2051,0.115,2052,0.115,2053,0.229,2054,0.115,2055,0.115,2056,0.115,2057,0.168,2058,0.406,2059,0.104,2060,0.092,2061,0.206,2062,1.362,2063,0.104,2064,0.115,2065,0.115,2066,0.115,2067,0.115,2068,0.115,2069,0.115,2070,0.229,2071,0.558,2072,0.45,2073,0.115,2074,0.115,2075,0.115,2076,0.115,2077,0.229,2078,0.115,2079,0.45,2080,0.115,2081,0.115,2082,0.206,2083,0.077,2084,0.111,2085,0.165,2086,0.104,2087,0.097,2088,0.192,2089,0.088,2090,0.115,2091,0.115,2092,0.192,2093,0.183,2094,0.307,2095,0.45,2096,0.115,2097,0.115,2098,0.229,2099,0.115,2100,0.115,2101,0.115,2102,0.115,2103,0.473,2104,0.115,2105,0.229,2106,0.229,2107,0.115,2108,0.229,2109,0.115,2110,0.115,2111,0.115,2112,0.115,2113,0.45,2114,0.085,2115,0.115,2116,0.316,2117,0.165,2118,0.084,2119,0.229,2120,0.229,2121,0.664,2122,0.115,2123,0.115,2124,0.115,2125,0.115,2126,0.115,2127,0.115,2128,0.115,2129,0.115,2130,0.229,2131,0.115,2132,0.115,2133,0.229,2134,0.115,2135,0.229,2136,0.229,2137,0.229,2138,0.229,2139,0.229,2140,0.229,2141,0.229,2142,0.229,2143,0.229,2144,0.229,2145,0.229,2146,0.229,2147,0.229,2148,0.229,2149,0.229,2150,0.087,2151,0.115,2152,0.599,2153,0.45,2154,0.229,2155,0.115,2156,0.17,2157,0.146,2158,0.34,2159,0.45,2160,0.45,2161,0.153,2162,0.115,2163,0.115,2164,0.115,2165,0.115,2166,0.115,2167,0.115,2168,0.34,2169,0.115,2170,0.115,2171,0.115,2172,0.229,2173,0.115,2174,0.115,2175,0.229,2176,0.115,2177,0.115,2178,0.115,2179,0.115,2180,0.115,2181,0.115,2182,0.115,2183,0.115,2184,0.115,2185,0.115,2186,0.115,2187,0.115,2188,0.115,2189,0.115,2190,0.115,2191,0.115,2192,0.115,2193,0.115,2194,0.229,2195,0.115,2196,0.115,2197,0.115,2198,0.115,2199,0.115,2200,0.115,2201,0.115,2202,0.097,2203,0.115,2204,0.115,2205,0.115,2206,0.115,2207,0.115,2208,0.115,2209,0.115,2210,0.115,2211,0.115,2212,0.115,2213,0.115,2214,0.115,2215,0.115,2216,0.115,2217,0.115,2218,0.115,2219,0.115,2220,0.115,2221,0.115,2222,0.115,2223,0.115,2224,0.115,2225,0.115,2226,0.115,2227,0.115,2228,0.115,2229,0.115,2230,0.115,2231,0.115,2232,0.115,2233,0.115,2234,0.115,2235,0.088,2236,0.34,2237,0.34,2238,0.34,2239,0.088,2240,0.115,2241,0.115,2242,0.115,2243,0.115,2244,0.45,2245,0.115,2246,0.138,2247,0.083,2248,0.45,2249,0.229,2250,0.34,2251,0.34,2252,0.115,2253,0.071,2254,0.115,2255,0.115,2256,0.115,2257,0.115,2258,0.115,2259,0.115,2260,0.115,2261,0.115,2262,0.115,2263,0.115,2264,0.115,2265,0.115,2266,0.115,2267,0.115,2268,0.115,2269,0.115,2270,0.115,2271,0.115,2272,0.115,2273,0.115,2274,0.115,2275,0.115,2276,0.115,2277,0.115,2278,0.115,2279,0.115,2280,0.115,2281,0.115,2282,0.115,2283,0.115,2284,0.115,2285,0.115,2286,0.115,2287,0.115,2288,0.115,2289,0.115,2290,0.115,2291,0.115,2292,0.115,2293,0.115,2294,0.115,2295,0.115,2296,0.115,2297,0.115,2298,0.115,2299,0.115,2300,0.115,2301,0.115,2302,0.115,2303,0.115,2304,0.115,2305,0.115,2306,0.115,2307,0.115,2308,0.115,2309,0.115,2310,0.115,2311,0.115,2312,0.34,2313,0.115,2314,0.115,2315,0.115,2316,0.115,2317,0.115,2318,0.115,2319,0.115,2320,0.115,2321,0.115,2322,0.115,2323,0.115,2324,0.115,2325,0.115,2326,0.45,2327,0.092,2328,0.115,2329,0.45,2330,0.101,2331,0.08,2332,0.115,2333,0.154,2334,0.45,2335,0.104,2336,0.115,2337,0.45,2338,0.45,2339,0.871,2340,0.45,2341,0.229,2342,0.34,2343,0.071,2344,0.115,2345,0.115,2346,0.115,2347,0.115,2348,0.115,2349,0.104,2350,0.115,2351,0.229,2352,0.115,2353,0.229,2354,0.115,2355,0.115,2356,0.115,2357,0.34,2358,0.115,2359,0.115,2360,0.115,2361,0.115,2362,0.115,2363,0.229,2364,0.097,2365,0.115,2366,0.45,2367,0.115,2368,0.115,2369,0.115,2370,0.115,2371,0.115,2372,0.115,2373,0.768,2374,0.115,2375,0.097,2376,0.272,2377,0.115,2378,0.45,2379,0.097,2380,0.45,2381,0.115,2382,0.115,2383,0.115,2384,0.115,2385,0.115,2386,0.115,2387,0.115,2388,0.115,2389,0.095,2390,0.34,2391,0.115,2392,0.111,2393,0.115,2394,0.251,2395,0.115,2396,0.115,2397,0.229,2398,0.115,2399,0.115,2400,0.115,2401,0.115,2402,0.115,2403,0.115,2404,0.115,2405,0.229,2406,0.115,2407,0.115,2408,0.229,2409,0.115,2410,0.084,2411,0.115,2412,0.115,2413,0.115,2414,0.073,2415,0.097,2416,0.115,2417,0.115]],["component/23",[11,0.279,108,0.486]],["title/24-1",[887,59.878]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24-2",[588,55.237]],["name/24-2",[]],["text/24-2",[]],["component/24-2",[]],["title/24-3",[591,59.878]],["name/24-3",[]],["text/24-3",[]],["component/24-3",[]],["title/24-4",[133,28.76,589,48.285]],["name/24-4",[]],["text/24-4",[]],["component/24-4",[]],["title/24-5",[672,50.223]],["name/24-5",[]],["text/24-5",[]],["component/24-5",[]],["title/24-6",[18,32.708]],["name/24-6",[]],["text/24-6",[]],["component/24-6",[]],["title/24-7",[11,11.796,130,18.595,131,27.91]],["name/24-7",[]],["text/24-7",[]],["component/24-7",[]],["title/24-8",[672,50.223]],["name/24-8",[]],["text/24-8",[]],["component/24-8",[]],["title/24-9",[18,32.708]],["name/24-9",[]],["text/24-9",[]],["component/24-9",[]],["title/24-10",[337,35.541,498,52.828]],["name/24-10",[]],["text/24-10",[]],["component/24-10",[]],["title/24",[11,11.796,39,33.38,48,32.712]],["name/24",[774,1.5]],["text/24",[0,4.041,4,0.595,5,1.001,8,0.559,9,1.507,10,0.716,11,2.331,12,0.682,13,2.91,14,2.842,15,0.666,16,0.749,17,1.171,18,2.89,19,0.716,23,1.046,25,0.898,27,2.981,30,2.408,32,1.536,33,0.726,34,1.901,35,3.047,39,1.881,40,1.064,41,0.726,43,2.387,44,1.415,45,1.116,46,2.614,47,1.936,48,4.844,49,1.539,50,1.944,53,1.562,55,0.83,57,0.547,60,0.565,61,0.868,69,4.148,71,3.735,72,0.606,73,0.808,76,0.66,77,2.574,78,0.706,81,1.976,84,0.765,92,0.679,93,1.355,97,1.391,99,1.309,100,1.321,101,1.309,102,1.783,103,1.694,105,1.189,106,1.116,109,1.885,111,1.423,113,3.84,114,1.222,117,0.774,118,0.66,119,1.119,121,0.623,126,2.605,127,0.658,129,2.594,130,2.613,131,5.012,133,1.376,135,2.059,139,0.643,141,0.634,144,2.381,148,2.447,151,4.2,157,1.923,163,0.813,164,3.541,165,1.189,169,1.334,171,1.954,173,1.159,178,1.045,179,0.793,180,1.131,182,2.044,186,1.83,187,0.803,191,2.125,196,0.73,197,1.539,199,3.522,200,0.7,202,2.566,205,0.991,206,4.074,208,1.528,209,1.901,210,0.745,214,1.236,216,1.184,218,2.372,225,0.489,229,1.458,231,0.691,232,2.566,249,0.682,250,1.112,251,1.399,252,3.115,256,0.778,265,1.193,268,0.679,269,2.636,272,0.761,273,0.706,279,2.759,286,0.703,287,1.932,288,0.634,302,2.21,303,0.679,306,3.088,309,0.706,310,1.362,312,2.574,316,4.725,317,1.334,321,2.158,323,0.58,330,1.334,331,2.726,333,1.384,335,0.577,337,1.701,340,1.474,347,1.791,351,0.783,352,2.026,353,0.621,354,3.576,356,0.542,360,1.729,363,2.266,364,2.799,366,0.83,367,1.399,368,0.745,370,1.901,371,1.222,374,4.097,392,1.184,394,0.706,406,0.643,407,1.759,420,1.867,421,0.682,423,2.504,444,2.414,447,3.149,448,1.496,449,1.423,452,2.333,454,1.539,457,0.868,461,0.836,469,2.688,472,1.843,473,0.934,476,2.777,479,3.53,489,2.478,495,4.72,496,0.761,497,0.842,501,1.341,502,0.671,503,1.315,507,1.321,518,2.436,520,0.723,522,3.213,523,4.323,524,1.657,526,1.001,542,1.574,548,0.954,549,1.912,552,1.912,553,1.707,562,0.778,588,1.574,589,3.325,591,3.81,592,1.657,593,1.309,594,1.856,595,1.657,596,2.52,597,0.934,598,1.486,599,2.607,600,1.689,601,1.978,602,1.309,603,1.348,604,2.589,605,1.046,606,3.591,607,1.257,608,1.103,609,1.587,610,1.155,611,2.381,612,1.707,613,1.689,614,2.016,615,0.818,616,3.083,617,1.376,618,1.126,619,0.734,620,1.001,621,1.274,622,1.673,623,2.119,624,2.414,625,3.81,626,2.016,627,1.369,628,2.016,629,1.476,630,1.506,631,1.476,632,1.613,633,3.081,634,1.476,638,0.943,643,0.709,658,1.574,668,1.341,671,0.883,672,4.618,677,2.016,678,1.103,681,0.934,743,0.861,759,0.61,794,0.883,796,0.824,798,0.694,809,1.046,818,0.848,822,0.679,868,1.763,879,0.824,901,0.883,917,1.297,929,0.842,974,0.89,990,1.912,991,0.934,992,1.181,993,1.046,994,1.103,995,1.506,996,3.293,997,1.506,998,2.105,999,1.883,1000,0.907,1001,1.181,1002,1.001,1003,0.924,1004,0.818,1005,1.103,1006,2.982,1008,0.898,1009,0.907,1010,0.855,1011,1.574,1015,1.103,1016,1.181,1017,1.181,1021,2.982,1023,1.181,1024,1.046,1026,1.83,1027,1.181,1028,0.761,1031,1.082,1032,1.103,1033,1.103,1034,1.046,1107,0.875,1172,0.861,1173,0.89,1174,1.181,1175,1.181,1525,1.103,2039,0.868,2247,0.943,2418,1.03,2419,1.309,2420,1.309,2421,1.309,2422,1.063]],["component/24",[11,0.279,108,0.486]],["title/25",[64,70.719]],["name/25",[64,1.715]],["text/25",[4,4.261,8,4.003,9,4.275,10,5.13,11,2.253,12,4.886,13,4.659,14,4.222,15,4.768,16,5.365,34,5.393,65,4.557,70,5.482,73,5.786,128,4.015,527,6.076,674,5.643,2414,5.945,2423,6.556]],["component/25",[11,0.279,108,0.486]],["title/26-1",[8,35.841]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26-2",[4,26.654,2038,42.276,2424,47.637]],["name/26-2",[]],["text/26-2",[]],["component/26-2",[]],["title/26-3",[11,11.796,135,25.4,177,33.208]],["name/26-3",[]],["text/26-3",[]],["component/26-3",[]],["title/26-4",[11,11.796,151,30.821,177,33.208]],["name/26-4",[]],["text/26-4",[]],["component/26-4",[]],["title/26-5",[11,10.251,71,20.62,72,23.614,118,25.716]],["name/26-5",[]],["text/26-5",[]],["component/26-5",[]],["title/26-6",[672,41.313,996,47.83]],["name/26-6",[]],["text/26-6",[]],["component/26-6",[]],["title/26-7",[18,32.708]],["name/26-7",[]],["text/26-7",[]],["component/26-7",[]],["title/26-8",[77,16.997,157,24.009,1000,35.304,2425,42.939]],["name/26-8",[]],["text/26-8",[]],["component/26-8",[]],["title/26-9",[79,37.449,135,25.4,514,41.834]],["name/26-9",[]],["text/26-9",[]],["component/26-9",[]],["title/26-10",[394,21.795,1000,27.977,2425,34.028,2426,26.172,2427,37.518,2428,45.816]],["name/26-10",[]],["text/26-10",[]],["component/26-10",[]],["title/26-11",[151,23.684,394,24.318,1000,31.216,2425,37.967,2426,29.203]],["name/26-11",[]],["text/26-11",[]],["component/26-11",[]],["title/26-12",[18,22.852,306,33.915,476,39.895]],["name/26-12",[]],["text/26-12",[]],["component/26-12",[]],["title/26-13",[12,30.562,759,27.351,1944,52.928]],["name/26-13",[]],["text/26-13",[]],["component/26-13",[]],["title/26-14",[178,25.622,240,32.712,2429,58.669]],["name/26-14",[]],["text/26-14",[]],["component/26-14",[]],["title/26-15",[310,21.002,759,23.769,1602,31.454,2430,47.344]],["name/26-15",[]],["text/26-15",[]],["component/26-15",[]],["title/26-16",[240,32.712,1602,36.194,2431,61.789]],["name/26-16",[]],["text/26-16",[]],["component/26-16",[]],["title/26-17",[178,25.622,2432,51.601,2433,38.901]],["name/26-17",[]],["text/26-17",[]],["component/26-17",[]],["title/26-18",[113,17.646,269,18.821,293,17.185,1695,34.954,2116,41.862]],["name/26-18",[]],["text/26-18",[]],["component/26-18",[]],["title/26-19",[1134,48.544]],["name/26-19",[]],["text/26-19",[]],["component/26-19",[]],["title/26-20",[506,46.568,909,39.718]],["name/26-20",[]],["text/26-20",[]],["component/26-20",[]],["title/26-21",[483,35.686,511,47.393]],["name/26-21",[]],["text/26-21",[]],["component/26-21",[]],["title/26-22",[528,47.778]],["name/26-22",[]],["text/26-22",[]],["component/26-22",[]],["title/26-23",[2434,68.183]],["name/26-23",[]],["text/26-23",[]],["component/26-23",[]],["title/26-24",[287,34.29,650,37.722,1707,42.276]],["name/26-24",[]],["text/26-24",[]],["component/26-24",[]],["title/26-25",[293,32.009]],["name/26-25",[]],["text/26-25",[]],["component/26-25",[]],["title/26-26",[225,25.785,447,34.441]],["name/26-26",[]],["text/26-26",[]],["component/26-26",[]],["title/26-27",[11,7.36,17,17.915,40,16.275,309,19.746,2435,33.991,2436,38.553,2437,38.553]],["name/26-27",[]],["text/26-27",[]],["component/26-27",[]],["title/26-28",[11,11.796,40,26.084,2438,66.526]],["name/26-28",[]],["text/26-28",[]],["component/26-28",[]],["title/26-29",[2439,47.637,2440,48.48,2441,46.864]],["name/26-29",[]],["text/26-29",[]],["component/26-29",[]],["title/26-30",[702,21.894,863,24.165,2441,32.275,2442,28.243,2443,32.807,2444,37.518]],["name/26-30",[]],["text/26-30",[]],["component/26-30",[]],["title/26-31",[356,18.669,647,23.684,972,19.689,1602,27.813,2445,41.862]],["name/26-31",[]],["text/26-31",[]],["component/26-31",[]],["title/26-32",[68,25.716,2446,44.844,2447,57.815,2448,38.994]],["name/26-32",[]],["text/26-32",[]],["component/26-32",[]],["title/26-33",[68,29.591,240,32.712,2449,66.526]],["name/26-33",[]],["text/26-33",[]],["component/26-33",[]],["title/26-34",[77,19.558,1134,33.915,2450,41.009]],["name/26-34",[]],["text/26-34",[]],["component/26-34",[]],["title/26-35",[71,20.62,516,30.677,800,32.782,2451,31.661]],["name/26-35",[]],["text/26-35",[]],["component/26-35",[]],["title/26-36",[241,44.744,2452,72.75]],["name/26-36",[]],["text/26-36",[]],["component/26-36",[]],["title/26-37",[77,16.997,226,28.714,657,29.161,2453,44.844]],["name/26-37",[]],["text/26-37",[]],["component/26-37",[]],["title/26-38",[21,27.813,77,15.029,244,18.139,279,21.229,2454,47.481]],["name/26-38",[]],["text/26-38",[]],["component/26-38",[]],["title/26-39",[315,21.158,650,28.987,756,27.125,785,34.954,2455,51.121]],["name/26-39",[]],["text/26-39",[]],["component/26-39",[]],["title/26-40",[178,14.613,240,18.657,786,18.388,1602,20.642,1603,25.943,2456,17.216,2457,35.24,2458,37.942]],["name/26-40",[]],["text/26-40",[]],["component/26-40",[]],["title/26-41",[120,17.808,161,18.565,186,12.877,619,18.749,1705,21.207,2459,31.07,2460,27.65,2461,37.942]],["name/26-41",[]],["text/26-41",[]],["component/26-41",[]],["title/26",[11,10.251,18,19.86,34,29.316,79,32.545]],["name/26",[34,0.647,79,0.718]],["text/26",[0,0.443,2,0.53,3,0.877,4,2.514,8,1.179,9,0.899,10,0.58,11,1.672,12,1.963,13,1.872,14,0.248,15,1.756,16,0.315,17,2.708,18,1.692,19,0.302,20,1.019,21,1.704,24,1.036,25,0.378,27,3.452,29,1.529,30,0.402,31,1.105,32,1.449,34,0.61,35,0.266,37,1.573,38,0.292,39,0.314,40,0.472,41,1.094,44,0.627,45,1.454,47,0.503,49,0.355,50,2.499,54,0.958,56,0.393,57,0.994,60,0.458,63,0.819,65,0.515,67,1.121,68,1.393,69,2.325,70,0.322,71,1.524,72,0.491,73,0.34,74,0.801,75,0.823,76,0.773,77,1.977,78,0.297,79,3.786,81,1.278,86,0.416,90,0.791,91,0.823,92,0.286,95,0.389,96,0.319,97,1.383,100,0.304,101,0.302,109,0.708,113,1.221,114,1.006,115,0.727,119,1.292,126,0.961,127,1.196,128,1.86,129,0.436,130,1.288,131,0.729,132,0.477,133,1.15,135,2.568,137,0.334,139,0.271,140,0.324,141,1.968,142,0.267,144,0.531,145,0.801,147,0.485,151,1.036,152,0.378,157,1.3,159,0.635,161,1.321,165,0.527,166,3.407,169,1.099,171,0.326,172,0.292,173,0.514,174,0.441,175,0.277,177,1.765,178,2.013,180,0.932,181,0.65,182,1.561,183,1.68,184,0.604,185,2.001,186,2.548,188,1.916,190,1.019,191,0.355,192,1.182,194,0.29,198,0.597,199,2.019,201,0.799,202,0.297,205,2.11,206,0.809,208,0.352,210,0.872,211,0.428,214,0.548,215,0.901,216,0.525,218,1.722,221,0.267,225,1.031,226,4.056,227,0.979,229,0.336,230,0.34,231,1.04,232,0.297,234,2.14,236,0.533,237,0.668,238,0.646,240,2.967,241,0.687,243,0.257,244,1.748,250,1.283,252,1.656,253,0.597,257,0.728,265,1.187,268,0.55,269,4.405,271,1.807,272,0.891,276,0.668,279,1.626,281,3.199,286,0.823,287,2.694,288,1.51,289,0.345,291,1.105,292,0.311,293,1.317,297,0.332,299,0.487,302,2.472,305,0.874,306,2.35,307,2.267,308,0.336,310,1.674,312,1.517,313,0.369,315,2.163,316,0.262,317,0.618,320,1.712,321,1.803,322,1.052,323,0.244,324,0.36,327,1.179,331,1.346,332,0.827,333,0.613,335,0.243,337,0.546,341,2.058,351,1.423,352,0.338,353,0.261,354,0.255,356,1.799,360,0.288,361,0.789,364,1.055,366,0.35,368,0.604,369,0.352,371,0.281,373,2.933,374,1.598,378,0.3,380,0.321,382,0.393,384,0.835,392,0.525,393,1.859,394,2.87,407,0.294,409,0.306,420,0.252,421,0.287,423,0.65,438,0.434,444,0.627,447,0.983,448,1.95,452,1.392,453,0.332,455,0.36,457,2.068,469,1.604,472,0.855,476,1.341,479,1.132,482,0.601,483,1.019,484,0.304,489,1.625,495,1.735,501,1.334,502,3.393,506,0.372,507,0.304,511,0.728,514,3.098,515,0.393,516,0.922,520,0.846,523,1.268,527,0.357,528,3.58,529,0.338,530,0.53,532,0.677,533,0.334,541,0.303,545,0.53,548,0.402,550,0.286,558,0.292,569,0.57,571,0.805,572,0.317,577,1.157,582,0.976,589,1.378,592,0.382,593,1.078,595,0.735,598,0.342,599,0.978,600,0.389,601,0.456,603,1.555,604,1.509,606,0.416,607,1.019,610,1.148,611,1.191,612,0.393,613,0.389,616,0.416,619,1.748,622,0.385,623,0.286,624,0.326,627,0.607,631,0.654,633,0.357,637,1.302,638,1.715,645,1.241,646,1.023,647,0.557,649,1.347,650,2.005,651,0.338,653,0.352,657,1.128,661,0.422,668,0.594,672,1.179,673,0.416,681,0.756,682,0.709,683,1.406,686,3.618,694,0.498,695,0.498,698,0.946,701,0.428,702,0.575,703,0.338,705,0.53,706,0.485,707,0.347,709,0.756,713,0.835,718,1.025,722,0.332,729,0.53,743,0.363,748,1.664,751,1.776,752,0.692,756,0.332,759,4.002,764,1.369,767,0.677,772,0.613,779,1.093,785,1.529,786,0.303,791,0.416,798,0.292,800,0.986,802,1.348,815,0.456,818,0.687,827,0.986,835,0.326,842,0.369,857,0.345,863,1.179,869,0.345,871,0.659,880,1.093,908,0.378,909,0.61,910,3.759,914,1.318,921,1.553,922,0.357,930,0.835,933,1.421,934,0.347,936,1.623,957,0.809,972,1.775,974,0.375,981,0.389,984,0.627,985,0.456,990,0.441,995,0.347,996,1.061,997,0.347,999,0.434,1000,0.382,1008,0.378,1009,1.061,1010,0.36,1011,0.363,1012,0.434,1028,2.525,1030,0.677,1031,0.456,1035,0.589,1036,0.601,1056,0.375,1062,0.823,1071,0.877,1077,0.448,1078,0.464,1079,0.581,1086,0.281,1087,0.861,1088,0.512,1102,0.911,1116,0.411,1128,0.375,1129,0.338,1134,1.803,1135,1.672,1137,0.416,1142,1.895,1145,0.428,1155,2.577,1157,0.485,1173,0.375,1180,0.456,1186,0.61,1187,0.378,1195,0.933,1202,0.411,1204,0.378,1216,0.791,1234,1.912,1245,0.53,1246,0.448,1249,2.541,1271,0.485,1273,0.861,1326,0.792,1340,0.352,1352,0.703,1380,0.389,1391,0.624,1394,0.749,1395,0.498,1402,0.411,1471,0.299,1500,0.893,1503,3.114,1505,0.782,1522,0.389,1523,0.933,1528,0.811,1576,1.361,1600,0.474,1602,1.468,1603,0.823,1609,0.933,1645,0.592,1649,0.375,1694,0.485,1695,1.529,1697,0.434,1701,1.052,1705,1.509,1707,1.99,1708,0.672,1713,0.397,1793,0.411,1846,0.385,1898,0.861,1908,0.406,1944,1.383,1963,0.393,2004,0.847,2005,0.406,2022,0.411,2038,0.764,2039,0.703,2083,1.591,2084,1.019,2085,0.764,2116,3.207,2117,1.105,2156,0.411,2246,1.662,2247,1.105,2330,0.485,2343,0.338,2389,0.456,2410,0.402,2414,0.35,2418,0.434,2422,0.448,2424,0.448,2426,0.993,2427,1.423,2430,0.512,2431,1.614,2432,0.933,2433,1.578,2434,0.861,2436,1.614,2437,1.614,2439,0.448,2441,1.224,2442,2.18,2443,0.861,2444,1.831,2445,0.985,2446,0.485,2448,0.811,2450,2.634,2451,2.34,2452,0.581,2454,0.581,2456,0.789,2457,0.581,2459,2.21,2462,0.625,2463,0.893,2464,2.507,2465,0.551,2466,0.551,2467,0.551,2468,0.53,2469,1.061,2470,0.551,2471,0.551,2472,1.614,2473,0.625,2474,0.581,2475,1.203,2476,0.985,2477,0.625,2478,1.203,2479,0.625,2480,0.625,2481,0.625,2482,0.625,2483,1.203,2484,0.625,2485,0.625,2486,0.474,2487,0.309,2488,0.314,2489,1.423,2490,0.512,2491,1.383,2492,0.581,2493,0.625,2494,0.625,2495,0.448,2496,0.625,2497,0.512,2498,0.53,2499,2.172,2500,0.53,2501,0.53,2502,0.53,2503,0.456,2504,0.53,2505,2.236,2506,0.625,2507,0.625,2508,0.625,2509,2.236,2510,0.625,2511,1.203,2512,0.773,2513,0.625,2514,1.203,2515,1.203,2516,1.203,2517,1.738,2518,1.203,2519,0.625,2520,1.203,2521,0.625,2522,0.625,2523,0.625,2524,1.019,2525,0.933,2526,1.203,2527,0.625,2528,0.625,2529,0.835,2530,0.985,2531,0.389,2532,0.625,2533,0.625,2534,0.625,2535,0.625,2536,0.625,2537,0.625,2538,0.625,2539,0.625,2540,0.625,2541,0.625,2542,0.625,2543,0.625,2544,0.625,2545,0.625,2546,0.625,2547,0.625,2548,0.625,2549,0.625,2550,0.625,2551,0.625,2552,0.625,2553,0.625,2554,0.625,2555,0.625,2556,0.625,2557,0.625,2558,1.738,2559,1.472,2560,1.738,2561,0.625,2562,0.625,2563,0.434,2564,0.625,2565,0.456,2566,0.485,2567,0.625,2568,0.835,2569,0.625,2570,0.625,2571,0.625,2572,0.625,2573,0.625,2574,0.625,2575,0.625,2576,0.625,2577,1.157,2578,1.203,2579,0.625,2580,1.072,2581,0.625,2582,0.625,2583,0.625,2584,0.625,2585,0.474,2586,0.625,2587,0.498,2588,0.625,2589,0.464,2590,0.625,2591,1.172,2592,0.581,2593,1.533,2594,1.061,2595,1.117,2596,0.512,2597,0.581,2598,0.581,2599,0.625,2600,0.485,2601,4.927,2602,1.117,2603,0.625,2604,0.53,2605,0.625,2606,1.203,2607,0.625,2608,0.625,2609,0.625,2610,1.203,2611,1.203,2612,1.203,2613,1.203,2614,1.203,2615,1.203,2616,1.203,2617,1.203,2618,0.512,2619,1.348,2620,0.625,2621,0.625,2622,0.581,2623,0.625,2624,0.912,2625,1.224,2626,0.625,2627,0.53,2628,0.416,2629,0.625,2630,1.472,2631,0.625,2632,0.625,2633,1.472,2634,0.448,2635,0.625,2636,0.625,2637,0.625,2638,0.625,2639,0.625,2640,0.625,2641,0.53,2642,0.625,2643,0.625,2644,0.625,2645,0.625,2646,0.485,2647,0.625,2648,1.019,2649,1.738,2650,1.203,2651,0.53,2652,0.625,2653,0.625,2654,0.625,2655,0.625,2656,0.625,2657,0.485,2658,1.203,2659,0.625,2660,0.53,2661,0.53,2662,0.625,2663,0.625,2664,0.625,2665,0.625,2666,0.625,2667,0.625,2668,0.625,2669,0.625,2670,0.625,2671,0.625,2672,0.625,2673,0.625,2674,0.625,2675,0.625,2676,0.625,2677,0.53,2678,2.652,2679,0.625,2680,0.625,2681,0.625,2682,0.625,2683,2.236,2684,0.625,2685,0.625,2686,0.625,2687,0.625,2688,0.625,2689,0.625,2690,0.625,2691,0.625,2692,0.625,2693,0.625,2694,0.625,2695,0.625,2696,0.625,2697,0.625,2698,0.625,2699,0.625,2700,0.625,2701,0.625,2702,0.625,2703,0.625,2704,0.625,2705,0.756,2706,1.893,2707,0.53,2708,0.912,2709,1.019,2710,0.434,2711,0.53,2712,1.019,2713,1.019,2714,0.801,2715,0.53,2716,0.434,2717,1.614,2718,0.322,2719,0.581,2720,0.625,2721,0.625,2722,1.423,2723,0.912,2724,1.872,2725,2.012,2726,0.441,2727,0.498,2728,0.53,2729,1.203,2730,0.485,2731,0.625,2732,0.625,2733,0.625,2734,0.36,2735,0.456,2736,0.53,2737,0.385,2738,0.498,2739,0.625,2740,0.625,2741,0.625,2742,0.485,2743,0.625,2744,0.625,2745,0.581,2746,0.53,2747,0.625,2748,0.625,2749,0.625,2750,0.625,2751,0.625,2752,0.625,2753,0.625,2754,0.625,2755,1.157,2756,1.267,2757,0.625,2758,0.332,2759,0.625,2760,0.625,2761,0.625,2762,0.625,2763,0.625,2764,0.625,2765,0.625,2766,0.625,2767,1.061,2768,0.933,2769,0.625,2770,0.625,2771,0.53,2772,0.625,2773,0.53,2774,0.625,2775,0.456,2776,1.019,2777,0.53,2778,0.625,2779,0.625,2780,0.625,2781,0.485,2782,0.625,2783,0.625,2784,0.625,2785,0.625,2786,0.53,2787,1.348,2788,0.53,2789,0.625,2790,0.625,2791,0.625,2792,0.625,2793,0.625,2794,0.464,2795,1.203,2796,0.53,2797,0.485,2798,0.625,2799,0.625,2800,0.625,2801,0.53,2802,0.625,2803,0.625,2804,1.203,2805,0.625,2806,0.625,2807,0.456,2808,0.53,2809,1.203,2810,1.203,2811,0.53,2812,0.53,2813,0.625,2814,0.53,2815,0.53,2816,0.625,2817,0.581,2818,0.625,2819,0.625,2820,0.53,2821,0.933,2822,1.472,2823,1.738,2824,0.402,2825,0.512,2826,0.625,2827,1.019,2828,0.625,2829,0.625,2830,0.625,2831,0.53,2832,0.985,2833,0.985,2834,0.985,2835,1.423,2836,4.666,2837,1.472,2838,5.109,2839,4.172,2840,1.738,2841,1.738,2842,1.738,2843,1.203,2844,1.738,2845,1.738,2846,0.625,2847,0.625,2848,0.625,2849,2.236,2850,2.236,2851,0.581,2852,0.485,2853,0.512,2854,1.203,2855,1.738,2856,0.551,2857,0.625,2858,0.485,2859,0.625,2860,0.625,2861,0.625,2862,0.625,2863,0.625,2864,0.625,2865,0.625,2866,0.625,2867,0.625,2868,1.203,2869,1.203,2870,0.53,2871,0.625,2872,1.738,2873,1.629,2874,1.738,2875,0.782,2876,0.625,2877,1.738,2878,0.474,2879,0.485,2880,0.53,2881,0.434,2882,0.625,2883,0.625,2884,0.625,2885,0.448,2886,0.625]],["component/26",[11,0.279,108,0.486]],["title/27-1",[12,43.744]],["name/27-1",[]],["text/27-1",[]],["component/27-1",[]],["title/27-2",[113,27.038,116,43.477]],["name/27-2",[]],["text/27-2",[]],["component/27-2",[]],["title/27-3",[484,32.394,798,31.088,2887,61.789]],["name/27-3",[]],["text/27-3",[]],["component/27-3",[]],["title/27-4",[181,35.962,541,32.24,2888,61.789]],["name/27-4",[]],["text/27-4",[]],["component/27-4",[]],["title/27-5",[2889,64.141,2890,72.75]],["name/27-5",[]],["text/27-5",[]],["component/27-5",[]],["title/27-6",[307,28.428,528,29.009,619,28.57,2433,33.807]],["name/27-6",[]],["text/27-6",[]],["component/27-6",[]],["title/27-7",[171,34.681,361,30.186,637,32.088]],["name/27-7",[]],["text/27-7",[]],["component/27-7",[]],["title/27-8",[654,43.228,995,36.926,1397,44.869]],["name/27-8",[]],["text/27-8",[]],["component/27-8",[]],["title/27-9",[178,25.622,202,31.646,1144,47.637]],["name/27-9",[]],["text/27-9",[]],["component/27-9",[]],["title/27-10",[120,31.225,202,31.646,2891,61.789]],["name/27-10",[]],["text/27-10",[]],["component/27-10",[]],["title/27-11",[272,40.15,2717,72.75]],["name/27-11",[]],["text/27-11",[]],["component/27-11",[]],["title/27-12",[1397,52.828,2892,59.388]],["name/27-12",[]],["text/27-12",[]],["component/27-12",[]],["title/27-13",[77,16.997,157,24.009,1000,35.304,2425,42.939]],["name/27-13",[]],["text/27-13",[]],["component/27-13",[]],["title/27-14",[135,36.355]],["name/27-14",[]],["text/27-14",[]],["component/27-14",[]],["title/27-15",[447,41.869]],["name/27-15",[]],["text/27-15",[]],["component/27-15",[]],["title/27-16",[178,25.622,2432,51.601,2433,38.901]],["name/27-16",[]],["text/27-16",[]],["component/27-16",[]],["title/27-17",[141,28.403,1110,47.637,2893,56.338]],["name/27-17",[]],["text/27-17",[]],["component/27-17",[]],["title/27-18",[178,25.622,240,32.712,2429,58.669]],["name/27-18",[]],["text/27-18",[]],["component/27-18",[]],["title/27-19",[178,19.689,225,16.829,447,22.478,619,25.262,1110,36.606]],["name/27-19",[]],["text/27-19",[]],["component/27-19",[]],["title/27-20",[178,19.689,356,18.669,358,30.657,656,23.291,1222,33.614]],["name/27-20",[]],["text/27-20",[]],["component/27-20",[]],["title/27-21",[8,17.245,178,17.646,223,26.172,656,20.874,657,23.109,822,20.96]],["name/27-21",[]],["text/27-21",[]],["component/27-21",[]],["title/27-22",[77,19.558,225,21.9,226,33.04]],["name/27-22",[]],["text/27-22",[]],["component/27-22",[]],["title/27-23",[202,31.646,225,21.9,293,22.364]],["name/27-23",[]],["text/27-23",[]],["component/27-23",[]],["title/27-24",[11,7.36,24,19.231,40,16.275,227,18.183,293,13.954,816,21.162,2435,33.991]],["name/27-24",[]],["text/27-24",[]],["component/27-24",[]],["title/27-25",[11,9.064,40,20.044,225,16.829,654,33.218,2114,33.218]],["name/27-25",[]],["text/27-25",[]],["component/27-25",[]],["title/27",[11,10.251,12,26.56,18,19.86,75,27.378]],["name/27",[12,0.586,75,0.604]],["text/27",[3,1.63,4,3.39,8,1.475,9,0.899,10,1.079,11,1.909,12,2.402,13,2.75,14,2.075,15,1.003,16,1.128,17,1.691,18,0.768,21,1.217,22,1.187,24,1.816,27,2.926,29,2.679,31,3.323,32,2.143,34,3.62,35,0.952,40,0.877,44,2.043,45,0.92,47,0.935,50,1.412,51,1.153,57,0.824,59,1.217,60,1.991,63,1.055,66,1.509,67,2.964,68,0.995,70,1.153,71,0.798,75,2.476,76,0.995,77,2.641,78,1.864,79,3.534,81,1.278,89,1.217,90,4.128,91,3.575,96,1.998,97,2.009,99,1.079,100,1.089,101,3.028,102,1.064,103,1.011,105,0.98,106,0.92,108,0.689,109,3.198,113,2.167,116,1.242,120,2.947,121,0.939,122,1.956,123,1.298,126,0.962,127,0.991,128,1.479,135,3.231,137,1.194,140,1.16,141,2.232,148,1.015,157,0.929,159,1.18,165,0.98,169,1.1,171,1.166,172,1.045,173,0.955,174,1.576,178,4.04,181,1.209,182,1.73,183,0.763,185,1.899,190,2.382,192,1.479,199,1.717,200,1.055,202,4.676,206,1.041,211,2.679,217,2.943,223,2.239,225,3.351,226,4.461,227,0.98,236,0.991,237,1.505,238,1.202,244,1.855,253,0.768,265,0.984,269,3.748,271,1.536,272,2.009,277,1.63,285,1.128,288,2.232,290,1.422,293,1.758,299,1.585,307,2.571,310,0.813,315,2.164,316,4.517,317,2.234,318,1.268,327,1.18,332,1.064,335,0.869,340,0.88,356,1.431,359,3.493,366,2.19,373,1.045,374,1.771,392,0.976,393,0.902,394,3.396,406,1.698,420,0.902,444,2.043,447,2.299,450,1.153,469,0.84,472,1.1,501,1.105,502,4.866,514,2.464,515,1.407,528,3.15,532,1.259,541,3.043,550,1.023,556,1.576,569,2.476,571,1.816,576,1.489,582,2.74,610,2.225,611,0.987,619,3.103,623,1.023,631,1.217,632,1.33,633,3.587,639,2.371,641,1.342,645,2.902,647,1.816,649,1.956,654,2.546,656,2.382,657,2.637,661,1.509,665,1.552,668,1.105,670,1.552,679,1.437,688,1.079,697,1.552,708,1.63,713,1.881,751,1.268,759,2.15,767,2.206,772,1.14,798,1.831,800,2.222,816,1.998,818,1.278,821,1.735,822,1.023,823,1.454,826,1.471,841,1.319,856,1.242,910,2.19,913,2.609,922,1.278,936,1.16,957,1.041,975,1.242,978,1.298,995,1.242,997,1.242,1004,1.233,1035,1.095,1037,1.379,1041,1.78,1058,1.552,1067,1.63,1087,1.602,1112,2.009,1116,1.471,1134,1.14,1135,1.194,1144,1.602,1165,1.084,1204,1.354,1222,3.438,1249,0.984,1252,1.242,1253,1.242,1277,1.576,1326,1.019,1366,1.319,1390,1.393,1391,1.16,1397,2.643,1402,2.577,1411,1.393,1435,1.437,1494,1.319,1522,1.393,1602,1.217,1645,1.1,1706,1.379,1962,2.31,2004,2.761,2022,1.471,2038,1.422,2039,1.308,2085,1.422,2114,1.454,2117,2.49,2156,1.471,2246,2.079,2392,1.894,2424,1.602,2429,4.611,2432,1.735,2433,4.948,2450,1.379,2464,2.078,2472,3.64,2474,2.078,2489,4.282,2490,3.209,2491,4.16,2492,3.64,2495,1.602,2497,1.832,2580,1.379,2634,1.602,2719,2.078,2722,1.832,2817,2.078,2825,1.832,2832,1.832,2833,1.832,2834,1.832,2835,1.832,2851,2.078,2853,1.832,2878,1.696,2887,3.64,2888,2.078,2889,3.209,2890,3.64,2891,3.64,2892,2.971,2894,2.237,2895,4.611,2896,1.973,2897,1.973,2898,1.973,2899,2.237,2900,2.237,2901,2.237,2902,2.237,2903,1.894,2904,1.489,2905,1.552,2906,2.237,2907,2.237,2908,2.237,2909,1.63,2910,2.237,2911,2.237,2912,1.509,2913,1.63,2914,2.237,2915,2.237,2916,5.229,2917,3.627,2918,1.894,2919,2.237,2920,2.237,2921,2.237,2922,1.894,2923,1.735,2924,1.894,2925,1.894,2926,1.894,2927,1.894,2928,1.894,2929,1.894,2930,1.894,2931,2.237,2932,2.237,2933,2.237,2934,2.237,2935,1.696,2936,2.237,2937,2.237,2938,1.735,2939,2.237,2940,3.919,2941,2.237,2942,3.919,2943,2.237,2944,2.237,2945,2.237,2946,3.319,2947,2.237,2948,2.237,2949,2.237,2950,3.319,2951,1.894,2952,2.237,2953,1.63,2954,2.237,2955,2.237,2956,2.237]],["component/27",[11,0.279,108,0.486]],["title/28-1",[2957,72.196]],["name/28-1",[]],["text/28-1",[]],["component/28-1",[]],["title/28-2",[4,31.382,598,42.894]],["name/28-2",[]],["text/28-2",[]],["component/28-2",[]],["title/28-3",[47,27.814,81,21.701,458,29.252]],["name/28-3",[]],["text/28-3",[]],["component/28-3",[]],["title/28-4",[394,31.646,458,29.252,2958,49.409]],["name/28-4",[]],["text/28-4",[]],["component/28-4",[]],["title/28-5",[138,36.445,458,34.441]],["name/28-5",[]],["text/28-5",[]],["component/28-5",[]],["title/28-6",[309,31.646,458,29.252,2959,52.928]],["name/28-6",[]],["text/28-6",[]],["component/28-6",[]],["title/28-7",[129,20.946,331,22.01,458,25.422,527,33.026]],["name/28-7",[]],["text/28-7",[]],["component/28-7",[]],["title/28-8",[54,31.873,129,20.946,331,22.01,458,25.422]],["name/28-8",[]],["text/28-8",[]],["component/28-8",[]],["title/28",[11,10.251,72,23.614,458,25.422,986,40.727]],["name/28",[11,0.156,72,0.36,458,0.388]],["text/28",[4,4.586,8,1.474,9,1.574,10,1.889,11,2.093,12,1.799,13,1.715,14,3.116,15,1.756,16,1.975,17,2.708,18,3.375,24,2.907,27,2.785,32,1.605,45,1.61,47,1.637,48,1.925,71,1.397,72,4.283,76,1.742,77,3.763,78,2.985,81,2.047,112,2.272,119,1.615,126,1.684,129,1.419,130,3.898,131,1.643,136,1.799,138,3.653,142,1.672,159,2.065,161,5.601,169,5.156,179,3.35,182,2.77,186,2.665,187,2.117,188,3.07,191,2.22,199,2.749,200,4.633,202,1.863,203,2.545,218,2.759,225,2.066,227,2.749,231,1.822,232,2.985,236,1.735,243,1.61,244,3.186,250,1.605,269,2.891,286,2.971,288,4.196,289,2.159,293,3.969,301,4.42,306,1.996,307,1.925,310,1.422,311,4.42,316,1.643,317,1.393,319,4.794,322,3.797,323,1.531,331,1.491,333,1.996,334,2.759,339,2.13,342,1.871,343,2.462,350,6.64,351,2.065,352,3.392,356,1.43,357,2.328,358,2.348,380,4.025,393,1.579,394,1.863,420,1.579,421,1.799,446,2.462,458,4.321,469,1.47,472,1.925,476,2.348,489,1.799,495,2.78,505,2.272,507,3.056,532,2.204,542,2.272,543,2.348,598,6.268,610,1.666,611,1.728,622,7.056,630,2.174,634,2.13,647,1.814,702,1.871,712,2.462,739,2.759,767,2.204,794,2.328,805,3.115,822,1.791,857,2.159,950,2.348,1182,2.575,1224,2.348,1254,2.391,1470,4.42,1602,2.13,1708,2.189,1822,2.462,2734,2.254,2912,7.963,2958,2.908,2959,3.115,2960,5.534,2961,2.369,2962,2.09,2963,3.453,2964,3.453,2965,3.453,2966,4.42,2967,3.453,2968,2.174,2969,2.759,2970,3.453]],["component/28",[11,0.279,108,0.486]],["title/29-1",[18,22.852,71,23.727,118,29.591]],["name/29-1",[]],["text/29-1",[]],["component/29-1",[]],["title/29-2",[0,24.493,77,19.558,129,24.102]],["name/29-2",[]],["text/29-2",[]],["component/29-2",[]],["title/29-3",[77,16.997,130,16.16,135,22.074,244,20.515]],["name/29-3",[]],["text/29-3",[]],["component/29-3",[]],["title/29-4",[77,16.997,126,24.862,130,16.16,135,22.074]],["name/29-4",[]],["text/29-4",[]],["component/29-4",[]],["title/29-5",[115,27.814,135,25.4,535,37.722]],["name/29-5",[]],["text/29-5",[]],["component/29-5",[]],["title/29-6",[244,27.793,1234,47.83]],["name/29-6",[]],["text/29-6",[]],["component/29-6",[]],["title/29-7",[880,49.256,1249,34.441]],["name/29-7",[]],["text/29-7",[]],["component/29-7",[]],["title/29-8",[126,33.684,1234,47.83]],["name/29-8",[]],["text/29-8",[]],["component/29-8",[]],["title/29-9",[6,39.552,11,11.796,72,27.171]],["name/29-9",[]],["text/29-9",[]],["component/29-9",[]],["title/29-10",[11,13.888,129,28.378]],["name/29-10",[]],["text/29-10",[]],["component/29-10",[]],["title/29-11",[77,19.558,129,24.102,131,27.91]],["name/29-11",[]],["text/29-11",[]],["component/29-11",[]],["title/29-12",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/29-12",[]],["text/29-12",[]],["component/29-12",[]],["title/29-13",[130,21.893,132,31.09]],["name/29-13",[]],["text/29-13",[]],["component/29-13",[]],["title/29-14",[17,28.713,77,19.558,129,24.102]],["name/29-14",[]],["text/29-14",[]],["component/29-14",[]],["title/29-15",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/29-15",[]],["text/29-15",[]],["component/29-15",[]],["title/29-16",[130,21.893,132,31.09]],["name/29-16",[]],["text/29-16",[]],["component/29-16",[]],["title/29-17",[77,19.558,129,24.102,293,22.364]],["name/29-17",[]],["text/29-17",[]],["component/29-17",[]],["title/29-18",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/29-18",[]],["text/29-18",[]],["component/29-18",[]],["title/29-19",[130,21.893,132,31.09]],["name/29-19",[]],["text/29-19",[]],["component/29-19",[]],["title/29-20",[11,11.796,134,41.009,214,30.31]],["name/29-20",[]],["text/29-20",[]],["component/29-20",[]],["title/29-21",[77,16.997,130,16.16,225,19.032,293,19.435]],["name/29-21",[]],["text/29-21",[]],["component/29-21",[]],["title/29-22",[77,16.997,130,16.16,204,32.091,227,25.326]],["name/29-22",[]],["text/29-22",[]],["component/29-22",[]],["title/29-23",[77,19.558,81,21.701,130,18.595]],["name/29-23",[]],["text/29-23",[]],["component/29-23",[]],["title/29-24",[11,11.796,118,29.591,138,30.954]],["name/29-24",[]],["text/29-24",[]],["component/29-24",[]],["title/29-25",[77,15.029,140,26.498,141,21.826,142,21.826,305,19.984]],["name/29-25",[]],["text/29-25",[]],["component/29-25",[]],["title/29-26",[136,35.984,138,36.445]],["name/29-26",[]],["text/29-26",[]],["component/29-26",[]],["title/29-27",[181,42.341,182,34.573]],["name/29-27",[]],["text/29-27",[]],["component/29-27",[]],["title/29-28",[183,19.716,184,29.009,185,21.002,186,19.621]],["name/29-28",[]],["text/29-28",[]],["component/29-28",[]],["title/29-29",[19,27.886,138,26.901,187,31.253,188,28.289]],["name/29-29",[]],["text/29-29",[]],["component/29-29",[]],["title/29-30",[11,10.251,72,23.614,495,25.617,701,39.531]],["name/29-30",[]],["text/29-30",[]],["component/29-30",[]],["title/29-31",[11,9.064,18,17.56,71,18.233,144,22.564,495,22.651]],["name/29-31",[]],["text/29-31",[]],["component/29-31",[]],["title/29-32",[11,9.064,18,17.56,71,18.233,133,18.77,265,22.478]],["name/29-32",[]],["text/29-32",[]],["component/29-32",[]],["title/29-33",[495,34.706,598,42.894]],["name/29-33",[]],["text/29-33",[]],["component/29-33",[]],["title/29",[11,11.796,18,22.852,72,27.171]],["name/29",[18,0.438,72,0.521]],["text/29",[0,2.167,4,0.277,6,1.451,8,0.26,9,1.366,10,0.638,11,2.242,12,0.317,13,0.302,14,2.993,15,0.31,16,0.348,17,2.414,18,3.474,19,1.178,21,0.72,24,0.882,27,3.219,32,0.542,33,0.338,35,1.446,37,0.588,38,0.618,40,0.271,41,1.195,43,0.356,44,0.993,45,1.208,47,0.796,48,1.445,49,0.75,50,2.121,51,0.682,57,0.487,59,0.376,65,0.816,68,0.307,69,0.72,70,0.682,71,2.824,72,3.159,76,1.881,77,3.285,78,1.161,81,1.616,84,0.682,97,0.678,98,1.909,99,0.638,100,0.644,101,0.919,102,0.629,103,1.103,105,1.069,106,1.208,109,0.775,111,0.999,112,1.105,113,2.907,114,0.857,115,1.601,117,0.36,118,2.857,119,0.786,121,2.798,126,4.601,127,1.506,128,2.69,129,4.227,130,2.654,131,3.465,132,2.913,133,1.94,134,3.798,135,2.721,136,3.464,137,0.706,138,3.989,139,0.573,140,3.457,141,3.302,142,3.22,144,1.69,148,0.6,151,0.613,157,0.287,159,0.364,163,0.378,164,0.77,165,0.302,170,0.618,172,0.323,173,0.565,175,1.506,176,0.854,178,2.035,179,1.017,180,1.017,181,0.715,182,1.866,183,2.759,184,0.346,185,1.235,186,3.4,187,0.715,188,3.264,190,0.603,191,2.398,192,2.988,193,0.46,194,0.613,197,2.171,198,2.778,199,3.468,200,3.028,201,2.831,202,2.661,203,0.86,204,2.933,205,2.436,206,2.867,207,0.549,208,1.374,209,2.512,210,0.664,211,0.472,212,0.466,213,0.422,214,2.807,215,0.358,216,1.282,217,1.072,218,1.074,219,1.551,220,1.08,221,1.451,222,0.434,223,0.394,224,1.647,225,2.664,226,1.213,227,2.314,228,0.449,229,0.371,230,0.72,231,0.321,232,2.357,233,1.515,234,0.801,235,0.466,236,1.302,237,0.508,238,1.023,239,1.053,240,0.651,241,0.394,242,0.34,243,2.533,244,4.123,245,0.401,246,0.401,247,0.549,248,0.434,249,4.511,250,0.283,251,0.982,252,3.487,253,1.453,254,0.549,255,0.549,256,0.694,257,0.418,258,0.466,259,0.513,260,0.549,261,0.513,262,0.549,263,0.932,264,0.549,265,1.683,266,0.549,267,0.513,268,0.871,269,0.487,270,0.486,271,1.333,272,0.678,273,0.328,274,0.389,275,0.513,276,0.383,277,0.503,278,0.449,279,4.238,280,0.832,281,0.352,282,1.794,283,0.549,284,1.342,285,1.231,286,1.156,287,0.682,288,0.295,289,1.346,290,0.439,291,0.439,293,3.112,297,0.702,298,1.238,299,0.279,300,1.909,301,3.469,302,0.781,303,1.935,304,0.486,305,1.937,306,1.498,307,0.937,308,0.371,309,2.357,310,1.672,311,0.932,312,2.167,313,1.732,314,2.843,315,0.286,316,3.934,317,0.471,318,0.392,319,0.808,320,0.53,321,0.397,322,1.152,323,1.149,324,0.397,325,0.389,326,0.983,327,1.288,328,0.466,329,0.418,330,1.2,331,0.504,332,0.328,333,1.245,334,0.486,335,0.268,336,0.983,337,1.919,338,0.486,339,0.72,340,0.52,341,0.308,342,0.33,343,0.434,344,0.536,345,0.449,346,0.549,347,0.33,348,0.486,350,1.704,351,1.005,352,1.32,353,1.768,354,3.233,355,0.513,356,1.398,357,2.021,360,0.319,363,1.873,364,1.329,365,1.586,366,1.365,367,1.514,368,0.664,370,1.724,371,1.099,372,1.747,373,0.618,374,4.484,375,4.073,376,0.667,377,0.86,378,0.635,379,0.75,380,1.251,382,0.434,383,1.219,384,0.635,385,1.198,388,2.07,389,0.486,390,0.486,391,1.515,392,1.845,393,1.185,394,1.617,395,1.342,396,0.513,397,0.983,398,0.549,399,0.549,400,0.549,401,1.238,402,1.285,403,0.983,404,1.285,409,0.338,420,0.278,421,0.317,422,0.549,423,1.32,424,0.72,425,1.053,426,0.449,428,0.43,429,0.983,430,0.549,431,0.513,432,0.549,433,0.549,438,0.479,439,1.295,440,0.549,441,0.932,442,0.536,443,0.549,444,0.69,445,0.549,446,1.198,447,0.582,448,0.381,449,0.362,450,0.356,451,0.513,452,1.52,453,0.366,454,0.75,455,0.762,456,0.549,457,1.718,458,0.582,459,0.983,460,0.549,461,0.389,462,0.549,463,0.549,464,1.515,465,0.513,466,0.549,467,1.491,468,1.72,469,1.728,470,0.734,471,0.892,472,1.671,473,0.832,474,0.86,475,0.549,476,1.142,477,0.549,478,1.647,479,0.799,480,0.549,481,0.373,482,0.345,483,0.315,484,1.189,485,0.549,486,0.486,487,0.549,488,0.549,489,0.608,490,0.549,491,0.808,492,1.053,493,0.513,494,0.549,495,3.252,496,0.354,519,0.397,524,0.808,525,0.34,535,0.75,540,0.366,542,0.401,550,0.316,569,0.327,595,0.422,596,2.504,598,0.378,615,0.381,617,0.671,621,0.324,622,0.426,637,0.638,643,0.33,647,0.882,651,0.373,658,0.401,691,0.486,703,0.373,704,0.983,711,0.466,726,0.369,751,0.392,753,0.629,767,0.389,768,0.466,798,0.323,811,0.439,822,0.316,826,0.454,863,0.364,869,0.381,972,0.266,974,0.414,978,0.401,1037,0.426,1107,0.407,1108,1.036,1145,0.472,1159,0.486,1166,1.515,1192,0.486,1204,0.801,1209,0.549,1215,0.85,1222,0.454,1234,3.025,1243,1.053,1249,1.074,1252,0.734,1253,0.383,1256,0.549,1366,0.407,1525,0.513,1567,0.394,1652,0.549,1656,0.434,1695,0.905,1822,0.434,1837,0.549,2060,0.486,2062,1.026,2330,1.026,2414,1.065,2758,0.366,2881,0.479,2917,0.479,2971,0.513,2972,0.892,2973,0.549,2974,0.549,2975,0.513,2976,0.609,2977,0.565,2978,0.609,2979,0.609,2980,0.609,2981,0.609,2982,1.167,2983,0.609,2984,0.609,2985,0.609,2986,0.609,2987,0.397,2988,0.609,2989,0.486,2990,0.565,2991,0.486]],["component/29",[11,0.279,108,0.486]],["title/30",[11,11.796,72,27.171,672,35.088]],["name/30",[72,0.521,672,0.673]],["text/30",[4,3.966,8,3.726,9,3.979,10,4.775,11,2.336,12,4.548,13,5.33,14,3.929,15,4.438,16,4.993,18,3.401,32,4.057,34,5.02,36,5.047,69,6.62,72,4.043,89,5.386,119,4.084,192,3.737,288,4.227,420,3.992,421,4.548,495,5.391,672,5.222,990,6.974,1005,7.353,2992,8.731]],["component/30",[11,0.279,108,0.486]],["title/31-1",[118,34.841,2993,69.076]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["title/31",[11,13.888,72,31.992]],["name/31",[72,0.943]],["text/31",[0,2.484,4,2.704,8,2.54,9,2.712,10,3.255,11,2.517,12,3.1,13,2.956,14,2.678,15,3.025,16,3.404,18,3.247,40,2.646,41,5.339,47,2.821,67,4.532,69,5.143,72,4.83,77,1.984,81,3.56,84,3.478,113,4.667,118,3.002,120,3.167,124,6.074,128,2.547,129,3.425,130,2.642,131,2.831,132,3.752,135,2.576,136,3.1,137,3.602,138,3.14,139,2.923,140,3.498,141,2.881,142,2.881,143,4.754,144,5.219,145,4.492,146,5.369,147,7.333,148,3.062,149,5.012,150,5.621,151,3.126,152,4.083,153,5.369,154,5.012,155,5.369,156,4.754,157,2.802,158,4.083,159,3.559,160,5.012,161,3.302,162,5.369,163,3.695,164,2.729,165,2.956,166,3.978,167,4.551,168,3.914,169,3.318,170,3.153,171,3.518,172,3.153,173,2.881,174,4.754,175,2.99,176,3.025,177,3.368,178,2.599,672,3.559]],["component/31",[11,0.279,108,0.486]],["title/32-1",[11,13.888,39,39.302]],["name/32-1",[]],["text/32-1",[]],["component/32-1",[]],["title/32-2",[11,13.888,40,30.711]],["name/32-2",[]],["text/32-2",[]],["component/32-2",[]],["title/32",[34,39.718,73,42.614]],["name/32",[34,0.647,73,0.694]],["text/32",[4,1.541,8,1.448,9,1.546,10,1.855,11,2.387,12,1.767,13,1.685,14,1.526,15,1.724,16,1.94,18,2.124,27,3.02,37,1.711,39,4.459,40,4.078,41,3.026,50,1.386,51,1.982,52,2.231,60,1.464,65,3.324,66,2.594,67,1.597,77,1.131,81,2.899,84,1.982,87,2.709,89,2.092,92,2.829,94,2.709,109,3.618,113,4.051,118,1.711,127,1.704,128,3.926,130,2.722,131,1.613,135,2.962,144,1.697,150,2.286,151,1.782,157,1.597,159,2.028,161,3.795,163,3.387,164,2.502,171,4.044,173,2.64,175,4.315,180,1.602,182,1.697,186,2.099,192,1.452,194,1.782,200,1.813,202,1.829,216,1.678,225,2.036,227,1.685,236,3.938,237,1.477,243,2.543,244,1.365,253,1.321,268,3.549,293,1.293,297,2.041,305,1.503,307,1.891,312,2.396,313,2.267,315,4.857,320,3.108,332,1.829,353,4.571,354,3.63,356,2.833,361,2.806,392,3.385,393,1.551,406,1.666,414,2.135,420,1.551,423,2.079,447,1.691,458,1.691,461,2.165,469,1.443,478,4.171,479,2.595,481,2.079,483,1.752,484,4.742,496,1.971,503,1.864,527,2.197,533,2.053,558,3.625,593,1.855,609,2.249,610,1.636,611,1.697,627,3.912,641,2.306,643,2.955,651,3.343,655,5.761,671,2.286,682,2.267,683,2.418,693,2.231,707,2.135,771,3.387,772,1.961,773,4.37,864,2.181,908,3.742,913,2.56,971,2.286,980,2.418,1035,1.882,1037,2.371,1086,1.731,1112,3.17,1134,1.961,1172,2.231,1186,1.95,1187,2.327,1188,3.709,1196,4.171,1204,2.327,1212,2.394,1340,4.366,1343,2.231,1471,2.955,1495,7.105,1567,2.197,1698,2.418,2009,3.06,2022,2.529,2085,2.444,2343,2.079,2426,3.533,2448,5.232,2456,1.745,2495,2.754,2531,3.85,2824,2.471,2852,2.983,2962,2.053,2968,2.135,2994,3.06,2995,2.348,2996,2.267,2997,2.709,2998,1.92,2999,3.391,3000,2.327,3001,2.668,3002,2.418,3003,2.709,3004,2.594,3005,3.06,3006,2.856,3007,3.06,3008,3.06,3009,3.06]],["component/32",[11,0.279,108,0.486]],["title/33-1",[588,55.237]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["title/33-2",[77,16.997,81,18.859,984,30.139,1962,34.085]],["name/33-2",[]],["text/33-2",[]],["component/33-2",[]],["title/33-3",[133,24.426,356,24.295,984,34.681]],["name/33-3",[]],["text/33-3",[]],["component/33-3",[]],["title/33-4",[469,29.4,984,40.833]],["name/33-4",[]],["text/33-4",[]],["component/33-4",[]],["title/33-5",[957,44.305]],["name/33-5",[]],["text/33-5",[]],["component/33-5",[]],["title/33-6",[27,17.931,483,26.341,759,23.769,910,32.315]],["name/33-6",[]],["text/33-6",[]],["component/33-6",[]],["title/33",[130,21.893,984,40.833]],["name/33",[984,1.204]],["text/33",[4,0.827,8,0.777,9,0.83,10,0.996,11,1.052,12,0.949,13,0.905,14,1.45,15,0.926,16,1.042,18,2.037,21,1.123,26,0.961,27,1.84,35,0.878,50,1.769,57,0.76,60,1.39,63,0.973,77,1.993,92,0.945,99,1.761,103,3.897,105,3.977,106,3.545,113,1.261,114,0.929,115,2.834,130,1.658,133,1.803,142,0.882,164,0.835,183,1.245,186,1.239,198,1.026,205,0.754,214,0.941,216,1.594,221,3.198,227,1.6,244,2.873,245,1.198,253,0.709,269,5.174,271,0.81,279,1.517,288,1.559,299,1.477,302,1.496,305,1.919,308,1.109,310,0.75,312,2.298,313,1.217,316,1.532,317,3.373,318,1.171,320,1.967,331,0.786,335,3.528,338,2.573,340,3.391,353,0.863,356,1.334,361,0.937,367,2.531,374,1.65,420,0.833,449,1.083,483,0.941,502,2.68,503,1.77,536,1.171,541,2.379,550,1.671,569,1.729,571,1.692,572,1.047,573,1.123,603,1.026,604,2.041,610,0.878,611,0.911,621,0.969,623,0.945,641,1.238,679,1.327,726,1.95,759,1.501,764,1.047,827,1.171,909,1.047,910,4.819,917,0.987,925,1.261,933,1.312,951,2.764,957,1.699,972,1.407,981,1.285,982,1.261,984,7.382,985,2.661,1102,1.915,1129,1.116,1155,1.505,1249,0.908,1254,4.945,1357,1.534,1367,1.298,1405,2.573,1505,3.19,1688,2.463,1698,1.298,1709,1.534,2024,1.643,2235,1.393,2253,6.94,2450,1.273,2529,2.533,2531,2.273,2565,3.578,2756,1.505,2768,1.602,2807,2.661,2858,1.602,2905,2.533,2987,1.189,3001,1.432,3010,1.534,3011,1.534,3012,2.712,3013,3.647,3014,5.034,3015,5.034,3016,5.034,3017,1.643,3018,1.821,3019,1.821,3020,1.643,3021,1.643,3022,1.643,3023,1.534,3024,1.643,3025,2.905,3026,1.534,3027,1.455,3028,2.905,3029,3.221,3030,1.821,3031,1.821,3032,1.393,3033,1.534,3034,1.643,3035,2.905,3036,2.905,3037,2.905,3038,2.905,3039,2.905,3040,2.905,3041,2.905,3042,2.905,3043,2.905,3044,2.905,3045,3.906,3046,2.905,3047,2.905,3048,2.712,3049,2.905,3050,2.905,3051,2.905,3052,2.905,3053,2.905,3054,2.905,3055,2.905,3056,2.905,3057,2.905,3058,2.905,3059,2.905,3060,2.905,3061,2.905,3062,2.712,3063,2.905,3064,2.905,3065,2.905,3066,2.905,3067,2.905,3068,1.821,3069,3.221,3070,1.643,3071,1.821,3072,1.821,3073,1.821,3074,1.821,3075,1.821,3076,6.605,3077,1.821,3078,4.33,3079,4.33,3080,1.821,3081,4.33,3082,1.821,3083,1.821,3084,1.821,3085,1.821,3086,1.821,3087,1.821,3088,1.821,3089,3.221,3090,1.534,3091,1.643,3092,3.647,3093,5.276,3094,1.821,3095,3.221,3096,1.821,3097,1.821,3098,3.221,3099,1.821,3100,1.821,3101,1.821,3102,1.821,3103,1.821,3104,1.821,3105,1.821,3106,1.821,3107,1.821,3108,1.821,3109,1.821,3110,1.821,3111,3.647,3112,2.712,3113,1.821,3114,1.821,3115,3.906,3116,3.906,3117,1.455,3118,3.906,3119,1.821,3120,1.643,3121,11.134,3122,3.459,3123,1.643,3124,1.643,3125,1.643,3126,1.643,3127,1.643,3128,1.643,3129,1.643,3130,6.442,3131,6.442,3132,2.905,3133,2.905,3134,1.643,3135,1.821,3136,1.821]],["component/33",[11,0.279,108,0.486]],["title/34",[217,25.791,359,22.418,910,25.608,1134,23.357,2246,24.31,2331,27.977]],["name/34",[225,0.42,1411,0.794]],["text/34",[4,2.619,8,1.552,9,1.657,10,1.989,11,1.902,12,1.894,13,1.806,14,1.636,15,1.848,16,2.079,27,2.028,31,2.62,33,2.017,47,1.724,50,1.486,65,3.481,81,3.016,109,1.678,113,1.423,135,1.574,157,3.374,165,4.05,166,6.874,176,1.848,185,3.662,199,3.559,206,1.918,217,7.19,219,2.62,225,4.267,227,3.559,236,3.6,240,2.027,244,3.281,250,3.329,253,3.463,269,5.149,271,2.563,292,2.048,293,3.108,299,1.668,301,4.573,312,1.597,315,2.706,317,2.326,324,2.373,331,3.52,335,1.602,340,2.571,341,1.841,359,6.143,364,2.556,384,3.139,393,3.276,424,2.243,461,2.321,483,3.701,502,1.863,503,3.937,550,1.886,569,1.952,571,3.029,572,3.315,573,3.557,623,1.886,646,1.886,647,1.91,696,2.243,697,2.86,726,2.201,759,2.688,767,2.321,771,2.258,772,2.102,786,1.998,791,4.352,802,6.301,909,3.315,910,6.876,911,6.034,921,3.763,979,3.004,999,2.86,1004,2.273,1086,1.856,1134,3.333,1135,4.337,1244,5.201,1249,1.813,1352,2.411,1522,2.566,1576,3.298,1697,2.86,2003,3.062,2005,2.679,2094,3.28,2246,2.188,2253,2.243,2331,2.517,2456,1.871,2566,3.198,2808,3.491,2996,2.431,3137,3.636,3138,5.201,3139,3.28,3140,2.904,3141,2.517,3142,3.636,3143,5.766,3144,3.636,3145,4.605,3146,3.636,3147,3.636,3148,3.636,3149,3.636,3150,3.636,3151,3.062,3152,3.28,3153,3.062,3154,3.062,3155,3.636,3156,3.636,3157,3.636,3158,3.636,3159,3.636,3160,3.636,3161,3.636,3162,3.28,3163,3.636]],["component/34",[11,0.279,108,0.486]],["title/35-1",[588,55.237]],["name/35-1",[]],["text/35-1",[]],["component/35-1",[]],["title/35-2",[77,16.997,81,18.859,984,30.139,1962,34.085]],["name/35-2",[]],["text/35-2",[]],["component/35-2",[]],["title/35-3",[133,24.426,356,24.295,984,34.681]],["name/35-3",[]],["text/35-3",[]],["component/35-3",[]],["title/35-4",[469,29.4,984,40.833]],["name/35-4",[]],["text/35-4",[]],["component/35-4",[]],["title/35-5",[957,44.305]],["name/35-5",[]],["text/35-5",[]],["component/35-5",[]],["title/35-6",[27,17.931,483,26.341,759,23.769,910,32.315]],["name/35-6",[]],["text/35-6",[]],["component/35-6",[]],["title/35",[130,21.893,984,40.833]],["name/35",[984,1.204]],["text/35",[4,0.791,8,0.743,9,0.794,10,0.952,11,0.622,12,0.907,13,0.865,14,1.393,15,0.885,16,0.996,18,1.973,21,1.074,26,0.919,27,1.47,35,0.84,50,1.708,57,0.727,60,1.336,63,0.931,69,1.074,92,0.903,99,1.693,103,3.806,105,3.891,106,3.462,113,1.212,114,0.889,115,2.751,130,1.605,133,1.74,141,1.499,142,0.843,164,0.799,183,1.197,186,1.191,205,2.097,214,0.9,216,1.532,218,1.543,221,3.112,227,1.538,244,2.335,245,1.145,253,0.678,269,5.423,271,0.774,279,1.458,281,1.007,288,2.023,302,1.438,305,1.852,308,1.061,310,1.721,312,2.225,316,1.473,317,3.304,320,1.898,327,1.041,331,0.752,335,3.451,338,2.473,340,3.312,356,1.282,361,0.896,367,2.442,374,1.586,409,1.718,420,0.796,448,1.935,449,1.035,483,0.9,502,2.595,503,1.701,536,1.12,541,2.296,550,1.606,603,0.981,604,1.962,611,0.872,621,0.927,623,0.903,641,1.184,679,1.269,726,1.054,759,1.443,764,3.337,827,1.12,841,1.164,909,1.001,910,4.707,917,0.944,925,1.206,933,1.255,951,5.925,957,2.205,972,1.352,981,1.229,982,1.206,984,7.314,985,2.558,1102,2.484,1129,1.067,1155,1.439,1254,4.821,1367,1.242,1398,1.571,1405,2.473,1505,1.283,1688,2.367,1698,1.242,1709,1.467,2235,1.332,2253,7.006,2450,1.217,2453,2.723,2529,3.287,2531,2.185,2565,3.453,2756,3.453,2807,2.558,2858,1.532,2905,2.435,2987,1.137,3001,1.37,3010,1.467,3011,1.467,3012,2.607,3013,4.265,3014,4.887,3015,4.887,3016,4.887,3017,1.571,3020,1.571,3021,1.571,3022,1.571,3023,1.467,3024,1.571,3025,2.793,3026,1.467,3027,1.391,3028,2.793,3032,2.367,3033,1.467,3034,2.793,3035,2.793,3036,2.793,3037,2.793,3038,2.793,3039,2.793,3040,2.793,3041,2.793,3042,2.793,3043,2.793,3044,2.793,3045,3.77,3046,2.793,3047,2.793,3048,2.607,3049,2.793,3050,2.793,3051,2.793,3052,2.793,3053,2.793,3054,2.793,3055,2.793,3056,2.793,3057,2.793,3058,2.793,3059,2.793,3060,2.793,3061,2.793,3062,2.607,3063,2.793,3064,2.793,3065,2.793,3066,2.793,3067,2.793,3090,1.467,3091,1.571,3092,4.265,3093,5.134,3111,4.265,3112,3.519,3115,3.77,3116,3.77,3118,3.77,3120,1.571,3121,11.068,3122,3.338,3123,1.571,3124,1.571,3125,1.571,3126,1.571,3127,1.571,3128,1.571,3129,1.571,3130,6.282,3131,6.282,3132,2.793,3133,2.793,3134,1.571,3164,1.741,3165,1.571,3166,1.741,3167,4.179,3168,3.096,3169,1.741,3170,3.096,3171,1.741,3172,4.179,3173,1.741,3174,1.741,3175,1.741,3176,1.741,3177,1.741,3178,1.741,3179,1.741,3180,1.741,3181,1.741,3182,3.096,3183,1.741,3184,3.096,3185,1.741,3186,1.741,3187,1.741,3188,4.179,3189,1.741,3190,1.741,3191,1.741,3192,1.741,3193,1.741,3194,1.741,3195,1.741]],["component/35",[11,0.279,108,0.486]],["title/36-1",[496,48.809]],["name/36-1",[]],["text/36-1",[]],["component/36-1",[]],["title/36-2",[40,20.044,133,18.77,186,17.349,229,27.461,483,23.291]],["name/36-2",[]],["text/36-2",[]],["component/36-2",[]],["title/36-3",[7,28.573,40,30.28,133,18.77,186,17.349]],["name/36-3",[]],["text/36-3",[]],["component/36-3",[]],["title/36-4",[7,28.573,133,18.77,186,17.349,909,39.16]],["name/36-4",[]],["text/36-4",[]],["component/36-4",[]],["title/36-5",[77,16.997,81,18.859,1962,34.085,3196,37.568]],["name/36-5",[]],["text/36-5",[]],["component/36-5",[]],["title/36-6",[130,18.595,1962,39.221,3196,43.228]],["name/36-6",[]],["text/36-6",[]],["component/36-6",[]],["title/36-7",[133,24.426,1123,52.928,3197,52.928]],["name/36-7",[]],["text/36-7",[]],["component/36-7",[]],["title/36-8",[54,28.183,78,24.318,225,16.829,3198,37.967,3199,37.967]],["name/36-8",[]],["text/36-8",[]],["component/36-8",[]],["title/36",[130,18.595,225,21.9,320,26.654]],["name/36",[3198,0.947,3199,0.947]],["text/36",[0,0.9,4,0.979,8,0.92,9,2.25,10,2.042,11,0.433,12,1.123,13,1.071,14,1.68,15,1.096,16,1.233,18,1.454,19,1.179,27,1.736,33,1.196,45,1.005,50,1.525,57,0.9,68,1.087,71,3.762,81,0.797,102,1.163,103,1.105,105,2.452,106,2.302,113,1.461,114,1.905,115,2.791,119,1.008,130,2.746,133,3.256,148,1.109,151,1.132,157,1.758,169,1.202,170,2.616,171,1.274,172,1.142,173,1.044,183,2.276,185,0.888,186,1.9,192,2.52,213,1.492,218,1.075,220,3.785,223,1.396,225,4.396,228,1.588,240,1.202,244,1.986,249,3.067,252,0.947,253,1.454,269,5.564,271,3.477,281,1.246,282,2.585,292,2.78,293,2.778,297,1.297,299,1.712,304,1.722,313,1.441,317,3.495,320,0.979,323,0.955,335,3.212,340,2.968,347,2.675,360,1.128,364,0.955,380,1.253,393,0.985,420,0.985,421,1.123,447,1.075,483,1.114,486,1.722,502,1.105,509,2.662,510,2.982,515,1.537,529,1.321,541,2.713,556,1.722,621,1.147,651,1.321,693,1.418,774,2.75,776,1.57,835,2.918,909,1.239,934,2.349,938,1.386,940,2.561,946,2.818,949,2.855,951,4.248,952,3.144,957,1.137,975,2.349,995,1.357,1008,1.479,1054,1.945,1058,1.696,1067,1.781,1075,3.935,1121,3.944,1134,2.158,1144,1.75,1165,1.184,1199,1.945,1326,1.114,1405,1.722,1470,1.722,1474,1.945,1568,1.347,1576,4.732,1701,2.561,1707,3.558,1962,1.441,2103,1.537,2246,1.297,2253,2.303,2453,1.896,2531,2.635,2714,3.727,2726,1.722,2913,1.781,3010,1.815,3011,1.815,3152,1.945,3196,4.903,3197,5.311,3198,7.835,3199,8.256,3200,2.155,3201,2.155,3202,2.155,3203,2.155,3204,2.155,3205,1.945,3206,2.155,3207,2.155,3208,1.671,3209,6.655,3210,3.733,3211,1.815,3212,2.155,3213,3.144,3214,3.733,3215,3.733,3216,2.855,3217,3.733,3218,3.733,3219,3.733,3220,3.733,3221,3.733,3222,3.733,3223,4.233,3224,3.733,3225,3.733,3226,3.733,3227,2.155,3228,4.937,3229,4.937,3230,4.937,3231,3.733,3232,3.733,3233,3.733,3234,2.155,3235,2.155,3236,2.155,3237,2.155,3238,2.155,3239,2.155,3240,1.945,3241,1.945,3242,2.155,3243,2.155,3244,2.155,3245,2.155,3246,2.155,3247,2.155,3248,2.155,3249,1.815,3250,1.945,3251,2.155,3252,2.155,3253,2.155,3254,2.155,3255,2.155,3256,2.155,3257,2.155,3258,2.155,3259,3.733,3260,2.155,3261,2.155,3262,2.155,3263,2.155,3264,3.368,3265,5.604,3266,2.155,3267,2.155,3268,2.155,3269,3.733,3270,3.733,3271,2.155,3272,3.733,3273,2.155,3274,2.155]],["component/36",[11,0.279,108,0.486]],["title/37-1",[302,32.097,374,35.397]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["title/37-2",[481,42.341,656,35.686]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["title/37-3",[128,25.111,243,27.351,656,30.31]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["title/37-4",[164,23.385,243,23.769,458,25.422,798,27.017]],["name/37-4",[]],["text/37-4",[]],["component/37-4",[]],["title/37-5",[11,10.251,27,17.931,40,22.669,243,23.769]],["name/37-5",[]],["text/37-5",[]],["component/37-5",[]],["title/37",[27,20.633,243,27.351,656,30.31]],["name/37",[243,0.524,656,0.581]],["text/37",[0,1.688,4,1.837,8,1.726,9,1.843,10,2.212,11,1.26,12,2.106,13,2.009,14,1.82,15,2.056,16,2.313,17,1.979,40,1.798,50,1.652,54,2.528,68,2.04,75,2.171,77,1.348,81,1.496,95,2.854,96,2.338,101,2.212,106,3.577,113,2.453,114,2.064,115,4.892,126,1.972,128,3.284,130,1.282,133,1.684,161,2.244,164,1.855,169,2.255,180,1.911,183,1.564,184,2.301,192,1.731,237,2.729,242,2.255,243,4.612,244,1.627,252,1.776,253,1.575,256,3.726,269,5.312,279,3.613,281,3.623,302,1.879,310,1.666,312,1.776,317,3.772,335,2.761,340,2.795,354,3.553,361,3.224,364,1.792,367,2.363,393,1.849,465,3.405,474,4.617,481,3.841,484,2.233,491,4.339,493,3.405,525,2.255,529,4.703,551,4.029,569,3.365,582,3.101,623,2.098,630,2.545,637,2.212,656,3.238,657,3.584,777,5.006,798,2.143,806,2.703,827,2.6,870,2.545,974,2.75,1037,2.827,1326,3.238,1471,2.191,1505,2.979,1943,3.093,2022,4.672,2253,2.495,2439,3.283,2442,4.38,2487,2.266,2771,3.883,2831,3.883,2968,2.545,3205,6.922,3216,3.093,3275,3.648,3276,4.044,3277,4.044,3278,3.648,3279,3.648,3280,6.748,3281,3.648,3282,3.648,3283,3.648,3284,3.648,3285,4.044,3286,4.044,3287,4.044,3288,5.653,3289,4.044,3290,7.673,3291,3.648,3292,3.648,3293,3.648,3294,4.044,3295,4.044,3296,4.044,3297,4.044,3298,4.044,3299,4.044,3300,4.044,3301,4.044,3302,4.044,3303,4.044,3304,3.648,3305,3.648,3306,4.044,3307,4.044,3308,6.267,3309,4.044,3310,4.044,3311,4.044,3312,7.673,3313,4.044,3314,4.044,3315,4.044,3316,2.946,3317,4.044,3318,4.044,3319,4.044,3320,4.044,3321,4.044,3322,4.044,3323,6.267,3324,4.044,3325,6.267,3326,3.648,3327,5.278,3328,5.653]],["component/37",[11,0.279,108,0.486]],["title/38-1",[11,13.888,3329,62.317]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["title/38-2",[11,11.796,177,33.208,1704,33.38]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["title/38-3",[3330,70.719]],["name/38-3",[]],["text/38-3",[]],["component/38-3",[]],["title/38-4",[3331,75.757]],["name/38-4",[]],["text/38-4",[]],["component/38-4",[]],["title/38-5",[2088,70.719]],["name/38-5",[]],["text/38-5",[]],["component/38-5",[]],["title/38-6",[3332,75.757]],["name/38-6",[]],["text/38-6",[]],["component/38-6",[]],["title/38-7",[3333,75.757]],["name/38-7",[]],["text/38-7",[]],["component/38-7",[]],["title/38-8",[11,11.796,161,32.552,177,33.208]],["name/38-8",[]],["text/38-8",[]],["component/38-8",[]],["title/38-9",[3334,75.757]],["name/38-9",[]],["text/38-9",[]],["component/38-9",[]],["title/38-10",[3335,70.719]],["name/38-10",[]],["text/38-10",[]],["component/38-10",[]],["title/38-11",[3336,70.719]],["name/38-11",[]],["text/38-11",[]],["component/38-11",[]],["title/38-12",[3337,75.757]],["name/38-12",[]],["text/38-12",[]],["component/38-12",[]],["title/38-13",[361,35.541,1704,39.302]],["name/38-13",[]],["text/38-13",[]],["component/38-13",[]],["title/38-14",[140,40.601,1704,39.302]],["name/38-14",[]],["text/38-14",[]],["component/38-14",[]],["title/38-15",[3338,75.757]],["name/38-15",[]],["text/38-15",[]],["component/38-15",[]],["title/38-16",[3339,75.757]],["name/38-16",[]],["text/38-16",[]],["component/38-16",[]],["title/38-17",[3340,83.973]],["name/38-17",[]],["text/38-17",[]],["component/38-17",[]],["title/38-18",[3341,75.757]],["name/38-18",[]],["text/38-18",[]],["component/38-18",[]],["title/38-19",[800,44.413,1704,39.302]],["name/38-19",[]],["text/38-19",[]],["component/38-19",[]],["title/38",[323,30.619,1704,39.302]],["name/38",[361,0.579,1704,0.64]],["text/38",[4,0.81,8,0.761,9,0.812,10,0.975,11,1.728,12,0.929,13,0.885,14,0.802,15,0.906,16,1.019,17,0.872,26,0.94,27,3.495,32,1.978,37,0.899,38,0.944,47,2.018,51,1.042,58,1.608,67,1.488,68,2.147,70,1.042,71,2.083,75,0.957,77,2.352,81,1.169,84,3.811,88,1.155,93,1.009,109,1.965,114,0.91,119,1.478,123,1.172,128,2.791,130,1.868,133,0.742,135,0.772,139,1.552,140,5.219,157,1.488,158,2.168,161,5.068,164,1.952,170,0.944,171,1.054,172,0.944,177,4.256,183,1.222,184,1.014,190,3.368,192,1.353,201,3.675,205,0.738,215,1.048,223,1.155,230,1.95,243,0.831,250,0.828,253,2.295,269,4.278,271,1.893,285,1.019,288,2.494,293,1.963,297,4.245,299,1.449,307,0.994,310,2.122,317,0.719,323,2.89,335,0.785,340,0.795,342,0.966,347,2.791,353,2.442,354,1.972,356,3.281,361,2.65,364,0.79,369,4.162,371,0.91,376,1.019,378,0.97,392,0.882,393,1.946,409,1.753,414,4.104,428,1.258,451,2.661,455,1.163,505,1.172,506,1.202,519,2.063,529,1.093,540,1.072,550,2.672,558,3.123,560,3.939,562,3.504,582,3.491,603,1.004,610,2.843,617,2.448,619,5.471,623,1.639,637,1.728,643,0.966,646,0.925,647,0.936,657,1.019,674,1.072,679,2.302,683,2.253,690,1.313,702,0.966,741,1.271,764,1.817,771,1.962,772,1.827,786,1.737,798,0.944,800,6.021,857,1.114,863,1.066,922,2.047,929,1.146,938,1.146,972,1.38,977,5.053,987,2.328,995,4.104,1004,1.114,1010,3.846,1012,1.402,1028,1.837,1035,4.172,1046,1.271,1086,0.91,1109,2.149,1165,2.83,1186,1.817,1196,6.06,1249,1.576,1353,1.138,1366,1.192,1420,1.223,1471,1.712,1494,1.192,1519,4.338,1558,3.939,1559,2.13,1560,1.608,1567,1.155,1607,1.424,1609,4.53,1613,1.146,1619,2.417,1638,5.882,1639,1.608,1645,1.762,1649,1.212,1704,6.791,1708,1.13,1963,2.253,2088,1.501,2089,4.507,2157,1.138,2499,2.486,2577,3.214,2718,2.488,2734,1.163,2758,5.634,2821,1.568,2822,1.712,2879,1.568,2904,1.346,2966,1.424,2995,1.234,2998,3.994,3000,1.223,3122,1.424,3141,2.188,3326,1.608,3329,7.756,3330,8.629,3331,2.851,3334,6.365,3335,1.501,3336,2.661,3342,1.782,3343,3.16,3344,2.302,3345,1.782,3346,3.4,3347,6.673,3348,3.16,3349,1.424,3350,6.614,3351,1.782,3352,1.782,3353,1.782,3354,1.782,3355,1.271,3356,5.893,3357,5.317,3358,1.782,3359,1.782,3360,1.782,3361,1.363,3362,1.608,3363,1.501,3364,1.501,3365,1.271,3366,1.608,3367,1.782,3368,3.256,3369,1.501,3370,1.782,3371,1.782,3372,1.782,3373,1.271,3374,1.501,3375,1.501,3376,3.035,3377,1.363,3378,3.16,3379,3.16,3380,2.851,3381,1.346,3382,1.782,3383,1.782,3384,3.362,3385,1.424,3386,1.782,3387,1.313,3388,1.782,3389,1.782,3390,1.782,3391,1.608,3392,1.782,3393,1.608,3394,1.782,3395,1.501,3396,2.851,3397,1.782,3398,1.782,3399,5.151]],["component/38",[11,0.279,108,0.486]],["title/39-1",[68,42.354]],["name/39-1",[]],["text/39-1",[]],["component/39-1",[]],["title/39-2",[2998,47.532]],["name/39-2",[]],["text/39-2",[]],["component/39-2",[]],["title/39-3",[2998,39.1,3400,58.174]],["name/39-3",[]],["text/39-3",[]],["component/39-3",[]],["title/39-4",[3401,75.757]],["name/39-4",[]],["text/39-4",[]],["component/39-4",[]],["title/39-5",[3402,83.973]],["name/39-5",[]],["text/39-5",[]],["component/39-5",[]],["title/39-6",[3403,83.973]],["name/39-6",[]],["text/39-6",[]],["component/39-6",[]],["title/39-7",[3404,83.973]],["name/39-7",[]],["text/39-7",[]],["component/39-7",[]],["title/39-8",[3405,83.973]],["name/39-8",[]],["text/39-8",[]],["component/39-8",[]],["title/39-9",[3406,83.973]],["name/39-9",[]],["text/39-9",[]],["component/39-9",[]],["title/39-10",[3407,75.757]],["name/39-10",[]],["text/39-10",[]],["component/39-10",[]],["title/39-11",[3408,83.973]],["name/39-11",[]],["text/39-11",[]],["component/39-11",[]],["title/39-12",[3409,83.973]],["name/39-12",[]],["text/39-12",[]],["component/39-12",[]],["title/39-13",[3385,67.077]],["name/39-13",[]],["text/39-13",[]],["component/39-13",[]],["title/39-14",[1326,35.686,2998,39.1]],["name/39-14",[]],["text/39-14",[]],["component/39-14",[]],["title/39-15",[226,38.901,290,49.776]],["name/39-15",[]],["text/39-15",[]],["component/39-15",[]],["title/39-16",[226,38.901,957,36.445]],["name/39-16",[]],["text/39-16",[]],["component/39-16",[]],["title/39-17",[2718,40.373,2998,39.1]],["name/39-17",[]],["text/39-17",[]],["component/39-17",[]],["title/39-18",[957,26.901,2998,28.86,3410,45.997,3411,33.807]],["name/39-18",[]],["text/39-18",[]],["component/39-18",[]],["title/39-19",[47,27.814,2998,33.208,3373,41.834]],["name/39-19",[]],["text/39-19",[]],["component/39-19",[]],["title/39-20",[37,22.739,38,23.889,370,25.922,753,24.318,1326,23.291]],["name/39-20",[]],["text/39-20",[]],["component/39-20",[]],["title/39-21",[753,24.318,1326,23.291,1471,24.429,3373,32.147,3412,34.479]],["name/39-21",[]],["text/39-21",[]],["component/39-21",[]],["title/39-22",[370,25.922,1326,23.291,1471,24.429,3373,32.147,3412,34.479]],["name/39-22",[]],["text/39-22",[]],["component/39-22",[]],["title/39-23",[753,24.318,1326,23.291,2456,23.196,3373,32.147,3412,34.479]],["name/39-23",[]],["text/39-23",[]],["component/39-23",[]],["title/39-24",[370,25.922,1326,23.291,2456,23.196,3373,32.147,3412,34.479]],["name/39-24",[]],["text/39-24",[]],["component/39-24",[]],["title/39-25",[1704,33.38,2998,33.208,3413,52.928]],["name/39-25",[]],["text/39-25",[]],["component/39-25",[]],["title/39-26",[1568,43.182,3368,52.828]],["name/39-26",[]],["text/39-26",[]],["component/39-26",[]],["title/39-27",[253,22.852,1568,36.675,3368,44.869]],["name/39-27",[]],["text/39-27",[]],["component/39-27",[]],["title/39-28",[3414,75.757]],["name/39-28",[]],["text/39-28",[]],["component/39-28",[]],["title/39-29",[3415,75.757]],["name/39-29",[]],["text/39-29",[]],["component/39-29",[]],["title/39-30",[3416,75.757]],["name/39-30",[]],["text/39-30",[]],["component/39-30",[]],["title/39-31",[93,39.1,859,49.256]],["name/39-31",[]],["text/39-31",[]],["component/39-31",[]],["title/39-32",[175,34.706,2998,39.1]],["name/39-32",[]],["text/39-32",[]],["component/39-32",[]],["title/39-33",[469,35.74]],["name/39-33",[]],["text/39-33",[]],["component/39-33",[]],["title/39-34",[139,28.818,299,26.909,2998,33.208]],["name/39-34",[]],["text/39-34",[]],["component/39-34",[]],["title/39-35",[253,26.906,3400,58.174]],["name/39-35",[]],["text/39-35",[]],["component/39-35",[]],["title/39",[3417,75.757]],["name/39",[139,0.553,2998,0.637]],["text/39",[0,0.75,4,0.354,8,0.171,9,0.672,10,0.219,11,0.536,12,0.935,13,0.387,14,0.511,15,0.578,16,0.229,21,0.701,22,0.684,24,0.21,25,0.779,26,0.599,27,2.456,32,0.976,33,0.222,35,1.153,36,1.839,37,1.206,38,1.267,45,1.366,46,1.748,47,2.674,49,1.155,50,0.977,53,0.962,59,0.701,60,0.173,63,0.607,65,0.716,67,2.656,68,0.744,70,0.455,74,3.08,75,0.215,76,0.573,77,0.379,78,0.216,81,0.288,84,0.455,86,0.588,90,0.299,93,0.227,97,0.233,99,1.459,100,0.221,101,0.621,102,0.613,103,1.225,105,2.223,106,1.804,113,0.577,117,2.022,118,0.202,119,1.6,128,2.072,130,0.929,132,0.18,135,0.638,139,3.38,140,0.458,144,0.2,148,1.23,149,0.337,152,0.275,157,0.989,158,1.232,160,2.881,161,0.222,163,0.705,164,3.811,167,0.306,169,0.223,170,3.408,172,0.781,175,3.108,176,0.913,178,0.496,180,0.368,181,0.477,183,0.812,185,0.321,187,0.245,190,1.999,192,0.171,194,0.21,199,0.732,201,1.094,205,0.166,215,0.458,216,0.198,217,0.256,221,0.377,226,3.688,230,0.247,231,0.599,236,0.571,237,0.642,240,0.434,242,1.634,244,1.801,245,0.747,248,0.81,250,0.976,252,1.397,253,1.141,265,0.566,268,0.404,269,4.897,271,3.059,274,0.725,280,1.052,281,1.038,285,1.201,288,0.714,289,2.419,290,6.172,291,0.561,293,0.562,296,1.242,297,1.438,299,0.184,302,0.186,303,3.337,305,0.345,308,1.456,309,0.42,310,0.165,317,3.43,323,1.984,324,0.261,325,0.497,328,0.306,330,1.487,331,1.477,332,0.613,335,2.985,337,1.637,340,2.079,341,0.394,342,0.217,347,0.217,353,0.851,360,0.771,361,0.401,363,0.222,364,0.178,369,0.725,370,2.346,371,2.284,373,0.413,378,0.978,383,0.441,392,0.385,393,1.454,406,0.558,407,0.213,409,1.48,414,1.678,424,0.48,439,0.468,444,0.46,450,1.05,455,0.261,458,0.2,461,0.497,469,1.135,472,0.223,479,0.702,489,5.24,495,0.391,507,1.16,514,0.286,519,0.261,520,1.756,525,0.223,529,0.477,532,0.256,536,0.501,538,0.561,540,1.438,544,0.32,547,0.337,548,0.292,550,2.849,558,0.413,569,2.078,571,1.256,573,0.91,582,3.241,610,0.711,611,1.197,617,1.208,621,0.785,623,3.569,629,0.247,630,0.49,633,0.504,641,0.773,644,0.48,645,0.928,646,0.404,647,0.21,649,0.227,651,0.245,653,1.146,657,0.65,660,0.957,661,1.128,667,0.306,668,0.224,674,0.241,696,0.48,702,0.422,703,0.477,707,0.715,709,0.286,713,0.218,718,0.52,726,0.242,751,0.257,753,3.337,759,1.115,764,1.375,765,0.555,772,0.852,778,4.137,786,1.314,789,0.295,800,0.257,803,1.678,816,0.45,818,0.259,827,0.257,835,0.46,837,0.32,842,0.52,856,0.252,857,2.139,859,0.555,863,1.074,871,0.249,879,0.252,907,0.286,908,0.275,909,0.23,912,0.32,917,0.616,929,0.501,957,3.052,970,0.306,972,0.34,977,0.668,991,0.286,993,0.622,995,2.002,997,3.047,1004,1.667,1010,5.59,1028,0.66,1030,0.725,1035,1.166,1036,0.643,1039,0.275,1046,0.555,1055,2.13,1056,0.529,1058,0.894,1062,0.311,1064,0.555,1086,2.186,1089,0.539,1102,0.238,1109,0.272,1119,0.828,1129,0.245,1131,0.508,1135,0.688,1137,0.302,1156,0.32,1161,0.361,1165,0.624,1167,0.277,1186,0.848,1187,0.275,1188,1.003,1202,0.299,1215,0.828,1216,1.1,1224,1.221,1249,2.884,1252,0.252,1253,0.252,1270,0.656,1325,0.295,1326,3.196,1327,0.544,1338,0.773,1340,0.256,1353,1.146,1364,0.315,1367,0.286,1368,0.32,1380,1.041,1393,1.512,1417,0.32,1421,0.32,1422,0.32,1423,0.622,1434,1.087,1435,1.308,1446,0.595,1450,0.25,1471,1.445,1493,0.295,1494,0.52,1511,0.32,1512,0.32,1514,0.337,1520,0.272,1521,0.337,1559,3.899,1568,1.667,1576,0.445,1602,0.701,1607,1.678,1613,1.351,1615,0.957,1619,0.306,1645,1.171,1649,0.773,1687,0.289,1688,0.306,1696,0.361,1704,3.915,1705,0.72,1706,0.28,1708,0.493,1840,0.337,1901,0.27,1902,0.574,1908,0.574,1942,0.295,1945,0.555,1963,1.28,2022,1.339,2038,0.561,2085,0.289,2089,0.869,2092,1.242,2103,0.286,2114,0.295,2117,0.289,2118,1.943,2157,0.941,2239,0.869,2246,0.468,2253,0.701,2333,0.525,2343,0.245,2415,0.957,2423,0.28,2434,0.325,2443,0.325,2451,2.267,2456,1.878,2499,0.315,2503,0.331,2577,1.356,2580,1.864,2600,0.352,2625,0.32,2705,0.286,2716,2.502,2718,5.006,2734,0.742,2758,2.328,2797,0.685,2801,1.416,2875,1.323,2878,0.344,2885,0.632,2909,0.331,2917,0.315,2961,0.275,2966,0.32,2968,0.928,2972,0.595,2995,4.193,2997,0.32,2998,6.892,3032,0.595,3062,0.337,3265,0.337,3316,1.943,3330,0.337,3332,0.361,3335,1.769,3336,1.242,3337,1.33,3338,1.025,3339,1.025,3341,0.361,3346,2.13,3347,0.337,3350,0.622,3355,3.916,3368,3.275,3373,3.324,3374,2.679,3375,2.881,3380,0.361,3381,0.302,3384,0.261,3385,3.575,3387,3.567,3393,0.361,3395,2.246,3400,7.313,3401,3.086,3407,0.361,3410,1.895,3411,1.393,3412,0.306,3413,1.895,3414,0.702,3415,0.361,3416,1.025,3417,0.702,3418,1.796,3419,2.667,3420,2.583,3421,3.259,3422,0.4,3423,5.492,3424,1.965,3425,4.476,3426,0.779,3427,0.337,3428,1.136,3429,3.293,3430,0.907,3431,0.306,3432,0.907,3433,2.467,3434,3.65,3435,0.4,3436,0.306,3437,0.4,3438,0.4,3439,0.4,3440,0.361,3441,0.4,3442,0.4,3443,0.4,3444,0.702,3445,0.32,3446,0.4,3447,0.4,3448,0.4,3449,0.4,3450,0.361,3451,0.4,3452,2.013,3453,0.4,3454,0.4,3455,0.574,3456,3.293,3457,4.955,3458,0.4,3459,2.101,3460,2.643,3461,3.421,3462,1.136,3463,2.406,3464,0.4,3465,0.4,3466,1.136,3467,0.4,3468,0.337,3469,0.4,3470,0.702,3471,0.622,3472,1.416,3473,0.4,3474,1.475,3475,0.4,3476,0.4,3477,0.4,3478,0.4,3479,0.595,3480,0.787,3481,0.337,3482,1.074,3483,1.242,3484,0.337,3485,0.779,3486,0.779,3487,0.779,3488,1.33,3489,1.242,3490,0.4,3491,0.4,3492,0.4,3493,1.136,3494,1.136,3495,1.136,3496,1.136,3497,1.136,3498,1.475,3499,1.136,3500,0.779,3501,0.779,3502,6.056,3503,5.338,3504,0.4,3505,0.779,3506,1.136,3507,0.702,3508,0.957,3509,0.779,3510,1.33,3511,2.246,3512,0.779,3513,0.779,3514,0.779,3515,0.4,3516,0.4,3517,0.4,3518,1.475,3519,0.306,3520,1.242,3521,0.4,3522,1.136,3523,0.837,3524,1.025,3525,0.957,3526,0.4,3527,0.4,3528,0.4,3529,0.4,3530,0.32,3531,0.779,3532,0.4,3533,0.4,3534,1.136,3535,1.136,3536,0.4,3537,1.136,3538,0.4,3539,0.4,3540,0.4,3541,0.4,3542,2.391,3543,1.796,3544,3.421,3545,0.656,3546,0.656,3547,0.779,3548,1.113,3549,0.4,3550,0.4,3551,1.136,3552,0.4,3553,1.136,3554,1.136,3555,0.779,3556,0.4,3557,1.475,3558,0.4,3559,1.136,3560,1.136,3561,1.136,3562,1.136,3563,0.4,3564,0.4,3565,0.292,3566,0.4,3567,1.475,3568,0.4,3569,0.4,3570,0.4,3571,0.4,3572,0.4,3573,0.4,3574,0.4,3575,0.4,3576,0.779,3577,0.4,3578,0.4,3579,0.4,3580,0.957,3581,0.4,3582,0.702,3583,0.779,3584,0.4,3585,0.779,3586,0.4,3587,0.779,3588,0.4,3589,0.4,3590,0.779,3591,0.4,3592,0.361,3593,0.4,3594,0.263,3595,1.136,3596,0.4,3597,0.779,3598,0.779,3599,0.4,3600,0.4,3601,0.4,3602,0.4,3603,0.4,3604,0.4,3605,0.779,3606,3.181,3607,0.779,3608,0.779,3609,0.4,3610,0.4,3611,0.4,3612,0.361,3613,0.4,3614,0.622,3615,0.352,3616,1.136,3617,0.779,3618,0.779,3619,0.779,3620,0.779,3621,1.136,3622,0.779,3623,0.656,3624,0.779,3625,0.4,3626,0.337,3627,0.32,3628,0.337,3629,0.337,3630,0.4,3631,0.4,3632,0.4,3633,0.4,3634,0.4,3635,0.779,3636,0.4,3637,0.4,3638,1.136,3639,0.4,3640,0.4,3641,0.4,3642,0.306,3643,0.779,3644,0.4,3645,0.361,3646,0.4,3647,0.4,3648,0.4,3649,0.4,3650,0.779,3651,0.4,3652,0.4,3653,0.779,3654,0.361,3655,0.361,3656,0.4,3657,0.4,3658,0.4,3659,0.4,3660,0.4,3661,0.4,3662,0.4,3663,0.337,3664,0.4,3665,0.352,3666,0.4,3667,0.4,3668,0.702,3669,0.4,3670,0.837,3671,0.907,3672,0.4,3673,0.4,3674,0.4,3675,0.4,3676,0.337,3677,0.4,3678,2.667,3679,1.475,3680,0.779,3681,0.779,3682,0.4,3683,0.702,3684,1.33,3685,0.4,3686,0.4,3687,0.4,3688,0.4,3689,0.779,3690,0.779,3691,0.779,3692,0.779,3693,0.4,3694,0.957]],["component/39",[11,0.279,108,0.486]],["title/40-1",[113,27.038,3411,45.802]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["title/40-2",[93,39.1,2580,48.285]],["name/40-2",[]],["text/40-2",[]],["component/40-2",[]],["title/40-3",[244,27.793,3695,50.897]],["name/40-3",[]],["text/40-3",[]],["component/40-3",[]],["title/40-4",[3696,75.757]],["name/40-4",[]],["text/40-4",[]],["component/40-4",[]],["title/40-5",[139,33.93,1645,38.515]],["name/40-5",[]],["text/40-5",[]],["component/40-5",[]],["title/40-6",[1645,38.515,3594,45.438]],["name/40-6",[]],["text/40-6",[]],["component/40-6",[]],["title/40-7",[2379,70.719]],["name/40-7",[]],["text/40-7",[]],["component/40-7",[]],["title/40-8",[274,44.092,1645,38.515]],["name/40-8",[]],["text/40-8",[]],["component/40-8",[]],["title/40-9",[309,37.26,1645,38.515]],["name/40-9",[]],["text/40-9",[]],["component/40-9",[]],["title/40-10",[1645,38.515,3697,62.317]],["name/40-10",[]],["text/40-10",[]],["component/40-10",[]],["title/40-11",[938,53.991]],["name/40-11",[]],["text/40-11",[]],["component/40-11",[]],["title/40-12",[1420,47.393,1645,38.515]],["name/40-12",[]],["text/40-12",[]],["component/40-12",[]],["title/40-13",[406,41.248]],["name/40-13",[]],["text/40-13",[]],["component/40-13",[]],["title/40-14",[1028,48.809]],["name/40-14",[]],["text/40-14",[]],["component/40-14",[]],["title/40-15",[253,32.708]],["name/40-15",[]],["text/40-15",[]],["component/40-15",[]],["title/40-16",[1156,55.177,1645,38.515]],["name/40-16",[]],["text/40-16",[]],["component/40-16",[]],["title/40-17",[1645,38.515,3698,58.174]],["name/40-17",[]],["text/40-17",[]],["component/40-17",[]],["title/40-18",[139,33.93,469,29.4]],["name/40-18",[]],["text/40-18",[]],["component/40-18",[]],["title/40-19",[185,28.453,2630,66.332]],["name/40-19",[]],["text/40-19",[]],["component/40-19",[]],["title/40-20",[221,33.442,253,26.906]],["name/40-20",[]],["text/40-20",[]],["component/40-20",[]],["title/40-21",[469,29.4,1112,40.15]],["name/40-21",[]],["text/40-21",[]],["component/40-21",[]],["title/40-22",[11,11.796,185,24.166,1102,34.882]],["name/40-22",[]],["text/40-22",[]],["component/40-22",[]],["title/40",[93,47.532]],["name/40",[93,1.152]],["text/40",[0,1.047,4,0.295,7,0.411,8,0.406,9,0.433,10,0.182,11,1.087,12,0.173,13,0.753,14,0.149,15,0.169,16,0.19,19,0.52,22,0.2,24,0.651,26,0.342,27,3.167,32,1.37,33,1.392,35,0.858,36,0.192,37,0.625,38,0.344,40,0.288,41,0.184,42,0.858,44,0.383,45,1.74,46,0.833,47,0.718,49,0.213,50,1.025,51,0.194,52,0.426,53,0.423,54,0.207,57,0.271,60,0.143,61,0.22,62,0.224,63,0.508,65,0.865,66,0.948,67,1.071,68,0.167,71,0.262,73,0.764,75,0.51,76,1.265,77,1.052,78,0.513,81,0.24,89,0.205,92,0.493,93,2.912,95,0.671,96,0.375,97,0.377,99,1.245,100,0.358,101,0.355,102,0.35,103,0.332,105,0.472,106,0.578,109,1.457,111,0.197,113,2.791,115,1.398,117,2.414,119,1.91,121,0.308,123,0.815,126,0.162,127,0.761,128,1.674,130,1.969,131,0.846,132,0.149,133,0.27,135,0.77,137,0.75,139,2.39,140,0.195,141,0.46,142,0.161,144,1.017,148,0.334,152,0.445,157,0.957,158,0.228,159,0.741,163,0.403,164,1.044,165,1.246,166,0.433,168,0.218,169,0.53,170,1.077,171,0.562,172,0.943,173,0.314,175,0.478,176,1.157,177,0.367,178,0.541,179,0.575,180,0.96,181,0.203,183,3.893,184,2.124,185,4.641,186,1.816,188,3,190,1.05,192,1.17,194,0.174,197,0.611,198,0.187,200,0.177,201,0.645,205,4.18,206,0.939,208,0.607,214,0.783,216,1.459,218,0.323,220,0.213,223,1.77,226,0.187,227,0.165,228,0.245,229,0.579,230,0.764,231,0.501,234,0.228,236,0.894,237,1.921,238,0.579,240,0.845,241,0.42,242,1.978,243,0.948,244,3.794,245,0.815,246,0.426,248,0.237,249,0.173,250,1.27,251,0.194,252,2.43,253,1.307,256,0.737,265,0.474,268,0.923,269,4.304,271,3.52,272,0.552,273,0.513,274,1.882,276,0.598,278,1.498,279,0.305,281,1.315,282,0.449,286,0.348,287,0.724,288,0.733,289,2.553,293,0.362,295,0.7,298,0.7,299,0.816,302,0.827,303,0.172,305,0.421,309,0.513,310,0.937,316,0.452,317,1.431,320,0.295,323,1.009,324,0.423,325,0.967,328,0.254,329,1.221,331,1.611,332,0.817,335,0.896,337,1.046,340,0.553,341,3.611,342,0.515,343,0.237,347,0.515,353,1.936,354,2.253,356,1.546,359,0.527,360,0.648,363,0.687,364,1.572,371,3.555,373,0.176,374,0.17,376,0.19,378,0.181,380,1.588,382,0.462,383,0.188,384,0.353,392,2.261,393,1.788,406,2.835,407,0.947,409,0.184,414,0.209,420,0.296,423,0.397,428,0.458,439,0.745,447,0.474,450,0.379,454,0.417,457,0.22,458,0.323,467,1.049,469,2.189,470,0.209,471,0.254,472,0.53,473,0.237,474,0.245,479,0.308,481,0.203,482,0.188,483,0.171,484,1.122,489,0.645,491,0.23,497,0.213,501,0.363,502,0.332,503,0.356,506,1.534,507,0.684,511,0.445,512,0.28,513,0.28,516,1.509,520,0.358,525,3.152,527,0.215,532,0.414,540,0.2,541,0.182,542,0.218,546,1.919,550,0.172,551,2.029,558,0.176,569,2.613,571,1.961,572,0.191,573,0.4,576,0.251,582,2.478,593,0.182,597,0.237,599,0.607,603,1.281,609,1.005,610,1.618,611,0.891,612,1.08,617,0.373,619,0.997,620,0.727,621,0.659,623,1.529,624,1.052,627,1.018,630,0.598,631,0.764,632,0.224,634,0.586,637,0.355,638,0.239,639,0.228,640,0.727,643,0.18,645,0.598,646,0.336,647,0.341,649,0.538,651,0.203,653,0.967,658,0.218,668,0.849,670,0.261,682,0.222,683,0.237,688,0.973,696,0.4,698,1.254,699,0.261,700,0.28,702,0.351,703,1.246,704,0.28,707,0.209,709,1.949,711,0.254,712,0.237,713,2.129,719,1.848,722,0.745,741,0.237,746,0.478,751,0.974,752,0.217,753,0.35,756,0.912,758,0.546,759,0.83,760,0.585,763,0.299,764,2.348,765,0.237,770,0.254,771,0.206,772,0.192,773,0.362,778,1.624,779,0.462,786,2.51,787,0.299,788,0.437,792,0.265,795,2.355,797,0.496,798,0.176,800,0.611,803,0.265,806,4.082,809,0.265,810,0.299,811,0.239,816,0.716,818,0.803,827,0.417,835,0.196,837,0.265,842,1.827,856,0.408,857,0.405,859,0.678,861,0.462,863,2.542,864,0.417,870,1.579,871,0.403,881,0.245,882,0.585,917,0.18,922,0.215,938,0.611,957,0.342,972,0.994,973,0.28,975,0.209,976,0.28,977,0.728,980,0.237,982,0.23,991,0.462,995,0.954,996,0.449,997,0.78,1003,0.234,1004,0.775,1008,0.652,1010,1.327,1011,0.218,1028,2.274,1030,1.136,1034,0.265,1035,0.687,1036,0.701,1039,0.228,1055,0.518,1056,0.441,1058,0.261,1084,0.913,1086,1.712,1102,6.183,1110,0.27,1112,1.458,1119,0.242,1128,0.226,1129,0.397,1131,1.784,1135,0.201,1142,0.652,1154,1.2,1156,2.982,1165,0.356,1173,0.441,1177,0.265,1181,0.28,1182,0.247,1183,0.518,1186,0.191,1191,1.498,1192,0.265,1194,0.518,1195,0.57,1196,0.254,1197,1.367,1198,0.7,1205,0.99,1217,0.709,1224,0.843,1246,0.27,1249,2.819,1252,0.408,1323,0.265,1325,0.245,1326,0.919,1338,0.441,1343,0.625,1344,1.116,1352,1.348,1353,2.816,1363,0.585,1366,0.222,1380,3.434,1390,1.256,1391,0.195,1393,0.28,1399,0.546,1400,0.585,1402,0.247,1417,1.21,1420,1.721,1435,1.296,1450,1.422,1471,0.964,1493,0.913,1494,0.828,1528,0.254,1537,0.299,1539,0.857,1559,0.437,1564,0.261,1568,0.207,1576,2.524,1602,4.297,1603,0.737,1605,0.299,1645,5.869,1649,0.226,1660,2.102,1694,0.57,1695,0.961,1697,0.261,1704,0.862,1705,0.411,1706,0.232,1708,0.785,1846,0.232,1901,0.224,1902,0.478,1903,0.299,1945,0.237,1962,0.222,1965,0.759,2004,0.265,2005,0.245,2038,0.239,2039,0.43,2057,0.245,2059,0.585,2060,0.759,2117,1.092,2118,0.242,2150,0.251,2152,0.299,2157,0.791,2161,0.222,2235,0.254,2239,0.254,2246,0.745,2247,0.239,2253,3.767,2327,0.518,2333,0.437,2335,0.585,2375,1.276,2376,0.518,2379,0.28,2394,1.848,2410,0.472,2415,0.28,2423,1.754,2433,1.812,2435,0.308,2441,0.265,2442,1.421,2451,1.105,2456,0.637,2460,0.785,2487,0.849,2488,0.862,2499,1.192,2500,0.623,2501,0.319,2502,0.623,2504,0.319,2512,1.481,2524,0.319,2525,1.788,2530,0.308,2577,0.489,2580,1.754,2604,0.913,2628,1.144,2718,0.555,2730,0.292,2737,0.232,2755,0.251,2758,0.572,2775,0.274,2786,0.623,2797,1.333,2821,0.57,2873,2.931,2875,0.7,2904,0.251,2962,1.077,2968,0.78,2969,0.518,2974,2.465,2975,0.28,2987,0.423,2989,0.265,2991,0.265,2995,1.232,2996,0.222,2998,1.288,3000,1.039,3002,0.678,3003,0.518,3117,4.516,3264,1.118,3316,2.719,3328,1.367,3344,0.242,3349,0.265,3350,0.759,3355,0.462,3361,0.254,3365,0.237,3368,0.254,3374,0.8,3375,0.28,3384,0.423,3411,0.43,3420,0.489,3427,0.546,3430,2.004,3431,0.727,3471,0.759,3482,0.242,3489,1.276,3507,0.299,3508,0.546,3511,0.28,3520,0.8,3524,0.857,3525,0.28,3548,0.251,3565,0.242,3582,1.118,3594,0.218,3626,0.28,3627,0.265,3628,0.28,3629,0.8,3642,0.254,3645,0.585,3695,1.116,3696,0.857,3697,0.299,3698,1.043,3699,0.332,3700,0.332,3701,0.467,3702,0.299,3703,0.332,3704,1.311,3705,0.28,3706,0.332,3707,0.299,3708,0.332,3709,0.585,3710,0.648,3711,0.332,3712,2.66,3713,0.332,3714,0.95,3715,0.332,3716,0.332,3717,0.332,3718,0.332,3719,0.332,3720,0.332,3721,0.332,3722,0.299,3723,0.299,3724,0.332,3725,0.8,3726,0.299,3727,0.265,3728,1.118,3729,1.239,3730,0.518,3731,0.332,3732,0.332,3733,0.332,3734,0.332,3735,0.332,3736,0.332,3737,0.332,3738,0.332,3739,0.648,3740,0.332,3741,0.332,3742,0.332,3743,0.332,3744,0.727,3745,1.834,3746,0.95,3747,0.648,3748,0.332,3749,0.585,3750,0.332,3751,0.332,3752,0.332,3753,0.332,3754,0.299,3755,0.332,3756,0.332,3757,0.332,3758,0.299,3759,1.515,3760,1.779,3761,1.239,3762,2.033,3763,0.95,3764,0.648,3765,0.332,3766,0.332,3767,0.299,3768,0.299,3769,0.332,3770,1.515,3771,0.332,3772,0.332,3773,0.648,3774,0.332,3775,0.332,3776,0.332,3777,0.332,3778,0.332,3779,0.332,3780,0.332,3781,0.332,3782,0.299,3783,0.496,3784,0.299,3785,0.332,3786,0.332,3787,0.257,3788,0.332,3789,0.332,3790,0.332,3791,0.332,3792,0.95,3793,0.332,3794,0.648,3795,0.332,3796,0.332,3797,0.95,3798,0.332,3799,0.332,3800,1.239,3801,0.332,3802,0.332,3803,0.332,3804,0.332,3805,0.332,3806,0.332,3807,0.332,3808,0.28,3809,0.332,3810,0.332,3811,0.332,3812,0.99,3813,0.332,3814,0.458,3815,0.332,3816,0.332,3817,0.648,3818,0.648,3819,0.332,3820,0.332,3821,0.332,3822,0.332,3823,0.332,3824,0.332,3825,0.95,3826,0.332,3827,0.332,3828,0.648,3829,0.648,3830,0.648,3831,0.648,3832,0.332,3833,0.332,3834,0.28,3835,0.292,3836,0.299,3837,0.332,3838,0.585,3839,0.585,3840,0.332,3841,0.299,3842,0.623,3843,0.585,3844,0.299,3845,0.332,3846,0.332,3847,0.332,3848,0.332,3849,0.332,3850,0.332,3851,0.332,3852,0.332,3853,0.332,3854,0.332,3855,0.332,3856,0.95,3857,0.332,3858,0.648,3859,0.648,3860,0.648,3861,0.332,3862,0.332,3863,0.332,3864,0.332,3865,0.95,3866,0.332,3867,0.332,3868,0.332,3869,0.332,3870,0.332,3871,0.28,3872,0.332,3873,0.332,3874,0.332,3875,0.332,3876,0.332,3877,1.239,3878,0.332,3879,0.299,3880,2.355,3881,0.332,3882,0.332,3883,0.648,3884,0.299,3885,0.332,3886,0.28,3887,0.332,3888,0.332,3889,0.332,3890,0.28,3891,0.585,3892,0.332,3893,0.585,3894,0.585,3895,1.239,3896,0.332,3897,0.332,3898,0.585,3899,0.28,3900,0.299,3901,0.299,3902,1.043,3903,0.332,3904,0.332,3905,0.332,3906,0.332,3907,0.585,3908,0.332,3909,0.299,3910,0.332,3911,0.332,3912,2.825,3913,0.332,3914,1.269,3915,0.332,3916,0.332,3917,0.28,3918,0.332,3919,0.332,3920,0.332,3921,0.332,3922,0.332,3923,0.332,3924,0.332,3925,0.332,3926,0.648,3927,0.332,3928,0.332,3929,0.299,3930,0.332,3931,0.332,3932,1.276,3933,0.332,3934,0.332,3935,0.648,3936,0.648,3937,1.118,3938,0.332,3939,0.648,3940,0.332,3941,0.332,3942,0.648,3943,0.332,3944,0.319,3945,0.332,3946,0.332,3947,0.857,3948,0.332,3949,0.332,3950,0.332,3951,0.332,3952,0.332,3953,0.332,3954,0.332,3955,0.648,3956,0.332,3957,0.648,3958,1.118,3959,0.332,3960,0.332,3961,0.332,3962,0.332,3963,0.332,3964,0.648,3965,0.648,3966,0.332,3967,0.332,3968,0.332,3969,0.332,3970,0.332,3971,0.332,3972,0.857,3973,0.332,3974,0.332,3975,0.648,3976,1.118,3977,0.648,3978,0.648,3979,0.332,3980,0.332,3981,0.332,3982,1.834,3983,0.648,3984,0.332,3985,0.332,3986,0.299,3987,0.332,3988,0.299,3989,0.8,3990,0.28,3991,0.857,3992,0.857,3993,0.265,3994,0.585,3995,0.546,3996,0.299,3997,0.299,3998,0.299,3999,0.299,4000,0.299,4001,0.332,4002,0.332,4003,0.299,4004,0.299,4005,0.648,4006,0.546,4007,0.332,4008,0.299,4009,0.332,4010,0.332,4011,0.299,4012,0.332,4013,0.332,4014,0.332,4015,0.332,4016,0.585,4017,0.299,4018,0.332,4019,0.332,4020,0.332,4021,0.332,4022,1.605,4023,0.648,4024,0.332,4025,0.95,4026,0.332,4027,0.332,4028,0.299,4029,0.332,4030,0.332,4031,0.332,4032,0.332,4033,0.95,4034,0.727,4035,0.95,4036,0.585,4037,0.332,4038,0.585,4039,0.332,4040,0.332,4041,0.332,4042,0.332,4043,0.332,4044,0.332,4045,0.648,4046,0.332,4047,0.28,4048,0.648,4049,1.367,4050,0.308,4051,0.332,4052,0.332,4053,0.332,4054,0.332,4055,0.332,4056,0.332,4057,0.332,4058,0.332,4059,0.332,4060,0.332,4061,0.648,4062,0.332,4063,0.648,4064,0.332,4065,0.332,4066,0.332,4067,0.332,4068,0.496,4069,0.332,4070,0.332,4071,0.332,4072,0.332,4073,0.648,4074,0.332,4075,0.332,4076,0.332,4077,0.332,4078,0.332,4079,0.332,4080,0.332,4081,0.332,4082,0.332,4083,0.648,4084,0.332,4085,0.299,4086,0.299,4087,0.299,4088,0.332,4089,0.299,4090,0.332,4091,0.299,4092,0.299,4093,0.546,4094,0.265,4095,0.299,4096,0.332,4097,1.779,4098,0.332,4099,0.332,4100,0.332,4101,0.332,4102,0.332,4103,0.332,4104,0.332,4105,0.332,4106,0.332,4107,0.332,4108,0.332,4109,0.332,4110,0.332,4111,0.332,4112,0.332,4113,0.332,4114,0.332,4115,0.332,4116,0.332,4117,0.332,4118,0.332,4119,0.332,4120,0.332,4121,0.332,4122,0.332,4123,0.332,4124,0.332,4125,0.299,4126,0.648,4127,0.332,4128,0.332,4129,0.332,4130,0.332,4131,0.299,4132,0.332,4133,0.332,4134,0.332,4135,0.332,4136,0.332,4137,0.299,4138,0.332,4139,0.332,4140,0.648,4141,0.332,4142,0.332,4143,0.332]],["component/40",[11,0.279,108,0.486]],["title/41-1",[130,16.16,1131,33.278,1249,25.422,1613,32.782]],["name/41-1",[]],["text/41-1",[]],["component/41-1",[]],["title/41-2",[185,28.453,1613,44.413]],["name/41-2",[]],["text/41-2",[]],["component/41-2",[]],["title/41-3",[185,28.453,3364,58.174]],["name/41-3",[]],["text/41-3",[]],["component/41-3",[]],["title/41-4",[185,28.453,3546,58.174]],["name/41-4",[]],["text/41-4",[]],["component/41-4",[]],["title/41",[1613,53.991]],["name/41",[164,0.516,201,0.586]],["text/41",[0,1.31,4,0.803,8,0.755,9,0.806,10,0.967,11,0.631,12,0.921,13,0.878,14,0.796,15,0.899,16,1.011,21,1.935,26,1.655,27,3.202,32,0.821,37,2.583,47,1.487,50,1.728,68,0.892,71,2.071,77,2.163,81,3.368,82,3.562,88,1.145,115,0.838,123,1.163,127,2.125,128,2.777,130,2.501,148,2.176,164,4.864,165,1.558,170,0.937,173,0.856,175,3.259,178,0.772,180,1.998,181,1.923,183,1.98,185,2.893,190,1.621,194,2.222,198,0.996,200,2.261,201,5.687,205,0.732,221,0.856,223,1.145,229,3.57,230,1.935,237,3.592,242,1.749,243,1.463,248,1.261,253,0.689,268,0.917,269,4.267,271,2.276,273,2.281,274,1.128,292,0.996,293,0.674,296,1.489,303,3.884,307,2.358,308,1.077,309,2.281,317,2.065,323,0.784,331,4.279,335,2.256,340,1.399,347,1.7,353,4.061,354,1.959,360,1.641,368,1.006,369,1.128,393,0.808,406,0.868,407,4.71,414,5.192,424,1.091,439,2.545,450,2.472,484,4.555,489,0.921,501,3.935,525,3.916,529,1.923,541,2.324,550,0.917,558,3.438,577,1.335,582,1.552,610,2.47,611,0.885,619,2.37,643,2.292,646,1.627,682,3.423,748,1.236,759,0.824,773,1.749,777,3.378,786,2.324,788,1.192,912,1.412,929,2.017,936,1.039,997,1.113,1003,1.248,1010,2.048,1028,1.028,1035,3.599,1086,3.584,1109,1.202,1119,2.285,1131,4.234,1135,1.07,1202,1.318,1249,3.733,1326,2.185,1340,1.128,1343,2.064,1390,2.214,1394,1.248,1450,1.961,1503,2.592,1567,1.145,1568,1.105,1576,1.011,1607,1.412,1613,6.742,1615,1.489,1704,1.006,1708,1.12,1713,2.261,1942,3.116,2039,1.172,2089,1.352,2093,1.412,2157,1.128,2239,2.399,2423,5.516,2433,3.886,2451,4.361,2657,4.503,2718,3.426,2758,3.527,2878,1.52,2995,5.464,3140,1.412,3141,1.224,3333,1.595,3346,3.378,3355,4.179,3364,5.914,3365,7.182,3391,1.595,3396,3.815,3424,1.303,3433,1.489,3436,1.352,3440,5.288,3445,2.506,3472,3.452,3479,3.916,3480,4.863,3481,1.489,3482,2.285,3483,1.489,3545,7.453,3546,4.936,3623,1.489,3728,1.595,3783,1.352,4085,2.83,4094,3.378,4144,1.461,4145,1.768,4146,1.595,4147,4.229,4148,5.288,4149,1.768,4150,1.768,4151,1.768,4152,1.768,4153,5.12,4154,1.768,4155,1.768,4156,1.768,4157,1.768,4158,1.768,4159,3.137,4160,1.768,4161,1.768,4162,1.768,4163,1.768,4164,1.768,4165,1.595,4166,1.213,4167,1.768,4168,4.312,4169,1.768,4170,1.768,4171,1.768,4172,3.137,4173,1.768,4174,1.768,4175,1.768,4176,3.137,4177,3.137,4178,3.137,4179,3.137,4180,4.229,4181,1.768,4182,1.768,4183,1.768,4184,3.137,4185,1.768,4186,1.768,4187,1.768,4188,3.651,4189,1.412,4190,1.595,4191,1.768,4192,3.137,4193,1.768,4194,4.229,4195,3.562,4196,1.768,4197,3.137,4198,1.768,4199,1.768,4200,2.83,4201,1.768,4202,1.768]],["component/41",[11,0.279,108,0.486]],["title/42",[3479,64.221]],["name/42",[164,0.516,3480,0.779]],["text/42",[4,2.693,8,2.53,9,2.702,10,3.242,11,1.192,12,3.088,13,2.944,14,2.668,15,3.013,16,3.39,26,3.127,29,4.596,46,3.257,50,2.422,77,1.976,81,2.193,96,3.427,130,2.635,173,2.87,178,2.589,190,3.062,194,3.114,201,4.331,210,3.373,237,3.621,242,5.354,252,2.604,290,5.991,303,4.982,310,2.442,316,3.955,317,3.354,323,2.628,324,3.869,327,3.545,332,3.197,383,4.706,414,6.044,424,3.657,453,3.566,489,3.088,525,3.305,529,3.633,550,3.075,611,2.967,649,3.355,753,3.197,798,3.141,818,3.84,972,2.589,1086,5.313,1202,4.42,1390,4.184,1613,3.811,1702,4.992,2394,4.368,2718,7.168,3355,4.227,3385,4.735,3395,7.002,3424,4.368,3445,4.735,3472,3.996,3479,8.926,3480,8.247,3482,4.318,3483,4.992,3594,3.899,4203,10.963,4204,5.348,4205,5.348]],["component/42",[11,0.279,108,0.486]],["title/43-1",[183,19.716,516,30.677,773,28.428,1142,34.981]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["title/43-2",[409,32.552,841,39.221,3006,49.409]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["title/43-3",[572,33.734,841,39.221,4206,52.928]],["name/43-3",[]],["text/43-3",[]],["component/43-3",[]],["title/43-4",[214,30.31,698,36.194,1902,43.228]],["name/43-4",[]],["text/43-4",[]],["component/43-4",[]],["title/43-5",[469,17.197,1112,23.485,2451,25.09,3880,50.027,4207,40.405]],["name/43-5",[]],["text/43-5",[]],["component/43-5",[]],["title/43-6",[3890,70.719]],["name/43-6",[]],["text/43-6",[]],["component/43-6",[]],["title/43-7",[698,51.805]],["name/43-7",[]],["text/43-7",[]],["component/43-7",[]],["title/43-8",[698,42.614,1009,47.83]],["name/43-8",[]],["text/43-8",[]],["component/43-8",[]],["title/43-9",[183,26.711,2512,50.322]],["name/43-9",[]],["text/43-9",[]],["component/43-9",[]],["title/43-10",[482,39.1,713,37.604]],["name/43-10",[]],["text/43-10",[]],["component/43-10",[]],["title/43-11",[175,25.617,185,21.002,244,20.515,483,26.341]],["name/43-11",[]],["text/43-11",[]],["component/43-11",[]],["title/43-12",[482,39.1,3452,58.174]],["name/43-12",[]],["text/43-12",[]],["component/43-12",[]],["title/43-13",[484,32.394,1134,33.915,1495,43.228]],["name/43-13",[]],["text/43-13",[]],["component/43-13",[]],["title/43-14",[368,39.302,2512,50.322]],["name/43-14",[]],["text/43-14",[]],["component/43-14",[]],["title/43-15",[27,17.931,226,28.714,271,22.669,2568,40.107]],["name/43-15",[]],["text/43-15",[]],["component/43-15",[]],["title/43-16",[4208,56.088,4209,58.174]],["name/43-16",[]],["text/43-16",[]],["component/43-16",[]],["title/43",[698,51.805]],["name/43",[698,1.256]],["text/43",[4,0.445,8,0.418,9,0.835,10,0.536,11,1.533,12,0.511,13,1.28,14,0.441,15,0.498,16,1.048,17,1.872,24,0.515,25,0.673,26,0.517,27,3.204,35,0.884,38,0.971,41,0.544,45,1.509,46,0.539,47,0.465,50,1.778,51,1.071,57,0.765,61,0.65,63,0.524,65,1.573,67,1.214,71,0.396,75,0.526,76,2.194,77,1.608,78,0.529,81,0.363,92,0.509,96,1.871,97,1.065,99,1.41,100,1.011,101,1.002,102,0.988,103,0.939,105,0.91,106,0.854,109,4.205,111,1.089,113,2.209,117,0.579,121,0.871,127,0.92,128,1.103,130,1.212,133,1.348,135,0.793,139,0.482,141,2.106,144,1.29,148,0.504,151,1.354,157,1.214,161,1.43,164,0.45,165,0.487,169,1.021,170,2.305,173,0.887,175,1.626,176,0.498,178,1.126,180,3.604,183,2.031,185,1.333,186,0.705,188,0.544,190,3.1,192,1.862,194,2.009,205,1.067,206,0.517,214,1.976,215,0.576,216,1.276,218,0.913,219,1.858,225,0.962,226,2.45,227,0.91,230,0.605,235,1.401,236,2.186,237,2.287,238,0.597,240,0.547,242,0.547,243,1.202,244,2.271,250,2.441,252,0.431,253,1.49,265,1.285,268,2.502,269,5.145,271,1.439,272,0.57,276,1.153,280,0.699,281,1.871,285,1.048,286,0.526,288,3.888,295,0.722,299,1.995,303,0.95,305,1.143,307,1.021,310,0.754,317,2.42,320,0.445,323,0.435,329,0.673,330,0.547,331,3.093,332,0.529,335,1.917,337,0.504,340,1.15,341,0.927,347,1.754,351,0.586,353,0.465,354,1.771,356,0.758,357,5.414,361,0.942,363,1.016,364,1.695,368,0.558,369,0.626,373,0.971,384,0.534,392,0.906,393,2.402,406,0.482,409,1.796,420,1.179,438,0.771,450,1.071,467,0.679,469,1.628,472,1.437,481,3.459,482,3.752,483,0.946,484,1.011,489,0.511,501,0.549,502,0.502,512,0.826,516,3.395,520,0.541,525,0.547,540,3.807,558,0.519,569,4.671,571,2.759,572,2.774,573,1.59,582,3.418,595,2.241,603,1.823,610,0.473,617,1.053,619,2.437,621,3.528,624,0.579,629,0.605,630,2.038,633,0.635,637,0.536,638,0.706,640,0.75,644,0.605,649,1.037,652,0.826,653,0.626,657,1.474,658,0.645,665,0.771,668,2.143,674,1.102,676,0.81,683,0.699,686,1.753,687,1.401,688,2.379,693,0.645,698,5.067,702,0.531,707,0.617,708,0.81,711,0.75,713,2.626,719,2.385,743,0.645,753,0.988,755,0.884,756,1.551,757,1.463,758,4.062,764,3.245,765,4.726,773,2.929,779,0.699,786,1.007,788,0.661,789,0.722,796,0.617,800,1.657,812,0.884,816,1.059,823,0.722,826,1.366,841,2.164,842,1.224,856,0.617,861,1.306,865,0.826,867,2.726,870,1.153,871,0.609,881,0.722,909,1.053,913,0.74,921,0.64,951,0.626,995,0.617,997,0.617,1000,1.268,1003,0.692,1004,0.613,1009,1.785,1036,3.581,1039,1.257,1046,0.699,1102,0.583,1112,2.223,1134,2.211,1142,5.233,1172,0.645,1179,2.059,1186,1.482,1187,1.257,1188,2.6,1198,1.35,1212,0.692,1246,0.796,1249,0.913,1252,1.153,1253,1.153,1327,1.28,1338,1.246,1344,0.722,1352,2.536,1353,1.645,1354,1.946,1355,1.946,1380,1.82,1391,0.576,1446,3.327,1450,0.613,1494,0.655,1495,0.722,1520,0.667,1558,0.75,1559,1.235,1568,1.145,1576,1.474,1645,0.547,1647,1.463,1660,1.838,1688,0.75,1701,0.673,1704,1.042,1706,0.685,1822,0.699,1840,0.826,1899,0.692,1901,1.235,1902,1.35,1908,0.722,1945,0.699,1950,0.826,2016,1.652,2043,0.884,2057,1.35,2085,1.858,2087,1.543,2089,0.75,2092,0.826,2117,2.333,2202,1.543,2247,0.706,2253,0.605,2333,1.738,2343,0.601,2414,0.621,2426,0.635,2448,0.75,2451,1.137,2456,0.504,2512,4.371,2531,0.692,2563,0.771,2568,2.028,2678,0.941,2722,0.91,2737,0.685,2755,1.383,2787,0.862,2796,0.941,2811,0.941,2815,0.941,2820,0.941,2825,0.91,2870,0.941,2885,0.796,2904,0.74,2957,0.843,2987,1.683,2996,1.224,3000,1.769,3006,3.221,3008,0.884,3093,2.586,3141,1.785,3288,2.326,3327,0.826,3349,0.783,3361,0.75,3363,0.826,3369,0.826,3377,1.401,3436,0.75,3455,0.722,3480,0.679,3565,0.714,3744,0.75,3767,0.884,3784,0.884,3880,4.196,3884,0.884,3890,1.543,3937,2.326,3995,0.826,4034,1.971,4036,0.884,4166,0.673,4206,4.352,4208,0.796,4209,4.752,4210,0.98,4211,0.98,4212,0.98,4213,5.582,4214,0.98,4215,0.98,4216,0.98,4217,0.98,4218,0.98,4219,1.832,4220,0.98,4221,0.98,4222,0.98,4223,0.98,4224,0.98,4225,0.98,4226,0.98,4227,0.98,4228,0.98,4229,0.98,4230,0.98,4231,0.771,4232,2.578,4233,0.98,4234,1.832,4235,1.832,4236,0.98,4237,0.98,4238,0.98,4239,0.98,4240,1.832,4241,1.832,4242,0.98,4243,0.98,4244,0.884,4245,1.652,4246,0.699,4247,0.884,4248,0.98,4249,0.98,4250,1.832,4251,0.98,4252,0.98,4253,1.832,4254,1.832,4255,0.76,4256,0.98,4257,0.98,4258,0.98,4259,1.832,4260,0.98,4261,0.98,4262,0.98,4263,0.98,4264,0.98,4265,0.98,4266,0.98,4267,0.98,4268,0.98,4269,3.237,4270,0.98,4271,3.237,4272,3.237,4273,0.98,4274,2.578,4275,0.98,4276,0.98,4277,0.98,4278,4.35,4279,2.578,4280,0.98,4281,0.98,4282,1.832,4283,0.98,4284,3.237,4285,0.98,4286,0.98,4287,0.98,4288,0.98,4289,0.98,4290,1.832,4291,1.832,4292,0.98,4293,0.98,4294,0.98,4295,0.98,4296,0.98,4297,0.98,4298,0.98,4299,0.98,4300,0.75,4301,0.98,4302,3.824,4303,2.13,4304,3.824,4305,0.98,4306,0.98,4307,2.578,4308,0.98,4309,0.98,4310,0.98,4311,0.98,4312,1.832,4313,0.98,4314,2.578,4315,0.98,4316,0.98,4317,0.98,4318,0.783,4319,1.832,4320,0.98,4321,0.98,4322,0.98,4323,2.578,4324,0.98,4325,0.98,4326,0.98,4327,0.98,4328,0.98,4329,0.98,4330,4.352,4331,0.98,4332,0.98,4333,0.98,4334,0.98,4335,0.98,4336,0.98,4337,0.98,4338,0.98,4339,0.98,4340,0.98,4341,0.98,4342,0.98,4343,0.98,4344,0.98,4345,0.98,4346,0.98,4347,0.98,4348,0.98]],["component/43",[11,0.279,108,0.486]],["title/44-1",[4349,75.757]],["name/44-1",[]],["text/44-1",[]],["component/44-1",[]],["title/44-2",[619,38.706,639,47.393]],["name/44-2",[]],["text/44-2",[]],["component/44-2",[]],["title/44-3",[469,29.4,4350,58.174]],["name/44-3",[]],["text/44-3",[]],["component/44-3",[]],["title/44-4",[806,46.178,3430,55.177]],["name/44-4",[]],["text/44-4",[]],["component/44-4",[]],["title/44-5",[469,29.4,4351,69.076]],["name/44-5",[]],["text/44-5",[]],["component/44-5",[]],["title/44",[4350,70.719]],["name/44",[3455,0.829,4093,0.947]],["text/44",[4,0.837,8,0.787,9,0.84,10,1.008,11,1.061,12,0.96,13,0.916,14,0.83,15,0.937,16,1.054,24,0.968,27,3.64,33,1.023,37,0.93,50,1.787,57,0.769,60,0.796,63,0.985,67,0.868,70,1.077,76,1.642,77,1.759,106,2.038,114,0.941,117,4.25,123,2.876,128,3.275,130,2.665,144,0.923,145,1.391,157,0.868,166,2.176,176,1.655,178,2.304,183,2.78,185,3.593,188,1.806,190,3.714,192,1.393,198,1.038,200,3.221,201,0.96,205,2.755,215,1.083,216,0.912,221,0.892,236,0.926,237,0.803,238,1.983,244,2.677,245,2.876,250,2.031,252,1.43,253,1.703,265,1.623,269,3.759,271,3.581,273,0.994,303,0.956,317,1.313,331,1.887,335,1.434,340,1.452,342,0.999,345,1.358,354,3.33,363,1.023,371,4.723,373,0.977,376,1.054,378,1.003,393,0.843,406,2.147,407,0.981,424,2.697,439,3.175,458,0.919,469,0.784,479,0.877,497,1.185,507,2.414,532,3.846,533,1.116,540,1.109,550,0.956,571,0.968,582,2.163,610,1.57,611,2.641,617,1.06,619,4.029,623,1.689,627,1.054,632,1.243,634,1.137,639,5.526,646,1.689,653,1.177,709,1.314,714,1.552,716,1.663,719,2.399,722,1.109,752,1.203,756,1.109,757,1.472,764,1.872,786,1.013,788,2.947,795,4.215,798,2.317,806,7.966,823,1.358,857,1.152,863,3.156,867,1.552,901,2.947,909,1.06,922,2.109,929,1.185,970,1.41,972,4.231,991,1.314,997,1.16,1004,2.035,1010,2.853,1035,1.806,1086,2.693,1102,1.935,1135,1.116,1136,1.41,1173,1.253,1205,3.492,1212,1.301,1217,2.427,1249,2.631,1251,2.863,1325,1.358,1326,0.952,1353,3.846,1367,2.321,1417,7.738,1471,0.999,1493,1.358,1568,1.152,1603,1.429,1645,1.028,1649,1.253,1705,3.344,1950,3.682,2005,1.358,2039,4.412,2083,1.232,2085,1.328,2157,1.177,2246,1.109,2253,3.717,2389,4.36,2423,1.288,2434,1.497,2451,1.145,2460,1.523,2568,1.45,2580,1.288,2600,1.621,2725,1.343,2773,1.77,2852,2.863,2873,1.523,2875,2.399,2935,1.585,2961,1.265,2972,1.41,2995,1.276,2998,1.843,3048,1.552,3265,2.741,3316,3.185,3384,1.203,3424,1.358,3430,7.738,3431,2.49,3455,2.399,3471,1.472,3480,1.276,3627,1.472,3683,1.663,3684,3.944,3704,1.358,3705,2.741,3912,2.741,3914,3.117,4022,5.435,4038,2.937,4086,1.663,4087,1.663,4089,1.663,4091,1.663,4092,1.663,4093,8.716,4094,1.472,4095,1.663,4349,6.486,4350,6.055,4352,1.843,4353,1.843,4354,6.653,4355,6.025,4356,1.843,4357,1.663,4358,1.843,4359,1.663,4360,1.843,4361,1.843,4362,4.444,4363,1.843,4364,1.843,4365,1.843,4366,1.843,4367,1.843,4368,1.843,4369,1.843,4370,1.472,4371,1.843,4372,1.843,4373,4.372,4374,1.843,4375,1.843,4376,1.843,4377,1.843,4378,1.843,4379,1.843,4380,1.843,4381,1.843,4382,1.843,4383,1.843,4384,1.843,4385,1.843,4386,3.255,4387,1.843,4388,1.663,4389,6.653,4390,4.372,4391,1.843,4392,1.843,4393,1.843,4394,1.843,4395,1.843,4396,6.653,4397,1.843,4398,4.372,4399,1.843,4400,1.843,4401,1.843,4402,1.843,4403,1.843,4404,3.255,4405,1.843,4406,1.843,4407,5.276,4408,1.843,4409,1.843,4410,1.843,4411,1.843,4412,1.843,4413,1.843,4414,1.843,4415,1.843,4416,1.843,4417,1.843,4418,1.843,4419,1.843,4420,1.843,4421,3.255,4422,1.843,4423,1.843,4424,1.843,4425,1.41,4426,3.255,4427,1.843,4428,1.843,4429,1.663]],["component/44",[11,0.279,108,0.486]],["title/45",[178,30.168,447,34.441]],["name/45",[178,0.491,447,0.561]],["text/45",[4,3.906,8,2.655,9,2.835,10,3.402,11,1.981,12,3.24,13,3.09,14,2.799,15,4.371,16,3.557,27,3.024,31,4.482,61,4.124,65,3.022,105,4.894,151,3.268,156,4.968,157,4.048,178,4.642,269,4.658,271,2.765,340,2.774,371,3.175,420,2.844,447,5.563,472,3.468,482,4.867,483,3.213,484,3.434,553,4.435,779,4.435,821,5.471,842,4.158,856,3.915,857,3.888,879,3.915,913,4.695,936,3.656,1064,4.435,1067,5.14,1072,4.968,1084,4.583,1154,4.193,1253,3.915,1415,6.575,1494,4.158,1705,3.942,1901,4.193,2375,5.238,2489,5.776,2491,5.611,2497,5.776,2634,5.05,2814,5.973,2875,4.583,2922,5.973,2923,5.471,2924,5.973,2925,5.973,2926,5.973,2927,5.973,2928,5.973,2929,5.973,2930,5.973,3000,4.267,3023,5.238,3140,4.968,3886,5.238,3993,4.968,4430,5.238,4431,6.22,4432,6.22,4433,6.22,4434,6.22,4435,6.22,4436,6.22,4437,6.22,4438,6.22,4439,5.611,4440,6.22,4441,6.22]],["component/45",[11,0.279,108,0.486]],["title/46-1",[139,33.93,302,32.097]],["name/46-1",[]],["text/46-1",[]],["component/46-1",[]],["title/46-2",[279,32.527,4442,60.755]],["name/46-2",[]],["text/46-2",[]],["component/46-2",[]],["title/46-3",[469,29.4,904,48.759]],["name/46-3",[]],["text/46-3",[]],["component/46-3",[]],["title/46-4",[470,52.853]],["name/46-4",[]],["text/46-4",[]],["component/46-4",[]],["title/46-5",[472,32.712,688,32.088,1036,33.208]],["name/46-5",[]],["text/46-5",[]],["component/46-5",[]],["title/46-6",[1061,55.177,4430,58.174]],["name/46-6",[]],["text/46-6",[]],["component/46-6",[]],["title/46-7",[483,35.686,4443,58.174]],["name/46-7",[]],["text/46-7",[]],["component/46-7",[]],["title/46-8",[469,29.4,2589,58.174]],["name/46-8",[]],["text/46-8",[]],["component/46-8",[]],["title/46-9",[280,59.878]],["name/46-9",[]],["text/46-9",[]],["component/46-9",[]],["title/46-10",[287,29.8,392,25.231,599,32.545,905,42.939]],["name/46-10",[]],["text/46-10",[]],["component/46-10",[]],["title/46-11",[479,39.948]],["name/46-11",[]],["text/46-11",[]],["component/46-11",[]],["title/46-12",[369,53.601]],["name/46-12",[]],["text/46-12",[]],["component/46-12",[]],["title/46-13",[458,41.869]],["name/46-13",[]],["text/46-13",[]],["component/46-13",[]],["title/46-14",[369,53.601]],["name/46-14",[]],["text/46-14",[]],["component/46-14",[]],["title/46-15",[407,23.994,458,22.478,597,32.147,686,30.657,4444,40.672]],["name/46-15",[]],["text/46-15",[]],["component/46-15",[]],["title/46-16",[2591,64.221]],["name/46-16",[]],["text/46-16",[]],["component/46-16",[]],["title/46-17",[302,32.097,914,59.388]],["name/46-17",[]],["text/46-17",[]],["component/46-17",[]],["title/46-18",[1056,46.973,2591,52.828]],["name/46-18",[]],["text/46-18",[]],["component/46-18",[]],["title/46",[55,43.78,479,32.861]],["name/46",[55,0.713,479,0.535]],["text/46",[0,2.31,4,0.896,7,0.46,8,0.589,9,0.331,10,0.397,11,2.084,12,0.378,13,1.247,14,0.327,15,0.369,16,0.415,18,2.358,24,1.036,27,3.679,31,0.523,32,2.295,35,0.951,37,0.366,38,0.385,40,0.876,41,0.765,44,0.429,45,2.148,46,1.379,47,0.654,49,0.887,50,2.371,51,0.424,55,0.46,57,2.062,59,0.448,60,1.296,61,0.481,63,1.054,65,0.958,67,0.65,68,0.366,69,2.624,70,0.806,71,0.797,75,0.39,76,0.366,78,2.087,81,2.24,84,0.806,88,0.47,89,0.851,92,0.376,94,1.575,95,0.512,96,0.419,97,0.422,99,0.397,100,0.401,101,0.397,102,0.391,103,0.707,105,0.36,106,0.338,109,0.335,113,2.55,114,0.704,115,3.089,117,1.165,118,0.696,119,2.156,121,2.35,124,1.005,126,0.354,127,1.261,128,1.656,130,1.663,131,0.345,132,0.327,133,1.919,135,0.314,136,0.719,139,0.678,142,1.215,144,1.503,151,2.595,157,0.65,159,0.434,161,1.666,164,3.632,165,1.491,168,0.477,170,0.385,172,1.045,173,0.668,175,0.693,176,1.967,177,0.411,178,2.013,180,0.343,183,3.116,184,2.201,185,1.423,186,3.885,190,0.375,192,2.789,194,0.381,200,0.737,201,1.027,210,0.413,211,0.563,213,0.955,214,1.018,215,0.427,216,1.486,220,0.887,221,1.215,223,0.47,231,0.383,232,0.391,236,0.99,237,2.285,238,0.84,244,1.987,249,3.798,250,1.166,252,0.606,253,1.795,268,2.007,269,4.261,271,2.692,273,0.744,274,0.463,278,1.016,279,3.729,280,0.984,281,1.996,285,0.415,287,1.467,288,0.351,293,0.751,299,0.633,301,0.463,302,2.571,303,0.376,305,0.322,310,0.299,312,3.54,315,0.341,317,0.293,320,1.14,321,0.474,323,0.611,329,1.722,331,1.67,332,1.863,335,0.608,340,0.324,342,1.871,347,0.393,351,0.825,354,2.134,360,0.722,364,0.874,367,0.424,368,0.413,369,3.704,371,1.763,373,0.385,374,0.372,378,0.395,384,1.88,392,0.359,394,0.391,406,2.426,407,0.386,409,0.765,420,2.877,421,1.027,424,1.216,444,0.815,446,2.463,447,3.137,450,0.424,453,0.83,454,1.614,455,0.474,458,4.374,469,3.243,470,3.96,471,0.555,472,0.769,474,2.212,479,3.833,482,0.411,483,2.998,484,1.386,489,1.799,495,0.99,496,2.249,501,2.168,502,1.286,503,0.758,505,0.477,506,1.329,507,1.386,511,2.655,519,0.474,520,1.089,523,0.467,525,0.405,527,0.893,528,0.413,531,2.708,533,1.519,536,0.467,538,0.994,544,1.575,551,0.887,558,1.33,571,0.381,582,1.486,587,0.58,591,0.517,592,0.502,593,2.326,594,0.563,599,3.532,603,0.777,604,3.678,610,1.448,611,1.729,617,0.793,623,1.302,624,0.815,626,1.66,627,1.128,629,0.448,634,0.448,637,0.754,645,0.457,646,1.302,647,0.725,649,0.411,650,2.488,651,0.846,661,1.508,667,1.055,668,1.105,670,0.571,671,1.692,672,0.434,673,0.548,674,0.83,681,1.406,682,0.922,686,4.837,688,3.174,689,1.102,693,0.477,696,0.448,702,1.068,703,0.445,707,0.457,709,1.79,712,0.984,713,2.106,722,0.437,726,0.439,743,0.477,752,0.474,753,0.391,756,1.806,759,0.919,764,2.445,770,0.555,776,1.005,779,0.984,788,0.93,796,1.89,798,0.385,811,0.994,816,1.14,822,1.023,827,0.887,835,1.484,842,0.485,859,0.984,862,0.463,868,0.535,869,0.454,870,0.457,871,0.451,904,5.487,905,2.528,909,1.726,913,1.488,914,3.962,919,0.655,921,0.9,926,0.535,927,0.555,929,0.887,930,0.571,933,2.788,934,1.241,939,0.541,971,1.329,972,0.861,977,1.765,979,0.6,981,0.512,982,1.365,983,0.611,986,0.58,987,0.535,1000,0.955,1002,1.508,1003,0.512,1009,0.955,1024,2.005,1026,1.92,1030,0.463,1035,0.765,1036,1.421,1037,0.507,1040,0.655,1045,1.508,1046,1.79,1056,1.341,1060,3.116,1061,1.102,1069,0.655,1077,2.804,1078,1.66,1086,0.37,1089,0.502,1090,2.528,1091,2.264,1092,2.264,1093,1.778,1094,2.64,1095,2.114,1096,3.837,1097,0.655,1098,0.655,1099,0.655,1102,4.117,1103,2.264,1104,0.611,1107,0.922,1129,1.208,1130,2.141,1134,0.797,1137,1.041,1159,0.58,1167,0.502,1170,0.58,1173,1.341,1241,0.611,1252,0.457,1253,0.457,1254,0.955,1277,0.58,1323,0.58,1325,0.535,1343,0.477,1353,0.88,1380,0.512,1522,0.512,1528,0.555,1534,0.6,1567,0.47,1569,0.624,1649,1.707,1701,0.498,1706,0.507,1708,1.249,1793,1.47,1964,1.162,1965,0.58,2040,1.392,2083,0.922,2093,0.58,2150,0.548,2246,0.437,2343,0.445,2364,0.611,2376,0.58,2414,0.874,2418,0.571,2422,0.589,2424,1.12,2425,0.611,2448,1.508,2456,0.373,2468,0.697,2491,0.655,2503,0.6,2585,0.624,2587,3.116,2589,5.487,2591,5.296,2592,0.764,2593,1.971,2594,2.079,2595,1.453,2596,2.331,2597,0.764,2598,0.764,2634,1.12,2708,0.624,2724,2.362,2725,0.529,2737,0.507,2755,0.548,2758,0.437,2824,0.529,2881,2.362,2904,0.548,2912,0.555,2961,0.498,2968,0.457,3007,1.778,3027,0.58,3208,2.328,3327,0.611,3444,1.244,3482,0.529,3484,0.611,3523,0.535,3694,1.66,3727,1.102,3787,1.069,3902,0.611,3947,0.655,3986,0.655,4028,0.655,4137,0.655,4166,0.498,4188,0.517,4246,0.517,4430,1.66,4442,2.208,4443,0.611,4444,1.244,4445,1.778,4446,0.624,4447,0.726,4448,0.726,4449,0.655,4450,2.41,4451,0.726,4452,0.655,4453,2.51,4454,0.726,4455,0.726,4456,0.555,4457,0.726,4458,0.726,4459,0.726,4460,0.726,4461,0.726,4462,1.055,4463,1.379,4464,2.51,4465,0.655,4466,0.726,4467,0.726,4468,0.726,4469,0.555,4470,0.58,4471,1.379,4472,1.379,4473,1.971,4474,0.655,4475,0.726,4476,0.726,4477,0.726,4478,0.726,4479,0.726,4480,0.823,4481,0.726,4482,0.726,4483,0.726,4484,0.823,4485,0.823,4486,0.823,4487,0.823,4488,1.379,4489,1.379,4490,0.726,4491,0.823,4492,0.823,4493,0.823,4494,1.971,4495,0.726,4496,0.726,4497,0.726,4498,3.002,4499,3.454,4500,0.726,4501,0.726,4502,2.51,4503,1.778,4504,0.655,4505,0.726,4506,0.726,4507,0.726,4508,0.726,4509,0.726,4510,0.726,4511,0.726,4512,0.726,4513,0.726,4514,0.726,4515,0.726,4516,0.726,4517,0.726,4518,3.002,4519,0.638,4520,0.726,4521,0.726,4522,0.726,4523,0.726,4524,0.726,4525,0.726,4526,0.655,4527,0.726,4528,0.726,4529,1.379,4530,0.726,4531,0.726,4532,0.726,4533,0.726,4534,0.726,4535,0.726,4536,0.726,4537,0.726,4538,0.726,4539,0.726,4540,0.726,4541,0.655,4542,0.726,4543,0.726,4544,0.726,4545,0.726,4546,1.564,4547,0.726,4548,1.893,4549,0.726,4550,3.454,4551,0.726,4552,0.655,4553,0.726,4554,0.823,4555,0.823,4556,0.726,4557,0.726,4558,0.726]],["component/46",[11,0.279,108,0.486]],["title/47-1",[936,34.483,1065,43.228,1143,44.869]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["title/47",[936,49.357]],["name/47",[936,1.197]],["text/47",[0,1.744,4,1.898,6,2.816,8,2.743,9,1.904,10,2.285,11,0.84,12,2.176,13,2.075,14,1.88,15,2.124,16,2.389,27,3.092,32,2.986,37,3.241,38,2.214,55,6.617,77,2.142,89,2.577,92,4.561,100,2.307,103,3.293,105,3.192,106,2.996,113,1.635,148,3.306,171,2.469,183,1.615,185,3.622,188,4.879,199,2.075,204,5.534,205,1.73,210,2.377,216,3.18,218,2.083,250,1.941,253,1.627,269,2.683,272,6.264,286,2.243,293,3.352,316,3.057,317,3.829,322,5.373,331,3.796,335,2.832,340,2.866,356,2.661,364,1.852,378,2.274,383,2.365,447,3.204,448,2.612,469,3.333,484,2.307,600,2.949,627,2.389,649,2.365,657,2.389,703,2.561,722,5.29,756,2.514,759,1.948,767,2.667,842,2.793,870,5.974,936,5.168,975,4.045,1065,6.994,1143,4.915,1235,5.133,1249,2.083,1434,3.078,1471,2.264,1520,2.841,1576,2.389,1663,3.337,1701,2.866,1705,5.573,1707,3.01,1945,4.582,1962,2.793,2118,5.705,2451,3.991,2456,2.149,2529,6.16,2563,3.286,2714,3.154,3411,2.77,4559,4.178,4560,4.178,4561,4.178,4562,4.178,4563,4.178,4564,10.023,4565,4.178,4566,8.793,4567,3.769,4568,9.492,4569,8.793,4570,4.178,4571,4.178,4572,6.426,4573,4.178,4574,4.178,4575,6.426,4576,4.178,4577,4.178,4578,4.178,4579,4.178,4580,4.178,4581,4.178,4582,4.178,4583,4.178,4584,4.178,4585,4.178,4586,4.178,4587,4.178,4588,4.178,4589,4.178]],["component/47",[11,0.279,108,0.486]],["title/48-1",[11,11.796,40,26.084,1108,36.194]],["name/48-1",[]],["text/48-1",[]],["component/48-1",[]],["title/48-2",[244,23.606,1108,36.194,2040,41.413]],["name/48-2",[]],["text/48-2",[]],["component/48-2",[]],["title/48-3",[175,34.706,299,31.683]],["name/48-3",[]],["text/48-3",[]],["component/48-3",[]],["title/48-4",[1108,42.614,4590,59.388]],["name/48-4",[]],["text/48-4",[]],["component/48-4",[]],["title/48-5",[11,11.796,39,33.38,1108,36.194]],["name/48-5",[]],["text/48-5",[]],["component/48-5",[]],["title/48-6",[6,56.611]],["name/48-6",[]],["text/48-6",[]],["component/48-6",[]],["title/48-7",[1108,51.805]],["name/48-7",[]],["text/48-7",[]],["component/48-7",[]],["title/48-8",[253,22.852,299,26.909,950,39.895]],["name/48-8",[]],["text/48-8",[]],["component/48-8",[]],["title/48-9",[3670,61.873]],["name/48-9",[]],["text/48-9",[]],["component/48-9",[]],["title/48-10",[293,22.364,299,26.909,1165,32.24]],["name/48-10",[]],["text/48-10",[]],["component/48-10",[]],["title/48-11",[541,37.959,767,44.092]],["name/48-11",[]],["text/48-11",[]],["component/48-11",[]],["title/48-12",[79,53.601]],["name/48-12",[]],["text/48-12",[]],["component/48-12",[]],["title/48",[1108,51.805]],["name/48",[1108,1.256]],["text/48",[0,0.714,4,1.098,7,1.084,8,0.389,9,0.779,10,0.498,11,1.726,12,0.474,13,1.2,14,0.41,15,1.228,16,0.521,18,1.604,19,0.498,24,0.478,26,0.481,27,2.913,32,0.794,33,0.505,35,0.825,39,0.518,40,0.405,41,0.505,45,2.134,47,0.811,50,2.199,57,1.507,60,0.393,63,1.628,65,0.831,67,1.939,68,3.345,71,0.977,72,1.41,75,1.635,76,1.82,77,2.909,78,1.643,79,0.581,80,0.716,81,1.523,88,0.59,91,1.325,92,1.253,96,0.526,97,0.529,99,0.498,100,0.503,101,0.498,102,0.491,103,0.467,105,0.452,106,0.425,111,0.541,113,1.792,114,0.465,115,2.871,127,0.458,128,0.732,130,2.26,132,0.769,133,0.712,142,0.441,148,1.243,157,1.939,161,0.505,165,2.045,172,0.906,173,1.17,175,2.511,176,1.548,179,0.551,180,2.163,183,2.216,185,1.487,186,1.389,190,1.865,192,1.959,194,0.898,201,0.474,202,0.922,204,1.076,205,1.495,208,0.581,210,0.518,216,0.451,220,3.459,223,0.59,225,2.572,227,0.452,230,1.879,231,1.904,232,0.491,236,1.214,237,3.294,238,1.472,242,3.975,243,0.797,244,4.228,246,0.599,248,4.087,250,1.677,252,1.338,253,2.359,265,3.019,268,0.472,269,5.188,271,3.363,272,0.529,274,0.581,279,0.805,282,0.631,284,0.727,286,1.297,293,2.422,298,1.78,299,4.764,300,1.26,303,0.887,305,1.6,306,0.526,307,0.953,310,0.995,312,1.585,315,3.112,317,0.367,318,0.586,319,1.673,320,1.098,323,1.35,325,1.091,331,1.043,335,0.401,337,0.88,340,0.406,341,0.461,342,0.926,354,0.422,356,1.896,360,1.888,363,0.949,364,1.6,367,0.532,368,1.375,371,0.873,373,0.906,380,0.529,381,0.727,383,0.968,384,0.496,389,1.366,390,2.883,393,1.105,406,1.187,420,1.105,421,0.891,423,0.558,428,1.207,449,0.541,453,3.007,489,0.891,502,0.876,503,2.957,505,1.125,507,1.681,514,0.649,519,1.116,520,0.944,525,0.508,533,1.035,536,0.586,541,4.552,550,0.472,569,4.267,571,2.405,573,1.879,582,1.196,587,3.289,599,0.581,600,0.643,603,1.715,610,1.741,611,0.456,612,0.649,619,0.51,621,1.286,623,0.887,627,0.978,631,0.562,634,0.562,637,0.498,644,0.562,646,1.58,650,2.647,653,0.581,657,0.521,663,0.822,664,0.822,666,0.697,668,0.51,669,0.643,674,0.548,679,0.663,699,0.716,702,0.494,718,0.609,743,0.599,751,1.099,753,0.922,756,0.548,759,1.126,764,0.983,767,2.304,771,0.566,772,0.988,786,1.673,816,0.526,822,1.58,826,1.275,856,1.076,857,2.574,879,0.573,901,0.614,917,1.309,934,2.272,939,1.275,940,1.658,946,0.688,949,2.76,950,3.398,951,2.304,954,1.325,955,0.706,961,0.727,971,0.614,972,3.389,1000,0.631,1004,0.569,1028,1.77,1030,0.581,1036,2.828,1039,0.625,1045,0.697,1086,0.465,1108,7.443,1111,0.767,1128,0.619,1130,0.649,1131,1.577,1135,1.843,1136,0.697,1150,0.822,1165,1.673,1167,0.631,1172,2.708,1186,0.524,1187,0.625,1188,0.619,1224,0.619,1235,2.432,1249,3.667,1252,0.573,1253,0.573,1254,0.631,1327,0.637,1338,0.619,1343,2.003,1352,1.602,1353,1.542,1354,1.824,1355,1.824,1366,1.143,1390,0.643,1394,0.643,1420,1.173,1435,0.663,1450,1.51,1470,1.366,1471,0.494,1522,0.643,1602,1.49,1701,0.625,1704,0.973,1708,1.084,1731,1.542,1740,0.767,1863,0.822,1878,1.44,1899,0.643,1929,0.822,2026,0.822,2040,1.705,2086,0.822,2117,3.877,2157,0.581,2246,0.548,2410,1.245,2414,0.577,2426,1.972,2456,1.567,2735,0.753,2737,0.637,2742,1.504,2758,1.029,2788,0.875,2909,0.753,2958,4.531,2989,1.366,2998,0.968,3000,0.625,3002,0.649,3196,0.671,3208,1.325,3344,0.663,3377,0.697,3381,0.688,3384,0.594,3456,0.822,3457,0.822,3460,0.822,3519,0.697,3594,1.589,3614,1.366,3670,2.244,3671,1.366,3701,0.656,3704,0.671,3727,0.727,3730,1.93,3808,0.767,4188,0.649,4246,0.649,4300,2.329,4567,0.822,4590,1.47,4591,0.911,4592,0.911,4593,4.117,4594,0.911,4595,0.875,4596,0.875,4597,0.911,4598,2.416,4599,0.911,4600,1.71,4601,4.117,4602,1.71,4603,0.911,4604,0.911,4605,1.71,4606,1.71,4607,0.911,4608,0.911,4609,1.542,4610,1.71,4611,0.911,4612,0.911,4613,0.911,4614,0.911,4615,0.911,4616,1.307,4617,0.911,4618,2.416,4619,0.911,4620,0.767,4621,0.911,4622,0.911,4623,3.045,4624,0.911,4625,0.911,4626,0.911,4627,1.71,4628,0.911,4629,0.911,4630,0.911,4631,0.911,4632,2.416,4633,0.911,4634,1.71,4635,1.71,4636,0.911,4637,0.911,4638,0.911,4639,1.71,4640,0.911,4641,0.911,4642,0.911,4643,0.911,4644,0.911,4645,0.911,4646,0.911,4647,0.911,4648,0.911,4649,0.911,4650,1.71,4651,2.416,4652,2.416,4653,0.911,4654,0.911,4655,0.911,4656,0.911,4657,0.911,4658,1.71,4659,1.71,4660,1.71,4661,1.71,4662,1.71,4663,0.911,4664,0.911,4665,0.911,4666,1.71,4667,1.71,4668,1.71,4669,1.71,4670,1.71,4671,0.911,4672,0.911,4673,0.911,4674,0.911,4675,0.911,4676,0.822,4677,0.911,4678,1.71,4679,0.911,4680,0.911,4681,0.911,4682,0.911,4683,0.911,4684,1.71,4685,0.911,4686,0.911,4687,0.911,4688,0.911,4689,1.71,4690,0.911,4691,0.911,4692,0.911,4693,0.911,4694,0.911,4695,0.911,4696,0.911,4697,0.911,4698,1.71,4699,0.911,4700,0.911,4701,0.911,4702,0.911,4703,0.911,4704,0.911,4705,0.911,4706,0.911,4707,0.911,4708,1.71,4709,0.911,4710,0.911,4711,0.911,4712,0.911,4713,0.911,4714,0.911,4715,0.911,4716,0.911,4717,0.822,4718,0.911,4719,0.801,4720,0.911,4721,0.911]],["component/48",[11,0.279,108,0.486]],["title/49",[225,25.785,293,26.331]],["name/49",[225,0.42,293,0.429]],["text/49",[4,3.208,8,3.014,9,3.218,10,3.862,11,1.42,12,3.678,13,3.507,14,3.178,15,3.59,16,4.039,26,3.725,27,3.939,50,2.886,57,2.948,92,4.86,128,3.022,192,3.022,221,3.419,225,4.562,227,4.654,237,3.075,253,2.75,269,2.948,293,4.659,305,3.13,315,4.935,316,3.359,317,2.848,318,4.54,332,3.809,334,8.399,364,3.13,558,3.742,657,5.359,835,5.538,922,4.574,950,4.802,1340,4.507,1343,4.645,3005,6.37,3196,5.203,3377,5.4,3384,4.609,3814,4.984,4188,5.035,4722,6.37,4723,7.061,4724,7.061,4725,7.061,4726,6.781]],["component/49",[11,0.279,108,0.486]],["title/50-1",[293,26.331,3411,45.802]],["name/50-1",[]],["text/50-1",[]],["component/50-1",[]],["title/50",[293,32.009]],["name/50",[293,0.776]],["text/50",[4,1.481,8,1.391,9,1.486,10,1.783,11,0.655,12,1.698,13,2.624,14,1.467,15,1.657,16,1.865,21,2.011,26,1.72,27,3.337,45,3.105,46,1.791,47,1.546,50,2.722,54,2.038,57,1.361,63,1.743,68,4.544,70,1.905,75,1.751,78,1.758,87,2.604,109,3.075,114,1.664,119,2.471,137,1.973,139,1.601,145,2.461,148,3.427,168,2.144,173,2.558,182,4.212,183,2.575,185,1.343,190,1.684,192,1.395,194,4.023,200,4.816,202,3.593,205,3.731,206,1.72,218,4.492,225,4.083,228,4.907,232,2.85,237,4.567,270,2.604,272,3.071,273,1.758,288,1.578,293,4.591,303,1.691,306,1.885,307,3.713,312,2.321,315,3.126,320,1.481,322,2.237,323,2.342,330,2.945,331,2.875,332,1.758,352,4.082,356,4.344,360,1.705,366,2.066,367,1.905,373,1.727,384,1.775,393,3.045,420,1.49,447,1.625,449,1.938,450,3.088,495,1.638,520,1.8,528,1.855,532,6.056,543,3.592,558,1.727,593,2.889,619,2.96,621,1.735,627,3.021,649,1.845,707,3.325,712,2.325,759,3.105,772,1.885,816,5.208,835,1.927,841,2.179,862,2.081,869,3.302,871,2.024,917,1.767,944,2.528,957,1.72,974,4.529,1011,2.144,1065,4.907,1089,2.257,1112,5.514,1119,2.375,1135,1.973,1143,2.493,1173,2.217,1220,2.941,1277,8.378,1326,2.729,1340,2.081,1392,2.941,1435,4.852,1567,2.112,1698,2.325,1707,3.807,1708,3.348,1943,2.493,2103,3.767,2114,2.402,2343,1.998,2490,3.027,2714,3.988,2716,4.155,2718,4.476,2892,2.803,3411,2.162,3421,2.745,3783,2.493,3917,2.745,3989,4.449,4188,2.325,4456,2.493,4727,3.26,4728,3.26,4729,3.26,4730,2.941,4731,4.766,4732,3.26,4733,3.26,4734,3.26,4735,3.027,4736,3.26,4737,3.027,4738,3.26,4739,3.131,4740,3.26,4741,3.26,4742,2.604,4743,3.26,4744,3.26,4745,3.26,4746,3.26,4747,3.26]],["component/50",[11,0.279,108,0.486]],["title/51-1",[4748,83.973]],["name/51-1",[]],["text/51-1",[]],["component/51-1",[]],["title/51-2",[4749,83.973]],["name/51-2",[]],["text/51-2",[]],["component/51-2",[]],["title/51-3",[4750,83.973]],["name/51-3",[]],["text/51-3",[]],["component/51-3",[]],["title/51-4",[4751,75.757]],["name/51-4",[]],["text/51-4",[]],["component/51-4",[]],["title/51-5",[4751,75.757]],["name/51-5",[]],["text/51-5",[]],["component/51-5",[]],["title/51-6",[4752,75.757]],["name/51-6",[]],["text/51-6",[]],["component/51-6",[]],["title/51-7",[4752,75.757]],["name/51-7",[]],["text/51-7",[]],["component/51-7",[]],["title/51-8",[4753,83.973]],["name/51-8",[]],["text/51-8",[]],["component/51-8",[]],["title/51",[8,25.04,482,33.208,2594,40.623]],["name/51",[8,0.332,482,0.44,2594,0.538]],["text/51",[4,3.528,8,4.511,9,1.522,10,1.826,11,2.173,12,1.739,13,1.659,14,1.503,15,1.697,16,1.91,26,1.762,27,3.37,33,2.988,37,1.684,40,1.485,46,1.835,51,1.952,68,1.684,75,1.793,76,1.684,78,1.801,81,1.235,96,1.93,109,2.486,111,1.985,113,2.65,119,1.562,127,2.706,128,2.305,130,1.058,141,3.76,142,4.41,144,1.671,148,1.718,151,2.83,157,3.657,161,1.853,165,2.675,172,1.769,176,3.441,177,3.049,178,1.458,185,2.219,186,3.279,192,2.305,201,1.739,209,3.892,214,1.725,218,1.665,221,2.608,240,1.862,244,1.344,250,1.552,252,4.522,253,3.883,256,1.985,269,1.394,271,1.485,289,3.367,302,3.145,303,3.512,305,2.387,320,3.075,331,1.441,341,1.691,347,2.919,354,3.597,363,2.988,379,3.463,406,1.64,407,2.867,447,3.872,454,2.147,470,3.39,472,1.862,482,6.116,483,1.725,484,2.974,489,1.739,503,1.835,507,1.844,593,1.826,619,3.018,623,1.732,624,1.974,637,1.826,643,1.809,651,3.301,686,3.663,702,4.617,703,2.047,707,2.102,713,4.228,746,2.46,792,2.667,816,3.114,862,2.131,870,3.39,881,3.969,904,3.802,926,2.46,963,2.812,987,4.988,1009,7.482,1011,2.196,1028,1.941,1045,5.177,1086,1.704,1107,3.601,1121,2.667,1134,1.93,1177,2.667,2083,3.601,2161,2.232,2333,2.251,2414,2.116,2451,2.074,2456,1.718,2594,5.378,2725,3.924,2755,8.856,2758,4.673,2953,2.759,2996,2.232,3694,6.541,4370,2.667,4503,4.859,4541,4.859,4620,4.536,4731,3.012,4754,3.339,4755,3.339,4756,3.339,4757,3.339,4758,3.339,4759,3.339,4760,5.386,4761,5.386,4762,7.007,4763,4.859,4764,5.386,4765,3.339]],["component/51",[11,0.279,108,0.486]],["title/52-1",[528,39.302,921,45.085]],["name/52-1",[]],["text/52-1",[]],["component/52-1",[]],["title/52-2",[27,17.931,320,23.164,528,29.009,921,33.278]],["name/52-2",[]],["text/52-2",[]],["component/52-2",[]],["title/52-3",[130,16.16,320,23.164,528,29.009,921,33.278]],["name/52-3",[]],["text/52-3",[]],["component/52-3",[]],["title/52-4",[118,42.354]],["name/52-4",[]],["text/52-4",[]],["component/52-4",[]],["title/52",[528,47.778]],["name/52",[528,1.158]],["text/52",[0,0.773,4,0.841,5,1.417,8,0.791,9,2.413,10,1.013,11,1.951,12,0.965,13,0.92,14,2.72,15,0.942,16,1.059,17,0.906,19,2.4,27,3.594,32,1.519,35,1.577,40,0.823,45,1.524,50,2.47,57,1.365,59,4.117,60,1.411,62,1.249,63,0.99,67,0.872,70,1.083,77,1.765,81,0.685,98,1.365,111,1.101,113,1.28,114,1.669,115,3.164,118,2.213,119,2.053,121,0.881,130,2.285,131,2.875,133,2.204,137,1.979,141,0.897,157,2.066,166,1.238,175,0.931,176,1.662,177,1.048,178,0.809,182,2.65,183,1.264,184,1.86,185,0.763,186,3.989,190,1.689,191,1.191,192,2.266,198,1.043,199,1.624,202,2.856,215,1.922,216,1.618,218,1.63,220,1.191,231,0.977,234,1.271,237,0.807,238,1.128,244,1.766,249,1.703,250,2.039,252,2.326,253,1.273,256,1.944,265,1.63,269,4.266,271,1.951,272,1.077,278,2.409,279,2.493,287,2.565,288,2.125,305,1.449,315,2.485,317,0.747,320,3.485,323,0.821,331,3.894,332,0.999,333,1.071,335,1.441,337,0.953,340,0.826,341,2.681,347,1.772,348,1.48,351,1.955,353,1.55,356,0.767,364,1.449,371,0.945,394,1.763,406,0.91,420,2.006,421,1.703,426,1.365,454,2.822,458,0.923,468,1.48,483,2.735,486,1.48,495,2.205,505,1.218,509,1.321,516,1.967,523,2.102,525,1.823,528,7.08,533,1.121,543,2.223,550,1.696,551,2.102,557,1.349,569,2.357,571,1.718,572,1.065,576,2.468,582,0.917,584,1.56,593,1.013,596,2.017,610,2.554,621,2.818,647,0.973,649,1.851,665,1.457,669,1.307,674,1.114,687,1.417,688,2.896,722,3.186,726,1.979,741,5.757,759,0.863,786,1.018,822,0.961,824,1.56,842,1.238,879,2.058,880,1.321,908,1.271,910,1.174,917,1.004,921,7.784,922,2.118,926,1.365,927,1.417,977,1.089,1036,2.484,1043,2.949,1047,1.671,1087,1.504,1108,1.143,1168,3.959,1203,1.671,1249,0.923,1344,1.365,1352,1.228,1402,1.381,1413,1.48,1471,1.772,1680,1.671,1701,3.633,1705,2.072,1707,3.162,1846,3.068,1908,2.409,2061,1.671,2083,2.934,2157,1.182,2161,2.186,2426,1.2,2443,1.504,2459,1.72,2495,1.504,2633,6.408,2634,1.504,2660,4.214,2661,8.093,2706,5.804,2707,1.779,2708,1.592,2709,4.214,2710,1.457,2711,1.779,2712,3.139,2713,3.139,2714,2.468,2715,1.779,2716,1.457,2807,1.531,2923,1.629,2987,2.134,2991,1.48,2996,1.238,3033,1.56,3153,2.753,3154,1.56,3211,1.56,4188,1.321,4370,1.48,4465,4.777,4762,2.949,4766,3.959,4767,1.671,4768,1.671,4769,1.671,4770,1.531,4771,4.229,4772,1.852,4773,1.852,4774,1.852,4775,1.852,4776,1.852,4777,3.269,4778,1.852,4779,1.852,4780,1.852,4781,1.56,4782,1.852,4783,3.269,4784,1.852,4785,1.852,4786,1.852,4787,1.852,4788,1.852,4789,3.269,4790,1.852,4791,1.852,4792,1.852,4793,1.852,4794,1.671,4795,1.852,4796,4.389,4797,4.389,4798,1.852,4799,1.852,4800,1.852,4801,2.949,4802,1.852,4803,1.671,4804,1.852,4805,3.269,4806,6.044,4807,1.852,4808,3.139,4809,1.852,4810,1.56,4811,4.777,4812,1.852,4813,1.852,4814,1.852,4815,3.036,4816,1.852,4817,1.852,4818,1.852,4819,1.852,4820,1.852,4821,1.852,4822,4.389,4823,1.671,4824,1.852,4825,1.852,4826,1.852,4827,3.269,4828,1.852,4829,1.852]],["component/52",[11,0.279,108,0.486]],["title/53-1",[315,23.928,773,28.428,1064,36.356,4742,40.727]],["name/53-1",[]],["text/53-1",[]],["component/53-1",[]],["title/53-2",[318,53.991]],["name/53-2",[]],["text/53-2",[]],["component/53-2",[]],["title/53-3",[133,24.426,320,26.654,1165,32.24]],["name/53-3",[]],["text/53-3",[]],["component/53-3",[]],["title/53-4",[1072,55.177,1075,46.178]],["name/53-4",[]],["text/53-4",[]],["component/53-4",[]],["title/53-5",[936,40.601,4830,58.174]],["name/53-5",[]],["text/53-5",[]],["component/53-5",[]],["title/53-6",[235,44.869,650,37.722,902,49.409]],["name/53-6",[]],["text/53-6",[]],["component/53-6",[]],["title/53-7",[227,34.311,4830,58.174]],["name/53-7",[]],["text/53-7",[]],["component/53-7",[]],["title/53-8",[293,26.331,1075,46.178]],["name/53-8",[]],["text/53-8",[]],["component/53-8",[]],["title/53-9",[756,41.561,1075,46.178]],["name/53-9",[]],["text/53-9",[]],["component/53-9",[]],["title/53-10",[65,28.505,132,26.405,718,39.221]],["name/53-10",[]],["text/53-10",[]],["component/53-10",[]],["title/53-11",[60,29.82,1964,58.174]],["name/53-11",[]],["text/53-11",[]],["component/53-11",[]],["title/53-12",[109,31.888,4213,58.174]],["name/53-12",[]],["text/53-12",[]],["component/53-12",[]],["title/53-13",[61,45.802,62,46.568]],["name/53-13",[]],["text/53-13",[]],["component/53-13",[]],["title/53",[178,30.168,1415,52.828]],["name/53",[1415,1.557]],["text/53",[4,0.751,8,0.705,9,0.753,10,0.904,11,1.451,12,0.861,13,1.99,14,0.744,15,0.84,16,0.945,17,0.809,24,0.868,26,0.872,27,3.274,32,0.768,35,0.797,36,0.955,37,1.49,38,0.875,39,0.94,41,0.917,42,1.144,44,1.746,45,2.611,46,1.623,47,0.783,50,1.637,55,1.047,57,2.034,60,2.418,63,1.579,65,2.368,67,1.886,68,0.833,77,0.551,78,0.891,81,1.093,88,1.07,92,2.078,99,1.615,100,0.912,106,0.77,109,2.25,113,2.435,119,2.279,128,2.086,130,0.936,132,2.8,133,1.23,135,0.715,139,1.967,141,0.8,152,1.133,158,1.133,159,0.988,164,3.098,165,0.821,168,1.943,172,1.565,173,2.359,175,1.484,176,0.84,178,1.29,180,0.781,182,0.827,183,0.639,186,1.137,194,0.868,201,0.861,202,2.629,204,3.525,205,1.659,210,1.68,214,0.854,215,0.971,217,1.055,218,0.824,222,1.178,225,3.307,227,3.355,230,1.822,232,0.891,236,0.83,237,1.286,242,1.647,244,3.069,250,0.768,253,1.898,257,1.133,268,0.857,269,4.817,271,0.735,273,1.593,288,1.939,292,0.93,293,2.575,299,2.235,306,3.596,307,3.766,308,1.006,310,1.217,312,1.76,315,2.629,316,2.665,317,0.666,318,1.062,320,1.82,323,0.732,329,2.026,331,2.418,332,1.593,335,1.301,340,0.737,345,2.176,347,0.895,353,0.783,354,1.368,360,0.864,361,0.85,364,1.775,373,1.565,406,0.812,420,2.844,421,2.087,447,0.824,448,1.033,449,1.756,455,1.078,469,0.703,472,0.921,482,2.758,483,2.069,484,0.912,503,1.623,505,1.943,511,1.133,518,1.217,526,1.263,527,3.157,528,1.68,529,1.013,536,1.062,553,3.994,569,3.008,571,4.007,572,3.884,573,3.838,582,1.982,593,3.694,610,1.425,624,0.977,637,0.904,638,1.19,644,1.019,645,1.859,646,1.532,649,0.935,650,3.601,651,1.013,654,1.217,659,1.391,665,1.3,669,1.166,673,1.247,681,1.178,693,1.087,696,1.019,707,1.04,712,1.178,718,1.104,722,0.994,748,1.155,753,1.593,756,3.743,759,2.272,764,2.303,767,1.055,772,0.955,773,5.071,794,1.114,796,1.04,798,0.875,811,1.19,835,0.977,840,1.49,862,1.885,871,1.834,879,1.04,907,1.178,909,1.698,925,1.144,936,2.864,951,1.055,957,0.872,970,2.259,975,1.04,980,1.178,995,1.04,1004,1.033,1028,2.832,1035,0.917,1036,0.935,1062,1.281,1064,3.475,1065,2.176,1071,1.365,1072,7.738,1075,7.034,1086,2.487,1089,1.144,1108,2.471,1116,2.986,1134,0.955,1135,1,1157,1.453,1165,0.908,1167,2.045,1191,1.217,1193,1.49,1198,1.217,1215,1.204,1249,1.997,1306,2.665,1326,0.854,1402,1.232,1411,1.166,1413,4.474,1415,6.355,1424,3.613,1434,1.217,1520,2.008,1534,1.365,1645,2.233,1695,2.29,1697,2.323,1698,2.106,1705,1.872,1706,2.065,1707,4.036,1741,1.49,1822,1.178,1878,1.391,1977,1.49,2039,1.095,2083,1.104,2156,1.232,2157,1.885,2202,4.104,2246,2.41,2247,1.19,2343,1.013,2450,2.8,2580,1.155,2585,1.42,2646,3.523,2677,1.586,2714,2.23,2718,0.966,2734,1.078,2775,2.441,2875,1.217,2889,1.534,2903,1.586,2905,1.3,2961,1.133,3002,2.106,3141,2.045,3151,1.391,3455,1.217,3523,1.217,3530,1.32,3565,1.204,3626,1.391,3709,1.49,3768,1.49,3844,1.49,4034,1.263,4166,1.133,4213,1.391,4231,2.323,4246,1.178,4255,1.281,4429,1.49,4462,2.259,4469,1.263,4742,5.766,4830,1.391,4831,4.005,4832,1.652,4833,1.652,4834,1.652,4835,1.49,4836,1.652,4837,1.652,4838,1.652,4839,1.652,4840,1.652,4841,1.652,4842,1.652,4843,1.652,4844,1.652,4845,1.652,4846,1.652,4847,1.652,4848,1.49,4849,1.652,4850,2.954,4851,1.652,4852,1.652,4853,1.652,4854,5.601,4855,1.652,4856,1.652,4857,1.652,4858,1.652,4859,1.652,4860,2.954,4861,1.652,4862,1.652,4863,1.652,4864,1.652,4865,1.652,4866,1.652,4867,1.652,4868,2.954,4869,2.954,4870,1.652,4871,1.652,4872,1.652,4873,1.652,4874,1.652,4875,2.954,4876,1.652,4877,1.652,4878,1.652,4879,1.652,4880,2.954,4881,1.652,4882,1.652,4883,1.652,4884,1.652,4885,1.652,4886,1.652,4887,4.005,4888,1.652,4889,1.652,4890,1.652,4891,2.954,4892,1.652,4893,1.652]],["component/53",[11,0.279,108,0.486]],["title/54",[11,9.064,39,25.651,178,19.689,2456,23.196,2710,35.463]],["name/54",[441,0.899,2710,0.885]],["text/54",[4,1.908,8,1.793,9,2.941,10,2.298,11,0.845,12,2.188,13,2.087,14,1.891,15,2.135,16,2.403,24,2.207,27,3.894,45,1.958,63,2.246,77,2.151,80,3.304,100,3.563,101,5.204,102,3.481,103,3.307,105,3.206,106,3.664,113,1.644,119,3.019,132,4.708,144,2.102,159,2.512,168,2.763,173,2.034,176,2.135,178,2.819,181,2.575,183,3.039,198,2.366,202,4.239,205,1.74,222,2.995,225,3.552,250,1.952,253,1.636,265,2.094,281,2.428,288,4.269,293,2.996,310,3.237,317,2.603,320,4.323,327,4.7,331,4.108,335,2.844,340,3.505,384,3.513,393,1.921,420,1.921,610,3.113,611,2.102,637,2.298,669,2.965,696,2.592,697,3.304,713,5.695,743,2.763,756,3.883,764,6.366,765,2.995,771,2.609,772,2.428,786,5.229,975,4.946,1086,4.011,1326,2.17,1391,4.619,2456,2.161,2705,2.995,2710,10.021,2968,4.062,3141,6.955,3472,2.832,3508,5.435,3548,3.171,3704,3.095,4209,5.435,4894,4.201,4895,4.201,4896,4.201,4897,4.201,4898,4.201,4899,4.201,4900,4.201,4901,4.201,4902,4.201,4903,4.201,4904,4.201,4905,6.618,4906,7.859,4907,4.201,4908,4.201,4909,4.201,4910,4.201]],["component/54",[11,0.279,108,0.486]],["title/55",[972,30.168,1131,45.085]],["name/55",[972,0.491,1131,0.734]],["text/55",[4,1.969,7,2.746,8,1.849,9,1.975,10,2.37,11,2.126,12,2.257,13,2.152,14,1.95,15,2.203,16,2.478,18,2.574,27,3.835,45,2.02,50,2.701,57,1.809,60,1.871,68,5.129,77,2.988,81,1.603,115,3.798,123,2.85,130,3.456,133,2.751,148,2.229,151,2.276,175,4.025,183,3.731,186,2.543,197,2.786,214,2.239,227,5.837,237,4.605,242,4.467,244,4.387,250,2.013,251,3.863,252,2.903,265,3.295,268,2.248,269,3.741,271,3.562,279,2.04,288,2.098,299,1.987,305,1.921,310,2.722,312,2.903,315,3.101,317,1.748,320,3.002,323,1.921,335,1.909,364,1.921,406,2.128,420,1.981,421,2.257,502,2.22,558,2.296,571,2.276,610,2.09,623,3.428,631,4.077,644,2.673,646,3.428,647,2.276,673,3.271,773,2.416,835,2.561,871,2.691,879,2.727,934,4.159,938,2.786,940,4.534,961,3.461,972,4.619,1028,2.519,1086,2.211,1128,5.448,1129,2.656,1131,5.849,1899,3.059,2057,3.193,3208,3.359,3216,3.314,3594,4.347,3744,3.314,3814,3.059,4300,6.127,4462,3.314,4726,6.346,4911,5.812,4912,9.442,4913,4.333,4914,3.518,4915,5.279,4916,4.333,4917,4.161,4918,3.909,4919,4.333,4920,6.609,4921,4.333]],["component/55",[11,0.279,108,0.486]],["title/56-1",[186,22.577,496,34.101,909,33.734]],["name/56-1",[]],["text/56-1",[]],["component/56-1",[]],["title/56-2",[320,31.382,856,43.477]],["name/56-2",[]],["text/56-2",[]],["component/56-2",[]],["title/56-3",[910,43.78,4922,62.317]],["name/56-3",[]],["text/56-3",[]],["component/56-3",[]],["title/56-4",[320,31.382,4923,58.174]],["name/56-4",[]],["text/56-4",[]],["component/56-4",[]],["title/56-5",[982,58.144]],["name/56-5",[]],["text/56-5",[]],["component/56-5",[]],["title/56-6",[177,39.1,479,32.861]],["name/56-6",[]],["text/56-6",[]],["component/56-6",[]],["title/56",[1134,48.544]],["name/56",[1134,1.177]],["text/56",[0,1.902,4,1.03,7,4.561,8,0.527,9,0.563,10,0.675,11,2.269,12,0.643,13,0.613,14,0.556,15,1.153,16,0.706,17,0.604,18,1.225,19,0.675,21,0.762,22,0.743,24,1.191,27,3.546,28,1.086,30,1.652,32,1.812,35,0.596,37,0.623,38,1.667,39,1.29,40,1.734,45,1.818,46,0.678,50,0.927,57,1.628,59,2.406,60,2.63,63,0.66,65,2.493,67,1.481,68,0.623,70,2.28,73,0.762,75,1.218,77,0.756,78,0.666,79,1.448,81,1.685,88,0.8,91,0.957,92,0.64,96,0.714,99,0.675,101,0.675,102,0.666,103,0.633,105,2.263,106,2.392,109,1.047,113,2.687,114,0.63,115,4.561,127,1.58,128,2.414,130,1.626,131,2.441,133,1.31,137,0.747,141,0.598,142,1.098,144,0.618,150,0.832,151,0.649,157,0.581,159,0.738,164,0.566,165,0.613,166,4.345,172,0.654,173,1.098,175,0.62,176,1.983,178,0.539,179,0.747,180,0.583,182,0.618,183,3.355,185,0.934,186,4.023,192,1.346,194,1.652,196,1.264,203,0.91,205,0.511,210,1.29,213,0.855,216,1.557,221,1.098,223,0.8,237,2.234,242,0.688,244,0.912,249,1.639,250,2.621,252,2.855,253,1.999,265,1.131,269,1.313,271,2.889,272,0.718,273,1.223,279,3.233,287,2.28,288,0.598,291,0.89,295,0.91,299,0.566,303,0.64,305,0.547,306,0.714,309,0.666,312,2.677,315,3.377,316,1.079,317,2.769,320,3.532,323,1.394,331,1.684,332,1.223,335,3.025,340,1.403,342,0.669,354,1.05,360,1.645,364,0.547,373,1.667,376,1.799,382,0.88,383,0.699,384,0.672,393,0.564,406,1.545,409,2.528,420,1.783,421,0.643,446,0.88,447,1.568,448,1.418,450,0.722,467,1.57,470,0.777,479,1.855,483,4.016,484,2.516,489,0.643,502,0.633,503,1.246,506,5.973,511,5.667,516,1.364,525,1.754,527,0.8,528,0.702,533,1.373,541,1.729,550,0.64,557,0.899,571,2.394,611,0.618,623,1.176,624,0.73,631,0.762,637,0.675,645,1.427,646,1.176,647,1.191,649,1.284,650,3.299,651,2.391,654,0.91,657,0.706,667,0.944,668,1.763,687,0.944,693,0.812,696,0.762,702,1.704,710,1.02,726,0.747,759,3.742,768,0.944,771,0.767,772,0.714,773,0.688,791,4.906,792,0.986,794,2.121,798,1.202,815,1.02,816,2.255,822,0.64,827,2.508,842,0.825,904,0.871,907,0.88,909,5.604,910,6.944,911,7.871,917,0.669,922,1.469,925,2.178,926,0.91,927,1.734,934,0.777,936,1.849,971,2.629,979,1.02,981,5.488,982,8.047,983,1.04,996,0.855,1002,0.944,1008,0.847,1045,2.406,1084,0.91,1086,1.991,1102,0.734,1104,1.04,1122,1.114,1129,0.757,1130,1.617,1133,2.046,1134,3.968,1135,0.747,1142,4.459,1154,0.832,1172,0.812,1173,0.839,1180,1.874,1194,0.986,1249,1.131,1326,0.638,1394,0.871,1471,1.704,1576,0.706,1649,0.839,1704,0.702,1705,0.782,1708,0.782,1793,0.92,2157,0.788,2246,0.743,2253,1.941,2343,1.39,2414,0.782,2451,0.767,2456,1.167,2568,0.971,2594,0.855,2651,2.178,2734,0.806,2758,0.743,2905,0.971,2913,1.02,2972,0.944,2987,0.806,2996,0.825,3003,0.986,3026,2.649,3027,4.505,3153,1.04,3162,5.863,3211,2.649,3350,0.986,3366,1.114,3381,0.932,3387,0.91,3436,0.944,3523,1.671,3580,1.04,3642,0.944,3835,1.086,3880,0.986,4148,1.114,4255,0.957,4330,1.114,4443,1.04,4445,2.046,4469,2.406,4609,1.114,4794,1.114,4823,1.114,4922,6.765,4924,1.234,4925,3.146,4926,1.234,4927,1.234,4928,1.234,4929,1.234,4930,1.234,4931,1.146,4932,3.146,4933,1.234,4934,1.234,4935,3.146,4936,2.268,4937,1.234,4938,1.234,4939,1.234,4940,1.234,4941,1.234,4942,3.146,4943,1.234,4944,1.114,4945,1.234,4946,1.234,4947,1.234,4948,7.498,4949,1.234,4950,3.9,4951,1.234,4952,1.234,4953,2.268,4954,3.9,4955,1.234,4956,1.234,4957,1.234,4958,1.234,4959,1.234,4960,1.234,4961,1.234,4962,1.234,4963,1.234,4964,1.234,4965,1.234,4966,1.234,4967,1.234,4968,1.234,4969,1.234,4970,1.234,4971,3.146,4972,1.234,4973,1.234,4974,1.234,4975,1.234]],["component/56",[11,0.279,108,0.486]],["title/57-1",[141,28.403,185,24.166,186,22.577]],["name/57-1",[]],["text/57-1",[]],["component/57-1",[]],["title/57-2",[128,25.111,141,28.403,243,27.351]],["name/57-2",[]],["text/57-2",[]],["component/57-2",[]],["title/57-3",[27,17.931,185,21.002,186,19.621,407,27.136]],["name/57-3",[]],["text/57-3",[]],["component/57-3",[]],["title/57-4",[186,26.583,1026,52.828]],["name/57-4",[]],["text/57-4",[]],["component/57-4",[]],["title/57",[141,40.654]],["name/57",[141,0.986]],["text/57",[0,1.358,4,1.478,8,1.388,9,2.403,10,1.779,11,1.538,12,1.695,13,1.616,14,1.464,15,2.681,16,1.861,18,1.267,27,3.686,33,1.805,42,3.651,57,1.358,67,1.532,71,1.316,72,1.507,86,2.456,106,1.517,109,3.07,113,2.603,128,3.852,131,1.548,135,1.408,136,2.747,138,3.509,139,1.598,140,5.996,141,5.7,144,2.639,167,2.488,172,1.724,174,2.598,176,2.681,178,1.421,180,1.537,183,3.48,185,4.317,186,4.34,191,3.391,192,2.257,198,1.832,209,4.398,221,1.575,227,1.616,236,2.65,243,4.756,244,3.078,250,1.512,252,2.317,253,2.59,259,2.74,261,2.74,263,2.598,267,2.74,268,1.688,269,4.476,271,3.401,276,3.319,277,4.358,299,2.419,312,3.36,317,3.391,320,1.478,323,2.338,325,4.245,329,2.232,331,1.404,332,1.755,333,3.844,335,1.433,340,1.451,341,2.67,342,2.858,354,1.507,359,4.244,364,2.338,373,1.724,392,2.61,393,3.041,407,2.807,469,1.385,470,2.047,496,1.891,524,2.252,528,3,558,1.724,571,2.77,572,1.87,582,1.61,629,2.007,632,2.193,674,1.957,688,1.779,713,1.771,722,4.001,741,5.454,746,2.397,756,1.957,759,2.458,773,1.814,818,2.107,824,2.74,861,2.32,864,2.092,870,2.047,977,1.912,1026,4.033,1086,2.692,1109,2.212,1111,2.74,1119,2.37,1154,2.193,1253,2.047,1375,2.935,1420,2.232,1446,2.488,1522,2.296,1567,2.107,1712,2.598,1960,2.74,2114,2.397,2432,2.861,2512,4.845,2563,2.559,2951,5.064,2966,2.598,3344,2.37,3670,2.397,3671,2.598,3879,4.757,4504,2.935,4811,4.757,4976,3.253,4977,3.253,4978,3.253,4979,3.253,4980,3.253,4981,3.253,4982,3.253,4983,3.253,4984,3.253,4985,3.253,4986,3.253,4987,3.253,4988,3.253,4989,5.274,4990,3.253,4991,3.253,4992,5.274,4993,3.253,4994,3.253,4995,3.253,4996,3.253,4997,3.253,4998,3.253,4999,3.253,5000,3.253,5001,3.253,5002,3.253,5003,3.253,5004,3.253,5005,3.253,5006,3.253,5007,3.253,5008,3.253]],["component/57",[11,0.279,108,0.486]],["title/58-1",[1112,34.101,2594,40.623,5009,46.864]],["name/58-1",[]],["text/58-1",[]],["component/58-1",[]],["title/58-2",[320,26.654,2594,40.623,5009,46.864]],["name/58-2",[]],["text/58-2",[]],["component/58-2",[]],["title/58-3",[320,31.382,1112,40.15]],["name/58-3",[]],["text/58-3",[]],["component/58-3",[]],["title/58",[205,28.605,225,25.785]],["name/58",[205,0.466,225,0.42]],["text/58",[4,1.062,7,1.482,8,0.998,9,1.066,10,1.279,11,0.47,12,1.218,13,1.162,14,1.053,15,1.189,16,1.338,18,0.911,27,3.465,32,1.861,35,1.932,44,1.382,45,3.26,47,1.109,50,2.146,57,3.183,60,1.01,63,2.141,65,1.136,67,1.101,68,3.137,77,0.78,103,1.198,105,1.162,106,1.867,109,3.969,114,2.044,115,1.109,128,2.248,130,1.269,133,1.667,141,3.692,161,4.231,168,1.538,169,2.233,173,1.132,180,1.105,183,2.704,190,3.213,199,1.989,205,4.842,206,2.113,216,1.157,218,1.997,225,3.906,236,1.175,237,2.708,246,2.634,250,1.861,253,2.724,265,1.997,269,4.368,271,3.624,273,2.832,276,2.52,286,2.15,293,1.526,297,1.407,299,1.837,302,1.861,303,3.226,305,1.775,306,1.352,310,3.541,316,1.113,317,1.615,320,2.386,323,1.037,330,4.252,331,3.292,335,1.764,337,1.203,340,1.043,341,2.028,347,1.267,356,2.175,364,1.775,371,2.044,373,2.783,378,1.273,393,1.069,406,2.579,407,1.245,420,2.843,421,1.218,453,1.407,489,1.218,502,1.198,511,2.747,529,2.454,533,1.416,558,2.122,582,3.773,593,3.825,605,1.868,610,1.128,611,3.113,616,1.765,617,1.345,619,2.244,623,1.213,627,1.338,630,1.472,643,1.267,647,1.229,649,1.324,669,1.651,671,1.577,707,2.52,722,1.407,752,1.526,753,2.16,771,2.487,773,1.304,818,1.515,822,1.213,863,2.395,925,1.619,934,1.472,950,4.229,972,1.021,977,5.277,978,5.906,1008,2.747,1009,2.773,1028,3.052,1086,3.174,1089,1.619,1112,6.796,1130,1.668,1136,1.788,1173,1.59,1186,1.345,1188,5.185,1212,1.651,1216,1.744,1435,1.704,1559,3.54,1568,1.462,1687,1.685,1693,2.11,1713,2.885,2114,2.95,2161,2.677,2331,1.619,2343,1.433,2456,2.06,2594,6.822,2641,2.246,2725,2.917,2734,2.614,2781,2.057,2998,1.324,3216,1.788,3783,1.788,3843,7.756,4144,1.932,4166,2.747,4246,1.668,4255,1.813,4469,1.788,4470,1.868,4722,5.611,4918,2.11,4944,2.11,5009,7.436,5010,5.251,5011,2.339,5012,2.339,5013,2.339,5014,2.339,5015,2.339,5016,2.171,5017,2.339,5018,2.11,5019,2.339,5020,2.339,5021,2.339,5022,2.339,5023,2.339,5024,2.339,5025,2.339,5026,2.339,5027,2.339,5028,2.339,5029,2.339,5030,6.219,5031,2.339,5032,2.339,5033,2.339,5034,4.004,5035,2.339,5036,2.339,5037,2.339,5038,2.339,5039,2.339,5040,2.339,5041,2.339,5042,2.339,5043,2.339,5044,2.339,5045,2.339,5046,2.339,5047,2.652,5048,2.339,5049,2.339]],["component/58",[11,0.279,108,0.486]],["title/59-1",[225,25.785,1411,48.759]],["name/59-1",[]],["text/59-1",[]],["component/59-1",[]],["title/59-2",[984,49.639]],["name/59-2",[]],["text/59-2",[]],["component/59-2",[]],["title/59-3",[225,25.785,226,38.901]],["name/59-3",[]],["text/59-3",[]],["component/59-3",[]],["title/59",[9,31.481,315,32.418]],["name/59",[9,0.513,315,0.528]],["text/59",[0,0.473,4,0.515,8,0.484,9,0.516,10,0.62,11,1.161,12,0.59,13,1.041,14,0.51,15,0.576,16,0.648,18,0.441,21,0.699,24,0.595,26,0.598,27,3.372,29,0.878,32,0.974,37,1.057,38,0.6,39,1.192,40,1.9,44,0.67,45,1.363,47,0.993,57,0.473,60,1.845,65,0.55,67,0.533,68,1.474,74,0.855,76,1.057,77,0.974,78,0.611,81,0.419,86,0.855,87,0.905,89,0.699,106,0.528,108,0.396,109,1.349,113,1.426,115,0.537,119,1.367,127,0.569,128,2.068,130,1.689,139,0.556,141,3.951,151,1.101,157,0.533,159,0.678,161,0.629,165,0.563,166,0.757,170,2.264,173,0.548,176,1.852,178,0.495,183,0.81,184,0.645,185,2.954,188,3.628,190,0.585,192,3.58,194,0.595,197,2.747,198,1.18,204,0.713,205,2.001,208,0.723,210,0.645,216,0.561,217,3.685,218,2.409,221,1.415,225,3.193,226,5.795,227,0.563,231,0.598,236,1.053,237,2.992,240,0.632,242,0.632,243,1.698,244,1.465,253,1.138,269,5.343,271,2.567,276,1.319,281,3.08,287,1.225,288,0.548,291,0.816,299,0.52,301,3.401,302,0.526,305,0.929,310,3.069,312,2.341,315,4.015,316,1.733,317,1.469,320,1.941,323,0.929,327,1.253,330,0.632,331,3.327,332,0.611,333,0.655,335,0.499,340,0.934,341,0.574,352,0.694,353,0.537,356,2.391,358,0.77,359,4.641,360,0.593,361,0.583,364,0.929,373,0.6,376,0.648,378,0.617,380,0.658,393,1.665,394,1.577,406,1.436,409,3.628,426,0.835,449,2.541,483,1.082,501,1.174,502,1.074,507,0.626,520,0.626,525,3.646,527,0.734,541,3.775,550,0.588,576,1.582,582,3.236,593,1.146,596,1.803,603,0.638,610,1.757,611,0.567,615,0.708,617,2.094,623,0.588,637,1.146,643,1.135,646,1.516,653,4.385,654,0.835,656,1.882,657,2.763,666,0.866,674,0.682,679,1.526,696,0.699,703,0.694,706,0.996,713,1.141,722,0.682,759,1.363,764,3.95,765,0.808,767,0.723,773,1.63,785,0.878,789,0.835,794,0.764,801,1.89,841,1.401,862,0.723,863,2.178,869,1.827,879,0.713,909,0.651,910,2.708,921,0.739,922,0.734,930,0.891,934,0.713,938,1.879,944,0.878,951,3.685,954,0.878,955,0.878,972,3,977,1.718,978,0.745,980,0.808,981,0.8,984,5.057,994,0.954,995,0.713,996,0.784,999,0.891,1022,1.89,1035,1.163,1064,0.808,1071,0.936,1075,1.401,1086,1.069,1102,2.541,1129,2.233,1134,2.105,1139,1.022,1186,0.651,1202,2.179,1222,0.845,1249,2.657,1252,0.713,1254,0.784,1270,0.954,1340,2.325,1343,0.745,1394,0.8,1411,3.761,1471,0.614,1494,0.757,1495,0.835,1520,0.77,1576,1.198,1600,0.974,1687,1.51,1698,0.808,1704,0.645,1705,2.308,1901,0.764,1942,0.835,1962,0.757,2004,2.335,2083,0.757,2103,0.808,2156,0.845,2235,0.866,2246,1.759,2253,1.293,2331,3.345,2364,0.954,2414,0.718,2427,2.714,2442,0.792,2446,2.571,2450,0.792,2456,0.583,2529,1.648,2531,3.41,2559,1.088,2565,0.936,2566,0.996,2646,0.996,2648,1.088,2734,0.739,2756,2.415,2832,1.946,2833,1.946,2834,2.714,2835,2.714,2836,2.012,2837,6.279,2838,2.012,2839,2.012,2853,1.946,2912,0.866,2913,0.936,2938,0.996,2961,0.777,2987,0.739,3001,0.891,3002,1.494,3003,3.859,3012,2.462,3013,1.765,3014,0.954,3015,0.954,3016,0.954,3032,1.602,3070,1.89,3090,1.765,3092,1.765,3093,0.905,3111,0.954,3112,0.954,3122,2.335,3138,1.022,3139,1.022,3145,0.905,3151,3.067,3154,1.765,3165,1.89,3213,0.954,3240,1.022,3241,1.022,3249,0.954,3250,1.022,3344,0.825,3357,1.89,3387,0.835,3420,0.855,3431,0.866,3488,1.022,3615,0.996,3701,0.816,3704,0.835,3758,2.637,3812,0.905,3814,0.8,4456,0.866,4616,2.785,4719,0.996,4742,0.905,4763,1.022,4771,0.905,4810,0.954,4848,1.89,5009,1.674,5050,1.133,5051,1.133,5052,1.133,5053,1.133,5054,1.133,5055,1.133,5056,1.89,5057,2.923,5058,1.133,5059,1.133,5060,1.133,5061,1.133,5062,1.133,5063,1.133,5064,1.133,5065,1.133,5066,1.133,5067,1.133,5068,1.133,5069,1.022,5070,2.095,5071,1.133,5072,1.133,5073,1.133,5074,1.133,5075,1.133,5076,1.133,5077,1.133,5078,1.133,5079,1.133,5080,1.133,5081,1.133,5082,1.133,5083,1.133,5084,1.133,5085,1.133,5086,1.133,5087,1.133,5088,1.133,5089,1.133,5090,1.133,5091,1.133,5092,1.133,5093,1.133,5094,2.923,5095,1.133,5096,1.133,5097,1.133,5098,1.133,5099,1.133,5100,2.095,5101,2.095,5102,1.133,5103,1.133,5104,1.133,5105,1.133,5106,1.133,5107,1.133,5108,1.133,5109,1.133,5110,1.133,5111,1.133,5112,1.133,5113,1.133,5114,1.133,5115,1.133,5116,1.133,5117,1.133,5118,1.765,5119,1.133,5120,1.133,5121,2.095,5122,2.095,5123,1.133,5124,3.642,5125,1.133,5126,1.133,5127,1.133,5128,1.133,5129,1.133,5130,1.133,5131,1.133,5132,1.133,5133,1.133,5134,1.133,5135,1.285,5136,1.133,5137,1.133,5138,1.133,5139,2.095,5140,2.095,5141,2.095,5142,1.133,5143,1.133,5144,2.095,5145,1.133,5146,1.133,5147,1.133,5148,2.923,5149,2.095,5150,1.133,5151,1.133,5152,1.133,5153,1.133,5154,1.133,5155,1.133,5156,1.133,5157,1.133,5158,1.133,5159,1.133,5160,1.133,5161,1.133,5162,2.923,5163,5.773,5164,1.133,5165,2.095,5166,2.095,5167,1.133,5168,1.133,5169,1.133,5170,1.133,5171,1.133,5172,2.095,5173,1.133,5174,2.095,5175,2.095,5176,1.133,5177,1.133,5178,1.133,5179,1.133,5180,1.133,5181,1.133]],["component/59",[11,0.279,108,0.486]],["title/60-1",[3411,55.679]],["name/60-1",[]],["text/60-1",[]],["component/60-1",[]],["title/60-2",[130,21.893,315,32.418]],["name/60-2",[]],["text/60-2",[]],["component/60-2",[]],["title/60-3",[130,18.595,315,27.533,1450,36.675]],["name/60-3",[]],["text/60-3",[]],["component/60-3",[]],["title/60-4",[27,17.931,175,25.617,1846,35.64,2442,35.64]],["name/60-4",[]],["text/60-4",[]],["component/60-4",[]],["title/60-5",[19,37.78,315,32.418]],["name/60-5",[]],["text/60-5",[]],["component/60-5",[]],["title/60-6",[185,34.589]],["name/60-6",[]],["text/60-6",[]],["component/60-6",[]],["title/60-7",[185,28.453,315,32.418]],["name/60-7",[]],["text/60-7",[]],["component/60-7",[]],["title/60-8",[957,44.305]],["name/60-8",[]],["text/60-8",[]],["component/60-8",[]],["title/60-9",[185,24.166,759,27.351,957,30.954]],["name/60-9",[]],["text/60-9",[]],["component/60-9",[]],["title/60-10",[528,47.778]],["name/60-10",[]],["text/60-10",[]],["component/60-10",[]],["title/60-11",[327,41.313,3614,55.177]],["name/60-11",[]],["text/60-11",[]],["component/60-11",[]],["title/60",[315,39.409]],["name/60",[315,0.956]],["text/60",[0,0.772,4,0.586,7,0.429,8,0.289,9,1.841,10,0.37,11,1.117,12,0.352,13,0.336,14,3.001,15,0.656,16,0.387,18,0.92,19,1.012,22,0.777,24,0.972,25,1.269,26,2.131,27,3.434,32,1.704,33,1.027,35,1.576,36,0.391,37,0.341,38,0.359,39,0.385,40,0.301,41,0.375,44,0.4,45,1.101,48,1.032,50,2.468,57,2.319,59,0.796,60,1.223,62,0.456,63,1.96,65,1.148,67,0.871,68,3.158,71,1.146,75,0.363,76,0.341,77,1.089,81,1.494,92,0.351,96,2.12,99,0.37,100,0.374,101,0.37,102,0.365,103,0.347,105,0.336,106,0.315,109,0.596,112,1.217,113,0.265,114,0.944,115,2.079,117,1.396,119,1.105,121,0.88,123,0.445,128,1.011,130,2.704,132,0.305,133,0.77,137,1.12,144,0.339,148,1.457,150,0.456,151,1.488,152,0.885,157,0.319,161,0.375,165,0.919,170,0.359,172,0.359,173,1.581,175,3.923,176,2.229,178,0.808,179,0.41,180,1.543,181,0.791,182,2.781,183,1.695,185,4.341,186,1.411,190,0.667,192,1.877,194,0.972,199,1.173,200,0.989,202,0.365,205,2.839,210,0.734,214,0.35,216,1.402,217,0.432,218,1.628,220,1.519,221,0.896,222,0.483,225,3.57,227,0.336,231,1.246,236,0.93,237,4.036,238,1.439,240,3.922,241,0.438,244,0.95,246,0.445,250,2.327,252,2.653,253,2.869,265,0.337,268,1.902,269,4.905,270,0.541,271,2.227,273,0.696,276,0.426,279,0.319,281,1.366,285,0.387,288,1.581,291,1.702,293,3.252,297,0.777,299,0.849,301,0.432,302,0.6,305,0.572,306,3.491,307,3.236,308,2.46,309,0.365,310,1.345,312,1.926,313,0.452,315,5.454,316,0.322,317,0.521,318,2.1,320,1.484,323,0.3,324,0.442,327,4.97,330,0.377,331,1.223,332,1.528,335,0.815,337,0.348,340,1.053,341,3.17,342,1.987,345,1.74,351,0.405,352,0.415,354,0.313,356,0.766,359,0.375,360,0.354,361,1.215,364,1.448,368,0.734,371,2.402,378,0.368,380,0.393,384,1.778,393,0.309,394,0.998,396,1.087,406,1.984,420,1.295,421,0.672,424,0.417,439,0.407,447,0.337,448,0.807,449,0.767,450,0.395,469,0.288,482,2.995,484,1.022,489,1.231,501,0.379,502,2.07,503,0.372,507,0.713,516,0.407,520,1.304,528,3.01,532,1.508,533,0.41,540,0.777,541,3.053,550,0.351,551,0.435,553,0.483,558,1.501,569,0.363,571,0.355,582,1.169,593,1.786,599,0.432,603,0.381,610,1.948,611,0.926,615,0.423,623,1.694,627,1.351,629,0.417,632,1.592,634,0.417,637,0.37,641,1.258,642,0.57,644,0.796,645,2.308,646,1.225,649,1.603,651,1.134,652,0.57,653,0.432,659,0.57,666,0.518,668,0.723,669,2.305,671,0.456,674,0.777,688,0.37,696,1.141,702,1.003,703,0.791,713,0.703,739,0.541,741,1.684,752,1.542,753,1.528,759,3.574,764,0.742,772,0.391,773,0.72,776,0.94,786,0.709,798,0.359,811,0.488,816,0.391,822,0.351,835,1.094,859,1.319,862,1.508,869,0.807,881,1.363,887,0.483,901,1.247,907,0.92,921,2.132,922,0.438,925,0.469,934,1.487,936,1.388,938,1.19,939,0.962,940,1.943,946,0.974,950,2.982,951,3.197,957,4.119,971,0.87,972,1.237,975,0.426,977,1.087,1002,1.415,1004,0.807,1008,0.464,1011,0.445,1028,0.393,1035,1.027,1086,1.872,1089,0.894,1090,1.558,1107,0.452,1109,0.46,1121,2.609,1128,0.46,1129,1.134,1130,0.483,1131,0.442,1135,0.41,1144,0.549,1159,0.541,1165,0.709,1172,0.445,1182,0.505,1186,0.389,1187,0.464,1204,0.464,1212,0.911,1216,1.761,1218,0.61,1235,0.541,1249,3.226,1273,0.549,1326,1.22,1340,0.432,1343,0.849,1390,3.095,1397,0.518,1411,2.305,1450,1.157,1494,0.863,1516,0.57,1520,0.46,1523,0.595,1534,0.559,1567,0.438,1599,0.61,1701,1.943,1713,3.16,1740,1.087,1822,0.92,1846,2.563,1899,0.911,1901,0.456,1943,0.518,1945,0.483,2005,0.499,2022,3.51,2039,0.449,2057,1.363,2063,0.61,2083,1.894,2117,0.488,2157,1.181,2247,0.488,2343,0.791,2389,1.529,2394,0.951,2414,1.497,2418,0.532,2434,0.549,2442,2.823,2450,1.651,2456,0.348,2503,3.03,2531,4.419,2580,5.149,2705,1.319,2724,1.858,2726,1.031,2735,0.559,2742,1.627,2746,1.777,2755,2.138,2758,0.407,2775,1.066,2812,0.65,2824,0.493,2892,4.991,2961,0.464,2968,0.426,2972,1.415,2987,0.442,3004,0.987,3196,0.499,3208,0.525,3213,1.087,3216,3.6,3249,0.57,3384,0.442,3387,0.951,3411,0.449,3424,0.499,3431,0.518,3510,0.61,3519,0.518,3523,1.74,3614,3.502,3663,1.087,3698,5.774,3701,0.488,3707,0.61,3749,0.61,3754,0.61,3814,0.911,3842,0.65,3990,1.087,4166,0.885,4168,1.087,4300,0.987,4425,1.807,4456,0.518,4462,0.518,4469,0.987,4470,0.541,4552,0.61,4616,0.518,4730,0.61,4766,0.61,4767,0.61,4768,0.61,4769,0.61,4770,0.559,4771,2.609,4801,0.61,4808,0.65,4835,1.669,4905,1.989,4911,2.873,4914,0.549,4915,1.031,5018,0.61,5069,0.61,5182,0.767,5183,0.767,5184,0.767,5185,0.767,5186,0.767,5187,1.85,5188,0.767,5189,0.677,5190,0.767,5191,0.767,5192,0.767,5193,1.291,5194,0.677,5195,0.677,5196,0.767,5197,0.767,5198,0.767,5199,0.767,5200,0.767,5201,0.767,5202,0.767,5203,0.767,5204,0.767,5205,1.669,5206,0.767,5207,0.767,5208,0.767,5209,0.767,5210,0.767,5211,0.767,5212,1.291,5213,0.677,5214,1.85,5215,1.291,5216,0.767,5217,0.677,5218,0.767,5219,0.677,5220,0.677,5221,0.677,5222,0.677,5223,0.677,5224,1.85,5225,0.677,5226,0.677,5227,0.677,5228,0.767,5229,0.61,5230,0.677,5231,0.677,5232,0.677,5233,0.677,5234,1.291,5235,0.677,5236,0.677,5237,0.677,5238,1.85,5239,1.291,5240,0.677,5241,0.677,5242,0.677,5243,0.677,5244,0.767,5245,0.677,5246,0.677,5247,0.677,5248,0.677,5249,0.677,5250,0.677,5251,1.949,5252,1.85,5253,1.291,5254,2.833,5255,1.291,5256,1.291,5257,1.291,5258,0.677,5259,0.677,5260,0.677,5261,0.677,5262,0.677,5263,0.677,5264,0.677,5265,0.677,5266,0.677,5267,1.85,5268,1.291,5269,1.291,5270,1.291,5271,1.291,5272,0.677,5273,0.677,5274,0.677,5275,0.677,5276,1.291,5277,0.677,5278,0.677,5279,0.677,5280,0.677,5281,0.677,5282,0.677,5283,0.677,5284,0.677,5285,0.677,5286,0.677,5287,0.677,5288,0.677,5289,0.677,5290,0.677,5291,0.677,5292,0.677,5293,0.677,5294,0.677,5295,0.677,5296,0.677,5297,0.677,5298,0.677,5299,0.61,5300,0.677,5301,0.677]],["component/60",[11,0.279,108,0.486]],["title/61-1",[253,32.708]],["name/61-1",[]],["text/61-1",[]],["component/61-1",[]],["title/61-2",[356,28.605,5302,62.317]],["name/61-2",[]],["text/61-2",[]],["component/61-2",[]],["title/61-3",[156,55.177,5303,62.317]],["name/61-3",[]],["text/61-3",[]],["component/61-3",[]],["title/61-4",[132,37.794]],["name/61-4",[]],["text/61-4",[]],["component/61-4",[]],["title/61-5",[354,27.171,501,32.874,2456,30.186]],["name/61-5",[]],["text/61-5",[]],["component/61-5",[]],["title/61-6",[682,56.137]],["name/61-6",[]],["text/61-6",[]],["component/61-6",[]],["title/61-7",[5304,75.757]],["name/61-7",[]],["text/61-7",[]],["component/61-7",[]],["title/61-8",[1154,34.373,3365,53.218,5305,50.986]],["name/61-8",[]],["text/61-8",[]],["component/61-8",[]],["title/61-9",[501,32.874,2463,49.409,3932,49.409]],["name/61-9",[]],["text/61-9",[]],["component/61-9",[]],["title/61-10",[2433,45.802,5306,62.317]],["name/61-10",[]],["text/61-10",[]],["component/61-10",[]],["title/61-11",[361,43.206]],["name/61-11",[]],["text/61-11",[]],["component/61-11",[]],["title/61-12",[130,16.16,353,24.172,1165,28.018,2433,33.807]],["name/61-12",[]],["text/61-12",[]],["component/61-12",[]],["title/61-13",[361,30.186,2433,38.901,3663,49.409]],["name/61-13",[]],["text/61-13",[]],["component/61-13",[]],["title/61-14",[3432,55.177,4195,58.174]],["name/61-14",[]],["text/61-14",[]],["component/61-14",[]],["title/61-15",[11,11.796,175,29.477,394,31.646]],["name/61-15",[]],["text/61-15",[]],["component/61-15",[]],["title/61",[353,32.749,2433,45.802]],["name/61",[353,0.533,2433,0.746]],["text/61",[0,0.824,4,0.896,8,0.842,9,0.899,10,1.079,11,1.743,12,1.028,13,0.98,14,0.888,15,1.003,16,1.128,17,0.966,26,1.041,27,2.786,38,1.045,45,2.15,46,1.899,47,0.935,65,3.059,67,1.627,76,0.995,77,2.488,81,0.73,91,1.53,105,0.98,106,1.611,109,3.198,113,0.772,119,2.944,130,2.196,133,0.821,163,1.225,164,0.905,165,2.291,169,1.1,173,0.955,175,3.75,179,1.194,183,0.763,190,1.019,194,2.423,196,1.1,198,3.118,200,1.847,206,1.041,208,2.206,213,1.366,215,1.16,221,0.955,229,1.202,236,2.317,237,2.008,240,1.1,242,2.571,243,2.581,244,2.228,245,1.298,253,1.796,265,0.984,269,4.284,271,3.318,276,1.242,286,1.856,293,1.317,305,0.874,308,1.202,309,1.064,310,1.423,312,3.48,316,2.634,317,1.394,323,0.874,325,1.259,332,1.064,335,1.523,339,1.217,340,1.541,347,1.873,353,5.784,354,5.147,356,1.431,357,1.33,361,3.564,364,3.308,370,1.987,384,1.074,393,2.878,394,1.864,406,0.969,409,1.095,410,1.78,420,1.58,421,1.028,484,4.594,501,4.858,506,2.33,520,1.908,525,3.51,533,1.194,550,1.793,558,1.045,569,3.38,571,2.423,573,2.132,582,1.71,596,1.217,610,2.671,611,0.987,619,1.936,630,1.242,634,1.217,637,1.079,639,3.164,643,1.069,646,1.023,647,1.816,649,1.956,658,1.298,682,5.795,698,1.217,751,1.268,753,1.864,759,2.935,773,3.51,788,3.109,798,1.831,822,1.793,859,1.407,870,2.902,876,1.78,908,1.354,917,1.069,936,1.16,957,1.041,972,0.862,975,1.242,978,2.273,997,2.902,1010,1.288,1035,1.095,1086,1.764,1135,1.194,1154,3.109,1165,4.764,1189,1.661,1192,1.576,1215,1.437,1273,1.602,1326,1.019,1344,3.398,1353,4.018,1413,1.576,1471,1.069,1528,1.509,1568,2.16,1647,1.576,1660,1.407,1663,1.576,1706,2.416,1822,1.407,1902,1.454,1942,1.454,2083,2.31,2161,1.319,2333,1.33,2433,8.342,2451,4.302,2456,2.373,2463,2.91,2577,1.489,2580,2.416,2657,3.04,2737,1.379,2975,1.661,2995,1.366,2997,3.683,2998,2.61,3316,1.437,3355,2.464,3365,6.771,3387,1.454,3424,1.454,3432,1.576,3468,1.661,3470,1.78,3525,1.661,3565,2.518,3627,1.576,3629,3.883,3642,1.509,3654,3.118,3655,1.78,3695,1.454,3725,1.661,3834,1.661,3932,4.663,4047,1.661,4125,5.679,4195,4.663,4200,1.78,4231,1.552,4246,1.407,4462,1.509,5303,1.78,5304,1.78,5306,3.118,5307,2.91,5308,1.78,5309,1.973,5310,1.894,5311,1.973,5312,1.973,5313,1.973,5314,1.973,5315,1.973,5316,1.973,5317,1.973,5318,1.973,5319,1.973,5320,1.973,5321,1.973,5322,1.973,5323,1.973,5324,1.973,5325,4.611,5326,1.973,5327,1.973,5328,3.456,5329,1.973,5330,1.973,5331,1.973,5332,1.973,5333,1.973,5334,1.973,5335,1.973,5336,1.973,5337,1.973,5338,1.973,5339,1.973]],["component/61",[11,0.279,108,0.486]],["title/62-1",[439,50.524]],["name/62-1",[]],["text/62-1",[]],["component/62-1",[]],["title/62-2",[81,25.551,853,62.317]],["name/62-2",[]],["text/62-2",[]],["component/62-2",[]],["title/62-3",[188,38.326,310,28.453]],["name/62-3",[]],["text/62-3",[]],["component/62-3",[]],["title/62-4",[27,24.294,339,42.614]],["name/62-4",[]],["text/62-4",[]],["component/62-4",[]],["title/62-5",[2331,47.83,5340,58.174]],["name/62-5",[]],["text/62-5",[]],["component/62-5",[]],["title/62-6",[81,21.701,180,27.72,231,30.954]],["name/62-6",[]],["text/62-6",[]],["component/62-6",[]],["title/62-7",[339,42.614,1036,39.1]],["name/62-7",[]],["text/62-7",[]],["component/62-7",[]],["title/62-8",[81,21.701,135,25.4,869,36.675]],["name/62-8",[]],["text/62-8",[]],["component/62-8",[]],["title/62-9",[72,38.891]],["name/62-9",[]],["text/62-9",[]],["component/62-9",[]],["title/62-10",[339,42.614,2333,46.568]],["name/62-10",[]],["text/62-10",[]],["component/62-10",[]],["title/62",[81,25.551,310,28.453]],["name/62",[81,0.416,310,0.463]],["text/62",[4,1.372,8,1.289,9,1.376,10,1.651,11,1.471,12,1.573,13,1.5,14,1.359,15,1.535,16,1.727,22,1.817,27,3.597,32,1.403,35,1.457,38,3.348,41,1.675,45,1.408,57,1.261,62,2.036,65,1.467,67,1.422,68,2.503,71,2.959,72,1.398,75,2.665,76,1.523,77,1.654,81,4.521,109,2.291,126,1.472,128,1.292,135,2.148,137,1.828,139,1.483,141,3.058,152,2.072,172,1.6,176,2.523,177,1.709,185,2.602,186,1.91,188,5.095,192,2.704,194,1.586,199,1.5,205,3.347,209,3.632,216,4.3,218,1.505,225,1.852,236,2.493,244,3.252,250,3.756,269,4.683,271,2.809,286,3.392,297,1.817,298,3.656,299,3.356,308,1.839,310,4.092,312,2.18,323,1.338,325,3.168,327,1.806,331,1.303,335,1.33,339,7.376,341,2.513,342,3.423,353,1.432,354,1.398,358,2.053,360,1.58,361,1.554,364,2.2,381,3.964,393,3.696,406,3.103,414,3.123,423,1.851,439,1.817,469,1.285,533,1.828,535,1.941,540,2.986,557,2.2,569,2.665,571,1.586,572,1.736,582,3.62,596,3.061,600,3.503,603,2.795,615,1.888,644,1.863,674,1.817,722,1.817,786,1.659,796,1.9,816,1.746,822,4.193,861,2.153,864,1.941,869,1.888,870,1.9,957,2.618,972,1.319,1011,1.986,1030,1.927,1036,1.709,1086,2.533,1087,2.452,1186,1.736,1204,5.02,1214,2.724,1222,2.251,1249,2.474,1340,3.168,1390,4.459,1434,2.225,1576,2.838,1602,1.863,1860,2.724,1940,2.724,1960,2.543,2003,2.543,2057,2.225,2331,6.017,2333,3.345,2456,1.554,2737,2.111,2880,2.9,2912,2.309,2950,2.9,3000,2.072,3117,2.412,3145,2.412,3530,2.412,3701,2.176,4318,2.412,4425,2.309,4474,2.724,4771,2.412,4803,2.724,4915,6.457,4923,2.543,5308,2.724,5340,6.161,5341,3.019,5342,3.019,5343,2.724,5344,2.724,5345,3.019,5346,3.019,5347,3.019,5348,3.019,5349,3.019,5350,3.019,5351,3.019,5352,3.019,5353,3.019,5354,3.019,5355,3.019,5356,3.019,5357,3.019,5358,2.724,5359,3.019,5360,3.019,5361,3.019,5362,3.019,5363,3.019,5364,3.019,5365,6.317,5366,3.019,5367,3.019]],["component/62",[11,0.279,108,0.486]],["title/63-1",[68,42.354]],["name/63-1",[]],["text/63-1",[]],["component/63-1",[]],["title/63-2",[51,29.8,2487,28.57,2488,29.009,2628,38.49]],["name/63-2",[]],["text/63-2",[]],["component/63-2",[]],["title/63-3",[4,23.164,2487,28.57,2488,29.009,2628,38.49]],["name/63-3",[]],["text/63-3",[]],["component/63-3",[]],["title/63-4",[164,20.678,192,19.296,481,27.634,2487,25.262,2488,25.651]],["name/63-4",[]],["text/63-4",[]],["component/63-4",[]],["title/63-5",[164,20.678,192,19.296,2487,25.262,2488,25.651,2917,35.463]],["name/63-5",[]],["text/63-5",[]],["component/63-5",[]],["title/63-6",[469,21.7,2487,28.57,2488,29.009,2628,38.49]],["name/63-6",[]],["text/63-6",[]],["component/63-6",[]],["title/63-7",[5368,75.757]],["name/63-7",[]],["text/63-7",[]],["component/63-7",[]],["title/63-8",[302,18.774,374,20.705,457,26.791,469,17.197,2487,22.64,2488,22.989]],["name/63-8",[]],["text/63-8",[]],["component/63-8",[]],["title/63-9",[469,19.188,481,27.634,491,31.216,2487,25.262,2488,25.651]],["name/63-9",[]],["text/63-9",[]],["component/63-9",[]],["title/63-10",[1132,70.719]],["name/63-10",[]],["text/63-10",[]],["component/63-10",[]],["title/63-11",[444,30.139,479,24.255,1656,36.356,2962,30.864]],["name/63-11",[]],["text/63-11",[]],["component/63-11",[]],["title/63-12",[469,17.197,550,20.96,822,20.96,1656,28.811,2962,24.459,5369,36.451]],["name/63-12",[]],["text/63-12",[]],["component/63-12",[]],["title/63-13",[132,13.868,186,11.858,320,13.999,541,16.932,550,15.984,2327,24.613,2969,24.613,3004,23.565,5370,27.798]],["name/63-13",[]],["text/63-13",[]],["component/63-13",[]],["title/63-14",[118,25.716,643,27.628,1602,31.454,5371,35.304]],["name/63-14",[]],["text/63-14",[]],["component/63-14",[]],["title/63-15",[18,14.258,71,14.805,118,18.464,643,19.836,713,19.928,1602,22.583,5371,25.347]],["name/63-15",[]],["text/63-15",[]],["component/63-15",[]],["title/63-16",[444,23.885,479,19.222,548,29.435,1656,28.811,2962,24.459,5371,27.977]],["name/63-16",[]],["text/63-16",[]],["component/63-16",[]],["title/63-17",[18,13.033,71,13.532,383,18.94,444,19.78,479,15.918,1656,23.86,2962,20.255,5371,23.169]],["name/63-17",[]],["text/63-17",[]],["component/63-17",[]],["title/63-18",[4,20.482,372,30.393,450,26.35,688,24.658,1167,31.216]],["name/63-18",[]],["text/63-18",[]],["component/63-18",[]],["title/63-19",[5372,75.757]],["name/63-19",[]],["text/63-19",[]],["component/63-19",[]],["title/63-20",[128,29.566,2962,41.815]],["name/63-20",[]],["text/63-20",[]],["component/63-20",[]],["title/63-21",[142,28.403,702,31.791,1172,38.592]],["name/63-21",[]],["text/63-21",[]],["component/63-21",[]],["title/63-22",[142,21.826,392,22.31,702,24.429,822,23.387,5373,36.012]],["name/63-22",[]],["text/63-22",[]],["component/63-22",[]],["title/63-23",[142,24.684,702,27.628,822,26.45,3450,45.997]],["name/63-23",[]],["text/63-23",[]],["component/63-23",[]],["title/63-24",[469,29.4,3914,49.256]],["name/63-24",[]],["text/63-24",[]],["component/63-24",[]],["title/63-25",[59,31.454,142,24.684,253,19.86,702,27.628]],["name/63-25",[]],["text/63-25",[]],["component/63-25",[]],["title/63-26",[469,21.7,1165,28.018,2487,28.57,2488,29.009]],["name/63-26",[]],["text/63-26",[]],["component/63-26",[]],["title/63-27",[310,18.57,719,33.218,1165,24.774,1326,23.291,3472,30.393]],["name/63-27",[]],["text/63-27",[]],["component/63-27",[]],["title/63-28",[71,18.233,2487,25.262,2488,25.651,3472,30.393,5374,36.012]],["name/63-28",[]],["text/63-28",[]],["component/63-28",[]],["title/63-29",[2962,35.515,3594,38.592,5373,46.864]],["name/63-29",[]],["text/63-29",[]],["component/63-29",[]],["title/63-30",[2487,32.874,2488,33.38,4006,49.409]],["name/63-30",[]],["text/63-30",[]],["component/63-30",[]],["title/63-31",[609,45.802,5375,62.317]],["name/63-31",[]],["text/63-31",[]],["component/63-31",[]],["title/63-32",[2962,41.815,2968,43.477]],["name/63-32",[]],["text/63-32",[]],["component/63-32",[]],["title/63-33",[1224,46.973,2962,41.815]],["name/63-33",[]],["text/63-33",[]],["component/63-33",[]],["title/63-34",[525,32.712,2718,34.29,2962,35.515]],["name/63-34",[]],["text/63-34",[]],["component/63-34",[]],["title/63-35",[472,28.428,519,33.278,525,28.428,1035,28.289]],["name/63-35",[]],["text/63-35",[]],["component/63-35",[]],["title/63-36",[1165,32.24,1326,30.31,3472,39.552]],["name/63-36",[]],["text/63-36",[]],["component/63-36",[]],["title/63-37",[128,19.296,495,22.651,797,34.479,1165,24.774,3914,32.147]],["name/63-37",[]],["text/63-37",[]],["component/63-37",[]],["title/63-38",[71,16.341,353,19.156,2487,22.64,2488,22.989,3472,27.239,5374,32.275]],["name/63-38",[]],["text/63-38",[]],["component/63-38",[]],["title/63-39",[183,19.716,353,24.172,469,21.7,2488,29.009]],["name/63-39",[]],["text/63-39",[]],["component/63-39",[]],["title/63-40",[323,19.984,718,30.138,861,32.147,5376,37.967,5377,40.672]],["name/63-40",[]],["text/63-40",[]],["component/63-40",[]],["title/63-41",[701,45.487,2487,32.874,2488,33.38]],["name/63-41",[]],["text/63-41",[]],["component/63-41",[]],["title/63-42",[5378,75.757]],["name/63-42",[]],["text/63-42",[]],["component/63-42",[]],["title/63-43",[5379,75.757]],["name/63-43",[]],["text/63-43",[]],["component/63-43",[]],["title/63-44",[5380,75.757]],["name/63-44",[]],["text/63-44",[]],["component/63-44",[]],["title/63-45",[5381,83.973]],["name/63-45",[]],["text/63-45",[]],["component/63-45",[]],["title/63-46",[18,15.738,71,16.341,186,15.549,713,21.996,5371,27.977,5382,36.451]],["name/63-46",[]],["text/63-46",[]],["component/63-46",[]],["title/63-47",[18,15.738,71,16.341,186,15.549,713,21.996,5371,27.977,5383,36.451]],["name/63-47",[]],["text/63-47",[]],["component/63-47",[]],["title/63-48",[18,15.738,71,16.341,186,15.549,713,21.996,2486,34.738,5371,27.977]],["name/63-48",[]],["text/63-48",[]],["component/63-48",[]],["title/63-49",[1249,34.441,3914,49.256]],["name/63-49",[]],["text/63-49",[]],["component/63-49",[]],["title/63-50",[5384,83.973]],["name/63-50",[]],["text/63-50",[]],["component/63-50",[]],["title/63-51",[5385,83.973]],["name/63-51",[]],["text/63-51",[]],["component/63-51",[]],["title/63-52",[5386,75.757]],["name/63-52",[]],["text/63-52",[]],["component/63-52",[]],["title/63-53",[598,42.894,797,52.828]],["name/63-53",[]],["text/63-53",[]],["component/63-53",[]],["title/63-54",[5387,75.757]],["name/63-54",[]],["text/63-54",[]],["component/63-54",[]],["title/63",[2487,32.874,2488,33.38,2962,35.515]],["name/63",[2487,0.63,2488,0.64]],["text/63",[0,0.239,4,0.613,6,0.197,8,0.776,9,1.385,10,0.16,11,0.841,12,0.299,13,0.145,14,0.379,15,0.149,16,0.167,17,0.143,18,0.526,24,0.301,26,0.445,27,2.776,32,2.534,33,0.749,35,0.878,36,0.637,37,0.918,38,0.446,42,0.203,44,0.173,45,0.629,46,0.161,47,0.399,49,0.188,50,1.455,51,0.171,52,0.193,53,0.55,54,0.183,57,0.122,59,1.259,60,0.973,62,0.386,63,0.589,65,1.73,67,2.167,68,0.425,69,0.98,70,0.171,71,2.017,73,0.181,74,0.221,75,0.157,76,0.555,77,0.45,78,0.158,81,0.407,86,0.636,90,0.218,92,0.437,93,0.166,97,0.333,99,0.869,100,0.745,101,0.602,102,0.728,103,1.046,105,0.904,106,1.24,109,0.733,112,0.724,113,1.259,114,0.293,115,0.399,117,1.206,118,0.148,119,0.515,120,0.156,121,0.401,123,0.554,126,1.481,127,0.423,128,2.715,130,1.075,131,1.357,132,0.715,133,0.662,135,1.315,139,0.78,142,3.274,144,0.146,148,0.295,150,0.197,152,0.393,157,1.753,161,0.162,164,2.501,165,0.418,169,0.163,170,0.155,171,0.173,172,1.61,173,0.653,176,1.146,177,0.477,178,1.162,180,1.435,183,1.88,184,0.627,185,1.723,186,2.925,187,0.675,190,1.054,192,2.081,193,0.221,194,0.835,196,0.47,198,0.62,199,0.145,201,3.007,202,0.158,205,0.845,209,0.168,210,0.167,212,0.224,214,0.296,216,0.9,223,0.546,225,0.593,226,0.474,227,0.418,228,0.216,229,0.178,230,0.52,231,0.712,232,0.158,236,0.798,237,1.158,240,0.163,241,0.19,242,1.59,243,1.5,244,2.553,245,1.197,246,0.193,248,2.166,249,0.948,250,0.627,252,2.136,253,1.629,256,0.341,257,0.393,265,0.146,268,0.944,269,4.561,271,3.141,273,0.309,274,0.703,278,0.216,279,2.858,282,0.935,284,0.234,286,0.157,287,0.335,288,0.278,293,0.112,297,0.176,299,0.619,302,1.874,303,0.437,305,0.905,308,0.178,309,0.454,310,2.335,312,0.252,316,0.524,317,2.907,320,1.691,323,2.317,324,0.191,325,0.366,327,0.504,328,0.224,330,0.47,331,2.354,332,0.454,333,1.303,335,2.834,337,0.151,340,1.992,341,1.717,342,1.222,351,0.175,353,1.84,354,2.131,356,0.845,360,0.153,361,0.151,363,1.582,368,0.326,371,2.998,372,0.568,373,0.583,374,2.289,376,0.167,378,0.159,379,0.188,383,0.764,384,0.159,392,2.753,393,2.901,394,0.158,406,1.209,407,0.448,409,0.467,414,0.361,420,0.617,423,0.351,424,0.181,426,0.216,439,1.094,444,2.874,450,0.335,452,0.595,453,0.176,454,0.188,457,1.495,458,0.146,461,0.703,467,1.26,469,3.235,470,0.184,471,0.224,472,3.102,473,0.409,479,1.073,481,1.862,482,0.166,489,1.174,491,1.26,495,1.526,502,0.294,513,0.71,514,0.409,516,1.6,519,0.191,521,0.264,525,3.436,529,0.351,533,0.177,535,0.188,536,0.542,540,0.345,541,1.352,542,0.377,546,0.438,548,0.213,550,3.047,551,1.312,557,0.418,558,1.705,569,2.807,571,2.418,572,1.415,573,0.833,582,2.277,588,0.193,596,0.354,597,0.601,598,1.771,603,0.76,609,2.36,610,0.878,611,0.676,613,0.405,615,0.183,616,0.221,617,0.33,619,1.702,621,0.586,622,1.272,623,1.277,625,0.209,627,1.631,629,0.354,631,0.679,633,1.029,639,0.201,640,0.224,641,0.39,643,0.861,644,0.181,645,0.361,646,1.17,647,0.578,653,0.703,657,1.04,658,0.377,668,0.321,671,0.197,674,1.228,676,0.242,682,2.38,688,0.738,696,0.52,698,1.259,702,3.748,703,0.827,707,0.693,709,0.409,713,1.654,714,0.483,718,3.251,719,5.411,726,0.177,743,0.377,746,0.811,748,0.77,751,0.369,753,0.728,756,0.507,757,0.458,759,0.629,764,1.415,765,0.209,768,0.224,770,0.438,771,0.182,772,0.169,773,0.886,775,0.517,776,0.802,778,0.88,784,0.264,786,0.742,788,0.568,789,0.216,793,0.257,795,2.125,796,0.53,797,3.198,798,1.081,800,0.369,806,1.364,809,0.234,815,0.696,816,0.637,819,0.517,822,3.739,835,0.798,841,0.563,856,1,857,1.137,861,1.455,862,0.187,863,0.95,864,0.542,870,1.795,871,0.356,879,0.85,880,0.209,901,0.197,908,0.201,912,0.458,917,0.159,922,0.19,929,0.188,970,1.561,971,2.169,972,0.128,975,0.184,977,0.172,978,1.342,986,0.234,987,0.811,995,0.53,997,0.361,1010,0.191,1012,0.23,1020,0.76,1030,0.187,1035,2.153,1036,0.324,1037,0.77,1039,0.201,1056,0.573,1062,0.227,1064,0.209,1086,1.358,1095,0.246,1102,0.655,1107,0.383,1109,1.08,1112,1.057,1116,0.218,1128,2.188,1132,0.483,1137,0.221,1142,1.825,1165,4.766,1167,0.397,1170,0.234,1186,0.168,1191,0.811,1194,0.458,1198,1.171,1205,0.234,1216,0.427,1217,0.218,1224,1.809,1249,1.775,1252,0.184,1253,0.184,1254,0.935,1271,0.257,1323,1.453,1325,0.811,1326,0.569,1327,0.205,1335,0.517,1338,0.39,1340,0.187,1343,0.377,1344,0.216,1352,0.194,1364,0.23,1366,0.196,1367,0.209,1368,0.234,1380,1.122,1391,0.337,1394,0.953,1402,0.218,1421,0.234,1422,0.234,1423,0.234,1446,0.224,1450,2.327,1471,0.731,1493,0.216,1494,0.383,1495,1.171,1500,0.71,1503,0.242,1513,0.264,1516,0.483,1519,0.246,1520,0.39,1558,0.438,1559,0.742,1564,0.866,1567,0.19,1576,0.328,1602,4.904,1603,1.748,1613,2.181,1619,0.224,1645,2.164,1649,0.199,1656,1.897,1660,0.209,1687,0.413,1704,1.035,1708,0.534,1793,1.681,1898,0.465,1899,0.207,1901,0.197,1908,0.811,1943,0.644,1963,1.297,2038,0.211,2060,0.673,2082,0.517,2093,1.078,2103,0.409,2150,0.433,2156,0.628,2239,0.438,2246,0.812,2253,0.181,2327,2.278,2343,0.179,2394,0.216,2414,0.185,2422,0.238,2423,0.205,2451,0.182,2456,0.694,2460,0.242,2476,0.532,2486,0.252,2487,3.959,2488,4.614,2498,0.281,2512,0.213,2525,0.257,2618,0.272,2628,4.789,2705,0.209,2718,0.644,2724,0.23,2725,0.614,2726,0.234,2734,0.55,2758,0.812,2824,0.213,2827,0.809,2873,0.242,2885,0.238,2893,1.057,2917,2.092,2918,0.55,2953,0.242,2961,0.201,2962,5.466,2968,1,2969,4.771,2971,0.246,2989,0.234,2991,0.234,2995,1.413,2996,0.196,3004,3.085,3032,0.644,3141,0.203,3316,2.344,3344,0.418,3346,0.234,3347,0.483,3349,0.234,3355,1.455,3361,0.842,3363,0.246,3365,0.601,3369,1.338,3381,0.433,3420,0.221,3421,0.246,3429,0.264,3433,0.246,3436,0.438,3445,0.673,3463,0.264,3471,0.88,3472,1.226,3480,0.203,3481,0.246,3484,0.246,3489,0.71,3511,0.246,3519,0.438,3520,0.483,3545,1.137,3548,0.221,3565,0.614,3580,0.246,3592,0.264,3594,0.554,3612,0.264,3623,0.246,3628,0.483,3665,0.257,3668,0.76,3670,0.216,3671,0.88,3676,0.246,3701,0.211,3705,0.246,3712,0.264,3723,0.264,3726,0.993,3730,0.234,3744,0.438,3782,0.264,3783,0.224,3787,0.653,3808,0.246,3812,0.234,3834,0.246,3838,1.641,3886,0.927,3891,0.264,3893,0.264,3894,0.264,3898,0.264,3899,0.246,3900,0.264,3901,0.264,3902,1.719,3907,0.264,3909,0.517,3912,1.719,3914,5.329,3917,0.246,3976,0.76,3982,0.993,3988,0.264,3989,0.483,3990,0.71,3991,0.264,3992,1.433,3993,0.234,3994,0.264,3995,0.483,3996,0.993,3997,0.517,3998,0.264,3999,0.264,4000,0.264,4003,0.264,4004,0.264,4006,2.402,4008,0.264,4011,0.517,4016,4.715,4017,0.264,4047,0.483,4144,0.242,4146,1.218,4165,0.517,4166,0.578,4168,0.483,4188,0.409,4189,0.234,4190,0.517,4204,0.517,4205,0.517,4244,0.517,4245,0.517,4246,0.209,4300,1.032,4357,0.517,4362,0.483,4388,0.264,4439,0.264,4446,0.493,4519,0.257,4620,0.71,4676,0.264,4717,0.993,4770,1.863,4781,0.927,4914,0.238,4917,0.809,4923,0.246,5205,1.218,5229,0.264,5299,0.264,5302,0.264,5307,0.246,5344,0.264,5368,0.517,5369,4.152,5370,2.903,5371,1.413,5372,0.993,5373,4.996,5374,2.843,5375,3.501,5376,0.71,5377,0.517,5378,0.264,5379,0.264,5380,0.264,5382,0.264,5383,0.264,5386,0.264,5387,0.264,5388,0.293,5389,0.293,5390,0.293,5391,0.293,5392,0.293,5393,1.35,5394,0.573,5395,0.293,5396,1.589,5397,0.293,5398,0.293,5399,0.257,5400,0.843,5401,0.293,5402,0.293,5403,0.293,5404,0.293,5405,0.293,5406,0.293,5407,0.293,5408,0.293,5409,0.573,5410,0.573,5411,0.293,5412,0.573,5413,0.843,5414,0.573,5415,0.293,5416,0.293,5417,0.293,5418,0.293,5419,0.293,5420,0.293,5421,0.293,5422,0.573,5423,1.101,5424,0.293,5425,0.573,5426,0.573,5427,0.573,5428,0.293,5429,0.293,5430,1.819,5431,0.293,5432,0.293,5433,3.038,5434,0.843,5435,0.843,5436,0.573,5437,0.573,5438,0.293,5439,0.293,5440,0.293,5441,0.293,5442,0.293,5443,0.293,5444,0.293,5445,0.293,5446,1.35,5447,0.573,5448,0.843,5449,0.293,5450,0.293,5451,0.293,5452,0.293,5453,0.843,5454,0.293,5455,0.76,5456,1.589,5457,0.573,5458,1.101,5459,1.35,5460,0.293,5461,0.264,5462,0.573,5463,0.573,5464,0.293,5465,0.293,5466,0.293,5467,0.293,5468,0.293,5469,0.293,5470,0.293,5471,0.843,5472,0.293,5473,0.293,5474,0.293,5475,0.293,5476,0.573,5477,0.573,5478,0.573,5479,0.293,5480,0.293,5481,0.293,5482,0.293,5483,0.293,5484,0.293,5485,0.573,5486,3.038,5487,0.293,5488,0.843,5489,0.573,5490,1.589,5491,0.293,5492,0.293,5493,0.843,5494,0.843,5495,1.819,5496,0.843,5497,1.819,5498,0.573,5499,2.255,5500,0.293,5501,1.35,5502,0.293,5503,0.293,5504,0.843,5505,0.843,5506,0.843,5507,0.293,5508,0.293,5509,0.293,5510,0.573,5511,0.293,5512,0.843,5513,0.293,5514,0.843,5515,0.573,5516,0.843,5517,0.843,5518,0.293,5519,0.293,5520,0.293,5521,0.293,5522,0.573,5523,0.293,5524,0.293,5525,0.573,5526,0.293,5527,0.573,5528,0.573,5529,0.573,5530,0.843,5531,0.843,5532,0.293,5533,0.293,5534,0.843,5535,0.843,5536,0.293,5537,0.573,5538,0.573,5539,0.573,5540,0.293,5541,0.293,5542,0.293,5543,0.293,5544,0.843,5545,2.255,5546,1.35,5547,1.35,5548,0.293,5549,0.293,5550,0.293,5551,1.35,5552,1.101,5553,0.293,5554,0.843,5555,0.293,5556,0.293,5557,0.293,5558,0.843,5559,0.843,5560,0.843,5561,0.843,5562,0.293,5563,0.293,5564,0.573,5565,0.293,5566,0.293,5567,0.293,5568,0.573,5569,0.293,5570,0.293,5571,0.573,5572,0.293,5573,0.293,5574,0.293,5575,0.293,5576,0.293,5577,0.293,5578,0.293,5579,0.293,5580,0.293,5581,0.293,5582,1.35,5583,0.293,5584,1.101,5585,0.293,5586,0.293,5587,0.293,5588,0.293,5589,0.293,5590,0.293,5591,0.293,5592,0.293,5593,0.293,5594,0.293,5595,0.293,5596,1.433,5597,0.293,5598,0.573,5599,0.293,5600,0.293,5601,0.843,5602,0.293,5603,0.293,5604,0.293,5605,0.293,5606,0.293,5607,0.293,5608,0.293,5609,0.293,5610,0.281,5611,0.293,5612,0.293,5613,0.293,5614,0.293,5615,0.293,5616,0.293,5617,0.293,5618,0.293,5619,0.293,5620,0.293,5621,0.573,5622,0.843,5623,0.293,5624,0.293,5625,0.573,5626,0.573,5627,0.573,5628,0.293,5629,0.293,5630,0.264,5631,0.293,5632,0.293,5633,0.293,5634,0.293,5635,3.218,5636,0.573,5637,0.843,5638,1.35,5639,1.589,5640,0.843,5641,1.35,5642,0.573,5643,0.843,5644,1.101,5645,0.843,5646,1.35,5647,3.218,5648,1.101,5649,0.293,5650,0.573,5651,1.101,5652,0.573,5653,0.293,5654,0.272,5655,0.293,5656,0.843,5657,0.843,5658,0.843,5659,0.293,5660,0.293,5661,0.293,5662,0.293,5663,0.293,5664,0.293,5665,0.293,5666,0.293,5667,0.573,5668,0.293,5669,0.293,5670,0.293,5671,0.293,5672,0.293,5673,0.573,5674,0.293,5675,0.293,5676,0.293,5677,0.293,5678,0.293,5679,0.293,5680,0.293,5681,0.293,5682,0.293,5683,0.293,5684,0.293,5685,0.293,5686,0.293,5687,0.293,5688,0.293,5689,0.293,5690,0.293,5691,0.293,5692,0.573,5693,0.573,5694,0.293,5695,0.293,5696,0.293,5697,0.293,5698,0.293,5699,0.293,5700,0.293]],["component/63",[11,0.279,108,0.486]],["title/64-1",[59,36.194,356,24.295,972,25.622]],["name/64-1",[]],["text/64-1",[]],["component/64-1",[]],["title/64-2",[4068,64.221]],["name/64-2",[]],["text/64-2",[]],["component/64-2",[]],["title/64-3",[252,30.346,310,28.453]],["name/64-3",[]],["text/64-3",[]],["component/64-3",[]],["title/64-4",[4,31.382,310,28.453]],["name/64-4",[]],["text/64-4",[]],["component/64-4",[]],["title/64-5",[1128,46.973,2619,60.755]],["name/64-5",[]],["text/64-5",[]],["component/64-5",[]],["title/64-6",[458,34.441,2410,50.322]],["name/64-6",[]],["text/64-6",[]],["component/64-6",[]],["title/64-7",[251,29.8,252,22.399,356,21.114,972,22.267]],["name/64-7",[]],["text/64-7",[]],["component/64-7",[]],["title/64-8",[252,30.346,1391,40.601]],["name/64-8",[]],["text/64-8",[]],["component/64-8",[]],["title/64-9",[977,40.601,1391,40.601]],["name/64-9",[]],["text/64-9",[]],["component/64-9",[]],["title/64-10",[1056,46.973,1391,40.601]],["name/64-10",[]],["text/64-10",[]],["component/64-10",[]],["title/64-11",[361,30.186,1391,34.483,2440,48.48]],["name/64-11",[]],["text/64-11",[]],["component/64-11",[]],["title/64-12",[180,24.09,356,21.114,972,22.267,1391,29.968]],["name/64-12",[]],["text/64-12",[]],["component/64-12",[]],["title/64-13",[269,18.821,356,18.669,972,19.689,1366,30.138,5701,40.672]],["name/64-13",[]],["text/64-13",[]],["component/64-13",[]],["title/64-14",[356,18.669,428,31.823,972,19.689,1234,31.216,1391,26.498]],["name/64-14",[]],["text/64-14",[]],["component/64-14",[]],["title/64-15",[356,24.295,392,29.032,972,25.622]],["name/64-15",[]],["text/64-15",[]],["component/64-15",[]],["title/64-16",[4318,55.177,4425,52.828]],["name/64-16",[]],["text/64-16",[]],["component/64-16",[]],["title/64-17",[822,35.834,2440,57.081]],["name/64-17",[]],["text/64-17",[]],["component/64-17",[]],["title/64-18",[180,27.72,205,24.295,863,35.088]],["name/64-18",[]],["text/64-18",[]],["component/64-18",[]],["title/64-19",[184,39.302,972,30.168]],["name/64-19",[]],["text/64-19",[]],["component/64-19",[]],["title/64-20",[356,16.732,392,19.995,869,25.258,972,17.646,2723,34.738,3871,34.028]],["name/64-20",[]],["text/64-20",[]],["component/64-20",[]],["title/64-21",[305,22.6,356,21.114,972,22.267,5702,45.997]],["name/64-21",[]],["text/64-21",[]],["component/64-21",[]],["title/64-22",[302,32.097,374,35.397]],["name/64-22",[]],["text/64-22",[]],["component/64-22",[]],["title/64-23",[356,24.295,972,25.622,3695,43.228]],["name/64-23",[]],["text/64-23",[]],["component/64-23",[]],["title/64-24",[299,23.385,320,23.164,2441,40.727,2625,40.727]],["name/64-24",[]],["text/64-24",[]],["component/64-24",[]],["title/64-25",[356,21.114,383,28.86,972,22.267,5703,45.997]],["name/64-25",[]],["text/64-25",[]],["component/64-25",[]],["title/64-26",[71,18.233,310,18.57,356,18.669,383,25.519,972,19.689]],["name/64-26",[]],["text/64-26",[]],["component/64-26",[]],["title/64-27",[458,34.441,2881,54.337]],["name/64-27",[]],["text/64-27",[]],["component/64-27",[]],["title/64",[356,28.605,972,30.168]],["name/64",[356,0.466,972,0.491]],["text/64",[4,2.551,8,2.025,9,0.871,10,0.291,11,0.954,12,0.277,13,0.264,14,0.24,15,0.271,16,0.305,19,0.291,24,0.28,26,0.541,27,3.257,32,0.689,37,1.165,38,0.544,45,2.096,50,0.218,59,0.328,60,0.23,63,0.285,65,0.721,71,1.484,73,0.328,77,1.12,78,0.287,79,0.34,81,0.379,84,0.311,88,0.345,90,0.397,92,0.532,93,0.581,97,0.309,99,0.291,100,0.566,101,1.045,102,1.031,103,0.76,105,1.669,106,1.566,108,0.186,113,0.401,115,0.252,119,2.433,127,0.746,128,1.925,130,0.732,131,0.253,133,0.795,135,1.715,157,0.699,158,0.365,165,0.737,170,0.282,172,2.245,175,0.268,176,1.541,177,1.902,178,1.171,180,3.212,183,1.532,184,2.088,185,1.384,186,0.205,188,0.823,190,0.275,192,1.297,205,4.272,208,0.34,210,1.087,214,0.53,216,2.574,221,0.925,229,0.625,231,0.783,234,1.018,236,0.268,237,0.447,238,0.625,240,1.69,241,0.345,242,0.297,244,3.907,246,0.976,250,0.247,251,0.311,252,3.984,253,3.296,265,1.151,268,0.276,269,5.285,271,4.222,274,0.34,276,0.646,279,1.263,286,1.026,288,0.497,289,1.194,290,0.384,292,0.578,297,1.614,299,2.386,300,0.392,302,1.073,303,0.532,305,1.878,310,3.889,312,0.652,317,2.417,320,1.925,323,0.455,325,0.655,331,1.71,335,2.559,340,1.766,341,4.052,342,0.289,356,4.317,360,1.586,361,1.38,364,0.847,369,0.34,371,1.715,374,0.273,378,0.29,379,0.659,380,0.309,383,3.064,392,2.464,393,2.97,406,1.317,409,1.864,428,2.59,439,0.32,449,0.61,453,0.32,455,0.348,458,1.337,461,0.655,470,0.335,479,0.909,501,0.298,505,0.35,506,0.359,507,0.294,514,0.38,529,0.326,536,1.485,538,0.384,540,1.15,541,0.815,560,2.806,569,5.038,571,2.363,572,0.59,582,4.552,603,0.3,610,1.294,613,0.376,615,1.194,617,0.306,621,1.953,623,0.532,627,0.305,629,2.927,632,1,637,0.291,646,0.276,647,1.409,656,0.53,657,0.587,668,0.831,702,0.289,713,0.29,722,0.32,746,1.093,751,0.342,759,0.891,771,0.331,772,1.104,779,0.38,786,3.191,794,0.359,796,0.335,798,0.282,818,0.345,822,2.583,835,0.315,856,0.934,863,1.381,864,0.342,868,0.392,869,1.895,908,0.365,929,0.659,938,0.659,972,4.796,977,1.357,978,0.35,980,0.38,987,1.093,991,0.38,1004,0.333,1028,0.596,1030,0.655,1035,0.295,1036,2.398,1039,0.365,1044,0.925,1056,0.362,1084,0.392,1128,1.824,1134,0.308,1145,0.413,1154,0.359,1186,1.099,1187,0.365,1191,0.756,1196,0.407,1204,0.365,1212,0.376,1234,1.027,1249,3.886,1252,0.335,1253,0.335,1278,0.48,1326,0.53,1327,0.372,1338,0.362,1340,0.947,1352,1.267,1353,0.655,1354,0.402,1355,0.402,1364,0.419,1366,2.453,1367,0.38,1368,0.425,1380,0.376,1391,6.537,1394,1.349,1421,0.425,1422,0.425,1423,0.425,1450,1.895,1460,0.48,1471,1.251,1493,0.392,1511,0.425,1512,0.425,1514,0.448,1521,0.448,1522,0.376,1547,0.48,1559,0.359,1564,1.816,1576,2.099,1602,4.007,1645,0.827,1663,0.425,1702,1.609,1705,0.337,1712,1.526,1713,0.384,1846,1.037,1852,0.48,1901,0.359,1963,1.058,2040,0.376,2058,0.48,2103,0.38,2118,0.388,2161,0.992,2343,0.326,2394,0.756,2410,1.682,2426,1.496,2430,1.378,2439,1.551,2440,4.473,2441,5.312,2442,5.211,2443,1.551,2444,0.494,2445,2.815,2448,0.407,2499,0.419,2577,0.402,2619,0.468,2624,1.643,2625,5.543,2627,2.575,2705,0.38,2723,1.276,2724,0.807,2725,0.747,2727,1.339,2728,2.217,2730,1.68,2734,0.348,2735,0.848,2736,0.985,2758,0.893,2768,0.902,2776,1.425,2777,4.556,2787,0.468,2794,0.448,2881,0.419,2938,0.902,2946,4.068,2953,0.44,2973,0.48,2987,0.348,2994,0.48,2996,0.686,2997,0.425,3002,0.38,3117,0.819,3141,0.71,3362,0.48,3377,0.407,3384,1.507,3432,0.425,3452,0.864,3468,1.609,3642,0.784,3695,0.756,3702,0.925,3812,0.425,3814,1.047,3836,0.48,3871,1.25,3899,0.448,4034,0.407,4049,0.925,4068,1.461,4189,0.425,4303,0.848,4318,0.425,4425,2.051,4456,0.407,4526,3.31,4616,0.784,4915,0.819,5118,0.448,5376,0.448,5399,0.468,5701,0.48,5702,0.48,5703,2.735,5704,0.532,5705,5.563,5706,0.532,5707,0.532,5708,1.026,5709,0.532,5710,5.991,5711,1.911,5712,1.911,5713,0.532,5714,0.532,5715,1.026,5716,1.911,5717,1.026,5718,0.532,5719,0.532,5720,0.532,5721,2.419,5722,2.419,5723,2.083,5724,0.532,5725,0.532,5726,1.911,5727,1.026,5728,0.532,5729,1.026,5730,0.532,5731,1.026,5732,0.532,5733,0.48,5734,1.026,5735,0.532,5736,1.026,5737,0.532,5738,0.925,5739,0.532,5740,0.532,5741,1.026,5742,1.026,5743,0.532,5744,0.532,5745,1.484,5746,1.484,5747,0.532,5748,0.532,5749,1.026,5750,1.026,5751,0.532,5752,0.532,5753,0.532,5754,0.532,5755,0.532,5756,1.026,5757,0.532,5758,0.532,5759,0.532,5760,0.532,5761,0.532,5762,0.532,5763,0.532,5764,0.532,5765,0.532,5766,0.532,5767,0.532,5768,0.532,5769,0.532,5770,0.532,5771,0.532,5772,0.532,5773,1.339,5774,0.532,5775,0.532,5776,0.532,5777,1.026,5778,0.532,5779,1.026,5780,0.532,5781,1.026,5782,0.532,5783,1.026,5784,0.532,5785,0.532,5786,0.532,5787,0.532,5788,3.031,5789,0.532,5790,1.484,5791,1.911,5792,0.532,5793,0.532,5794,0.532,5795,0.532,5796,0.532,5797,0.532,5798,1.484,5799,1.484,5800,0.532,5801,0.532,5802,0.532,5803,0.532,5804,0.532,5805,3.669,5806,1.911,5807,0.532,5808,1.484,5809,0.532,5810,0.532,5811,1.026,5812,0.532,5813,0.532,5814,0.532,5815,0.532,5816,0.532,5817,0.532,5818,0.532,5819,0.532,5820,0.532,5821,1.026,5822,0.532,5823,2.682,5824,0.532,5825,0.532,5826,0.532,5827,0.532,5828,0.532,5829,0.532,5830,0.532,5831,1.026,5832,0.532,5833,0.532,5834,1.911,5835,0.532,5836,0.532,5837,0.532,5838,0.532,5839,0.532,5840,0.532,5841,1.026,5842,1.484,5843,0.532,5844,0.532,5845,1.026,5846,0.532,5847,0.532,5848,0.532,5849,1.026,5850,0.532,5851,0.532,5852,0.532,5853,0.532,5854,0.532,5855,0.532,5856,0.532,5857,1.484,5858,2.309,5859,0.532,5860,0.532,5861,0.532,5862,1.026,5863,0.532,5864,0.532,5865,0.532,5866,0.532,5867,0.532,5868,0.532,5869,0.532,5870,0.532,5871,0.532,5872,0.532,5873,0.532,5874,0.532,5875,0.532,5876,0.532,5877,0.532,5878,1.026,5879,1.026,5880,1.026,5881,1.026,5882,1.026,5883,0.532,5884,0.532,5885,0.532,5886,0.532,5887,0.532,5888,0.532,5889,0.532,5890,0.532,5891,0.532,5892,0.532,5893,0.532,5894,0.532,5895,0.532,5896,0.532,5897,1.911,5898,0.532,5899,0.532,5900,0.532,5901,1.026,5902,0.532,5903,0.532,5904,0.532,5905,1.484,5906,0.532,5907,0.532,5908,0.532,5909,0.532,5910,0.532,5911,0.532,5912,2.49,5913,0.468,5914,0.48,5915,0.532,5916,0.532,5917,0.532,5918,0.532,5919,0.532,5920,0.511,5921,0.532,5922,0.532,5923,0.532,5924,0.532,5925,0.532,5926,0.532]],["component/64",[11,0.279,108,0.486]],["title/65-1",[11,13.888,40,30.711]],["name/65-1",[]],["text/65-1",[]],["component/65-1",[]],["title/65-2",[11,13.888,39,39.302]],["name/65-2",[]],["text/65-2",[]],["component/65-2",[]],["title/65-3",[2150,63.392]],["name/65-3",[]],["text/65-3",[]],["component/65-3",[]],["title/65-4",[237,25.547,310,24.166,359,32.552]],["name/65-4",[]],["text/65-4",[]],["component/65-4",[]],["title/65-5",[243,32.203,359,38.326]],["name/65-5",[]],["text/65-5",[]],["component/65-5",[]],["title/65-6",[237,25.547,359,32.552,407,31.225]],["name/65-6",[]],["text/65-6",[]],["component/65-6",[]],["title/65-7",[6,56.611]],["name/65-7",[]],["text/65-7",[]],["component/65-7",[]],["title/65-8",[185,34.589]],["name/65-8",[]],["text/65-8",[]],["component/65-8",[]],["title/65-9",[81,25.551,253,26.906]],["name/65-9",[]],["text/65-9",[]],["component/65-9",[]],["title/65",[237,30.08,359,38.326]],["name/65",[237,0.49,359,0.624]],["text/65",[0,2.513,4,0.836,8,0.786,9,1.482,10,1.007,11,1.06,12,0.959,13,0.914,14,2.373,15,0.936,16,1.053,27,3.73,32,0.855,37,1.64,39,1.047,50,0.752,57,0.769,59,1.136,65,1.58,67,0.867,75,0.989,77,1.084,81,1.615,89,1.136,92,0.955,98,2.396,109,3.317,115,0.873,119,3.11,121,1.547,128,1.869,130,1.031,133,1.354,141,4.779,142,0.891,164,0.844,166,1.231,169,1.026,170,3.523,176,2.68,180,2.491,182,0.921,185,0.758,188,4.993,192,3.075,197,1.184,204,1.159,205,3.334,216,0.911,217,6.511,218,1.621,219,1.327,221,1.574,225,3.862,231,2.304,236,1.634,237,4.716,243,2.806,244,3.239,246,1.211,253,2.053,268,0.955,269,4.915,271,2.676,273,0.993,286,1.746,288,0.891,289,2.033,299,0.844,301,2.076,302,1.511,307,2.435,310,2.48,312,1.429,315,0.864,323,0.816,327,2.612,330,2.435,331,2.276,339,2.006,341,2.669,342,0.998,347,0.998,354,2.442,356,3.167,358,4.886,359,6.634,364,2.337,393,0.842,406,1.597,407,0.98,414,1.159,420,0.842,447,0.918,469,1.384,483,0.951,484,1.795,489,0.959,501,1.032,507,1.795,516,1.108,520,1.016,528,1.85,550,0.955,558,2.314,569,3.57,571,2.77,572,2.511,573,2.694,582,3.984,600,2.295,611,0.921,615,1.151,621,0.98,624,1.088,637,1.007,643,0.998,644,1.136,646,1.687,647,0.967,653,1.175,656,0.951,657,1.053,753,1.754,786,1.012,816,1.88,857,1.151,863,1.101,870,1.159,907,1.313,957,0.971,978,4.726,1036,1.841,1086,0.94,1129,1.128,1172,1.211,1183,3.489,1186,1.059,1188,2.211,1204,2.996,1222,2.425,1249,3.582,1351,1.661,1352,2.896,1353,1.175,1354,2.455,1355,1.39,1357,1.55,1391,1.911,1411,6.352,1420,5.766,1451,1.661,1471,2.367,1511,1.471,1512,1.471,1568,1.151,1576,2.498,1712,2.597,1713,2.343,1870,2.934,1898,4.281,2039,1.221,2040,4.249,2118,1.341,2331,4.604,2349,1.661,2376,1.471,2450,1.287,2456,2.712,2716,1.448,2758,3.172,2781,1.619,2968,1.159,3002,1.313,3140,1.471,3145,4.808,3420,3.297,3482,4.385,3530,1.471,3704,2.396,3744,1.408,3814,1.299,3839,2.934,4131,1.661,4616,1.408,4905,1.55,5056,1.661,5340,2.739,5343,1.661,5358,1.661,5914,2.934,5927,1.841,5928,1.841,5929,3.252,5930,3.252,5931,3.252,5932,3.252,5933,1.841,5934,1.841,5935,1.841,5936,3.252,5937,3.252,5938,1.841,5939,1.841,5940,1.841,5941,6.02,5942,6.02,5943,1.841,5944,1.841,5945,1.841,5946,1.841,5947,1.841,5948,6.649,5949,1.841,5950,3.252,5951,3.252,5952,1.841,5953,1.841,5954,1.841,5955,1.841,5956,1.841,5957,1.841,5958,1.841,5959,1.841,5960,1.841,5961,1.841,5962,3.252,5963,3.252,5964,3.252,5965,1.841,5966,1.661,5967,1.841,5968,1.841,5969,1.841,5970,1.841,5971,1.841,5972,1.841,5973,1.841,5974,1.841,5975,1.841,5976,1.841,5977,1.841,5978,1.841,5979,1.841]],["component/65",[11,0.279,108,0.486]],["title/66-1",[251,34.29,656,30.31,688,32.088]],["name/66-1",[]],["text/66-1",[]],["component/66-1",[]],["title/66-2",[128,25.111,656,30.31,688,32.088]],["name/66-2",[]],["text/66-2",[]],["component/66-2",[]],["title/66-3",[656,30.31,688,32.088,3594,38.592]],["name/66-3",[]],["text/66-3",[]],["component/66-3",[]],["title/66-4",[113,22.964,299,26.909,656,30.31]],["name/66-4",[]],["text/66-4",[]],["component/66-4",[]],["title/66-5",[356,28.605,972,30.168]],["name/66-5",[]],["text/66-5",[]],["component/66-5",[]],["title/66-6",[4068,64.221]],["name/66-6",[]],["text/66-6",[]],["component/66-6",[]],["title/66-7",[1613,53.991]],["name/66-7",[]],["text/66-7",[]],["component/66-7",[]],["title/66-8",[139,33.93,302,32.097]],["name/66-8",[]],["text/66-8",[]],["component/66-8",[]],["title/66-9",[353,32.749,656,35.686]],["name/66-9",[]],["text/66-9",[]],["component/66-9",[]],["title/66-10",[185,24.166,353,27.814,656,30.31]],["name/66-10",[]],["text/66-10",[]],["component/66-10",[]],["title/66-11",[353,24.172,516,30.677,656,26.341,1660,36.356]],["name/66-11",[]],["text/66-11",[]],["component/66-11",[]],["title/66-12",[178,25.622,656,30.31,2718,34.29]],["name/66-12",[]],["text/66-12",[]],["component/66-12",[]],["title/66-13",[353,24.172,688,40.819,2718,29.8]],["name/66-13",[]],["text/66-13",[]],["component/66-13",[]],["title/66-14",[226,28.714,495,25.617,525,28.428,2718,29.8]],["name/66-14",[]],["text/66-14",[]],["component/66-14",[]],["title/66-15",[226,28.714,393,23.311,481,31.253,2718,29.8]],["name/66-15",[]],["text/66-15",[]],["component/66-15",[]],["title/66",[656,43.383]],["name/66",[656,1.052]],["text/66",[4,0.419,8,0.394,9,0.789,10,0.505,11,1.79,12,1.273,13,0.458,14,0.415,15,0.469,16,0.528,24,1.618,25,0.633,26,0.487,27,3.461,28,0.812,32,2.148,33,2.307,35,0.835,37,0.466,38,0.917,41,0.512,47,0.821,50,0.999,65,1.496,67,0.815,71,3.079,75,0.93,76,0.466,77,1.026,81,0.341,84,1.012,93,1.384,97,0.536,99,0.505,100,0.51,101,0.505,102,0.498,103,0.473,105,0.458,106,1.14,109,0.426,111,0.549,113,1.428,119,1.44,128,1.561,130,0.775,131,0.824,133,0.721,135,0.749,139,0.85,148,0.475,154,2.593,157,1.151,161,0.512,164,0.794,165,1.214,167,0.706,169,0.965,170,1.295,172,1.632,173,0.447,178,1.068,181,1.061,183,0.945,184,0.525,185,2.858,186,0.666,190,1.263,192,1.78,194,0.909,201,1.273,205,0.382,209,0.531,216,1.524,221,1.184,226,3.763,227,0.458,231,1.29,236,1.228,237,2.363,241,2.994,242,3.026,243,2.53,244,3.352,250,1.932,252,0.405,253,2.965,256,0.549,268,0.898,269,4.959,271,3.291,273,0.498,274,0.589,279,1.45,281,1.78,285,0.528,287,0.539,292,0.52,295,0.68,297,0.555,299,1.673,300,1.275,302,2.148,303,1.268,305,0.409,309,0.498,312,1.074,317,2.896,320,1.399,331,3.196,335,2.547,337,0.475,340,1.09,341,2.553,347,0.5,351,0.552,353,4.093,354,1.132,356,1.914,359,0.512,360,1.279,361,0.475,363,0.512,364,0.409,371,1.572,373,0.489,374,0.473,378,0.502,383,2.064,384,0.502,392,1.21,393,3.385,394,1.661,406,1.792,407,0.491,409,0.96,420,1.668,421,0.902,439,0.555,450,1.012,453,2.502,455,1.13,457,1.148,461,0.589,469,1.552,479,0.439,481,1.887,489,0.902,491,2.88,496,0.536,507,0.51,516,4.175,520,0.956,522,0.726,525,5.389,529,0.566,532,1.965,536,0.593,538,0.665,540,0.555,541,0.507,546,1.324,551,0.593,558,0.917,560,0.706,569,4.088,571,2.649,572,3.99,573,2.851,582,3.553,603,0.975,609,0.612,610,1.179,611,0.462,615,0.577,617,0.531,619,0.517,621,1.301,624,1.445,631,0.569,639,1.188,643,0.5,644,0.569,645,1.09,647,0.909,649,0.522,656,5.533,657,3.663,658,0.607,668,0.517,688,5.514,691,0.737,703,1.061,708,0.763,713,1.676,726,0.559,748,0.645,751,1.113,752,1.13,753,0.498,759,1.14,770,0.706,773,4.245,777,0.737,786,1.692,798,1.295,806,2.78,816,0.534,823,0.68,827,0.593,835,0.546,841,1.157,856,0.581,857,1.528,871,0.573,901,0.622,929,0.593,957,0.913,971,2.459,972,2.37,975,0.581,977,1.437,997,0.581,1030,0.589,1035,0.512,1036,1.384,1055,0.737,1075,2.058,1086,0.471,1102,0.549,1107,0.617,1110,2.961,1112,0.536,1129,1.061,1142,2.113,1154,1.167,1198,0.68,1215,0.672,1217,0.688,1224,1.662,1241,0.777,1249,2.074,1252,0.581,1253,0.581,1326,0.894,1327,0.645,1338,0.628,1366,1.157,1391,0.542,1397,0.706,1420,0.633,1437,0.833,1450,1.082,1471,0.938,1505,0.68,1558,2.355,1559,1.167,1576,0.99,1602,1.9,1613,2.345,1619,1.324,1645,1.363,1647,0.737,1660,2.196,1687,0.665,1704,1.752,1793,1.823,1945,1.743,1963,1.234,1965,1.383,2018,3.29,2039,0.612,2040,0.651,2085,0.665,2087,0.777,2161,0.617,2333,0.622,2343,0.566,2423,1.21,2426,1.583,2439,4.095,2442,2.549,2451,1.518,2456,1.258,2487,2.33,2563,0.726,2624,0.793,2705,0.658,2718,4.87,2734,1.13,2737,0.645,2738,0.833,2758,0.555,2794,1.458,2824,0.672,2879,0.812,2909,0.763,2968,0.581,2987,0.602,3000,1.677,3004,0.706,3009,0.833,3275,3.752,3278,1.562,3279,0.833,3280,4.065,3281,0.833,3282,0.833,3283,0.833,3284,1.562,3291,0.833,3292,0.833,3293,1.562,3304,2.205,3305,1.562,3361,0.706,3365,2.196,3384,1.13,3427,2.059,3455,3.999,3479,1.324,3480,0.639,3519,0.706,3523,1.275,3548,1.307,3594,1.139,3670,3.064,3676,0.777,3695,0.68,3722,0.833,3725,0.777,3727,1.383,3730,0.737,3745,0.833,3787,0.716,3841,0.833,3914,1.743,3958,1.562,3972,4.549,4068,2.355,4094,0.737,4189,0.737,4231,0.726,4247,0.833,4303,0.763,4359,0.833,4362,0.777,4370,0.737,4449,0.833,4470,0.737,4810,0.777,5118,0.777,5307,1.458,5373,0.737,5374,1.383,5455,0.833,5461,0.833,5596,0.833,5630,0.833,5705,3.752,5721,0.833,5722,0.833,5723,0.833,5733,0.833,5738,0.833,5773,0.833,5980,0.923,5981,1.731,5982,0.923,5983,0.923,5984,0.923,5985,0.923,5986,3.647,5987,0.923,5988,0.923,5989,0.923,5990,0.923,5991,0.923,5992,0.923,5993,0.923,5994,0.923,5995,1.731,5996,0.923,5997,1.731,5998,1.731,5999,0.923,6000,0.923,6001,0.923,6002,0.923,6003,4.622,6004,2.445,6005,0.923,6006,0.923,6007,1.731,6008,1.731,6009,0.923,6010,1.731,6011,1.731,6012,1.731,6013,1.731,6014,1.731,6015,2.445,6016,1.731,6017,1.731,6018,1.731,6019,1.731,6020,1.731,6021,0.923,6022,0.923,6023,0.923,6024,0.923,6025,0.923,6026,0.923,6027,0.923,6028,0.923,6029,1.731,6030,1.731,6031,0.923,6032,1.731,6033,4.159,6034,4.159,6035,1.731,6036,3.647,6037,3.647,6038,3.647,6039,3.079,6040,2.445,6041,0.923,6042,0.923,6043,0.923,6044,0.923,6045,1.731,6046,0.923,6047,0.923,6048,0.923,6049,1.662,6050,0.923,6051,0.923,6052,0.923,6053,0.923,6054,0.923,6055,0.923,6056,0.923,6057,0.923,6058,0.923,6059,0.923,6060,0.923,6061,0.923,6062,1.047,6063,1.047,6064,0.923,6065,0.923,6066,1.731,6067,1.731,6068,0.923,6069,3.647,6070,1.731,6071,0.923,6072,0.923,6073,1.731,6074,0.923,6075,0.923,6076,0.923,6077,0.923,6078,0.923,6079,0.923,6080,0.923,6081,0.923,6082,0.923,6083,0.923,6084,0.923,6085,0.923,6086,0.923,6087,0.923,6088,0.923,6089,0.923,6090,0.923,6091,0.923,6092,0.923,6093,0.923,6094,0.923,6095,2.445,6096,0.923]],["component/66",[11,0.279,108,0.486]],["title/67-1",[0,35.057]],["name/67-1",[]],["text/67-1",[]],["component/67-1",[]],["title/67-2",[1,69.076,2,66.332]],["name/67-2",[]],["text/67-2",[]],["component/67-2",[]],["title/67-3",[3,57.081,4,31.382]],["name/67-3",[]],["text/67-3",[]],["component/67-3",[]],["title/67-4",[4,31.382,5,52.828]],["name/67-4",[]],["text/67-4",[]],["component/67-4",[]],["title/67",[6,56.611]],["name/67",[7,1.29]],["text/67",[0,2.839,3,6.775,4,5.665,5,5.202,8,4.709,11,2.533,12,5.375,13,3.378,15,2.288,17,3.329,18,1.753,19,3.72,21,2.776,22,2.708,23,5.433,24,3.573,25,3.088,26,2.374,27,1.583,28,3.958,29,3.489,30,3.279,31,4.901,32,2.091,33,3.774,34,5.642,35,2.171,36,2.602,37,2.27,38,2.385,39,5.199,40,4.588,41,2.497,42,3.116,43,5.341,45,3.171,46,2.473,48,5.095,50,3.351,51,2.63,52,2.96,53,2.937,54,2.813,55,2.852,56,3.209,57,1.879,58,4.06,59,2.776,60,1.943,61,2.984,62,3.034,64,3.79,65,2.187,68,2.27,69,2.776,70,3.975,71,1.82,72,2.084,73,4.196,74,3.397,75,3.652,76,4.135,77,1.5,78,2.428,79,5.233,80,3.54,81,1.665,82,3.79,83,4.5,84,2.63,85,3.79,86,3.397,87,3.595,88,2.915,89,2.776,90,3.356,91,3.489,92,2.335,93,2.547,94,3.595,95,3.177,96,2.602,97,2.616,98,8.48,99,2.461,100,2.485,101,2.461,102,2.428,103,2.306,104,4.5,105,2.235,106,2.098,107,4.5,192,1.926,527,2.915,653,2.873,674,2.708,2423,3.146,6097,4.179]],["component/67",[11,0.279,108,0.486]],["title/68",[11,10.251,18,19.86,34,29.316,109,23.537]],["name/68",[110,2.036]],["text/68",[0,3.624,8,3.705,11,2.432,18,4.513,22,6.433,34,4.991,48,4.84,57,3.624,60,3.747,71,4.324,76,4.378,92,4.503,111,5.161,112,5.71,113,4.185,114,4.43,115,4.115,116,5.464,117,5.131,118,5.393,119,4.06,120,4.62,121,4.13,122,4.913]],["component/68",[11,0.279,108,0.486]],["title/69-1",[11,13.888,118,34.841]],["name/69-1",[]],["text/69-1",[]],["component/69-1",[]],["title/69-2",[81,18.859,123,33.538,124,37.143,125,45.997]],["name/69-2",[]],["text/69-2",[]],["component/69-2",[]],["title/69-3",[36,39.932,67,32.527]],["name/69-3",[]],["text/69-3",[]],["component/69-3",[]],["title/69",[]],["name/69",[72,0.943]],["text/69",[0,2.337,8,2.39,11,2.511,18,3.11,36,3.237,40,2.489,41,4.431,50,2.288,57,2.337,60,2.417,65,2.72,67,4.779,71,2.264,72,4.7,77,1.866,81,3.443,84,3.272,96,3.237,113,4.494,118,4.695,119,2.619,120,2.98,121,2.664,122,3.169,124,5.817,126,2.73,127,2.813,128,3.418,129,4.408,130,2.531,131,2.664,132,3.594,133,2.331,134,3.914,135,4.03,136,5.589,137,3.389,138,4.213,139,2.75,140,3.291,141,2.711,142,2.711,143,4.472,144,4.659,145,4.227,146,5.051,147,7.023,148,2.881,149,4.715,150,5.383,151,2.941,152,3.841,153,5.051,154,4.715,155,5.051,156,4.472,157,2.636,158,3.841,159,3.349,160,4.715,161,3.106,162,5.051,163,3.477,164,2.568,165,2.781,166,3.743,167,4.282,168,3.683,169,3.122,170,2.967,171,3.31,172,2.967,173,2.711,174,4.472,175,2.813,176,2.846,177,3.169,178,3.487,179,3.389]],["component/69",[11,0.279,108,0.486]],["title/70-1",[135,25.4,136,30.562,221,28.403]],["name/70-1",[]],["text/70-1",[]],["component/70-1",[]],["title/70-2",[77,16.997,130,16.16,225,19.032,293,19.435]],["name/70-2",[]],["text/70-2",[]],["component/70-2",[]],["title/70-3",[77,16.997,130,16.16,204,32.091,227,25.326]],["name/70-3",[]],["text/70-3",[]],["component/70-3",[]],["title/70-4",[77,19.558,81,21.701,130,18.595]],["name/70-4",[]],["text/70-4",[]],["component/70-4",[]],["title/70-5",[138,30.954,142,28.403,178,25.622]],["name/70-5",[]],["text/70-5",[]],["component/70-5",[]],["title/70",[]],["name/70",[294,2.036]],["text/70",[0,1.462,8,1.494,11,2.277,14,1.576,18,3.109,27,2.458,37,1.766,38,1.855,44,2.07,45,1.632,57,1.462,60,1.511,65,2.718,70,2.046,71,1.416,72,1.622,77,3.487,78,1.889,81,2.952,84,2.046,106,2.608,114,1.787,118,2.822,119,1.638,120,1.863,121,1.666,122,1.982,128,2.991,129,1.438,130,2.766,132,2.518,133,3.633,134,6.827,135,3.778,136,4.546,138,3.687,140,2.058,141,3.383,142,4.505,144,1.752,176,1.78,178,3.052,180,1.654,181,2.146,185,1.442,188,3.877,191,5.61,196,1.952,199,4.334,200,2.991,201,2.915,202,3.018,204,5.492,206,4.604,214,5.046,221,2.709,225,2.979,227,5.039,230,2.16,232,1.889,234,2.402,236,2.811,244,3.744,252,1.538,253,1.364,265,1.746,269,1.462,271,2.488,282,5.527,285,2.003,286,1.88,292,1.972,293,3.547,295,2.58,296,2.949,297,3.366,298,4.123,299,1.606,300,2.58,301,7.119,302,1.627,303,4.141,304,2.797,305,3.538,306,4.04,307,3.12,308,2.133,309,1.889,310,2.305,311,4.469,312,1.538,313,5.833,314,2.949,315,1.643,316,4.976,317,2.257,318,2.251,319,3.874,320,1.591,321,2.285,322,2.402,323,1.552,324,2.285,325,2.235,326,2.949,327,2.094,328,2.678,329,2.402,330,3.12,331,1.511,332,1.889,333,3.234,334,2.797,335,3.079,336,2.949,337,1.801,338,2.797,339,3.452,340,2.495,341,1.773,342,1.897,343,2.497,344,3.079,345,2.58,346,3.159,347,1.897,348,2.797]],["component/70",[11,0.279,108,0.486]],["title/71-1",[136,35.984,138,36.445]],["name/71-1",[]],["text/71-1",[]],["component/71-1",[]],["title/71-2",[136,30.562,138,30.954,180,27.72]],["name/71-2",[]],["text/71-2",[]],["component/71-2",[]],["title/71-3",[136,35.984,138,36.445]],["name/71-3",[]],["text/71-3",[]],["component/71-3",[]],["title/71-4",[181,42.341,182,34.573]],["name/71-4",[]],["text/71-4",[]],["component/71-4",[]],["title/71-5",[183,19.716,184,29.009,185,21.002,186,19.621]],["name/71-5",[]],["text/71-5",[]],["component/71-5",[]],["title/71-6",[19,27.886,138,26.901,187,31.253,188,28.289]],["name/71-6",[]],["text/71-6",[]],["component/71-6",[]],["title/71",[]],["name/71",[189,2.036]],["text/71",[8,1.508,9,1.611,11,1.133,14,1.591,18,1.377,19,3.083,27,3.286,35,2.719,37,1.782,38,1.873,44,3.332,45,1.648,50,3.582,57,1.475,60,1.526,77,2.675,81,2.601,109,1.631,111,2.101,114,2.877,115,3.333,117,2.089,118,1.782,119,1.653,120,1.881,121,2.682,122,2,126,1.723,128,1.513,129,2.889,131,3.345,132,1.591,133,1.471,135,3.044,136,4.18,138,6.069,140,5.491,141,4.928,142,5.318,157,1.664,170,2.987,179,2.139,180,1.67,181,2.166,182,1.769,183,2.719,184,2.011,185,3.305,186,4.227,187,3.455,188,5.648,190,2.912,191,4.521,192,1.513,193,2.668,194,1.857,195,3.534,196,3.143,197,6.303,198,1.99,199,1.755,200,4.686,201,2.936,202,3.793,203,2.604,204,5.518,205,1.463,206,1.865,207,3.188,208,3.598,209,5.041,210,3.207,211,2.74,212,2.703,213,2.447,214,1.826,215,2.077,216,3.971,217,4.488,218,2.81,219,4.062,220,4.521,221,1.711,222,2.52,223,2.289,224,2.703,225,1.319,226,3.174,227,2.8,228,2.604,229,2.153,230,2.18,231,1.865,232,1.906,233,3.188,234,2.425,235,2.703,236,2.832,237,1.539,238,2.153,239,5.085,240,1.97,241,2.289,242,1.97,243,1.648,244,1.422,245,2.325,246,2.325,247,3.188,248,2.52,249,1.841,250,1.642,251,2.066,252,2.476,253,1.377,254,3.188,255,3.188,256,2.101,257,2.425,258,2.703,259,2.976,260,3.188,261,2.976,262,3.188,263,2.823,264,3.188,265,1.762,266,3.188,267,2.976,268,1.833,269,1.475,270,2.823,271,1.571,272,2.054,273,1.906,274,2.256,275,2.976,276,2.224,277,2.92,278,2.604,279,1.664,280,4.019,281,2.043,282,2.447,283,3.188,284,2.823,285,2.021,286,1.898,287,3.295,288,1.711,289,2.209,290,2.547,291,2.547,292,1.99]],["component/71",[11,0.279,108,0.486]],["title/72-1",[11,13.888,129,28.378]],["name/72-1",[]],["text/72-1",[]],["component/72-1",[]],["title/72-2",[77,19.558,129,24.102,131,27.91]],["name/72-2",[]],["text/72-2",[]],["component/72-2",[]],["title/72-3",[11,11.796,129,24.102,132,26.405]],["name/72-3",[]],["text/72-3",[]],["component/72-3",[]],["title/72-4",[129,28.378,138,36.445]],["name/72-4",[]],["text/72-4",[]],["component/72-4",[]],["title/72",[]],["name/72",[349,2.036]],["text/72",[0,2.238,8,2.288,11,2.444,17,4.869,18,2.088,27,2.722,35,2.586,50,2.191,57,2.238,60,2.314,70,3.133,72,4.207,77,4.052,113,3.03,118,2.704,120,2.853,121,2.55,122,3.034,127,4.564,128,3.888,129,5.199,130,2.879,131,4.322,132,4.089,133,3.223,134,3.747,135,2.321,136,4.032,138,4.084,140,4.55,141,3.747,142,2.595,178,2.341,186,2.063,196,2.989,199,2.663,202,2.892,206,2.828,209,4.451,214,2.77,221,3.747,225,2.001,232,2.892,237,2.334,243,3.609,268,2.781,292,3.019,293,3.792,305,3.431,309,4.9,310,2.208,316,3.682,317,3.122,331,2.314,339,3.307,341,2.715,342,2.905,343,3.823,350,3.526,351,3.206,352,3.286,353,2.542,354,2.483,355,4.515,356,3.205,357,5.218,358,3.646,359,4.295,360,2.804,361,2.758]],["component/72",[11,0.279,108,0.486]],["title/73-1",[77,19.558,129,24.102,339,36.194]],["name/73-1",[]],["text/73-1",[]],["component/73-1",[]],["title/73-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/73-2",[]],["text/73-2",[]],["component/73-2",[]],["title/73-3",[130,21.893,132,31.09]],["name/73-3",[]],["text/73-3",[]],["component/73-3",[]],["title/73",[]],["name/73",[310,0.463,362,1.125]],["text/73",[0,2.987,8,2.055,11,2.128,14,2.167,27,3.324,35,3.452,50,1.968,57,2.01,60,2.079,71,1.947,72,3.314,76,2.429,77,3.151,81,4.053,117,4.23,120,2.563,121,4.062,122,2.726,126,5.49,129,4.502,130,2.706,132,3.22,135,3.098,136,2.508,182,2.41,183,3.302,186,1.853,192,2.061,196,2.685,198,4.03,199,3.554,201,4.448,205,3.536,206,2.541,225,3.187,232,2.597,244,4.779,249,4.923,251,2.814,252,4.437,253,1.876,257,4.909,279,4.02,285,2.754,292,2.712,293,1.836,302,2.237,303,3.712,309,2.597,310,4.359,312,2.115,316,4.496,317,3.813,339,5.267,350,3.167,363,2.672,364,2.134,365,5.272,366,4.535,367,4.182,368,2.74,369,6.033,370,2.769,371,2.458,372,3.246,373,2.552,374,4.375,375,4.954,376,2.754,377,3.548,378,2.621,379,3.096,380,4.159,381,3.846,382,3.434,383,2.726,384,2.621,385,3.434,386,4.815]],["component/73",[11,0.279,108,0.486]],["title/74-1",[77,19.558,129,24.102,293,22.364]],["name/74-1",[]],["text/74-1",[]],["component/74-1",[]],["title/74-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/74-2",[]],["text/74-2",[]],["component/74-2",[]],["title/74-3",[130,21.893,132,31.09]],["name/74-3",[]],["text/74-3",[]],["component/74-3",[]],["title/74",[]],["name/74",[387,2.036]],["text/74",[0,2.444,8,1.582,11,1.657,14,1.668,21,2.287,27,3.156,33,2.057,50,1.515,57,1.548,60,1.6,71,1.499,72,2.712,77,2.748,120,1.973,121,4.751,122,2.098,126,5.52,127,1.863,129,3.919,130,3.459,132,2.635,135,2.535,136,1.931,182,1.855,183,3.47,186,1.427,192,1.587,196,2.067,198,5.625,199,2.908,201,3.78,205,3.716,206,1.956,225,2.708,232,2,243,4.827,244,4.731,249,5.983,251,2.167,252,4.191,253,1.444,279,5.476,285,2.12,289,2.317,292,2.088,293,4.378,302,1.722,303,3.037,309,3.914,312,1.629,316,3.921,317,3.325,350,2.438,353,2.776,354,4.156,356,3.413,357,6.431,364,1.643,365,4.314,366,3.711,367,3.422,368,2.109,370,2.131,371,1.892,372,3.947,373,1.964,374,5.801,375,6.605,376,2.12,377,2.731,378,2.018,379,2.383,380,3.403,384,2.018,385,2.643,388,4.677,389,2.961,390,2.961,391,6.546,392,3.591,393,1.695,394,2,395,2.961,396,3.122,397,3.122,398,3.344,399,3.344,400,3.344,401,2.731,402,2.835,403,3.122,404,2.835]],["component/74",[11,0.279,108,0.486]],["title/75-1",[129,24.102,133,24.426,209,33.734]],["name/75-1",[]],["text/75-1",[]],["component/75-1",[]],["title/75",[]],["name/75",[405,2.036]],["text/75",[0,3.251,8,3.324,11,1.566,27,2.739,45,3.63,57,3.251,60,3.362,109,4.61,120,4.145,121,3.705,122,4.408,129,4.103,130,3.165,133,3.242,136,4.057,138,4.109,140,5.87,141,3.77,185,3.208,186,4.243,196,4.342,209,6.687,221,3.77,236,3.913,249,4.057,258,8.432,286,4.182,292,4.386,333,4.502,371,3.975,392,3.854,406,3.825,407,6.189,408,7.788,409,5.541,410,7.026,411,7.788,412,7.788]],["component/75",[11,0.279,108,0.486]],["title/76-1",[77,19.558,129,24.102,358,39.895]],["name/76-1",[]],["text/76-1",[]],["component/76-1",[]],["title/76-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/76-2",[]],["text/76-2",[]],["component/76-2",[]],["title/76-3",[130,21.893,132,31.09]],["name/76-3",[]],["text/76-3",[]],["component/76-3",[]],["title/76",[]],["name/76",[413,2.036]],["text/76",[0,2.712,8,1.808,11,2.026,14,1.907,27,3.359,50,1.731,57,1.768,60,1.829,71,1.713,72,3.008,76,2.137,77,2.633,120,2.254,121,4.544,122,2.398,126,5.524,129,4.31,130,2.504,132,2.923,135,2.812,136,2.207,182,2.12,183,3.693,186,1.63,188,4.383,192,1.813,196,2.362,198,3.658,199,3.226,201,4.115,205,4.174,206,2.235,225,2.949,232,2.285,237,4.569,243,4.453,244,4.86,249,5.639,251,2.476,252,4.428,253,1.65,279,4.941,285,2.423,286,2.275,289,2.648,292,2.386,293,1.615,302,1.968,303,3.369,309,3.504,312,1.861,316,4.214,317,3.573,350,2.786,354,4.102,358,5.372,359,6.158,363,2.35,364,1.878,365,4.786,366,4.117,367,3.796,368,2.41,370,2.436,371,2.162,372,4.379,373,2.245,374,5.377,375,5.47,376,2.423,377,3.121,378,2.306,379,2.724,380,5.148,384,2.306,385,3.021,392,2.096,401,3.121,402,3.24,404,3.24,414,2.666,415,4.236,416,4.236,417,4.236,418,4.236]],["component/76",[11,0.279,108,0.486]],["title/77-1",[129,24.102,138,30.954,142,28.403]],["name/77-1",[]],["text/77-1",[]],["component/77-1",[]],["title/77",[]],["name/77",[142,0.545,419,1.125]],["text/77",[8,2.699,10,3.459,11,1.271,27,3.496,57,2.64,60,2.73,76,3.19,77,3.313,81,3.217,109,2.919,120,3.366,121,3.008,122,3.579,128,2.707,129,4.083,130,2.004,135,2.738,136,5.576,138,5.244,140,6.292,141,5.752,142,5.433,180,2.988,183,3.363,188,6.227,196,3.526,199,4.32,200,3.381,208,5.551,209,5,218,3.153,221,4.21,224,4.836,225,3.246,238,5.297,252,3.82,263,5.051,292,3.561,301,4.037,305,3.855,312,2.778,313,4.228,316,3.008,317,2.551,322,5.966,330,3.526,341,3.202,342,3.427,343,4.509,407,3.366,420,2.891,421,3.294,422,5.705,423,3.876,424,5.365,425,7.845,426,4.659]],["component/77",[11,0.279,108,0.486]],["title/78-1",[17,28.713,77,19.558,129,24.102]],["name/78-1",[]],["text/78-1",[]],["component/78-1",[]],["title/78-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/78-2",[]],["text/78-2",[]],["component/78-2",[]],["title/78-3",[130,21.893,132,31.09]],["name/78-3",[]],["text/78-3",[]],["component/78-3",[]],["title/78",[]],["name/78",[427,2.036]],["text/78",[0,2.666,8,1.768,11,1.901,14,1.865,17,5.397,21,2.556,27,3.326,50,1.693,57,1.73,60,1.789,71,1.676,72,2.957,77,2.918,120,2.205,121,4.952,122,2.345,126,5.672,129,4.104,130,2.469,132,2.874,135,2.765,136,2.158,182,2.074,183,3.657,186,1.594,192,1.773,196,2.31,198,4.93,199,3.172,201,4.059,205,3.916,206,2.186,225,2.908,232,2.235,243,3.632,244,4.437,249,6.137,251,2.422,252,4.389,253,1.614,279,5.303,285,2.37,289,2.59,292,2.333,293,1.579,302,1.925,303,3.313,309,4.203,312,1.82,316,4.165,317,3.532,336,3.489,350,2.725,353,3.027,354,3.608,356,2.644,364,1.837,365,4.705,366,4.047,367,3.732,368,2.357,370,2.382,371,2.115,372,4.305,373,2.195,374,5.771,375,6.917,376,2.37,377,3.053,378,2.256,379,2.664,380,3.712,384,2.256,385,2.954,388,5.101,392,3.16,393,2.919,395,3.31,397,3.489,401,3.053,402,3.169,403,3.489,404,3.169,428,2.925,429,5.378,430,3.738,431,3.489,432,3.738,433,3.738]],["component/78",[11,0.279,108,0.486]],["title/79-1",[77,19.558,129,24.102,357,39.552]],["name/79-1",[]],["text/79-1",[]],["component/79-1",[]],["title/79-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/79-2",[]],["text/79-2",[]],["component/79-2",[]],["title/79-3",[130,21.893,132,31.09]],["name/79-3",[]],["text/79-3",[]],["component/79-3",[]],["title/79",[]],["name/79",[434,2.036]],["text/79",[0,3.167,8,2.225,11,2.189,14,2.346,27,3.145,50,2.13,57,2.176,60,2.251,71,2.108,72,3.513,76,2.629,77,3.273,120,2.775,121,4.254,122,2.951,126,5.615,129,4.617,130,2.834,132,3.414,135,3.284,136,2.716,182,2.609,183,3.458,186,2.006,192,2.231,196,2.907,198,4.272,199,3.768,201,4.658,205,3.703,206,2.751,225,3.338,232,2.812,244,4.724,249,5.115,251,3.047,252,4.584,253,2.031,279,4.21,285,2.982,292,2.936,293,1.987,302,2.422,303,3.935,309,2.812,312,2.29,316,4.671,317,3.961,350,3.429,357,7.576,363,2.893,364,2.311,365,5.589,366,4.808,367,4.433,368,2.966,370,2.998,371,2.661,372,3.515,373,2.762,374,4.582,375,5.252,376,2.982,377,3.841,378,2.838,379,3.352,380,4.409,384,2.838,385,3.717,435,5.213,436,5.213]],["component/79",[11,0.279,108,0.486]],["title/80-1",[11,10.251,77,16.997,129,20.946,131,24.255]],["name/80-1",[]],["text/80-1",[]],["component/80-1",[]],["title/80-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/80-2",[]],["text/80-2",[]],["component/80-2",[]],["title/80-3",[130,21.893,132,31.09]],["name/80-3",[]],["text/80-3",[]],["component/80-3",[]],["title/80",[]],["name/80",[437,2.036]],["text/80",[0,1.13,8,1.155,11,2.223,14,2.04,17,1.325,18,2.965,19,1.48,24,1.422,27,3.075,32,2.106,40,1.203,41,1.502,47,1.283,50,1.106,51,2.649,57,1.13,60,1.168,71,3.709,77,2.745,98,1.994,109,1.249,113,4.204,120,1.44,121,1.288,122,1.532,126,2.21,128,1.158,129,3.916,130,2.906,131,4.922,132,3.935,136,1.41,138,1.428,142,1.31,144,2.268,148,2.332,151,2.381,164,2.078,173,1.31,175,4.137,182,2.268,183,3.184,186,4.474,192,4.843,196,1.509,197,1.74,199,1.344,200,2.423,205,3.152,206,2.391,218,1.349,219,3.265,221,1.31,224,2.07,225,2.552,226,1.524,232,1.46,244,3.313,249,4.555,252,3.004,253,2.277,256,1.609,268,1.404,279,4.872,292,1.524,293,1.032,306,2.62,307,1.509,310,1.115,312,1.189,316,3.621,317,3.07,320,1.23,327,2.71,330,1.509,333,2.62,337,2.332,350,1.78,352,1.659,353,2.771,354,4.974,355,2.279,363,1.502,367,1.582,370,1.556,372,1.825,374,5.504,375,4.734,383,2.565,385,1.93,388,2.162,392,1.339,395,2.162,401,1.994,402,2.07,404,2.07,423,1.659,438,2.129,439,1.628,440,2.442,441,3.62,442,2.38,443,2.442,444,2.679,445,2.442,446,4.168,447,1.349,448,1.692,449,1.609,450,1.582,451,2.279,452,1.91,453,1.628,454,1.74,455,1.766,456,2.442,457,5.047,458,2.259,459,3.816,460,2.442,461,1.728,462,2.442,463,2.442,464,2.442,465,2.279,466,2.442,467,4.734,468,5.461,469,4.057,470,2.852,471,3.466,472,4.591,473,3.231,474,3.339,475,2.442,476,3.975,477,2.442,478,5.229,479,2.781,480,2.442,481,1.659,482,1.532,483,1.398,484,3.775,485,2.442,486,2.162,487,2.442,488,2.442,489,1.41,490,2.442,491,3.138,492,4.088,493,2.279,494,2.442]],["component/80",[11,0.279,108,0.486]],["title/81-1",[0,28.838,22,41.561]],["name/81-1",[]],["text/81-1",[]],["component/81-1",[]],["title/81",[]],["name/81",[43,1.19]],["text/81",[0,3.687,8,3.77,11,2.348,18,3.44,35,4.261,43,6.825,48,6.026,50,3.609,57,3.687,60,3.813,111,5.251,112,7.109,113,4.23,115,5.123,116,6.802,120,4.701,121,4.202,122,4.999,196,4.925,265,4.404,301,5.638]],["component/81",[11,0.279,108,0.486]],["title/82-1",[11,10.251,113,19.957,115,24.172,116,32.091]],["name/82-1",[]],["text/82-1",[]],["component/82-1",[]],["title/82-2",[11,10.251,113,19.957,116,32.091,495,25.617]],["name/82-2",[]],["text/82-2",[]],["component/82-2",[]],["title/82-3",[170,36.603,496,40.15]],["name/82-3",[]],["text/82-3",[]],["component/82-3",[]],["title/82-4",[113,19.957,116,32.091,164,23.385,497,32.782]],["name/82-4",[]],["text/82-4",[]],["component/82-4",[]],["title/82-5",[0,24.493,71,23.727,113,22.964]],["name/82-5",[]],["text/82-5",[]],["component/82-5",[]],["title/82-6",[27,17.931,116,32.091,447,25.422,497,32.782]],["name/82-6",[]],["text/82-6",[]],["component/82-6",[]],["title/82-7",[337,35.541,498,52.828]],["name/82-7",[]],["text/82-7",[]],["component/82-7",[]],["title/82",[]],["name/82",[499,2.036]],["text/82",[0,2.906,4,1.054,6,1.564,8,2.228,11,2.132,14,4.177,17,3.028,18,2.958,22,1.396,27,1.399,29,3.084,30,2.898,32,1.848,33,1.288,34,1.334,35,2.985,36,1.342,37,1.17,43,3.051,45,1.854,46,2.869,47,2.933,49,1.492,50,0.948,57,0.969,60,2.254,67,1.093,71,3.284,81,1.471,92,2.064,93,1.314,95,1.638,97,1.349,98,1.71,99,2.176,100,2.196,101,2.176,102,2.146,103,2.038,105,1.976,106,1.854,108,0.811,111,1.38,113,4.151,114,2.665,115,3.85,116,6.856,118,1.17,119,2.442,120,1.235,121,1.104,122,2.252,126,1.132,127,1.166,128,0.993,129,2.145,131,3.863,132,1.79,135,1.005,164,2.838,165,1.153,171,1.372,179,1.405,182,1.991,186,0.893,187,1.422,192,1.703,199,4.255,200,3.721,202,2.816,203,1.71,206,4.721,210,2.263,211,1.799,216,1.969,217,1.481,218,1.157,227,1.153,234,1.592,244,2.49,249,2.72,250,1.078,252,1.019,256,1.38,269,3.736,271,2.321,272,2.312,285,1.327,286,2.136,288,1.926,293,0.885,299,1.064,306,2.3,307,1.294,308,1.414,312,1.748,315,1.867,316,5.182,317,2.808,321,1.515,323,2.314,331,3.005,333,3.018,335,1.023,337,3.581,340,1.774,341,2.014,347,1.257,351,2.379,352,4.978,354,1.075,356,0.961,360,1.214,364,1.763,366,1.471,370,3.558,383,2.252,393,2.829,420,1.819,421,2.072,438,1.825,447,1.157,449,1.38,452,5.732,453,1.396,455,1.515,476,2.705,479,1.104,495,4.496,496,2.312,497,5.967,500,6.961,501,3.467,502,2.675,503,4.462,504,2.321,505,1.526,506,4.171,507,1.281,508,2.321,509,2.837,510,1.854,511,1.592,512,1.954,513,3.35,514,1.655,515,1.655,516,1.396,517,2.321,518,1.71,519,1.515,520,2.196,521,2.094,522,1.825,523,3.357,524,4.284,525,1.294,526,1.775,527,1.503,528,2.263,529,2.438,530,2.228,531,2.094,532,1.481,533,1.405,534,2.321,535,2.558,536,1.492,537,2.321,538,1.672,539,2.321,540,2.393,541,2.186,542,1.526,543,1.578,544,1.854,545,2.228,546,1.775,547,1.954,548,2.898,549,1.854,550,1.204,551,1.492,552,1.854,553,1.655,554,2.321,555,2.321,556,1.854,557,1.691,558,1.23,559,2.321,560,1.775,561,2.041,562,3.679,563,4.71,564,2.094,565,2.094,566,2.094,567,2.094,568,2.094,569,1.246,570,2.094,571,2.743,572,3.002,573,1.432,574,2.094,575,2.094,576,1.752,577,1.752,578,3.589,579,3.589,580,2.094,581,2.094,582,1.969,583,2.094,584,1.954,585,2.094,586,2.321,587,1.854]],["component/82",[11,0.279,108,0.486]],["title/83-1",[43,34.29,48,32.712,112,38.592]],["name/83-1",[]],["text/83-1",[]],["component/83-1",[]],["title/83-2",[588,55.237]],["name/83-2",[]],["text/83-2",[]],["component/83-2",[]],["title/83-3",[133,28.76,589,48.285]],["name/83-3",[]],["text/83-3",[]],["component/83-3",[]],["title/83-4",[11,11.796,130,18.595,131,27.91]],["name/83-4",[]],["text/83-4",[]],["component/83-4",[]],["title/83-5",[337,35.541,498,52.828]],["name/83-5",[]],["text/83-5",[]],["component/83-5",[]],["title/83",[]],["name/83",[590,2.036]],["text/83",[0,4.03,8,1.194,9,1.274,11,2.386,13,1.389,14,2.096,18,3.019,27,3.269,32,1.299,35,2.887,36,2.692,40,1.243,43,2.722,46,3.289,47,1.326,48,5.382,49,1.798,50,1.143,57,1.167,60,1.207,69,3.692,71,3.76,72,1.295,77,2.959,81,2.581,93,1.583,102,1.508,103,2.386,105,2.313,106,2.171,109,2.15,113,4.092,114,2.377,115,1.326,116,1.76,119,1.308,120,1.488,121,1.33,122,1.583,126,2.918,129,3.439,130,2.813,131,5.156,135,2.016,139,1.374,148,3.079,151,3.144,157,1.317,164,2.136,165,1.389,169,1.559,171,1.653,173,1.354,180,1.321,182,1.4,186,1.076,187,1.714,197,1.798,199,3.851,202,2.512,205,1.158,206,4.416,208,2.973,209,1.608,214,1.445,216,1.384,218,2.322,225,1.044,229,2.837,232,1.508,249,1.457,251,1.634,252,3.066,256,1.663,279,2.818,287,2.722,302,1.299,306,4.034,310,1.152,312,2.629,316,5.07,317,1.879,321,1.825,330,1.559,331,2.01,335,2.637,337,2.396,340,2.077,352,2.855,354,3.59,360,1.463,363,1.552,364,2.653,366,1.772,367,1.634,370,2.678,374,4.764,392,1.384,406,1.374,407,1.488,420,2.129,421,1.457,423,2.855,444,2.753,447,3.48,448,1.748,449,1.663,452,4.926,454,2.994,469,1.19,472,2.597,476,4.069,479,3.32,489,1.457,495,5.252,501,2.61,502,1.433,503,1.537,507,1.544,518,2.06,522,5.49,523,1.798,524,1.936,526,2.139,542,3.063,548,2.037,549,2.234,552,2.234,588,1.839,589,3.255,591,4.976,592,1.936,593,1.529,594,2.168,595,1.936,596,2.873,597,1.994,598,2.892,599,2.973,600,3.287,601,3.848,603,1.575,604,1.772,605,2.234,606,3.516,608,2.355,609,1.854,610,1.349,611,1.4,612,1.994,613,1.974,614,2.355,615,1.748,616,2.111,617,1.608,618,2.404,619,1.567,620,2.139,621,1.488,622,3.255,623,1.451,624,2.753,625,4.267,626,2.355,627,1.599,628,2.355,629,1.725,630,1.76,631,1.725,632,1.885,633,1.811,634,1.725,6098,2.523,6099,2.523,6100,2.46]],["component/83",[11,0.279,108,0.486]],["title/84-1",[192,21.823,331,22.01,598,31.661,698,31.454]],["name/84-1",[]],["text/84-1",[]],["component/84-1",[]],["title/84-2",[130,14.289,495,22.651,620,34.479,699,35.463,700,37.967]],["name/84-2",[]],["text/84-2",[]],["component/84-2",[]],["title/84-3",[11,9.064,113,17.646,323,19.984,394,24.318,516,27.125]],["name/84-3",[]],["text/84-3",[]],["component/84-3",[]],["title/84-4",[130,18.595,186,22.577,478,44.869]],["name/84-4",[]],["text/84-4",[]],["component/84-4",[]],["title/84-5",[51,40.373,52,45.438]],["name/84-5",[]],["text/84-5",[]],["component/84-5",[]],["title/84-6",[52,33.538,495,25.617,609,33.807,701,39.531]],["name/84-6",[]],["text/84-6",[]],["component/84-6",[]],["title/84-7",[65,28.505,93,33.208,633,38.003]],["name/84-7",[]],["text/84-7",[]],["component/84-7",[]],["title/84-8",[186,26.583,454,44.413]],["name/84-8",[]],["text/84-8",[]],["component/84-8",[]],["title/84-9",[52,38.592,113,22.964,139,28.818]],["name/84-9",[]],["text/84-9",[]],["component/84-9",[]],["title/84",[11,9.064,51,26.35,52,29.655,479,21.447,503,24.774]],["name/84",[51,0.658,52,0.74]],["text/84",[0,2.446,4,0.473,5,0.796,8,1.159,11,1.694,14,1.53,15,0.984,17,1.329,18,0.405,19,1.485,22,0.626,23,0.831,24,0.546,25,1.328,27,3.356,32,2.336,33,0.577,34,0.598,35,1.31,37,0.976,38,1.439,42,0.72,43,2.34,44,0.615,45,0.485,46,1.492,48,1.895,50,2.233,51,3.827,52,7.631,57,1.672,60,0.449,65,0.941,66,0.796,67,0.912,70,0.608,75,0.559,76,1.369,77,0.645,82,0.876,88,0.674,92,0.54,93,0.589,97,0.605,99,0.569,100,2.509,101,0.569,102,0.561,103,0.533,105,1.688,106,1.585,109,3.52,113,4.024,114,0.988,115,1.611,117,2.009,121,0.495,124,2.917,126,1.657,127,1.364,128,1.945,130,1.269,131,0.495,132,0.468,133,1.415,135,2.177,137,0.63,139,3.745,144,0.969,150,0.701,157,0.49,159,0.622,163,0.646,164,2.306,170,0.551,173,0.504,177,1.924,178,0.454,179,2.424,180,2.147,182,2.516,183,1.314,185,1.118,186,4.342,187,0.638,190,0.537,192,3.051,194,0.546,199,1.349,200,1.817,201,1.008,206,2.883,212,0.796,214,1.756,215,0.611,216,0.515,218,0.965,220,1.245,231,0.549,237,0.843,238,2.07,240,0.58,241,1.759,243,0.902,249,3.569,250,0.899,252,1.193,253,1.057,256,1.151,265,1.354,268,1.763,269,0.434,271,1.207,273,0.561,279,0.49,280,0.742,286,1.458,287,1.131,288,0.504,297,1.633,301,0.664,307,1.079,309,0.561,310,0.797,312,3.01,316,3.514,317,2.028,321,0.679,323,1.507,330,0.58,331,1.467,332,0.561,333,1.119,335,1.764,337,0.996,340,1.211,341,0.527,342,0.564,347,0.564,351,3.504,353,1.287,354,3.73,360,2.377,363,2.521,364,2.014,373,0.551,374,0.992,378,1.478,383,0.589,392,0.515,394,0.561,409,0.577,414,1.709,420,1.554,421,1.771,424,1.194,439,0.626,447,2.724,449,1.151,453,1.165,454,2.921,458,0.519,467,1.34,469,3.034,470,0.655,472,4.882,473,1.936,478,6.159,479,1.617,481,1.664,489,1.414,491,1.34,495,5.042,496,2.641,502,1.391,503,2.763,507,1.069,516,4.721,518,0.766,519,0.679,520,1.069,522,2.136,523,4.584,524,1.34,532,0.664,541,1.492,542,0.684,543,1.846,544,0.831,558,0.551,572,0.598,593,1.059,595,1.88,596,1.675,597,1.38,598,2.486,599,2.17,609,2.655,610,0.502,611,0.521,612,0.742,613,0.734,617,1.113,620,4.756,621,1.03,622,0.727,624,2.009,625,3.24,631,1.675,633,1.254,634,0.642,638,0.75,646,1.004,655,0.876,658,2.236,666,0.796,668,1.905,681,1.38,686,0.707,688,0.569,698,0.642,699,4.892,700,6.608,701,0.807,702,1.471,703,0.638,704,0.876,705,0.999,706,0.915,707,1.218,708,1.6,709,1.936,710,0.86,711,1.48,712,1.38,713,1.054,714,0.876,715,1.04,716,1.746,717,6.548,718,1.294,719,2.504,720,5.464,721,2.715,722,1.165,723,1.04,724,4.004,725,4.004,726,1.172,727,3.399,728,4.004,729,0.999,730,1.04,731,1.04,732,1.04,733,1.04,734,1.04,735,4.544,736,4.004,737,1.04,738,1.04,739,1.546,740,1.04,741,0.742,742,1.04,743,0.684,744,2.715,745,1.04,746,0.766,747,2.715,748,0.727,749,1.04,750,2.715,751,0.669,752,0.679,753,0.561,754,1.04,755,0.938,756,0.626,757,1.546,758,0.876,759,0.902,760,0.938,761,1.936,762,1.04,763,1.746,764,1.113,765,1.38,766,1.04,767,1.236,768,0.796,769,1.04,770,0.796,771,0.646,772,0.601,773,0.58,774,0.766,775,0.938,776,0.758,777,3.629,778,0.831,779,1.38,780,1.936,781,1.04,782,1.936,783,1.04,784,0.938,785,0.807,786,1.868,787,1.746,788,1.305,789,2,790,2.715,791,1.461,792,2.715,793,0.915,794,1.83,795,4.016,796,0.655,797,1.48,798,0.551,799,4.544,800,1.746,801,0.938,802,0.915,803,0.831,804,1.04,805,1.746,806,1.294,807,1.04,808,1.04,809,0.831,810,0.938,811,0.75,812,2.449,813,1.04,814,1.04,815,0.86,816,0.601,817,0.938,818,0.674,819,1.746,820,1.04,821,0.915,822,1.004,823,0.766,824,1.63,825,1.04,826,1.443,827,0.669,828,1.04,829,1.04,830,3.399,831,1.04,832,1.04,833,1.04,834,1.936,835,0.615,836,1.04,837,0.831,838,1.04,839,0.938,840,0.938,841,0.695,842,1.294,843,1.936,844,1.04,845,1.04,846,1.04,847,1.936,848,1.04,849,1.04,850,1.04,851,1.04,852,1.04,853,1.746,854,1.746,855,1.04,856,0.655,857,0.65,858,1.04,859,1.38,860,1.936,861,0.742,862,0.664,863,1.158,864,0.669,865,4.601,866,1.04,867,0.876,868,0.766,869,0.65,870,0.655,871,0.646,872,1.04,873,1.04,874,1.746,875,1.04,876,2.449,877,1.04,878,1.04,879,0.655,880,0.742,881,0.766,882,0.938,883,1.04,884,1.04,885,1.04,886,1.04,887,0.742,888,1.936,889,1.04,890,1.04,891,1.04,892,1.04,893,2.715,894,1.04,895,1.04,896,1.04,897,1.04,898,1.04,899,1.04,900,1.04]],["component/84",[11,0.279,108,0.486]],["title/85-1",[596,42.614,635,69.076]],["name/85-1",[]],["text/85-1",[]],["component/85-1",[]],["title/85-2",[495,42.191]],["name/85-2",[]],["text/85-2",[]],["component/85-2",[]],["title/85-3",[71,33.961]],["name/85-3",[]],["text/85-3",[]],["component/85-3",[]],["title/85-4",[444,49.639]],["name/85-4",[]],["text/85-4",[]],["component/85-4",[]],["title/85-5",[56,59.878]],["name/85-5",[]],["text/85-5",[]],["component/85-5",[]],["title/85",[0,24.493,11,11.796,18,22.852]],["name/85",[636,2.036]],["text/85",[0,2.793,11,2.465,13,1.63,18,2.606,22,1.974,27,3.697,32,1.525,34,1.887,35,2.562,36,3.07,39,4.374,40,3.754,42,3.677,43,3.104,45,3.936,47,1.556,48,3.73,50,1.341,54,2.051,55,2.08,56,5.482,57,3.772,63,2.839,67,2.501,69,3.276,71,2.148,77,1.094,81,2.474,84,1.918,89,2.024,109,3.549,111,1.951,115,1.556,119,3.129,126,2.59,127,2.668,131,2.526,135,4.288,136,2.766,143,2.621,144,2.658,145,2.477,151,4.997,157,2.501,164,2.436,165,1.63,168,2.158,175,1.649,178,2.319,186,1.263,191,2.11,192,2.273,194,3.514,196,1.83,209,3.846,214,1.695,218,1.636,221,1.589,231,2.802,237,2.312,244,1.32,249,1.709,250,1.525,253,1.278,265,2.648,268,1.702,273,2.865,279,3.62,302,2.468,312,3.377,315,3.608,323,2.965,354,3.098,374,2.721,376,1.877,392,3.31,393,1.5,420,1.5,444,3.139,447,2.648,450,1.918,461,2.094,482,3.787,483,1.695,484,1.812,495,1.649,496,1.907,502,1.681,503,1.803,507,1.812,515,2.34,520,1.812,523,2.11,541,1.803,550,1.702,569,1.762,592,3.677,593,2.904,596,4.127,604,4.872,613,4.722,623,1.702,624,3.954,625,4.77,629,2.024,637,2.904,638,3.827,639,2.251,640,2.509,641,2.231,642,2.763,643,2.878,644,3.276,645,3.342,646,1.702,647,1.724,648,3.281,649,1.857,650,2.11,651,2.011,652,2.763,653,2.094,654,2.418,655,2.763,656,2.744,657,3.037,658,3.493,659,4.472,660,2.763,661,2.509,662,3.281,663,4.791,664,2.96,665,2.581,666,2.509,667,2.509,668,4.308,669,3.749,670,2.581,671,2.212,672,4.598,673,2.477,674,1.974,675,3.281,676,2.711,677,2.763,678,2.763,679,2.39,680,3.281,681,2.34,682,2.194,683,2.34,684,3.281,685,4.671,686,2.231,687,2.509,688,1.795,689,2.621,690,2.418,691,2.621,692,2.96,693,2.158,694,2.96,695,2.96,696,2.024,697,2.581]],["component/85",[11,0.279,108,0.486]],["title/86-1",[887,59.878]],["name/86-1",[]],["text/86-1",[]],["component/86-1",[]],["title/86-2",[901,56.611]],["name/86-2",[]],["text/86-2",[]],["component/86-2",[]],["title/86-3",[127,34.706,592,47.83]],["name/86-3",[]],["text/86-3",[]],["component/86-3",[]],["title/86-4",[81,25.551,133,28.76]],["name/86-4",[]],["text/86-4",[]],["component/86-4",[]],["title/86-5",[902,70.719]],["name/86-5",[]],["text/86-5",[]],["component/86-5",[]],["title/86",[11,10.251,40,22.669,48,28.428,56,36.356]],["name/86",[56,0.802,774,0.829]],["text/86",[9,1.245,10,2.497,11,2.359,14,1.229,15,1.388,17,1.336,18,3.725,27,3.787,31,1.968,32,2.122,35,1.317,40,1.214,47,1.295,48,3.281,50,1.866,53,1.782,56,5.898,57,1.14,60,1.179,63,1.46,71,1.847,77,1.961,81,2.543,89,1.685,92,1.417,96,2.639,106,2.129,109,1.261,113,1.787,114,1.394,115,2.789,116,1.719,118,1.377,121,1.299,126,2.226,127,4.411,130,1.865,133,1.901,139,2.243,141,2.848,143,2.181,144,1.367,163,1.696,165,1.356,170,1.447,180,1.29,182,2.285,186,2.944,192,1.169,196,1.523,209,1.57,210,1.554,214,3.04,215,1.605,225,1.019,229,1.663,231,2.409,237,1.988,244,1.837,249,2.378,250,1.269,252,3.021,253,1.778,268,1.417,269,5.169,271,1.214,272,2.654,273,1.473,279,3.602,281,4.422,293,1.041,299,1.253,302,3.195,307,1.523,312,3.857,317,2.373,318,1.756,323,1.21,330,1.523,333,1.579,335,2.592,340,2.036,364,1.21,368,1.554,376,1.562,380,1.587,382,1.947,407,1.453,409,1.515,420,1.249,421,1.423,447,1.362,453,1.643,479,2.172,482,4.33,495,1.372,502,2.34,503,1.501,506,3.078,520,2.521,523,2.936,543,1.857,558,1.447,582,1.351,589,1.909,592,5.297,593,1.494,595,1.891,604,2.894,610,3.317,615,1.707,619,1.53,621,1.453,637,1.494,643,1.48,644,1.685,645,1.719,646,2.369,647,1.435,650,1.756,682,1.826,685,2.402,686,4.676,687,3.492,688,1.494,689,3.647,690,2.012,691,2.181,692,2.464,693,1.796,713,1.487,726,1.653,785,2.117,796,1.719,818,1.769,822,1.417,827,3.783,862,1.743,863,1.633,903,2.622,904,1.928,905,2.3,906,2.464,907,1.947,908,1.874,909,1.57,910,1.731,911,2.3,912,2.181,913,2.062,914,2.348,915,2.464,916,2.731,917,1.48,918,2.464,919,2.464,920,4.566,921,1.782,922,1.769,923,2.731,924,2.731,925,1.891,926,2.012,927,3.492,928,2.731,929,1.756,930,2.148,931,2.731,932,2.731,933,3.29,934,1.719,935,4.566,936,4.041,937,2.731,938,1.756,939,2.036,940,5.249,941,2.464,942,2.464,943,2.464,944,2.117,945,2.464,946,2.062,947,2.464,948,2.731,949,2.088,950,1.857,951,2.914,952,2.3,953,2.464,954,2.117,955,2.117,956,2.464,957,1.441,958,2.464,959,2.464,960,2.731,961,2.181,962,2.731,963,2.3,964,2.464,965,4.566,966,4.566,967,2.731,968,2.464,969,2.731,970,2.088,971,1.841,972,1.193,973,2.3,974,1.857,975,1.719,976,2.3,977,1.605,978,1.796,979,2.257,980,1.947,981,1.928,982,3.161,983,2.3,984,2.699,985,3.773,986,2.181,987,2.012,988,2.622]],["component/86",[11,0.279,108,0.486]],["title/87-1",[887,59.878]],["name/87-1",[]],["text/87-1",[]],["component/87-1",[]],["title/87-2",[588,55.237]],["name/87-2",[]],["text/87-2",[]],["component/87-2",[]],["title/87-3",[591,59.878]],["name/87-3",[]],["text/87-3",[]],["component/87-3",[]],["title/87-4",[133,28.76,589,48.285]],["name/87-4",[]],["text/87-4",[]],["component/87-4",[]],["title/87-5",[672,50.223]],["name/87-5",[]],["text/87-5",[]],["component/87-5",[]],["title/87-6",[130,21.893,131,32.861]],["name/87-6",[]],["text/87-6",[]],["component/87-6",[]],["title/87-7",[337,35.541,498,52.828]],["name/87-7",[]],["text/87-7",[]],["component/87-7",[]],["title/87",[11,9.064,40,20.044,48,25.137,54,28.183,55,28.573]],["name/87",[40,0.346,774,0.573,989,0.777]],["text/87",[0,3.461,9,0.814,11,2.219,13,2.118,14,3.18,17,0.874,18,0.696,19,0.977,27,3.436,30,3.107,32,2.397,33,0.991,34,2.452,35,2.847,36,1.033,40,4.167,41,0.991,43,2.493,44,1.872,46,0.982,47,2.022,48,4.198,49,1.149,50,1.743,53,1.166,54,4.082,55,4.478,60,1.367,67,1.491,69,4.028,71,2.857,73,1.102,77,2.355,81,1.578,84,1.044,93,1.011,102,0.964,105,1.573,106,1.476,109,1.969,111,1.062,112,1.175,113,3.75,117,1.056,118,0.901,119,1.995,121,1.506,126,2.08,127,1.591,129,1.301,130,2.386,131,4.558,133,1.776,135,1.371,137,1.082,139,0.878,144,1.585,148,1.629,151,4.67,157,1.491,163,1.966,164,4.394,165,0.887,169,0.996,171,1.056,178,0.78,179,1.082,180,1.496,182,2.582,183,0.691,186,1.986,191,3.795,197,1.149,199,2.932,200,1.693,202,3.184,205,0.74,206,3.727,209,1.821,210,1.802,214,0.923,216,0.884,218,2.126,231,0.943,232,2.783,237,0.778,241,1.157,249,0.931,250,1.471,251,1.044,252,2.868,253,0.696,256,1.062,265,1.579,269,3.143,272,1.038,273,0.964,279,2.43,287,2.493,288,0.865,302,1.982,305,0.792,306,1.831,310,1.304,312,2.267,315,0.838,316,4.094,317,1.72,321,2.067,323,0.792,330,0.996,331,2.819,333,1.831,335,0.787,337,1.629,340,1.902,347,2.311,351,1.894,352,1.941,354,1.975,356,1.311,363,1.757,364,2.616,370,1.027,371,1.616,374,3.025,392,1.567,394,0.964,407,3.141,420,1.448,421,0.931,423,1.941,444,2.521,447,2.573,448,1.117,449,1.062,457,1.185,469,3.528,472,1.766,474,2.333,476,4.014,479,3.106,489,2.688,495,4.709,496,3.431,497,1.149,501,1.774,502,1.623,518,1.316,520,0.987,523,4.198,524,1.237,542,1.175,549,1.427,553,2.258,562,3.068,588,1.175,589,3.607,591,4.209,592,2.953,593,1.732,594,1.385,595,2.193,596,1.954,597,1.274,598,1.966,599,2.722,600,2.235,601,2.617,603,1.006,604,3.27,605,1.427,606,2.391,609,1.185,610,0.862,611,2.135,613,1.261,614,1.505,616,2.391,617,1.027,621,0.951,623,1.643,624,2.521,625,1.274,627,1.022,628,1.505,629,1.102,630,1.125,631,1.102,632,1.204,633,3.823,634,1.102,643,0.968,646,0.927,656,1.636,658,2.805,668,1.774,672,5.316,677,3.592,678,1.505,690,1.316,722,1.075,743,1.175,752,1.166,753,0.964,759,0.833,794,2.135,796,1.125,798,0.947,806,1.194,816,1.033,822,0.927,864,4.542,868,1.316,871,1.109,901,1.204,917,1.716,974,1.215,990,2.53,991,1.274,992,1.612,993,1.427,994,1.505,995,1.993,996,3.573,997,1.993,998,2.785,999,3.355,1000,1.237,1001,1.612,1002,1.366,1003,1.261,1004,1.117,1005,1.505,1006,1.612,1007,2.857,1008,2.173,1009,1.237,1010,1.166,1011,2.083,1012,1.405,1013,2.857,1014,1.787,1015,1.505,1016,2.857,1017,1.612,1018,3.167,1019,1.787,1020,1.612,1021,3.848,1022,1.612,1023,1.612,1024,1.427,1025,1.787,1026,2.422,1027,1.612,1028,1.038,1029,1.787,1030,1.14,1031,1.476,1032,1.505,1033,1.505,1034,1.427,6098,1.612,6099,1.612,6100,1.571]],["component/87",[11,0.279,108,0.486]],["title/88-1",[887,59.878]],["name/88-1",[]],["text/88-1",[]],["component/88-1",[]],["title/88-2",[588,55.237]],["name/88-2",[]],["text/88-2",[]],["component/88-2",[]],["title/88-3",[81,31.061]],["name/88-3",[]],["text/88-3",[]],["component/88-3",[]],["title/88-4",[113,27.038,479,32.861]],["name/88-4",[]],["text/88-4",[]],["component/88-4",[]],["title/88-5",[113,27.038,164,31.683]],["name/88-5",[]],["text/88-5",[]],["component/88-5",[]],["title/88-6",[81,25.551,150,46.568]],["name/88-6",[]],["text/88-6",[]],["component/88-6",[]],["title/88-7",[479,32.861,1035,38.326]],["name/88-7",[]],["text/88-7",[]],["component/88-7",[]],["title/88-8",[604,53.222]],["name/88-8",[]],["text/88-8",[]],["component/88-8",[]],["title/88-9",[904,59.275]],["name/88-9",[]],["text/88-9",[]],["component/88-9",[]],["title/88-10",[688,37.78,1036,39.1]],["name/88-10",[]],["text/88-10",[]],["component/88-10",[]],["title/88-11",[121,32.861,186,26.583]],["name/88-11",[]],["text/88-11",[]],["component/88-11",[]],["title/88-12",[142,33.442,702,37.431]],["name/88-12",[]],["text/88-12",[]],["component/88-12",[]],["title/88-13",[315,39.409]],["name/88-13",[]],["text/88-13",[]],["component/88-13",[]],["title/88-14",[469,29.4,509,49.256]],["name/88-14",[]],["text/88-14",[]],["component/88-14",[]],["title/88-15",[337,35.541,498,52.828]],["name/88-15",[]],["text/88-15",[]],["component/88-15",[]],["title/88",[11,11.796,40,26.084,48,32.712]],["name/88",[40,0.5,774,0.829]],["text/88",[0,2.082,4,2.008,7,1.384,8,0.932,9,0.54,11,1.957,13,0.589,14,0.533,15,0.603,18,2.314,19,0.648,22,0.713,23,0.947,24,1.596,25,1.499,26,0.625,27,2.852,32,2.76,33,0.658,34,1.747,35,1.822,36,0.685,37,0.598,40,2.821,41,0.658,43,2.207,46,0.651,48,2.105,50,0.893,54,0.741,55,1.926,57,1.576,59,0.731,60,2.37,61,1.448,62,0.799,65,1.061,67,2.081,68,1.532,71,1.788,73,0.731,77,1.013,78,0.639,81,1.397,84,0.693,85,0.998,88,0.768,89,1.348,92,0.615,97,0.689,99,0.648,100,0.654,101,0.648,102,0.639,103,0.607,105,0.589,106,0.553,109,0.547,112,0.78,113,3.604,114,0.605,115,4.043,119,0.554,121,2.103,126,2.155,127,1.897,128,2.135,130,1.581,133,0.909,135,0.513,141,2.658,142,1.058,144,1.093,148,1.124,151,1.596,157,1.029,164,2.725,165,1.085,170,1.158,171,1.291,172,0.628,173,1.058,175,1.526,176,4.003,177,0.671,180,1.032,182,3.358,183,2.297,185,0.488,186,4.07,188,0.658,190,0.612,192,2.135,200,1.168,209,0.681,213,1.513,218,1.515,220,2.428,221,0.574,222,0.845,225,1.862,229,0.722,232,1.178,242,0.661,243,0.553,244,2.39,249,4.225,250,1.412,252,1.942,253,0.462,256,0.705,257,0.813,265,0.591,269,5.152,271,3.265,272,2.195,273,0.639,279,1.431,281,2.883,286,1.173,288,1.058,293,2.093,299,1.002,302,2.551,305,0.525,306,1.263,307,2.105,310,0.488,312,2.412,313,0.792,315,2.341,317,0.478,318,1.404,320,0.992,321,1.426,322,0.813,323,0.968,324,0.774,330,1.694,331,0.512,333,1.263,335,0.522,337,1.124,340,0.529,341,1.106,352,0.726,354,2.047,360,0.62,361,0.61,363,0.658,364,0.525,369,0.757,371,1.115,374,0.607,376,0.678,379,0.762,384,0.645,393,0.542,394,1.178,406,0.582,407,1.163,420,1.726,421,1.583,424,1.874,446,3.152,447,1.883,448,0.741,453,2.272,458,1.089,469,0.93,470,2.377,472,0.661,479,2.826,482,0.671,483,1.57,489,2.303,495,2.506,497,0.762,501,0.664,502,1.557,503,1.2,505,1.437,507,1.206,509,1.558,510,0.947,515,2.693,520,0.654,523,1.953,540,0.713,541,2.075,543,0.806,551,1.953,558,0.628,577,0.895,582,1.503,591,2.166,593,1.662,599,1.939,604,4.463,606,0.895,610,1.466,611,1.093,619,1.224,621,0.631,624,0.701,627,0.678,629,0.731,634,0.731,640,0.906,643,0.642,646,1.133,647,1.148,650,1.404,651,0.726,656,0.612,668,1.224,671,0.799,681,0.845,686,4.314,688,2.065,689,4.386,690,2.239,702,1.646,712,0.845,726,1.322,748,0.828,752,0.774,759,1.76,773,0.661,785,0.919,786,1.67,796,0.746,800,1.404,818,0.768,822,1.576,823,0.873,839,1.069,862,2.822,868,0.873,869,1.366,879,0.746,880,0.845,904,2.145,909,1.256,918,2.741,925,0.821,926,1.61,927,0.906,929,0.762,933,4.281,934,3.139,936,5.013,939,2.265,940,4.076,941,1.069,942,1.069,943,1.069,944,0.919,945,1.971,946,0.895,947,1.069,949,0.906,950,1.485,951,1.394,952,0.998,953,1.971,954,1.694,955,0.919,956,1.069,957,1.153,958,1.069,959,1.069,961,1.745,963,0.998,964,1.069,968,1.069,971,0.799,972,1.327,973,1.84,974,0.806,976,0.998,981,1.542,982,2.104,996,0.821,1007,1.971,1011,1.437,1024,2.427,1031,0.979,1032,0.998,1033,0.998,1034,0.947,1035,1.686,1036,2.137,1037,0.828,1038,1.185,1040,1.069,1041,1.069,1043,1.069,1044,1.069,1045,1.671,1046,2.693,1047,1.971,1048,2.184,1049,1.185,1050,2.184,1051,2.184,1052,1.185,1053,1.185,1054,1.971,1055,1.745,1056,0.806,1057,3.988,1058,0.932,1059,4.42,1060,4.5,1061,0.947,1062,1.694,1063,2.184,1064,0.845,1065,1.61,1066,1.185,1067,0.979,1068,1.185,1069,1.069,1070,1.185,1071,0.979,1072,0.947,1073,1.185,1074,1.971,1075,1.46,1076,1.185,1077,1.774,1078,1.84,1081,1.185,1082,1.185,1083,1.185,1084,2.239,1085,1.185,1086,0.605,1087,1.774,1088,1.101,1089,0.821,1090,1.84,1091,1.069,1092,1.069,1093,1.069,1094,1.042,1095,0.998,1096,1.971,1097,1.971,1098,3.407,1099,1.069,1100,1.185,1101,1.185,1102,1.299,1103,1.069,1104,1.84,1105,3.038,1106,3.038,1107,2.955,1108,0.731,1109,1.485,1110,0.962,1111,0.998,1112,1.27,1113,1.185,1114,1.185,1115,1.185,1116,0.884,1117,1.185,1118,1.185,1119,0.863,1120,1.185,1121,0.947,1122,1.069,1123,3.988,1124,1.185,1127,1.185,1128,3.006,1129,0.726,1130,0.845,1131,0.774,1132,0.998,1133,1.069,1134,0.685,1135,1.839,1136,0.906,1137,0.895,1138,1.185,1139,1.069,1140,1.185,1142,0.813,1143,1.671,1144,0.962,1145,0.919,1146,1.185,1147,2.184,1148,3.776,1150,1.069,1151,1.185,1152,1.185,1153,1.185,1154,0.799,1155,0.979,1156,0.947,1157,1.042,1158,1.185,1159,0.947,1160,1.185,1161,1.971,1162,3.038,1164,1.185,1165,0.651,1166,1.069,1167,0.821,1168,1.069,1169,1.185,1170,1.745,1171,1.069,1172,0.78,1173,0.806,1174,1.069,1175,1.069,1364,0.932,6101,1.344,6102,2.301,6103,1.248]],["component/88",[11,0.279,108,0.486]],["title/89-1",[887,59.878]],["name/89-1",[]],["text/89-1",[]],["component/89-1",[]],["title/89-2",[588,55.237]],["name/89-2",[]],["text/89-2",[]],["component/89-2",[]],["title/89-3",[591,59.878]],["name/89-3",[]],["text/89-3",[]],["component/89-3",[]],["title/89-4",[133,28.76,589,48.285]],["name/89-4",[]],["text/89-4",[]],["component/89-4",[]],["title/89-5",[672,50.223]],["name/89-5",[]],["text/89-5",[]],["component/89-5",[]],["title/89-6",[18,32.708]],["name/89-6",[]],["text/89-6",[]],["component/89-6",[]],["title/89-7",[11,11.796,130,18.595,131,27.91]],["name/89-7",[]],["text/89-7",[]],["component/89-7",[]],["title/89-8",[672,50.223]],["name/89-8",[]],["text/89-8",[]],["component/89-8",[]],["title/89-9",[18,32.708]],["name/89-9",[]],["text/89-9",[]],["component/89-9",[]],["title/89-10",[337,35.541,498,52.828]],["name/89-10",[]],["text/89-10",[]],["component/89-10",[]],["title/89",[11,11.796,39,33.38,48,32.712]],["name/89",[774,1.5]],["text/89",[0,4.053,5,1.01,9,1.099,11,2.326,13,2.669,14,2.651,17,1.181,18,2.903,19,0.722,23,1.055,25,0.906,27,2.992,30,2.426,32,1.547,33,0.733,34,1.915,35,3.063,39,1.895,40,1.073,41,0.733,43,2.403,44,1.426,45,1.125,46,2.63,47,1.949,48,4.862,49,1.551,50,1.956,53,1.575,55,0.837,57,0.551,60,0.57,61,0.876,69,4.168,71,3.747,72,0.612,73,0.815,76,0.666,77,2.585,78,0.712,81,1.988,84,0.772,92,0.685,93,1.365,97,1.402,99,1.319,100,1.332,101,1.319,102,2.218,103,1.236,105,1.198,106,1.125,109,1.898,111,1.434,113,3.851,114,1.231,117,0.781,118,0.666,119,1.128,121,0.628,126,2.621,127,0.664,129,2.608,130,2.624,131,5.024,133,1.386,135,2.072,139,0.649,141,0.639,144,2.396,148,2.463,151,4.217,157,1.936,163,0.82,164,3.557,165,1.198,169,1.345,171,1.968,173,1.168,178,1.054,179,0.799,180,1.14,182,2.058,186,1.842,187,0.81,191,2.141,196,0.736,197,1.551,199,3.538,200,0.706,202,2.582,205,0.999,206,4.091,208,1.54,209,1.915,210,0.751,214,1.246,216,1.194,218,2.387,225,0.493,229,1.469,231,0.697,232,2.582,249,0.688,250,1.121,251,1.41,252,3.129,256,0.785,265,1.203,268,0.685,269,2.65,272,0.768,273,0.712,279,2.774,286,0.709,287,1.946,288,0.639,302,2.224,303,0.685,306,3.107,309,0.712,310,1.372,312,2.588,316,4.738,317,1.343,321,2.173,323,0.585,330,1.345,331,2.741,333,1.395,335,0.582,337,1.713,340,1.485,347,1.804,351,0.79,352,2.041,353,0.626,354,3.591,356,0.547,360,1.742,363,2.282,364,2.814,366,0.837,367,1.41,368,0.751,370,1.915,371,1.231,374,4.114,392,1.194,394,0.712,406,0.649,407,1.772,420,1.88,421,0.688,423,2.521,444,2.431,447,3.165,448,1.508,449,1.434,452,2.351,454,1.551,457,0.876,461,0.843,469,2.702,472,1.857,473,0.942,476,2.796,479,3.546,489,2.493,495,4.735,496,0.768,497,0.849,501,1.352,502,0.677,503,1.326,507,1.332,518,2.454,520,0.729,522,3.235,523,4.344,524,1.67,526,1.01,542,1.587,548,0.962,549,1.927,552,1.927,553,1.72,562,0.785,588,1.587,589,2.874,591,3.832,592,1.67,593,1.319,594,1.87,595,1.67,596,2.537,597,0.942,598,1.498,599,2.625,600,1.703,601,1.993,603,1.359,604,2.606,605,1.055,606,3.613,608,1.112,609,1.6,610,1.164,611,2.396,612,1.72,613,1.703,614,2.032,615,0.826,616,3.104,617,1.387,618,1.135,619,0.74,620,1.01,621,1.284,622,1.686,623,2.133,624,2.431,625,3.832,626,2.032,627,1.38,628,2.032,629,1.488,630,1.518,631,1.488,632,1.626,633,3.1,634,1.488,638,0.952,643,0.716,658,1.587,668,1.352,671,0.89,672,4.638,677,2.032,678,1.112,681,0.942,743,0.869,759,0.616,794,0.89,796,0.831,798,0.7,809,1.055,818,0.855,822,0.685,868,1.777,879,0.831,901,0.89,917,1.307,929,0.849,974,0.898,990,1.927,991,0.942,992,1.191,993,1.055,994,1.112,995,1.518,996,3.314,997,1.518,998,2.122,999,1.898,1000,0.914,1001,1.191,1002,1.01,1003,0.932,1004,0.826,1005,1.112,1006,3.004,1008,0.906,1009,0.914,1010,0.862,1011,1.587,1015,1.112,1016,1.191,1017,1.191,1021,3.004,1023,1.191,1024,1.055,1026,1.845,1027,1.191,1028,0.768,1031,1.091,1032,1.112,1033,1.112,1034,1.055,1107,0.883,1172,0.869,1173,0.898,1174,1.191,1175,1.191,1525,1.112,2039,0.876,2247,0.952,2418,1.039,2419,1.321,2420,1.321,2421,1.321,2422,1.072,6098,1.191,6099,1.191,6100,1.162]],["component/89",[11,0.279,108,0.486]],["title/90-1",[113,27.038,497,44.413]],["name/90-1",[]],["text/90-1",[]],["component/90-1",[]],["title/90-2",[6,46.568,43,40.373]],["name/90-2",[]],["text/90-2",[]],["component/90-2",[]],["title/90-3",[131,24.255,148,26.233,331,22.01,798,27.017]],["name/90-3",[]],["text/90-3",[]],["component/90-3",[]],["title/90-4",[130,18.595,148,30.186,1176,52.928]],["name/90-4",[]],["text/90-4",[]],["component/90-4",[]],["title/90-5",[132,26.405,240,32.712,1177,46.864]],["name/90-5",[]],["text/90-5",[]],["component/90-5",[]],["title/90-6",[244,23.606,759,27.351,1178,52.928]],["name/90-6",[]],["text/90-6",[]],["component/90-6",[]],["title/90-7",[244,23.606,759,27.351,936,34.483]],["name/90-7",[]],["text/90-7",[]],["component/90-7",[]],["title/90-8",[917,45.503]],["name/90-8",[]],["text/90-8",[]],["component/90-8",[]],["title/90-9",[17,24.953,305,22.6,535,32.782,562,30.315]],["name/90-9",[]],["text/90-9",[]],["component/90-9",[]],["title/90-10",[126,28.608,130,18.595,221,28.403]],["name/90-10",[]],["text/90-10",[]],["component/90-10",[]],["title/90-11",[130,16.16,237,22.202,258,38.994,359,28.289]],["name/90-11",[]],["text/90-11",[]],["component/90-11",[]],["title/90-12",[17,28.713,130,18.595,562,34.882]],["name/90-12",[]],["text/90-12",[]],["component/90-12",[]],["title/90-13",[17,24.953,204,32.091,227,25.326,305,22.6]],["name/90-13",[]],["text/90-13",[]],["component/90-13",[]],["title/90-14",[17,22.064,96,26.062,497,28.987,562,26.805,577,34.033]],["name/90-14",[]],["text/90-14",[]],["component/90-14",[]],["title/90-15",[17,28.713,305,26.006,1179,46.864]],["name/90-15",[]],["text/90-15",[]],["component/90-15",[]],["title/90-16",[917,45.503]],["name/90-16",[]],["text/90-16",[]],["component/90-16",[]],["title/90-17",[130,18.595,180,27.72,864,37.722]],["name/90-17",[]],["text/90-17",[]],["component/90-17",[]],["title/90-18",[305,30.619,1180,57.081]],["name/90-18",[]],["text/90-18",[]],["component/90-18",[]],["title/90-19",[11,11.796,185,24.166,1102,34.882]],["name/90-19",[]],["text/90-19",[]],["component/90-19",[]],["title/90-20",[243,23.769,1181,62.853,1182,38.015]],["name/90-20",[]],["text/90-20",[]],["component/90-20",[]],["title/90-21",[243,27.351,496,34.101,864,37.722]],["name/90-21",[]],["text/90-21",[]],["component/90-21",[]],["title/90-22",[187,51.473]],["name/90-22",[]],["text/90-22",[]],["component/90-22",[]],["title/90-23",[356,21.114,535,32.782,562,30.315,1183,40.727]],["name/90-23",[]],["text/90-23",[]],["component/90-23",[]],["title/90-24",[917,45.503]],["name/90-24",[]],["text/90-24",[]],["component/90-24",[]],["title/90-25",[293,19.435,305,22.6,562,30.315,1184,45.997]],["name/90-25",[]],["text/90-25",[]],["component/90-25",[]],["title/90-26",[293,22.364,562,34.882,1116,43.743]],["name/90-26",[]],["text/90-26",[]],["component/90-26",[]],["title/90-27",[293,26.331,393,31.582]],["name/90-27",[]],["text/90-27",[]],["component/90-27",[]],["title/90-28",[81,18.859,305,22.6,310,21.002,1185,45.997]],["name/90-28",[]],["text/90-28",[]],["component/90-28",[]],["title/90-29",[225,21.9,293,22.364,305,26.006]],["name/90-29",[]],["text/90-29",[]],["component/90-29",[]],["title/90-30",[243,21.017,293,17.185,562,40.493,1165,24.774]],["name/90-30",[]],["text/90-30",[]],["component/90-30",[]],["title/90-31",[917,45.503]],["name/90-31",[]],["text/90-31",[]],["component/90-31",[]],["title/90-32",[225,25.422,293,17.185,319,31.216,1112,26.204]],["name/90-32",[]],["text/90-32",[]],["component/90-32",[]],["title/90-33",[225,19.032,293,19.435,1112,29.636,1186,29.316]],["name/90-33",[]],["text/90-33",[]],["component/90-33",[]],["title/90-34",[225,19.032,293,19.435,1112,29.636,1187,34.981]],["name/90-34",[]],["text/90-34",[]],["component/90-34",[]],["title/90-35",[130,18.595,225,21.9,319,40.623]],["name/90-35",[]],["text/90-35",[]],["component/90-35",[]],["title/90-36",[225,13.664,293,13.954,305,16.226,551,23.536,1186,21.048,1188,24.893,1189,30.829]],["name/90-36",[]],["text/90-36",[]],["component/90-36",[]],["title/90-37",[67,27.626,225,21.9,319,40.623]],["name/90-37",[]],["text/90-37",[]],["component/90-37",[]],["title/90-38",[917,45.503]],["name/90-38",[]],["text/90-38",[]],["component/90-38",[]],["title/90-39",[293,22.364,305,26.006,1179,46.864]],["name/90-39",[]],["text/90-39",[]],["component/90-39",[]],["title/90-40",[917,45.503]],["name/90-40",[]],["text/90-40",[]],["component/90-40",[]],["title/90-41",[96,33.915,535,37.722,562,34.882]],["name/90-41",[]],["text/90-41",[]],["component/90-41",[]],["title/90-42",[130,16.16,237,22.202,359,28.289,535,32.782]],["name/90-42",[]],["text/90-42",[]],["component/90-42",[]],["title/90-43",[27,12.874,227,18.183,237,15.94,293,13.954,359,20.311,562,34.465]],["name/90-43",[]],["text/90-43",[]],["component/90-43",[]],["title/90-44",[17,24.953,96,29.474,535,32.782,562,30.315]],["name/90-44",[]],["text/90-44",[]],["component/90-44",[]],["title/90-45",[917,45.503]],["name/90-45",[]],["text/90-45",[]],["component/90-45",[]],["title/90-46",[469,29.4,509,49.256]],["name/90-46",[]],["text/90-46",[]],["component/90-46",[]],["title/90",[11,9.064,18,17.56,43,26.35,45,21.017,53,29.425]],["name/90",[43,0.454,45,0.362,53,0.507]],["text/90",[0,0.902,4,0.104,8,0.098,9,0.205,10,0.186,11,1.57,14,1.386,15,0.173,17,3.968,18,1.62,19,0.186,21,0.723,22,0.069,24,0.404,26,0.061,27,2.807,30,0.407,32,0.309,35,1.485,36,0.197,37,0.591,38,0.462,40,0.051,41,0.25,42,0.158,43,2.834,44,0.806,45,0.159,46,0.187,47,0.778,48,0.19,49,0.147,50,1.37,53,0.149,54,0.415,57,0.233,60,0.376,61,0.076,62,0.229,63,0.062,65,0.926,66,0.175,67,0.362,68,0.335,69,0.071,70,0.388,71,0.907,72,0.106,73,0.071,75,1.024,76,0.873,77,2.201,78,0.184,80,0.354,81,1.83,84,0.852,89,0.141,90,0.336,92,0.557,93,0.316,95,0.24,96,1.102,97,0.262,99,0.246,100,0.425,101,0.246,102,0.525,103,0.6,105,0.86,106,1.194,109,2.097,111,0.268,112,0.076,113,3.149,114,1.017,115,0.778,116,1.089,117,0.692,118,0.115,119,0.502,120,0.181,121,0.265,122,0.129,123,0.15,124,0.084,125,0.406,126,2.657,127,0.732,128,2.096,129,1.562,130,2.446,131,0.603,132,0.897,133,2.487,134,0.75,135,1.109,136,0.855,137,0.138,138,0.121,139,0.112,140,0.572,141,1.125,142,0.706,144,0.058,148,1.473,157,0.263,158,0.079,159,0.397,161,0.31,163,0.072,164,0.156,165,0.114,169,0.064,170,1.01,171,0.201,172,0.569,173,0.165,176,1.38,178,0.244,179,1.948,180,1.455,181,0.209,182,0.954,183,1.02,184,0.611,185,1.297,186,0.799,187,0.777,188,1.588,190,0.397,191,1.389,192,1.52,193,0.173,194,0.061,196,0.19,197,1.055,198,0.433,199,2.203,200,2,201,0.855,202,1.984,203,0.251,204,3.456,205,1.575,206,2.532,208,0.809,210,0.722,212,0.26,213,0.08,214,1.116,215,0.134,216,0.381,217,1.535,218,0.863,221,1.277,222,0.082,224,0.088,225,3.57,226,0.714,227,2.149,229,0.531,230,0.071,231,0.061,232,1.028,234,0.598,235,0.26,236,0.685,237,1.518,238,1.054,240,0.486,241,1.453,242,0.19,243,1.773,244,4.033,245,0.77,246,0.296,249,1.126,250,0.452,251,0.067,252,2.316,253,0.674,257,0.528,258,2.861,265,0.727,268,0.345,269,5.12,271,3.472,272,1.108,273,0.358,275,0.193,276,0.214,279,1.672,281,0.842,282,0.158,285,0.67,286,0.523,287,0.51,288,0.422,289,0.911,292,0.314,293,3.349,295,0.085,297,0.763,298,1.83,299,3.155,300,0.489,301,0.87,302,0.309,303,0.233,304,0.531,305,1.893,306,0.949,307,2.785,308,0.274,309,1.166,310,1.463,311,0.614,312,1.321,313,0.227,314,0.47,315,0.312,316,3.23,317,2.47,319,2.547,321,1.244,322,2.014,323,0.921,324,0.294,325,0.491,326,0.379,327,0.204,329,0.079,330,2.412,331,0.86,332,0.062,333,0.62,335,2.115,337,1.278,339,0.071,340,1.75,341,3.242,342,0.244,343,0.082,345,0.332,347,0.417,348,1.453,350,0.506,351,3.359,352,0.658,353,0.509,354,1.458,356,2.326,357,0.154,358,0.156,359,2.076,360,0.762,361,0.175,363,1.898,364,0.845,366,0.864,367,0.388,368,0.194,369,0.074,370,0.673,371,0.339,373,0.18,374,1.232,375,0.878,376,0.38,378,1.714,380,0.386,381,0.092,382,0.835,383,0.065,384,0.584,389,0.531,390,2.345,392,1.789,393,3.159,394,0.981,401,0.169,406,0.274,407,0.297,409,0.369,414,0.484,420,0.791,421,0.559,423,0.209,424,0.956,426,0.332,429,0.47,431,0.193,439,0.271,441,0.272,444,0.068,446,0.082,447,0.435,448,0.415,450,0.134,452,0.615,453,0.138,455,0.075,457,0.51,458,0.224,459,0.193,461,0.491,467,0.46,468,0.272,469,0.698,473,0.082,476,0.078,479,0.162,484,0.248,489,0.507,495,0.226,496,1.057,497,4.759,501,0.919,502,2.041,503,0.063,505,0.224,507,0.647,509,0.474,510,0.183,511,0.668,514,0.321,515,0.321,519,0.569,520,0.481,524,0.08,526,0.088,527,0.148,528,0.318,529,0.071,532,0.287,533,0.07,535,4.932,536,0.359,538,0.245,540,1.447,541,0.697,542,0.574,543,0.078,546,0.344,547,0.904,550,0.345,551,1.597,552,0.092,553,0.082,556,0.092,557,0.167,558,0.238,560,0.26,561,0.584,562,5.451,563,0.878,564,0.104,565,0.104,566,0.104,567,0.104,568,0.104,569,4.229,570,0.104,571,3.915,572,4.039,573,1.943,574,0.406,575,0.406,576,1.17,577,2.532,578,0.307,579,1.398,580,1.144,581,0.787,582,3.713,583,0.104,584,0.379,585,0.307,587,1.089,593,0.125,596,0.071,598,1.019,599,0.217,603,0.374,606,0.173,608,0.287,610,0.056,611,0.682,612,0.163,615,0.072,617,0.066,621,1.015,622,0.315,623,0.119,624,1.982,625,1.715,627,0.131,629,0.278,630,0.073,631,0.071,634,0.071,637,0.477,639,0.157,641,0.452,642,0.097,643,0.244,644,0.21,646,0.119,647,0.061,649,0.129,650,0.074,654,0.489,660,0.193,661,0.088,667,0.175,668,0.128,670,0.091,672,2.237,673,0.087,674,0.069,683,0.082,688,0.063,690,0.085,693,0.076,696,0.141,697,0.18,698,0.141,702,0.302,703,0.534,710,0.095,711,0.088,718,0.911,722,0.705,726,0.465,739,0.936,741,0.163,743,0.076,748,0.16,751,0.074,752,0.765,753,0.301,756,0.069,759,1.594,764,0.673,767,0.217,768,0.175,771,0.477,772,0.62,773,0.128,776,0.635,786,0.126,788,1.567,789,0.085,791,0.173,794,0.229,798,0.462,800,1.17,803,0.092,806,0.153,816,0.677,817,0.104,822,1.034,826,0.495,835,0.634,837,0.359,854,0.104,856,0.418,857,0.072,862,0.287,863,0.758,864,3.302,865,0.097,869,0.545,871,0.541,874,0.206,879,0.214,880,0.243,881,0.085,887,0.321,901,0.154,902,0.193,906,0.104,907,0.321,908,0.079,909,0.132,917,0.527,936,0.801,938,0.074,949,0.088,951,0.989,957,0.294,972,0.795,974,0.306,975,0.917,977,0.068,978,0.15,980,0.082,991,0.398,993,0.092,995,0.351,997,0.144,1003,0.081,1008,0.309,1010,0.075,1011,0.076,1012,0.18,1013,1.23,1015,1.068,1028,0.624,1030,0.287,1035,0.756,1036,0.98,1037,0.16,1039,0.309,1046,0.474,1057,0.104,1065,2.32,1074,0.206,1075,0.077,1084,0.085,1102,0.754,1107,0.153,1108,0.071,1109,0.078,1112,1.949,1116,0.416,1129,0.14,1130,0.082,1135,0.07,1136,0.97,1137,0.173,1142,0.233,1143,0.588,1145,0.089,1165,0.749,1167,0.158,1170,0.092,1171,0.104,1172,0.506,1176,0.206,1177,0.272,1178,0.787,1179,1.238,1180,0.968,1181,3.254,1182,1.793,1183,0.857,1184,0.206,1185,1.949,1186,0.56,1187,0.456,1188,0.523,1189,3.098,1190,0.115,1191,0.085,1192,0.272,1193,0.206,1194,0.531,1195,0.676,1196,0.175,1197,0.307,1198,0.251,1199,0.104,1200,0.115,1201,0.115,1202,0.495,1203,0.104,1204,0.456,1205,0.092,1206,0.115,1207,0.115,1208,0.115,1209,0.307,1210,0.115,1211,0.107,1212,0.24,1213,0.115,1214,0.406,1215,0.248,1216,0.726,1217,0.336,1218,0.206,1219,0.115,1220,0.406,1221,0.307,1222,0.495,1223,0.45,1224,0.231,1225,0.115,1226,0.115,1227,0.34,1228,0.229,1229,0.115,1230,0.45,1231,0.229,1232,0.229,1233,0.229,1234,1.136,1235,0.531,1236,0.229,1237,0.229,1238,0.229,1239,0.115,1240,0.115,1241,0.193,1242,0.229,1243,0.206,1244,0.104,1245,0.111,1246,0.186,1247,0.115,1248,0.115,1249,2.78,1250,0.558,1251,0.396,1252,0.283,1253,0.351,1254,0.08,1255,0.115,1256,0.206,1257,0.34,1258,0.115,1259,0.34,1260,0.115,1261,0.115,1262,0.115,1263,0.115,1264,0.115,1265,0.229,1266,0.558,1267,0.34,1268,1.073,1269,0.34,1270,0.097,1271,0.101,1272,0.558,1273,0.094,1274,0.45,1275,0.34,1276,0.115,1277,0.446,1278,0.206,1279,0.229,1280,0.229,1281,0.229,1282,0.229,1283,0.229,1284,0.229,1285,0.229,1286,0.115,1287,0.115,1288,0.115,1289,0.115,1290,0.115,1291,0.229,1292,0.229,1293,0.115,1294,0.115,1295,0.115,1296,0.115,1297,0.115,1298,2.638,1299,0.229,1300,0.229,1301,0.229,1302,0.229,1303,0.229,1304,0.973,1305,0.229,1306,1.641,1307,0.115,1308,0.115,1309,0.115,1310,0.115,1311,0.115,1312,0.115,1313,0.115,1314,0.115,1315,0.973,1316,0.115,1317,0.115,1318,0.115,1319,0.115,1320,0.115,1321,0.115,1322,0.115,1323,0.092,1324,0.115,1325,0.085,1326,0.753,1327,0.315,1328,0.115,1329,0.115,1330,0.206,1331,0.664,1332,0.229,1333,0.229,1334,0.115,1335,0.406,1336,0.115,1337,0.115,1338,0.306,1339,0.34,1340,0.146,1341,0.34,1342,0.34,1343,0.076,1344,0.169,1345,0.45,1346,0.115,1347,0.115,1348,0.115,1349,0.115,1350,0.115,1351,0.104,1352,0.966,1353,0.356,1354,0.421,1355,0.421,1356,0.115,1357,0.097,1358,0.229,1359,0.115,1360,0.115,1361,0.115,1362,0.115,1363,0.206,1364,0.354,1365,0.115,1366,0.444,1367,0.321,1368,0.272,1369,0.34,1370,0.34,1371,0.34,1372,0.34,1373,0.34,1374,0.34,1375,0.206,1376,0.45,1377,0.229,1378,0.229,1379,0.664,1380,1.753,1381,0.229,1382,0.45,1383,0.45,1384,0.45,1385,0.45,1386,0.45,1387,0.558,1388,0.229,1389,0.45,1390,0.895,1391,0.688,1392,0.206,1393,0.097,1394,0.161,1395,0.104,1396,0.115,1397,0.088,1398,0.104,1399,0.47,1400,0.104,1401,0.115,1402,0.171,1403,0.115,1404,0.872,1405,0.183,1406,0.45,1407,0.34,1408,0.229,1409,1.907,1410,0.34,1411,1.346,1412,0.558,1413,0.696,1414,0.34,1415,0.26,1416,0.229,1417,1.013,1418,0.229,1419,0.45,1420,0.157,1421,0.359,1422,0.359,1423,0.359,1424,0.503,1425,1.363,1426,0.115,1427,0.115,1428,0.115,1429,0.115,1430,0.115,1431,0.34,1432,0.115,1433,0.115,1434,0.085,1435,0.084,1436,0.115,1437,0.104,1438,0.115,1439,0.115,1440,0.115,1441,0.115,1442,0.115,1443,0.115,1444,0.558,1445,0.229,1446,1.185,1447,0.34,1448,0.34,1449,0.45,1450,0.213,1451,0.503,1452,0.115,1453,0.115,1454,0.115,1455,0.115,1456,0.115,1457,0.115,1458,0.229,1459,0.229,1460,0.104,1461,0.115,1462,0.115,1463,0.115,1464,0.115,1465,0.115,1466,0.115,1467,0.229,1468,0.34,1469,0.115,1470,0.183,1471,1.033,1472,0.229,1473,0.229,1474,0.104,1475,0.229,1476,0.229,1477,0.229,1478,0.229,1479,0.229,1480,0.229,1481,0.45,1482,0.229,1483,0.115,1484,0.115,1485,0.115,1486,0.115,1487,0.115,1488,1.731,1489,0.115,1490,0.115,1491,0.115,1492,0.769,1493,0.332,1494,0.077,1495,0.085,1496,0.229,1497,0.115,1498,0.115,1499,0.229,1500,0.097,1501,0.115,1502,0.34,1503,0.095,1504,0.34,1505,0.085,1506,0.229,1507,0.229,1508,0.229,1509,0.115,1510,0.115,1511,0.446,1512,0.359,1513,0.104,1514,0.379,1515,0.45,1516,0.097,1517,0.115,1518,0.115,1519,0.287,1520,0.231,1521,0.379,1522,0.161,1523,0.101,1524,0.115,1525,0.193,1526,0.115,1527,0.115,1528,0.088,1529,0.115,1530,0.115,1531,0.115,1532,0.115,1533,0.229,1534,0.281,1535,0.115,1536,0.34,1537,0.104,1538,0.115,1539,0.104,1540,0.115,1541,0.115,1542,0.115,1543,0.115,1544,0.115,1545,0.115,1546,0.115,1547,0.104,1548,0.115,1549,0.229,1550,0.229,1551,0.115,1552,0.229,1553,0.115,1554,0.115,1555,0.115,1556,0.115,1557,0.115,1558,0.427,1559,0.723,1560,0.104,1561,0.115,1562,0.115,1563,0.115,1564,0.268,1565,0.115,1566,0.115,1567,0.075,1568,0.072,1569,0.387,1570,0.115,1571,0.115,1572,0.115,1573,0.115,1574,0.769,1575,1.457,1576,0.195,1577,0.34,1578,0.115,1579,0.115,1580,0.34,1581,1.457,1582,0.229,1583,0.45,1584,0.229,1585,0.115,1586,0.115,1587,0.115,1588,0.115,1589,0.115,1590,0.115,1591,0.115,1592,0.115,1593,0.115,1594,0.115,1595,0.115,1596,0.115,1597,0.34,1598,0.115,1599,0.104,1600,0.197,1601,0.769,1602,0.538,1603,0.349,1604,0.34,1605,0.307,1606,0.34,1607,0.183,1608,0.115,1609,0.299,1610,0.115,1611,0.115,1612,0.115,1613,0.074,1614,0.115,1615,0.097,1616,0.229,1617,0.229,1618,0.115,1619,0.088,1620,0.115,1621,0.115,1622,0.115,1623,0.45,1624,0.229,1625,0.229,1626,0.115,1627,0.115,1628,0.115,1629,0.115,1630,0.229,1631,0.115,1632,0.115,1633,0.115,1634,0.34,1635,0.115,1636,0.115,1637,0.115,1638,0.206,1639,0.307,1640,0.115,1641,0.115,1642,0.115,1643,0.115,1644,0.229,1645,0.19,1646,0.229,1647,0.092,1648,0.229,1649,0.078,1650,0.229,1651,0.229,1652,0.104,1653,0.558,1654,0.872,1655,1.171,1656,0.082,1657,0.45,1658,0.45,1659,0.115,1660,0.082,1661,0.115,1662,0.115,1663,0.696,1664,0.229,1665,1.457,1666,0.229,1667,0.664,1668,0.115,1669,0.229,1670,0.115,1671,0.115,1672,0.115,1673,0.115,1674,0.115,1675,0.115,1676,0.115,1677,0.115,1678,0.229,1679,0.34,1680,0.104,1681,0.558,1682,0.769,1683,0.769,1684,0.34,1685,0.115,1686,0.115,1687,0.083,1688,0.26,1689,0.115,1690,0.115,1691,0.664,1692,0.229,1693,0.206,1694,0.201,1695,0.433,1696,0.406,1697,0.091,1698,0.398,1699,0.115,1700,0.769,1701,0.309,1702,0.097,1703,0.45,1704,0.194,1705,0.145,1706,0.238,1707,0.083,1708,0.073,1709,0.379,1710,0.558,1711,0.45,1712,0.777,1713,0.245,1714,0.34,1715,0.45,1716,0.229,1717,0.115,1718,0.115,1719,0.115,1720,0.115,1721,0.115,1722,0.229,1723,0.115,1724,0.229,1725,0.229,1726,0.115,1727,0.229,1728,0.115,1729,0.115,1730,0.229,1731,1.23,1732,0.769,1733,1.641,1734,0.558,1735,0.115,1736,0.115,1737,0.115,1738,0.115,1739,0.115,1740,0.648,1741,1.561,1742,0.115,1743,0.115,1744,0.115,1745,0.115,1746,0.115,1747,0.115,1748,0.115,1749,0.229,1750,0.115,1751,0.115,1752,0.229,1753,0.115,1754,0.115,1755,0.115,1756,0.115,1757,0.115,1758,0.34,1759,0.34,1760,0.34,1761,0.34,1762,0.34,1763,0.34,1764,0.558,1765,0.229,1766,0.229,1767,0.229,1768,0.229,1769,0.229,1770,0.558,1771,0.229,1772,0.229,1773,0.229,1774,0.229,1775,0.229,1776,0.45,1777,0.115,1778,0.115,1779,0.115,1780,0.115,1781,0.115,1782,0.34,1783,0.34,1784,0.45,1785,0.115,1786,0.115,1787,0.115,1788,0.115,1789,0.115,1790,0.34,1791,0.34,1792,0.115,1793,0.416,1794,0.115,1795,0.115,1796,0.115,1797,0.115,1798,0.115,1799,0.115,1800,0.115,1801,0.115,1802,0.115,1803,0.664,1804,0.115,1805,0.34,1806,0.45,1807,0.229,1808,0.229,1809,0.229,1810,0.229,1811,0.229,1812,0.229,1813,0.34,1814,0.115,1815,0.229,1816,0.229,1817,0.229,1818,0.115,1819,0.229,1820,0.115,1821,0.115,1822,0.243,1823,0.115,1824,0.115,1825,0.115,1826,0.115,1827,0.115,1828,0.229,1829,0.115,1830,0.115,1831,0.115,1832,0.115,1833,0.115,1834,0.115,1835,0.115,1836,0.45,1837,0.307,1838,0.34,1839,0.229,1840,0.193,1841,0.115,1842,0.45,1843,0.45,1844,0.45,1845,0.34,1846,0.16,1847,0.115,1848,0.115,1849,0.115,1850,0.115,1851,0.115,1852,0.307,1853,0.115,1854,0.115,1855,0.115,1856,0.115,1857,0.115,1858,0.115,1859,0.34,1860,0.206,1861,0.229,1862,0.115,1863,0.104,1864,0.115,1865,0.115,1866,0.115,1867,0.115,1868,0.115,1869,0.115,1870,0.104,1871,0.115,1872,0.115,1873,0.115,1874,0.115,1875,0.115,1876,0.115,1877,0.558,1878,1.148,1879,0.115,1880,0.115,1881,0.115,1882,0.115,1883,0.115,1884,0.664,1885,0.34,1886,0.115,1887,0.115,1888,0.115,1889,0.229,1890,0.115,1891,0.558,1892,0.558,1893,0.229,1894,0.229,1895,0.229,1896,0.115,1897,0.115,1898,0.276,1899,0.161,1900,0.115,1901,0.154,1902,0.085,1903,0.104,1904,0.115,1905,0.115,1906,0.115,1907,0.115,1908,0.085,1909,0.115,1910,0.115,1911,0.115,1912,0.115,1913,0.115,1914,0.115,1915,0.115,1916,0.115,1917,0.115,1918,0.115,1919,0.115,1920,0.115,1921,0.115,1922,0.115,1923,0.115,1924,0.115,1925,0.115,1926,0.115,1927,0.115,1928,0.115,1929,0.104,1930,0.115,1931,0.115,1932,0.115,1933,0.115,1934,0.115,1935,0.115,1936,0.115,1937,0.115,1938,0.115,1939,0.115,1940,0.104,1941,0.115,1942,0.085,1943,0.26,1944,0.206,1945,0.694,1946,0.115,1947,0.45,1948,0.115,1949,0.115,1950,0.193,1951,0.115,1952,0.115,1953,0.115,1954,0.115,1955,0.115,1956,0.115,1957,0.115,1958,0.115,1959,0.115,1960,0.097,1961,0.115,1962,0.153,1963,0.082,1964,0.097,1965,0.092,1966,0.115,1967,0.115,1968,0.34,1969,0.115,1970,0.229,1971,0.229,1972,0.229,1973,0.229,1974,0.229,1975,0.229,1976,0.115,1977,0.104,1978,0.229,1979,0.229,1980,0.229,1981,0.229,1982,0.229,1983,0.34,1984,0.229,1985,0.115,1986,0.115,1987,0.229,1988,0.229,1989,0.229,1990,0.229,1991,0.229,1992,0.229,1993,0.115,1994,0.229,1995,0.229,1996,0.229,1997,0.229,1998,0.229,1999,0.229,2000,0.229,2001,0.229,2002,0.229,2003,0.287,2004,0.092,2005,0.251,2006,0.229,2007,0.115,2008,0.34,2009,0.104,2010,0.115,2011,0.115,2012,0.115,2013,0.115,2014,0.115,2015,0.115,2016,0.104,2017,0.115,2018,0.104,2019,0.115,2020,0.664,2021,0.45,2022,0.086,2023,0.115,2024,0.307,2025,0.34,2026,0.307,2027,0.34,2028,0.34,2029,0.115,2030,0.229,2031,0.115,2032,0.115,2033,0.115,2034,0.115,2035,0.115,2036,0.115,2037,0.115,2038,0.083,2039,0.076,2040,0.161,2041,0.115,2042,0.229,2043,0.599,2044,0.115,2045,0.664,2046,0.115,2047,0.115,2048,0.115,2049,0.229,2050,0.229,2051,0.115,2052,0.115,2053,0.229,2054,0.115,2055,0.115,2056,0.115,2057,0.169,2058,0.406,2059,0.104,2060,0.092,2061,0.206,2062,1.363,2063,0.104,2064,0.115,2065,0.115,2066,0.115,2067,0.115,2068,0.115,2069,0.115,2070,0.229,2071,0.558,2072,0.45,2073,0.115,2074,0.115,2075,0.115,2076,0.115,2077,0.229,2078,0.115,2079,0.45,2080,0.115,2081,0.115,2082,0.206,2083,0.077,2084,0.111,2085,0.165,2086,0.104,2087,0.097,2088,0.193,2089,0.088,2090,0.115,2091,0.115,2092,0.193,2093,0.183,2094,0.307,2095,0.45,2096,0.115,2097,0.115,2098,0.229,2099,0.115,2100,0.115,2101,0.115,2102,0.115,2103,0.474,2104,0.115,2105,0.229,2106,0.229,2107,0.115,2108,0.229,2109,0.115,2110,0.115,2111,0.115,2112,0.115,2113,0.45,2114,0.085,2115,0.115,2116,0.316,2117,0.165,2118,0.084,2119,0.229,2120,0.229,2121,0.664,2122,0.115,2123,0.115,2124,0.115,2125,0.115,2126,0.115,2127,0.115,2128,0.115,2129,0.115,2130,0.229,2131,0.115,2132,0.115,2133,0.229,2134,0.115,2135,0.229,2136,0.229,2137,0.229,2138,0.229,2139,0.229,2140,0.229,2141,0.229,2142,0.229,2143,0.229,2144,0.229,2145,0.229,2146,0.229,2147,0.229,2148,0.229,2149,0.229,2150,0.087,2151,0.115,2152,0.599,2153,0.45,2154,0.229,2155,0.115,2156,0.171,2157,0.146,2158,0.34,2159,0.45,2160,0.45,2161,0.153,2162,0.115,2163,0.115,2164,0.115,2165,0.115,2166,0.115,2167,0.115,2168,0.34,2169,0.115,2170,0.115,2171,0.115,2172,0.229,2173,0.115,2174,0.115,2175,0.229,2176,0.115,2177,0.115,2178,0.115,2179,0.115,2180,0.115,2181,0.115,2182,0.115,2183,0.115,2184,0.115,2185,0.115,2186,0.115,2187,0.115,2188,0.115,2189,0.115,2190,0.115,2191,0.115,2192,0.115,2193,0.115,2194,0.229,2195,0.115,2196,0.115,2197,0.115,2198,0.115,2199,0.115,2200,0.115,2201,0.115,2202,0.097,2203,0.115,2204,0.115,2205,0.115,2206,0.115,2207,0.115,2208,0.115,2209,0.115,2210,0.115,2211,0.115,2212,0.115,2213,0.115,2214,0.115,2215,0.115,2216,0.115,2217,0.115,2218,0.115,2219,0.115,2220,0.115,2221,0.115,2222,0.115,2223,0.115,2224,0.115,2225,0.115,2226,0.115,2227,0.115,2228,0.115,2229,0.115,2230,0.115,2231,0.115,2232,0.115,2233,0.115,2234,0.115,2235,0.088,2236,0.34,2237,0.34,2238,0.34,2239,0.088,2240,0.115,2241,0.115,2242,0.115,2243,0.115,2244,0.45,2245,0.115,2246,0.138,2247,0.083,2248,0.45,2249,0.229,2250,0.34,2251,0.34,2252,0.115,2253,0.071,2254,0.115,2255,0.115,2256,0.115,2257,0.115,2258,0.115,2259,0.115,2260,0.115,2261,0.115,2262,0.115,2263,0.115,2264,0.115,2265,0.115,2266,0.115,2267,0.115,2268,0.115,2269,0.115,2270,0.115,2271,0.115,2272,0.115,2273,0.115,2274,0.115,2275,0.115,2276,0.115,2277,0.115,2278,0.115,2279,0.115,2280,0.115,2281,0.115,2282,0.115,2283,0.115,2284,0.115,2285,0.115,2286,0.115,2287,0.115,2288,0.115,2289,0.115,2290,0.115,2291,0.115,2292,0.115,2293,0.115,2294,0.115,2295,0.115,2296,0.115,2297,0.115,2298,0.115,2299,0.115,2300,0.115,2301,0.115,2302,0.115,2303,0.115,2304,0.115,2305,0.115,2306,0.115,2307,0.115,2308,0.115,2309,0.115,2310,0.115,2311,0.115,2312,0.34,2313,0.115,2314,0.115,2315,0.115,2316,0.115,2317,0.115,2318,0.115,2319,0.115,2320,0.115,2321,0.115,2322,0.115,2323,0.115,2324,0.115,2325,0.115,2326,0.45,2327,0.092,2328,0.115,2329,0.45,2330,0.101,2331,0.08,2332,0.115,2333,0.154,2334,0.45,2335,0.104,2336,0.115,2337,0.45,2338,0.45,2339,0.872,2340,0.45,2341,0.229,2342,0.34,2343,0.071,2344,0.115,2345,0.115,2346,0.115,2347,0.115,2348,0.115,2349,0.104,2350,0.115,2351,0.229,2352,0.115,2353,0.229,2354,0.115,2355,0.115,2356,0.115,2357,0.34,2358,0.115,2359,0.115,2360,0.115,2361,0.115,2362,0.115,2363,0.229,2364,0.097,2365,0.115,2366,0.45,2367,0.115,2368,0.115,2369,0.115,2370,0.115,2371,0.115,2372,0.115,2373,0.769,2374,0.115,2375,0.097,2376,0.272,2377,0.115,2378,0.45,2379,0.097,2380,0.45,2381,0.115,2382,0.115,2383,0.115,2384,0.115,2385,0.115,2386,0.115,2387,0.115,2388,0.115,2389,0.095,2390,0.34,2391,0.115,2392,0.111,2393,0.115,2394,0.251,2395,0.115,2396,0.115,2397,0.229,2398,0.115,2399,0.115,2400,0.115,2401,0.115,2402,0.115,2403,0.115,2404,0.115,2405,0.229,2406,0.115,2407,0.115,2408,0.229,2409,0.115,2410,0.084,2411,0.115,2412,0.115,2413,0.115,2414,0.073,2415,0.097,2416,0.115,2417,0.115,6097,0.107]],["component/90",[11,0.279,108,0.486]],["title/91",[64,70.719]],["name/91",[64,1.715]],["text/91",[11,2.01,34,5.749,65,4.858,70,5.844,73,6.169,128,4.28,527,6.477,674,6.016,2414,6.337,2423,6.989]],["component/91",[11,0.279,108,0.486]],["title/92-1",[8,35.841]],["name/92-1",[]],["text/92-1",[]],["component/92-1",[]],["title/92-2",[4,26.654,2038,42.276,2424,47.637]],["name/92-2",[]],["text/92-2",[]],["component/92-2",[]],["title/92-3",[11,11.796,135,25.4,177,33.208]],["name/92-3",[]],["text/92-3",[]],["component/92-3",[]],["title/92-4",[11,11.796,151,30.821,177,33.208]],["name/92-4",[]],["text/92-4",[]],["component/92-4",[]],["title/92-5",[11,10.251,71,20.62,72,23.614,118,25.716]],["name/92-5",[]],["text/92-5",[]],["component/92-5",[]],["title/92-6",[672,41.313,996,47.83]],["name/92-6",[]],["text/92-6",[]],["component/92-6",[]],["title/92-7",[18,32.708]],["name/92-7",[]],["text/92-7",[]],["component/92-7",[]],["title/92-8",[77,16.997,157,24.009,1000,35.304,2425,42.939]],["name/92-8",[]],["text/92-8",[]],["component/92-8",[]],["title/92-9",[151,23.684,394,24.318,1000,31.216,2425,37.967,2426,29.203]],["name/92-9",[]],["text/92-9",[]],["component/92-9",[]],["title/92-10",[6104,88.439]],["name/92-10",[]],["text/92-10",[]],["component/92-10",[]],["title/92-11",[9,20.547,11,9.064,40,20.044,244,18.139,940,30.931]],["name/92-11",[]],["text/92-11",[]],["component/92-11",[]],["title/92-12",[79,32.545,194,26.786,880,36.356,940,34.981]],["name/92-12",[]],["text/92-12",[]],["component/92-12",[]],["title/92-13",[11,10.251,40,22.669,1846,35.64,6105,44.844]],["name/92-13",[]],["text/92-13",[]],["component/92-13",[]],["title/92-14",[11,10.251,40,22.669,657,29.161,759,23.769]],["name/92-14",[]],["text/92-14",[]],["component/92-14",[]],["title/92-15",[1234,47.83,6106,78.328]],["name/92-15",[]],["text/92-15",[]],["component/92-15",[]],["title/92-16",[11,11.655,39,20.828,40,16.275,269,15.282,1234,25.347,6107,41.509]],["name/92-16",[]],["text/92-16",[]],["component/92-16",[]],["title/92-17",[1234,47.83,6108,78.328]],["name/92-17",[]],["text/92-17",[]],["component/92-17",[]],["title/92-18",[226,25.389,342,24.429,409,25.014,1249,22.478,6109,47.481]],["name/92-18",[]],["text/92-18",[]],["component/92-18",[]],["title/92-19",[11,13.888,930,54.337]],["name/92-19",[]],["text/92-19",[]],["component/92-19",[]],["title/92-20",[227,41.711]],["name/92-20",[]],["text/92-20",[]],["component/92-20",[]],["title/92-21",[11,9.064,269,18.821,458,22.478,2587,40.672,2589,37.967]],["name/92-21",[]],["text/92-21",[]],["component/92-21",[]],["title/92-22",[70,34.29,776,42.74,798,31.088]],["name/92-22",[]],["text/92-22",[]],["component/92-22",[]],["title/92-23",[40,26.084,120,31.225,479,27.91]],["name/92-23",[]],["text/92-23",[]],["component/92-23",[]],["title/92-24",[115,39.811]],["name/92-24",[]],["text/92-24",[]],["component/92-24",[]],["title/92-25",[310,21.002,5913,44.844,6110,53.698,6111,57.815]],["name/92-25",[]],["text/92-25",[]],["component/92-25",[]],["title/92-26",[1234,40.623,6112,61.789,6113,61.789]],["name/92-26",[]],["text/92-26",[]],["component/92-26",[]],["title/92-27",[11,8.124,185,16.643,240,22.528,353,19.156,656,20.874,6114,42.554]],["name/92-27",[]],["text/92-27",[]],["component/92-27",[]],["title/92",[11,10.251,18,19.86,34,29.316,79,32.545]],["name/92",[34,0.647,79,0.718]],["text/92",[0,0.858,4,2.588,8,1.225,9,1.632,11,1.938,12,2.191,13,2.09,14,0.925,15,1.821,17,1.006,18,3.556,19,2.301,20,1.974,27,3.466,31,0.8,32,1.664,38,0.588,39,0.631,40,2.116,41,0.616,45,1.338,46,0.61,47,1.994,50,3.465,56,0.791,63,1.099,65,0.539,67,0.523,68,2.122,69,4.852,71,2.613,72,0.952,75,1.923,76,2.122,77,1.587,78,0.599,79,5.291,81,2.512,92,0.576,101,0.607,102,0.599,103,0.569,105,1.021,106,0.958,113,1.124,115,4.57,118,1.448,119,1.343,120,1.094,126,0.541,127,1.8,128,1.229,130,0.651,133,1.982,135,1.243,139,0.545,144,1.029,151,2.501,157,2.474,163,0.689,164,1.317,165,1.426,170,0.588,172,2.229,173,0.537,175,1.443,177,1.625,178,1.837,181,1.76,182,1.793,183,0.429,185,2.347,186,2.837,187,2.579,192,0.475,194,0.583,199,1.779,202,1.109,205,1.189,206,1.084,214,2.173,215,1.208,226,1.158,227,1.021,229,0.676,231,1.084,236,1.443,237,0.895,240,4.11,243,0.517,244,2.733,252,0.903,253,2.219,257,1.97,265,1.786,269,4.832,271,2.711,272,0.645,276,1.294,279,2.242,281,2.071,286,1.104,287,0.649,288,0.537,290,0.8,291,2.581,299,1.317,302,1.664,310,2.512,312,1.848,315,1.681,316,2.001,317,1.445,318,0.713,323,1.273,327,1.229,332,0.599,333,0.641,335,2.315,340,0.917,341,2.41,342,2.579,344,0.976,351,1.717,353,0.974,358,1.952,360,0.58,364,1.588,368,0.631,371,0.566,374,3.125,376,0.635,378,0.604,384,0.604,392,1.017,393,0.94,394,3.485,409,1.593,420,0.507,421,0.578,423,0.68,428,2.969,442,1.808,444,1.697,457,1.363,458,2.097,469,0.472,472,0.619,479,1.366,482,0.628,489,0.578,495,1.8,501,2.007,502,2.692,506,0.748,515,0.791,516,0.668,519,0.724,520,0.613,523,1.846,533,0.672,540,0.668,557,0.808,561,0.976,582,0.549,589,2.007,592,0.768,593,0.607,595,0.768,598,0.689,604,1.303,609,0.736,610,0.992,611,1.437,612,0.791,615,1.795,621,0.591,632,1.936,633,1.86,637,0.607,638,0.8,645,1.807,646,1.066,647,0.583,650,1.846,653,0.708,656,0.573,657,1.176,668,0.622,669,1.451,672,2.847,676,0.917,681,1.466,683,2.047,686,0.755,694,1.001,695,1.001,699,1.617,701,0.86,707,0.698,709,0.791,713,0.604,748,2.007,753,1.109,756,1.237,759,1.338,764,2.06,767,1.312,779,1.466,786,0.61,798,1.089,800,0.713,806,0.742,822,1.489,827,1.322,871,0.689,880,0.791,909,0.638,930,2.818,933,2.069,934,2.254,940,3.266,972,1.564,974,0.755,990,0.886,996,1.988,1003,1.451,1011,0.73,1028,3.755,1035,0.616,1036,0.628,1062,0.86,1077,0.901,1078,0.934,1088,1.03,1089,0.768,1094,0.976,1102,1.222,1128,0.755,1131,0.724,1134,1.66,1145,0.86,1165,0.61,1173,1.398,1182,2.141,1202,1.533,1224,0.755,1234,5.872,1246,0.901,1249,3.04,1273,0.901,1471,1.556,1500,1.731,1505,1.514,1522,0.783,1528,0.849,1576,1.176,1600,0.954,1649,0.755,1708,0.703,1713,0.8,1793,0.827,1846,1.437,1898,0.901,1899,1.451,1944,1.854,1963,0.791,2004,1.642,2005,0.818,2038,1.481,2062,1.808,2118,0.808,2161,1.374,2246,1.727,2424,0.901,2446,0.976,2456,1.477,2463,1.731,2465,1.11,2466,1.11,2467,1.11,2468,1.066,2469,1.11,2470,1.11,2471,1.11,2476,1.03,2486,0.954,2487,0.622,2488,0.631,2530,1.03,2585,0.954,2587,1.001,2589,0.934,2591,0.849,2593,2.055,2594,0.768,2596,1.03,2602,1.169,2622,1.169,2624,0.954,2625,1.642,2723,2.468,2737,0.776,2738,1.854,2745,1.169,2767,2.055,2794,0.934,2875,2.115,2885,0.901,2935,0.954,2977,1.03,2996,0.742,3208,0.86,3280,0.976,3376,1.066,3381,3.594,3384,2.338,3548,0.838,3565,0.808,3665,0.976,3944,1.974,4166,1.41,4442,0.976,4548,1.974,4590,1.767,4595,1.066,4596,1.066,4739,1.066,4911,1.808,5310,1.066,5399,0.976,5610,1.066,5913,4.187,6049,1.066,6097,2.666,6100,1.808,6104,1.169,6109,1.169,6112,2.165,6113,1.169,6114,2.165,6115,4.43,6116,2.331,6117,1.258,6118,1.258,6119,1.258,6120,1.258,6121,2.331,6122,1.258,6123,1.258,6124,1.258,6125,1.258,6126,1.11,6127,1.258,6128,1.258,6129,1.11,6130,1.258,6131,1.258,6132,1.974,6133,1.258,6134,1.258,6135,3.256,6136,1.258,6137,1.258,6138,1.258,6139,5.958,6140,1.258,6141,1.258,6142,1.258,6143,1.258,6144,1.258,6145,1.169,6146,1.481,6147,1.258,6148,2.331,6149,2.331,6150,4.062,6151,1.258,6152,2.331,6153,1.258,6154,1.258,6155,1.258,6156,1.258,6157,1.258,6158,1.258,6159,1.258,6160,1.258,6161,1.258,6162,1.258,6163,3.256,6164,1.258,6165,1.258,6166,1.258,6167,1.258,6168,5.398,6169,5.398,6170,1.258,6171,5.398,6172,2.331,6173,4.062,6174,1.258,6175,1.258,6176,1.258,6177,1.258,6178,1.258,6179,1.258,6180,1.258,6181,1.258,6182,1.258,6183,1.258,6184,1.258,6185,1.258,6186,1.258,6187,1.258,6188,1.258,6189,1.258,6190,1.258,6191,1.258,6192,1.258,6193,1.258,6194,1.258,6195,1.258,6196,1.258,6197,1.258,6198,1.258,6199,1.258,6200,1.258,6201,1.11,6202,2.331,6203,3.024,6204,2.165,6205,1.258,6206,1.258,6207,1.258,6208,1.258,6209,1.258,6210,1.258,6211,1.258,6212,1.258,6213,1.258,6214,1.258,6215,1.258,6216,1.258,6217,1.258,6218,1.258,6219,1.258,6220,1.258,6221,1.258,6222,1.258,6223,1.258,6224,1.258,6225,1.258,6226,1.258,6227,1.258,6228,1.258,6229,1.258,6230,1.258,6231,1.258,6232,1.258,6233,1.258,6234,1.258,6235,1.258,6236,1.258,6237,1.258,6238,1.258,6239,1.258,6240,1.258,6241,3.256,6242,1.258,6243,1.258,6244,1.258,6245,1.258,6246,1.258,6247,1.258,6248,1.258,6249,1.258,6250,1.258,6251,1.258,6252,3.256,6253,1.258,6254,1.258,6255,1.258]],["component/92",[11,0.279,108,0.486]],["title/93-1",[12,43.744]],["name/93-1",[]],["text/93-1",[]],["component/93-1",[]],["title/93-2",[113,27.038,116,43.477]],["name/93-2",[]],["text/93-2",[]],["component/93-2",[]],["title/93-3",[618,34.738,1046,28.811,2990,58.154,5016,37.518,6256,42.554]],["name/93-3",[]],["text/93-3",[]],["component/93-3",[]],["title/93-4",[11,9.064,40,20.044,120,23.994,144,22.564,2422,36.606]],["name/93-4",[]],["text/93-4",[]],["component/93-4",[]],["title/93-5",[178,30.168,6146,49.776]],["name/93-5",[]],["text/93-5",[]],["component/93-5",[]],["title/93-6",[173,21.826,175,22.651,176,22.918,310,18.57,315,21.158]],["name/93-6",[]],["text/93-6",[]],["component/93-6",[]],["title/93-7",[173,21.826,176,22.918,310,18.57,315,21.158,957,23.786]],["name/93-7",[]],["text/93-7",[]],["component/93-7",[]],["title/93-8",[19,24.658,205,18.669,310,18.57,315,21.158,582,22.31]],["name/93-8",[]],["text/93-8",[]],["component/93-8",[]],["title/93-9",[9,26.738,244,23.606,940,40.252]],["name/93-9",[]],["text/93-9",[]],["component/93-9",[]],["title/93-10",[6105,73.857]],["name/93-10",[]],["text/93-10",[]],["component/93-10",[]],["title/93-11",[1846,58.698]],["name/93-11",[]],["text/93-11",[]],["component/93-11",[]],["title/93-12",[178,19.689,202,24.318,310,18.57,6257,40.672,6258,40.672]],["name/93-12",[]],["text/93-12",[]],["component/93-12",[]],["title/93-13",[79,32.545,81,18.859,118,25.716,151,26.786]],["name/93-13",[]],["text/93-13",[]],["component/93-13",[]],["title/93-14",[120,31.225,151,30.821,479,27.91]],["name/93-14",[]],["text/93-14",[]],["component/93-14",[]],["title/93-15",[479,32.861,2426,44.744]],["name/93-15",[]],["text/93-15",[]],["component/93-15",[]],["title/93-16",[67,24.009,193,38.49,4519,44.844,6259,53.698]],["name/93-16",[]],["text/93-16",[]],["component/93-16",[]],["title/93-17",[479,32.861,6146,49.776]],["name/93-17",[]],["text/93-17",[]],["component/93-17",[]],["title/93-18",[2591,52.828,6146,49.776]],["name/93-18",[]],["text/93-18",[]],["component/93-18",[]],["title/93-19",[257,34.981,310,21.002,501,28.57,6260,53.698]],["name/93-19",[]],["text/93-19",[]],["component/93-19",[]],["title/93-20",[77,15.029,392,22.31,5913,39.652,6204,47.481,6261,47.481]],["name/93-20",[]],["text/93-20",[]],["component/93-20",[]],["title/93-21",[77,19.558,2450,41.009,4781,49.409]],["name/93-21",[]],["text/93-21",[]],["component/93-21",[]],["title/93-22",[1395,52.928,6262,61.789,6263,61.789]],["name/93-22",[]],["text/93-22",[]],["component/93-22",[]],["title/93-23",[657,39.508,759,32.203]],["name/93-23",[]],["text/93-23",[]],["component/93-23",[]],["title/93-24",[6264,80.638]],["name/93-24",[]],["text/93-24",[]],["component/93-24",[]],["title/93-25",[6265,95.22]],["name/93-25",[]],["text/93-25",[]],["component/93-25",[]],["title/93",[11,10.251,12,26.56,18,19.86,75,27.378]],["name/93",[12,0.586,75,0.604]],["text/93",[0,0.853,3,0.912,4,2.76,8,0.471,9,1.302,11,1.802,12,1.488,13,1.771,15,1.812,18,2.755,19,1.118,22,0.664,24,1.873,26,0.582,27,3.793,31,0.795,32,1.946,33,0.612,34,2.408,36,0.638,37,0.556,39,1.625,40,2.327,41,0.612,45,0.953,47,2.881,50,0.451,51,0.645,53,0.72,57,0.461,59,0.681,60,0.883,63,1.093,65,2.303,67,2.861,68,1.031,71,2.604,72,0.947,74,0.833,76,1.031,77,2.146,78,1.103,79,5.278,80,0.868,81,3.421,85,2.406,89,0.681,94,0.881,95,1.443,101,0.603,102,0.595,103,0.565,105,0.548,106,0.514,108,0.386,109,0.509,113,1.639,114,0.563,115,2.881,116,0.694,117,0.652,118,2.112,119,1.959,120,1.897,121,0.525,122,1.157,124,0.804,127,1.435,128,2.429,130,1.327,131,1.696,132,2.134,133,0.459,134,1.997,135,0.478,137,1.729,141,0.99,142,0.534,144,3.223,150,0.744,151,2.2,157,0.963,158,1.96,159,1.709,161,1.134,163,2.601,164,0.506,165,1.419,168,0.726,170,0.585,171,0.652,172,2.219,173,2.295,174,0.881,175,2.852,176,1.452,178,2.07,180,1.684,182,0.552,183,2.024,184,3.229,185,1.953,186,0.787,190,1.476,192,1.223,193,1.543,194,1.501,199,1.015,200,1.093,202,4.35,205,0.457,210,0.628,215,1.202,218,1.019,220,1.314,221,0.534,226,0.621,227,1.015,231,0.582,236,2.104,237,0.48,240,1.14,244,1.907,250,0.95,252,2.082,253,2.038,257,2.873,265,2.364,269,4.503,271,1.585,273,1.103,274,0.704,276,0.694,279,0.963,285,1.169,288,2.748,293,1.995,299,1.31,303,1.061,305,2.516,308,0.672,310,4.052,312,1.566,315,3.97,316,2.7,317,0.825,318,1.837,320,0.501,323,1.266,325,0.704,327,1.223,329,0.757,331,0.476,332,1.923,335,0.901,340,0.912,341,2.121,342,2.836,354,0.511,356,0.457,363,0.612,368,1.625,371,0.563,376,0.631,379,1.314,392,2.59,393,1.63,394,0.595,409,0.612,420,1.915,421,0.575,439,0.664,469,1.216,479,2.89,481,0.676,489,1.065,501,1.601,502,3.299,507,0.609,515,0.787,528,0.628,533,0.668,556,0.881,558,1.083,569,1.534,582,3.186,593,0.603,603,1.151,610,1.72,611,1.023,618,1.758,621,1.088,622,0.771,623,2.459,627,0.631,630,0.694,631,1.762,633,1.85,637,1.118,641,0.75,643,1.548,645,1.798,646,1.061,647,1.873,649,1.157,651,2.185,653,0.704,656,0.57,657,2.039,661,0.844,668,1.146,671,2.403,685,1.798,693,0.726,696,0.681,702,1.108,703,1.253,707,1.287,709,0.787,718,0.737,753,1.541,756,0.664,759,2.44,764,1.175,767,0.704,791,0.833,793,0.97,796,0.694,798,0.585,800,1.314,822,2.459,823,0.813,826,0.823,835,1.689,862,0.704,903,1.963,904,0.779,915,0.995,934,2.984,940,3.894,946,1.543,951,0.704,957,3.731,972,1.248,988,1.059,997,1.287,998,0.97,1011,1.345,1030,0.704,1035,1.585,1036,1.617,1037,0.771,1041,0.995,1056,1.39,1061,1.633,1086,1.043,1107,1.367,1119,0.804,1135,1.238,1165,1.123,1182,0.823,1191,0.813,1204,1.403,1212,0.779,1215,0.804,1216,1.524,1221,0.995,1249,2.609,1251,0.97,1330,0.995,1352,1.355,1353,0.704,1354,0.833,1355,0.833,1391,0.648,1395,5.121,1397,2.185,1399,0.929,1420,0.757,1434,0.813,1522,1.443,1564,0.868,1568,0.69,1576,2.395,1645,0.615,1706,0.771,1846,1.429,1899,0.779,1942,0.813,1963,0.787,2005,0.813,2038,0.795,2040,0.779,2114,0.813,2150,0.833,2156,0.823,2157,0.704,2161,1.91,2247,0.795,2410,0.804,2414,0.699,2418,0.868,2423,1.429,2424,0.896,2426,3.071,2446,1.798,2450,1.997,2456,0.568,2495,0.896,2591,0.844,2618,1.898,2625,0.881,2708,0.948,2824,0.804,2875,0.813,2895,2.857,2896,1.103,2897,1.103,2898,1.103,2904,0.833,2935,0.948,2961,0.757,2971,0.929,2977,1.024,2990,2.653,3000,0.757,3001,0.868,3384,1.334,3420,0.833,3482,0.804,3615,0.97,3814,0.779,3835,0.97,3929,0.995,3993,0.881,4034,0.844,4144,0.912,4166,0.757,4208,0.896,4231,0.868,4303,2.361,4450,1.059,4452,0.995,4590,3.065,4719,0.97,4770,0.912,4781,4.78,5016,1.024,5251,1.162,5913,2.513,5920,1.059,5966,2.577,6097,2.653,6105,2.513,6110,1.162,6115,1.162,6132,1.059,6145,1.162,6146,6.457,6203,1.162,6256,1.162,6257,3.216,6258,2.577,6259,1.162,6260,2.153,6261,1.162,6262,3.755,6263,3.009,6264,1.963,6266,1.251,6267,1.251,6268,2.857,6269,1.103,6270,2.318,6271,2.318,6272,1.103,6273,1.103,6274,1.251,6275,2.044,6276,1.251,6277,1.251,6278,1.103,6279,1.162,6280,1.251,6281,2.318,6282,1.251,6283,1.251,6284,2.318,6285,1.251,6286,1.898,6287,2.044,6288,1.251,6289,1.251,6290,1.251,6291,1.251,6292,1.251,6293,1.103,6294,2.044,6295,1.251,6296,1.251,6297,1.251,6298,1.251,6299,1.251,6300,1.251,6301,1.251,6302,1.251,6303,1.251,6304,1.251,6305,1.251,6306,1.251,6307,1.251,6308,1.251,6309,1.251,6310,2.318,6311,1.251,6312,1.251,6313,3.239,6314,1.251,6315,4.042,6316,2.318,6317,5.934,6318,1.251,6319,1.251,6320,1.251,6321,1.251,6322,1.251,6323,1.251,6324,1.251,6325,1.251,6326,1.251,6327,1.251,6328,1.251,6329,1.251,6330,1.251,6331,2.318,6332,1.251,6333,1.251,6334,1.251,6335,1.251,6336,2.318,6337,3.239,6338,1.251,6339,1.251,6340,1.251,6341,1.251,6342,1.251,6343,1.251]],["component/93",[11,0.279,108,0.486]],["title/94-1",[2957,72.196]],["name/94-1",[]],["text/94-1",[]],["component/94-1",[]],["title/94-2",[4,31.382,598,42.894]],["name/94-2",[]],["text/94-2",[]],["component/94-2",[]],["title/94-3",[47,27.814,81,21.701,458,29.252]],["name/94-3",[]],["text/94-3",[]],["component/94-3",[]],["title/94-4",[394,31.646,458,29.252,2958,49.409]],["name/94-4",[]],["text/94-4",[]],["component/94-4",[]],["title/94-5",[138,36.445,458,34.441]],["name/94-5",[]],["text/94-5",[]],["component/94-5",[]],["title/94-6",[309,31.646,458,29.252,2959,52.928]],["name/94-6",[]],["text/94-6",[]],["component/94-6",[]],["title/94-7",[129,20.946,331,22.01,458,25.422,527,33.026]],["name/94-7",[]],["text/94-7",[]],["component/94-7",[]],["title/94-8",[54,31.873,129,20.946,331,22.01,458,25.422]],["name/94-8",[]],["text/94-8",[]],["component/94-8",[]],["title/94",[11,10.251,72,23.614,458,25.422,986,40.727]],["name/94",[11,0.156,72,0.36,458,0.388]],["text/94",[4,4.454,11,2.047,14,2.537,17,2.759,18,3.415,24,2.961,27,2.822,32,1.642,45,1.648,47,1.675,48,1.97,71,1.429,72,4.327,76,1.782,77,3.784,78,3.04,81,2.085,112,2.325,119,1.653,126,1.723,129,1.452,130,3.912,131,1.681,136,1.841,138,3.71,142,1.711,159,2.114,161,5.648,169,5.209,179,3.412,182,2.821,186,2.706,187,2.166,188,3.127,191,2.272,199,2.8,200,4.686,202,1.906,203,2.604,218,2.81,225,2.104,227,2.8,231,1.865,232,3.04,236,1.776,243,1.648,244,3.228,250,1.642,269,2.935,286,3.027,288,4.244,289,2.209,293,4,301,4.488,306,2.043,307,1.97,310,1.456,311,4.503,316,1.681,317,1.426,319,4.869,322,3.867,323,1.566,331,1.526,333,2.043,334,2.823,339,2.18,342,1.915,343,2.52,350,6.696,351,2.114,352,3.455,356,1.463,357,2.382,358,2.403,380,4.087,393,1.616,394,1.906,420,1.616,421,1.841,446,2.52,458,4.371,469,1.504,472,1.97,476,2.403,489,1.841,495,2.832,505,2.325,507,3.112,532,2.256,542,2.325,543,2.403,598,6.321,610,1.705,611,1.769,622,7.115,630,2.224,634,2.18,647,1.857,702,1.915,712,2.52,739,2.823,767,2.256,794,2.382,805,3.188,822,1.833,857,2.209,950,2.403,1182,2.635,1224,2.403,1254,2.447,1470,4.503,1602,2.18,1708,2.24,1822,2.52,2734,2.307,2912,8.024,2958,2.976,2959,3.188,2960,5.637,2961,2.425,2962,2.139,2963,3.534,2964,3.534,2965,3.534,2966,4.503,2967,3.534,2968,2.224,2969,2.823,2970,3.534]],["component/94",[11,0.279,108,0.486]],["title/95-1",[18,22.852,71,23.727,118,29.591]],["name/95-1",[]],["text/95-1",[]],["component/95-1",[]],["title/95-2",[0,24.493,77,19.558,129,24.102]],["name/95-2",[]],["text/95-2",[]],["component/95-2",[]],["title/95-3",[77,16.997,130,16.16,135,22.074,244,20.515]],["name/95-3",[]],["text/95-3",[]],["component/95-3",[]],["title/95-4",[77,16.997,126,24.862,130,16.16,135,22.074]],["name/95-4",[]],["text/95-4",[]],["component/95-4",[]],["title/95-5",[115,27.814,135,25.4,535,37.722]],["name/95-5",[]],["text/95-5",[]],["component/95-5",[]],["title/95-6",[244,27.793,1234,47.83]],["name/95-6",[]],["text/95-6",[]],["component/95-6",[]],["title/95-7",[880,49.256,1249,34.441]],["name/95-7",[]],["text/95-7",[]],["component/95-7",[]],["title/95-8",[126,33.684,1234,47.83]],["name/95-8",[]],["text/95-8",[]],["component/95-8",[]],["title/95-9",[6,39.552,11,11.796,72,27.171]],["name/95-9",[]],["text/95-9",[]],["component/95-9",[]],["title/95-10",[11,13.888,129,28.378]],["name/95-10",[]],["text/95-10",[]],["component/95-10",[]],["title/95-11",[77,19.558,129,24.102,131,27.91]],["name/95-11",[]],["text/95-11",[]],["component/95-11",[]],["title/95-12",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/95-12",[]],["text/95-12",[]],["component/95-12",[]],["title/95-13",[130,21.893,132,31.09]],["name/95-13",[]],["text/95-13",[]],["component/95-13",[]],["title/95-14",[17,28.713,77,19.558,129,24.102]],["name/95-14",[]],["text/95-14",[]],["component/95-14",[]],["title/95-15",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/95-15",[]],["text/95-15",[]],["component/95-15",[]],["title/95-16",[130,21.893,132,31.09]],["name/95-16",[]],["text/95-16",[]],["component/95-16",[]],["title/95-17",[77,19.558,129,24.102,293,22.364]],["name/95-17",[]],["text/95-17",[]],["component/95-17",[]],["title/95-18",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/95-18",[]],["text/95-18",[]],["component/95-18",[]],["title/95-19",[130,21.893,132,31.09]],["name/95-19",[]],["text/95-19",[]],["component/95-19",[]],["title/95-20",[11,11.796,134,41.009,214,30.31]],["name/95-20",[]],["text/95-20",[]],["component/95-20",[]],["title/95-21",[77,16.997,130,16.16,225,19.032,293,19.435]],["name/95-21",[]],["text/95-21",[]],["component/95-21",[]],["title/95-22",[77,16.997,130,16.16,204,32.091,227,25.326]],["name/95-22",[]],["text/95-22",[]],["component/95-22",[]],["title/95-23",[77,19.558,81,21.701,130,18.595]],["name/95-23",[]],["text/95-23",[]],["component/95-23",[]],["title/95-24",[11,11.796,118,29.591,138,30.954]],["name/95-24",[]],["text/95-24",[]],["component/95-24",[]],["title/95-25",[77,15.029,140,26.498,141,21.826,142,21.826,305,19.984]],["name/95-25",[]],["text/95-25",[]],["component/95-25",[]],["title/95-26",[136,35.984,138,36.445]],["name/95-26",[]],["text/95-26",[]],["component/95-26",[]],["title/95-27",[181,42.341,182,34.573]],["name/95-27",[]],["text/95-27",[]],["component/95-27",[]],["title/95-28",[183,19.716,184,29.009,185,21.002,186,19.621]],["name/95-28",[]],["text/95-28",[]],["component/95-28",[]],["title/95-29",[19,27.886,138,26.901,187,31.253,188,28.289]],["name/95-29",[]],["text/95-29",[]],["component/95-29",[]],["title/95-30",[11,10.251,72,23.614,495,25.617,701,39.531]],["name/95-30",[]],["text/95-30",[]],["component/95-30",[]],["title/95-31",[11,9.064,18,17.56,71,18.233,144,22.564,495,22.651]],["name/95-31",[]],["text/95-31",[]],["component/95-31",[]],["title/95-32",[11,9.064,18,17.56,71,18.233,133,18.77,265,22.478]],["name/95-32",[]],["text/95-32",[]],["component/95-32",[]],["title/95-33",[495,34.706,598,42.894]],["name/95-33",[]],["text/95-33",[]],["component/95-33",[]],["title/95",[11,11.796,18,22.852,72,27.171]],["name/95",[18,0.438,72,0.521]],["text/95",[0,2.173,6,1.457,9,1.185,10,0.334,11,2.238,14,2.92,17,2.421,18,3.479,19,1.182,21,0.723,24,0.886,27,3.224,32,0.544,33,0.339,35,1.451,37,0.591,38,0.621,40,0.272,41,1.199,43,0.357,44,0.997,45,1.212,47,0.799,48,1.45,49,0.753,50,2.127,51,0.685,57,0.489,59,0.377,65,0.819,68,0.308,69,0.723,70,0.685,71,2.83,72,3.165,76,1.887,77,3.289,78,1.166,81,1.621,84,0.685,97,0.681,98,1.916,99,0.641,100,0.647,101,0.922,102,0.632,103,1.107,105,1.073,106,1.212,109,0.778,111,1.002,112,1.109,113,2.912,114,0.861,115,1.606,117,0.361,118,2.864,119,0.789,121,2.805,126,4.607,127,1.511,128,2.697,129,4.232,130,2.658,131,3.472,132,2.92,133,1.945,134,3.808,135,2.728,136,3.472,137,0.709,138,3.997,139,0.575,140,3.466,141,3.309,142,3.227,144,1.695,148,0.603,151,0.615,157,0.288,159,0.366,163,0.38,164,0.773,165,0.304,170,0.621,172,0.324,173,0.567,175,1.511,176,0.857,178,2.041,179,1.021,180,1.021,181,0.718,182,1.872,183,2.765,184,0.348,185,1.239,186,3.406,187,0.718,188,3.272,190,0.605,191,2.405,192,2.995,193,0.462,194,0.615,197,2.178,198,2.786,199,3.475,200,3.036,201,2.838,202,2.668,203,0.863,204,2.941,205,2.442,206,2.874,207,0.552,208,1.379,209,2.519,210,0.666,211,0.474,212,0.468,213,0.423,214,2.815,215,0.359,216,1.287,217,1.076,218,1.077,219,1.557,220,1.084,221,1.456,222,0.436,223,0.396,224,1.652,225,2.669,226,1.217,227,2.321,228,0.45,229,0.372,230,0.723,231,0.323,232,2.363,233,1.521,234,0.804,235,0.468,236,1.306,237,0.51,238,1.027,239,1.057,240,0.653,241,0.396,242,0.341,243,2.54,244,4.127,245,0.402,246,0.402,247,0.552,248,0.436,249,4.518,250,0.284,251,0.985,252,3.493,253,1.457,254,0.552,255,0.552,256,0.696,257,0.419,258,0.468,259,0.515,260,0.552,261,0.515,262,0.552,263,0.936,264,0.552,265,1.689,266,0.552,267,0.515,268,0.875,269,0.489,270,0.488,271,1.337,272,0.681,273,0.33,274,0.39,275,0.515,276,0.385,277,0.505,278,0.45,279,4.244,280,0.835,281,0.353,282,1.8,283,0.552,284,1.347,285,1.236,286,1.16,287,0.685,288,0.296,289,1.351,290,0.441,291,0.441,293,3.117,297,0.705,298,1.242,299,0.28,300,1.916,301,3.478,302,0.783,303,1.941,304,0.488,305,1.942,306,1.503,307,0.94,308,0.372,309,2.363,310,1.677,311,0.936,312,2.173,313,1.738,314,2.852,315,0.287,316,3.941,317,0.472,318,0.393,319,0.811,320,0.532,321,0.399,322,1.157,323,1.152,324,0.399,325,0.39,326,0.986,327,1.292,328,0.468,329,0.419,330,1.205,331,0.506,332,0.33,333,1.249,334,0.488,335,0.269,336,0.986,337,1.925,338,0.488,339,0.723,340,0.522,341,0.31,342,0.331,343,0.436,344,0.538,345,0.45,346,0.552,347,0.331,348,0.488,350,1.71,351,1.008,352,1.324,353,1.773,354,3.24,355,0.515,356,1.403,357,2.028,360,0.32,363,1.879,364,1.333,365,1.592,366,1.369,367,1.52,368,0.666,370,1.729,371,1.103,372,1.753,373,0.621,374,4.491,375,4.083,376,0.67,377,0.863,378,0.638,379,0.753,380,1.256,382,0.436,383,1.223,384,0.638,385,1.202,388,2.077,389,0.488,390,0.488,391,1.521,392,1.851,393,1.189,394,1.622,395,1.347,396,0.515,397,0.986,398,0.552,399,0.552,400,0.552,401,1.242,402,1.289,403,0.986,404,1.289,409,0.339,420,0.28,421,0.318,422,0.552,423,1.324,424,0.723,425,1.057,426,0.45,428,0.432,429,0.986,430,0.552,431,0.515,432,0.552,433,0.552,438,0.481,439,1.3,440,0.552,441,0.936,442,0.538,443,0.552,444,0.692,445,0.552,446,1.202,447,0.584,448,0.382,449,0.363,450,0.357,451,0.515,452,1.525,453,0.368,454,0.753,455,0.764,456,0.552,457,1.724,458,0.584,459,0.986,460,0.552,461,0.39,462,0.552,463,0.552,464,1.521,465,0.515,466,0.552,467,1.496,468,1.726,469,1.733,470,0.737,471,0.896,472,1.677,473,0.835,474,0.863,475,0.552,476,1.146,477,0.552,478,1.652,479,0.802,480,0.552,481,0.375,482,0.346,483,0.316,484,1.193,485,0.552,486,0.488,487,0.552,488,0.552,489,0.61,490,0.552,491,0.811,492,1.057,493,0.515,494,0.552,495,3.259,496,0.355,519,0.399,524,0.811,525,0.341,535,0.753,540,0.368,542,0.402,550,0.317,569,0.328,595,0.423,596,2.512,598,0.38,615,0.382,617,0.673,621,0.325,622,0.427,637,0.641,643,0.331,647,0.886,651,0.375,658,0.402,691,0.488,703,0.375,704,0.986,711,0.468,726,0.37,751,0.393,753,0.632,767,0.39,768,0.468,798,0.324,811,0.441,822,0.317,826,0.456,863,0.366,869,0.382,972,0.267,974,0.416,978,0.402,1037,0.427,1107,0.409,1108,1.04,1145,0.474,1159,0.488,1166,1.521,1192,0.488,1204,0.804,1209,0.552,1215,0.853,1222,0.456,1234,3.034,1243,1.057,1249,1.077,1252,0.737,1253,0.385,1256,0.552,1366,0.409,1525,0.515,1567,0.396,1652,0.552,1656,0.436,1695,0.908,1822,0.436,1837,0.552,2060,0.488,2062,1.03,2330,1.03,2414,1.069,2758,0.368,2881,0.481,2917,0.481,2971,0.515,2972,0.896,2973,0.552,2974,0.552,2975,0.515,2976,0.611,2977,0.568,2978,0.611,2979,0.611,2980,0.611,2981,0.611,2982,1.171,2983,0.611,2984,0.611,2985,0.611,2986,0.611,2987,0.399,2988,0.611,2989,0.488,2990,0.568,2991,0.488]],["component/95",[11,0.279,108,0.486]],["title/96",[11,11.796,72,27.171,672,35.088]],["name/96",[72,0.521,672,0.673]],["text/96",[11,2.237,13,4.602,18,3.609,32,4.305,34,5.327,36,5.356,69,6.863,72,4.291,89,5.716,119,4.334,192,3.966,288,4.485,420,4.236,421,4.826,495,5.589,672,5.541,990,7.401,1005,7.803,2992,9.265]],["component/96",[11,0.279,108,0.486]],["title/97-1",[118,34.841,2993,69.076]],["name/97-1",[]],["text/97-1",[]],["component/97-1",[]],["title/97",[11,13.888,72,31.992]],["name/97",[72,0.943]],["text/97",[0,2.586,11,2.513,18,3.339,40,2.754,41,5.455,47,2.937,67,4.63,69,5.289,72,4.914,77,2.065,81,3.637,84,3.62,113,4.713,118,3.124,120,3.297,124,6.246,128,2.651,129,3.522,130,2.717,131,2.947,132,3.859,135,2.682,136,3.227,137,3.75,138,3.268,139,3.043,140,3.641,141,2.999,142,2.999,143,4.948,144,5.311,145,4.676,146,5.588,147,7.54,148,3.187,149,5.217,150,5.78,151,3.254,152,4.25,153,5.588,154,5.217,155,5.588,156,4.948,157,2.917,158,4.25,159,3.705,160,5.217,161,3.437,162,5.588,163,3.847,164,2.841,165,3.077,166,4.141,167,4.737,168,4.075,169,3.454,170,3.282,171,3.662,172,3.282,173,2.999,174,4.948,175,3.112,176,3.149,177,3.506,178,2.705,672,3.705]],["component/97",[11,0.279,108,0.486]],["title/98-1",[11,13.888,39,39.302]],["name/98-1",[]],["text/98-1",[]],["component/98-1",[]],["title/98-2",[11,13.888,40,30.711]],["name/98-2",[]],["text/98-2",[]],["component/98-2",[]],["title/98",[34,39.718,73,42.614]],["name/98",[34,0.647,73,0.694]],["text/98",[11,2.376,18,2.159,27,3.051,37,1.746,39,4.511,40,4.116,41,3.076,50,1.414,51,2.023,52,2.277,60,1.494,65,3.369,66,2.647,67,1.63,77,1.154,81,2.933,84,2.023,87,2.765,89,2.135,92,2.876,94,2.765,109,3.66,113,4.079,118,1.746,127,1.739,128,3.962,130,2.75,131,1.647,135,3.002,144,1.732,150,2.333,151,1.818,157,1.63,159,2.07,161,3.848,163,3.443,164,2.543,171,4.099,173,2.684,175,4.359,180,1.635,182,1.732,186,2.133,192,1.481,194,1.818,200,1.85,202,1.867,216,1.713,225,2.069,227,1.719,236,3.984,237,1.507,243,2.584,244,1.393,253,1.348,268,3.597,293,1.319,297,2.083,305,1.534,307,1.93,312,2.435,313,2.314,315,4.89,320,3.15,332,1.867,353,4.609,354,3.672,356,2.872,361,2.852,392,3.432,393,1.582,406,1.7,414,2.179,420,1.582,423,2.122,447,1.726,458,1.726,461,2.209,469,1.473,478,4.24,479,2.637,481,2.122,483,1.788,484,4.791,496,2.012,503,1.902,527,2.242,533,2.095,558,3.675,593,1.893,609,2.295,610,1.67,611,1.732,627,3.966,641,2.354,643,3.004,651,3.398,655,5.84,671,2.333,682,2.314,683,2.468,693,2.277,707,2.179,771,3.443,772,2.001,773,4.421,864,2.225,908,3.804,913,2.613,971,2.333,980,2.468,1035,1.92,1037,2.419,1086,1.767,1112,3.222,1134,2.001,1172,2.277,1186,1.99,1187,2.375,1188,3.77,1196,4.24,1204,2.375,1212,2.443,1340,4.426,1343,2.277,1471,3.004,1495,7.163,1567,2.242,1698,2.468,2009,3.123,2022,2.581,2085,2.494,2343,2.122,2426,3.591,2448,5.304,2456,1.781,2495,2.81,2531,3.913,2824,2.522,2852,3.044,2962,2.095,2968,2.179,2994,3.123,2995,2.397,2996,2.314,2997,2.765,2998,1.959,2999,3.461,3000,2.375,3001,2.723,3002,2.468,3003,2.765,3004,2.647,3005,3.123,3006,2.915,3007,3.123,3008,3.123,3009,3.123,6146,2.494]],["component/98",[11,0.279,108,0.486]],["title/99-1",[588,55.237]],["name/99-1",[]],["text/99-1",[]],["component/99-1",[]],["title/99-2",[77,16.997,81,18.859,984,30.139,1962,34.085]],["name/99-2",[]],["text/99-2",[]],["component/99-2",[]],["title/99-3",[133,24.426,356,24.295,984,34.681]],["name/99-3",[]],["text/99-3",[]],["component/99-3",[]],["title/99-4",[469,29.4,984,40.833]],["name/99-4",[]],["text/99-4",[]],["component/99-4",[]],["title/99-5",[957,44.305]],["name/99-5",[]],["text/99-5",[]],["component/99-5",[]],["title/99-6",[27,17.931,483,26.341,759,23.769,910,32.315]],["name/99-6",[]],["text/99-6",[]],["component/99-6",[]],["title/99",[130,21.893,984,40.833]],["name/99",[984,1.204]],["text/99",[11,0.879,14,0.83,18,2.055,21,1.137,26,0.972,27,1.856,35,0.889,50,1.787,57,0.769,60,1.405,63,0.985,77,2.008,92,0.956,99,1.78,103,3.921,105,4.001,106,3.567,113,1.274,114,0.941,115,2.856,130,1.672,133,1.82,142,0.892,164,0.845,183,1.259,186,1.253,198,1.038,205,0.763,214,0.952,216,1.611,221,3.221,227,1.617,244,2.893,245,1.212,253,0.718,269,5.182,271,0.819,279,1.533,288,1.576,299,1.493,302,1.513,305,1.938,308,1.123,310,0.759,312,2.318,313,1.232,316,1.549,317,3.392,318,1.185,320,1.986,331,0.796,335,3.549,338,2.6,340,3.412,353,0.874,356,1.348,361,0.948,367,2.555,374,1.668,420,0.843,449,1.096,483,0.952,502,2.704,503,1.789,536,1.185,541,2.402,550,1.689,569,1.748,571,1.71,572,1.06,573,1.137,603,1.038,604,2.063,610,0.889,611,0.923,621,0.981,623,0.956,641,1.253,679,1.343,726,1.971,759,1.518,764,1.06,827,1.185,909,1.06,910,4.85,917,0.999,925,1.276,933,1.328,951,2.79,957,1.717,972,1.422,981,1.301,982,1.276,984,7.392,985,2.69,1102,1.935,1129,1.13,1155,1.523,1249,0.919,1254,4.978,1357,1.552,1367,1.314,1405,2.6,1505,3.221,1688,2.49,1698,1.314,1709,1.552,2024,1.663,2235,1.41,2253,6.958,2450,1.288,2529,2.561,2531,2.298,2565,3.612,2756,1.523,2768,1.621,2807,2.69,2858,1.621,2905,2.561,2987,1.203,3001,1.45,3010,1.552,3011,1.552,3012,2.741,3013,3.682,3014,5.074,3015,5.074,3016,5.074,3017,1.663,3018,1.843,3019,1.843,3020,1.663,3021,1.663,3022,1.663,3023,1.552,3024,1.663,3025,2.937,3026,1.552,3027,1.472,3028,2.937,3029,3.255,3030,1.843,3031,1.843,3032,1.41,3033,1.552,3034,1.663,3035,2.937,3036,2.937,3037,2.937,3038,2.937,3039,2.937,3040,2.937,3041,2.937,3042,2.937,3043,2.937,3044,2.937,3045,3.944,3046,2.937,3047,2.937,3048,2.741,3049,2.937,3050,2.937,3051,2.937,3052,2.937,3053,2.937,3054,2.937,3055,2.937,3056,2.937,3057,2.937,3058,2.937,3059,2.937,3060,2.937,3061,2.937,3062,2.741,3063,2.937,3064,2.937,3065,2.937,3066,2.937,3067,2.937,3068,1.843,3069,3.255,3070,1.663,3071,1.843,3072,1.843,3073,1.843,3074,1.843,3075,1.843,3076,6.653,3077,1.843,3078,4.372,3079,4.372,3080,1.843,3081,4.372,3082,1.843,3083,1.843,3084,1.843,3085,1.843,3086,1.843,3087,1.843,3088,1.843,3089,3.255,3090,1.552,3091,1.663,3092,3.682,3093,5.315,3094,1.843,3095,3.255,3096,1.843,3097,1.843,3098,3.255,3099,1.843,3100,1.843,3101,1.843,3102,1.843,3103,1.843,3104,1.843,3105,1.843,3106,1.843,3107,1.843,3108,1.843,3109,1.843,3110,1.843,3111,3.682,3112,2.741,3113,1.843,3114,1.843,3115,3.944,3116,3.944,3117,1.472,3118,3.944,3119,1.843,3120,1.663,3121,11.151,3122,3.492,3123,1.663,3124,1.663,3125,1.663,3126,1.663,3127,1.663,3128,1.663,3129,1.663,3130,6.486,3131,6.486,3132,2.937,3133,2.937,3134,1.663,3135,1.843,3136,1.843]],["component/99",[11,0.279,108,0.486]],["title/100",[11,11.655,39,20.828,40,16.275,113,14.328,200,19.569,293,13.954]],["name/100",[40,0.5,293,0.429]],["text/100",[0,1.809,11,2.045,18,1.688,27,2.324,39,2.465,40,4.702,47,2.054,77,1.444,81,1.603,88,2.807,113,2.587,115,3.798,119,2.027,126,2.113,135,3.468,175,2.177,185,1.785,194,2.276,200,2.316,220,4.249,244,2.659,250,2.013,253,3.12,269,5.455,271,3.562,293,4.624,299,3.031,310,1.785,312,1.904,317,1.748,323,1.921,331,1.871,335,1.909,337,2.229,340,1.932,341,4.538,356,3.711,361,2.229,380,2.519,393,4.412,532,2.766,538,3.122,550,2.248,569,2.327,571,5.069,572,4.606,582,4.435,771,2.691,772,2.505,934,2.727,938,2.786,939,3.231,944,3.359,950,4.494,954,3.359,955,3.359,1009,3,1186,2.491,1188,2.946,1217,3.231,1277,5.279,1450,2.709,1520,2.946,1576,3.78,1687,3.122,2718,2.533,2727,3.909,3384,2.828,3411,2.873,4255,3.359,4735,4.023,4737,4.023,5912,7.439,6264,8.606,6344,4.563,6345,4.563,6346,10.162,6347,4.563,6348,4.563,6349,4.563,6350,4.563,6351,4.563,6352,4.563,6353,4.563,6354,9.439,6355,4.563,6356,4.563,6357,6.96,6358,4.563,6359,8.437,6360,6.96,6361,4.563,6362,4.563,6363,4.563,6364,4.563,6365,4.563,6366,4.563,6367,4.563,6368,4.563]],["component/100",[11,0.279,108,0.486]],["title/101",[217,25.791,359,22.418,910,25.608,1134,23.357,2246,24.31,2331,27.977]],["name/101",[225,0.42,1411,0.794]],["text/101",[4,1.692,11,1.809,27,2.067,31,2.684,33,2.067,47,1.766,50,1.522,65,3.537,81,3.057,109,1.72,113,1.458,135,1.613,157,3.428,165,4.105,166,6.933,176,1.894,185,3.705,199,3.616,206,1.965,217,7.235,219,2.684,225,4.292,227,3.616,236,3.657,240,2.077,244,3.325,250,3.382,253,3.504,269,5.168,271,2.613,292,2.098,293,3.15,299,1.709,301,4.646,312,1.637,315,2.758,317,2.371,324,2.431,331,3.568,335,1.641,340,2.621,341,1.886,359,6.184,364,2.605,384,3.2,393,3.328,424,2.298,461,2.378,483,3.761,502,1.909,503,4,550,1.933,569,2,571,3.088,572,3.379,573,3.626,623,1.933,646,1.933,647,1.957,696,2.298,697,2.93,726,2.255,759,2.74,767,2.378,771,2.313,772,2.154,786,2.047,791,4.437,802,6.402,909,3.379,910,6.926,911,6.13,921,3.836,979,3.078,999,2.93,1004,2.329,1086,1.901,1134,3.398,1135,4.406,1244,5.302,1249,1.857,1352,2.47,1522,2.63,1576,3.362,1697,2.93,2003,3.137,2005,2.745,2094,3.361,2246,2.241,2253,2.298,2331,2.579,2456,1.917,2566,3.277,2808,3.577,2996,2.49,3137,3.725,3138,5.302,3139,3.361,3140,2.976,3141,2.579,3142,3.725,3143,5.877,3144,3.725,3145,4.695,3146,3.725,3147,3.725,3148,3.725,3149,3.725,3150,3.725,3151,3.137,3152,3.361,3153,3.137,3154,3.137,3155,3.725,3156,3.725,3157,3.725,3158,3.725,3159,3.725,3160,3.725,3161,3.725,3162,3.361,3163,3.725]],["component/101",[11,0.279,108,0.486]],["title/102-1",[588,55.237]],["name/102-1",[]],["text/102-1",[]],["component/102-1",[]],["title/102-2",[77,16.997,81,18.859,984,30.139,1962,34.085]],["name/102-2",[]],["text/102-2",[]],["component/102-2",[]],["title/102-3",[133,24.426,356,24.295,984,34.681]],["name/102-3",[]],["text/102-3",[]],["component/102-3",[]],["title/102-4",[469,29.4,984,40.833]],["name/102-4",[]],["text/102-4",[]],["component/102-4",[]],["title/102-5",[957,44.305]],["name/102-5",[]],["text/102-5",[]],["component/102-5",[]],["title/102-6",[27,17.931,483,26.341,759,23.769,910,32.315]],["name/102-6",[]],["text/102-6",[]],["component/102-6",[]],["title/102",[130,21.893,984,40.833]],["name/102",[984,1.204]],["text/102",[11,0.354,14,0.793,18,1.989,21,1.087,26,0.929,27,1.483,35,0.85,50,1.723,57,0.735,60,1.35,63,0.942,69,1.087,92,0.914,99,1.711,103,3.829,105,3.913,106,3.484,113,1.224,114,0.899,115,2.772,130,1.619,133,1.756,141,1.514,142,0.853,164,0.808,183,1.209,186,1.204,205,2.115,214,0.91,216,1.548,218,1.559,221,3.134,227,1.553,244,2.353,245,1.159,253,0.686,269,5.428,271,0.783,279,1.473,281,1.018,288,2.042,302,1.453,305,1.869,308,1.073,310,1.737,312,2.244,316,1.488,317,3.322,320,1.916,327,1.054,331,0.76,335,3.471,338,2.498,340,3.332,356,1.295,361,0.906,367,2.465,374,1.603,409,1.735,420,0.805,448,1.955,449,1.047,483,0.91,502,2.617,503,1.719,536,1.133,541,2.318,550,1.622,603,0.992,604,1.982,611,0.882,621,0.938,623,0.914,641,1.198,679,1.283,726,1.066,759,1.458,764,3.362,827,1.133,841,1.178,909,1.013,910,4.736,917,0.955,925,1.22,933,1.269,951,5.951,957,2.225,972,1.366,981,1.244,982,1.22,984,7.325,985,2.584,1102,2.508,1129,1.08,1155,1.456,1254,4.853,1367,1.256,1398,1.589,1405,2.498,1505,1.298,1688,2.392,1698,1.256,1709,1.484,2235,1.347,2253,7.023,2450,1.231,2453,2.751,2529,3.317,2531,2.208,2565,3.485,2756,3.485,2807,2.584,2858,1.549,2905,2.46,2987,1.15,3001,1.386,3010,1.484,3011,1.484,3012,2.634,3013,4.301,3014,4.925,3015,4.925,3016,4.925,3017,1.589,3020,1.589,3021,1.589,3022,1.589,3023,1.484,3024,1.589,3025,2.821,3026,1.484,3027,1.407,3028,2.821,3032,2.392,3033,1.484,3034,2.821,3035,2.821,3036,2.821,3037,2.821,3038,2.821,3039,2.821,3040,2.821,3041,2.821,3042,2.821,3043,2.821,3044,2.821,3045,3.805,3046,2.821,3047,2.821,3048,2.634,3049,2.821,3050,2.821,3051,2.821,3052,2.821,3053,2.821,3054,2.821,3055,2.821,3056,2.821,3057,2.821,3058,2.821,3059,2.821,3060,2.821,3061,2.821,3062,2.634,3063,2.821,3064,2.821,3065,2.821,3066,2.821,3067,2.821,3090,1.484,3091,1.589,3092,4.301,3093,5.171,3111,4.301,3112,3.552,3115,3.805,3116,3.805,3118,3.805,3120,1.589,3121,11.085,3122,3.369,3123,1.589,3124,1.589,3125,1.589,3126,1.589,3127,1.589,3128,1.589,3129,1.589,3130,6.323,3131,6.323,3132,2.821,3133,2.821,3134,1.589,3164,1.762,3165,1.589,3166,1.762,3167,4.217,3168,3.127,3169,1.762,3170,3.127,3171,1.762,3172,4.217,3173,1.762,3174,1.762,3175,1.762,3176,1.762,3177,1.762,3178,1.762,3179,1.762,3180,1.762,3181,1.762,3182,3.127,3183,1.762,3184,3.127,3185,1.762,3186,1.762,3187,1.762,3188,4.217,3189,1.762,3190,1.762,3191,1.762,3192,1.762,3193,1.762,3194,1.762,3195,1.762]],["component/102",[11,0.279,108,0.486]],["title/103-1",[496,48.809]],["name/103-1",[]],["text/103-1",[]],["component/103-1",[]],["title/103-2",[40,20.044,133,18.77,186,17.349,229,27.461,483,23.291]],["name/103-2",[]],["text/103-2",[]],["component/103-2",[]],["title/103-3",[7,28.573,40,30.28,133,18.77,186,17.349]],["name/103-3",[]],["text/103-3",[]],["component/103-3",[]],["title/103-4",[7,28.573,133,18.77,186,17.349,909,39.16]],["name/103-4",[]],["text/103-4",[]],["component/103-4",[]],["title/103-5",[77,16.997,81,18.859,1962,34.085,3196,37.568]],["name/103-5",[]],["text/103-5",[]],["component/103-5",[]],["title/103-6",[130,18.595,1962,39.221,3196,43.228]],["name/103-6",[]],["text/103-6",[]],["component/103-6",[]],["title/103-7",[133,24.426,1123,52.928,3197,52.928]],["name/103-7",[]],["text/103-7",[]],["component/103-7",[]],["title/103-8",[54,28.183,78,24.318,225,16.829,3198,37.967,3199,37.967]],["name/103-8",[]],["text/103-8",[]],["component/103-8",[]],["title/103",[130,18.595,225,21.9,320,26.654]],["name/103",[3198,0.947,3199,0.947]],["text/103",[0,0.902,7,1.37,9,1.705,10,1.182,14,0.973,18,1.458,19,1.182,27,1.74,33,1.199,45,1.008,50,1.529,57,0.902,68,1.09,71,3.767,81,0.8,102,1.166,103,1.108,105,2.458,106,2.307,113,1.465,114,1.91,115,3.461,119,1.011,130,2.75,133,3.45,148,1.112,151,1.136,157,1.762,169,1.205,170,2.622,171,1.278,172,1.145,173,1.046,183,2.281,185,0.89,186,1.904,192,2.525,213,1.497,218,1.078,220,3.792,223,1.4,225,4.398,228,1.593,240,1.205,244,1.991,249,3.073,252,0.95,253,1.458,269,5.564,271,3.482,281,1.25,282,2.591,292,2.786,293,2.783,297,1.301,299,1.716,304,1.727,313,1.445,317,3.5,320,0.982,323,0.958,335,3.217,340,2.973,347,2.681,360,1.131,364,0.958,380,1.256,393,0.988,420,0.988,421,1.126,447,1.078,483,1.117,486,1.727,502,1.108,509,2.668,510,2.989,515,1.541,529,1.325,541,2.719,556,1.727,593,1.182,621,1.15,651,1.325,693,1.422,774,2.757,776,1.575,835,2.925,909,1.243,934,2.355,938,1.39,940,2.567,946,2.825,949,2.862,951,4.255,952,3.151,957,1.14,975,2.355,995,1.361,1008,1.483,1054,1.95,1058,1.7,1067,1.786,1075,3.943,1121,3.952,1134,2.163,1144,1.755,1165,1.188,1199,1.95,1326,1.117,1405,1.727,1470,1.727,1474,1.95,1568,1.351,1576,4.739,1701,2.567,1707,3.565,1908,1.593,1962,1.445,2103,1.541,2246,1.301,2253,2.309,2453,1.901,2531,2.641,2714,3.735,2726,1.727,2913,1.786,3010,1.82,3011,1.82,3152,1.95,3196,4.912,3197,5.321,3198,7.843,3199,8.264,3200,2.162,3201,2.162,3202,2.162,3203,2.162,3204,2.162,3205,1.95,3206,2.162,3207,2.162,3208,1.676,3209,8.675,3210,3.742,3211,1.82,3212,2.162,3213,3.151,3214,3.742,3215,3.742,3216,2.862,3217,3.742,3218,3.742,3219,3.742,3220,3.742,3221,3.742,3222,3.742,3224,3.742,3225,3.742,3226,3.742,3227,2.162,3228,4.948,3229,4.948,3230,4.948,3231,3.742,3232,3.742,3233,3.742,3234,2.162,3235,2.162,3236,2.162,3237,2.162,3238,2.162,3239,2.162,3240,1.95,3241,1.95,3242,2.162,3243,2.162,3244,2.162,3245,2.162,3246,2.162,3247,2.162,3248,2.162,3249,1.82,3250,1.95,3251,2.162,3252,2.162,3253,2.162,3254,2.162,3255,2.162,3256,2.162,3257,2.162,3258,2.162,3259,3.742,3260,2.162,3261,2.162,3262,2.162,3263,2.162,3264,3.376,3265,5.614,3266,2.162,3267,2.162,3268,2.162,3269,3.742,3270,3.742,3271,2.162,3272,3.742,3273,2.162,3274,2.162]],["component/103",[11,0.279,108,0.486]],["title/104-1",[302,32.097,374,35.397]],["name/104-1",[]],["text/104-1",[]],["component/104-1",[]],["title/104-2",[481,42.341,656,35.686]],["name/104-2",[]],["text/104-2",[]],["component/104-2",[]],["title/104-3",[128,25.111,243,27.351,656,30.31]],["name/104-3",[]],["text/104-3",[]],["component/104-3",[]],["title/104-4",[164,23.385,243,23.769,458,25.422,798,27.017]],["name/104-4",[]],["text/104-4",[]],["component/104-4",[]],["title/104-5",[11,10.251,27,17.931,40,22.669,243,23.769]],["name/104-5",[]],["text/104-5",[]],["component/104-5",[]],["title/104",[27,20.633,243,27.351,656,30.31]],["name/104",[243,0.524,656,0.581]],["text/104",[0,1.734,11,0.835,17,2.033,40,1.847,50,1.698,54,2.597,68,2.096,75,2.231,77,1.385,81,1.537,95,2.933,96,2.402,101,2.272,106,3.638,113,2.505,114,2.12,115,4.94,126,2.026,128,3.34,130,1.317,133,1.73,161,2.305,164,1.906,169,2.316,180,1.963,183,1.607,184,2.364,192,1.778,237,2.787,242,2.316,243,4.662,244,1.672,252,1.825,253,1.618,256,3.805,269,5.329,279,3.675,281,3.699,302,1.93,310,1.711,312,1.825,317,3.819,335,2.82,340,2.854,354,3.615,361,3.292,364,1.842,367,2.428,393,1.899,465,3.499,474,4.715,481,3.922,484,2.294,491,4.431,493,3.499,525,2.316,529,4.784,551,4.114,569,3.436,582,3.167,623,2.155,630,2.615,637,2.272,656,3.306,657,3.66,777,5.112,798,2.202,806,2.777,827,2.671,870,2.615,974,2.825,1037,2.904,1326,3.306,1471,2.251,1505,3.061,1943,3.177,2022,4.771,2253,2.563,2439,3.373,2442,4.473,2487,2.328,2771,3.99,2831,3.99,2968,2.615,3205,7.041,3216,3.177,3275,3.748,3276,4.155,3277,4.155,3278,3.748,3279,3.748,3280,6.864,3281,3.748,3282,3.748,3283,3.748,3284,3.748,3285,4.155,3286,4.155,3287,4.155,3288,5.773,3289,4.155,3290,7.805,3291,3.748,3292,3.748,3293,3.748,3294,4.155,3295,4.155,3296,4.155,3297,4.155,3298,4.155,3299,4.155,3300,4.155,3301,4.155,3302,4.155,3303,4.155,3304,3.748,3305,3.748,3306,4.155,3307,4.155,3308,6.399,3309,4.155,3310,4.155,3311,4.155,3312,7.805,3313,4.155,3314,4.155,3315,4.155,3316,3.027,3317,4.155,3318,4.155,3319,4.155,3320,4.155,3321,4.155,3322,4.155,3323,6.399,3324,4.155,3325,6.399,3326,3.748,3327,5.389,3328,5.773]],["component/104",[11,0.279,108,0.486]],["title/105-1",[11,13.888,3329,62.317]],["name/105-1",[]],["text/105-1",[]],["component/105-1",[]],["title/105-2",[11,11.796,177,33.208,1704,33.38]],["name/105-2",[]],["text/105-2",[]],["component/105-2",[]],["title/105-3",[3330,70.719]],["name/105-3",[]],["text/105-3",[]],["component/105-3",[]],["title/105-4",[3331,75.757]],["name/105-4",[]],["text/105-4",[]],["component/105-4",[]],["title/105-5",[2088,70.719]],["name/105-5",[]],["text/105-5",[]],["component/105-5",[]],["title/105-6",[3332,75.757]],["name/105-6",[]],["text/105-6",[]],["component/105-6",[]],["title/105-7",[3333,75.757]],["name/105-7",[]],["text/105-7",[]],["component/105-7",[]],["title/105-8",[11,11.796,161,32.552,177,33.208]],["name/105-8",[]],["text/105-8",[]],["component/105-8",[]],["title/105-9",[3334,75.757]],["name/105-9",[]],["text/105-9",[]],["component/105-9",[]],["title/105-10",[3335,70.719]],["name/105-10",[]],["text/105-10",[]],["component/105-10",[]],["title/105-11",[3336,70.719]],["name/105-11",[]],["text/105-11",[]],["component/105-11",[]],["title/105-12",[3337,75.757]],["name/105-12",[]],["text/105-12",[]],["component/105-12",[]],["title/105-13",[361,35.541,1704,39.302]],["name/105-13",[]],["text/105-13",[]],["component/105-13",[]],["title/105-14",[140,40.601,1704,39.302]],["name/105-14",[]],["text/105-14",[]],["component/105-14",[]],["title/105-15",[3338,75.757]],["name/105-15",[]],["text/105-15",[]],["component/105-15",[]],["title/105-16",[3339,75.757]],["name/105-16",[]],["text/105-16",[]],["component/105-16",[]],["title/105-17",[3340,83.973]],["name/105-17",[]],["text/105-17",[]],["component/105-17",[]],["title/105-18",[3341,75.757]],["name/105-18",[]],["text/105-18",[]],["component/105-18",[]],["title/105-19",[800,44.413,1704,39.302]],["name/105-19",[]],["text/105-19",[]],["component/105-19",[]],["title/105",[323,30.619,1704,39.302]],["name/105",[361,0.579,1704,0.64]],["text/105",[11,1.674,17,0.883,26,0.952,27,3.509,32,1.997,37,0.91,38,0.956,47,2.037,51,1.054,58,1.627,67,1.504,68,2.167,70,1.054,71,2.101,75,0.969,77,2.368,81,1.181,84,3.838,88,1.168,93,1.021,109,1.984,114,0.921,119,1.494,123,1.186,128,2.811,130,1.882,133,0.751,135,0.781,139,1.569,140,5.245,157,1.504,158,2.191,161,5.092,164,1.971,170,0.956,171,1.066,172,0.956,177,4.283,183,1.235,184,1.026,190,3.393,192,1.367,201,3.7,205,0.747,215,1.06,223,1.168,230,1.97,243,0.841,250,0.838,253,2.313,269,4.293,271,1.911,285,1.032,288,2.515,293,1.98,297,4.274,299,1.465,307,1.006,310,2.14,317,0.728,323,2.911,335,0.795,340,0.804,342,0.977,347,2.815,353,2.463,354,1.99,356,3.3,361,2.673,364,0.799,369,4.192,371,0.921,376,1.032,378,0.982,392,0.893,393,1.965,409,1.772,414,4.133,428,1.273,451,2.689,455,1.177,505,1.186,506,1.216,519,2.084,529,1.106,540,1.085,550,2.695,558,3.147,560,3.973,562,3.531,582,3.515,603,1.016,610,2.865,617,2.471,619,5.493,623,1.657,637,1.747,643,0.977,646,0.936,647,0.948,657,1.032,674,1.085,679,2.326,683,2.277,690,1.329,702,0.977,741,1.286,764,1.836,771,1.983,772,1.846,786,1.755,798,0.956,800,6.047,857,1.128,863,1.079,922,2.069,929,1.16,938,1.16,972,1.395,977,5.079,987,2.353,995,4.133,1004,1.128,1010,3.877,1012,1.419,1028,1.856,1035,4.198,1046,1.286,1086,0.921,1109,2.172,1165,2.855,1186,1.836,1196,6.095,1249,1.592,1353,1.151,1366,1.206,1420,1.237,1471,1.73,1494,1.206,1519,4.375,1558,3.973,1559,2.153,1560,1.627,1567,1.168,1607,1.441,1609,4.569,1613,1.16,1619,2.442,1638,5.924,1639,1.627,1645,1.781,1649,1.227,1704,6.804,1708,1.143,1963,2.277,2088,1.519,2089,4.542,2157,1.151,2499,2.512,2577,3.244,2718,2.512,2734,1.177,2758,5.659,2821,1.586,2822,1.732,2879,1.586,2904,1.362,2966,1.441,2995,1.249,2998,4.02,3000,1.237,3122,1.441,3141,2.211,3326,1.627,3329,7.796,3330,8.66,3331,2.881,3334,6.408,3335,1.519,3336,2.689,3342,1.804,3343,3.193,3344,2.326,3345,1.804,3346,3.433,3347,6.712,3348,3.193,3349,1.441,3350,6.651,3351,1.804,3352,1.804,3353,1.804,3354,1.804,3355,1.286,3356,5.939,3357,5.358,3358,1.804,3359,1.804,3360,1.804,3361,1.379,3362,1.627,3363,1.519,3364,1.519,3365,1.286,3366,1.627,3367,1.804,3368,3.286,3369,1.519,3370,1.804,3371,1.804,3372,1.804,3373,1.286,3374,1.519,3375,1.519,3376,3.067,3377,1.379,3378,3.193,3379,3.193,3380,2.881,3381,1.362,3382,1.804,3383,1.804,3384,3.391,3385,1.441,3386,1.804,3387,1.329,3388,1.804,3389,1.804,3390,1.804,3391,1.627,3392,1.804,3393,1.627,3394,1.804,3395,1.519,3396,2.881,3397,1.804,3398,1.804,3399,5.195]],["component/105",[11,0.279,108,0.486]],["title/106-1",[68,42.354]],["name/106-1",[]],["text/106-1",[]],["component/106-1",[]],["title/106-2",[2998,47.532]],["name/106-2",[]],["text/106-2",[]],["component/106-2",[]],["title/106-3",[2998,39.1,3400,58.174]],["name/106-3",[]],["text/106-3",[]],["component/106-3",[]],["title/106-4",[3401,75.757]],["name/106-4",[]],["text/106-4",[]],["component/106-4",[]],["title/106-5",[3402,83.973]],["name/106-5",[]],["text/106-5",[]],["component/106-5",[]],["title/106-6",[3403,83.973]],["name/106-6",[]],["text/106-6",[]],["component/106-6",[]],["title/106-7",[3404,83.973]],["name/106-7",[]],["text/106-7",[]],["component/106-7",[]],["title/106-8",[3405,83.973]],["name/106-8",[]],["text/106-8",[]],["component/106-8",[]],["title/106-9",[3406,83.973]],["name/106-9",[]],["text/106-9",[]],["component/106-9",[]],["title/106-10",[3407,75.757]],["name/106-10",[]],["text/106-10",[]],["component/106-10",[]],["title/106-11",[3408,83.973]],["name/106-11",[]],["text/106-11",[]],["component/106-11",[]],["title/106-12",[3409,83.973]],["name/106-12",[]],["text/106-12",[]],["component/106-12",[]],["title/106-13",[3385,67.077]],["name/106-13",[]],["text/106-13",[]],["component/106-13",[]],["title/106-14",[1326,35.686,2998,39.1]],["name/106-14",[]],["text/106-14",[]],["component/106-14",[]],["title/106-15",[226,38.901,290,49.776]],["name/106-15",[]],["text/106-15",[]],["component/106-15",[]],["title/106-16",[226,38.901,957,36.445]],["name/106-16",[]],["text/106-16",[]],["component/106-16",[]],["title/106-17",[2718,40.373,2998,39.1]],["name/106-17",[]],["text/106-17",[]],["component/106-17",[]],["title/106-18",[957,26.901,2998,28.86,3410,45.997,3411,33.807]],["name/106-18",[]],["text/106-18",[]],["component/106-18",[]],["title/106-19",[47,27.814,2998,33.208,3373,41.834]],["name/106-19",[]],["text/106-19",[]],["component/106-19",[]],["title/106-20",[37,22.739,38,23.889,370,25.922,753,24.318,1326,23.291]],["name/106-20",[]],["text/106-20",[]],["component/106-20",[]],["title/106-21",[753,24.318,1326,23.291,1471,24.429,3373,32.147,3412,34.479]],["name/106-21",[]],["text/106-21",[]],["component/106-21",[]],["title/106-22",[370,25.922,1326,23.291,1471,24.429,3373,32.147,3412,34.479]],["name/106-22",[]],["text/106-22",[]],["component/106-22",[]],["title/106-23",[753,24.318,1326,23.291,2456,23.196,3373,32.147,3412,34.479]],["name/106-23",[]],["text/106-23",[]],["component/106-23",[]],["title/106-24",[370,25.922,1326,23.291,2456,23.196,3373,32.147,3412,34.479]],["name/106-24",[]],["text/106-24",[]],["component/106-24",[]],["title/106-25",[1704,33.38,2998,33.208,3413,52.928]],["name/106-25",[]],["text/106-25",[]],["component/106-25",[]],["title/106-26",[1568,43.182,3368,52.828]],["name/106-26",[]],["text/106-26",[]],["component/106-26",[]],["title/106-27",[253,22.852,1568,36.675,3368,44.869]],["name/106-27",[]],["text/106-27",[]],["component/106-27",[]],["title/106-28",[3414,75.757]],["name/106-28",[]],["text/106-28",[]],["component/106-28",[]],["title/106-29",[3415,75.757]],["name/106-29",[]],["text/106-29",[]],["component/106-29",[]],["title/106-30",[3416,75.757]],["name/106-30",[]],["text/106-30",[]],["component/106-30",[]],["title/106-31",[93,39.1,859,49.256]],["name/106-31",[]],["text/106-31",[]],["component/106-31",[]],["title/106-32",[175,34.706,2998,39.1]],["name/106-32",[]],["text/106-32",[]],["component/106-32",[]],["title/106-33",[469,35.74]],["name/106-33",[]],["text/106-33",[]],["component/106-33",[]],["title/106-34",[139,28.818,299,26.909,2998,33.208]],["name/106-34",[]],["text/106-34",[]],["component/106-34",[]],["title/106-35",[253,26.906,3400,58.174]],["name/106-35",[]],["text/106-35",[]],["component/106-35",[]],["title/106",[3417,75.757]],["name/106",[139,0.553,2998,0.637]],["text/106",[0,0.751,4,0.182,9,0.519,11,0.482,12,0.77,13,0.199,14,0.351,15,0.397,21,0.703,22,0.685,24,0.211,25,0.781,26,0.601,27,2.46,32,0.978,33,0.223,35,1.156,36,1.843,37,1.209,38,1.27,45,1.369,46,1.752,47,2.678,49,1.157,50,0.979,53,0.965,59,0.703,60,0.173,63,0.609,65,0.718,67,2.66,68,0.746,70,0.456,74,3.086,75,0.216,76,0.574,77,0.38,78,0.217,81,0.289,84,0.456,86,0.589,90,0.299,93,0.227,97,0.233,99,1.462,100,0.222,101,0.623,102,0.614,103,1.228,105,2.227,106,1.808,113,0.579,117,2.026,118,0.203,119,1.603,128,2.076,130,0.931,132,0.181,135,0.64,139,3.384,140,0.459,144,0.201,148,1.233,149,0.338,152,0.275,157,0.991,158,1.235,160,2.887,161,0.223,163,0.707,164,3.815,167,0.307,169,0.224,170,3.413,172,0.783,175,3.112,176,0.915,178,0.497,180,0.369,181,0.478,183,0.814,185,0.322,187,0.246,190,2.003,192,0.172,194,0.211,199,0.734,201,1.097,205,0.166,215,0.459,216,0.199,217,0.256,221,0.378,226,3.694,230,0.248,231,0.601,236,0.572,237,0.644,240,0.435,242,1.637,244,1.804,245,0.749,248,0.812,250,0.978,252,1.4,253,1.144,265,0.568,268,0.405,269,4.899,271,3.063,274,0.727,280,1.054,281,1.041,285,1.204,288,0.716,289,2.424,290,6.178,291,0.562,293,0.563,296,1.245,297,1.442,299,0.184,302,0.187,303,3.342,305,0.346,308,1.459,309,0.421,310,0.165,317,3.434,323,1.988,324,0.262,325,0.498,328,0.307,330,1.49,331,1.48,332,0.614,335,2.989,337,1.64,340,2.083,341,0.395,342,0.218,347,0.218,353,0.853,360,0.773,361,0.402,363,0.223,364,0.178,369,0.727,370,2.351,371,2.289,373,0.414,378,0.98,383,0.442,392,0.386,393,1.457,406,0.559,407,0.214,409,1.483,414,1.682,424,0.482,439,0.47,444,0.461,450,1.052,455,0.262,458,0.2,461,0.498,469,1.138,472,0.224,479,0.703,489,5.244,495,0.392,507,1.163,514,0.286,519,0.262,520,1.76,525,0.224,529,0.478,532,0.256,536,0.502,538,0.562,540,1.442,544,0.321,547,0.338,548,0.293,550,2.854,558,0.414,569,2.082,571,1.259,573,0.912,582,3.246,610,0.713,611,1.199,617,1.211,621,0.787,623,3.574,629,0.248,630,0.491,633,0.506,641,0.774,644,0.482,645,0.93,646,0.405,647,0.211,649,0.227,651,0.246,653,1.149,657,0.651,660,0.959,661,1.131,667,0.307,668,0.225,674,0.242,696,0.482,702,0.423,703,0.478,707,0.717,709,0.286,713,0.219,718,0.522,726,0.243,751,0.258,753,3.342,759,1.117,764,1.378,765,0.557,772,0.855,778,4.144,786,1.317,789,0.296,800,0.258,803,1.682,816,0.451,818,0.26,827,0.258,835,0.461,837,0.321,842,0.522,856,0.253,857,2.143,859,0.557,863,1.077,871,0.249,879,0.253,907,0.286,908,0.275,909,0.231,912,0.321,917,0.617,929,0.502,957,3.056,970,0.307,972,0.341,977,0.669,991,0.286,993,0.624,995,2.006,997,3.052,1004,1.671,1010,5.596,1028,0.662,1030,0.727,1035,1.168,1036,0.645,1039,0.275,1046,0.557,1055,2.135,1056,0.531,1058,0.896,1062,0.311,1064,0.557,1086,2.19,1089,0.54,1102,0.239,1109,0.273,1119,0.83,1129,0.246,1131,0.509,1135,0.689,1137,0.303,1156,0.321,1161,0.362,1165,0.626,1167,0.278,1186,0.85,1187,0.275,1188,1.005,1202,0.299,1215,0.83,1216,1.102,1224,1.224,1249,2.888,1252,0.253,1253,0.253,1270,0.657,1325,0.296,1326,3.2,1327,0.546,1338,0.774,1340,0.256,1353,1.149,1364,0.316,1367,0.286,1368,0.321,1380,1.043,1393,1.516,1417,0.321,1421,0.321,1422,0.321,1423,0.624,1434,1.089,1435,1.311,1446,0.597,1450,0.251,1471,1.448,1493,0.296,1494,0.522,1511,0.321,1512,0.321,1514,0.338,1520,0.273,1521,0.338,1559,3.905,1568,1.671,1576,0.446,1602,0.703,1607,1.682,1613,1.354,1615,0.959,1619,0.307,1645,1.174,1649,0.774,1687,0.289,1688,0.307,1696,0.362,1704,3.92,1705,0.722,1706,0.281,1708,0.495,1840,0.338,1901,0.271,1902,0.575,1908,0.575,1942,0.296,1945,0.557,1963,1.284,2022,1.342,2038,0.562,2085,0.289,2089,0.871,2092,1.245,2103,0.286,2114,0.296,2117,0.289,2118,1.947,2157,0.944,2239,0.871,2246,0.47,2253,0.703,2333,0.526,2343,0.246,2415,0.959,2423,0.281,2434,0.326,2443,0.326,2451,2.271,2456,1.882,2499,0.316,2503,0.332,2577,1.359,2580,1.868,2600,0.353,2625,0.321,2705,0.286,2716,2.508,2718,5.011,2734,0.743,2758,2.333,2797,0.687,2801,1.42,2875,1.326,2878,0.345,2885,0.634,2909,0.332,2917,0.316,2961,0.275,2966,0.321,2968,0.93,2972,0.597,2995,4.2,2997,0.321,2998,6.895,3032,0.597,3062,0.338,3265,0.338,3316,1.947,3330,0.338,3332,0.362,3335,1.773,3336,1.245,3337,1.334,3338,1.027,3339,1.027,3341,0.362,3346,2.135,3347,0.338,3350,0.624,3355,3.923,3368,3.281,3373,3.33,3374,2.685,3375,2.887,3380,0.362,3381,0.303,3384,0.262,3385,3.582,3387,3.573,3393,0.362,3395,2.251,3400,7.321,3401,3.093,3407,0.362,3410,1.9,3411,1.396,3412,0.307,3413,1.9,3414,0.704,3415,0.362,3416,1.027,3417,0.704,3418,1.8,3419,2.673,3420,2.588,3421,3.266,3422,0.402,3423,5.501,3424,1.969,3425,4.484,3426,0.781,3427,0.338,3428,1.139,3429,3.3,3430,0.91,3431,0.307,3432,0.91,3433,2.473,3434,3.658,3435,0.402,3436,0.307,3437,0.402,3438,0.402,3439,0.402,3440,0.362,3441,0.402,3442,0.402,3443,0.402,3444,0.704,3445,0.321,3446,0.402,3447,0.402,3448,0.402,3449,0.402,3450,0.362,3451,0.402,3452,2.018,3453,0.402,3454,0.402,3455,0.575,3456,3.3,3457,4.963,3458,0.402,3459,2.106,3460,2.649,3461,3.428,3462,1.139,3463,2.411,3464,0.402,3465,0.402,3466,1.139,3467,0.402,3468,0.338,3469,0.402,3470,0.704,3471,0.624,3472,1.419,3473,0.402,3474,1.478,3475,0.402,3476,0.402,3477,0.402,3478,0.402,3479,0.597,3480,0.789,3481,0.338,3482,1.077,3483,1.245,3484,0.338,3485,0.781,3486,0.781,3487,0.781,3488,1.334,3489,1.245,3490,0.402,3491,0.402,3492,0.402,3493,1.139,3494,1.139,3495,1.139,3496,1.139,3497,1.139,3498,1.478,3499,1.139,3500,0.781,3501,0.781,3502,6.065,3503,5.347,3504,0.402,3505,0.781,3506,1.139,3507,0.704,3508,0.959,3509,0.781,3510,1.334,3511,2.251,3512,0.781,3513,0.781,3514,0.781,3515,0.402,3516,0.402,3517,0.402,3518,1.478,3519,0.307,3520,1.245,3521,0.402,3522,1.139,3523,0.839,3524,1.027,3525,0.959,3526,0.402,3527,0.402,3528,0.402,3529,0.402,3530,0.321,3531,0.781,3532,0.402,3533,0.402,3534,1.139,3535,1.139,3536,0.402,3537,1.139,3538,0.402,3539,0.402,3540,0.402,3541,0.402,3542,2.396,3543,1.8,3544,3.428,3545,0.657,3546,0.657,3547,0.781,3548,1.116,3549,0.402,3550,0.402,3551,1.139,3552,0.402,3553,1.139,3554,1.139,3555,0.781,3556,0.402,3557,1.478,3558,0.402,3559,1.139,3560,1.139,3561,1.139,3562,1.139,3563,0.402,3564,0.402,3565,0.293,3566,0.402,3567,1.478,3568,0.402,3569,0.402,3570,0.402,3571,0.402,3572,0.402,3573,0.402,3574,0.402,3575,0.402,3576,0.781,3577,0.402,3578,0.402,3579,0.402,3580,0.959,3581,0.402,3582,0.704,3583,0.781,3584,0.402,3585,0.781,3586,0.402,3587,0.781,3588,0.402,3589,0.402,3590,0.781,3591,0.402,3592,0.362,3593,0.402,3594,0.264,3595,1.139,3596,0.402,3597,0.781,3598,0.781,3599,0.402,3600,0.402,3601,0.402,3602,0.402,3603,0.402,3604,0.402,3605,0.781,3606,3.188,3607,0.781,3608,0.781,3609,0.402,3610,0.402,3611,0.402,3612,0.362,3613,0.402,3614,0.624,3615,0.353,3616,1.139,3617,0.781,3618,0.781,3619,0.781,3620,0.781,3621,1.139,3622,0.781,3623,0.657,3624,0.781,3625,0.402,3626,0.338,3627,0.321,3628,0.338,3629,0.338,3630,0.402,3631,0.402,3632,0.402,3633,0.402,3634,0.402,3635,0.781,3636,0.402,3637,0.402,3638,1.139,3639,0.402,3640,0.402,3641,0.402,3642,0.307,3643,0.781,3644,0.402,3645,0.362,3646,0.402,3647,0.402,3648,0.402,3649,0.402,3650,0.781,3651,0.402,3652,0.402,3653,0.781,3654,0.362,3655,0.362,3656,0.402,3657,0.402,3658,0.402,3659,0.402,3660,0.402,3661,0.402,3662,0.402,3663,0.338,3664,0.402,3665,0.353,3666,0.402,3667,0.402,3668,0.704,3669,0.402,3670,0.839,3671,0.91,3672,0.402,3673,0.402,3674,0.402,3675,0.402,3676,0.338,3677,0.402,3678,2.673,3679,1.478,3680,0.781,3681,0.781,3682,0.402,3683,0.704,3684,1.334,3685,0.402,3686,0.402,3687,0.402,3688,0.402,3689,0.781,3690,0.781,3691,0.781,3692,0.781,3693,0.402,3694,0.959]],["component/106",[11,0.279,108,0.486]],["title/107-1",[113,27.038,3411,45.802]],["name/107-1",[]],["text/107-1",[]],["component/107-1",[]],["title/107-2",[93,39.1,2580,48.285]],["name/107-2",[]],["text/107-2",[]],["component/107-2",[]],["title/107-3",[244,27.793,3695,50.897]],["name/107-3",[]],["text/107-3",[]],["component/107-3",[]],["title/107-4",[3696,75.757]],["name/107-4",[]],["text/107-4",[]],["component/107-4",[]],["title/107-5",[139,33.93,1645,38.515]],["name/107-5",[]],["text/107-5",[]],["component/107-5",[]],["title/107-6",[1645,38.515,3594,45.438]],["name/107-6",[]],["text/107-6",[]],["component/107-6",[]],["title/107-7",[2379,70.719]],["name/107-7",[]],["text/107-7",[]],["component/107-7",[]],["title/107-8",[274,44.092,1645,38.515]],["name/107-8",[]],["text/107-8",[]],["component/107-8",[]],["title/107-9",[309,37.26,1645,38.515]],["name/107-9",[]],["text/107-9",[]],["component/107-9",[]],["title/107-10",[1645,38.515,3697,62.317]],["name/107-10",[]],["text/107-10",[]],["component/107-10",[]],["title/107-11",[938,53.991]],["name/107-11",[]],["text/107-11",[]],["component/107-11",[]],["title/107-12",[1420,47.393,1645,38.515]],["name/107-12",[]],["text/107-12",[]],["component/107-12",[]],["title/107-13",[406,41.248]],["name/107-13",[]],["text/107-13",[]],["component/107-13",[]],["title/107-14",[1028,48.809]],["name/107-14",[]],["text/107-14",[]],["component/107-14",[]],["title/107-15",[253,32.708]],["name/107-15",[]],["text/107-15",[]],["component/107-15",[]],["title/107-16",[1156,55.177,1645,38.515]],["name/107-16",[]],["text/107-16",[]],["component/107-16",[]],["title/107-17",[1645,38.515,3698,58.174]],["name/107-17",[]],["text/107-17",[]],["component/107-17",[]],["title/107-18",[139,33.93,469,29.4]],["name/107-18",[]],["text/107-18",[]],["component/107-18",[]],["title/107-19",[185,28.453,2630,66.332]],["name/107-19",[]],["text/107-19",[]],["component/107-19",[]],["title/107-20",[221,33.442,253,26.906]],["name/107-20",[]],["text/107-20",[]],["component/107-20",[]],["title/107-21",[469,29.4,1112,40.15]],["name/107-21",[]],["text/107-21",[]],["component/107-21",[]],["title/107-22",[11,11.796,185,24.166,1102,34.882]],["name/107-22",[]],["text/107-22",[]],["component/107-22",[]],["title/107",[93,47.532]],["name/107",[93,1.152]],["text/107",[0,1.049,4,0.151,7,0.412,8,0.277,9,0.296,11,1.063,13,0.617,19,0.521,22,0.2,24,0.652,26,0.343,27,3.169,32,1.372,33,1.394,35,0.86,36,0.192,37,0.626,38,0.344,40,0.289,41,0.185,42,0.86,44,0.384,45,1.743,46,0.834,47,0.72,49,0.214,50,1.027,51,0.194,52,0.427,53,0.424,54,0.208,57,0.271,60,0.144,61,0.221,62,0.224,63,0.509,65,0.866,66,0.95,67,1.074,68,0.168,71,0.263,73,0.766,75,0.511,76,1.268,77,1.054,78,0.514,81,0.24,89,0.205,92,0.494,93,2.916,95,0.672,96,0.376,97,0.378,99,1.247,100,0.359,101,0.355,102,0.35,103,0.333,105,0.473,106,0.579,109,1.459,111,0.198,113,2.794,115,1.4,117,2.418,119,1.913,121,0.309,123,0.817,126,0.162,127,0.763,128,1.677,130,1.971,131,0.848,132,0.15,133,0.271,135,0.772,137,0.752,139,2.393,140,0.196,141,0.461,142,0.161,144,1.019,148,0.334,152,0.446,157,0.959,158,0.228,159,0.743,163,0.403,164,1.046,165,1.248,166,0.434,168,0.219,169,0.531,170,1.079,171,0.563,172,0.945,173,0.315,175,0.479,176,1.159,177,0.368,178,0.542,179,0.577,180,0.962,181,0.204,183,3.895,184,2.127,185,4.643,186,1.819,188,3.004,190,1.052,192,1.172,194,0.175,197,0.612,198,0.187,200,0.178,201,0.647,205,4.182,206,0.941,208,0.608,214,0.784,216,1.461,218,0.324,220,0.214,223,1.773,226,0.187,227,0.165,228,0.245,229,0.58,230,0.766,231,0.502,234,0.228,236,0.896,237,1.924,238,0.58,240,0.846,241,0.421,242,1.981,243,0.949,244,3.797,245,0.817,246,0.427,248,0.237,249,0.173,250,1.272,251,0.194,252,2.433,253,1.309,256,0.738,265,0.475,268,0.925,269,4.307,271,3.523,272,0.554,273,0.514,274,1.885,276,0.599,278,1.501,279,0.306,281,1.318,282,0.45,286,0.349,287,0.726,288,0.735,289,2.557,293,0.363,295,0.702,298,0.702,299,0.818,302,0.828,303,0.173,305,0.422,309,0.514,310,0.939,316,0.453,317,1.433,320,0.295,323,1.011,324,0.424,325,0.969,328,0.254,329,1.223,331,1.614,332,0.819,335,0.897,337,1.048,340,0.554,341,3.615,342,0.516,343,0.237,347,0.516,353,1.939,354,2.257,356,1.548,359,0.528,360,0.649,363,0.689,364,1.575,371,3.559,373,0.176,374,0.17,376,0.19,378,0.181,380,1.591,382,0.463,383,0.188,384,0.354,392,2.264,393,1.791,406,2.839,407,0.949,409,0.185,414,0.209,420,0.297,423,0.398,428,0.459,439,0.747,447,0.475,450,0.38,454,0.418,457,0.221,458,0.324,467,1.051,469,2.193,470,0.209,471,0.254,472,0.531,473,0.237,474,0.245,479,0.309,481,0.204,482,0.188,483,0.172,484,1.124,489,0.647,491,0.23,497,0.214,501,0.364,502,0.333,503,0.357,506,1.537,507,0.686,511,0.446,512,0.28,513,0.28,516,1.512,520,0.359,525,3.156,527,0.215,532,0.415,540,0.2,541,0.183,542,0.219,546,1.922,550,0.173,551,2.032,558,0.176,569,2.616,571,1.964,572,0.191,573,0.401,576,0.251,582,2.481,593,0.182,597,0.237,599,0.608,603,1.284,609,1.007,610,1.621,611,0.892,612,1.082,617,0.374,619,0.999,620,0.728,621,0.661,623,1.532,624,1.054,627,1.02,630,0.599,631,0.766,632,0.224,634,0.588,637,0.355,638,0.24,639,0.228,640,0.728,643,0.18,645,0.599,646,0.337,647,0.341,649,0.539,651,0.204,653,0.969,658,0.219,668,0.851,670,0.262,682,0.222,683,0.237,688,0.975,696,0.401,698,1.256,699,0.262,700,0.28,702,0.352,703,1.248,704,0.28,707,0.209,709,1.952,711,0.254,712,0.237,713,2.133,719,1.852,722,0.747,741,0.237,746,0.479,751,0.976,752,0.217,753,0.35,756,0.913,758,0.547,759,0.831,760,0.586,763,0.3,764,2.352,765,0.237,770,0.254,771,0.207,772,0.192,773,0.362,778,1.627,779,0.463,786,2.514,787,0.3,788,0.438,792,0.266,795,2.359,797,0.497,798,0.176,800,0.612,803,0.266,806,4.088,809,0.266,810,0.3,811,0.24,816,0.718,818,0.804,827,0.418,835,0.197,837,0.266,842,1.83,856,0.409,857,0.406,859,0.679,861,0.463,863,2.546,864,0.418,870,1.582,871,0.403,881,0.245,882,0.586,917,0.18,922,0.215,938,0.612,957,0.343,972,0.996,973,0.28,975,0.209,976,0.28,977,0.73,980,0.237,982,0.23,991,0.463,995,0.955,996,0.45,997,0.781,1003,0.235,1004,0.776,1008,0.653,1010,1.329,1011,0.219,1028,2.277,1030,1.138,1034,0.266,1035,0.689,1036,0.703,1039,0.228,1055,0.519,1056,0.442,1058,0.262,1084,0.915,1086,1.715,1102,6.187,1110,0.27,1112,1.461,1119,0.242,1128,0.226,1129,0.398,1131,1.787,1135,0.201,1142,0.653,1154,1.202,1156,2.986,1165,0.357,1173,0.442,1177,0.266,1181,0.28,1182,0.248,1183,0.519,1186,0.191,1191,1.501,1192,0.266,1194,0.519,1195,0.571,1196,0.254,1197,1.37,1198,0.702,1205,0.992,1217,0.71,1224,0.844,1246,0.27,1249,2.823,1252,0.409,1323,0.266,1325,0.245,1326,0.921,1338,0.442,1343,0.626,1344,1.119,1352,1.35,1353,2.821,1363,0.586,1366,0.222,1380,3.439,1390,1.258,1391,0.196,1393,0.28,1399,0.547,1400,0.586,1402,0.248,1417,1.213,1420,1.724,1435,1.299,1450,1.425,1471,0.966,1493,0.915,1494,0.83,1528,0.254,1537,0.3,1539,0.859,1559,0.438,1564,0.262,1568,0.208,1576,2.528,1602,4.302,1603,0.738,1605,0.3,1645,5.872,1649,0.226,1660,2.106,1694,0.571,1695,0.963,1697,0.262,1704,0.864,1705,0.412,1706,0.233,1708,0.787,1846,0.233,1901,0.224,1902,0.479,1903,0.3,1945,0.237,1962,0.222,1965,0.761,2004,0.266,2005,0.245,2038,0.24,2039,0.431,2057,0.245,2059,0.586,2060,0.761,2117,1.094,2118,0.242,2150,0.251,2152,0.3,2157,0.793,2161,0.222,2235,0.254,2239,0.254,2246,0.747,2247,0.24,2253,3.772,2327,0.519,2333,0.438,2335,0.586,2375,1.278,2376,0.519,2379,0.28,2394,1.852,2410,0.473,2415,0.28,2423,1.757,2433,1.815,2435,0.309,2441,0.266,2442,1.424,2451,1.107,2456,0.639,2460,0.787,2487,0.851,2488,0.864,2499,1.194,2500,0.624,2501,0.319,2502,0.624,2504,0.319,2512,1.484,2524,0.319,2525,1.791,2530,0.309,2577,0.491,2580,1.757,2604,0.915,2628,1.146,2718,0.557,2730,0.293,2737,0.233,2755,0.251,2758,0.573,2775,0.275,2786,0.624,2797,1.335,2821,0.571,2873,2.936,2875,0.702,2904,0.251,2962,1.079,2968,0.781,2969,0.519,2974,2.47,2975,0.28,2987,0.424,2989,0.266,2991,0.266,2995,1.234,2996,0.222,2998,1.29,3000,1.042,3002,0.679,3003,0.519,3117,4.522,3264,1.12,3316,2.724,3328,1.37,3344,0.242,3349,0.266,3350,0.761,3355,0.463,3361,0.254,3365,0.237,3368,0.254,3374,0.802,3375,0.28,3384,0.424,3411,0.431,3420,0.491,3427,0.547,3430,2.008,3431,0.728,3471,0.761,3482,0.242,3489,1.278,3507,0.3,3508,0.547,3511,0.28,3520,0.802,3524,0.859,3525,0.28,3548,0.251,3565,0.242,3582,1.12,3594,0.219,3626,0.28,3627,0.266,3628,0.28,3629,0.802,3642,0.254,3645,0.586,3695,1.119,3696,0.859,3697,0.3,3698,1.046,3699,0.333,3700,0.333,3701,0.468,3702,0.3,3703,0.333,3704,1.314,3705,0.28,3706,0.333,3707,0.3,3708,0.333,3709,0.586,3710,0.65,3711,0.333,3712,2.664,3713,0.333,3714,0.952,3715,0.333,3716,0.333,3717,0.333,3718,0.333,3719,0.333,3720,0.333,3721,0.333,3722,0.3,3723,0.3,3724,0.333,3725,0.802,3726,0.3,3727,0.266,3728,1.12,3729,1.242,3730,0.519,3731,0.333,3732,0.333,3733,0.333,3734,0.333,3735,0.333,3736,0.333,3737,0.333,3738,0.333,3739,0.65,3740,0.333,3741,0.333,3742,0.333,3743,0.333,3744,0.728,3745,1.837,3746,0.952,3747,0.65,3748,0.333,3749,0.586,3750,0.333,3751,0.333,3752,0.333,3753,0.333,3754,0.3,3755,0.333,3756,0.333,3757,0.333,3758,0.3,3759,1.518,3760,1.783,3761,1.242,3762,2.036,3763,0.952,3764,0.65,3765,0.333,3766,0.333,3767,0.3,3768,0.3,3769,0.333,3770,1.518,3771,0.333,3772,0.333,3773,0.65,3774,0.333,3775,0.333,3776,0.333,3777,0.333,3778,0.333,3779,0.333,3780,0.333,3781,0.333,3782,0.3,3783,0.497,3784,0.3,3785,0.333,3786,0.333,3787,0.258,3788,0.333,3789,0.333,3790,0.333,3791,0.333,3792,0.952,3793,0.333,3794,0.65,3795,0.333,3796,0.333,3797,0.952,3798,0.333,3799,0.333,3800,1.242,3801,0.333,3802,0.333,3803,0.333,3804,0.333,3805,0.333,3806,0.333,3807,0.333,3808,0.28,3809,0.333,3810,0.333,3811,0.333,3812,0.992,3813,0.333,3814,0.459,3815,0.333,3816,0.333,3817,0.65,3818,0.65,3819,0.333,3820,0.333,3821,0.333,3822,0.333,3823,0.333,3824,0.333,3825,0.952,3826,0.333,3827,0.333,3828,0.65,3829,0.65,3830,0.65,3831,0.65,3832,0.333,3833,0.333,3834,0.28,3835,0.293,3836,0.3,3837,0.333,3838,0.586,3839,0.586,3840,0.333,3841,0.3,3842,0.624,3843,0.586,3844,0.3,3845,0.333,3846,0.333,3847,0.333,3848,0.333,3849,0.333,3850,0.333,3851,0.333,3852,0.333,3853,0.333,3854,0.333,3855,0.333,3856,0.952,3857,0.333,3858,0.65,3859,0.65,3860,0.65,3861,0.333,3862,0.333,3863,0.333,3864,0.333,3865,0.952,3866,0.333,3867,0.333,3868,0.333,3869,0.333,3870,0.333,3871,0.28,3872,0.333,3873,0.333,3874,0.333,3875,0.333,3876,0.333,3877,1.242,3878,0.333,3879,0.3,3880,2.359,3881,0.333,3882,0.333,3883,0.65,3884,0.3,3885,0.333,3886,0.28,3887,0.333,3888,0.333,3889,0.333,3890,0.28,3891,0.586,3892,0.333,3893,0.586,3894,0.586,3895,1.242,3896,0.333,3897,0.333,3898,0.586,3899,0.28,3900,0.3,3901,0.3,3902,1.046,3903,0.333,3904,0.333,3905,0.333,3906,0.333,3907,0.586,3908,0.333,3909,0.3,3910,0.333,3911,0.333,3912,2.83,3913,0.333,3914,1.271,3915,0.333,3916,0.333,3917,0.28,3918,0.333,3919,0.333,3920,0.333,3921,0.333,3922,0.333,3923,0.333,3924,0.333,3925,0.333,3926,0.65,3927,0.333,3928,0.333,3929,0.3,3930,0.333,3931,0.333,3932,1.278,3933,0.333,3934,0.333,3935,0.65,3936,0.65,3937,1.12,3938,0.333,3939,0.65,3940,0.333,3941,0.333,3942,0.65,3943,0.333,3944,0.319,3945,0.333,3946,0.333,3947,0.859,3948,0.333,3949,0.333,3950,0.333,3951,0.333,3952,0.333,3953,0.333,3954,0.333,3955,0.65,3956,0.333,3957,0.65,3958,1.12,3959,0.333,3960,0.333,3961,0.333,3962,0.333,3963,0.333,3964,0.65,3965,0.65,3966,0.333,3967,0.333,3968,0.333,3969,0.333,3970,0.333,3971,0.333,3972,0.859,3973,0.333,3974,0.333,3975,0.65,3976,1.12,3977,0.65,3978,0.65,3979,0.333,3980,0.333,3981,0.333,3982,1.837,3983,0.65,3984,0.333,3985,0.333,3986,0.3,3987,0.333,3988,0.3,3989,0.802,3990,0.28,3991,0.859,3992,0.859,3993,0.266,3994,0.586,3995,0.547,3996,0.3,3997,0.3,3998,0.3,3999,0.3,4000,0.3,4001,0.333,4002,0.333,4003,0.3,4004,0.3,4005,0.65,4006,0.547,4007,0.333,4008,0.3,4009,0.333,4010,0.333,4011,0.3,4012,0.333,4013,0.333,4014,0.333,4015,0.333,4016,0.586,4017,0.3,4018,0.333,4019,0.333,4020,0.333,4021,0.333,4022,1.608,4023,0.65,4024,0.333,4025,0.952,4026,0.333,4027,0.333,4028,0.3,4029,0.333,4030,0.333,4031,0.333,4032,0.333,4033,0.952,4034,0.728,4035,0.952,4036,0.586,4037,0.333,4038,0.586,4039,0.333,4040,0.333,4041,0.333,4042,0.333,4043,0.333,4044,0.333,4045,0.65,4046,0.333,4047,0.28,4048,0.65,4049,1.37,4050,0.309,4051,0.333,4052,0.333,4053,0.333,4054,0.333,4055,0.333,4056,0.333,4057,0.333,4058,0.333,4059,0.333,4060,0.333,4061,0.65,4062,0.333,4063,0.65,4064,0.333,4065,0.333,4066,0.333,4067,0.333,4068,0.497,4069,0.333,4070,0.333,4071,0.333,4072,0.333,4073,0.65,4074,0.333,4075,0.333,4076,0.333,4077,0.333,4078,0.333,4079,0.333,4080,0.333,4081,0.333,4082,0.333,4083,0.65,4084,0.333,4085,0.3,4086,0.3,4087,0.3,4088,0.333,4089,0.3,4090,0.333,4091,0.3,4092,0.3,4093,0.547,4094,0.266,4095,0.3,4096,0.333,4097,1.783,4098,0.333,4099,0.333,4100,0.333,4101,0.333,4102,0.333,4103,0.333,4104,0.333,4105,0.333,4106,0.333,4107,0.333,4108,0.333,4109,0.333,4110,0.333,4111,0.333,4112,0.333,4113,0.333,4114,0.333,4115,0.333,4116,0.333,4117,0.333,4118,0.333,4119,0.333,4120,0.333,4121,0.333,4122,0.333,4123,0.333,4124,0.333,4125,0.3,4126,0.65,4127,0.333,4128,0.333,4129,0.333,4130,0.333,4131,0.3,4132,0.333,4133,0.333,4134,0.333,4135,0.333,4136,0.333,4137,0.3,4138,0.333,4139,0.333,4140,0.65,4141,0.333,4142,0.333,4143,0.333]],["component/107",[11,0.279,108,0.486]],["title/108",[3479,64.221]],["name/108",[164,0.516,3480,0.779]],["text/108",[26,3.255,29,4.783,46,3.39,50,2.521,77,2.057,81,2.282,96,3.566,130,2.71,173,2.987,178,2.694,190,3.187,194,3.241,201,4.453,210,3.51,237,3.723,242,5.47,252,2.71,290,6.16,303,5.089,310,2.541,316,4.067,317,3.449,323,2.735,324,4.027,327,3.69,332,3.328,383,4.839,414,6.175,424,3.806,453,3.712,489,3.214,525,3.44,529,3.782,550,3.2,611,3.088,649,3.492,753,3.328,798,3.269,818,3.996,972,2.694,1086,5.406,1202,4.6,1390,4.355,1613,3.967,1702,5.195,2394,4.546,2718,7.227,3355,4.399,3385,4.928,3395,7.2,3424,4.546,3445,4.928,3472,4.159,3479,9.025,3480,8.329,3482,4.494,3483,5.195,3594,4.058,4203,11.124,4204,5.566,4205,5.566]],["component/108",[11,0.279,108,0.486]],["title/109-1",[4349,75.757]],["name/109-1",[]],["text/109-1",[]],["component/109-1",[]],["title/109-2",[619,38.706,639,47.393]],["name/109-2",[]],["text/109-2",[]],["component/109-2",[]],["title/109-3",[469,29.4,4350,58.174]],["name/109-3",[]],["text/109-3",[]],["component/109-3",[]],["title/109-4",[806,46.178,3430,55.177]],["name/109-4",[]],["text/109-4",[]],["component/109-4",[]],["title/109-5",[469,29.4,4351,69.076]],["name/109-5",[]],["text/109-5",[]],["component/109-5",[]],["title/109",[4350,70.719]],["name/109",[3455,0.829,4093,0.947]],["text/109",[11,0.888,24,0.98,27,3.653,33,1.035,37,0.941,50,1.804,57,0.779,60,0.805,63,0.997,67,0.879,70,1.091,76,1.66,77,1.774,106,2.058,114,0.952,117,4.279,123,2.904,128,3.296,130,2.68,144,0.934,145,1.409,157,0.879,166,2.2,176,1.673,178,2.325,183,2.799,185,3.612,188,1.826,190,3.74,192,1.408,198,1.051,200,3.246,201,0.972,205,2.776,215,1.097,216,0.923,221,0.903,236,0.937,237,0.813,238,2.004,244,2.697,245,2.904,250,2.051,252,1.446,253,1.719,265,1.641,269,3.777,271,3.603,273,1.006,303,0.968,317,1.327,331,1.906,335,1.45,340,1.467,342,1.011,345,1.375,354,3.352,363,1.035,371,4.746,373,0.989,376,1.067,378,1.016,393,0.853,406,2.168,407,0.993,424,2.723,439,3.203,458,0.93,469,0.794,479,0.888,497,1.2,507,2.437,532,3.876,533,1.13,540,1.123,550,0.968,571,0.98,582,2.184,610,1.587,611,2.664,617,1.073,619,4.056,623,1.707,627,1.067,632,1.258,634,1.151,639,5.559,646,1.707,653,1.191,709,1.33,714,1.571,716,1.683,719,2.425,722,1.123,752,1.218,756,1.123,757,1.49,764,1.892,786,1.025,788,2.976,795,4.252,798,2.339,806,7.982,823,1.375,857,1.166,863,3.183,867,1.571,901,2.976,909,1.073,922,2.132,929,1.2,970,1.427,972,4.249,991,1.33,997,1.174,1004,2.057,1010,2.881,1035,1.826,1086,2.717,1102,1.956,1135,1.13,1136,1.427,1173,1.269,1205,3.526,1212,1.317,1217,2.453,1249,2.654,1251,2.894,1325,1.375,1326,0.964,1353,3.876,1367,2.346,1417,7.771,1471,1.011,1493,1.375,1568,1.166,1603,1.447,1645,1.04,1649,1.269,1705,3.374,1950,3.717,2005,1.375,2039,4.444,2083,1.247,2085,1.345,2157,1.191,2246,1.123,2253,3.746,2389,4.398,2423,1.304,2434,1.515,2451,1.159,2460,1.542,2568,1.468,2580,1.304,2600,1.641,2725,1.359,2773,1.792,2852,2.894,2873,1.542,2875,2.425,2935,1.604,2961,1.28,2972,1.427,2995,1.292,2998,1.863,3048,1.571,3265,2.771,3316,3.216,3384,1.218,3424,1.375,3430,7.771,3431,2.517,3455,2.425,3471,1.49,3480,1.292,3627,1.49,3683,1.683,3684,3.982,3704,1.375,3705,2.771,3912,2.771,3914,3.148,4022,5.479,4038,2.969,4086,1.683,4087,1.683,4089,1.683,4091,1.683,4092,1.683,4093,8.748,4094,1.49,4095,1.683,4349,6.53,4350,6.096,4352,1.866,4353,1.866,4354,6.703,4355,6.073,4356,1.866,4357,1.683,4358,1.866,4359,1.683,4360,1.866,4361,1.866,4362,4.483,4363,1.866,4364,1.866,4365,1.866,4366,1.866,4367,1.866,4368,1.866,4369,1.866,4370,1.49,4371,1.866,4372,1.866,4373,4.414,4374,1.866,4375,1.866,4376,1.866,4377,1.866,4378,1.866,4379,1.866,4380,1.866,4381,1.866,4382,1.866,4383,1.866,4384,1.866,4385,1.866,4386,3.291,4387,1.866,4388,1.683,4389,6.703,4390,4.414,4391,1.866,4392,1.866,4393,1.866,4394,1.866,4395,1.866,4396,6.703,4397,1.866,4398,4.414,4399,1.866,4400,1.866,4401,1.866,4402,1.866,4403,1.866,4404,3.291,4405,1.866,4406,1.866,4407,5.323,4408,1.866,4409,1.866,4410,1.866,4411,1.866,4412,1.866,4413,1.866,4414,1.866,4415,1.866,4416,1.866,4417,1.866,4418,1.866,4419,1.866,4420,1.866,4421,3.291,4422,1.866,4423,1.866,4424,1.866,4425,1.427,4426,3.291,4427,1.866,4428,1.866,4429,1.683]],["component/109",[11,0.279,108,0.486]],["title/110-1",[183,19.716,516,30.677,773,28.428,1142,34.981]],["name/110-1",[]],["text/110-1",[]],["component/110-1",[]],["title/110-2",[409,32.552,841,39.221,3006,49.409]],["name/110-2",[]],["text/110-2",[]],["component/110-2",[]],["title/110-3",[572,33.734,841,39.221,4206,52.928]],["name/110-3",[]],["text/110-3",[]],["component/110-3",[]],["title/110-4",[214,30.31,698,36.194,1902,43.228]],["name/110-4",[]],["text/110-4",[]],["component/110-4",[]],["title/110-5",[469,17.197,1112,23.485,2451,25.09,3880,50.027,4207,40.405]],["name/110-5",[]],["text/110-5",[]],["component/110-5",[]],["title/110-6",[3890,70.719]],["name/110-6",[]],["text/110-6",[]],["component/110-6",[]],["title/110-7",[698,51.805]],["name/110-7",[]],["text/110-7",[]],["component/110-7",[]],["title/110-8",[698,42.614,1009,47.83]],["name/110-8",[]],["text/110-8",[]],["component/110-8",[]],["title/110-9",[183,26.711,2512,50.322]],["name/110-9",[]],["text/110-9",[]],["component/110-9",[]],["title/110-10",[482,39.1,713,37.604]],["name/110-10",[]],["text/110-10",[]],["component/110-10",[]],["title/110-11",[175,25.617,185,21.002,244,20.515,483,26.341]],["name/110-11",[]],["text/110-11",[]],["component/110-11",[]],["title/110-12",[482,39.1,3452,58.174]],["name/110-12",[]],["text/110-12",[]],["component/110-12",[]],["title/110-13",[484,32.394,1134,33.915,1495,43.228]],["name/110-13",[]],["text/110-13",[]],["component/110-13",[]],["title/110-14",[368,39.302,2512,50.322]],["name/110-14",[]],["text/110-14",[]],["component/110-14",[]],["title/110-15",[27,17.931,226,28.714,271,22.669,2568,40.107]],["name/110-15",[]],["text/110-15",[]],["component/110-15",[]],["title/110-16",[4208,56.088,4209,58.174]],["name/110-16",[]],["text/110-16",[]],["component/110-16",[]],["title/110",[698,51.805]],["name/110",[698,1.256]],["text/110",[9,0.45,11,1.493,13,0.915,16,0.564,17,1.881,24,0.518,25,0.677,26,0.521,27,3.211,35,0.889,38,0.976,41,0.547,45,1.517,46,0.542,47,0.468,50,1.786,51,1.077,57,0.769,61,0.654,63,0.527,65,1.581,67,1.221,71,0.399,75,0.53,76,2.205,77,1.615,78,0.532,81,0.365,92,0.512,96,1.881,97,1.071,99,1.418,100,1.018,101,1.008,102,0.994,103,0.944,105,0.915,106,0.859,109,4.215,111,1.096,113,2.218,117,0.583,121,0.877,127,0.926,128,1.11,130,1.218,133,1.355,135,0.798,139,0.485,141,2.116,144,1.298,148,0.508,151,1.362,157,1.221,161,1.438,164,0.453,165,0.49,169,1.027,170,2.316,173,0.892,175,1.635,176,0.502,178,1.132,180,3.615,183,2.04,185,1.341,186,0.709,188,0.547,190,3.112,192,1.871,194,2.019,205,1.074,206,0.521,214,1.986,215,0.58,216,1.283,218,0.919,219,1.868,225,0.968,226,2.462,227,0.915,230,0.609,235,1.409,236,2.196,237,2.297,238,0.601,240,0.55,242,0.55,243,1.209,244,2.28,250,2.451,252,0.433,253,1.497,265,1.293,268,2.514,269,5.149,271,1.447,272,0.574,276,1.16,280,0.704,281,1.881,285,1.054,286,0.53,288,3.899,295,0.727,299,2.005,303,0.956,305,1.149,307,1.027,310,0.759,317,2.43,320,0.448,323,0.437,329,0.677,330,0.55,331,3.103,332,0.532,335,1.926,337,0.508,340,1.156,341,0.933,347,1.764,351,0.59,353,0.468,354,1.78,356,0.763,357,5.43,361,0.948,363,1.022,364,1.704,368,0.561,369,0.63,373,0.976,384,0.537,392,0.912,393,2.412,406,0.485,409,1.806,420,1.185,438,0.776,450,1.077,467,0.683,469,1.636,472,1.445,481,3.473,482,3.766,483,0.952,484,1.018,489,0.514,501,0.553,502,0.506,512,0.831,516,3.409,520,0.545,525,0.55,540,3.821,558,0.523,569,4.684,571,2.772,572,2.786,573,1.599,582,3.43,595,2.254,603,1.833,610,0.476,617,1.06,619,2.449,621,3.541,624,0.583,629,0.609,630,2.048,633,0.639,637,0.54,638,0.711,640,0.755,644,0.609,649,1.043,652,0.831,653,0.63,657,1.483,658,0.649,665,0.776,668,2.154,674,1.109,676,0.815,683,0.704,686,1.763,687,1.409,688,2.391,693,0.649,698,5.081,702,0.535,707,0.621,708,0.815,711,0.755,713,2.638,719,2.398,743,0.649,753,0.994,755,0.89,756,1.56,757,1.472,758,4.081,764,3.258,765,4.744,773,2.941,779,0.704,786,1.013,788,0.665,789,0.727,796,0.621,800,1.667,812,0.89,816,1.065,823,0.727,826,1.374,841,2.176,842,1.232,856,0.621,861,1.314,865,0.831,867,2.741,870,1.16,871,0.613,881,0.727,909,1.06,913,0.745,921,0.644,951,0.63,995,0.621,997,0.621,1000,1.276,1003,0.696,1004,0.617,1009,1.795,1036,3.595,1039,1.264,1046,0.704,1102,0.587,1112,2.234,1134,2.222,1142,5.249,1172,0.649,1179,2.071,1186,1.491,1187,1.264,1188,2.614,1198,1.358,1212,0.696,1246,0.801,1249,0.919,1252,1.16,1253,1.16,1327,1.288,1338,1.253,1344,0.727,1352,2.549,1353,1.655,1354,1.957,1355,1.957,1380,1.83,1391,0.58,1446,3.343,1450,0.617,1494,0.66,1495,0.727,1520,0.671,1558,0.755,1559,1.242,1568,1.152,1576,1.483,1645,0.55,1647,1.472,1660,1.849,1688,0.755,1701,0.677,1704,1.048,1706,0.69,1822,0.704,1840,0.831,1899,0.696,1901,1.242,1902,1.358,1908,0.727,1945,0.704,1950,0.831,2016,1.662,2043,0.89,2057,1.358,2085,1.868,2087,1.552,2089,0.755,2092,0.831,2117,2.345,2202,1.552,2247,0.711,2253,0.609,2333,1.748,2343,0.605,2414,0.625,2426,0.639,2448,0.755,2451,1.144,2456,0.508,2512,4.388,2531,0.696,2563,0.776,2568,2.039,2678,0.948,2722,0.916,2737,0.69,2755,1.391,2787,0.868,2796,0.948,2811,0.948,2815,0.948,2820,0.948,2825,0.916,2870,0.948,2885,0.801,2904,0.745,2957,0.848,2987,1.692,2996,1.232,3000,1.779,3006,3.237,3008,0.89,3093,2.6,3141,1.795,3288,2.339,3327,0.831,3349,0.788,3361,0.755,3363,0.831,3369,0.831,3377,1.409,3436,0.755,3455,0.727,3480,0.683,3565,0.719,3744,0.755,3767,0.89,3784,0.89,3880,4.214,3884,0.89,3890,1.552,3937,2.339,3995,0.831,4034,1.983,4036,0.89,4166,0.677,4206,4.372,4208,0.801,4209,4.772,4210,0.987,4211,0.987,4212,0.987,4213,5.603,4214,0.987,4215,0.987,4216,0.987,4217,0.987,4218,0.987,4219,1.843,4220,0.987,4221,0.987,4222,0.987,4223,0.987,4224,0.987,4225,0.987,4226,0.987,4227,0.987,4228,0.987,4229,0.987,4230,0.987,4231,0.776,4232,2.593,4233,0.987,4234,1.843,4235,1.843,4236,0.987,4237,0.987,4238,0.987,4239,0.987,4240,1.843,4241,1.843,4242,0.987,4243,0.987,4244,0.89,4245,1.662,4246,0.704,4247,0.89,4248,0.987,4249,0.987,4250,1.843,4251,0.987,4252,0.987,4253,1.843,4254,1.843,4255,0.765,4256,0.987,4257,0.987,4258,0.987,4259,1.843,4260,0.987,4261,0.987,4262,0.987,4263,0.987,4264,0.987,4265,0.987,4266,0.987,4267,0.987,4268,0.987,4269,3.255,4270,0.987,4271,3.255,4272,3.255,4273,0.987,4274,2.593,4275,0.987,4276,0.987,4277,0.987,4278,4.371,4279,2.593,4280,0.987,4281,0.987,4282,1.843,4283,0.987,4284,3.255,4285,0.987,4286,0.987,4287,0.987,4288,0.987,4289,0.987,4290,1.843,4291,1.843,4292,0.987,4293,0.987,4294,0.987,4295,0.987,4296,0.987,4297,0.987,4298,0.987,4299,0.987,4300,0.755,4301,0.987,4302,3.844,4303,2.142,4304,3.844,4305,0.987,4306,0.987,4307,2.593,4308,0.987,4309,0.987,4310,0.987,4311,0.987,4312,1.843,4313,0.987,4314,2.593,4315,0.987,4316,0.987,4317,0.987,4318,0.788,4319,1.843,4320,0.987,4321,0.987,4322,0.987,4323,2.593,4324,0.987,4325,0.987,4326,0.987,4327,0.987,4328,0.987,4329,0.987,4330,4.372,4331,0.987,4332,0.987,4333,0.987,4334,0.987,4335,0.987,4336,0.987,4337,0.987,4338,0.987,4339,0.987,4340,0.987,4341,0.987,4342,0.987,4343,0.987,4344,0.987,4345,0.987,4346,0.987,4347,0.987,4348,0.987]],["component/110",[11,0.279,108,0.486]],["title/111-1",[130,16.16,1131,33.278,1249,25.422,1613,32.782]],["name/111-1",[]],["text/111-1",[]],["component/111-1",[]],["title/111-2",[185,28.453,1613,44.413]],["name/111-2",[]],["text/111-2",[]],["component/111-2",[]],["title/111-3",[185,28.453,3364,58.174]],["name/111-3",[]],["text/111-3",[]],["component/111-3",[]],["title/111-4",[185,28.453,3546,58.174]],["name/111-4",[]],["text/111-4",[]],["component/111-4",[]],["title/111",[1613,53.991]],["name/111",[164,0.516,201,0.586]],["text/111",[0,1.323,11,0.36,21,1.956,26,1.673,27,3.217,32,0.831,37,2.605,47,1.503,50,1.745,68,0.902,71,2.088,77,2.178,81,3.383,82,3.595,88,1.159,115,0.848,123,1.177,127,2.145,128,2.797,130,2.516,148,2.196,164,4.88,165,1.575,170,0.948,173,0.866,175,3.283,178,0.781,180,2.017,181,1.943,183,1.997,185,2.912,190,1.638,194,2.243,198,1.007,200,2.282,201,5.703,205,0.741,221,0.866,223,1.159,229,3.598,230,1.956,237,3.612,242,1.768,243,1.478,248,1.275,253,0.697,268,0.928,269,4.282,271,2.296,273,2.303,274,1.142,292,1.007,293,0.682,296,1.506,303,3.908,307,2.38,308,1.09,309,2.303,317,2.083,323,0.793,331,4.295,335,2.275,340,1.414,347,1.718,353,4.082,354,1.977,360,1.658,368,1.018,369,1.142,393,0.818,406,0.879,407,4.733,414,5.22,424,1.103,439,2.568,450,2.495,484,4.58,489,0.932,501,3.961,525,3.942,529,1.943,541,2.346,550,0.928,558,3.462,577,1.35,582,1.569,610,2.491,611,0.895,619,2.392,643,2.313,646,1.644,682,3.452,748,1.25,759,0.834,773,1.768,777,3.41,786,2.346,788,1.206,912,1.429,929,2.038,936,1.051,997,1.126,1003,1.263,1010,2.069,1028,1.04,1035,3.625,1086,3.608,1109,1.216,1119,2.309,1131,4.265,1135,1.083,1202,1.334,1249,3.756,1326,2.205,1340,1.142,1343,2.085,1390,2.238,1394,1.263,1450,1.982,1503,2.62,1567,1.159,1568,1.118,1576,1.023,1607,1.429,1613,6.764,1615,1.506,1704,1.018,1708,1.134,1713,2.284,1942,3.145,2039,1.186,2089,1.368,2093,1.429,2157,1.142,2239,2.424,2423,5.548,2433,3.917,2451,4.39,2657,4.542,2718,3.452,2758,3.554,2878,1.538,2995,5.496,3140,1.429,3141,1.239,3333,1.614,3346,3.41,3355,4.212,3364,5.954,3365,7.209,3391,1.614,3396,3.851,3424,1.318,3433,1.506,3436,1.368,3440,5.329,3445,2.532,3472,3.481,3479,3.949,3480,4.895,3481,1.506,3482,2.309,3483,1.506,3545,7.489,3546,4.975,3623,1.506,3728,1.614,3783,1.368,4085,2.86,4094,3.41,4144,1.478,4145,1.789,4146,1.614,4147,4.269,4148,5.329,4149,1.789,4150,1.789,4151,1.789,4152,1.789,4153,5.164,4154,1.789,4155,1.789,4156,1.789,4157,1.789,4158,1.789,4159,3.17,4160,1.789,4161,1.789,4162,1.789,4163,1.789,4164,1.789,4165,1.614,4166,1.227,4167,1.789,4168,4.349,4169,1.789,4170,1.789,4171,1.789,4172,3.17,4173,1.789,4174,1.789,4175,1.789,4176,3.17,4177,3.17,4178,3.17,4179,3.17,4180,4.269,4181,1.789,4182,1.789,4183,1.789,4184,3.17,4185,1.789,4186,1.789,4187,1.789,4188,3.682,4189,1.429,4190,1.614,4191,1.789,4192,3.17,4193,1.789,4194,4.269,4195,3.595,4196,1.789,4197,3.17,4198,1.789,4199,1.789,4200,2.86,4201,1.789,4202,1.789]],["component/111",[11,0.279,108,0.486]],["title/112",[178,30.168,447,34.441]],["name/112",[178,0.491,447,0.561]],["text/112",[4,2.947,11,1.779,15,3.297,27,3.112,31,4.674,61,4.301,65,3.152,105,5.003,151,3.408,156,5.181,157,4.167,178,4.725,269,4.727,271,2.884,340,2.893,371,3.311,420,2.966,447,5.646,472,3.617,482,5.009,483,3.351,484,3.582,553,4.625,779,4.625,821,5.705,842,4.336,856,4.083,857,4.055,879,4.083,913,4.897,936,3.812,1064,4.625,1067,5.36,1072,5.181,1084,4.779,1154,4.373,1253,4.083,1415,6.767,1494,4.336,1705,4.111,1901,4.373,2375,5.463,2489,6.023,2491,5.852,2497,6.023,2634,5.267,2814,6.229,2875,4.779,2922,6.229,2923,5.705,2924,6.229,2925,6.229,2926,6.229,2927,6.229,2928,6.229,2929,6.229,2930,6.229,3000,4.45,3023,5.463,3140,5.181,3886,5.463,3993,5.181,4430,5.463,4431,6.486,4432,6.486,4433,6.486,4434,6.486,4435,6.486,4436,6.486,4437,6.486,4438,6.486,4439,5.852,4440,6.486,4441,6.486]],["component/112",[11,0.279,108,0.486]],["title/113-1",[139,33.93,302,32.097]],["name/113-1",[]],["text/113-1",[]],["component/113-1",[]],["title/113-2",[279,32.527,4442,60.755]],["name/113-2",[]],["text/113-2",[]],["component/113-2",[]],["title/113-3",[469,29.4,904,48.759]],["name/113-3",[]],["text/113-3",[]],["component/113-3",[]],["title/113-4",[470,52.853]],["name/113-4",[]],["text/113-4",[]],["component/113-4",[]],["title/113-5",[472,32.712,688,32.088,1036,33.208]],["name/113-5",[]],["text/113-5",[]],["component/113-5",[]],["title/113-6",[1061,55.177,4430,58.174]],["name/113-6",[]],["text/113-6",[]],["component/113-6",[]],["title/113-7",[483,35.686,4443,58.174]],["name/113-7",[]],["text/113-7",[]],["component/113-7",[]],["title/113-8",[469,29.4,2589,58.174]],["name/113-8",[]],["text/113-8",[]],["component/113-8",[]],["title/113-9",[280,59.878]],["name/113-9",[]],["text/113-9",[]],["component/113-9",[]],["title/113-10",[287,29.8,392,25.231,599,32.545,905,42.939]],["name/113-10",[]],["text/113-10",[]],["component/113-10",[]],["title/113-11",[479,39.948]],["name/113-11",[]],["text/113-11",[]],["component/113-11",[]],["title/113-12",[369,53.601]],["name/113-12",[]],["text/113-12",[]],["component/113-12",[]],["title/113-13",[458,41.869]],["name/113-13",[]],["text/113-13",[]],["component/113-13",[]],["title/113-14",[369,53.601]],["name/113-14",[]],["text/113-14",[]],["component/113-14",[]],["title/113-15",[407,23.994,458,22.478,597,32.147,686,30.657,4444,40.672]],["name/113-15",[]],["text/113-15",[]],["component/113-15",[]],["title/113-16",[2591,64.221]],["name/113-16",[]],["text/113-16",[]],["component/113-16",[]],["title/113-17",[1056,46.973,2591,52.828]],["name/113-17",[]],["text/113-17",[]],["component/113-17",[]],["title/113-18",[2426,44.744,4208,56.088]],["name/113-18",[]],["text/113-18",[]],["component/113-18",[]],["title/113-19",[279,24.009,1471,27.628,2426,33.026,2456,26.233]],["name/113-19",[]],["text/113-19",[]],["component/113-19",[]],["title/113",[55,43.78,479,32.861]],["name/113",[55,0.713,479,0.535]],["text/113",[0,2.22,4,0.549,7,0.766,8,0.27,11,2.035,13,0.863,18,2.258,24,0.913,26,0.333,27,3.609,31,0.455,32,2.222,34,0.363,35,0.839,36,0.365,37,0.319,38,0.335,40,0.989,41,0.964,44,0.374,45,2.092,46,1.223,47,0.573,49,0.777,50,2.067,51,0.369,55,0.401,57,2.112,60,1.155,61,0.419,63,0.929,65,0.588,67,0.819,68,0.877,69,1.373,70,0.707,71,0.703,75,0.339,76,0.319,77,0.579,78,0.652,81,2.51,84,0.707,88,0.409,89,0.746,92,0.627,94,1.388,95,0.446,96,0.699,97,0.367,99,0.346,100,0.349,101,0.346,102,0.341,103,0.62,105,0.314,106,0.295,109,0.292,113,2.436,114,0.617,115,3.518,117,1.028,118,0.61,119,1.952,121,2.406,123,0.416,124,0.881,126,0.308,127,1.118,128,1.786,130,1.906,131,0.301,132,0.284,133,1.448,135,0.274,136,0.63,139,0.594,142,2.315,144,1.547,151,2.512,157,0.569,159,0.378,161,1.235,164,3.754,165,1.328,168,0.795,169,0.352,170,0.641,172,1.417,173,0.842,175,0.608,176,2.571,177,0.358,178,1.35,180,0.299,183,3.207,184,1.978,185,0.917,186,3.835,190,0.327,191,0.406,192,2.664,200,0.646,201,0.906,210,0.36,211,0.49,213,0.837,214,0.898,215,0.371,216,1.529,219,1.253,220,2.683,221,1.077,223,0.409,231,0.638,232,0.341,236,0.873,237,2.082,238,0.737,244,1.076,249,3.788,250,1.034,252,0.764,253,1.494,268,1.387,269,4.809,271,2.577,273,0.938,274,0.403,278,0.891,279,3.955,280,0.451,281,1.546,285,0.361,287,1.3,288,0.585,293,0.663,299,0.555,302,2.35,303,0.328,305,0.536,310,0.917,312,3.438,315,0.297,317,0.255,320,1.011,321,0.413,323,0.536,329,1.527,331,1.501,332,1.667,335,0.766,340,0.539,342,1.675,347,0.342,351,0.723,354,1.932,360,0.633,364,0.771,367,0.369,368,0.36,369,3.84,371,2.13,373,0.335,374,0.324,378,0.344,382,0.451,384,1.682,392,0.313,394,0.341,406,2.349,407,0.336,409,0.964,420,2.845,421,1.393,424,1.072,444,0.715,446,2.204,447,2.89,450,0.707,453,0.728,454,1.431,455,0.413,458,4.288,469,3.158,470,4.271,471,0.483,472,0.674,474,2.277,479,3.893,482,0.358,483,2.874,484,1.229,489,1.61,495,0.873,496,2.021,501,1.948,502,1.14,503,0.664,505,0.416,506,1.172,507,1.229,511,2.386,519,0.413,520,1.229,523,0.406,525,0.352,527,0.783,528,0.36,531,2.413,533,1.052,536,0.406,538,0.871,544,1.388,551,0.777,558,1.179,571,0.332,582,1.899,587,0.505,591,0.451,592,0.438,593,2.615,594,0.49,599,3.229,603,0.681,604,3.526,610,1.491,611,1.339,617,0.695,621,0.336,623,1.154,624,0.715,626,1.464,627,0.994,629,0.39,634,0.746,637,0.661,645,0.761,646,1.387,647,0.635,649,0.358,650,2.236,651,1.639,661,0.925,667,0.483,668,0.974,670,0.497,671,1.803,672,0.378,673,0.477,674,0.728,681,0.862,682,1.162,686,4.84,688,2.909,689,1.777,693,0.795,696,0.39,702,2.261,703,0.741,707,0.398,709,1.587,712,0.862,713,1.211,722,0.38,726,0.383,743,0.416,752,0.413,753,0.341,756,1.609,759,0.81,764,2.206,770,0.483,776,0.881,779,1.907,788,0.815,796,1.683,798,0.335,811,0.871,816,1.286,822,1.154,827,0.777,835,1.315,842,0.423,856,0.398,859,0.862,862,1.973,868,0.466,869,0.395,870,0.398,871,0.392,904,5.612,905,1.874,909,1.538,913,0.913,914,0.543,919,0.57,921,0.789,926,0.466,927,0.483,929,0.777,930,0.497,933,3.832,934,1.094,939,0.471,971,1.172,972,0.759,977,1.572,981,0.446,982,1.204,983,0.532,986,0.505,987,0.466,1000,0.837,1002,1.329,1003,0.446,1009,0.837,1024,1.777,1026,1.702,1028,0.367,1030,0.403,1035,0.671,1036,0.684,1037,0.442,1040,0.57,1045,1.702,1046,1.587,1056,1.182,1060,3.461,1061,1.388,1069,0.57,1077,1.807,1078,1.464,1086,0.617,1089,0.438,1090,3.514,1091,2.788,1092,2.788,1093,2.413,1094,3.375,1095,2.928,1096,5.229,1097,1.568,1098,0.57,1099,0.57,1102,4.576,1103,2.788,1104,0.532,1107,0.808,1129,1.065,1130,2.204,1134,0.699,1137,0.913,1159,0.505,1167,0.438,1170,0.505,1173,1.182,1211,0.587,1241,0.532,1252,0.398,1253,0.398,1254,0.837,1277,0.505,1323,0.505,1325,0.466,1343,0.416,1353,0.772,1380,0.446,1391,1.308,1399,0.532,1450,0.756,1471,0.342,1522,0.446,1528,0.483,1567,0.409,1569,1.04,1649,1.513,1701,0.434,1706,0.442,1708,0.766,1793,1.296,1964,1.018,1965,0.505,2040,1.227,2083,1.162,2093,0.505,2246,0.38,2343,0.387,2364,0.532,2376,0.505,2414,0.766,2418,0.497,2422,0.513,2424,0.513,2425,0.532,2426,4.985,2448,1.702,2456,0.622,2503,0.522,2585,0.543,2587,2.788,2589,5.066,2591,3.657,2596,1.614,2634,0.982,2705,0.451,2708,0.543,2724,2.104,2725,0.46,2726,0.505,2737,0.442,2755,0.477,2758,0.38,2824,0.46,2881,2.104,2904,0.477,2912,0.925,2935,0.543,2961,0.83,2968,1.4,3007,1.568,3027,0.505,3208,2.074,3327,0.532,3444,1.091,3482,0.46,3484,0.532,3523,0.466,3694,1.464,3727,0.966,3787,0.938,3902,0.532,3929,0.57,3947,0.57,3986,0.57,4028,0.57,4050,0.587,4137,0.57,4166,0.434,4188,0.451,4208,0.513,4246,0.451,4430,0.532,4442,1.957,4443,0.532,4444,1.091,4445,1.568,4446,0.543,4447,0.632,4448,0.632,4449,0.57,4450,2.137,4451,0.632,4452,0.57,4453,2.225,4454,0.632,4455,0.632,4456,0.483,4457,0.632,4458,0.632,4459,0.632,4460,0.632,4461,0.632,4462,0.925,4463,1.209,4464,2.225,4465,0.57,4466,0.632,4467,0.632,4468,1.209,4469,1.329,4470,0.505,4471,1.209,4472,1.209,4473,1.738,4474,0.57,4475,0.632,4476,0.632,4477,0.632,4478,0.632,4479,0.632,4481,0.632,4482,0.632,4483,0.632,4488,1.209,4489,1.209,4490,0.632,4494,1.738,4495,0.632,4496,0.632,4497,0.632,4498,2.674,4499,3.837,4500,0.632,4501,0.632,4502,2.674,4503,1.568,4504,0.57,4505,0.632,4506,0.632,4507,0.632,4508,0.632,4509,0.632,4510,0.632,4511,0.632,4512,0.632,4513,0.632,4514,0.632,4515,0.632,4516,0.632,4517,0.632,4518,2.674,4519,0.556,4520,0.632,4521,0.632,4522,0.632,4523,0.632,4524,0.632,4525,0.632,4526,0.57,4527,0.632,4528,0.632,4529,1.209,4530,0.632,4531,0.632,4532,0.632,4533,0.632,4534,0.632,4535,0.632,4536,0.632,4537,0.632,4538,0.632,4539,0.632,4540,0.632,4541,0.57,4542,0.632,4543,0.632,4544,0.632,4545,0.632,4547,0.632,4548,1.161,4549,0.632,4550,3.091,4551,0.632,4552,0.57,4553,0.632,4556,0.632,4557,0.632,4558,0.632,4914,0.513,4931,2.87,6126,0.632,6146,1.253,6201,1.209,6286,0.587,6369,0.666,6370,0.666,6371,0.666,6372,0.666,6373,0.666,6374,0.666,6375,2.817,6376,0.666,6377,2.343,6378,1.273,6379,1.831,6380,2.343,6381,0.666,6382,0.666,6383,0.666,6384,0.666,6385,0.666,6386,0.666,6387,1.273,6388,1.273,6389,1.273,6390,1.273,6391,0.666,6392,0.666,6393,0.666]],["component/113",[11,0.279,108,0.486]],["title/114-1",[936,34.483,1065,43.228,1143,44.869]],["name/114-1",[]],["text/114-1",[]],["component/114-1",[]],["title/114",[936,49.357]],["name/114",[936,1.197]],["text/114",[0,1.794,6,2.896,8,1.834,27,3.138,32,3.051,37,3.312,38,2.276,55,6.683,77,2.189,89,2.65,92,4.629,100,2.372,103,3.364,105,3.261,106,3.061,113,1.682,148,3.378,171,2.54,183,1.661,185,3.675,188,4.95,199,2.134,204,5.616,205,1.779,210,2.444,216,3.249,218,2.142,250,1.996,253,1.673,269,2.741,272,6.32,286,2.307,293,3.401,316,3.123,317,3.878,322,5.467,331,3.852,335,2.893,340,2.928,356,2.719,364,1.904,378,2.339,383,2.432,447,3.274,448,2.686,469,3.392,484,2.372,600,3.033,627,2.457,649,2.432,657,2.457,703,2.633,722,5.368,756,2.585,759,2.003,767,2.742,842,2.872,870,6.05,936,5.244,975,4.132,1065,7.083,1143,5.021,1235,5.245,1249,2.142,1434,3.165,1471,2.328,1520,2.921,1576,2.457,1663,3.432,1701,2.948,1705,5.655,1707,3.096,1945,4.682,1962,2.872,2118,5.805,2451,4.077,2456,2.21,2529,6.268,2563,3.379,2714,3.243,3411,2.849,4559,4.296,4560,4.296,4561,4.296,4562,4.296,4563,4.296,4564,10.135,4565,4.296,4566,8.922,4567,3.876,4568,9.612,4569,8.922,4570,4.296,4571,4.296,4572,6.566,4573,4.296,4574,4.296,4575,6.566,4576,4.296,4577,4.296,4578,4.296,4579,4.296,4580,4.296,4581,4.296,4582,4.296,4583,4.296,4584,4.296,4585,4.296,4586,4.296,4587,4.296,4588,4.296,4589,4.296]],["component/114",[11,0.279,108,0.486]],["title/115-1",[11,11.796,40,26.084,1108,36.194]],["name/115-1",[]],["text/115-1",[]],["component/115-1",[]],["title/115-2",[244,23.606,1108,36.194,2040,41.413]],["name/115-2",[]],["text/115-2",[]],["component/115-2",[]],["title/115-3",[175,34.706,299,31.683]],["name/115-3",[]],["text/115-3",[]],["component/115-3",[]],["title/115-4",[1108,42.614,4590,59.388]],["name/115-4",[]],["text/115-4",[]],["component/115-4",[]],["title/115-5",[11,11.796,39,33.38,1108,36.194]],["name/115-5",[]],["text/115-5",[]],["component/115-5",[]],["title/115-6",[6,56.611]],["name/115-6",[]],["text/115-6",[]],["component/115-6",[]],["title/115-7",[1108,51.805]],["name/115-7",[]],["text/115-7",[]],["component/115-7",[]],["title/115-8",[253,22.852,299,26.909,950,39.895]],["name/115-8",[]],["text/115-8",[]],["component/115-8",[]],["title/115-9",[3670,61.873]],["name/115-9",[]],["text/115-9",[]],["component/115-9",[]],["title/115-10",[293,22.364,299,26.909,1165,32.24]],["name/115-10",[]],["text/115-10",[]],["component/115-10",[]],["title/115-11",[541,37.959,767,44.092]],["name/115-11",[]],["text/115-11",[]],["component/115-11",[]],["title/115-12",[79,53.601]],["name/115-12",[]],["text/115-12",[]],["component/115-12",[]],["title/115",[1108,51.805]],["name/115",[1108,1.256]],["text/115",[0,0.718,4,0.782,7,1.09,9,0.418,11,1.702,13,0.854,15,0.875,18,1.612,19,0.501,24,0.482,26,0.484,27,2.922,32,0.799,33,0.509,35,0.83,39,0.522,41,0.509,45,2.144,47,0.816,50,2.208,57,1.515,60,0.396,63,1.637,65,0.836,67,1.948,68,3.357,71,0.983,72,1.418,75,1.644,76,1.83,77,2.916,78,1.652,79,0.585,80,0.721,81,1.531,88,0.594,91,1.334,92,1.261,96,0.53,97,0.533,99,0.501,100,0.506,101,0.501,102,0.495,103,0.47,105,0.455,106,0.427,111,0.545,113,1.8,114,0.468,115,2.882,127,0.461,128,0.736,130,2.268,132,0.774,133,0.716,142,0.444,148,1.25,157,1.948,161,0.509,165,2.055,172,0.912,173,1.177,175,2.522,176,1.557,179,0.555,180,2.173,183,2.226,185,1.494,186,1.396,190,1.874,192,1.969,194,0.904,201,0.478,202,0.928,204,1.083,205,1.502,208,0.585,210,0.522,216,0.454,220,3.474,223,0.594,225,2.581,227,0.455,230,1.889,231,1.914,232,0.495,236,1.221,237,3.304,238,1.48,242,3.989,243,0.802,244,4.235,246,0.603,248,4.104,250,1.686,252,1.345,253,2.368,265,3.031,268,0.476,269,5.192,271,3.374,272,0.533,274,0.585,279,0.81,282,0.635,284,0.732,286,1.305,293,2.432,298,1.791,299,4.772,300,1.268,303,0.892,305,1.608,306,0.53,307,0.959,310,1.001,312,1.594,315,3.124,317,0.37,318,0.589,319,1.683,320,1.104,323,1.357,325,1.098,331,1.049,335,0.404,337,0.885,340,0.409,341,0.464,342,0.932,354,0.425,356,1.905,360,1.898,363,0.954,364,1.608,367,0.536,368,1.383,371,0.878,373,0.912,380,0.533,381,0.732,383,0.974,384,0.499,389,1.374,390,2.898,393,1.111,406,1.194,420,1.111,421,0.896,423,0.562,428,1.214,449,0.545,453,3.02,489,0.896,502,0.882,503,2.969,505,1.132,507,1.691,514,0.654,519,1.123,520,0.95,525,0.511,533,1.041,536,0.589,541,4.565,550,0.476,569,4.28,571,2.416,573,1.889,582,1.203,587,3.305,599,0.585,600,0.647,603,1.724,610,1.75,611,0.459,612,0.654,619,0.514,621,1.293,623,0.892,627,0.984,631,0.566,634,0.566,637,0.501,644,0.566,646,1.588,650,2.661,653,0.585,657,0.524,663,0.827,664,0.827,666,0.701,668,0.514,669,0.647,674,0.552,679,0.668,699,0.721,702,0.497,718,0.613,743,0.603,751,1.106,753,0.928,756,0.552,759,1.133,764,0.989,767,2.316,771,0.569,772,0.994,786,1.683,816,0.53,822,1.588,826,1.283,856,1.083,857,2.587,879,0.577,901,0.618,917,1.317,934,2.284,939,1.283,940,1.667,946,0.692,949,2.775,950,3.413,951,2.316,954,1.334,955,0.711,961,0.732,971,0.618,972,3.4,1000,0.635,1004,0.573,1028,1.78,1030,0.585,1036,2.841,1039,0.629,1045,0.701,1086,0.468,1108,7.45,1111,0.772,1128,0.623,1130,0.654,1131,1.586,1135,1.854,1136,0.701,1150,0.827,1165,1.683,1167,0.635,1172,2.722,1186,0.527,1187,0.629,1188,0.623,1224,0.623,1235,2.446,1249,3.679,1252,0.577,1253,0.577,1254,0.635,1327,0.641,1338,0.623,1343,2.014,1352,1.611,1353,1.551,1354,1.835,1355,1.835,1366,1.15,1390,0.647,1394,0.647,1420,1.18,1435,0.668,1450,1.519,1470,1.374,1471,0.497,1522,0.647,1602,1.499,1701,0.629,1704,0.979,1708,1.09,1731,1.552,1740,0.772,1863,0.827,1878,1.449,1899,0.647,1929,0.827,2026,0.827,2040,1.715,2086,0.827,2117,3.894,2157,0.585,2246,0.552,2410,1.253,2414,0.581,2426,1.983,2456,1.575,2735,0.758,2737,0.641,2742,1.513,2758,1.035,2788,0.88,2909,0.758,2958,4.551,2989,1.374,2998,0.974,3000,0.629,3002,0.654,3196,0.676,3208,1.334,3344,0.668,3377,0.701,3381,0.692,3384,0.598,3456,0.827,3457,0.827,3460,0.827,3519,0.701,3594,1.599,3614,1.374,3670,2.256,3671,1.374,3701,0.661,3704,0.676,3727,0.732,3730,1.941,3808,0.772,4188,0.654,4246,0.654,4300,2.342,4567,0.827,4590,1.479,4591,0.917,4592,0.917,4593,4.138,4594,0.917,4595,0.88,4596,0.88,4597,0.917,4598,2.43,4599,0.917,4600,1.72,4601,4.138,4602,1.72,4603,0.917,4604,0.917,4605,1.72,4606,1.72,4607,0.917,4608,0.917,4609,1.552,4610,1.72,4611,0.917,4612,0.917,4613,0.917,4614,0.917,4615,0.917,4616,1.316,4617,0.917,4618,2.43,4619,0.917,4620,0.772,4621,0.917,4622,0.917,4623,3.062,4624,0.917,4625,0.917,4626,0.917,4627,1.72,4628,0.917,4629,0.917,4630,0.917,4631,0.917,4632,2.43,4633,0.917,4634,1.72,4635,1.72,4636,0.917,4637,0.917,4638,0.917,4639,1.72,4640,0.917,4641,0.917,4642,0.917,4643,0.917,4644,0.917,4645,0.917,4646,0.917,4647,0.917,4648,0.917,4649,0.917,4650,1.72,4651,2.43,4652,2.43,4653,0.917,4654,0.917,4655,0.917,4656,0.917,4657,0.917,4658,1.72,4659,1.72,4660,1.72,4661,1.72,4662,1.72,4663,0.917,4664,0.917,4665,0.917,4666,1.72,4667,1.72,4668,1.72,4669,1.72,4670,1.72,4671,0.917,4672,0.917,4673,0.917,4674,0.917,4675,0.917,4676,0.827,4677,0.917,4678,1.72,4679,0.917,4680,0.917,4681,0.917,4682,0.917,4683,0.917,4684,1.72,4685,0.917,4686,0.917,4687,0.917,4688,0.917,4689,1.72,4690,0.917,4691,0.917,4692,0.917,4693,0.917,4694,0.917,4695,0.917,4696,0.917,4697,0.917,4698,1.72,4699,0.917,4700,0.917,4701,0.917,4702,0.917,4703,0.917,4704,0.917,4705,0.917,4706,0.917,4707,0.917,4708,1.72,4709,0.917,4710,0.917,4711,0.917,4712,0.917,4713,0.917,4714,0.917,4715,0.917,4716,0.917,4717,0.827,4718,0.917,4719,0.806,4720,0.917,4721,0.917]],["component/115",[11,0.279,108,0.486]],["title/116",[225,25.785,293,26.331]],["name/116",[225,0.42,293,0.429]],["text/116",[26,3.908,27,4.013,50,3.027,57,3.092,92,5.015,128,3.17,192,3.17,221,3.586,225,4.616,227,4.802,237,3.225,253,2.885,269,3.092,293,4.713,305,3.283,315,5.051,316,3.523,317,2.988,318,4.762,332,3.995,334,8.598,364,3.283,558,3.925,657,5.53,835,5.715,922,4.798,950,5.037,1340,4.728,1343,4.872,3005,6.682,3196,5.457,3377,5.664,3384,4.834,3814,5.228,4188,5.281,4722,6.682,4723,7.407,4724,7.407,4725,7.407,6394,7.112]],["component/116",[11,0.279,108,0.486]],["title/117-1",[293,26.331,3411,45.802]],["name/117-1",[]],["text/117-1",[]],["component/117-1",[]],["title/117",[293,32.009]],["name/117",[293,0.776]],["text/117",[13,1.655,21,2.055,26,1.758,27,3.367,45,3.151,46,1.831,47,1.58,50,2.762,54,2.083,57,1.391,63,1.781,68,4.59,70,1.947,75,1.789,78,1.797,87,2.661,109,3.12,114,1.7,119,2.515,137,2.017,139,1.637,145,2.515,148,3.478,168,2.192,173,2.603,182,4.259,183,2.614,185,1.372,190,1.721,192,1.426,194,4.075,200,4.864,202,3.646,205,3.768,206,1.758,218,4.537,225,4.108,228,4.98,232,2.9,237,4.599,270,2.661,272,3.125,273,1.797,288,1.613,293,4.608,303,1.728,306,1.926,307,3.769,312,2.362,315,3.172,320,1.514,322,2.286,323,2.383,330,2.998,331,2.918,332,1.797,352,4.143,356,4.374,360,1.743,366,2.112,367,1.947,373,1.765,384,1.814,393,3.09,420,1.523,447,1.661,449,1.981,450,3.142,495,1.674,520,1.84,528,1.896,532,6.11,543,3.656,558,1.765,593,2.941,619,3.013,621,1.773,627,3.075,649,1.886,707,3.384,712,2.376,759,3.151,772,1.926,816,5.26,835,1.97,841,2.227,862,2.127,869,3.361,871,2.069,917,1.805,944,2.583,957,1.758,974,4.596,1011,2.192,1065,4.98,1089,2.307,1112,5.564,1119,2.427,1135,2.017,1143,2.548,1173,2.266,1220,3.006,1277,8.437,1326,2.778,1340,2.127,1392,3.006,1435,4.924,1567,2.158,1698,2.376,1707,3.874,1708,3.408,1943,2.548,2103,3.834,2114,2.455,2343,2.042,2490,3.094,2714,4.059,2716,4.229,2718,4.534,2892,2.864,3411,2.209,3421,2.806,3783,2.548,3917,2.806,3989,4.528,4188,2.376,4456,2.548,4727,3.332,4728,3.332,4729,3.332,4730,3.006,4731,4.85,4732,3.332,4733,3.332,4734,3.332,4735,3.094,4736,3.332,4737,3.094,4738,3.332,4739,3.199,4740,3.332,4741,3.332,4742,2.661,4743,3.332,4744,3.332,4745,3.332,4746,3.332,4747,3.332]],["component/117",[11,0.279,108,0.486]],["title/118-1",[4748,83.973]],["name/118-1",[]],["text/118-1",[]],["component/118-1",[]],["title/118-2",[4749,83.973]],["name/118-2",[]],["text/118-2",[]],["component/118-2",[]],["title/118-3",[4750,83.973]],["name/118-3",[]],["text/118-3",[]],["component/118-3",[]],["title/118-4",[4751,75.757]],["name/118-4",[]],["text/118-4",[]],["component/118-4",[]],["title/118-5",[4751,75.757]],["name/118-5",[]],["text/118-5",[]],["component/118-5",[]],["title/118-6",[4752,75.757]],["name/118-6",[]],["text/118-6",[]],["component/118-6",[]],["title/118-7",[4752,75.757]],["name/118-7",[]],["text/118-7",[]],["component/118-7",[]],["title/118-8",[4753,83.973]],["name/118-8",[]],["text/118-8",[]],["component/118-8",[]],["title/118",[8,25.04,482,33.208,2594,40.623]],["name/118",[8,0.332,482,0.44,2594,0.538]],["text/118",[4,3.122,8,4.427,11,2.14,26,1.801,27,3.4,33,3.043,37,1.722,40,1.518,46,1.876,51,1.996,68,1.722,75,1.833,76,1.722,78,1.842,81,1.263,96,1.974,109,2.531,111,2.03,113,2.69,119,1.597,127,2.755,128,2.347,130,1.082,141,3.809,142,4.454,144,1.709,148,1.757,151,2.881,157,3.705,161,1.894,165,2.724,172,1.809,176,3.493,177,3.104,178,1.491,185,2.259,186,3.316,192,2.347,201,1.779,209,3.951,214,1.764,218,1.702,221,2.655,240,1.904,244,1.374,250,1.587,252,4.557,253,3.916,256,2.03,269,1.425,271,1.518,289,3.428,302,3.193,303,3.565,305,2.431,320,3.122,331,1.474,341,1.729,347,2.971,354,3.644,363,3.043,379,3.526,406,1.677,407,2.918,447,3.923,454,2.195,470,3.451,472,1.904,482,6.156,483,1.764,484,3.028,489,1.779,503,1.876,507,1.885,593,1.867,619,3.073,623,1.771,624,2.018,637,1.867,643,1.85,651,3.361,686,3.729,702,4.669,703,2.093,707,2.149,713,4.283,746,2.516,792,2.727,816,3.17,862,2.179,870,3.451,881,4.04,904,3.871,926,2.516,963,2.876,987,5.063,1009,7.531,1011,2.246,1028,1.985,1045,5.255,1086,1.743,1107,3.666,1121,2.727,1134,1.974,1177,2.727,2083,3.666,2161,2.283,2333,2.302,2414,2.164,2451,2.12,2456,1.757,2594,5.448,2725,3.995,2755,8.897,2758,4.734,2953,2.822,2996,2.283,3694,6.626,4370,2.727,4503,4.947,4541,4.947,4620,4.618,4731,3.08,4754,3.414,4755,3.414,4756,3.414,4757,3.414,4758,3.414,4759,3.414,4760,5.484,4761,5.484,4762,7.098,4763,4.947,4764,5.484,4765,3.414]],["component/118",[11,0.279,108,0.486]],["title/119-1",[528,39.302,921,45.085]],["name/119-1",[]],["text/119-1",[]],["component/119-1",[]],["title/119-2",[27,17.931,320,23.164,528,29.009,921,33.278]],["name/119-2",[]],["text/119-2",[]],["component/119-2",[]],["title/119-3",[130,16.16,320,23.164,528,29.009,921,33.278]],["name/119-3",[]],["text/119-3",[]],["component/119-3",[]],["title/119-4",[118,42.354]],["name/119-4",[]],["text/119-4",[]],["component/119-4",[]],["title/119",[528,47.778]],["name/119",[528,1.158]],["text/119",[0,0.783,5,1.434,9,2.02,11,1.918,14,2.404,17,0.918,19,2.424,27,3.608,32,1.536,35,1.594,40,0.834,45,1.541,50,2.49,57,1.38,59,4.147,60,1.427,62,1.264,63,1.002,67,0.883,70,1.096,77,1.781,81,0.694,98,1.382,111,1.115,113,1.294,114,1.687,115,3.187,118,2.235,119,2.073,121,0.892,130,2.301,131,2.898,133,2.224,137,2.001,141,0.908,157,2.087,166,1.254,175,0.942,176,1.68,177,1.061,178,0.819,182,2.673,183,1.278,184,1.88,185,0.772,186,4.003,190,1.707,191,1.206,192,2.286,198,1.056,199,1.642,202,2.881,215,1.943,216,1.635,218,1.648,220,1.206,231,0.989,234,1.287,237,0.817,238,1.142,244,1.783,249,1.722,250,2.059,252,2.347,253,1.287,256,1.965,265,1.648,269,4.282,271,1.97,272,1.09,278,2.435,279,2.515,287,2.59,288,2.145,305,1.465,315,2.507,317,0.756,320,3.507,323,0.831,331,3.914,332,1.011,333,1.084,335,1.456,337,0.965,340,0.836,341,2.705,347,1.791,348,1.498,351,1.977,353,1.567,356,0.777,364,1.465,371,0.957,394,1.783,406,0.921,420,2.026,421,1.722,426,1.382,454,2.849,458,0.935,468,1.498,483,2.76,486,1.498,495,2.226,505,1.233,509,1.337,516,1.989,523,2.125,525,1.843,528,7.091,533,1.135,543,2.247,550,1.714,551,2.125,557,1.366,569,2.38,571,1.736,572,1.078,576,2.495,582,0.928,584,1.579,593,1.026,596,2.039,610,2.577,621,2.843,647,0.985,649,1.871,665,1.475,669,1.324,674,1.128,687,1.434,688,2.921,722,3.214,726,2.001,741,5.792,759,0.874,786,1.03,822,0.973,824,1.579,842,1.254,879,2.08,880,1.337,908,1.287,910,1.188,917,1.016,921,7.8,922,2.141,926,1.382,927,1.434,977,1.102,1036,2.508,1043,2.982,1047,1.692,1087,1.523,1108,1.157,1168,3.998,1203,1.692,1249,0.935,1344,1.382,1352,1.243,1402,1.398,1413,1.498,1471,1.791,1680,1.692,1701,3.665,1705,2.095,1707,3.193,1846,3.098,1908,2.435,2061,1.692,2083,2.962,2157,1.197,2161,2.209,2426,1.215,2443,1.523,2459,1.741,2495,1.523,2633,6.455,2634,1.523,2660,4.255,2661,8.138,2706,5.85,2707,1.801,2708,1.612,2709,4.255,2710,1.475,2711,1.801,2712,3.174,2713,3.174,2714,2.495,2715,1.801,2716,1.475,2807,1.55,2923,1.649,2987,2.157,2991,1.498,2996,1.254,3033,1.579,3153,2.783,3154,1.579,3211,1.579,4188,1.337,4370,1.498,4465,4.819,4762,2.982,4766,3.998,4767,1.692,4768,1.692,4769,1.692,4770,1.55,4771,4.267,4772,1.875,4773,1.875,4774,1.875,4775,1.875,4776,1.875,4777,3.305,4778,1.875,4779,1.875,4780,1.875,4781,1.579,4782,1.875,4783,3.305,4784,1.875,4785,1.875,4786,1.875,4787,1.875,4788,1.875,4789,3.305,4790,1.875,4791,1.875,4792,1.875,4793,1.875,4794,1.692,4795,1.875,4796,4.431,4797,4.431,4798,1.875,4799,1.875,4800,1.875,4801,2.982,4802,1.875,4803,1.692,4804,1.875,4805,3.305,4806,6.092,4807,1.875,4808,3.174,4809,1.875,4810,1.579,4811,4.819,4812,1.875,4813,1.875,4814,1.875,4815,3.069,4816,1.875,4817,1.875,4818,1.875,4819,1.875,4820,1.875,4821,1.875,4822,4.431,4823,1.692,4824,1.875,4825,1.875,4826,1.875,4827,3.305,4828,1.875,4829,1.875]],["component/119",[11,0.279,108,0.486]],["title/120-1",[315,23.928,773,28.428,1064,36.356,4742,40.727]],["name/120-1",[]],["text/120-1",[]],["component/120-1",[]],["title/120-2",[318,53.991]],["name/120-2",[]],["text/120-2",[]],["component/120-2",[]],["title/120-3",[133,24.426,320,26.654,1165,32.24]],["name/120-3",[]],["text/120-3",[]],["component/120-3",[]],["title/120-4",[1072,55.177,1075,46.178]],["name/120-4",[]],["text/120-4",[]],["component/120-4",[]],["title/120-5",[936,40.601,4830,58.174]],["name/120-5",[]],["text/120-5",[]],["component/120-5",[]],["title/120-6",[235,44.869,650,37.722,902,49.409]],["name/120-6",[]],["text/120-6",[]],["component/120-6",[]],["title/120-7",[227,34.311,4830,58.174]],["name/120-7",[]],["text/120-7",[]],["component/120-7",[]],["title/120-8",[293,26.331,1075,46.178]],["name/120-8",[]],["text/120-8",[]],["component/120-8",[]],["title/120-9",[756,41.561,1075,46.178]],["name/120-9",[]],["text/120-9",[]],["component/120-9",[]],["title/120-10",[65,28.505,132,26.405,718,39.221]],["name/120-10",[]],["text/120-10",[]],["component/120-10",[]],["title/120-11",[60,29.82,1964,58.174]],["name/120-11",[]],["text/120-11",[]],["component/120-11",[]],["title/120-12",[109,31.888,4213,58.174]],["name/120-12",[]],["text/120-12",[]],["component/120-12",[]],["title/120-13",[61,45.802,62,46.568]],["name/120-13",[]],["text/120-13",[]],["component/120-13",[]],["title/120",[178,30.168,1415,52.828]],["name/120",[1415,1.557]],["text/120",[11,1.367,13,1.482,17,0.817,24,0.878,26,0.881,27,3.288,32,0.776,35,0.806,36,0.966,37,1.504,38,0.885,39,0.95,41,0.927,42,1.157,44,1.763,45,2.631,46,1.639,47,0.792,50,1.651,55,1.059,57,2.051,60,2.436,63,1.594,65,2.387,67,1.903,68,0.842,77,0.557,78,0.901,81,1.103,88,1.082,92,2.096,99,1.631,100,0.922,106,0.779,109,2.268,113,2.452,119,2.298,128,2.103,130,0.945,132,2.819,133,1.242,135,0.723,139,1.985,141,0.809,152,1.146,158,1.146,159,0.999,164,3.118,165,0.83,168,1.962,172,1.581,173,2.378,175,1.499,176,0.849,178,1.303,180,0.789,182,0.836,183,0.646,186,1.148,194,0.878,201,0.87,202,2.65,204,3.552,205,1.673,210,1.697,214,0.863,215,0.982,217,1.066,218,0.833,222,1.191,225,3.322,227,3.376,230,1.84,232,0.901,236,0.839,237,1.299,242,1.663,244,3.086,250,0.776,253,1.913,257,1.146,268,0.866,269,4.827,271,0.743,273,1.609,288,1.956,292,0.941,293,2.591,299,2.253,306,3.621,307,3.79,308,1.017,310,1.229,312,1.775,315,2.648,316,2.684,317,0.674,318,1.074,320,1.836,323,0.74,329,2.046,331,2.436,332,1.609,335,1.314,340,0.745,345,2.198,347,0.905,353,0.792,354,1.381,360,0.874,361,0.859,364,1.791,373,1.581,406,0.82,420,2.864,421,2.105,447,0.833,448,1.044,449,1.773,455,1.09,469,0.711,472,0.931,482,2.781,483,2.088,484,0.922,503,1.639,505,1.962,511,1.146,518,1.231,526,1.277,527,3.182,528,1.697,529,1.024,536,1.074,553,4.024,569,3.03,571,4.029,572,3.909,573,3.864,582,2,593,3.718,610,1.439,624,0.987,637,0.914,638,1.204,644,1.03,645,1.877,646,1.547,649,0.945,650,3.628,651,1.024,654,1.231,659,1.407,665,1.314,669,1.179,673,1.261,681,1.191,693,1.099,696,1.03,707,1.051,712,1.191,718,1.117,722,1.005,748,1.168,753,1.609,756,3.769,759,2.29,764,2.324,767,1.066,772,0.966,773,5.093,794,1.126,796,1.051,798,0.885,811,1.204,835,0.987,840,1.507,862,1.904,871,1.852,879,1.051,907,1.191,909,1.715,925,1.157,936,2.887,951,1.066,957,0.881,970,2.281,975,1.051,980,1.191,995,1.051,1004,1.044,1028,2.855,1035,0.927,1036,0.945,1062,1.295,1064,3.503,1065,2.198,1071,1.38,1072,7.767,1075,7.055,1086,2.507,1089,1.157,1108,2.493,1116,3.013,1134,0.966,1135,1.011,1157,1.469,1165,0.918,1167,2.065,1191,1.231,1193,1.507,1198,1.231,1215,1.217,1249,2.015,1306,2.691,1326,0.863,1402,1.245,1411,1.179,1413,4.507,1415,6.387,1424,3.646,1434,1.231,1520,2.028,1534,1.38,1645,2.253,1695,2.313,1697,2.346,1698,2.127,1705,1.89,1706,2.085,1707,4.066,1741,1.507,1822,1.191,1878,1.407,1977,1.507,2039,1.108,2083,1.117,2156,1.245,2157,1.904,2202,4.137,2246,2.431,2247,1.204,2343,1.024,2450,2.825,2580,1.168,2585,1.436,2646,3.554,2677,1.604,2714,2.252,2718,0.976,2734,1.09,2775,2.465,2875,1.231,2889,1.551,2903,1.604,2905,1.314,2961,1.146,3002,2.127,3141,2.065,3151,1.407,3455,1.231,3523,1.231,3530,1.334,3565,1.217,3626,1.407,3709,1.507,3768,1.507,3844,1.507,4034,1.277,4166,1.146,4213,1.407,4231,2.346,4246,1.191,4255,1.295,4429,1.507,4462,2.281,4469,1.277,4742,5.801,4830,1.407,4831,4.041,4832,1.67,4833,1.67,4834,1.67,4835,1.507,4836,1.67,4837,1.67,4838,1.67,4839,1.67,4840,1.67,4841,1.67,4842,1.67,4843,1.67,4844,1.67,4845,1.67,4846,1.67,4847,1.67,4848,1.507,4849,1.67,4850,2.983,4851,1.67,4852,1.67,4853,1.67,4854,5.643,4855,1.67,4856,1.67,4857,1.67,4858,1.67,4859,1.67,4860,2.983,4861,1.67,4862,1.67,4863,1.67,4864,1.67,4865,1.67,4866,1.67,4867,1.67,4868,2.983,4869,2.983,4870,1.67,4871,1.67,4872,1.67,4873,1.67,4874,1.67,4875,2.983,4876,1.67,4877,1.67,4878,1.67,4879,1.67,4880,2.983,4881,1.67,4882,1.67,4883,1.67,4884,1.67,4885,1.67,4886,1.67,4887,4.041,4888,1.67,4889,1.67,4890,1.67,4891,2.983,4892,1.67,4893,1.67]],["component/120",[11,0.279,108,0.486]],["title/121",[11,9.064,39,25.651,178,19.689,2456,23.196,2710,35.463]],["name/121",[441,0.899,2710,0.885]],["text/121",[9,1.969,24,2.27,27,3.926,45,2.014,63,2.31,77,2.198,80,3.399,100,3.641,101,5.271,102,3.557,103,3.379,105,3.275,106,3.728,113,1.691,119,3.084,132,4.755,144,2.162,159,2.584,168,2.842,173,2.092,176,2.196,178,2.88,181,2.648,183,3.092,198,2.433,202,4.314,205,1.789,222,3.081,225,3.597,250,2.008,253,1.683,265,2.154,281,2.498,288,4.332,293,3.048,310,3.294,317,2.66,320,4.378,327,4.783,331,4.16,335,2.906,340,3.566,384,3.59,393,1.975,420,1.975,610,3.181,611,2.162,637,2.363,669,3.05,696,2.665,697,3.399,713,5.752,743,2.842,756,3.968,764,6.419,765,3.081,771,2.683,772,2.498,786,5.296,975,5.033,1086,4.081,1326,2.232,1391,4.7,2456,2.223,2705,3.081,2710,10.055,2968,4.15,3141,7.033,3472,2.913,3508,5.553,3548,3.262,3704,3.184,4209,5.553,4894,4.321,4895,4.321,4896,4.321,4897,4.321,4898,4.321,4899,4.321,4900,4.321,4901,4.321,4902,4.321,4903,4.321,4904,4.321,4905,6.735,4906,7.997,4907,4.321,4908,4.321,4909,4.321,4910,4.321]],["component/121",[11,0.279,108,0.486]],["title/122",[972,30.168,1131,45.085]],["name/122",[972,0.491,1131,0.734]],["text/122",[7,2.7,9,1.941,11,1.925,18,2.541,27,3.99,45,1.986,50,2.666,57,1.778,60,1.839,68,5.095,77,3.192,81,1.576,115,3.758,123,2.802,130,3.437,133,2.716,148,2.192,151,2.238,172,2.257,173,2.062,175,3.983,183,3.703,186,2.51,197,2.739,214,2.201,227,5.815,237,4.578,242,4.42,244,4.473,250,1.979,251,3.813,252,2.866,265,3.252,268,2.21,269,3.708,271,3.524,279,2.006,288,2.062,299,1.954,305,1.888,310,3.265,312,2.866,315,3.061,317,1.718,320,1.935,323,2.891,335,1.877,341,2.157,364,1.888,406,2.092,420,1.948,421,2.219,502,2.183,558,2.257,571,2.238,582,2.108,610,2.055,623,3.384,631,4.024,644,4.024,646,3.384,647,2.238,668,2.387,673,3.216,773,2.375,835,2.518,871,2.645,879,2.681,934,4.106,938,2.739,940,4.475,961,3.403,972,4.736,1028,3.792,1086,2.174,1128,4.436,1129,2.611,1131,5.798,1899,3.007,2057,3.139,3208,3.303,3216,3.258,3594,4.291,3744,3.258,3814,3.007,4300,6.063,4462,3.258,4726,7.612,4911,6.972,4912,9.379,4913,4.26,4914,3.459,4915,5.211,4916,4.26,4918,3.843,4919,4.26,4920,7.927,4921,4.26,5654,3.956,6394,4.091]],["component/122",[11,0.279,108,0.486]],["title/123-1",[186,22.577,496,34.101,909,33.734]],["name/123-1",[]],["text/123-1",[]],["component/123-1",[]],["title/123-2",[320,31.382,856,43.477]],["name/123-2",[]],["text/123-2",[]],["component/123-2",[]],["title/123-3",[910,43.78,4922,62.317]],["name/123-3",[]],["text/123-3",[]],["component/123-3",[]],["title/123-4",[320,31.382,4923,58.174]],["name/123-4",[]],["text/123-4",[]],["component/123-4",[]],["title/123-5",[982,58.144]],["name/123-5",[]],["text/123-5",[]],["component/123-5",[]],["title/123-6",[177,39.1,479,32.861]],["name/123-6",[]],["text/123-6",[]],["component/123-6",[]],["title/123",[1134,48.544]],["name/123",[1134,1.177]],["text/123",[0,1.936,4,0.574,7,4.619,11,2.27,15,0.643,17,0.619,18,1.25,19,0.692,21,0.78,22,0.761,24,1.218,27,3.534,28,1.112,30,1.689,32,1.847,35,0.61,37,0.638,38,1.701,39,1.319,40,1.767,45,1.853,46,0.695,50,0.947,57,1.659,59,2.452,60,2.669,63,0.676,65,2.535,67,1.512,68,0.638,70,2.323,73,0.78,75,0.679,77,0.773,78,0.682,79,1.48,81,1.715,88,0.819,91,0.98,92,0.656,96,0.731,99,0.692,101,0.692,102,0.682,103,0.648,105,2.303,106,2.432,109,1.07,113,2.723,114,0.645,115,4.598,127,1.613,128,2.452,130,1.653,131,2.482,133,1.336,137,0.765,141,0.612,142,1.122,144,0.633,150,0.852,151,0.664,157,0.595,159,0.756,164,0.58,165,0.628,166,4.406,172,0.67,173,1.122,175,0.635,176,1.632,178,0.552,179,0.765,180,0.597,182,0.633,183,3.388,185,0.955,186,4.049,192,1.374,194,1.686,196,1.293,203,0.932,205,0.524,210,1.319,213,0.875,216,1.588,221,1.122,223,0.819,237,2.272,242,0.705,244,0.933,249,1.672,250,2.662,252,2.895,253,2.032,265,1.156,269,1.34,271,2.93,272,0.735,273,1.25,279,3.276,287,2.323,288,0.612,291,0.911,295,0.932,299,0.58,303,0.656,305,0.56,306,0.731,309,0.682,312,2.716,315,3.42,316,1.103,317,2.494,320,3.573,323,1.423,331,1.716,332,1.25,335,2.724,340,1.431,342,0.685,354,1.074,360,1.679,364,0.56,373,1.701,376,1.836,382,0.902,383,0.716,384,0.688,393,0.578,406,1.577,409,2.573,420,1.817,421,0.659,446,0.902,447,1.6,448,1.449,450,0.739,467,1.605,470,0.796,479,1.891,483,4.063,484,2.56,489,0.659,502,0.648,503,1.274,506,5.628,511,5.728,516,1.395,525,1.79,527,0.819,528,0.719,533,1.403,541,1.764,550,0.656,557,0.921,571,2.088,611,0.633,623,1.203,624,0.747,631,0.78,637,0.692,645,1.459,646,1.203,647,1.218,649,1.312,650,3.354,651,2.436,654,0.932,657,0.723,667,0.967,668,1.799,687,0.967,693,0.832,696,0.78,702,1.739,710,1.045,726,0.765,759,3.784,768,0.967,771,0.785,772,0.731,773,0.705,791,4.975,792,1.01,794,2.164,798,1.228,815,1.045,816,2.298,822,0.656,827,2.555,842,0.845,904,0.893,907,0.902,909,5.648,910,6.982,911,7.677,917,0.685,922,1.502,925,2.223,926,0.932,927,1.773,934,0.796,936,1.887,971,2.679,979,1.045,981,5.357,982,8.056,983,1.065,996,0.875,1002,0.967,1008,0.867,1045,2.455,1084,0.932,1086,2.028,1102,0.752,1104,1.065,1122,1.141,1129,0.775,1130,1.653,1133,2.091,1134,4.021,1135,0.765,1142,4.521,1154,0.852,1172,0.832,1173,0.86,1180,1.916,1194,1.01,1249,1.156,1326,0.653,1394,0.893,1471,1.739,1576,0.723,1649,0.86,1705,0.801,1708,0.801,1793,0.943,2157,0.807,2246,0.761,2253,1.98,2343,1.421,2414,0.801,2451,0.785,2456,1.193,2568,0.995,2594,0.875,2651,2.226,2734,0.825,2758,0.761,2905,0.995,2913,1.045,2972,0.967,2987,0.825,2996,0.845,3003,1.01,3026,2.703,3027,4.576,3153,1.065,3162,5.168,3211,2.703,3350,1.01,3366,1.141,3381,0.954,3387,0.932,3436,0.967,3523,1.708,3580,1.065,3642,0.967,3835,1.112,3880,1.01,4148,1.141,4255,0.98,4330,1.141,4443,1.065,4445,2.091,4469,2.455,4609,1.141,4794,1.141,4823,1.141,4922,6.846,4924,1.264,4925,3.21,4926,1.264,4927,1.264,4928,1.264,4929,1.264,4930,1.264,4931,1.174,4932,3.21,4933,1.264,4934,1.264,4935,2.318,4936,2.318,4937,1.264,4938,1.264,4939,1.264,4940,1.264,4941,1.264,4942,3.21,4943,1.264,4944,1.141,4945,1.264,4946,1.264,4947,1.264,4948,7.589,4949,1.264,4950,3.974,4951,1.264,4952,1.264,4953,2.318,4954,3.974,4955,1.264,4956,1.264,4957,1.264,4958,1.264,4959,1.264,4960,1.264,4961,1.264,4962,1.264,4963,1.264,4964,1.264,4965,1.264,4966,1.264,4967,1.264,4968,1.264,4969,1.264,4970,1.264,4971,3.21,4972,1.264,4973,1.264,4974,1.264,4975,1.264]],["component/123",[11,0.279,108,0.486]],["title/124-1",[131,27.91,496,34.101,6146,42.276]],["name/124-1",[]],["text/124-1",[]],["component/124-1",[]],["title/124-2",[79,44.092,6146,49.776]],["name/124-2",[]],["text/124-2",[]],["component/124-2",[]],["title/124",[178,30.168,6146,49.776]],["name/124",[6146,1.467]],["text/124",[0,2.407,11,1.993,15,1.848,18,2.791,22,2.188,24,1.91,27,3.327,32,1.689,36,2.102,45,1.695,47,3.397,50,1.486,55,2.304,67,4.454,71,1.47,72,1.684,73,3.557,75,1.952,76,1.834,77,1.922,79,6.038,81,4.228,85,3.062,118,1.834,119,2.697,120,1.935,126,1.773,127,2.897,128,1.556,130,2.271,131,2.743,133,1.514,134,2.541,137,2.201,142,1.76,144,4.734,148,1.871,150,2.451,151,4.67,157,1.712,159,2.175,165,2.864,169,2.027,172,1.927,173,1.76,183,1.406,185,1.498,186,3.138,190,1.878,192,1.556,193,4.352,215,2.137,221,1.76,231,1.918,236,1.827,265,2.875,279,1.712,285,2.079,288,1.76,299,1.668,305,1.612,310,4.236,312,3.582,316,1.73,317,1.467,323,3.176,361,2.966,364,1.612,368,2.069,376,2.079,394,1.961,406,1.786,420,2.636,469,3.47,479,3.879,496,2.113,502,1.863,511,2.495,593,1.989,594,2.819,603,2.048,604,2.304,627,3.298,630,2.288,631,2.243,633,3.735,643,1.97,645,2.288,650,2.338,651,4.998,657,4.663,668,3.231,671,3.887,672,2.175,693,2.392,696,2.243,698,2.243,703,3.534,713,1.979,743,2.392,753,1.961,759,1.695,791,2.745,798,1.927,811,2.62,822,1.886,835,2.149,915,3.28,933,2.62,972,1.588,1000,2.517,1061,2.904,1077,2.952,1089,2.517,1191,2.679,1221,3.28,1249,2.875,1330,3.28,1397,5.479,1434,2.679,1567,2.355,1899,2.566,2156,2.711,2410,2.649,2418,4.535,2426,6.421,2591,4.409,2824,4.2,2904,2.745,2912,2.781,2971,3.062,3701,2.62,3993,2.904,4034,2.781,4166,3.956,4452,3.28,6132,3.491,6146,8.667,6268,5.766,6269,3.636,6286,5.354,6287,3.636,6293,3.636,6294,3.636,6395,6.072,6396,6.072,6397,3.829,6398,3.829,6399,3.829,6400,3.829]],["component/124",[11,0.279,108,0.486]],["title/125-1",[141,28.403,185,24.166,186,22.577]],["name/125-1",[]],["text/125-1",[]],["component/125-1",[]],["title/125-2",[128,25.111,141,28.403,243,27.351]],["name/125-2",[]],["text/125-2",[]],["component/125-2",[]],["title/125-3",[27,17.931,185,21.002,186,19.621,407,27.136]],["name/125-3",[]],["text/125-3",[]],["component/125-3",[]],["title/125-4",[186,26.583,1026,52.828]],["name/125-4",[]],["text/125-4",[]],["component/125-4",[]],["title/125",[141,40.654]],["name/125",[141,0.986]],["text/125",[0,1.388,9,1.515,11,1.357,15,1.69,18,1.295,27,3.712,33,1.845,42,3.716,57,1.388,67,1.565,71,1.345,72,1.54,86,2.51,106,1.55,109,3.116,113,2.642,128,3.891,131,1.582,135,1.439,136,2.796,138,3.561,139,1.633,140,6.041,141,5.725,144,2.686,167,2.542,172,1.762,174,2.656,176,2.728,178,1.452,180,1.571,183,3.515,185,4.348,186,4.363,191,3.451,192,2.297,198,1.872,209,4.454,221,1.609,227,1.651,236,2.697,243,4.792,244,3.117,250,1.545,252,2.358,253,2.629,259,2.8,261,2.8,263,2.656,267,2.8,268,1.725,269,4.505,271,3.444,276,3.378,277,4.435,299,2.462,312,3.403,317,3.429,320,1.51,323,2.379,325,4.308,329,2.281,331,1.435,332,1.793,333,3.902,335,1.465,340,1.483,341,2.718,342,2.908,354,1.54,359,4.298,364,2.379,373,1.762,392,2.656,393,3.086,407,2.856,469,1.415,470,2.092,496,1.932,524,2.302,528,3.054,558,1.762,571,2.82,572,1.912,582,1.645,629,2.051,632,2.241,674,2,688,1.818,713,1.81,722,4.061,741,5.524,746,2.45,756,2,759,2.502,773,1.854,818,2.153,824,2.8,861,2.371,864,2.137,870,2.092,977,1.954,1026,4.105,1086,2.739,1109,2.261,1111,2.8,1119,2.422,1154,2.241,1253,2.092,1375,2.999,1420,2.281,1446,2.542,1522,2.347,1567,2.153,1712,2.656,1960,2.8,2114,2.45,2432,2.924,2512,4.917,2563,2.615,2951,5.154,2966,2.656,3344,2.422,3670,2.45,3671,2.656,3879,4.842,4504,2.999,4811,4.842,4976,3.324,4977,3.324,4978,3.324,4979,3.324,4980,3.324,4981,3.324,4982,3.324,4983,3.324,4984,3.324,4985,3.324,4986,3.324,4987,3.324,4988,3.324,4989,5.367,4990,3.324,4991,3.324,4992,5.367,4993,3.324,4994,3.324,4995,3.324,4996,3.324,4997,3.324,4998,3.324,4999,3.324,5000,3.324,5001,3.324,5002,3.324,5003,3.324,5004,3.324,5005,3.324,5006,3.324,5007,3.324,5008,3.324]],["component/125",[11,0.279,108,0.486]],["title/126-1",[1112,34.101,2594,40.623,5009,46.864]],["name/126-1",[]],["text/126-1",[]],["component/126-1",[]],["title/126-2",[320,26.654,2594,40.623,5009,46.864]],["name/126-2",[]],["text/126-2",[]],["component/126-2",[]],["title/126-3",[320,31.382,1112,40.15]],["name/126-3",[]],["text/126-3",[]],["component/126-3",[]],["title/126",[205,28.605,225,25.785]],["name/126",[205,0.466,225,0.42]],["text/126",[7,1.505,18,0.925,27,3.484,32,1.886,35,1.958,44,1.404,45,3.29,47,1.126,50,2.171,57,3.21,60,1.025,63,2.169,65,1.154,67,1.118,68,3.169,77,0.792,103,1.217,105,1.18,106,1.892,109,3.997,114,2.071,115,1.126,128,2.274,130,1.286,133,1.69,141,3.723,161,4.267,168,1.562,169,2.263,173,1.15,180,1.122,183,2.729,190,3.246,199,2.016,205,4.856,206,2.141,216,1.175,218,2.023,225,3.924,236,1.193,237,2.736,246,2.669,250,1.886,253,2.749,265,2.023,269,4.389,271,3.652,273,2.866,276,2.554,286,2.179,293,1.547,297,1.429,299,1.861,302,1.886,303,3.26,305,1.799,306,1.373,310,3.566,316,1.13,317,1.637,320,2.414,323,1.053,330,4.288,331,3.32,335,1.788,337,1.222,340,1.059,341,2.055,347,1.287,356,2.2,364,1.799,371,2.071,373,2.815,378,1.293,393,1.086,406,2.609,407,1.264,420,2.873,421,1.237,453,1.429,489,1.237,502,1.217,511,2.784,529,2.487,533,1.438,558,2.15,582,3.805,593,3.86,605,1.897,610,1.146,611,3.145,616,1.793,617,1.366,619,2.274,623,1.232,627,1.359,630,1.495,643,1.287,647,1.248,649,1.344,669,1.677,671,1.601,707,2.554,722,1.429,752,1.55,753,2.189,771,2.52,773,1.324,818,1.539,822,1.232,863,2.427,925,1.645,934,1.495,950,4.273,972,1.037,977,5.312,978,5.945,1008,2.784,1009,2.81,1028,3.088,1086,3.207,1089,1.645,1112,6.816,1130,1.694,1136,1.817,1173,1.615,1186,1.366,1188,5.229,1212,1.677,1216,1.771,1435,1.73,1559,3.581,1568,1.485,1687,1.712,1693,2.143,1713,2.924,2114,2.99,2161,2.713,2331,1.645,2343,1.456,2456,2.088,2594,6.859,2641,2.281,2725,2.956,2734,2.649,2781,2.089,2998,1.344,3216,1.817,3783,1.817,3843,7.811,4144,1.963,4166,2.784,4246,1.694,4255,1.842,4469,1.817,4470,1.897,4722,5.669,4918,2.143,4944,2.143,5009,7.482,5010,5.312,5011,2.375,5012,2.375,5013,2.375,5014,2.375,5015,2.375,5016,2.206,5017,2.375,5018,2.143,5019,2.375,5020,2.375,5021,2.375,5022,2.375,5023,2.375,5024,2.375,5025,2.375,5026,2.375,5027,2.375,5028,2.375,5029,2.375,5030,6.284,5031,2.375,5032,2.375,5033,2.375,5034,4.058,5035,2.375,5036,2.375,5037,2.375,5038,2.375,5039,2.375,5040,2.375,5041,2.375,5042,2.375,5043,2.375,5044,2.375,5045,2.375,5046,2.375,5048,2.375,5049,2.375,6401,2.502]],["component/126",[11,0.279,108,0.486]],["title/127-1",[225,25.785,1411,48.759]],["name/127-1",[]],["text/127-1",[]],["component/127-1",[]],["title/127-2",[984,49.639]],["name/127-2",[]],["text/127-2",[]],["component/127-2",[]],["title/127-3",[225,25.785,226,38.901]],["name/127-3",[]],["text/127-3",[]],["component/127-3",[]],["title/127-4",[6105,73.857]],["name/127-4",[]],["text/127-4",[]],["component/127-4",[]],["title/127-5",[6257,75.757]],["name/127-5",[]],["text/127-5",[]],["component/127-5",[]],["title/127-6",[6258,75.757]],["name/127-6",[]],["text/127-6",[]],["component/127-6",[]],["title/127",[9,31.481,315,32.418]],["name/127",[9,0.513,315,0.528]],["text/127",[0,0.439,9,0.48,11,1.019,13,0.972,18,0.762,21,0.649,24,0.553,26,0.555,27,3.33,29,0.816,32,0.909,37,0.987,38,0.558,39,1.114,40,1.796,44,0.622,45,1.279,47,0.928,57,0.439,60,1.744,65,0.951,67,0.496,68,1.731,71,0.792,74,0.795,76,0.987,77,0.914,78,0.568,81,0.389,86,0.795,87,0.841,89,0.649,106,0.491,108,0.368,109,1.266,113,1.343,115,0.928,119,1.605,127,0.529,128,2.169,130,1.606,139,0.517,141,4.013,151,1.028,157,0.496,159,0.63,161,0.584,165,0.523,166,0.704,170,2.141,173,0.51,176,1.745,178,1.198,183,0.757,184,0.599,185,2.84,188,3.475,190,0.544,192,3.625,194,1.028,197,2.598,198,1.102,199,0.523,201,0.548,202,4.367,204,0.662,205,2.73,208,0.672,210,0.599,216,0.521,217,3.514,218,2.943,221,1.328,225,3.161,226,5.672,227,0.972,230,0.649,231,0.555,236,1.378,237,2.871,240,0.587,242,0.587,243,1.6,244,1.381,253,1.337,269,5.334,271,2.448,276,1.232,281,2.93,287,1.144,288,0.51,291,0.758,299,0.483,301,3.235,302,0.489,305,1.216,310,3.624,312,2.593,315,3.89,316,1.633,317,1.384,320,1.836,323,0.868,327,1.17,330,0.587,331,3.406,332,0.568,333,0.608,335,0.464,340,0.873,341,0.533,352,0.645,353,0.499,356,2.28,358,0.716,359,4.492,360,0.551,361,0.542,364,1.216,371,0.537,373,0.558,376,0.602,378,0.573,380,0.612,393,1.569,394,1.479,406,1.347,409,3.475,423,0.645,426,0.776,449,2.402,450,0.615,483,1.011,501,1.097,502,1.003,507,0.581,520,0.581,525,3.492,527,0.682,541,3.623,550,0.546,576,1.477,582,3.099,593,1.07,596,1.692,603,1.102,610,1.949,611,0.527,615,0.658,617,1.973,623,1.015,637,1.07,643,1.061,646,1.423,647,0.553,649,1.108,653,4.208,654,0.776,656,1.773,657,2.621,666,0.805,674,0.633,679,1.426,696,0.649,703,0.645,706,0.926,713,1.065,722,0.633,759,1.279,764,3.791,765,0.751,767,0.672,773,1.529,785,0.816,789,0.776,794,0.71,801,1.766,841,1.308,862,0.672,863,2.052,869,1.715,879,0.662,909,0.605,910,2.561,921,0.687,922,0.682,930,0.828,934,1.232,938,1.764,940,1.343,944,0.816,951,3.514,954,0.816,955,0.816,972,2.879,975,2.16,977,1.612,978,0.692,980,0.751,981,0.743,984,4.9,994,0.886,995,0.662,996,0.729,999,0.828,1022,1.766,1035,1.086,1064,0.751,1071,0.87,1075,1.308,1086,1.4,1102,2.402,1109,0.716,1129,2.103,1134,1.984,1139,0.95,1186,0.605,1202,2.045,1222,0.785,1249,2.527,1252,0.662,1254,0.729,1270,0.886,1340,2.579,1343,0.692,1394,0.743,1411,3.578,1471,0.57,1494,0.704,1495,0.776,1520,0.716,1576,1.963,1600,0.905,1687,1.41,1698,0.751,1704,0.599,1705,2.175,1901,0.71,1942,0.776,1962,0.704,2004,2.191,2083,0.704,2103,0.751,2156,0.785,2235,0.805,2246,1.65,2253,1.207,2331,3.173,2364,0.886,2414,0.667,2427,2.547,2442,0.736,2446,2.412,2450,0.736,2456,0.542,2495,0.855,2529,1.539,2531,3.235,2559,1.011,2565,0.87,2566,0.926,2646,0.926,2648,1.011,2734,0.687,2756,2.267,2832,1.817,2833,1.817,2834,2.547,2835,2.547,2836,1.879,2837,6.014,2838,1.879,2839,1.879,2853,1.817,2912,0.805,2913,0.87,2938,0.926,2961,0.722,2987,0.687,3001,0.828,3002,1.396,3003,3.66,3012,2.31,3013,1.648,3014,0.886,3015,0.886,3016,0.886,3032,1.497,3070,1.766,3090,1.648,3092,1.648,3093,0.841,3111,0.886,3112,0.886,3122,2.191,3138,0.95,3139,0.95,3145,0.841,3151,2.89,3154,1.648,3165,1.766,3213,0.886,3240,0.95,3241,0.95,3249,0.886,3250,0.95,3344,0.767,3357,1.766,3387,0.776,3420,0.795,3431,0.805,3488,0.95,3615,0.926,3701,0.758,3704,0.776,3758,2.474,3787,0.816,3812,0.841,3814,0.743,4456,0.805,4616,2.624,4719,0.926,4742,0.841,4763,0.95,4771,0.841,4810,0.886,4848,1.766,5009,1.563,5050,1.053,5051,1.053,5052,1.053,5053,1.053,5054,1.053,5055,1.053,5056,1.766,5057,2.743,5058,1.053,5059,1.053,5060,1.053,5061,1.053,5062,1.053,5063,1.053,5064,1.053,5065,1.053,5066,1.053,5067,1.053,5068,1.053,5069,0.95,5070,1.957,5071,1.053,5072,1.053,5073,1.053,5074,1.053,5075,1.053,5076,1.053,5077,1.053,5078,1.053,5079,1.053,5080,1.053,5081,1.053,5082,1.053,5083,1.053,5084,1.053,5085,1.053,5086,1.053,5087,1.053,5088,1.053,5089,1.053,5090,1.053,5091,1.053,5092,1.053,5093,1.053,5094,2.743,5095,1.053,5096,1.053,5097,1.053,5098,1.053,5099,1.053,5100,1.957,5101,1.957,5102,1.053,5103,1.053,5104,1.053,5105,1.053,5106,1.053,5107,1.053,5108,1.053,5109,1.053,5110,1.053,5111,1.053,5112,1.053,5113,1.053,5114,1.053,5115,1.053,5116,1.053,5117,1.053,5118,1.648,5119,1.053,5120,1.053,5121,1.957,5122,1.957,5123,1.053,5124,3.432,5125,1.053,5126,1.053,5127,1.053,5128,1.053,5129,1.053,5130,1.053,5131,1.053,5132,1.053,5133,1.053,5134,1.053,5136,1.053,5137,1.053,5138,1.053,5139,1.957,5140,1.957,5141,1.957,5142,1.053,5143,1.053,5144,1.957,5145,1.053,5146,1.053,5147,1.053,5148,2.743,5149,1.957,5150,1.053,5151,1.053,5152,1.053,5153,1.053,5154,1.053,5155,1.053,5156,1.053,5157,1.053,5158,1.053,5159,1.053,5160,1.053,5161,1.053,5162,2.743,5163,5.506,5164,1.053,5165,1.957,5166,1.957,5167,1.053,5168,1.053,5169,1.053,5170,1.053,5171,1.053,5172,1.957,5173,1.053,5174,1.957,5175,1.957,5176,1.053,5177,1.053,5178,1.053,5179,1.053,5180,1.053,5181,1.053,6105,0.926,6257,3.645,6258,0.95,6402,1.109,6403,2.889,6404,2.061,6405,1.109,6406,1.109,6407,1.109,6408,1.109,6409,1.109]],["component/127",[11,0.279,108,0.486]],["title/128-1",[3411,55.679]],["name/128-1",[]],["text/128-1",[]],["component/128-1",[]],["title/128-2",[130,21.893,315,32.418]],["name/128-2",[]],["text/128-2",[]],["component/128-2",[]],["title/128-3",[130,18.595,315,27.533,1450,36.675]],["name/128-3",[]],["text/128-3",[]],["component/128-3",[]],["title/128-4",[27,17.931,175,25.617,1846,35.64,2442,35.64]],["name/128-4",[]],["text/128-4",[]],["component/128-4",[]],["title/128-5",[19,37.78,315,32.418]],["name/128-5",[]],["text/128-5",[]],["component/128-5",[]],["title/128-6",[184,39.302,315,32.418]],["name/128-6",[]],["text/128-6",[]],["component/128-6",[]],["title/128-7",[185,34.589]],["name/128-7",[]],["text/128-7",[]],["component/128-7",[]],["title/128-8",[185,28.453,315,32.418]],["name/128-8",[]],["text/128-8",[]],["component/128-8",[]],["title/128-9",[957,44.305]],["name/128-9",[]],["text/128-9",[]],["component/128-9",[]],["title/128-10",[185,24.166,759,27.351,957,30.954]],["name/128-10",[]],["text/128-10",[]],["component/128-10",[]],["title/128-11",[184,39.302,957,36.445]],["name/128-11",[]],["text/128-11",[]],["component/128-11",[]],["title/128-12",[528,47.778]],["name/128-12",[]],["text/128-12",[]],["component/128-12",[]],["title/128-13",[327,41.313,3614,55.177]],["name/128-13",[]],["text/128-13",[]],["component/128-13",[]],["title/128",[315,39.409]],["name/128",[315,0.956]],["text/128",[0,0.685,4,0.269,7,0.376,9,1.814,11,1.318,14,2.698,15,0.578,18,2.081,19,1.605,22,0.685,24,0.861,25,1.125,26,1.928,27,3.438,32,1.363,33,0.91,35,1.415,36,0.343,37,0.299,38,0.314,39,0.337,40,0.264,41,0.329,44,0.351,45,1.181,46,0.625,47,0.997,48,1.173,50,2.277,57,2.326,59,1.298,60,1.427,61,0.393,62,0.4,63,1.768,65,1.425,67,0.991,68,3.024,71,1.337,72,0.275,74,0.448,75,0.319,76,0.299,77,0.978,81,1.473,92,0.308,94,0.474,95,0.419,96,2.645,97,0.345,99,0.324,100,0.328,101,0.324,102,0.32,103,0.304,105,0.565,106,0.53,109,0.525,112,1.384,113,0.232,114,0.837,115,3.188,117,1.498,119,1.71,121,0.541,123,0.39,127,0.298,128,1.085,130,2.716,132,0.267,133,0.876,134,0.415,137,0.993,144,0.297,148,1.304,150,0.4,151,1.737,152,0.781,157,0.279,161,0.329,165,1.045,168,0.39,170,0.603,172,0.603,173,1.42,175,3.999,176,2.024,178,0.716,179,0.359,180,1.386,181,0.697,182,2.789,183,1.539,184,2.603,185,4.226,186,1.407,190,0.847,192,1.704,194,0.861,199,1.045,200,0.877,202,1.972,205,2.785,210,0.647,214,0.306,215,0.349,216,1.254,217,0.379,218,1.463,220,2.126,221,0.794,222,0.423,225,3.539,227,0.565,231,1.337,236,1.057,237,3.881,238,1.281,240,3.655,241,0.384,244,1.725,246,0.39,250,2.126,252,2.72,253,2.743,265,0.296,268,1.896,269,4.937,270,0.474,271,2.836,273,0.884,276,0.373,279,0.279,281,1.216,285,0.339,288,1.42,291,1.826,293,3.366,297,0.685,299,1.162,301,0.379,302,0.529,305,0.504,306,3.221,307,3.107,308,2.226,309,0.32,310,2.77,312,1.749,313,0.397,315,5.48,316,1.205,317,0.459,318,2.757,320,1.333,323,0.263,324,0.387,327,4.891,330,0.331,331,1.094,332,1.583,335,0.927,337,0.305,340,1.13,341,3.229,342,1.981,345,0.838,351,0.355,352,0.364,354,0.275,356,0.679,359,0.329,360,0.31,361,1.082,364,1.466,368,1.442,371,2.473,378,0.323,379,0.732,380,0.661,384,1.8,392,0.563,393,0.271,394,0.884,396,1.772,406,1.795,420,1.158,421,0.593,424,0.366,439,0.357,447,0.296,448,0.711,449,0.677,450,0.347,469,0.252,482,2.743,484,0.905,489,1.096,501,0.332,502,1.873,503,0.326,507,0.628,516,0.357,520,1.162,528,2.757,532,1.343,533,0.359,540,0.685,541,2.804,543,0.403,550,0.308,551,0.381,553,0.423,558,1.555,569,0.319,571,0.312,582,1.636,593,1.809,599,0.379,603,0.641,610,1.763,611,0.821,615,0.371,623,1.715,627,1.203,629,0.366,632,1.418,634,0.366,637,0.324,641,1.115,642,0.5,644,0.702,645,2.081,646,1.091,647,0.312,649,1.434,651,1.289,652,0.5,653,0.379,659,0.5,666,0.454,668,0.919,669,2.071,671,0.4,674,0.685,688,0.324,696,1.012,702,1.14,703,0.697,713,0.619,739,0.474,741,1.5,752,1.654,753,1.367,759,3.351,764,0.654,772,0.343,773,0.634,776,0.829,786,0.625,796,0.373,798,0.314,811,0.427,816,0.343,822,0.59,835,0.969,859,1.169,862,1.343,869,0.711,881,1.208,887,0.423,901,1.105,907,0.811,921,1.915,922,0.384,925,0.411,934,3.363,936,1.489,938,0.732,939,0.848,940,1.738,946,0.859,950,3.634,951,3.093,957,4.702,971,1.105,972,1.739,975,0.373,977,0.964,1002,1.254,1004,0.711,1008,0.407,1011,0.39,1028,0.345,1030,0.379,1035,0.91,1039,0.407,1046,0.423,1086,1.688,1089,0.788,1090,1.381,1107,0.397,1109,0.403,1121,2.343,1128,0.774,1129,1.005,1130,0.423,1131,0.387,1135,0.359,1144,0.482,1159,0.474,1165,1.156,1172,0.39,1182,0.442,1186,0.341,1187,0.407,1204,0.407,1212,0.803,1216,1.569,1218,0.535,1235,0.474,1249,3.18,1252,0.373,1253,0.373,1273,0.482,1326,1.087,1327,0.415,1338,0.403,1340,0.379,1343,0.748,1390,2.81,1397,0.454,1411,2.071,1450,1.584,1494,0.761,1516,0.5,1520,0.403,1523,0.522,1534,0.49,1567,0.384,1569,0.51,1576,0.339,1599,0.535,1701,1.738,1713,2.869,1740,1.381,1822,1.169,1846,2.311,1899,0.803,1901,0.767,1942,0.437,1943,0.454,1945,0.423,2005,0.437,2022,3.197,2039,0.393,2057,1.208,2063,0.535,2083,1.694,2117,0.427,2150,0.448,2157,1.047,2161,0.397,2247,0.427,2343,1.005,2389,1.355,2394,0.838,2414,1.333,2418,0.467,2434,0.482,2442,2.555,2450,1.47,2456,0.305,2503,2.732,2531,4.232,2580,4.814,2705,1.169,2724,1.655,2726,0.909,2735,0.49,2742,1.442,2746,1.575,2755,1.913,2758,0.357,2775,0.94,2812,0.57,2824,0.432,2892,4.594,2957,0.51,2961,0.407,2968,0.373,2972,1.254,3004,0.87,3196,0.437,3213,0.958,3216,0.87,3249,0.5,3384,0.387,3387,0.838,3411,0.393,3424,0.437,3431,0.454,3510,0.535,3519,0.454,3523,1.55,3614,3.18,3663,0.958,3698,5.371,3701,0.427,3707,0.535,3749,0.535,3754,0.535,3814,0.803,3990,0.958,4166,0.781,4168,0.958,4300,0.87,4425,1.609,4446,0.51,4456,0.454,4462,0.454,4469,0.87,4470,0.474,4552,0.535,4616,0.454,4730,0.535,4766,0.535,4767,0.535,4768,0.535,4769,0.535,4770,0.49,4771,2.343,4801,0.535,4815,0.551,4835,1.479,4905,2.471,4911,2.908,4912,0.551,4914,0.482,4915,0.909,5018,0.535,5069,0.535,5187,1.64,5189,0.593,5193,0.593,5194,0.593,5195,0.593,5205,1.479,5212,1.64,5213,0.593,5214,1.138,5215,2.104,5217,0.593,5219,0.593,5220,0.593,5221,0.593,5222,0.593,5223,0.593,5224,1.64,5225,0.593,5226,0.593,5227,0.593,5229,0.535,5230,0.593,5231,0.593,5232,0.593,5233,0.593,5234,1.138,5235,0.593,5236,0.593,5237,0.593,5238,1.64,5239,1.138,5240,0.593,5241,0.593,5242,0.593,5243,0.593,5245,0.593,5246,0.593,5247,0.593,5248,0.593,5249,0.593,5250,0.593,5252,1.64,5253,1.138,5254,0.593,5255,1.138,5256,1.138,5257,1.138,5258,0.593,5259,0.593,5260,0.593,5261,0.593,5262,0.593,5263,0.593,5264,0.593,5265,0.593,5266,0.593,5267,1.64,5268,1.138,5269,1.138,5270,1.138,5271,1.138,5272,0.593,5273,0.593,5274,0.593,5275,0.593,5276,1.138,5277,0.593,5278,0.593,5279,0.593,5280,0.593,5281,0.593,5282,0.593,5283,0.593,5284,0.593,5285,0.593,5286,0.593,5287,0.593,5288,0.593,5289,0.593,5290,0.593,5291,0.593,5292,0.593,5293,0.593,5294,0.593,5295,0.593,5296,0.593,5297,0.593,5298,0.593,5299,0.535,5300,0.593,5301,0.593,5966,1.479,6129,0.593,6146,2.114,6272,0.593,6273,0.593,6275,1.138,6278,1.64,6410,1.198,6411,0.625,6412,0.625,6413,0.625,6414,3.09,6415,0.625,6416,1.727,6417,0.625,6418,0.625]],["component/128",[11,0.279,108,0.486]],["title/129-1",[253,32.708]],["name/129-1",[]],["text/129-1",[]],["component/129-1",[]],["title/129-2",[356,28.605,5302,62.317]],["name/129-2",[]],["text/129-2",[]],["component/129-2",[]],["title/129-3",[156,55.177,5303,62.317]],["name/129-3",[]],["text/129-3",[]],["component/129-3",[]],["title/129-4",[132,37.794]],["name/129-4",[]],["text/129-4",[]],["component/129-4",[]],["title/129-5",[354,27.171,501,32.874,2456,30.186]],["name/129-5",[]],["text/129-5",[]],["component/129-5",[]],["title/129-6",[682,56.137]],["name/129-6",[]],["text/129-6",[]],["component/129-6",[]],["title/129-7",[5304,75.757]],["name/129-7",[]],["text/129-7",[]],["component/129-7",[]],["title/129-8",[1154,34.373,3365,53.218,5305,50.986]],["name/129-8",[]],["text/129-8",[]],["component/129-8",[]],["title/129-9",[501,32.874,2463,49.409,3932,49.409]],["name/129-9",[]],["text/129-9",[]],["component/129-9",[]],["title/129-10",[2433,45.802,5306,62.317]],["name/129-10",[]],["text/129-10",[]],["component/129-10",[]],["title/129-11",[361,43.206]],["name/129-11",[]],["text/129-11",[]],["component/129-11",[]],["title/129-12",[130,16.16,353,24.172,1165,28.018,2433,33.807]],["name/129-12",[]],["text/129-12",[]],["component/129-12",[]],["title/129-13",[361,30.186,2433,38.901,3663,49.409]],["name/129-13",[]],["text/129-13",[]],["component/129-13",[]],["title/129-14",[3432,55.177,4195,58.174]],["name/129-14",[]],["text/129-14",[]],["component/129-14",[]],["title/129-15",[11,11.796,175,29.477,394,31.646]],["name/129-15",[]],["text/129-15",[]],["component/129-15",[]],["title/129",[353,32.749,2433,45.802]],["name/129",[353,0.533,2433,0.746]],["text/129",[0,0.834,11,1.683,17,0.978,26,1.055,27,2.805,38,1.059,45,2.172,46,1.921,47,0.948,65,3.084,67,1.646,76,1.008,77,2.506,81,0.739,91,1.55,105,0.993,106,1.63,109,3.222,113,0.782,119,2.969,130,2.212,133,0.832,163,1.241,164,0.917,165,2.314,169,1.115,173,0.968,175,3.776,179,1.21,183,0.773,190,1.033,194,2.447,196,1.115,198,3.147,200,1.869,206,1.055,208,2.231,213,1.384,215,1.175,221,0.968,229,1.218,236,2.341,237,2.029,240,1.115,242,2.597,243,2.605,244,2.248,245,1.315,253,1.815,265,0.997,269,4.302,271,3.342,276,1.258,286,1.877,293,1.333,305,0.886,308,1.218,309,1.078,310,1.44,312,3.503,316,2.658,317,1.41,323,0.886,325,1.276,332,1.078,335,1.54,339,1.233,340,1.559,347,1.894,353,5.795,354,5.163,356,1.448,357,1.348,361,3.592,364,3.331,370,2.01,384,1.088,393,2.902,394,1.886,406,0.982,409,1.109,410,1.803,420,1.598,421,1.041,484,4.622,501,4.886,506,2.357,520,1.93,525,3.539,533,1.21,550,1.813,558,1.059,569,3.409,571,2.447,573,2.157,582,1.73,596,1.233,610,2.696,611,1,619,1.959,630,1.258,634,1.233,637,1.093,639,3.196,643,1.083,646,1.037,647,1.836,649,1.979,658,1.315,682,5.829,698,1.233,751,1.285,753,1.886,759,2.959,773,3.539,788,3.141,798,1.852,822,1.813,859,1.425,870,2.932,876,1.803,908,1.371,917,1.083,936,1.175,957,1.055,972,0.873,975,1.258,978,2.299,997,2.932,1010,1.305,1035,1.109,1086,1.784,1135,1.21,1154,3.141,1165,4.791,1189,1.683,1192,1.597,1215,1.456,1273,1.623,1326,1.033,1344,3.433,1353,4.052,1413,1.597,1471,1.083,1528,1.529,1568,2.185,1647,1.597,1660,1.425,1663,1.597,1706,2.444,1822,1.425,1902,1.473,1942,1.473,2083,2.337,2161,1.336,2333,1.348,2433,8.355,2451,4.335,2456,2.397,2463,2.944,2577,1.509,2580,2.444,2657,3.075,2737,1.397,2975,1.683,2995,1.384,2997,3.721,2998,2.637,3316,1.456,3355,2.493,3365,6.804,3387,1.473,3424,1.473,3432,1.597,3468,1.683,3470,1.803,3525,1.683,3565,2.547,3627,1.597,3629,3.923,3642,1.529,3654,3.154,3655,1.803,3695,1.473,3725,1.683,3834,1.683,3932,4.706,4047,1.683,4125,5.727,4195,4.706,4200,1.803,4231,1.572,4246,1.425,4462,1.529,5303,1.803,5304,1.803,5306,3.154,5307,2.944,5308,1.803,5309,1.999,5310,1.92,5311,1.999,5312,1.999,5313,1.999,5314,1.999,5315,1.999,5316,1.999,5317,1.999,5318,1.999,5319,1.999,5320,1.999,5321,1.999,5322,1.999,5323,1.999,5324,1.999,5325,4.659,5326,1.999,5327,1.999,5328,3.496,5329,1.999,5330,1.999,5331,1.999,5332,1.999,5333,1.999,5334,1.999,5335,1.999,5336,1.999,5337,1.999,5338,1.999,5339,1.999]],["component/129",[11,0.279,108,0.486]],["title/130-1",[439,50.524]],["name/130-1",[]],["text/130-1",[]],["component/130-1",[]],["title/130-2",[81,25.551,853,62.317]],["name/130-2",[]],["text/130-2",[]],["component/130-2",[]],["title/130-3",[188,38.326,310,28.453]],["name/130-3",[]],["text/130-3",[]],["component/130-3",[]],["title/130-4",[27,24.294,339,42.614]],["name/130-4",[]],["text/130-4",[]],["component/130-4",[]],["title/130-5",[2331,47.83,5340,58.174]],["name/130-5",[]],["text/130-5",[]],["component/130-5",[]],["title/130-6",[81,21.701,180,27.72,231,30.954]],["name/130-6",[]],["text/130-6",[]],["component/130-6",[]],["title/130-7",[339,42.614,1036,39.1]],["name/130-7",[]],["text/130-7",[]],["component/130-7",[]],["title/130-8",[81,21.701,135,25.4,869,36.675]],["name/130-8",[]],["text/130-8",[]],["component/130-8",[]],["title/130-9",[72,38.891]],["name/130-9",[]],["text/130-9",[]],["component/130-9",[]],["title/130-10",[339,42.614,2333,46.568]],["name/130-10",[]],["text/130-10",[]],["component/130-10",[]],["title/130",[81,25.551,310,28.453]],["name/130",[81,0.416,310,0.463]],["text/130",[11,1.288,22,1.854,27,3.621,32,1.432,35,1.486,38,3.395,41,1.709,45,1.436,57,1.286,62,2.077,65,1.497,67,1.451,68,2.545,71,2.995,72,1.427,75,2.709,76,1.554,77,1.682,81,4.535,109,2.329,126,1.502,128,1.319,135,2.184,137,1.865,139,1.513,141,3.102,152,2.114,172,1.633,176,2.565,177,1.744,185,2.639,186,1.941,188,5.14,192,2.742,194,1.619,199,1.53,205,3.383,209,3.684,216,4.342,218,1.536,225,1.883,236,2.535,244,3.287,250,3.796,269,4.707,271,2.848,286,3.44,297,1.854,298,3.717,299,3.397,308,1.877,310,4.122,312,2.216,323,1.366,325,3.22,327,1.843,331,1.33,335,1.358,339,7.403,341,2.555,342,3.472,353,1.461,354,1.427,358,2.095,360,1.612,361,1.585,364,2.236,381,4.03,393,3.735,406,3.147,414,3.175,423,1.888,439,1.854,469,1.311,533,1.865,535,1.981,540,3.035,557,2.244,569,2.709,571,1.619,572,1.771,582,3.665,596,3.112,600,3.561,603,2.841,615,1.926,644,1.901,674,1.854,722,1.854,786,1.693,796,1.939,816,1.781,822,4.238,861,2.197,864,1.981,869,1.926,870,1.939,957,2.662,972,1.346,1011,2.027,1030,1.967,1036,1.744,1086,2.575,1087,2.502,1186,1.771,1204,5.081,1214,2.779,1222,2.297,1249,2.515,1340,3.22,1390,4.522,1434,2.27,1576,2.885,1602,1.901,1860,2.779,1940,2.779,1960,2.595,2003,2.595,2057,2.27,2331,6.075,2333,3.401,2456,1.585,2737,2.154,2880,2.959,2912,2.356,2950,2.959,3000,2.114,3117,2.461,3145,2.461,3530,2.461,3701,2.22,4318,2.461,4425,2.356,4474,2.779,4771,2.461,4803,2.779,4915,6.526,4923,2.595,5308,2.779,5340,6.237,5341,3.081,5342,3.081,5343,2.779,5344,2.779,5345,3.081,5346,3.081,5347,3.081,5348,3.081,5349,3.081,5350,3.081,5351,3.081,5352,3.081,5353,3.081,5354,3.081,5355,3.081,5356,3.081,5357,3.081,5358,2.779,5359,3.081,5360,3.081,5361,3.081,5362,3.081,5363,3.081,5364,3.081,5365,6.406,5366,3.081,5367,3.081]],["component/130",[11,0.279,108,0.486]],["title/131-1",[59,36.194,356,24.295,972,25.622]],["name/131-1",[]],["text/131-1",[]],["component/131-1",[]],["title/131-2",[4068,64.221]],["name/131-2",[]],["text/131-2",[]],["component/131-2",[]],["title/131-3",[252,30.346,310,28.453]],["name/131-3",[]],["text/131-3",[]],["component/131-3",[]],["title/131-4",[4,31.382,310,28.453]],["name/131-4",[]],["text/131-4",[]],["component/131-4",[]],["title/131-5",[1128,46.973,2619,60.755]],["name/131-5",[]],["text/131-5",[]],["component/131-5",[]],["title/131-6",[458,34.441,2410,50.322]],["name/131-6",[]],["text/131-6",[]],["component/131-6",[]],["title/131-7",[251,29.8,252,22.399,356,21.114,972,22.267]],["name/131-7",[]],["text/131-7",[]],["component/131-7",[]],["title/131-8",[252,30.346,1391,40.601]],["name/131-8",[]],["text/131-8",[]],["component/131-8",[]],["title/131-9",[977,40.601,1391,40.601]],["name/131-9",[]],["text/131-9",[]],["component/131-9",[]],["title/131-10",[1056,46.973,1391,40.601]],["name/131-10",[]],["text/131-10",[]],["component/131-10",[]],["title/131-11",[361,30.186,1391,34.483,2440,48.48]],["name/131-11",[]],["text/131-11",[]],["component/131-11",[]],["title/131-12",[180,24.09,356,21.114,972,22.267,1391,29.968]],["name/131-12",[]],["text/131-12",[]],["component/131-12",[]],["title/131-13",[269,18.821,356,18.669,972,19.689,1366,30.138,5701,40.672]],["name/131-13",[]],["text/131-13",[]],["component/131-13",[]],["title/131-14",[356,18.669,428,31.823,972,19.689,1234,31.216,1391,26.498]],["name/131-14",[]],["text/131-14",[]],["component/131-14",[]],["title/131-15",[356,24.295,392,29.032,972,25.622]],["name/131-15",[]],["text/131-15",[]],["component/131-15",[]],["title/131-16",[4318,55.177,4425,52.828]],["name/131-16",[]],["text/131-16",[]],["component/131-16",[]],["title/131-17",[822,35.834,2440,57.081]],["name/131-17",[]],["text/131-17",[]],["component/131-17",[]],["title/131-18",[180,27.72,205,24.295,863,35.088]],["name/131-18",[]],["text/131-18",[]],["component/131-18",[]],["title/131-19",[184,39.302,972,30.168]],["name/131-19",[]],["text/131-19",[]],["component/131-19",[]],["title/131-20",[356,16.732,392,19.995,869,25.258,972,17.646,2723,34.738,3871,34.028]],["name/131-20",[]],["text/131-20",[]],["component/131-20",[]],["title/131-21",[305,22.6,356,21.114,972,22.267,5702,45.997]],["name/131-21",[]],["text/131-21",[]],["component/131-21",[]],["title/131-22",[302,32.097,374,35.397]],["name/131-22",[]],["text/131-22",[]],["component/131-22",[]],["title/131-23",[356,24.295,972,25.622,3695,43.228]],["name/131-23",[]],["text/131-23",[]],["component/131-23",[]],["title/131-24",[299,23.385,320,23.164,2441,40.727,2625,40.727]],["name/131-24",[]],["text/131-24",[]],["component/131-24",[]],["title/131-25",[356,21.114,383,28.86,972,22.267,5703,45.997]],["name/131-25",[]],["text/131-25",[]],["component/131-25",[]],["title/131-26",[71,18.233,310,18.57,356,18.669,383,25.519,972,19.689]],["name/131-26",[]],["text/131-26",[]],["component/131-26",[]],["title/131-27",[458,34.441,2881,54.337]],["name/131-27",[]],["text/131-27",[]],["component/131-27",[]],["title/131",[356,28.605,972,30.168]],["name/131",[356,0.466,972,0.491]],["text/131",[4,2.465,8,1.924,9,0.678,11,0.906,19,0.292,24,0.281,26,0.543,27,3.261,32,0.692,37,1.168,38,0.545,45,2.102,50,0.218,59,0.33,60,0.231,63,0.286,65,0.723,71,1.488,73,0.33,77,1.123,78,0.288,79,0.341,81,0.381,84,0.312,88,0.346,90,0.398,92,0.534,93,0.583,97,0.311,99,0.292,100,0.568,101,1.048,102,1.034,103,0.763,105,1.674,106,1.571,108,0.187,113,0.403,115,0.253,119,2.438,127,0.748,128,1.93,130,0.734,131,0.254,133,0.798,135,1.719,157,0.701,158,0.367,165,0.739,170,0.283,172,2.251,175,0.268,176,1.545,177,1.907,178,1.175,180,3.218,183,1.536,184,2.093,185,1.388,186,0.206,188,0.826,190,0.276,192,1.301,205,4.276,208,0.341,210,1.09,214,0.532,216,2.58,221,0.928,229,0.627,231,0.785,234,1.021,236,0.268,237,0.448,238,0.627,240,1.695,241,0.346,242,0.298,244,3.911,246,0.979,250,0.248,251,0.312,252,3.989,253,3.301,265,1.155,268,0.277,269,5.287,271,4.227,274,0.341,276,0.648,279,1.267,286,1.029,288,0.498,289,1.198,290,0.385,292,0.58,297,1.618,299,2.391,300,0.394,302,1.076,303,0.534,305,1.883,310,3.893,312,0.654,317,2.422,320,1.93,323,0.456,325,0.657,331,1.714,335,2.564,340,1.771,341,4.058,342,0.29,356,4.321,360,1.59,361,1.384,364,0.85,369,0.341,371,1.72,374,0.274,378,0.291,379,0.662,380,0.311,383,3.071,392,2.469,393,2.976,406,1.321,409,1.869,428,2.597,439,0.321,449,0.612,453,0.321,455,0.349,458,1.341,461,0.657,470,0.336,479,0.912,501,0.299,505,0.351,506,0.36,507,0.295,514,0.381,529,0.328,536,1.489,538,0.385,540,1.153,541,0.818,560,2.814,569,5.044,571,2.368,572,0.592,582,4.558,603,0.301,610,1.298,613,0.377,615,1.198,617,0.307,621,1.958,623,0.534,627,0.306,629,2.934,632,1.004,637,0.292,646,0.277,647,1.413,656,0.532,657,0.589,668,0.834,702,0.29,713,0.291,722,0.321,746,1.097,751,0.344,759,0.894,771,0.332,772,1.108,779,0.381,786,3.198,794,0.36,796,0.336,798,0.283,818,0.346,822,2.589,835,0.316,856,0.937,863,1.385,864,0.344,868,0.394,869,1.9,908,0.367,929,0.662,938,0.662,972,4.8,977,1.361,978,0.351,980,0.381,987,1.097,991,0.381,1004,0.334,1028,0.598,1030,0.657,1035,0.296,1036,2.404,1039,0.367,1044,0.928,1056,0.363,1084,0.394,1128,1.829,1134,0.309,1145,0.414,1154,0.36,1186,1.102,1187,0.367,1191,0.758,1196,0.409,1204,0.367,1212,0.377,1234,1.031,1249,3.893,1252,0.336,1253,0.336,1278,0.482,1326,0.532,1327,0.374,1338,0.363,1340,0.95,1352,1.271,1353,0.657,1354,0.403,1355,0.403,1364,0.42,1366,2.46,1367,0.381,1368,0.427,1380,0.377,1391,6.542,1394,1.353,1421,0.427,1422,0.427,1423,0.427,1450,1.9,1460,0.482,1471,1.255,1493,0.394,1511,0.427,1512,0.427,1514,0.45,1521,0.45,1522,0.377,1547,0.482,1559,0.36,1564,1.822,1576,2.104,1602,4.015,1645,0.83,1663,0.427,1702,1.614,1705,0.339,1712,1.531,1713,0.385,1846,1.041,1852,0.482,1901,0.36,1963,1.062,2040,0.377,2058,0.482,2103,0.381,2118,0.389,2161,0.995,2343,0.328,2394,0.758,2410,1.687,2426,1.5,2430,1.382,2439,1.556,2440,4.483,2441,5.322,2442,5.22,2443,1.556,2444,0.496,2445,2.823,2448,0.409,2499,0.42,2577,0.403,2619,0.47,2624,1.648,2625,5.554,2627,2.583,2705,0.381,2723,1.28,2724,0.81,2725,0.75,2727,1.343,2728,2.224,2730,1.686,2734,0.349,2735,0.85,2736,0.988,2758,0.896,2768,0.905,2776,1.43,2777,4.567,2787,0.47,2794,0.45,2881,0.42,2938,0.905,2946,4.078,2953,0.442,2973,0.482,2987,0.349,2994,0.482,2996,0.688,2997,0.427,3002,0.381,3117,0.822,3141,0.713,3362,0.482,3377,0.409,3384,1.512,3432,0.427,3452,0.867,3468,1.614,3642,0.787,3695,0.758,3702,0.928,3812,0.427,3814,1.051,3836,0.482,3871,1.254,3899,0.45,4034,0.409,4049,0.928,4068,1.466,4189,0.427,4303,0.85,4318,0.427,4425,2.057,4456,0.409,4526,3.319,4616,0.787,4915,0.822,5118,0.45,5376,0.45,5399,0.47,5701,0.482,5702,0.482,5703,2.743,5704,0.534,5705,5.575,5706,0.534,5707,0.534,5708,1.029,5709,0.534,5710,6.004,5711,1.917,5712,1.917,5713,0.534,5714,0.534,5715,1.029,5716,1.917,5717,1.029,5718,0.534,5719,0.534,5720,0.534,5721,2.427,5722,2.427,5723,2.089,5724,0.534,5725,0.534,5726,1.917,5727,1.029,5728,0.534,5729,1.029,5730,0.534,5731,1.029,5732,0.534,5733,0.482,5734,1.029,5735,0.534,5736,1.029,5737,0.534,5738,0.928,5739,0.534,5740,0.534,5741,1.029,5742,1.029,5743,0.534,5744,0.534,5745,1.489,5746,1.489,5747,0.534,5748,0.534,5749,1.029,5750,1.029,5751,0.534,5752,0.534,5753,0.534,5754,0.534,5755,0.534,5756,1.029,5757,0.534,5758,0.534,5759,0.534,5760,0.534,5761,0.534,5762,0.534,5763,0.534,5764,0.534,5765,0.534,5766,0.534,5767,0.534,5768,0.534,5769,0.534,5770,0.534,5771,0.534,5772,0.534,5773,1.343,5774,0.534,5775,0.534,5776,0.534,5777,1.029,5778,0.534,5779,1.029,5780,0.534,5781,1.029,5782,0.534,5783,1.029,5784,0.534,5785,0.534,5786,0.534,5787,0.534,5788,3.04,5789,0.534,5790,1.489,5791,1.917,5792,0.534,5793,0.534,5794,0.534,5795,0.534,5796,0.534,5797,0.534,5798,1.489,5799,1.489,5800,0.534,5801,0.534,5802,0.534,5803,0.534,5804,0.534,5805,3.679,5806,1.917,5807,0.534,5808,1.489,5809,0.534,5810,0.534,5811,1.029,5812,0.534,5813,0.534,5814,0.534,5815,0.534,5816,0.534,5817,0.534,5818,0.534,5819,0.534,5820,0.534,5821,1.029,5822,0.534,5823,2.69,5824,0.534,5825,0.534,5826,0.534,5827,0.534,5828,0.534,5829,0.534,5830,0.534,5831,1.029,5832,0.534,5833,0.534,5834,1.917,5835,0.534,5836,0.534,5837,0.534,5838,0.534,5839,0.534,5840,0.534,5841,1.029,5842,1.489,5843,0.534,5844,0.534,5845,1.029,5846,0.534,5847,0.534,5848,0.534,5849,1.029,5850,0.534,5851,0.534,5852,0.534,5853,0.534,5854,0.534,5855,0.534,5856,0.534,5857,1.489,5858,2.316,5859,0.534,5860,0.534,5861,0.534,5862,1.029,5863,0.534,5864,0.534,5865,0.534,5866,0.534,5867,0.534,5868,0.534,5869,0.534,5870,0.534,5871,0.534,5872,0.534,5873,0.534,5874,0.534,5875,0.534,5876,0.534,5877,0.534,5878,1.029,5879,1.029,5880,1.029,5881,1.029,5882,1.029,5883,0.534,5884,0.534,5885,0.534,5886,0.534,5887,0.534,5888,0.534,5889,0.534,5890,0.534,5891,0.534,5892,0.534,5893,0.534,5894,0.534,5895,0.534,5896,0.534,5897,1.917,5898,0.534,5899,0.534,5900,0.534,5901,1.029,5902,0.534,5903,0.534,5904,0.534,5905,1.489,5906,0.534,5907,0.534,5908,0.534,5909,0.534,5910,0.534,5911,0.534,5912,2.498,5913,0.47,5914,0.482,5915,0.534,5916,0.534,5917,0.534,5918,0.534,5919,0.534,5920,0.513,5921,0.534,5922,0.534,5923,0.534,5924,0.534,5925,0.534,5926,0.534]],["component/131",[11,0.279,108,0.486]],["title/132-1",[68,42.354]],["name/132-1",[]],["text/132-1",[]],["component/132-1",[]],["title/132-2",[51,29.8,2487,28.57,2488,29.009,2628,38.49]],["name/132-2",[]],["text/132-2",[]],["component/132-2",[]],["title/132-3",[4,23.164,2487,28.57,2488,29.009,2628,38.49]],["name/132-3",[]],["text/132-3",[]],["component/132-3",[]],["title/132-4",[164,20.678,192,19.296,481,27.634,2487,25.262,2488,25.651]],["name/132-4",[]],["text/132-4",[]],["component/132-4",[]],["title/132-5",[164,20.678,192,19.296,2487,25.262,2488,25.651,2917,35.463]],["name/132-5",[]],["text/132-5",[]],["component/132-5",[]],["title/132-6",[469,21.7,2487,28.57,2488,29.009,2628,38.49]],["name/132-6",[]],["text/132-6",[]],["component/132-6",[]],["title/132-7",[5368,75.757]],["name/132-7",[]],["text/132-7",[]],["component/132-7",[]],["title/132-8",[302,18.774,374,20.705,457,26.791,469,17.197,2487,22.64,2488,22.989]],["name/132-8",[]],["text/132-8",[]],["component/132-8",[]],["title/132-9",[469,19.188,481,27.634,491,31.216,2487,25.262,2488,25.651]],["name/132-9",[]],["text/132-9",[]],["component/132-9",[]],["title/132-10",[1132,70.719]],["name/132-10",[]],["text/132-10",[]],["component/132-10",[]],["title/132-11",[444,30.139,479,24.255,1656,36.356,2962,30.864]],["name/132-11",[]],["text/132-11",[]],["component/132-11",[]],["title/132-12",[469,17.197,550,20.96,822,20.96,1656,28.811,2962,24.459,5369,36.451]],["name/132-12",[]],["text/132-12",[]],["component/132-12",[]],["title/132-13",[132,13.868,186,11.858,320,13.999,541,16.932,550,15.984,2327,24.613,2969,24.613,3004,23.565,5370,27.798]],["name/132-13",[]],["text/132-13",[]],["component/132-13",[]],["title/132-14",[118,25.716,643,27.628,1602,31.454,5371,35.304]],["name/132-14",[]],["text/132-14",[]],["component/132-14",[]],["title/132-15",[18,14.258,71,14.805,118,18.464,643,19.836,713,19.928,1602,22.583,5371,25.347]],["name/132-15",[]],["text/132-15",[]],["component/132-15",[]],["title/132-16",[444,23.885,479,19.222,548,29.435,1656,28.811,2962,24.459,5371,27.977]],["name/132-16",[]],["text/132-16",[]],["component/132-16",[]],["title/132-17",[18,13.033,71,13.532,383,18.94,444,19.78,479,15.918,1656,23.86,2962,20.255,5371,23.169]],["name/132-17",[]],["text/132-17",[]],["component/132-17",[]],["title/132-18",[4,20.482,372,30.393,450,26.35,688,24.658,1167,31.216]],["name/132-18",[]],["text/132-18",[]],["component/132-18",[]],["title/132-19",[5372,75.757]],["name/132-19",[]],["text/132-19",[]],["component/132-19",[]],["title/132-20",[128,29.566,2962,41.815]],["name/132-20",[]],["text/132-20",[]],["component/132-20",[]],["title/132-21",[142,28.403,702,31.791,1172,38.592]],["name/132-21",[]],["text/132-21",[]],["component/132-21",[]],["title/132-22",[142,21.826,392,22.31,702,24.429,822,23.387,5373,36.012]],["name/132-22",[]],["text/132-22",[]],["component/132-22",[]],["title/132-23",[142,24.684,702,27.628,822,26.45,3450,45.997]],["name/132-23",[]],["text/132-23",[]],["component/132-23",[]],["title/132-24",[469,29.4,3914,49.256]],["name/132-24",[]],["text/132-24",[]],["component/132-24",[]],["title/132-25",[59,31.454,142,24.684,253,19.86,702,27.628]],["name/132-25",[]],["text/132-25",[]],["component/132-25",[]],["title/132-26",[469,21.7,1165,28.018,2487,28.57,2488,29.009]],["name/132-26",[]],["text/132-26",[]],["component/132-26",[]],["title/132-27",[310,18.57,719,33.218,1165,24.774,1326,23.291,3472,30.393]],["name/132-27",[]],["text/132-27",[]],["component/132-27",[]],["title/132-28",[71,18.233,2487,25.262,2488,25.651,3472,30.393,5374,36.012]],["name/132-28",[]],["text/132-28",[]],["component/132-28",[]],["title/132-29",[2962,35.515,3594,38.592,5373,46.864]],["name/132-29",[]],["text/132-29",[]],["component/132-29",[]],["title/132-30",[2487,32.874,2488,33.38,4006,49.409]],["name/132-30",[]],["text/132-30",[]],["component/132-30",[]],["title/132-31",[609,45.802,5375,62.317]],["name/132-31",[]],["text/132-31",[]],["component/132-31",[]],["title/132-32",[2962,41.815,2968,43.477]],["name/132-32",[]],["text/132-32",[]],["component/132-32",[]],["title/132-33",[1224,46.973,2962,41.815]],["name/132-33",[]],["text/132-33",[]],["component/132-33",[]],["title/132-34",[525,32.712,2718,34.29,2962,35.515]],["name/132-34",[]],["text/132-34",[]],["component/132-34",[]],["title/132-35",[472,28.428,519,33.278,525,28.428,1035,28.289]],["name/132-35",[]],["text/132-35",[]],["component/132-35",[]],["title/132-36",[1165,32.24,1326,30.31,3472,39.552]],["name/132-36",[]],["text/132-36",[]],["component/132-36",[]],["title/132-37",[128,19.296,495,22.651,797,34.479,1165,24.774,3914,32.147]],["name/132-37",[]],["text/132-37",[]],["component/132-37",[]],["title/132-38",[71,16.341,353,19.156,2487,22.64,2488,22.989,3472,27.239,5374,32.275]],["name/132-38",[]],["text/132-38",[]],["component/132-38",[]],["title/132-39",[183,19.716,353,24.172,469,21.7,2488,29.009]],["name/132-39",[]],["text/132-39",[]],["component/132-39",[]],["title/132-40",[323,19.984,718,30.138,861,32.147,5376,37.967,5377,40.672]],["name/132-40",[]],["text/132-40",[]],["component/132-40",[]],["title/132-41",[701,45.487,2487,32.874,2488,33.38]],["name/132-41",[]],["text/132-41",[]],["component/132-41",[]],["title/132-42",[5378,75.757]],["name/132-42",[]],["text/132-42",[]],["component/132-42",[]],["title/132-43",[5379,75.757]],["name/132-43",[]],["text/132-43",[]],["component/132-43",[]],["title/132-44",[5380,75.757]],["name/132-44",[]],["text/132-44",[]],["component/132-44",[]],["title/132-45",[5381,83.973]],["name/132-45",[]],["text/132-45",[]],["component/132-45",[]],["title/132-46",[18,15.738,71,16.341,186,15.549,713,21.996,5371,27.977,5382,36.451]],["name/132-46",[]],["text/132-46",[]],["component/132-46",[]],["title/132-47",[18,15.738,71,16.341,186,15.549,713,21.996,5371,27.977,5383,36.451]],["name/132-47",[]],["text/132-47",[]],["component/132-47",[]],["title/132-48",[18,15.738,71,16.341,186,15.549,713,21.996,2486,34.738,5371,27.977]],["name/132-48",[]],["text/132-48",[]],["component/132-48",[]],["title/132-49",[1249,34.441,3914,49.256]],["name/132-49",[]],["text/132-49",[]],["component/132-49",[]],["title/132-50",[5384,83.973]],["name/132-50",[]],["text/132-50",[]],["component/132-50",[]],["title/132-51",[5385,83.973]],["name/132-51",[]],["text/132-51",[]],["component/132-51",[]],["title/132-52",[5386,75.757]],["name/132-52",[]],["text/132-52",[]],["component/132-52",[]],["title/132-53",[598,42.894,797,52.828]],["name/132-53",[]],["text/132-53",[]],["component/132-53",[]],["title/132-54",[5387,75.757]],["name/132-54",[]],["text/132-54",[]],["component/132-54",[]],["title/132",[2487,32.874,2488,33.38,2962,35.515]],["name/132",[2487,0.63,2488,0.64]],["text/132",[0,0.24,4,0.501,6,0.198,8,0.679,9,1.302,11,0.812,12,0.153,14,0.258,17,0.144,18,0.527,24,0.302,26,0.445,27,2.778,32,2.537,33,0.75,35,0.879,36,0.638,37,0.919,38,0.447,42,0.203,44,0.173,45,0.63,46,0.161,47,0.4,49,0.189,50,1.457,51,0.171,52,0.193,53,0.551,54,0.183,57,0.122,59,1.261,60,0.975,62,0.387,63,0.59,65,1.732,67,2.17,68,0.426,69,0.982,70,0.171,71,2.02,73,0.181,74,0.221,75,0.157,76,0.556,77,0.451,78,0.158,81,0.408,86,0.637,90,0.219,92,0.438,93,0.166,97,0.334,99,0.871,100,0.747,101,0.603,102,0.729,103,1.048,105,0.905,106,1.242,109,0.735,112,0.726,113,1.261,114,0.293,115,0.4,117,1.208,118,0.148,119,0.516,120,0.156,121,0.402,123,0.555,126,1.484,127,0.424,128,2.718,130,1.076,131,1.359,132,0.716,133,0.663,135,1.317,139,0.782,142,3.277,144,0.147,148,0.296,150,0.198,152,0.394,157,1.755,161,0.163,164,2.504,165,0.419,169,0.163,170,0.155,171,0.173,172,1.612,173,0.655,176,1.148,177,0.478,178,1.164,180,1.438,183,1.883,184,0.628,185,1.725,186,2.927,187,0.676,190,1.056,192,2.084,193,0.221,194,0.836,196,0.471,198,0.621,199,0.146,201,3.011,202,0.158,205,0.847,209,0.169,210,0.167,212,0.224,214,0.297,216,0.902,223,0.547,225,0.594,226,0.475,227,0.419,228,0.216,229,0.179,230,0.521,231,0.713,232,0.158,236,0.8,237,1.16,240,0.163,241,0.19,242,1.593,243,1.502,244,2.555,245,1.199,246,0.193,248,2.17,249,0.949,250,0.628,252,2.139,253,1.631,256,0.341,257,0.394,265,0.146,268,0.945,269,4.563,271,3.144,273,0.31,274,0.704,278,0.216,279,2.861,282,0.936,284,0.234,286,0.157,287,0.336,288,0.278,293,0.112,297,0.176,299,0.62,302,1.877,303,0.438,305,0.906,308,0.179,309,0.455,310,2.338,312,0.252,316,0.525,317,2.91,320,1.694,323,2.32,324,0.191,325,0.367,327,0.505,328,0.224,330,0.471,331,2.357,332,0.455,333,1.306,335,2.837,337,0.151,340,1.994,341,1.72,342,1.224,351,0.175,353,1.842,354,2.134,356,0.847,360,0.153,361,0.151,363,1.585,368,0.327,371,3.002,372,0.569,373,0.585,374,2.292,376,0.168,378,0.16,379,0.189,383,0.765,384,0.16,392,2.756,393,2.904,394,0.158,406,1.211,407,0.449,409,0.468,414,0.361,420,0.618,423,0.352,424,0.181,426,0.216,439,1.096,444,2.878,450,0.336,452,0.596,453,0.176,454,0.189,457,1.497,458,0.146,461,0.704,467,1.262,469,3.237,470,0.185,471,0.224,472,3.105,473,0.41,479,1.074,481,1.865,482,0.166,489,1.176,491,1.262,495,1.529,502,0.294,513,0.711,514,0.41,516,1.603,519,0.191,521,0.265,525,3.44,529,0.352,533,0.177,535,0.189,536,0.543,540,0.346,541,1.354,542,0.378,546,0.439,548,0.214,550,3.051,551,1.314,557,0.418,558,1.708,569,2.81,571,2.421,572,1.417,573,0.834,582,2.28,588,0.193,596,0.354,597,0.602,598,1.774,603,0.761,609,2.364,610,0.879,611,0.677,613,0.405,615,0.183,616,0.221,617,0.33,619,1.705,621,0.587,622,1.274,623,1.279,625,0.209,627,1.634,629,0.354,631,0.681,633,1.031,639,0.201,640,0.224,641,0.391,643,0.862,644,0.181,645,0.361,646,1.172,647,0.58,653,0.704,657,1.042,658,0.378,668,0.322,671,0.198,674,1.23,676,0.242,682,2.383,688,0.74,696,0.521,698,1.261,702,3.752,703,0.829,707,0.694,709,0.41,713,1.656,714,0.484,718,3.255,719,5.416,726,0.177,743,0.378,746,0.813,748,0.771,751,0.369,753,0.729,756,0.508,757,0.459,759,0.63,764,1.417,765,0.209,768,0.224,770,0.439,771,0.182,772,0.17,773,0.887,775,0.518,776,0.804,778,0.881,784,0.265,786,0.743,788,0.569,789,0.216,793,0.258,795,2.128,796,0.531,797,3.203,798,1.083,800,0.369,806,1.367,809,0.234,815,0.698,816,0.638,819,0.518,822,3.742,835,0.799,841,0.564,856,1.002,857,1.139,861,1.458,862,0.187,863,0.952,864,0.543,870,1.798,871,0.357,879,0.851,880,0.209,901,0.198,908,0.201,912,0.459,917,0.159,922,0.19,929,0.189,970,1.563,971,2.172,972,0.128,975,0.185,977,0.172,978,1.345,986,0.234,987,0.813,995,0.531,997,0.361,1010,0.191,1012,0.231,1020,0.761,1030,0.187,1035,2.156,1036,0.325,1037,0.771,1039,0.201,1056,0.574,1062,0.227,1064,0.209,1086,1.36,1095,0.247,1102,0.656,1107,0.384,1109,1.082,1112,1.059,1116,0.219,1128,2.191,1132,0.484,1137,0.221,1142,1.828,1165,4.77,1167,0.398,1170,0.234,1186,0.169,1191,0.813,1194,0.459,1198,1.173,1205,0.234,1216,0.428,1217,0.219,1224,1.812,1249,1.777,1252,0.185,1253,0.185,1254,0.936,1271,0.258,1323,1.456,1325,0.813,1326,0.57,1327,0.205,1335,0.518,1338,0.391,1340,0.187,1343,0.378,1344,0.216,1352,0.194,1364,0.231,1366,0.196,1367,0.209,1368,0.234,1380,1.124,1391,0.338,1394,0.954,1402,0.219,1421,0.234,1422,0.234,1423,0.234,1446,0.224,1450,2.331,1471,0.733,1493,0.216,1494,0.384,1495,1.173,1500,0.711,1503,0.242,1513,0.265,1516,0.484,1519,0.247,1520,0.391,1558,0.439,1559,0.744,1564,0.868,1567,0.19,1576,0.328,1602,4.908,1603,1.751,1613,2.184,1619,0.224,1645,2.167,1649,0.199,1656,1.9,1660,0.209,1687,0.414,1704,1.037,1708,0.535,1793,1.684,1898,0.466,1899,0.207,1901,0.198,1908,0.813,1943,0.646,1963,1.299,2038,0.211,2060,0.674,2082,0.518,2093,1.08,2103,0.41,2150,0.434,2156,0.629,2239,0.439,2246,0.814,2253,0.181,2327,2.282,2343,0.18,2394,0.216,2414,0.186,2422,0.238,2423,0.205,2451,0.182,2456,0.696,2460,0.242,2476,0.533,2486,0.252,2487,3.963,2488,4.618,2498,0.282,2512,0.214,2525,0.258,2618,0.272,2628,4.794,2705,0.209,2718,0.645,2724,0.231,2725,0.615,2726,0.234,2734,0.551,2758,0.814,2824,0.214,2827,0.811,2873,0.242,2885,0.238,2893,1.059,2917,2.096,2918,0.552,2953,0.242,2961,0.201,2962,5.47,2968,1.002,2969,4.776,2971,0.247,2989,0.234,2991,0.234,2995,1.415,2996,0.196,3004,3.089,3032,0.646,3141,0.203,3316,2.348,3344,0.418,3346,0.234,3347,0.484,3349,0.234,3355,1.458,3361,0.844,3363,0.247,3365,0.602,3369,1.34,3381,0.434,3420,0.221,3421,0.247,3429,0.265,3433,0.247,3436,0.439,3445,0.674,3463,0.265,3471,0.881,3472,1.228,3480,0.203,3481,0.247,3484,0.247,3489,0.711,3511,0.247,3519,0.439,3520,0.484,3545,1.139,3548,0.221,3565,0.615,3580,0.247,3592,0.265,3594,0.555,3612,0.265,3623,0.247,3628,0.484,3665,0.258,3668,0.761,3670,0.216,3671,0.881,3676,0.247,3701,0.211,3705,0.247,3712,0.265,3723,0.265,3726,0.995,3730,0.234,3744,0.439,3782,0.265,3783,0.224,3787,0.654,3808,0.247,3812,0.234,3834,0.247,3838,1.644,3886,0.929,3891,0.265,3893,0.265,3894,0.265,3898,0.265,3899,0.247,3900,0.265,3901,0.265,3902,1.722,3907,0.265,3909,0.518,3912,1.722,3914,5.334,3917,0.247,3976,0.761,3982,0.995,3988,0.265,3989,0.484,3990,0.711,3991,0.265,3992,1.436,3993,0.234,3994,0.265,3995,0.484,3996,0.995,3997,0.518,3998,0.265,3999,0.265,4000,0.265,4003,0.265,4004,0.265,4006,2.406,4008,0.265,4011,0.518,4016,4.721,4017,0.265,4047,0.484,4144,0.242,4146,1.22,4165,0.518,4166,0.579,4168,0.484,4188,0.41,4189,0.234,4190,0.518,4204,0.518,4205,0.518,4244,0.518,4245,0.518,4246,0.209,4300,1.034,4357,0.518,4362,0.484,4388,0.265,4439,0.265,4446,0.494,4519,0.258,4620,0.711,4676,0.265,4717,0.995,4770,1.866,4781,0.929,4914,0.238,4917,0.811,4923,0.247,5205,1.22,5229,0.265,5299,0.265,5302,0.265,5307,0.247,5344,0.265,5368,0.518,5369,4.157,5370,2.907,5371,1.415,5372,0.995,5373,5.002,5374,2.848,5375,3.506,5376,0.711,5377,0.518,5378,0.265,5379,0.265,5380,0.265,5382,0.265,5383,0.265,5386,0.265,5387,0.265,5388,0.293,5389,0.293,5390,0.293,5391,0.293,5392,0.293,5393,1.352,5394,0.574,5395,0.293,5396,1.592,5397,0.293,5398,0.293,5399,0.258,5400,0.844,5401,0.293,5402,0.293,5403,0.293,5404,0.293,5405,0.293,5406,0.293,5407,0.293,5408,0.293,5409,0.574,5410,0.574,5411,0.293,5412,0.574,5413,0.844,5414,0.574,5415,0.293,5416,0.293,5417,0.293,5418,0.293,5419,0.293,5420,0.293,5421,0.293,5422,0.574,5423,1.103,5424,0.293,5425,0.574,5426,0.574,5427,0.574,5428,0.293,5429,0.293,5430,1.822,5431,0.293,5432,0.293,5433,3.043,5434,0.844,5435,0.844,5436,0.574,5437,0.574,5438,0.293,5439,0.293,5440,0.293,5441,0.293,5442,0.293,5443,0.293,5444,0.293,5445,0.293,5446,1.352,5447,0.574,5448,0.844,5449,0.293,5450,0.293,5451,0.293,5452,0.293,5453,0.844,5454,0.293,5455,0.761,5456,1.592,5457,0.574,5458,1.103,5459,1.352,5460,0.293,5461,0.265,5462,0.574,5463,0.574,5464,0.293,5465,0.293,5466,0.293,5467,0.293,5468,0.293,5469,0.293,5470,0.293,5471,0.844,5472,0.293,5473,0.293,5474,0.293,5475,0.293,5476,0.574,5477,0.574,5478,0.574,5479,0.293,5480,0.293,5481,0.293,5482,0.293,5483,0.293,5484,0.293,5485,0.574,5486,3.043,5487,0.293,5488,0.844,5489,0.574,5490,1.592,5491,0.293,5492,0.293,5493,0.844,5494,0.844,5495,1.822,5496,0.844,5497,1.822,5498,0.574,5499,2.258,5500,0.293,5501,1.352,5502,0.293,5503,0.293,5504,0.844,5505,0.844,5506,0.844,5507,0.293,5508,0.293,5509,0.293,5510,0.574,5511,0.293,5512,0.844,5513,0.293,5514,0.844,5515,0.574,5516,0.844,5517,0.844,5518,0.293,5519,0.293,5520,0.293,5521,0.293,5522,0.574,5523,0.293,5524,0.293,5525,0.574,5526,0.293,5527,0.574,5528,0.574,5529,0.574,5530,0.844,5531,0.844,5532,0.293,5533,0.293,5534,0.844,5535,0.844,5536,0.293,5537,0.574,5538,0.574,5539,0.574,5540,0.293,5541,0.293,5542,0.293,5543,0.293,5544,0.844,5545,2.258,5546,1.352,5547,1.352,5548,0.293,5549,0.293,5550,0.293,5551,1.352,5552,1.103,5553,0.293,5554,0.844,5555,0.293,5556,0.293,5557,0.293,5558,0.844,5559,0.844,5560,0.844,5561,0.844,5562,0.293,5563,0.293,5564,0.574,5565,0.293,5566,0.293,5567,0.293,5568,0.574,5569,0.293,5570,0.293,5571,0.574,5572,0.293,5573,0.293,5574,0.293,5575,0.293,5576,0.293,5577,0.293,5578,0.293,5579,0.293,5580,0.293,5581,0.293,5582,1.352,5583,0.293,5584,1.103,5585,0.293,5586,0.293,5587,0.293,5588,0.293,5589,0.293,5590,0.293,5591,0.293,5592,0.293,5593,0.293,5594,0.293,5595,0.293,5596,1.436,5597,0.293,5598,0.574,5599,0.293,5600,0.293,5601,0.844,5602,0.293,5603,0.293,5604,0.293,5605,0.293,5606,0.293,5607,0.293,5608,0.293,5609,0.293,5610,0.282,5611,0.293,5612,0.293,5613,0.293,5614,0.293,5615,0.293,5616,0.293,5617,0.293,5618,0.293,5619,0.293,5620,0.293,5621,0.574,5622,0.844,5623,0.293,5624,0.293,5625,0.574,5626,0.574,5627,0.574,5628,0.293,5629,0.293,5630,0.265,5631,0.293,5632,0.293,5633,0.293,5634,0.293,5635,3.222,5636,0.574,5637,0.844,5638,1.352,5639,1.592,5640,0.844,5641,1.352,5642,0.574,5643,0.844,5644,1.103,5645,0.844,5646,1.352,5647,3.222,5648,1.103,5649,0.293,5650,0.574,5651,1.103,5652,0.574,5653,0.293,5654,0.272,5655,0.293,5656,0.844,5657,0.844,5658,0.844,5659,0.293,5660,0.293,5661,0.293,5662,0.293,5663,0.293,5664,0.293,5665,0.293,5666,0.293,5667,0.574,5668,0.293,5669,0.293,5670,0.293,5671,0.293,5672,0.293,5673,0.574,5674,0.293,5675,0.293,5676,0.293,5677,0.293,5678,0.293,5679,0.293,5680,0.293,5681,0.293,5682,0.293,5683,0.293,5684,0.293,5685,0.293,5686,0.293,5687,0.293,5688,0.293,5689,0.293,5690,0.293,5691,0.293,5692,0.574,5693,0.574,5694,0.293,5695,0.293,5696,0.293,5697,0.293,5698,0.293,5699,0.293,5700,0.293]],["component/132",[11,0.279,108,0.486]],["title/133-1",[11,13.888,40,30.711]],["name/133-1",[]],["text/133-1",[]],["component/133-1",[]],["title/133-2",[11,13.888,39,39.302]],["name/133-2",[]],["text/133-2",[]],["component/133-2",[]],["title/133-3",[2150,63.392]],["name/133-3",[]],["text/133-3",[]],["component/133-3",[]],["title/133-4",[237,25.547,310,24.166,359,32.552]],["name/133-4",[]],["text/133-4",[]],["component/133-4",[]],["title/133-5",[243,32.203,359,38.326]],["name/133-5",[]],["text/133-5",[]],["component/133-5",[]],["title/133-6",[237,25.547,359,32.552,407,31.225]],["name/133-6",[]],["text/133-6",[]],["component/133-6",[]],["title/133-7",[6,56.611]],["name/133-7",[]],["text/133-7",[]],["component/133-7",[]],["title/133-8",[185,34.589]],["name/133-8",[]],["text/133-8",[]],["component/133-8",[]],["title/133-9",[81,25.551,253,26.906]],["name/133-9",[]],["text/133-9",[]],["component/133-9",[]],["title/133",[237,30.08,359,38.326]],["name/133",[237,0.49,359,0.624]],["text/133",[0,2.533,9,0.849,11,0.887,14,1.985,27,3.742,32,0.866,37,1.658,39,1.06,50,0.762,57,0.778,59,1.15,65,1.597,67,0.878,75,1.001,77,1.096,81,1.631,89,1.15,92,0.967,98,2.422,109,3.339,115,0.884,119,3.133,121,1.564,128,1.887,130,1.042,133,1.369,141,4.798,142,0.902,164,0.855,166,1.246,169,1.039,170,3.549,176,2.704,180,2.513,182,0.933,185,0.768,188,5.018,192,3.096,197,1.198,204,1.173,205,3.353,216,0.922,217,6.535,218,1.639,219,1.343,221,1.591,225,3.876,231,2.327,236,1.652,237,4.73,243,2.829,244,3.258,246,1.226,253,2.071,268,0.967,269,4.925,271,2.698,273,1.005,286,1.765,288,0.902,289,2.055,299,0.855,301,2.098,302,1.527,307,2.459,310,2.499,312,1.444,315,0.875,323,0.826,327,2.637,330,2.459,331,2.296,339,2.028,341,2.693,342,1.01,347,1.01,354,2.463,356,3.187,358,4.919,359,6.647,364,2.357,393,0.852,406,1.615,407,0.992,414,1.173,420,0.852,447,0.929,469,1.399,483,0.963,484,1.815,489,0.971,501,1.044,507,1.815,516,1.121,520,1.029,528,1.87,550,0.967,558,2.337,569,3.596,571,2.794,572,2.536,573,2.721,582,4.007,600,2.32,611,0.933,615,1.165,621,0.992,624,1.102,637,1.019,643,1.01,644,1.15,646,1.705,647,0.979,653,1.19,656,0.963,657,1.066,753,1.773,786,1.024,816,1.9,857,1.165,863,1.115,870,1.173,907,1.329,957,0.983,978,4.758,1036,1.861,1086,0.951,1129,1.142,1172,1.226,1183,3.523,1186,1.072,1188,2.235,1204,3.026,1222,2.451,1249,3.607,1351,1.681,1352,2.924,1353,1.19,1354,2.481,1355,1.407,1357,1.569,1391,1.932,1411,6.384,1420,5.798,1451,1.681,1471,2.39,1511,1.489,1512,1.489,1568,1.165,1576,2.522,1712,2.626,1713,2.369,1870,2.965,1898,4.318,2039,1.236,2040,4.283,2118,1.358,2331,4.638,2349,1.681,2376,1.489,2450,1.303,2456,2.736,2716,1.466,2758,3.2,2781,1.639,2968,1.173,3002,1.329,3140,1.489,3145,4.847,3420,3.329,3482,4.421,3530,1.489,3704,2.422,3744,1.425,3814,1.315,3839,2.965,4131,1.681,4616,1.425,4905,1.569,5056,1.681,5340,2.768,5343,1.681,5358,1.681,5914,2.965,5927,1.864,5928,1.864,5929,3.287,5930,3.287,5931,3.287,5932,3.287,5933,1.864,5934,1.864,5935,1.864,5936,3.287,5937,3.287,5938,1.864,5939,1.864,5940,1.864,5941,6.068,5942,6.068,5943,1.864,5944,1.864,5945,1.864,5946,1.864,5947,1.864,5948,6.698,5949,1.864,5950,3.287,5951,3.287,5952,1.864,5953,1.864,5954,1.864,5955,1.864,5956,1.864,5957,1.864,5958,1.864,5959,1.864,5960,1.864,5961,1.864,5962,3.287,5963,3.287,5964,3.287,5965,1.864,5966,1.681,5967,1.864,5968,1.864,5969,1.864,5970,1.864,5971,1.864,5972,1.864,5973,1.864,5974,1.864,5975,1.864,5976,1.864,5977,1.864,5978,1.864,5979,1.864]],["component/133",[11,0.279,108,0.486]],["title/134-1",[251,34.29,656,30.31,688,32.088]],["name/134-1",[]],["text/134-1",[]],["component/134-1",[]],["title/134-2",[128,25.111,656,30.31,688,32.088]],["name/134-2",[]],["text/134-2",[]],["component/134-2",[]],["title/134-3",[656,30.31,688,32.088,3594,38.592]],["name/134-3",[]],["text/134-3",[]],["component/134-3",[]],["title/134-4",[113,22.964,299,26.909,656,30.31]],["name/134-4",[]],["text/134-4",[]],["component/134-4",[]],["title/134-5",[356,28.605,972,30.168]],["name/134-5",[]],["text/134-5",[]],["component/134-5",[]],["title/134-6",[4068,64.221]],["name/134-6",[]],["text/134-6",[]],["component/134-6",[]],["title/134-7",[1613,53.991]],["name/134-7",[]],["text/134-7",[]],["component/134-7",[]],["title/134-8",[139,33.93,302,32.097]],["name/134-8",[]],["text/134-8",[]],["component/134-8",[]],["title/134-9",[353,32.749,656,35.686]],["name/134-9",[]],["text/134-9",[]],["component/134-9",[]],["title/134-10",[185,24.166,353,27.814,656,30.31]],["name/134-10",[]],["text/134-10",[]],["component/134-10",[]],["title/134-11",[353,24.172,516,30.677,656,26.341,1660,36.356]],["name/134-11",[]],["text/134-11",[]],["component/134-11",[]],["title/134-12",[178,25.622,656,30.31,2718,34.29]],["name/134-12",[]],["text/134-12",[]],["component/134-12",[]],["title/134-13",[353,24.172,688,40.819,2718,29.8]],["name/134-13",[]],["text/134-13",[]],["component/134-13",[]],["title/134-14",[226,28.714,495,25.617,525,28.428,2718,29.8]],["name/134-14",[]],["text/134-14",[]],["component/134-14",[]],["title/134-15",[226,28.714,393,23.311,481,31.253,2718,29.8]],["name/134-15",[]],["text/134-15",[]],["component/134-15",[]],["title/134",[656,43.383]],["name/134",[656,1.052]],["text/134",[9,0.43,11,1.751,12,0.92,24,1.646,25,0.647,26,0.497,27,3.422,32,2.18,33,2.344,35,0.852,37,0.475,38,0.935,41,0.523,47,0.837,50,1.018,65,1.522,67,0.831,71,3.11,75,0.948,76,0.475,77,0.83,81,0.349,84,1.032,93,1.41,97,0.548,99,0.515,100,0.52,101,0.515,102,0.508,103,0.483,105,0.468,106,1.161,109,0.435,111,0.56,113,1.451,119,1.466,128,1.587,130,0.789,131,0.84,133,0.735,135,0.764,139,0.867,148,0.485,154,2.639,157,1.173,161,0.523,164,0.81,165,1.237,167,0.721,169,0.984,170,1.32,172,1.66,173,0.456,178,1.088,181,1.082,183,0.963,184,0.536,185,2.546,186,0.679,190,1.286,192,1.808,194,0.927,201,1.297,205,0.39,209,0.542,216,1.551,221,1.206,226,3.807,227,0.468,231,1.314,236,1.251,237,2.396,241,3.039,242,3.068,243,2.565,244,3.382,250,1.963,252,0.414,253,2.995,256,0.56,268,0.916,269,4.975,271,3.326,273,0.508,274,0.602,279,1.475,281,1.811,285,0.539,287,0.551,292,0.531,295,0.694,297,0.567,299,1.701,300,1.301,302,2.18,303,1.292,305,0.418,309,0.508,312,1.094,317,2.927,320,1.424,331,3.133,335,2.58,337,0.485,340,1.111,341,2.59,347,0.511,351,0.564,353,3.986,354,1.153,356,1.943,359,0.523,360,1.303,361,0.485,363,0.523,364,0.418,371,1.599,373,0.499,374,0.483,378,0.513,383,2.099,384,0.513,392,1.232,393,3.42,394,1.69,406,1.539,407,0.502,409,0.98,420,1.433,421,0.491,439,0.567,450,1.032,453,2.542,455,1.152,457,1.171,461,0.602,469,1.334,479,0.448,481,1.921,489,0.92,491,2.925,496,0.548,507,0.52,516,4.067,520,0.975,525,5.426,529,0.578,532,2,536,0.606,538,0.679,540,0.567,541,0.518,546,1.35,551,0.606,558,0.935,560,0.721,569,4.129,571,2.687,572,4.035,573,2.894,582,3.591,603,0.994,610,1.201,611,0.472,615,0.589,617,0.542,619,0.528,621,1.325,624,1.472,631,0.581,639,1.211,643,0.511,644,0.581,645,1.111,647,0.927,649,0.533,656,5.534,657,3.707,658,0.62,668,0.528,688,5.548,691,0.753,703,1.082,708,0.779,713,1.356,726,0.571,748,0.659,751,1.135,752,1.152,753,0.508,759,1.161,770,0.721,773,4.288,777,0.753,786,1.722,798,1.32,806,2.824,816,0.545,823,0.694,827,0.606,835,0.557,841,1.18,856,0.593,857,1.557,871,0.585,901,0.635,929,0.606,957,0.931,971,2.5,972,2.403,975,0.593,977,1.464,997,0.593,1030,0.602,1035,0.523,1036,1.41,1055,0.753,1075,2.095,1086,0.481,1107,0.63,1110,3.011,1112,0.548,1129,1.082,1142,2.15,1154,1.19,1198,0.694,1215,0.687,1217,0.703,1224,1.693,1241,0.794,1249,2.106,1252,0.593,1253,0.593,1326,0.912,1327,0.659,1338,0.641,1366,1.18,1391,0.554,1397,0.721,1420,0.647,1437,0.85,1450,1.104,1471,0.957,1505,0.694,1558,2.396,1559,1.19,1576,1.01,1602,1.933,1613,2.384,1619,1.35,1645,1.388,1647,0.753,1660,1.776,1687,0.679,1704,1.783,1793,1.857,1945,1.776,1963,1.259,1965,1.41,2018,3.345,2039,0.625,2040,0.665,2085,0.679,2087,0.794,2161,0.63,2333,0.635,2343,0.578,2423,1.234,2426,1.613,2439,4.153,2442,2.592,2451,1.546,2456,1.281,2487,2.367,2563,0.741,2624,0.81,2705,0.672,2718,4.913,2734,1.152,2737,0.659,2738,0.85,2758,0.567,2794,1.487,2824,0.687,2879,0.829,2909,0.779,2968,0.593,2987,0.615,3000,1.708,3004,0.721,3009,0.85,3275,3.811,3278,1.593,3279,0.85,3280,4.126,3281,0.85,3282,0.85,3283,0.85,3284,1.593,3291,0.85,3292,0.85,3293,1.593,3304,2.247,3305,1.593,3361,0.721,3365,2.234,3384,1.152,3427,2.097,3455,4.054,3479,1.35,3480,0.653,3519,0.721,3523,1.301,3548,1.333,3594,1.161,3670,3.113,3676,0.794,3695,0.694,3722,0.85,3725,0.794,3727,1.41,3730,0.753,3745,0.85,3787,0.731,3841,0.85,3914,1.776,3958,1.593,3972,4.615,4068,2.396,4094,0.753,4189,0.753,4231,0.741,4247,0.85,4303,0.779,4359,0.85,4362,0.794,4370,0.753,4449,0.85,4470,0.753,4810,0.794,5118,0.794,5307,1.487,5373,0.753,5374,1.41,5455,0.85,5461,0.85,5596,0.85,5630,0.85,5705,3.811,5721,0.85,5722,0.85,5723,0.85,5733,0.85,5738,0.85,5773,0.85,5980,0.942,5981,1.765,5982,0.942,5983,0.942,5984,0.942,5985,0.942,5986,3.708,5987,0.942,5988,0.942,5989,0.942,5990,0.942,5991,0.942,5992,0.942,5993,0.942,5994,0.942,5995,1.765,5996,0.942,5997,1.765,5998,1.765,5999,0.942,6000,0.942,6001,0.942,6002,0.942,6003,4.691,6004,2.49,6005,0.942,6006,0.942,6007,1.765,6008,1.765,6009,0.942,6010,1.765,6011,1.765,6012,1.765,6013,1.765,6014,1.765,6015,2.49,6016,1.765,6017,1.765,6018,1.765,6019,1.765,6020,1.765,6021,0.942,6022,0.942,6023,0.942,6024,0.942,6025,0.942,6026,0.942,6027,0.942,6028,0.942,6029,1.765,6030,1.765,6031,0.942,6032,1.765,6033,4.225,6034,4.225,6035,1.765,6036,3.708,6037,3.708,6038,3.708,6039,3.133,6040,2.49,6041,0.942,6042,0.942,6043,0.942,6044,0.942,6045,1.765,6046,0.942,6047,0.942,6048,0.942,6049,1.695,6050,0.942,6051,0.942,6052,0.942,6053,0.942,6054,0.942,6055,0.942,6056,0.942,6057,0.942,6058,0.942,6059,0.942,6060,0.942,6061,0.942,6064,0.942,6065,0.942,6066,1.765,6067,1.765,6068,0.942,6069,3.708,6070,1.765,6071,0.942,6072,0.942,6073,1.765,6074,0.942,6075,0.942,6076,0.942,6077,0.942,6078,0.942,6079,0.942,6080,0.942,6081,0.942,6082,0.942,6083,0.942,6084,0.942,6085,0.942,6086,0.942,6087,0.942,6088,0.942,6089,0.942,6090,0.942,6091,0.942,6092,0.942,6093,0.942,6094,0.942,6095,2.49,6096,0.942]],["component/134",[11,0.279,108,0.486]],["title/135-1",[0,35.057]],["name/135-1",[]],["text/135-1",[]],["component/135-1",[]],["title/135-2",[1,69.076,2,66.332]],["name/135-2",[]],["text/135-2",[]],["component/135-2",[]],["title/135-3",[3,57.081,4,31.382]],["name/135-3",[]],["text/135-3",[]],["component/135-3",[]],["title/135-4",[4,31.382,5,52.828]],["name/135-4",[]],["text/135-4",[]],["component/135-4",[]],["title/135",[6,56.611]],["name/135",[7,1.29]],["text/135",[0,3.38,3,6.691,4,5.647,5,5.121,8,4.679,11,2.513,12,5.333,13,3.326,15,2.241,17,3.277,18,1.717,19,4.428,21,2.72,22,2.653,23,5.349,24,3.518,25,3.025,26,2.326,27,1.551,28,3.878,29,3.418,30,3.212,31,4.825,32,2.049,33,3.715,34,5.199,35,2.127,36,4.681,37,2.224,38,2.336,39,4.607,40,4.323,41,2.446,42,3.053,43,5.984,44,2.606,45,4.215,46,3.68,47,2.09,48,5.421,49,2.835,50,3.695,51,2.577,52,2.9,53,2.878,54,2.756,55,2.794,56,3.144,57,1.841,58,3.977,59,2.72,60,2.891,61,2.923,62,2.972,63,2.357,64,3.713,65,2.142,66,3.372,67,2.076,68,2.224,69,2.72,70,2.577,71,1.783,72,3.101,73,2.72,74,3.328,75,3.596,76,3.377,77,1.47,78,2.378,79,5.168,80,3.468,81,1.631,82,3.713,83,4.409,84,2.577,85,3.713,86,3.328,87,3.522,88,2.856,89,2.72,90,3.287,91,3.418,92,2.287,93,2.495,94,3.522,95,3.112,96,2.549,97,2.563,98,8.436,99,2.411,100,2.434,101,2.411,102,2.378,103,2.259,104,4.409,105,2.19,106,2.055,107,4.409,6419,4.409]],["component/135",[11,0.279,108,0.486]],["title/136",[11,10.251,18,19.86,34,29.316,109,23.537]],["name/136",[110,2.036]],["text/136",[0,3.624,8,3.705,11,2.432,18,4.513,22,6.433,34,4.991,48,4.84,57,3.624,60,3.747,71,4.324,76,4.378,92,4.503,111,5.161,112,5.71,113,4.185,114,4.43,115,4.115,116,5.464,117,5.131,118,5.393,119,4.06,120,4.62,121,4.13,122,4.913]],["component/136",[11,0.279,108,0.486]],["title/137-1",[11,13.888,118,34.841]],["name/137-1",[]],["text/137-1",[]],["component/137-1",[]],["title/137-2",[81,18.859,123,33.538,124,37.143,125,45.997]],["name/137-2",[]],["text/137-2",[]],["component/137-2",[]],["title/137-3",[36,39.932,67,32.527]],["name/137-3",[]],["text/137-3",[]],["component/137-3",[]],["title/137",[]],["name/137",[72,0.943]],["text/137",[0,2.337,8,2.39,11,2.511,18,3.11,36,3.237,40,2.489,41,4.431,50,2.288,57,2.337,60,2.417,65,2.72,67,4.779,71,2.264,72,4.7,77,1.866,81,3.443,84,3.272,96,3.237,113,4.494,118,4.695,119,2.619,120,2.98,121,2.664,122,3.169,124,5.817,126,2.73,127,2.813,128,3.418,129,4.408,130,2.531,131,2.664,132,3.594,133,2.331,134,3.914,135,4.03,136,5.589,137,3.389,138,4.213,139,2.75,140,3.291,141,2.711,142,2.711,143,4.472,144,4.659,145,4.227,146,5.051,147,7.023,148,2.881,149,4.715,150,5.383,151,2.941,152,3.841,153,5.051,154,4.715,155,5.051,156,4.472,157,2.636,158,3.841,159,3.349,160,4.715,161,3.106,162,5.051,163,3.477,164,2.568,165,2.781,166,3.743,167,4.282,168,3.683,169,3.122,170,2.967,171,3.31,172,2.967,173,2.711,174,4.472,175,2.813,176,2.846,177,3.169,178,3.487,179,3.389]],["component/137",[11,0.279,108,0.486]],["title/138-1",[135,25.4,136,30.562,221,28.403]],["name/138-1",[]],["text/138-1",[]],["component/138-1",[]],["title/138-2",[77,16.997,130,16.16,225,19.032,293,19.435]],["name/138-2",[]],["text/138-2",[]],["component/138-2",[]],["title/138-3",[77,16.997,130,16.16,204,32.091,227,25.326]],["name/138-3",[]],["text/138-3",[]],["component/138-3",[]],["title/138-4",[77,19.558,81,21.701,130,18.595]],["name/138-4",[]],["text/138-4",[]],["component/138-4",[]],["title/138-5",[138,30.954,142,28.403,178,25.622]],["name/138-5",[]],["text/138-5",[]],["component/138-5",[]],["title/138",[]],["name/138",[294,2.036]],["text/138",[0,1.462,8,1.494,11,2.277,14,1.576,18,3.109,27,2.458,37,1.766,38,1.855,44,2.07,45,1.632,57,1.462,60,1.511,65,2.718,70,2.046,71,1.416,72,1.622,77,3.487,78,1.889,81,2.952,84,2.046,106,2.608,114,1.787,118,2.822,119,1.638,120,1.863,121,1.666,122,1.982,128,2.991,129,1.438,130,2.766,132,2.518,133,3.633,134,6.827,135,3.778,136,4.546,138,3.687,140,2.058,141,3.383,142,4.505,144,1.752,176,1.78,178,3.052,180,1.654,181,2.146,185,1.442,188,3.877,191,5.61,196,1.952,199,4.334,200,2.991,201,2.915,202,3.018,204,5.492,206,4.604,214,5.046,221,2.709,225,2.979,227,5.039,230,2.16,232,1.889,234,2.402,236,2.811,244,3.744,252,1.538,253,1.364,265,1.746,269,1.462,271,2.488,282,5.527,285,2.003,286,1.88,292,1.972,293,3.547,295,2.58,296,2.949,297,3.366,298,4.123,299,1.606,300,2.58,301,7.119,302,1.627,303,4.141,304,2.797,305,3.538,306,4.04,307,3.12,308,2.133,309,1.889,310,2.305,311,4.469,312,1.538,313,5.833,314,2.949,315,1.643,316,4.976,317,2.257,318,2.251,319,3.874,320,1.591,321,2.285,322,2.402,323,1.552,324,2.285,325,2.235,326,2.949,327,2.094,328,2.678,329,2.402,330,3.12,331,1.511,332,1.889,333,3.234,334,2.797,335,3.079,336,2.949,337,1.801,338,2.797,339,3.452,340,2.495,341,1.773,342,1.897,343,2.497,344,3.079,345,2.58,346,3.159,347,1.897,348,2.797]],["component/138",[11,0.279,108,0.486]],["title/139-1",[136,35.984,138,36.445]],["name/139-1",[]],["text/139-1",[]],["component/139-1",[]],["title/139-2",[136,30.562,138,30.954,180,27.72]],["name/139-2",[]],["text/139-2",[]],["component/139-2",[]],["title/139-3",[136,35.984,138,36.445]],["name/139-3",[]],["text/139-3",[]],["component/139-3",[]],["title/139-4",[181,42.341,182,34.573]],["name/139-4",[]],["text/139-4",[]],["component/139-4",[]],["title/139-5",[183,19.716,184,29.009,185,21.002,186,19.621]],["name/139-5",[]],["text/139-5",[]],["component/139-5",[]],["title/139-6",[19,27.886,138,26.901,187,31.253,188,28.289]],["name/139-6",[]],["text/139-6",[]],["component/139-6",[]],["title/139",[]],["name/139",[189,2.036]],["text/139",[8,1.508,9,1.611,11,1.133,14,1.591,18,1.377,19,3.083,27,3.286,35,2.719,37,1.782,38,1.873,44,3.332,45,1.648,50,3.582,57,1.475,60,1.526,77,2.675,81,2.601,109,1.631,111,2.101,114,2.877,115,3.333,117,2.089,118,1.782,119,1.653,120,1.881,121,2.682,122,2,126,1.723,128,1.513,129,2.889,131,3.345,132,1.591,133,1.471,135,3.044,136,4.18,138,6.069,140,5.491,141,4.928,142,5.318,157,1.664,170,2.987,179,2.139,180,1.67,181,2.166,182,1.769,183,2.719,184,2.011,185,3.305,186,4.227,187,3.455,188,5.648,190,2.912,191,4.521,192,1.513,193,2.668,194,1.857,195,3.534,196,3.143,197,6.303,198,1.99,199,1.755,200,4.686,201,2.936,202,3.793,203,2.604,204,5.518,205,1.463,206,1.865,207,3.188,208,3.598,209,5.041,210,3.207,211,2.74,212,2.703,213,2.447,214,1.826,215,2.077,216,3.971,217,4.488,218,2.81,219,4.062,220,4.521,221,1.711,222,2.52,223,2.289,224,2.703,225,1.319,226,3.174,227,2.8,228,2.604,229,2.153,230,2.18,231,1.865,232,1.906,233,3.188,234,2.425,235,2.703,236,2.832,237,1.539,238,2.153,239,5.085,240,1.97,241,2.289,242,1.97,243,1.648,244,1.422,245,2.325,246,2.325,247,3.188,248,2.52,249,1.841,250,1.642,251,2.066,252,2.476,253,1.377,254,3.188,255,3.188,256,2.101,257,2.425,258,2.703,259,2.976,260,3.188,261,2.976,262,3.188,263,2.823,264,3.188,265,1.762,266,3.188,267,2.976,268,1.833,269,1.475,270,2.823,271,1.571,272,2.054,273,1.906,274,2.256,275,2.976,276,2.224,277,2.92,278,2.604,279,1.664,280,4.019,281,2.043,282,2.447,283,3.188,284,2.823,285,2.021,286,1.898,287,3.295,288,1.711,289,2.209,290,2.547,291,2.547,292,1.99]],["component/139",[11,0.279,108,0.486]],["title/140-1",[11,13.888,129,28.378]],["name/140-1",[]],["text/140-1",[]],["component/140-1",[]],["title/140-2",[77,19.558,129,24.102,131,27.91]],["name/140-2",[]],["text/140-2",[]],["component/140-2",[]],["title/140-3",[11,11.796,129,24.102,132,26.405]],["name/140-3",[]],["text/140-3",[]],["component/140-3",[]],["title/140-4",[129,28.378,138,36.445]],["name/140-4",[]],["text/140-4",[]],["component/140-4",[]],["title/140",[]],["name/140",[349,2.036]],["text/140",[0,2.238,8,2.288,11,2.444,17,4.869,18,2.088,27,2.722,35,2.586,50,2.191,57,2.238,60,2.314,70,3.133,72,4.207,77,4.052,113,3.03,118,2.704,120,2.853,121,2.55,122,3.034,127,4.564,128,3.888,129,5.199,130,2.879,131,4.322,132,4.089,133,3.223,134,3.747,135,2.321,136,4.032,138,4.084,140,4.55,141,3.747,142,2.595,178,2.341,186,2.063,196,2.989,199,2.663,202,2.892,206,2.828,209,4.451,214,2.77,221,3.747,225,2.001,232,2.892,237,2.334,243,3.609,268,2.781,292,3.019,293,3.792,305,3.431,309,4.9,310,2.208,316,3.682,317,3.122,331,2.314,339,3.307,341,2.715,342,2.905,343,3.823,350,3.526,351,3.206,352,3.286,353,2.542,354,2.483,355,4.515,356,3.205,357,5.218,358,3.646,359,4.295,360,2.804,361,2.758]],["component/140",[11,0.279,108,0.486]],["title/141-1",[77,19.558,129,24.102,339,36.194]],["name/141-1",[]],["text/141-1",[]],["component/141-1",[]],["title/141-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/141-2",[]],["text/141-2",[]],["component/141-2",[]],["title/141-3",[130,21.893,132,31.09]],["name/141-3",[]],["text/141-3",[]],["component/141-3",[]],["title/141",[]],["name/141",[310,0.463,362,1.125]],["text/141",[0,2.987,8,2.055,11,2.128,14,2.167,27,3.324,35,3.452,50,1.968,57,2.01,60,2.079,71,1.947,72,3.314,76,2.429,77,3.151,81,4.053,117,4.23,120,2.563,121,4.062,122,2.726,126,5.49,129,4.502,130,2.706,132,3.22,135,3.098,136,2.508,182,2.41,183,3.302,186,1.853,192,2.061,196,2.685,198,4.03,199,3.554,201,4.448,205,3.536,206,2.541,225,3.187,232,2.597,244,4.779,249,4.923,251,2.814,252,4.437,253,1.876,257,4.909,279,4.02,285,2.754,292,2.712,293,1.836,302,2.237,303,3.712,309,2.597,310,4.359,312,2.115,316,4.496,317,3.813,339,5.267,350,3.167,363,2.672,364,2.134,365,5.272,366,4.535,367,4.182,368,2.74,369,6.033,370,2.769,371,2.458,372,3.246,373,2.552,374,4.375,375,4.954,376,2.754,377,3.548,378,2.621,379,3.096,380,4.159,381,3.846,382,3.434,383,2.726,384,2.621,385,3.434,386,4.815]],["component/141",[11,0.279,108,0.486]],["title/142-1",[77,19.558,129,24.102,293,22.364]],["name/142-1",[]],["text/142-1",[]],["component/142-1",[]],["title/142-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/142-2",[]],["text/142-2",[]],["component/142-2",[]],["title/142-3",[130,21.893,132,31.09]],["name/142-3",[]],["text/142-3",[]],["component/142-3",[]],["title/142",[]],["name/142",[387,2.036]],["text/142",[0,2.444,8,1.582,11,1.657,14,1.668,21,2.287,27,3.156,33,2.057,50,1.515,57,1.548,60,1.6,71,1.499,72,2.712,77,2.748,120,1.973,121,4.751,122,2.098,126,5.52,127,1.863,129,3.919,130,3.459,132,2.635,135,2.535,136,1.931,182,1.855,183,3.47,186,1.427,192,1.587,196,2.067,198,5.625,199,2.908,201,3.78,205,3.716,206,1.956,225,2.708,232,2,243,4.827,244,4.731,249,5.983,251,2.167,252,4.191,253,1.444,279,5.476,285,2.12,289,2.317,292,2.088,293,4.378,302,1.722,303,3.037,309,3.914,312,1.629,316,3.921,317,3.325,350,2.438,353,2.776,354,4.156,356,3.413,357,6.431,364,1.643,365,4.314,366,3.711,367,3.422,368,2.109,370,2.131,371,1.892,372,3.947,373,1.964,374,5.801,375,6.605,376,2.12,377,2.731,378,2.018,379,2.383,380,3.403,384,2.018,385,2.643,388,4.677,389,2.961,390,2.961,391,6.546,392,3.591,393,1.695,394,2,395,2.961,396,3.122,397,3.122,398,3.344,399,3.344,400,3.344,401,2.731,402,2.835,403,3.122,404,2.835]],["component/142",[11,0.279,108,0.486]],["title/143-1",[129,24.102,133,24.426,209,33.734]],["name/143-1",[]],["text/143-1",[]],["component/143-1",[]],["title/143",[]],["name/143",[405,2.036]],["text/143",[0,3.251,8,3.324,11,1.566,27,2.739,45,3.63,57,3.251,60,3.362,109,4.61,120,4.145,121,3.705,122,4.408,129,4.103,130,3.165,133,3.242,136,4.057,138,4.109,140,5.87,141,3.77,185,3.208,186,4.243,196,4.342,209,6.687,221,3.77,236,3.913,249,4.057,258,8.432,286,4.182,292,4.386,333,4.502,371,3.975,392,3.854,406,3.825,407,6.189,408,7.788,409,5.541,410,7.026,411,7.788,412,7.788]],["component/143",[11,0.279,108,0.486]],["title/144-1",[77,19.558,129,24.102,358,39.895]],["name/144-1",[]],["text/144-1",[]],["component/144-1",[]],["title/144-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/144-2",[]],["text/144-2",[]],["component/144-2",[]],["title/144-3",[130,21.893,132,31.09]],["name/144-3",[]],["text/144-3",[]],["component/144-3",[]],["title/144",[]],["name/144",[413,2.036]],["text/144",[0,2.712,8,1.808,11,2.026,14,1.907,27,3.359,50,1.731,57,1.768,60,1.829,71,1.713,72,3.008,76,2.137,77,2.633,120,2.254,121,4.544,122,2.398,126,5.524,129,4.31,130,2.504,132,2.923,135,2.812,136,2.207,182,2.12,183,3.693,186,1.63,188,4.383,192,1.813,196,2.362,198,3.658,199,3.226,201,4.115,205,4.174,206,2.235,225,2.949,232,2.285,237,4.569,243,4.453,244,4.86,249,5.639,251,2.476,252,4.428,253,1.65,279,4.941,285,2.423,286,2.275,289,2.648,292,2.386,293,1.615,302,1.968,303,3.369,309,3.504,312,1.861,316,4.214,317,3.573,350,2.786,354,4.102,358,5.372,359,6.158,363,2.35,364,1.878,365,4.786,366,4.117,367,3.796,368,2.41,370,2.436,371,2.162,372,4.379,373,2.245,374,5.377,375,5.47,376,2.423,377,3.121,378,2.306,379,2.724,380,5.148,384,2.306,385,3.021,392,2.096,401,3.121,402,3.24,404,3.24,414,2.666,415,4.236,416,4.236,417,4.236,418,4.236]],["component/144",[11,0.279,108,0.486]],["title/145-1",[129,24.102,138,30.954,142,28.403]],["name/145-1",[]],["text/145-1",[]],["component/145-1",[]],["title/145",[]],["name/145",[142,0.545,419,1.125]],["text/145",[8,2.699,10,3.459,11,1.271,27,3.496,57,2.64,60,2.73,76,3.19,77,3.313,81,3.217,109,2.919,120,3.366,121,3.008,122,3.579,128,2.707,129,4.083,130,2.004,135,2.738,136,5.576,138,5.244,140,6.292,141,5.752,142,5.433,180,2.988,183,3.363,188,6.227,196,3.526,199,4.32,200,3.381,208,5.551,209,5,218,3.153,221,4.21,224,4.836,225,3.246,238,5.297,252,3.82,263,5.051,292,3.561,301,4.037,305,3.855,312,2.778,313,4.228,316,3.008,317,2.551,322,5.966,330,3.526,341,3.202,342,3.427,343,4.509,407,3.366,420,2.891,421,3.294,422,5.705,423,3.876,424,5.365,425,7.845,426,4.659]],["component/145",[11,0.279,108,0.486]],["title/146-1",[17,28.713,77,19.558,129,24.102]],["name/146-1",[]],["text/146-1",[]],["component/146-1",[]],["title/146-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/146-2",[]],["text/146-2",[]],["component/146-2",[]],["title/146-3",[130,21.893,132,31.09]],["name/146-3",[]],["text/146-3",[]],["component/146-3",[]],["title/146",[]],["name/146",[427,2.036]],["text/146",[0,2.666,8,1.768,11,1.901,14,1.865,17,5.397,21,2.556,27,3.326,50,1.693,57,1.73,60,1.789,71,1.676,72,2.957,77,2.918,120,2.205,121,4.952,122,2.345,126,5.672,129,4.104,130,2.469,132,2.874,135,2.765,136,2.158,182,2.074,183,3.657,186,1.594,192,1.773,196,2.31,198,4.93,199,3.172,201,4.059,205,3.916,206,2.186,225,2.908,232,2.235,243,3.632,244,4.437,249,6.137,251,2.422,252,4.389,253,1.614,279,5.303,285,2.37,289,2.59,292,2.333,293,1.579,302,1.925,303,3.313,309,4.203,312,1.82,316,4.165,317,3.532,336,3.489,350,2.725,353,3.027,354,3.608,356,2.644,364,1.837,365,4.705,366,4.047,367,3.732,368,2.357,370,2.382,371,2.115,372,4.305,373,2.195,374,5.771,375,6.917,376,2.37,377,3.053,378,2.256,379,2.664,380,3.712,384,2.256,385,2.954,388,5.101,392,3.16,393,2.919,395,3.31,397,3.489,401,3.053,402,3.169,403,3.489,404,3.169,428,2.925,429,5.378,430,3.738,431,3.489,432,3.738,433,3.738]],["component/146",[11,0.279,108,0.486]],["title/147-1",[77,19.558,129,24.102,357,39.552]],["name/147-1",[]],["text/147-1",[]],["component/147-1",[]],["title/147-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/147-2",[]],["text/147-2",[]],["component/147-2",[]],["title/147-3",[130,21.893,132,31.09]],["name/147-3",[]],["text/147-3",[]],["component/147-3",[]],["title/147",[]],["name/147",[434,2.036]],["text/147",[0,3.167,8,2.225,11,2.189,14,2.346,27,3.145,50,2.13,57,2.176,60,2.251,71,2.108,72,3.513,76,2.629,77,3.273,120,2.775,121,4.254,122,2.951,126,5.615,129,4.617,130,2.834,132,3.414,135,3.284,136,2.716,182,2.609,183,3.458,186,2.006,192,2.231,196,2.907,198,4.272,199,3.768,201,4.658,205,3.703,206,2.751,225,3.338,232,2.812,244,4.724,249,5.115,251,3.047,252,4.584,253,2.031,279,4.21,285,2.982,292,2.936,293,1.987,302,2.422,303,3.935,309,2.812,312,2.29,316,4.671,317,3.961,350,3.429,357,7.576,363,2.893,364,2.311,365,5.589,366,4.808,367,4.433,368,2.966,370,2.998,371,2.661,372,3.515,373,2.762,374,4.582,375,5.252,376,2.982,377,3.841,378,2.838,379,3.352,380,4.409,384,2.838,385,3.717,435,5.213,436,5.213]],["component/147",[11,0.279,108,0.486]],["title/148-1",[11,10.251,77,16.997,129,20.946,131,24.255]],["name/148-1",[]],["text/148-1",[]],["component/148-1",[]],["title/148-2",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/148-2",[]],["text/148-2",[]],["component/148-2",[]],["title/148-3",[130,21.893,132,31.09]],["name/148-3",[]],["text/148-3",[]],["component/148-3",[]],["title/148",[]],["name/148",[437,2.036]],["text/148",[0,1.13,8,1.155,11,2.223,14,2.04,17,1.325,18,2.965,19,1.48,24,1.422,27,3.075,32,2.106,40,1.203,41,1.502,47,1.283,50,1.106,51,2.649,57,1.13,60,1.168,71,3.709,77,2.745,98,1.994,109,1.249,113,4.204,120,1.44,121,1.288,122,1.532,126,2.21,128,1.158,129,3.916,130,2.906,131,4.922,132,3.935,136,1.41,138,1.428,142,1.31,144,2.268,148,2.332,151,2.381,164,2.078,173,1.31,175,4.137,182,2.268,183,3.184,186,4.474,192,4.843,196,1.509,197,1.74,199,1.344,200,2.423,205,3.152,206,2.391,218,1.349,219,3.265,221,1.31,224,2.07,225,2.552,226,1.524,232,1.46,244,3.313,249,4.555,252,3.004,253,2.277,256,1.609,268,1.404,279,4.872,292,1.524,293,1.032,306,2.62,307,1.509,310,1.115,312,1.189,316,3.621,317,3.07,320,1.23,327,2.71,330,1.509,333,2.62,337,2.332,350,1.78,352,1.659,353,2.771,354,4.974,355,2.279,363,1.502,367,1.582,370,1.556,372,1.825,374,5.504,375,4.734,383,2.565,385,1.93,388,2.162,392,1.339,395,2.162,401,1.994,402,2.07,404,2.07,423,1.659,438,2.129,439,1.628,440,2.442,441,3.62,442,2.38,443,2.442,444,2.679,445,2.442,446,4.168,447,1.349,448,1.692,449,1.609,450,1.582,451,2.279,452,1.91,453,1.628,454,1.74,455,1.766,456,2.442,457,5.047,458,2.259,459,3.816,460,2.442,461,1.728,462,2.442,463,2.442,464,2.442,465,2.279,466,2.442,467,4.734,468,5.461,469,4.057,470,2.852,471,3.466,472,4.591,473,3.231,474,3.339,475,2.442,476,3.975,477,2.442,478,5.229,479,2.781,480,2.442,481,1.659,482,1.532,483,1.398,484,3.775,485,2.442,486,2.162,487,2.442,488,2.442,489,1.41,490,2.442,491,3.138,492,4.088,493,2.279,494,2.442]],["component/148",[11,0.279,108,0.486]],["title/149-1",[0,28.838,22,41.561]],["name/149-1",[]],["text/149-1",[]],["component/149-1",[]],["title/149",[]],["name/149",[43,1.19]],["text/149",[0,3.687,8,3.77,11,2.348,18,3.44,35,4.261,43,6.825,48,6.026,50,3.609,57,3.687,60,3.813,111,5.251,112,7.109,113,4.23,115,5.123,116,6.802,120,4.701,121,4.202,122,4.999,196,4.925,265,4.404,301,5.638]],["component/149",[11,0.279,108,0.486]],["title/150-1",[11,10.251,113,19.957,115,24.172,116,32.091]],["name/150-1",[]],["text/150-1",[]],["component/150-1",[]],["title/150-2",[11,10.251,113,19.957,116,32.091,495,25.617]],["name/150-2",[]],["text/150-2",[]],["component/150-2",[]],["title/150-3",[170,36.603,496,40.15]],["name/150-3",[]],["text/150-3",[]],["component/150-3",[]],["title/150-4",[113,19.957,116,32.091,164,23.385,497,32.782]],["name/150-4",[]],["text/150-4",[]],["component/150-4",[]],["title/150-5",[0,24.493,71,23.727,113,22.964]],["name/150-5",[]],["text/150-5",[]],["component/150-5",[]],["title/150-6",[27,17.931,116,32.091,447,25.422,497,32.782]],["name/150-6",[]],["text/150-6",[]],["component/150-6",[]],["title/150-7",[337,35.541,498,52.828]],["name/150-7",[]],["text/150-7",[]],["component/150-7",[]],["title/150",[]],["name/150",[499,2.036]],["text/150",[0,2.906,4,1.054,6,1.564,8,2.228,11,2.132,14,4.177,17,3.028,18,2.958,22,1.396,27,1.399,29,3.084,30,2.898,32,1.848,33,1.288,34,1.334,35,2.985,36,1.342,37,1.17,43,3.051,45,1.854,46,2.869,47,2.933,49,1.492,50,0.948,57,0.969,60,2.254,67,1.093,71,3.284,81,1.471,92,2.064,93,1.314,95,1.638,97,1.349,98,1.71,99,2.176,100,2.196,101,2.176,102,2.146,103,2.038,105,1.976,106,1.854,108,0.811,111,1.38,113,4.151,114,2.665,115,3.85,116,6.856,118,1.17,119,2.442,120,1.235,121,1.104,122,2.252,126,1.132,127,1.166,128,0.993,129,2.145,131,3.863,132,1.79,135,1.005,164,2.838,165,1.153,171,1.372,179,1.405,182,1.991,186,0.893,187,1.422,192,1.703,199,4.255,200,3.721,202,2.816,203,1.71,206,4.721,210,2.263,211,1.799,216,1.969,217,1.481,218,1.157,227,1.153,234,1.592,244,2.49,249,2.72,250,1.078,252,1.019,256,1.38,269,3.736,271,2.321,272,2.312,285,1.327,286,2.136,288,1.926,293,0.885,299,1.064,306,2.3,307,1.294,308,1.414,312,1.748,315,1.867,316,5.182,317,2.808,321,1.515,323,2.314,331,3.005,333,3.018,335,1.023,337,3.581,340,1.774,341,2.014,347,1.257,351,2.379,352,4.978,354,1.075,356,0.961,360,1.214,364,1.763,366,1.471,370,3.558,383,2.252,393,2.829,420,1.819,421,2.072,438,1.825,447,1.157,449,1.38,452,5.732,453,1.396,455,1.515,476,2.705,479,1.104,495,4.496,496,2.312,497,5.967,500,6.961,501,3.467,502,2.675,503,4.462,504,2.321,505,1.526,506,4.171,507,1.281,508,2.321,509,2.837,510,1.854,511,1.592,512,1.954,513,3.35,514,1.655,515,1.655,516,1.396,517,2.321,518,1.71,519,1.515,520,2.196,521,2.094,522,1.825,523,3.357,524,4.284,525,1.294,526,1.775,527,1.503,528,2.263,529,2.438,530,2.228,531,2.094,532,1.481,533,1.405,534,2.321,535,2.558,536,1.492,537,2.321,538,1.672,539,2.321,540,2.393,541,2.186,542,1.526,543,1.578,544,1.854,545,2.228,546,1.775,547,1.954,548,2.898,549,1.854,550,1.204,551,1.492,552,1.854,553,1.655,554,2.321,555,2.321,556,1.854,557,1.691,558,1.23,559,2.321,560,1.775,561,2.041,562,3.679,563,4.71,564,2.094,565,2.094,566,2.094,567,2.094,568,2.094,569,1.246,570,2.094,571,2.743,572,3.002,573,1.432,574,2.094,575,2.094,576,1.752,577,1.752,578,3.589,579,3.589,580,2.094,581,2.094,582,1.969,583,2.094,584,1.954,585,2.094,586,2.321,587,1.854]],["component/150",[11,0.279,108,0.486]],["title/151-1",[43,34.29,48,32.712,112,38.592]],["name/151-1",[]],["text/151-1",[]],["component/151-1",[]],["title/151-2",[588,55.237]],["name/151-2",[]],["text/151-2",[]],["component/151-2",[]],["title/151-3",[133,28.76,589,48.285]],["name/151-3",[]],["text/151-3",[]],["component/151-3",[]],["title/151-4",[11,11.796,130,18.595,131,27.91]],["name/151-4",[]],["text/151-4",[]],["component/151-4",[]],["title/151-5",[337,35.541,498,52.828]],["name/151-5",[]],["text/151-5",[]],["component/151-5",[]],["title/151",[]],["name/151",[590,2.036]],["text/151",[0,4.03,8,1.194,9,1.274,11,2.386,13,1.389,14,2.096,18,3.019,27,3.269,32,1.299,35,2.887,36,2.692,40,1.243,43,2.722,46,3.289,47,1.326,48,5.382,49,1.798,50,1.143,57,1.167,60,1.207,69,3.692,71,3.76,72,1.295,77,2.959,81,2.581,93,1.583,102,1.508,103,2.386,105,2.313,106,2.171,109,2.15,113,4.092,114,2.377,115,1.326,116,1.76,119,1.308,120,1.488,121,1.33,122,1.583,126,2.918,129,3.439,130,2.813,131,5.156,135,2.016,139,1.374,148,3.079,151,3.144,157,1.317,164,2.136,165,1.389,169,1.559,171,1.653,173,1.354,180,1.321,182,1.4,186,1.076,187,1.714,197,1.798,199,3.851,202,2.512,205,1.158,206,4.416,208,2.973,209,1.608,214,1.445,216,1.384,218,2.322,225,1.044,229,2.837,232,1.508,249,1.457,251,1.634,252,3.066,256,1.663,279,2.818,287,2.722,302,1.299,306,4.034,310,1.152,312,2.629,316,5.07,317,1.879,321,1.825,330,1.559,331,2.01,335,2.637,337,2.396,340,2.077,352,2.855,354,3.59,360,1.463,363,1.552,364,2.653,366,1.772,367,1.634,370,2.678,374,4.764,392,1.384,406,1.374,407,1.488,420,2.129,421,1.457,423,2.855,444,2.753,447,3.48,448,1.748,449,1.663,452,4.926,454,2.994,469,1.19,472,2.597,476,4.069,479,3.32,489,1.457,495,5.252,501,2.61,502,1.433,503,1.537,507,1.544,518,2.06,522,5.49,523,1.798,524,1.936,526,2.139,542,3.063,548,2.037,549,2.234,552,2.234,588,1.839,589,3.255,591,4.976,592,1.936,593,1.529,594,2.168,595,1.936,596,2.873,597,1.994,598,2.892,599,2.973,600,3.287,601,3.848,603,1.575,604,1.772,605,2.234,606,3.516,608,2.355,609,1.854,610,1.349,611,1.4,612,1.994,613,1.974,614,2.355,615,1.748,616,2.111,617,1.608,618,2.404,619,1.567,620,2.139,621,1.488,622,3.255,623,1.451,624,2.753,625,4.267,626,2.355,627,1.599,628,2.355,629,1.725,630,1.76,631,1.725,632,1.885,633,1.811,634,1.725,6098,2.523,6099,2.523,6100,2.46]],["component/151",[11,0.279,108,0.486]],["title/152-1",[192,21.823,331,22.01,598,31.661,698,31.454]],["name/152-1",[]],["text/152-1",[]],["component/152-1",[]],["title/152-2",[130,14.289,495,22.651,620,34.479,699,35.463,700,37.967]],["name/152-2",[]],["text/152-2",[]],["component/152-2",[]],["title/152-3",[11,9.064,113,17.646,323,19.984,394,24.318,516,27.125]],["name/152-3",[]],["text/152-3",[]],["component/152-3",[]],["title/152-4",[130,18.595,186,22.577,478,44.869]],["name/152-4",[]],["text/152-4",[]],["component/152-4",[]],["title/152-5",[51,40.373,52,45.438]],["name/152-5",[]],["text/152-5",[]],["component/152-5",[]],["title/152-6",[52,33.538,495,25.617,609,33.807,701,39.531]],["name/152-6",[]],["text/152-6",[]],["component/152-6",[]],["title/152-7",[65,28.505,93,33.208,633,38.003]],["name/152-7",[]],["text/152-7",[]],["component/152-7",[]],["title/152-8",[186,26.583,454,44.413]],["name/152-8",[]],["text/152-8",[]],["component/152-8",[]],["title/152-9",[52,38.592,113,22.964,139,28.818]],["name/152-9",[]],["text/152-9",[]],["component/152-9",[]],["title/152",[11,9.064,51,26.35,52,29.655,479,21.447,503,24.774]],["name/152",[51,0.658,52,0.74]],["text/152",[0,2.446,4,0.473,5,0.796,8,1.159,11,1.694,14,1.53,15,0.984,17,1.329,18,0.405,19,1.485,22,0.626,23,0.831,24,0.546,25,1.328,27,3.356,32,2.336,33,0.577,34,0.598,35,1.31,37,0.976,38,1.439,42,0.72,43,2.34,44,0.615,45,0.485,46,1.492,48,1.895,50,2.233,51,3.827,52,7.631,57,1.672,60,0.449,65,0.941,66,0.796,67,0.912,70,0.608,75,0.559,76,1.369,77,0.645,82,0.876,88,0.674,92,0.54,93,0.589,97,0.605,99,0.569,100,2.509,101,0.569,102,0.561,103,0.533,105,1.688,106,1.585,109,3.52,113,4.024,114,0.988,115,1.611,117,2.009,121,0.495,124,2.917,126,1.657,127,1.364,128,1.945,130,1.269,131,0.495,132,0.468,133,1.415,135,2.177,137,0.63,139,3.745,144,0.969,150,0.701,157,0.49,159,0.622,163,0.646,164,2.306,170,0.551,173,0.504,177,1.924,178,0.454,179,2.424,180,2.147,182,2.516,183,1.314,185,1.118,186,4.342,187,0.638,190,0.537,192,3.051,194,0.546,199,1.349,200,1.817,201,1.008,206,2.883,212,0.796,214,1.756,215,0.611,216,0.515,218,0.965,220,1.245,231,0.549,237,0.843,238,2.07,240,0.58,241,1.759,243,0.902,249,3.569,250,0.899,252,1.193,253,1.057,256,1.151,265,1.354,268,1.763,269,0.434,271,1.207,273,0.561,279,0.49,280,0.742,286,1.458,287,1.131,288,0.504,297,1.633,301,0.664,307,1.079,309,0.561,310,0.797,312,3.01,316,3.514,317,2.028,321,0.679,323,1.507,330,0.58,331,1.467,332,0.561,333,1.119,335,1.764,337,0.996,340,1.211,341,0.527,342,0.564,347,0.564,351,3.504,353,1.287,354,3.73,360,2.377,363,2.521,364,2.014,373,0.551,374,0.992,378,1.478,383,0.589,392,0.515,394,0.561,409,0.577,414,1.709,420,1.554,421,1.771,424,1.194,439,0.626,447,2.724,449,1.151,453,1.165,454,2.921,458,0.519,467,1.34,469,3.034,470,0.655,472,4.882,473,1.936,478,6.159,479,1.617,481,1.664,489,1.414,491,1.34,495,5.042,496,2.641,502,1.391,503,2.763,507,1.069,516,4.721,518,0.766,519,0.679,520,1.069,522,2.136,523,4.584,524,1.34,532,0.664,541,1.492,542,0.684,543,1.846,544,0.831,558,0.551,572,0.598,593,1.059,595,1.88,596,1.675,597,1.38,598,2.486,599,2.17,609,2.655,610,0.502,611,0.521,612,0.742,613,0.734,617,1.113,620,4.756,621,1.03,622,0.727,624,2.009,625,3.24,631,1.675,633,1.254,634,0.642,638,0.75,646,1.004,655,0.876,658,2.236,666,0.796,668,1.905,681,1.38,686,0.707,688,0.569,698,0.642,699,4.892,700,6.608,701,0.807,702,1.471,703,0.638,704,0.876,705,0.999,706,0.915,707,1.218,708,1.6,709,1.936,710,0.86,711,1.48,712,1.38,713,1.054,714,0.876,715,1.04,716,1.746,717,6.548,718,1.294,719,2.504,720,5.464,721,2.715,722,1.165,723,1.04,724,4.004,725,4.004,726,1.172,727,3.399,728,4.004,729,0.999,730,1.04,731,1.04,732,1.04,733,1.04,734,1.04,735,4.544,736,4.004,737,1.04,738,1.04,739,1.546,740,1.04,741,0.742,742,1.04,743,0.684,744,2.715,745,1.04,746,0.766,747,2.715,748,0.727,749,1.04,750,2.715,751,0.669,752,0.679,753,0.561,754,1.04,755,0.938,756,0.626,757,1.546,758,0.876,759,0.902,760,0.938,761,1.936,762,1.04,763,1.746,764,1.113,765,1.38,766,1.04,767,1.236,768,0.796,769,1.04,770,0.796,771,0.646,772,0.601,773,0.58,774,0.766,775,0.938,776,0.758,777,3.629,778,0.831,779,1.38,780,1.936,781,1.04,782,1.936,783,1.04,784,0.938,785,0.807,786,1.868,787,1.746,788,1.305,789,2,790,2.715,791,1.461,792,2.715,793,0.915,794,1.83,795,4.016,796,0.655,797,1.48,798,0.551,799,4.544,800,1.746,801,0.938,802,0.915,803,0.831,804,1.04,805,1.746,806,1.294,807,1.04,808,1.04,809,0.831,810,0.938,811,0.75,812,2.449,813,1.04,814,1.04,815,0.86,816,0.601,817,0.938,818,0.674,819,1.746,820,1.04,821,0.915,822,1.004,823,0.766,824,1.63,825,1.04,826,1.443,827,0.669,828,1.04,829,1.04,830,3.399,831,1.04,832,1.04,833,1.04,834,1.936,835,0.615,836,1.04,837,0.831,838,1.04,839,0.938,840,0.938,841,0.695,842,1.294,843,1.936,844,1.04,845,1.04,846,1.04,847,1.936,848,1.04,849,1.04,850,1.04,851,1.04,852,1.04,853,1.746,854,1.746,855,1.04,856,0.655,857,0.65,858,1.04,859,1.38,860,1.936,861,0.742,862,0.664,863,1.158,864,0.669,865,4.601,866,1.04,867,0.876,868,0.766,869,0.65,870,0.655,871,0.646,872,1.04,873,1.04,874,1.746,875,1.04,876,2.449,877,1.04,878,1.04,879,0.655,880,0.742,881,0.766,882,0.938,883,1.04,884,1.04,885,1.04,886,1.04,887,0.742,888,1.936,889,1.04,890,1.04,891,1.04,892,1.04,893,2.715,894,1.04,895,1.04,896,1.04,897,1.04,898,1.04,899,1.04,900,1.04]],["component/152",[11,0.279,108,0.486]],["title/153-1",[596,42.614,635,69.076]],["name/153-1",[]],["text/153-1",[]],["component/153-1",[]],["title/153-2",[495,42.191]],["name/153-2",[]],["text/153-2",[]],["component/153-2",[]],["title/153-3",[71,33.961]],["name/153-3",[]],["text/153-3",[]],["component/153-3",[]],["title/153-4",[444,49.639]],["name/153-4",[]],["text/153-4",[]],["component/153-4",[]],["title/153-5",[56,59.878]],["name/153-5",[]],["text/153-5",[]],["component/153-5",[]],["title/153",[0,24.493,11,11.796,18,22.852]],["name/153",[636,2.036]],["text/153",[0,2.793,11,2.465,13,1.63,18,2.606,22,1.974,27,3.697,32,1.525,34,1.887,35,2.562,36,3.07,39,4.374,40,3.754,42,3.677,43,3.104,45,3.936,47,1.556,48,3.73,50,1.341,54,2.051,55,2.08,56,5.482,57,3.772,63,2.839,67,2.501,69,3.276,71,2.148,77,1.094,81,2.474,84,1.918,89,2.024,109,3.549,111,1.951,115,1.556,119,3.129,126,2.59,127,2.668,131,2.526,135,4.288,136,2.766,143,2.621,144,2.658,145,2.477,151,4.997,157,2.501,164,2.436,165,1.63,168,2.158,175,1.649,178,2.319,186,1.263,191,2.11,192,2.273,194,3.514,196,1.83,209,3.846,214,1.695,218,1.636,221,1.589,231,2.802,237,2.312,244,1.32,249,1.709,250,1.525,253,1.278,265,2.648,268,1.702,273,2.865,279,3.62,302,2.468,312,3.377,315,3.608,323,2.965,354,3.098,374,2.721,376,1.877,392,3.31,393,1.5,420,1.5,444,3.139,447,2.648,450,1.918,461,2.094,482,3.787,483,1.695,484,1.812,495,1.649,496,1.907,502,1.681,503,1.803,507,1.812,515,2.34,520,1.812,523,2.11,541,1.803,550,1.702,569,1.762,592,3.677,593,2.904,596,4.127,604,4.872,613,4.722,623,1.702,624,3.954,625,4.77,629,2.024,637,2.904,638,3.827,639,2.251,640,2.509,641,2.231,642,2.763,643,2.878,644,3.276,645,3.342,646,1.702,647,1.724,648,3.281,649,1.857,650,2.11,651,2.011,652,2.763,653,2.094,654,2.418,655,2.763,656,2.744,657,3.037,658,3.493,659,4.472,660,2.763,661,2.509,662,3.281,663,4.791,664,2.96,665,2.581,666,2.509,667,2.509,668,4.308,669,3.749,670,2.581,671,2.212,672,4.598,673,2.477,674,1.974,675,3.281,676,2.711,677,2.763,678,2.763,679,2.39,680,3.281,681,2.34,682,2.194,683,2.34,684,3.281,685,4.671,686,2.231,687,2.509,688,1.795,689,2.621,690,2.418,691,2.621,692,2.96,693,2.158,694,2.96,695,2.96,696,2.024,697,2.581]],["component/153",[11,0.279,108,0.486]],["title/154-1",[887,59.878]],["name/154-1",[]],["text/154-1",[]],["component/154-1",[]],["title/154-2",[901,56.611]],["name/154-2",[]],["text/154-2",[]],["component/154-2",[]],["title/154-3",[127,34.706,592,47.83]],["name/154-3",[]],["text/154-3",[]],["component/154-3",[]],["title/154-4",[81,25.551,133,28.76]],["name/154-4",[]],["text/154-4",[]],["component/154-4",[]],["title/154-5",[902,70.719]],["name/154-5",[]],["text/154-5",[]],["component/154-5",[]],["title/154",[11,10.251,40,22.669,48,28.428,56,36.356]],["name/154",[56,0.802,774,0.829]],["text/154",[9,1.245,10,2.497,11,2.359,14,1.229,15,1.388,17,1.336,18,3.725,27,3.787,31,1.968,32,2.122,35,1.317,40,1.214,47,1.295,48,3.281,50,1.866,53,1.782,56,5.898,57,1.14,60,1.179,63,1.46,71,1.847,77,1.961,81,2.543,89,1.685,92,1.417,96,2.639,106,2.129,109,1.261,113,1.787,114,1.394,115,2.789,116,1.719,118,1.377,121,1.299,126,2.226,127,4.411,130,1.865,133,1.901,139,2.243,141,2.848,143,2.181,144,1.367,163,1.696,165,1.356,170,1.447,180,1.29,182,2.285,186,2.944,192,1.169,196,1.523,209,1.57,210,1.554,214,3.04,215,1.605,225,1.019,229,1.663,231,2.409,237,1.988,244,1.837,249,2.378,250,1.269,252,3.021,253,1.778,268,1.417,269,5.169,271,1.214,272,2.654,273,1.473,279,3.602,281,4.422,293,1.041,299,1.253,302,3.195,307,1.523,312,3.857,317,2.373,318,1.756,323,1.21,330,1.523,333,1.579,335,2.592,340,2.036,364,1.21,368,1.554,376,1.562,380,1.587,382,1.947,407,1.453,409,1.515,420,1.249,421,1.423,447,1.362,453,1.643,479,2.172,482,4.33,495,1.372,502,2.34,503,1.501,506,3.078,520,2.521,523,2.936,543,1.857,558,1.447,582,1.351,589,1.909,592,5.297,593,1.494,595,1.891,604,2.894,610,3.317,615,1.707,619,1.53,621,1.453,637,1.494,643,1.48,644,1.685,645,1.719,646,2.369,647,1.435,650,1.756,682,1.826,685,2.402,686,4.676,687,3.492,688,1.494,689,3.647,690,2.012,691,2.181,692,2.464,693,1.796,713,1.487,726,1.653,785,2.117,796,1.719,818,1.769,822,1.417,827,3.783,862,1.743,863,1.633,903,2.622,904,1.928,905,2.3,906,2.464,907,1.947,908,1.874,909,1.57,910,1.731,911,2.3,912,2.181,913,2.062,914,2.348,915,2.464,916,2.731,917,1.48,918,2.464,919,2.464,920,4.566,921,1.782,922,1.769,923,2.731,924,2.731,925,1.891,926,2.012,927,3.492,928,2.731,929,1.756,930,2.148,931,2.731,932,2.731,933,3.29,934,1.719,935,4.566,936,4.041,937,2.731,938,1.756,939,2.036,940,5.249,941,2.464,942,2.464,943,2.464,944,2.117,945,2.464,946,2.062,947,2.464,948,2.731,949,2.088,950,1.857,951,2.914,952,2.3,953,2.464,954,2.117,955,2.117,956,2.464,957,1.441,958,2.464,959,2.464,960,2.731,961,2.181,962,2.731,963,2.3,964,2.464,965,4.566,966,4.566,967,2.731,968,2.464,969,2.731,970,2.088,971,1.841,972,1.193,973,2.3,974,1.857,975,1.719,976,2.3,977,1.605,978,1.796,979,2.257,980,1.947,981,1.928,982,3.161,983,2.3,984,2.699,985,3.773,986,2.181,987,2.012,988,2.622]],["component/154",[11,0.279,108,0.486]],["title/155-1",[887,59.878]],["name/155-1",[]],["text/155-1",[]],["component/155-1",[]],["title/155-2",[588,55.237]],["name/155-2",[]],["text/155-2",[]],["component/155-2",[]],["title/155-3",[591,59.878]],["name/155-3",[]],["text/155-3",[]],["component/155-3",[]],["title/155-4",[133,28.76,589,48.285]],["name/155-4",[]],["text/155-4",[]],["component/155-4",[]],["title/155-5",[672,50.223]],["name/155-5",[]],["text/155-5",[]],["component/155-5",[]],["title/155-6",[130,21.893,131,32.861]],["name/155-6",[]],["text/155-6",[]],["component/155-6",[]],["title/155-7",[337,35.541,498,52.828]],["name/155-7",[]],["text/155-7",[]],["component/155-7",[]],["title/155",[11,9.064,40,20.044,48,25.137,54,28.183,55,28.573]],["name/155",[40,0.346,774,0.573,989,0.777]],["text/155",[0,3.461,9,0.814,11,2.219,13,2.118,14,3.18,17,0.874,18,0.696,19,0.977,27,3.436,30,3.107,32,2.397,33,0.991,34,2.452,35,2.847,36,1.033,40,4.167,41,0.991,43,2.493,44,1.872,46,0.982,47,2.022,48,4.198,49,1.149,50,1.743,53,1.166,54,4.082,55,4.478,60,1.367,67,1.491,69,4.028,71,2.857,73,1.102,77,2.355,81,1.578,84,1.044,93,1.011,102,0.964,105,1.573,106,1.476,109,1.969,111,1.062,112,1.175,113,3.75,117,1.056,118,0.901,119,1.995,121,1.506,126,2.08,127,1.591,129,1.301,130,2.386,131,4.558,133,1.776,135,1.371,137,1.082,139,0.878,144,1.585,148,1.629,151,4.67,157,1.491,163,1.966,164,4.394,165,0.887,169,0.996,171,1.056,178,0.78,179,1.082,180,1.496,182,2.582,183,0.691,186,1.986,191,3.795,197,1.149,199,2.932,200,1.693,202,3.184,205,0.74,206,3.727,209,1.821,210,1.802,214,0.923,216,0.884,218,2.126,231,0.943,232,2.783,237,0.778,241,1.157,249,0.931,250,1.471,251,1.044,252,2.868,253,0.696,256,1.062,265,1.579,269,3.143,272,1.038,273,0.964,279,2.43,287,2.493,288,0.865,302,1.982,305,0.792,306,1.831,310,1.304,312,2.267,315,0.838,316,4.094,317,1.72,321,2.067,323,0.792,330,0.996,331,2.819,333,1.831,335,0.787,337,1.629,340,1.902,347,2.311,351,1.894,352,1.941,354,1.975,356,1.311,363,1.757,364,2.616,370,1.027,371,1.616,374,3.025,392,1.567,394,0.964,407,3.141,420,1.448,421,0.931,423,1.941,444,2.521,447,2.573,448,1.117,449,1.062,457,1.185,469,3.528,472,1.766,474,2.333,476,4.014,479,3.106,489,2.688,495,4.709,496,3.431,497,1.149,501,1.774,502,1.623,518,1.316,520,0.987,523,4.198,524,1.237,542,1.175,549,1.427,553,2.258,562,3.068,588,1.175,589,3.607,591,4.209,592,2.953,593,1.732,594,1.385,595,2.193,596,1.954,597,1.274,598,1.966,599,2.722,600,2.235,601,2.617,603,1.006,604,3.27,605,1.427,606,2.391,609,1.185,610,0.862,611,2.135,613,1.261,614,1.505,616,2.391,617,1.027,621,0.951,623,1.643,624,2.521,625,1.274,627,1.022,628,1.505,629,1.102,630,1.125,631,1.102,632,1.204,633,3.823,634,1.102,643,0.968,646,0.927,656,1.636,658,2.805,668,1.774,672,5.316,677,3.592,678,1.505,690,1.316,722,1.075,743,1.175,752,1.166,753,0.964,759,0.833,794,2.135,796,1.125,798,0.947,806,1.194,816,1.033,822,0.927,864,4.542,868,1.316,871,1.109,901,1.204,917,1.716,974,1.215,990,2.53,991,1.274,992,1.612,993,1.427,994,1.505,995,1.993,996,3.573,997,1.993,998,2.785,999,3.355,1000,1.237,1001,1.612,1002,1.366,1003,1.261,1004,1.117,1005,1.505,1006,1.612,1007,2.857,1008,2.173,1009,1.237,1010,1.166,1011,2.083,1012,1.405,1013,2.857,1014,1.787,1015,1.505,1016,2.857,1017,1.612,1018,3.167,1019,1.787,1020,1.612,1021,3.848,1022,1.612,1023,1.612,1024,1.427,1025,1.787,1026,2.422,1027,1.612,1028,1.038,1029,1.787,1030,1.14,1031,1.476,1032,1.505,1033,1.505,1034,1.427,6098,1.612,6099,1.612,6100,1.571]],["component/155",[11,0.279,108,0.486]],["title/156-1",[887,59.878]],["name/156-1",[]],["text/156-1",[]],["component/156-1",[]],["title/156-2",[588,55.237]],["name/156-2",[]],["text/156-2",[]],["component/156-2",[]],["title/156-3",[81,31.061]],["name/156-3",[]],["text/156-3",[]],["component/156-3",[]],["title/156-4",[113,27.038,479,32.861]],["name/156-4",[]],["text/156-4",[]],["component/156-4",[]],["title/156-5",[113,27.038,164,31.683]],["name/156-5",[]],["text/156-5",[]],["component/156-5",[]],["title/156-6",[81,25.551,150,46.568]],["name/156-6",[]],["text/156-6",[]],["component/156-6",[]],["title/156-7",[479,32.861,1035,38.326]],["name/156-7",[]],["text/156-7",[]],["component/156-7",[]],["title/156-8",[604,53.222]],["name/156-8",[]],["text/156-8",[]],["component/156-8",[]],["title/156-9",[904,59.275]],["name/156-9",[]],["text/156-9",[]],["component/156-9",[]],["title/156-10",[688,37.78,1036,39.1]],["name/156-10",[]],["text/156-10",[]],["component/156-10",[]],["title/156-11",[121,32.861,186,26.583]],["name/156-11",[]],["text/156-11",[]],["component/156-11",[]],["title/156-12",[142,33.442,702,37.431]],["name/156-12",[]],["text/156-12",[]],["component/156-12",[]],["title/156-13",[315,39.409]],["name/156-13",[]],["text/156-13",[]],["component/156-13",[]],["title/156-14",[469,29.4,509,49.256]],["name/156-14",[]],["text/156-14",[]],["component/156-14",[]],["title/156-15",[337,35.541,498,52.828]],["name/156-15",[]],["text/156-15",[]],["component/156-15",[]],["title/156",[11,11.796,40,26.084,48,32.712]],["name/156",[40,0.5,774,0.829]],["text/156",[0,2.082,4,2.008,7,1.384,8,0.932,9,0.54,11,1.957,13,0.589,14,0.533,15,0.603,18,2.314,19,0.648,22,0.713,23,0.947,24,1.596,25,1.499,26,0.625,27,2.852,32,2.76,33,0.658,34,1.747,35,1.822,36,0.685,37,0.598,40,2.821,41,0.658,43,2.207,46,0.651,48,2.105,50,0.893,54,0.741,55,1.926,57,1.576,59,0.731,60,2.37,61,1.448,62,0.799,65,1.061,67,2.081,68,1.532,71,1.788,73,0.731,77,1.013,78,0.639,81,1.397,84,0.693,85,0.998,88,0.768,89,1.348,92,0.615,97,0.689,99,0.648,100,0.654,101,0.648,102,0.639,103,0.607,105,0.589,106,0.553,109,0.547,112,0.78,113,3.604,114,0.605,115,4.043,119,0.554,121,2.103,126,2.155,127,1.897,128,2.135,130,1.581,133,0.909,135,0.513,141,2.658,142,1.058,144,1.093,148,1.124,151,1.596,157,1.029,164,2.725,165,1.085,170,1.158,171,1.291,172,0.628,173,1.058,175,1.526,176,4.003,177,0.671,180,1.032,182,3.358,183,2.297,185,0.488,186,4.07,188,0.658,190,0.612,192,2.135,200,1.168,209,0.681,213,1.513,218,1.515,220,2.428,221,0.574,222,0.845,225,1.862,229,0.722,232,1.178,242,0.661,243,0.553,244,2.39,249,4.225,250,1.412,252,1.942,253,0.462,256,0.705,257,0.813,265,0.591,269,5.152,271,3.265,272,2.195,273,0.639,279,1.431,281,2.883,286,1.173,288,1.058,293,2.093,299,1.002,302,2.551,305,0.525,306,1.263,307,2.105,310,0.488,312,2.412,313,0.792,315,2.341,317,0.478,318,1.404,320,0.992,321,1.426,322,0.813,323,0.968,324,0.774,330,1.694,331,0.512,333,1.263,335,0.522,337,1.124,340,0.529,341,1.106,352,0.726,354,2.047,360,0.62,361,0.61,363,0.658,364,0.525,369,0.757,371,1.115,374,0.607,376,0.678,379,0.762,384,0.645,393,0.542,394,1.178,406,0.582,407,1.163,420,1.726,421,1.583,424,1.874,446,3.152,447,1.883,448,0.741,453,2.272,458,1.089,469,0.93,470,2.377,472,0.661,479,2.826,482,0.671,483,1.57,489,2.303,495,2.506,497,0.762,501,0.664,502,1.557,503,1.2,505,1.437,507,1.206,509,1.558,510,0.947,515,2.693,520,0.654,523,1.953,540,0.713,541,2.075,543,0.806,551,1.953,558,0.628,577,0.895,582,1.503,591,2.166,593,1.662,599,1.939,604,4.463,606,0.895,610,1.466,611,1.093,619,1.224,621,0.631,624,0.701,627,0.678,629,0.731,634,0.731,640,0.906,643,0.642,646,1.133,647,1.148,650,1.404,651,0.726,656,0.612,668,1.224,671,0.799,681,0.845,686,4.314,688,2.065,689,4.386,690,2.239,702,1.646,712,0.845,726,1.322,748,0.828,752,0.774,759,1.76,773,0.661,785,0.919,786,1.67,796,0.746,800,1.404,818,0.768,822,1.576,823,0.873,839,1.069,862,2.822,868,0.873,869,1.366,879,0.746,880,0.845,904,2.145,909,1.256,918,2.741,925,0.821,926,1.61,927,0.906,929,0.762,933,4.281,934,3.139,936,5.013,939,2.265,940,4.076,941,1.069,942,1.069,943,1.069,944,0.919,945,1.971,946,0.895,947,1.069,949,0.906,950,1.485,951,1.394,952,0.998,953,1.971,954,1.694,955,0.919,956,1.069,957,1.153,958,1.069,959,1.069,961,1.745,963,0.998,964,1.069,968,1.069,971,0.799,972,1.327,973,1.84,974,0.806,976,0.998,981,1.542,982,2.104,996,0.821,1007,1.971,1011,1.437,1024,2.427,1031,0.979,1032,0.998,1033,0.998,1034,0.947,1035,1.686,1036,2.137,1037,0.828,1038,1.185,1039,0.813,1040,1.069,1041,1.069,1043,1.069,1044,1.069,1045,1.671,1046,2.693,1047,1.971,1048,2.184,1049,1.185,1050,2.184,1051,2.184,1052,1.185,1053,1.185,1054,1.971,1055,1.745,1056,0.806,1057,3.988,1058,0.932,1059,4.42,1060,4.5,1061,0.947,1062,1.694,1063,2.184,1064,0.845,1065,1.61,1066,1.185,1067,0.979,1068,1.185,1069,1.069,1070,1.185,1071,0.979,1072,0.947,1073,1.185,1074,1.971,1075,1.46,1076,1.185,1077,1.774,1078,1.84,1081,1.185,1082,1.185,1083,1.185,1084,2.239,1085,1.185,1086,0.605,1087,1.774,1088,1.101,1089,0.821,1090,1.84,1091,1.069,1092,1.069,1093,1.069,1094,1.042,1095,0.998,1096,1.971,1097,1.971,1098,3.407,1099,1.069,1100,1.185,1101,1.185,1102,1.299,1103,1.069,1104,1.84,1105,3.038,1106,3.038,1107,2.955,1108,0.731,1109,1.485,1110,0.962,1111,0.998,1112,1.27,1113,1.185,1114,1.185,1115,1.185,1116,0.884,1117,1.185,1118,1.185,1119,0.863,1120,1.185,1121,0.947,1122,1.069,1123,3.988,1124,1.185,1127,1.185,1128,3.006,1129,0.726,1130,0.845,1131,0.774,1132,0.998,1133,1.069,1134,0.685,1135,1.839,1136,0.906,1137,0.895,1138,1.185,1139,1.069,1140,1.185,1142,0.813,1143,1.671,1144,0.962,1145,0.919,1146,1.185,1147,2.184,1148,3.776,1150,1.069,1151,1.185,1152,1.185,1153,1.185,1154,0.799,1155,0.979,1156,0.947,1157,1.042,1158,1.185,1159,0.947,1160,1.185,1161,1.971,1162,3.038,1164,1.185,1165,0.651,1166,1.069,1167,0.821,1168,1.069,1169,1.185,1170,1.745,1171,1.069,1172,0.78,1173,0.806,1174,1.069,1175,1.069,6102,2.301,6103,1.248,6420,1.344]],["component/156",[11,0.279,108,0.486]],["title/157-1",[887,59.878]],["name/157-1",[]],["text/157-1",[]],["component/157-1",[]],["title/157-2",[588,55.237]],["name/157-2",[]],["text/157-2",[]],["component/157-2",[]],["title/157-3",[591,59.878]],["name/157-3",[]],["text/157-3",[]],["component/157-3",[]],["title/157-4",[133,28.76,589,48.285]],["name/157-4",[]],["text/157-4",[]],["component/157-4",[]],["title/157-5",[672,50.223]],["name/157-5",[]],["text/157-5",[]],["component/157-5",[]],["title/157-6",[18,32.708]],["name/157-6",[]],["text/157-6",[]],["component/157-6",[]],["title/157-7",[11,11.796,130,18.595,131,27.91]],["name/157-7",[]],["text/157-7",[]],["component/157-7",[]],["title/157-8",[672,50.223]],["name/157-8",[]],["text/157-8",[]],["component/157-8",[]],["title/157-9",[18,32.708]],["name/157-9",[]],["text/157-9",[]],["component/157-9",[]],["title/157-10",[337,35.541,498,52.828]],["name/157-10",[]],["text/157-10",[]],["component/157-10",[]],["title/157",[11,11.796,39,33.38,48,32.712]],["name/157",[774,1.5]],["text/157",[0,4.053,5,1.01,9,1.099,11,2.326,13,2.669,14,2.651,17,1.181,18,2.903,19,0.722,23,1.055,25,0.906,27,2.992,30,2.426,32,1.547,33,0.733,34,1.915,35,3.063,39,1.895,40,1.073,41,0.733,43,2.403,44,1.426,45,1.125,46,2.63,47,1.949,48,4.862,49,1.551,50,1.956,53,1.575,55,0.837,57,0.551,60,0.57,61,0.876,69,4.168,71,3.747,72,0.612,73,0.815,76,0.666,77,2.585,78,0.712,81,1.988,84,0.772,92,0.685,93,1.365,97,1.402,99,1.319,100,1.332,101,1.319,102,2.218,103,1.236,105,1.198,106,1.125,109,1.898,111,1.434,113,3.851,114,1.231,117,0.781,118,0.666,119,1.128,121,0.628,126,2.621,127,0.664,129,2.608,130,2.624,131,5.024,133,1.386,135,2.072,139,0.649,141,0.639,144,2.396,148,2.463,151,4.217,157,1.936,163,0.82,164,3.557,165,1.198,169,1.345,171,1.968,173,1.168,178,1.054,179,0.799,180,1.14,182,2.058,186,1.842,187,0.81,191,2.141,196,0.736,197,1.551,199,3.538,200,0.706,202,2.582,205,0.999,206,4.091,208,1.54,209,1.915,210,0.751,214,1.246,216,1.194,218,2.387,225,0.493,229,1.469,231,0.697,232,2.582,249,0.688,250,1.121,251,1.41,252,3.129,256,0.785,265,1.203,268,0.685,269,2.65,272,0.768,273,0.712,279,2.774,286,0.709,287,1.946,288,0.639,302,2.224,303,0.685,306,3.107,309,0.712,310,1.372,312,2.588,316,4.738,317,1.343,321,2.173,323,0.585,330,1.345,331,2.741,333,1.395,335,0.582,337,1.713,340,1.485,347,1.804,351,0.79,352,2.041,353,0.626,354,3.591,356,0.547,360,1.742,363,2.282,364,2.814,366,0.837,367,1.41,368,0.751,370,1.915,371,1.231,374,4.114,392,1.194,394,0.712,406,0.649,407,1.772,420,1.88,421,0.688,423,2.521,444,2.431,447,3.165,448,1.508,449,1.434,452,2.351,454,1.551,457,0.876,461,0.843,469,2.702,472,1.857,473,0.942,476,2.796,479,3.546,489,2.493,495,4.735,496,0.768,497,0.849,501,1.352,502,0.677,503,1.326,507,1.332,518,2.454,520,0.729,522,3.235,523,4.344,524,1.67,526,1.01,542,1.587,548,0.962,549,1.927,552,1.927,553,1.72,562,0.785,588,1.587,589,2.874,591,3.832,592,1.67,593,1.319,594,1.87,595,1.67,596,2.537,597,0.942,598,1.498,599,2.625,600,1.703,601,1.993,603,1.359,604,2.606,605,1.055,606,3.613,608,1.112,609,1.6,610,1.164,611,2.396,612,1.72,613,1.703,614,2.032,615,0.826,616,3.104,617,1.387,618,1.135,619,0.74,620,1.01,621,1.284,622,1.686,623,2.133,624,2.431,625,3.832,626,2.032,627,1.38,628,2.032,629,1.488,630,1.518,631,1.488,632,1.626,633,3.1,634,1.488,638,0.952,643,0.716,658,1.587,668,1.352,671,0.89,672,4.638,677,2.032,678,1.112,681,0.942,743,0.869,759,0.616,794,0.89,796,0.831,798,0.7,809,1.055,818,0.855,822,0.685,868,1.777,879,0.831,901,0.89,917,1.307,929,0.849,974,0.898,990,1.927,991,0.942,992,1.191,993,1.055,994,1.112,995,1.518,996,3.314,997,1.518,998,2.122,999,1.898,1000,0.914,1001,1.191,1002,1.01,1003,0.932,1004,0.826,1005,1.112,1006,3.004,1008,0.906,1009,0.914,1010,0.862,1011,1.587,1015,1.112,1016,1.191,1017,1.191,1021,3.004,1023,1.191,1024,1.055,1026,1.845,1027,1.191,1028,0.768,1031,1.091,1032,1.112,1033,1.112,1034,1.055,1107,0.883,1172,0.869,1173,0.898,1174,1.191,1175,1.191,1525,1.112,2039,0.876,2247,0.952,2418,1.039,2419,1.321,2420,1.321,2421,1.321,2422,1.072,6098,1.191,6099,1.191,6100,1.162]],["component/157",[11,0.279,108,0.486]],["title/158-1",[113,27.038,497,44.413]],["name/158-1",[]],["text/158-1",[]],["component/158-1",[]],["title/158-2",[6,46.568,43,40.373]],["name/158-2",[]],["text/158-2",[]],["component/158-2",[]],["title/158-3",[131,24.255,148,26.233,331,22.01,798,27.017]],["name/158-3",[]],["text/158-3",[]],["component/158-3",[]],["title/158-4",[130,18.595,148,30.186,1176,52.928]],["name/158-4",[]],["text/158-4",[]],["component/158-4",[]],["title/158-5",[132,26.405,240,32.712,1177,46.864]],["name/158-5",[]],["text/158-5",[]],["component/158-5",[]],["title/158-6",[244,23.606,759,27.351,1178,52.928]],["name/158-6",[]],["text/158-6",[]],["component/158-6",[]],["title/158-7",[244,23.606,759,27.351,936,34.483]],["name/158-7",[]],["text/158-7",[]],["component/158-7",[]],["title/158-8",[917,45.503]],["name/158-8",[]],["text/158-8",[]],["component/158-8",[]],["title/158-9",[17,24.953,305,22.6,535,32.782,562,30.315]],["name/158-9",[]],["text/158-9",[]],["component/158-9",[]],["title/158-10",[126,28.608,130,18.595,221,28.403]],["name/158-10",[]],["text/158-10",[]],["component/158-10",[]],["title/158-11",[130,16.16,237,22.202,258,38.994,359,28.289]],["name/158-11",[]],["text/158-11",[]],["component/158-11",[]],["title/158-12",[17,28.713,130,18.595,562,34.882]],["name/158-12",[]],["text/158-12",[]],["component/158-12",[]],["title/158-13",[17,24.953,204,32.091,227,25.326,305,22.6]],["name/158-13",[]],["text/158-13",[]],["component/158-13",[]],["title/158-14",[17,22.064,96,26.062,497,28.987,562,26.805,577,34.033]],["name/158-14",[]],["text/158-14",[]],["component/158-14",[]],["title/158-15",[17,28.713,305,26.006,1179,46.864]],["name/158-15",[]],["text/158-15",[]],["component/158-15",[]],["title/158-16",[917,45.503]],["name/158-16",[]],["text/158-16",[]],["component/158-16",[]],["title/158-17",[130,18.595,180,27.72,864,37.722]],["name/158-17",[]],["text/158-17",[]],["component/158-17",[]],["title/158-18",[305,30.619,1180,57.081]],["name/158-18",[]],["text/158-18",[]],["component/158-18",[]],["title/158-19",[11,11.796,185,24.166,1102,34.882]],["name/158-19",[]],["text/158-19",[]],["component/158-19",[]],["title/158-20",[243,23.769,1181,62.853,1182,38.015]],["name/158-20",[]],["text/158-20",[]],["component/158-20",[]],["title/158-21",[243,27.351,496,34.101,864,37.722]],["name/158-21",[]],["text/158-21",[]],["component/158-21",[]],["title/158-22",[187,51.473]],["name/158-22",[]],["text/158-22",[]],["component/158-22",[]],["title/158-23",[356,21.114,535,32.782,562,30.315,1183,40.727]],["name/158-23",[]],["text/158-23",[]],["component/158-23",[]],["title/158-24",[917,45.503]],["name/158-24",[]],["text/158-24",[]],["component/158-24",[]],["title/158-25",[293,19.435,305,22.6,562,30.315,1184,45.997]],["name/158-25",[]],["text/158-25",[]],["component/158-25",[]],["title/158-26",[293,22.364,562,34.882,1116,43.743]],["name/158-26",[]],["text/158-26",[]],["component/158-26",[]],["title/158-27",[293,26.331,393,31.582]],["name/158-27",[]],["text/158-27",[]],["component/158-27",[]],["title/158-28",[81,18.859,305,22.6,310,21.002,1185,45.997]],["name/158-28",[]],["text/158-28",[]],["component/158-28",[]],["title/158-29",[225,21.9,293,22.364,305,26.006]],["name/158-29",[]],["text/158-29",[]],["component/158-29",[]],["title/158-30",[243,21.017,293,17.185,562,40.493,1165,24.774]],["name/158-30",[]],["text/158-30",[]],["component/158-30",[]],["title/158-31",[917,45.503]],["name/158-31",[]],["text/158-31",[]],["component/158-31",[]],["title/158-32",[225,25.422,293,17.185,319,31.216,1112,26.204]],["name/158-32",[]],["text/158-32",[]],["component/158-32",[]],["title/158-33",[225,19.032,293,19.435,1112,29.636,1186,29.316]],["name/158-33",[]],["text/158-33",[]],["component/158-33",[]],["title/158-34",[225,19.032,293,19.435,1112,29.636,1187,34.981]],["name/158-34",[]],["text/158-34",[]],["component/158-34",[]],["title/158-35",[130,18.595,225,21.9,319,40.623]],["name/158-35",[]],["text/158-35",[]],["component/158-35",[]],["title/158-36",[225,13.664,293,13.954,305,16.226,551,23.536,1186,21.048,1188,24.893,1189,30.829]],["name/158-36",[]],["text/158-36",[]],["component/158-36",[]],["title/158-37",[67,27.626,225,21.9,319,40.623]],["name/158-37",[]],["text/158-37",[]],["component/158-37",[]],["title/158-38",[917,45.503]],["name/158-38",[]],["text/158-38",[]],["component/158-38",[]],["title/158-39",[293,22.364,305,26.006,1179,46.864]],["name/158-39",[]],["text/158-39",[]],["component/158-39",[]],["title/158-40",[917,45.503]],["name/158-40",[]],["text/158-40",[]],["component/158-40",[]],["title/158-41",[96,33.915,535,37.722,562,34.882]],["name/158-41",[]],["text/158-41",[]],["component/158-41",[]],["title/158-42",[130,16.16,237,22.202,359,28.289,535,32.782]],["name/158-42",[]],["text/158-42",[]],["component/158-42",[]],["title/158-43",[27,12.874,227,18.183,237,15.94,293,13.954,359,20.311,562,34.465]],["name/158-43",[]],["text/158-43",[]],["component/158-43",[]],["title/158-44",[17,24.953,96,29.474,535,32.782,562,30.315]],["name/158-44",[]],["text/158-44",[]],["component/158-44",[]],["title/158-45",[917,45.503]],["name/158-45",[]],["text/158-45",[]],["component/158-45",[]],["title/158-46",[469,29.4,509,49.256]],["name/158-46",[]],["text/158-46",[]],["component/158-46",[]],["title/158",[11,9.064,18,17.56,43,26.35,45,21.017,53,29.425]],["name/158",[43,0.454,45,0.362,53,0.507]],["text/158",[0,0.902,4,0.104,8,0.098,9,0.205,10,0.186,11,1.57,14,1.386,15,0.173,17,3.968,18,1.62,19,0.186,21,0.723,22,0.069,24,0.404,26,0.061,27,2.807,30,0.407,32,0.309,35,1.485,36,0.197,37,0.591,38,0.462,40,0.051,41,0.25,42,0.158,43,2.834,44,0.806,45,0.159,46,0.187,47,0.778,48,0.19,49,0.147,50,1.37,53,0.149,54,0.415,57,0.233,60,0.376,61,0.076,62,0.229,63,0.062,65,0.926,66,0.175,67,0.362,68,0.335,69,0.071,70,0.388,71,0.907,72,0.106,73,0.071,75,1.024,76,0.873,77,2.201,78,0.184,80,0.354,81,1.83,84,0.852,89,0.141,90,0.336,92,0.557,93,0.316,95,0.24,96,1.102,97,0.262,99,0.246,100,0.425,101,0.246,102,0.525,103,0.6,105,0.86,106,1.194,109,2.097,111,0.268,112,0.076,113,3.149,114,1.017,115,0.778,116,1.089,117,0.692,118,0.115,119,0.502,120,0.181,121,0.265,122,0.129,123,0.15,124,0.084,125,0.406,126,2.657,127,0.732,128,2.096,129,1.562,130,2.446,131,0.603,132,0.897,133,2.487,134,0.75,135,1.109,136,0.855,137,0.138,138,0.121,139,0.112,140,0.572,141,1.125,142,0.706,144,0.058,148,1.473,157,0.263,158,0.079,159,0.397,161,0.31,163,0.072,164,0.156,165,0.114,169,0.064,170,1.01,171,0.201,172,0.569,173,0.165,176,1.38,178,0.244,179,1.948,180,1.455,181,0.209,182,0.954,183,1.02,184,0.611,185,1.297,186,0.799,187,0.777,188,1.588,190,0.397,191,1.389,192,1.52,193,0.173,194,0.061,196,0.19,197,1.055,198,0.433,199,2.203,200,2,201,0.855,202,1.984,203,0.251,204,3.456,205,1.575,206,2.532,208,0.809,210,0.722,212,0.26,213,0.08,214,1.116,215,0.134,216,0.381,217,1.535,218,0.863,221,1.277,222,0.082,224,0.088,225,3.57,226,0.714,227,2.149,229,0.531,230,0.071,231,0.061,232,1.028,234,0.598,235,0.26,236,0.685,237,1.518,238,1.054,240,0.486,241,1.453,242,0.19,243,1.773,244,4.033,245,0.77,246,0.296,249,1.126,250,0.452,251,0.067,252,2.316,253,0.674,257,0.528,258,2.861,265,0.727,268,0.345,269,5.12,271,3.472,272,1.108,273,0.358,275,0.193,276,0.214,279,1.672,281,0.842,282,0.158,285,0.67,286,0.523,287,0.51,288,0.422,289,0.911,292,0.314,293,3.349,295,0.085,297,0.763,298,1.83,299,3.155,300,0.489,301,0.87,302,0.309,303,0.233,304,0.531,305,1.893,306,0.949,307,2.785,308,0.274,309,1.166,310,1.463,311,0.614,312,1.321,313,0.227,314,0.47,315,0.312,316,3.23,317,2.47,319,2.547,321,1.244,322,2.014,323,0.921,324,0.294,325,0.491,326,0.379,327,0.204,329,0.079,330,2.412,331,0.86,332,0.062,333,0.62,335,2.115,337,1.278,339,0.071,340,1.75,341,3.242,342,0.244,343,0.082,345,0.332,347,0.417,348,1.453,350,0.506,351,3.359,352,0.658,353,0.509,354,1.458,356,2.326,357,0.154,358,0.156,359,2.076,360,0.762,361,0.175,363,1.898,364,0.845,366,0.864,367,0.388,368,0.194,369,0.074,370,0.673,371,0.339,373,0.18,374,1.232,375,0.878,376,0.38,378,1.714,380,0.386,381,0.092,382,0.835,383,0.065,384,0.584,389,0.531,390,2.345,392,1.789,393,3.159,394,0.981,401,0.169,406,0.274,407,0.297,409,0.369,414,0.484,420,0.791,421,0.559,423,0.209,424,0.956,426,0.332,429,0.47,431,0.193,439,0.271,441,0.272,444,0.068,446,0.082,447,0.435,448,0.415,450,0.134,452,0.615,453,0.138,455,0.075,457,0.51,458,0.224,459,0.193,461,0.491,467,0.46,468,0.272,469,0.698,473,0.082,476,0.078,479,0.162,484,0.248,489,0.507,495,0.226,496,1.057,497,4.759,501,0.919,502,2.041,503,0.063,505,0.224,507,0.647,509,0.474,510,0.183,511,0.668,514,0.321,515,0.321,519,0.569,520,0.481,524,0.08,526,0.088,527,0.148,528,0.318,529,0.071,532,0.287,533,0.07,535,4.932,536,0.359,538,0.245,540,1.447,541,0.697,542,0.574,543,0.078,546,0.344,547,0.904,550,0.345,551,1.597,552,0.092,553,0.082,556,0.092,557,0.167,558,0.238,560,0.26,561,0.584,562,5.451,563,0.878,564,0.104,565,0.104,566,0.104,567,0.104,568,0.104,569,4.229,570,0.104,571,3.915,572,4.039,573,1.943,574,0.406,575,0.406,576,1.17,577,2.532,578,0.307,579,1.398,580,1.144,581,0.787,582,3.713,583,0.104,584,0.379,585,0.307,587,1.089,593,0.125,596,0.071,598,1.019,599,0.217,603,0.374,606,0.173,608,0.287,610,0.056,611,0.682,612,0.163,615,0.072,617,0.066,621,1.015,622,0.315,623,0.119,624,1.982,625,1.715,627,0.131,629,0.278,630,0.073,631,0.071,634,0.071,637,0.477,639,0.157,641,0.452,642,0.097,643,0.244,644,0.21,646,0.119,647,0.061,649,0.129,650,0.074,654,0.489,660,0.193,661,0.088,667,0.175,668,0.128,670,0.091,672,2.237,673,0.087,674,0.069,683,0.082,688,0.063,690,0.085,693,0.076,696,0.141,697,0.18,698,0.141,702,0.302,703,0.534,710,0.095,711,0.088,718,0.911,722,0.705,726,0.465,739,0.936,741,0.163,743,0.076,748,0.16,751,0.074,752,0.765,753,0.301,756,0.069,759,1.594,764,0.673,767,0.217,768,0.175,771,0.477,772,0.62,773,0.128,776,0.635,786,0.126,788,1.567,789,0.085,791,0.173,794,0.229,798,0.462,800,1.17,803,0.092,806,0.153,816,0.677,817,0.104,822,1.034,826,0.495,835,0.634,837,0.359,854,0.104,856,0.418,857,0.072,862,0.287,863,0.758,864,3.302,865,0.097,869,0.545,871,0.541,874,0.206,879,0.214,880,0.243,881,0.085,887,0.321,901,0.154,902,0.193,906,0.104,907,0.321,908,0.079,909,0.132,917,0.527,936,0.801,938,0.074,949,0.088,951,0.989,957,0.294,972,0.795,974,0.306,975,0.917,977,0.068,978,0.15,980,0.082,991,0.398,993,0.092,995,0.351,997,0.144,1003,0.081,1008,0.309,1010,0.075,1011,0.076,1012,0.18,1013,1.23,1015,1.068,1028,0.624,1030,0.287,1035,0.756,1036,0.98,1037,0.16,1039,0.309,1046,0.474,1057,0.104,1065,2.32,1074,0.206,1075,0.077,1084,0.085,1102,0.754,1107,0.153,1108,0.071,1109,0.078,1112,1.949,1116,0.416,1129,0.14,1130,0.082,1135,0.07,1136,0.97,1137,0.173,1142,0.233,1143,0.588,1145,0.089,1165,0.749,1167,0.158,1170,0.092,1171,0.104,1172,0.506,1176,0.206,1177,0.272,1178,0.787,1179,1.238,1180,0.968,1181,3.254,1182,1.793,1183,0.857,1184,0.206,1185,1.949,1186,0.56,1187,0.456,1188,0.523,1189,3.098,1190,0.115,1191,0.085,1192,0.272,1193,0.206,1194,0.531,1195,0.676,1196,0.175,1197,0.307,1198,0.251,1199,0.104,1200,0.115,1201,0.115,1202,0.495,1203,0.104,1204,0.456,1205,0.092,1206,0.115,1207,0.115,1208,0.115,1209,0.307,1210,0.115,1211,0.107,1212,0.24,1213,0.115,1214,0.406,1215,0.248,1216,0.726,1217,0.336,1218,0.206,1219,0.115,1220,0.406,1221,0.307,1222,0.495,1223,0.45,1224,0.231,1225,0.115,1226,0.115,1227,0.34,1228,0.229,1229,0.115,1230,0.45,1231,0.229,1232,0.229,1233,0.229,1234,1.136,1235,0.531,1236,0.229,1237,0.229,1238,0.229,1239,0.115,1240,0.115,1241,0.193,1242,0.229,1243,0.206,1244,0.104,1245,0.111,1246,0.186,1247,0.115,1248,0.115,1249,2.78,1250,0.558,1251,0.396,1252,0.283,1253,0.351,1254,0.08,1255,0.115,1256,0.206,1257,0.34,1258,0.115,1259,0.34,1260,0.115,1261,0.115,1262,0.115,1263,0.115,1264,0.115,1265,0.229,1266,0.558,1267,0.34,1268,1.073,1269,0.34,1270,0.097,1271,0.101,1272,0.558,1273,0.094,1274,0.45,1275,0.34,1276,0.115,1277,0.446,1278,0.206,1279,0.229,1280,0.229,1281,0.229,1282,0.229,1283,0.229,1284,0.229,1285,0.229,1286,0.115,1287,0.115,1288,0.115,1289,0.115,1290,0.115,1291,0.229,1292,0.229,1293,0.115,1294,0.115,1295,0.115,1296,0.115,1297,0.115,1298,2.638,1299,0.229,1300,0.229,1301,0.229,1302,0.229,1303,0.229,1304,0.973,1305,0.229,1306,1.641,1307,0.115,1308,0.115,1309,0.115,1310,0.115,1311,0.115,1312,0.115,1313,0.115,1314,0.115,1315,0.973,1316,0.115,1317,0.115,1318,0.115,1319,0.115,1320,0.115,1321,0.115,1322,0.115,1323,0.092,1324,0.115,1325,0.085,1326,0.753,1327,0.315,1328,0.115,1329,0.115,1330,0.206,1331,0.664,1332,0.229,1333,0.229,1334,0.115,1335,0.406,1336,0.115,1337,0.115,1338,0.306,1339,0.34,1340,0.146,1341,0.34,1342,0.34,1343,0.076,1344,0.169,1345,0.45,1346,0.115,1347,0.115,1348,0.115,1349,0.115,1350,0.115,1351,0.104,1352,0.966,1353,0.356,1354,0.421,1355,0.421,1356,0.115,1357,0.097,1358,0.229,1359,0.115,1360,0.115,1361,0.115,1362,0.115,1363,0.206,1364,0.354,1365,0.115,1366,0.444,1367,0.321,1368,0.272,1369,0.34,1370,0.34,1371,0.34,1372,0.34,1373,0.34,1374,0.34,1375,0.206,1376,0.45,1377,0.229,1378,0.229,1379,0.664,1380,1.753,1381,0.229,1382,0.45,1383,0.45,1384,0.45,1385,0.45,1386,0.45,1387,0.558,1388,0.229,1389,0.45,1390,0.895,1391,0.688,1392,0.206,1393,0.097,1394,0.161,1395,0.104,1396,0.115,1397,0.088,1398,0.104,1399,0.47,1400,0.104,1401,0.115,1402,0.171,1403,0.115,1404,0.872,1405,0.183,1406,0.45,1407,0.34,1408,0.229,1409,1.907,1410,0.34,1411,1.346,1412,0.558,1413,0.696,1414,0.34,1415,0.26,1416,0.229,1417,1.013,1418,0.229,1419,0.45,1420,0.157,1421,0.359,1422,0.359,1423,0.359,1424,0.503,1425,1.363,1426,0.115,1427,0.115,1428,0.115,1429,0.115,1430,0.115,1431,0.34,1432,0.115,1433,0.115,1434,0.085,1435,0.084,1436,0.115,1437,0.104,1438,0.115,1439,0.115,1440,0.115,1441,0.115,1442,0.115,1443,0.115,1444,0.558,1445,0.229,1446,1.185,1447,0.34,1448,0.34,1449,0.45,1450,0.213,1451,0.503,1452,0.115,1453,0.115,1454,0.115,1455,0.115,1456,0.115,1457,0.115,1458,0.229,1459,0.229,1460,0.104,1461,0.115,1462,0.115,1463,0.115,1464,0.115,1465,0.115,1466,0.115,1467,0.229,1468,0.34,1469,0.115,1470,0.183,1471,1.033,1472,0.229,1473,0.229,1474,0.104,1475,0.229,1476,0.229,1477,0.229,1478,0.229,1479,0.229,1480,0.229,1481,0.45,1482,0.229,1483,0.115,1484,0.115,1485,0.115,1486,0.115,1487,0.115,1488,1.731,1489,0.115,1490,0.115,1491,0.115,1492,0.769,1493,0.332,1494,0.077,1495,0.085,1496,0.229,1497,0.115,1498,0.115,1499,0.229,1500,0.097,1501,0.115,1502,0.34,1503,0.095,1504,0.34,1505,0.085,1506,0.229,1507,0.229,1508,0.229,1509,0.115,1510,0.115,1511,0.446,1512,0.359,1513,0.104,1514,0.379,1515,0.45,1516,0.097,1517,0.115,1518,0.115,1519,0.287,1520,0.231,1521,0.379,1522,0.161,1523,0.101,1524,0.115,1525,0.193,1526,0.115,1527,0.115,1528,0.088,1529,0.115,1530,0.115,1531,0.115,1532,0.115,1533,0.229,1534,0.281,1535,0.115,1536,0.34,1537,0.104,1538,0.115,1539,0.104,1540,0.115,1541,0.115,1542,0.115,1543,0.115,1544,0.115,1545,0.115,1546,0.115,1547,0.104,1548,0.115,1549,0.229,1550,0.229,1551,0.115,1552,0.229,1553,0.115,1554,0.115,1555,0.115,1556,0.115,1557,0.115,1558,0.427,1559,0.723,1560,0.104,1561,0.115,1562,0.115,1563,0.115,1564,0.268,1565,0.115,1566,0.115,1567,0.075,1568,0.072,1569,0.387,1570,0.115,1571,0.115,1572,0.115,1573,0.115,1574,0.769,1575,1.457,1576,0.195,1577,0.34,1578,0.115,1579,0.115,1580,0.34,1581,1.457,1582,0.229,1583,0.45,1584,0.229,1585,0.115,1586,0.115,1587,0.115,1588,0.115,1589,0.115,1590,0.115,1591,0.115,1592,0.115,1593,0.115,1594,0.115,1595,0.115,1596,0.115,1597,0.34,1598,0.115,1599,0.104,1600,0.197,1601,0.769,1602,0.538,1603,0.349,1604,0.34,1605,0.307,1606,0.34,1607,0.183,1608,0.115,1609,0.299,1610,0.115,1611,0.115,1612,0.115,1613,0.074,1614,0.115,1615,0.097,1616,0.229,1617,0.229,1618,0.115,1619,0.088,1620,0.115,1621,0.115,1622,0.115,1623,0.45,1624,0.229,1625,0.229,1626,0.115,1627,0.115,1628,0.115,1629,0.115,1630,0.229,1631,0.115,1632,0.115,1633,0.115,1634,0.34,1635,0.115,1636,0.115,1637,0.115,1638,0.206,1639,0.307,1640,0.115,1641,0.115,1642,0.115,1643,0.115,1644,0.229,1645,0.19,1646,0.229,1647,0.092,1648,0.229,1649,0.078,1650,0.229,1651,0.229,1652,0.104,1653,0.558,1654,0.872,1655,1.171,1656,0.082,1657,0.45,1658,0.45,1659,0.115,1660,0.082,1661,0.115,1662,0.115,1663,0.696,1664,0.229,1665,1.457,1666,0.229,1667,0.664,1668,0.115,1669,0.229,1670,0.115,1671,0.115,1672,0.115,1673,0.115,1674,0.115,1675,0.115,1676,0.115,1677,0.115,1678,0.229,1679,0.34,1680,0.104,1681,0.558,1682,0.769,1683,0.769,1684,0.34,1685,0.115,1686,0.115,1687,0.083,1688,0.26,1689,0.115,1690,0.115,1691,0.664,1692,0.229,1693,0.206,1694,0.201,1695,0.433,1696,0.406,1697,0.091,1698,0.398,1699,0.115,1700,0.769,1701,0.309,1702,0.097,1703,0.45,1704,0.194,1705,0.145,1706,0.238,1707,0.083,1708,0.073,1709,0.379,1710,0.558,1711,0.45,1712,0.777,1713,0.245,1714,0.34,1715,0.45,1716,0.229,1717,0.115,1718,0.115,1719,0.115,1720,0.115,1721,0.115,1722,0.229,1723,0.115,1724,0.229,1725,0.229,1726,0.115,1727,0.229,1728,0.115,1729,0.115,1730,0.229,1731,1.23,1732,0.769,1733,1.641,1734,0.558,1735,0.115,1736,0.115,1737,0.115,1738,0.115,1739,0.115,1740,0.648,1741,1.561,1742,0.115,1743,0.115,1744,0.115,1745,0.115,1746,0.115,1747,0.115,1748,0.115,1749,0.229,1750,0.115,1751,0.115,1752,0.229,1753,0.115,1754,0.115,1755,0.115,1756,0.115,1757,0.115,1758,0.34,1759,0.34,1760,0.34,1761,0.34,1762,0.34,1763,0.34,1764,0.558,1765,0.229,1766,0.229,1767,0.229,1768,0.229,1769,0.229,1770,0.558,1771,0.229,1772,0.229,1773,0.229,1774,0.229,1775,0.229,1776,0.45,1777,0.115,1778,0.115,1779,0.115,1780,0.115,1781,0.115,1782,0.34,1783,0.34,1784,0.45,1785,0.115,1786,0.115,1787,0.115,1788,0.115,1789,0.115,1790,0.34,1791,0.34,1792,0.115,1793,0.416,1794,0.115,1795,0.115,1796,0.115,1797,0.115,1798,0.115,1799,0.115,1800,0.115,1801,0.115,1802,0.115,1803,0.664,1804,0.115,1805,0.34,1806,0.45,1807,0.229,1808,0.229,1809,0.229,1810,0.229,1811,0.229,1812,0.229,1813,0.34,1814,0.115,1815,0.229,1816,0.229,1817,0.229,1818,0.115,1819,0.229,1820,0.115,1821,0.115,1822,0.243,1823,0.115,1824,0.115,1825,0.115,1826,0.115,1827,0.115,1828,0.229,1829,0.115,1830,0.115,1831,0.115,1832,0.115,1833,0.115,1834,0.115,1835,0.115,1836,0.45,1837,0.307,1838,0.34,1839,0.229,1840,0.193,1841,0.115,1842,0.45,1843,0.45,1844,0.45,1845,0.34,1846,0.16,1847,0.115,1848,0.115,1849,0.115,1850,0.115,1851,0.115,1852,0.307,1853,0.115,1854,0.115,1855,0.115,1856,0.115,1857,0.115,1858,0.115,1859,0.34,1860,0.206,1861,0.229,1862,0.115,1863,0.104,1864,0.115,1865,0.115,1866,0.115,1867,0.115,1868,0.115,1869,0.115,1870,0.104,1871,0.115,1872,0.115,1873,0.115,1874,0.115,1875,0.115,1876,0.115,1877,0.558,1878,1.148,1879,0.115,1880,0.115,1881,0.115,1882,0.115,1883,0.115,1884,0.664,1885,0.34,1886,0.115,1887,0.115,1888,0.115,1889,0.229,1890,0.115,1891,0.558,1892,0.558,1893,0.229,1894,0.229,1895,0.229,1896,0.115,1897,0.115,1898,0.276,1899,0.161,1900,0.115,1901,0.154,1902,0.085,1903,0.104,1904,0.115,1905,0.115,1906,0.115,1907,0.115,1908,0.085,1909,0.115,1910,0.115,1911,0.115,1912,0.115,1913,0.115,1914,0.115,1915,0.115,1916,0.115,1917,0.115,1918,0.115,1919,0.115,1920,0.115,1921,0.115,1922,0.115,1923,0.115,1924,0.115,1925,0.115,1926,0.115,1927,0.115,1928,0.115,1929,0.104,1930,0.115,1931,0.115,1932,0.115,1933,0.115,1934,0.115,1935,0.115,1936,0.115,1937,0.115,1938,0.115,1939,0.115,1940,0.104,1941,0.115,1942,0.085,1943,0.26,1944,0.206,1945,0.694,1946,0.115,1947,0.45,1948,0.115,1949,0.115,1950,0.193,1951,0.115,1952,0.115,1953,0.115,1954,0.115,1955,0.115,1956,0.115,1957,0.115,1958,0.115,1959,0.115,1960,0.097,1961,0.115,1962,0.153,1963,0.082,1964,0.097,1965,0.092,1966,0.115,1967,0.115,1968,0.34,1969,0.115,1970,0.229,1971,0.229,1972,0.229,1973,0.229,1974,0.229,1975,0.229,1976,0.115,1977,0.104,1978,0.229,1979,0.229,1980,0.229,1981,0.229,1982,0.229,1983,0.34,1984,0.229,1985,0.115,1986,0.115,1987,0.229,1988,0.229,1989,0.229,1990,0.229,1991,0.229,1992,0.229,1993,0.115,1994,0.229,1995,0.229,1996,0.229,1997,0.229,1998,0.229,1999,0.229,2000,0.229,2001,0.229,2002,0.229,2003,0.287,2004,0.092,2005,0.251,2006,0.229,2007,0.115,2008,0.34,2009,0.104,2010,0.115,2011,0.115,2012,0.115,2013,0.115,2014,0.115,2015,0.115,2016,0.104,2017,0.115,2018,0.104,2019,0.115,2020,0.664,2021,0.45,2022,0.086,2023,0.115,2024,0.307,2025,0.34,2026,0.307,2027,0.34,2028,0.34,2029,0.115,2030,0.229,2031,0.115,2032,0.115,2033,0.115,2034,0.115,2035,0.115,2036,0.115,2037,0.115,2038,0.083,2039,0.076,2040,0.161,2041,0.115,2042,0.229,2043,0.599,2044,0.115,2045,0.664,2046,0.115,2047,0.115,2048,0.115,2049,0.229,2050,0.229,2051,0.115,2052,0.115,2053,0.229,2054,0.115,2055,0.115,2056,0.115,2057,0.169,2058,0.406,2059,0.104,2060,0.092,2061,0.206,2062,1.363,2063,0.104,2064,0.115,2065,0.115,2066,0.115,2067,0.115,2068,0.115,2069,0.115,2070,0.229,2071,0.558,2072,0.45,2073,0.115,2074,0.115,2075,0.115,2076,0.115,2077,0.229,2078,0.115,2079,0.45,2080,0.115,2081,0.115,2082,0.206,2083,0.077,2084,0.111,2085,0.165,2086,0.104,2087,0.097,2088,0.193,2089,0.088,2090,0.115,2091,0.115,2092,0.193,2093,0.183,2094,0.307,2095,0.45,2096,0.115,2097,0.115,2098,0.229,2099,0.115,2100,0.115,2101,0.115,2102,0.115,2103,0.474,2104,0.115,2105,0.229,2106,0.229,2107,0.115,2108,0.229,2109,0.115,2110,0.115,2111,0.115,2112,0.115,2113,0.45,2114,0.085,2115,0.115,2116,0.316,2117,0.165,2118,0.084,2119,0.229,2120,0.229,2121,0.664,2122,0.115,2123,0.115,2124,0.115,2125,0.115,2126,0.115,2127,0.115,2128,0.115,2129,0.115,2130,0.229,2131,0.115,2132,0.115,2133,0.229,2134,0.115,2135,0.229,2136,0.229,2137,0.229,2138,0.229,2139,0.229,2140,0.229,2141,0.229,2142,0.229,2143,0.229,2144,0.229,2145,0.229,2146,0.229,2147,0.229,2148,0.229,2149,0.229,2150,0.087,2151,0.115,2152,0.599,2153,0.45,2154,0.229,2155,0.115,2156,0.171,2157,0.146,2158,0.34,2159,0.45,2160,0.45,2161,0.153,2162,0.115,2163,0.115,2164,0.115,2165,0.115,2166,0.115,2167,0.115,2168,0.34,2169,0.115,2170,0.115,2171,0.115,2172,0.229,2173,0.115,2174,0.115,2175,0.229,2176,0.115,2177,0.115,2178,0.115,2179,0.115,2180,0.115,2181,0.115,2182,0.115,2183,0.115,2184,0.115,2185,0.115,2186,0.115,2187,0.115,2188,0.115,2189,0.115,2190,0.115,2191,0.115,2192,0.115,2193,0.115,2194,0.229,2195,0.115,2196,0.115,2197,0.115,2198,0.115,2199,0.115,2200,0.115,2201,0.115,2202,0.097,2203,0.115,2204,0.115,2205,0.115,2206,0.115,2207,0.115,2208,0.115,2209,0.115,2210,0.115,2211,0.115,2212,0.115,2213,0.115,2214,0.115,2215,0.115,2216,0.115,2217,0.115,2218,0.115,2219,0.115,2220,0.115,2221,0.115,2222,0.115,2223,0.115,2224,0.115,2225,0.115,2226,0.115,2227,0.115,2228,0.115,2229,0.115,2230,0.115,2231,0.115,2232,0.115,2233,0.115,2234,0.115,2235,0.088,2236,0.34,2237,0.34,2238,0.34,2239,0.088,2240,0.115,2241,0.115,2242,0.115,2243,0.115,2244,0.45,2245,0.115,2246,0.138,2247,0.083,2248,0.45,2249,0.229,2250,0.34,2251,0.34,2252,0.115,2253,0.071,2254,0.115,2255,0.115,2256,0.115,2257,0.115,2258,0.115,2259,0.115,2260,0.115,2261,0.115,2262,0.115,2263,0.115,2264,0.115,2265,0.115,2266,0.115,2267,0.115,2268,0.115,2269,0.115,2270,0.115,2271,0.115,2272,0.115,2273,0.115,2274,0.115,2275,0.115,2276,0.115,2277,0.115,2278,0.115,2279,0.115,2280,0.115,2281,0.115,2282,0.115,2283,0.115,2284,0.115,2285,0.115,2286,0.115,2287,0.115,2288,0.115,2289,0.115,2290,0.115,2291,0.115,2292,0.115,2293,0.115,2294,0.115,2295,0.115,2296,0.115,2297,0.115,2298,0.115,2299,0.115,2300,0.115,2301,0.115,2302,0.115,2303,0.115,2304,0.115,2305,0.115,2306,0.115,2307,0.115,2308,0.115,2309,0.115,2310,0.115,2311,0.115,2312,0.34,2313,0.115,2314,0.115,2315,0.115,2316,0.115,2317,0.115,2318,0.115,2319,0.115,2320,0.115,2321,0.115,2322,0.115,2323,0.115,2324,0.115,2325,0.115,2326,0.45,2327,0.092,2328,0.115,2329,0.45,2330,0.101,2331,0.08,2332,0.115,2333,0.154,2334,0.45,2335,0.104,2336,0.115,2337,0.45,2338,0.45,2339,0.872,2340,0.45,2341,0.229,2342,0.34,2343,0.071,2344,0.115,2345,0.115,2346,0.115,2347,0.115,2348,0.115,2349,0.104,2350,0.115,2351,0.229,2352,0.115,2353,0.229,2354,0.115,2355,0.115,2356,0.115,2357,0.34,2358,0.115,2359,0.115,2360,0.115,2361,0.115,2362,0.115,2363,0.229,2364,0.097,2365,0.115,2366,0.45,2367,0.115,2368,0.115,2369,0.115,2370,0.115,2371,0.115,2372,0.115,2373,0.769,2374,0.115,2375,0.097,2376,0.272,2377,0.115,2378,0.45,2379,0.097,2380,0.45,2381,0.115,2382,0.115,2383,0.115,2384,0.115,2385,0.115,2386,0.115,2387,0.115,2388,0.115,2389,0.095,2390,0.34,2391,0.115,2392,0.111,2393,0.115,2394,0.251,2395,0.115,2396,0.115,2397,0.229,2398,0.115,2399,0.115,2400,0.115,2401,0.115,2402,0.115,2403,0.115,2404,0.115,2405,0.229,2406,0.115,2407,0.115,2408,0.229,2409,0.115,2410,0.084,2411,0.115,2412,0.115,2413,0.115,2414,0.073,2415,0.097,2416,0.115,2417,0.115,6419,0.115]],["component/158",[11,0.279,108,0.486]],["title/159",[64,70.719]],["name/159",[64,1.715]],["text/159",[11,2.01,34,5.749,65,4.858,70,5.844,73,6.169,128,4.28,527,6.477,674,6.016,2414,6.337,2423,6.989]],["component/159",[11,0.279,108,0.486]],["title/160-1",[8,35.841]],["name/160-1",[]],["text/160-1",[]],["component/160-1",[]],["title/160-2",[4,26.654,2038,42.276,2424,47.637]],["name/160-2",[]],["text/160-2",[]],["component/160-2",[]],["title/160-3",[11,11.796,135,25.4,177,33.208]],["name/160-3",[]],["text/160-3",[]],["component/160-3",[]],["title/160-4",[11,11.796,151,30.821,177,33.208]],["name/160-4",[]],["text/160-4",[]],["component/160-4",[]],["title/160-5",[11,10.251,71,20.62,72,23.614,118,25.716]],["name/160-5",[]],["text/160-5",[]],["component/160-5",[]],["title/160-6",[672,41.313,996,47.83]],["name/160-6",[]],["text/160-6",[]],["component/160-6",[]],["title/160-7",[18,32.708]],["name/160-7",[]],["text/160-7",[]],["component/160-7",[]],["title/160-8",[2448,64.221]],["name/160-8",[]],["text/160-8",[]],["component/160-8",[]],["title/160-9",[77,13.47,183,15.624,623,20.96,977,23.749,978,26.578,6421,45.816]],["name/160-9",[]],["text/160-9",[]],["component/160-9",[]],["title/160-10",[656,30.31,718,39.221,6422,61.789]],["name/160-10",[]],["text/160-10",[]],["component/160-10",[]],["title/160",[11,10.251,18,19.86,34,29.316,79,32.545]],["name/160",[34,0.647,79,0.718]],["text/160",[4,3.029,8,2.845,9,1.998,11,2.422,12,3.473,13,2.177,15,4.101,18,4.366,27,3.592,41,2.432,47,2.078,56,3.125,68,2.211,69,5.562,71,2.696,72,3.088,76,3.363,79,2.798,81,2.466,92,2.274,113,1.716,115,2.078,119,2.05,126,2.137,127,3.35,128,1.876,135,1.898,139,2.153,144,3.337,151,4.238,161,2.432,177,4.567,178,1.914,215,3.919,231,2.313,243,2.043,252,1.926,253,2.597,265,3.324,269,4.264,279,2.064,302,2.037,327,2.621,353,3.161,374,3.416,394,2.364,444,3.941,461,2.798,482,2.481,495,3.35,502,2.246,515,3.125,516,2.637,523,4.286,582,3.299,592,3.035,595,3.035,604,2.778,610,2.115,612,3.125,632,2.955,633,2.839,646,2.274,656,2.264,672,5.392,681,4.754,683,4.754,694,3.954,695,3.954,710,3.622,718,4.457,751,2.818,759,2.043,772,2.534,779,4.754,822,2.274,827,2.818,930,3.448,933,3.158,934,2.759,977,4.742,978,4.385,990,3.501,996,5.586,1075,2.93,1077,3.559,1078,3.691,1224,2.981,1249,3.324,1500,5.615,1505,4.912,1528,3.352,1704,2.494,2246,2.637,2463,5.615,2465,4.383,2466,4.383,2467,4.383,2468,4.209,2469,4.383,2470,4.383,2471,4.383,2738,3.954,2767,4.383,2794,3.691,2856,4.383,3316,3.193,3344,3.193,6097,4.07,6419,4.383,6422,4.616,6423,10.214,6424,7.56,6425,4.97,6426,4.97,6427,4.97,6428,4.97,6429,4.97,6430,7.56,6431,4.97,6432,4.97,6433,4.97,6434,4.97,6435,4.97]],["component/160",[11,0.279,108,0.486]],["title/161-1",[12,43.744]],["name/161-1",[]],["text/161-1",[]],["component/161-1",[]],["title/161-2",[113,27.038,116,43.477]],["name/161-2",[]],["text/161-2",[]],["component/161-2",[]],["title/161",[11,10.251,12,26.56,18,19.86,75,27.378]],["name/161",[12,0.586,75,0.604]],["text/161",[3,6.305,4,5.429,11,1.534,12,5.688,15,3.879,24,4.009,27,2.684,31,5.499,32,3.546,34,4.387,51,4.46,57,3.186,60,3.294,68,3.849,76,3.849,77,2.544,79,4.871,81,2.822,89,4.707,92,3.958,108,2.667,113,3.858,116,4.803,121,3.63,122,5.579,137,4.619,265,3.805,288,3.694,515,5.441,556,6.095,631,4.707,633,4.943,647,4.009,649,4.319,759,3.557,800,4.906,823,5.622,1041,6.884,2038,5.499,2424,6.196,2856,7.631,2895,10.919,2896,7.631,2897,7.631,2898,7.631,6423,8.036,6436,8.653]],["component/161",[11,0.279,108,0.486]],["title/162-1",[2957,72.196]],["name/162-1",[]],["text/162-1",[]],["component/162-1",[]],["title/162-2",[4,31.382,598,42.894]],["name/162-2",[]],["text/162-2",[]],["component/162-2",[]],["title/162-3",[47,27.814,81,21.701,458,29.252]],["name/162-3",[]],["text/162-3",[]],["component/162-3",[]],["title/162-4",[394,31.646,458,29.252,2958,49.409]],["name/162-4",[]],["text/162-4",[]],["component/162-4",[]],["title/162-5",[138,36.445,458,34.441]],["name/162-5",[]],["text/162-5",[]],["component/162-5",[]],["title/162-6",[309,31.646,458,29.252,2959,52.928]],["name/162-6",[]],["text/162-6",[]],["component/162-6",[]],["title/162-7",[129,20.946,331,22.01,458,25.422,527,33.026]],["name/162-7",[]],["text/162-7",[]],["component/162-7",[]],["title/162-8",[54,31.873,129,20.946,331,22.01,458,25.422]],["name/162-8",[]],["text/162-8",[]],["component/162-8",[]],["title/162",[11,10.251,72,23.614,458,25.422,986,40.727]],["name/162",[11,0.156,72,0.36,458,0.388]],["text/162",[4,4.454,11,2.047,14,2.537,17,2.759,18,3.415,24,2.961,27,2.822,32,1.642,45,1.648,47,1.675,48,1.97,71,1.429,72,4.327,76,1.782,77,3.784,78,3.04,81,2.085,112,2.325,119,1.653,126,1.723,129,1.452,130,3.912,131,1.681,136,1.841,138,3.71,142,1.711,159,2.114,161,5.648,169,5.209,179,3.412,182,2.821,186,2.706,187,2.166,188,3.127,191,2.272,199,2.8,200,4.686,202,1.906,203,2.604,218,2.81,225,2.104,227,2.8,231,1.865,232,3.04,236,1.776,243,1.648,244,3.228,250,1.642,269,2.935,286,3.027,288,4.244,289,2.209,293,4,301,4.488,306,2.043,307,1.97,310,1.456,311,4.503,316,1.681,317,1.426,319,4.869,322,3.867,323,1.566,331,1.526,333,2.043,334,2.823,339,2.18,342,1.915,343,2.52,350,6.696,351,2.114,352,3.455,356,1.463,357,2.382,358,2.403,380,4.087,393,1.616,394,1.906,420,1.616,421,1.841,446,2.52,458,4.371,469,1.504,472,1.97,476,2.403,489,1.841,495,2.832,505,2.325,507,3.112,532,2.256,542,2.325,543,2.403,598,6.321,610,1.705,611,1.769,622,7.115,630,2.224,634,2.18,647,1.857,702,1.915,712,2.52,739,2.823,767,2.256,794,2.382,805,3.188,822,1.833,857,2.209,950,2.403,1182,2.635,1224,2.403,1254,2.447,1470,4.503,1602,2.18,1708,2.24,1822,2.52,2734,2.307,2912,8.024,2958,2.976,2959,3.188,2960,5.637,2961,2.425,2962,2.139,2963,3.534,2964,3.534,2965,3.534,2966,4.503,2967,3.534,2968,2.224,2969,2.823,2970,3.534]],["component/162",[11,0.279,108,0.486]],["title/163-1",[18,22.852,71,23.727,118,29.591]],["name/163-1",[]],["text/163-1",[]],["component/163-1",[]],["title/163-2",[0,24.493,77,19.558,129,24.102]],["name/163-2",[]],["text/163-2",[]],["component/163-2",[]],["title/163-3",[77,16.997,130,16.16,135,22.074,244,20.515]],["name/163-3",[]],["text/163-3",[]],["component/163-3",[]],["title/163-4",[77,16.997,126,24.862,130,16.16,135,22.074]],["name/163-4",[]],["text/163-4",[]],["component/163-4",[]],["title/163-5",[115,27.814,135,25.4,535,37.722]],["name/163-5",[]],["text/163-5",[]],["component/163-5",[]],["title/163-6",[244,27.793,1234,47.83]],["name/163-6",[]],["text/163-6",[]],["component/163-6",[]],["title/163-7",[880,49.256,1249,34.441]],["name/163-7",[]],["text/163-7",[]],["component/163-7",[]],["title/163-8",[126,33.684,1234,47.83]],["name/163-8",[]],["text/163-8",[]],["component/163-8",[]],["title/163-9",[6,39.552,11,11.796,72,27.171]],["name/163-9",[]],["text/163-9",[]],["component/163-9",[]],["title/163-10",[11,13.888,129,28.378]],["name/163-10",[]],["text/163-10",[]],["component/163-10",[]],["title/163-11",[77,19.558,129,24.102,131,27.91]],["name/163-11",[]],["text/163-11",[]],["component/163-11",[]],["title/163-12",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/163-12",[]],["text/163-12",[]],["component/163-12",[]],["title/163-13",[130,21.893,132,31.09]],["name/163-13",[]],["text/163-13",[]],["component/163-13",[]],["title/163-14",[17,28.713,77,19.558,129,24.102]],["name/163-14",[]],["text/163-14",[]],["component/163-14",[]],["title/163-15",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/163-15",[]],["text/163-15",[]],["component/163-15",[]],["title/163-16",[130,21.893,132,31.09]],["name/163-16",[]],["text/163-16",[]],["component/163-16",[]],["title/163-17",[77,19.558,129,24.102,293,22.364]],["name/163-17",[]],["text/163-17",[]],["component/163-17",[]],["title/163-18",[129,20.946,183,19.716,205,21.114,225,19.032]],["name/163-18",[]],["text/163-18",[]],["component/163-18",[]],["title/163-19",[130,21.893,132,31.09]],["name/163-19",[]],["text/163-19",[]],["component/163-19",[]],["title/163-20",[11,11.796,134,41.009,214,30.31]],["name/163-20",[]],["text/163-20",[]],["component/163-20",[]],["title/163-21",[77,16.997,130,16.16,225,19.032,293,19.435]],["name/163-21",[]],["text/163-21",[]],["component/163-21",[]],["title/163-22",[77,16.997,130,16.16,204,32.091,227,25.326]],["name/163-22",[]],["text/163-22",[]],["component/163-22",[]],["title/163-23",[77,19.558,81,21.701,130,18.595]],["name/163-23",[]],["text/163-23",[]],["component/163-23",[]],["title/163-24",[11,11.796,118,29.591,138,30.954]],["name/163-24",[]],["text/163-24",[]],["component/163-24",[]],["title/163-25",[77,15.029,140,26.498,141,21.826,142,21.826,305,19.984]],["name/163-25",[]],["text/163-25",[]],["component/163-25",[]],["title/163-26",[136,35.984,138,36.445]],["name/163-26",[]],["text/163-26",[]],["component/163-26",[]],["title/163-27",[181,42.341,182,34.573]],["name/163-27",[]],["text/163-27",[]],["component/163-27",[]],["title/163-28",[183,19.716,184,29.009,185,21.002,186,19.621]],["name/163-28",[]],["text/163-28",[]],["component/163-28",[]],["title/163-29",[19,27.886,138,26.901,187,31.253,188,28.289]],["name/163-29",[]],["text/163-29",[]],["component/163-29",[]],["title/163-30",[11,10.251,72,23.614,495,25.617,701,39.531]],["name/163-30",[]],["text/163-30",[]],["component/163-30",[]],["title/163-31",[11,9.064,18,17.56,71,18.233,144,22.564,495,22.651]],["name/163-31",[]],["text/163-31",[]],["component/163-31",[]],["title/163-32",[11,9.064,18,17.56,71,18.233,133,18.77,265,22.478]],["name/163-32",[]],["text/163-32",[]],["component/163-32",[]],["title/163-33",[495,34.706,598,42.894]],["name/163-33",[]],["text/163-33",[]],["component/163-33",[]],["title/163",[11,11.796,18,22.852,72,27.171]],["name/163",[18,0.438,72,0.521]],["text/163",[0,2.173,6,1.457,9,1.185,10,0.334,11,2.238,14,2.92,17,2.421,18,3.479,19,1.182,21,0.723,24,0.886,27,3.224,32,0.544,33,0.339,35,1.451,37,0.591,38,0.621,40,0.272,41,1.199,43,0.357,44,0.997,45,1.212,47,0.799,48,1.45,49,0.753,50,2.127,51,0.685,57,0.489,59,0.377,65,0.819,68,0.308,69,0.723,70,0.685,71,2.83,72,3.165,76,1.887,77,3.289,78,1.166,81,1.621,84,0.685,97,0.681,98,1.916,99,0.641,100,0.647,101,0.922,102,0.632,103,1.107,105,1.073,106,1.212,109,0.778,111,1.002,112,1.109,113,2.912,114,0.861,115,1.606,117,0.361,118,2.864,119,0.789,121,2.805,126,4.607,127,1.511,128,2.697,129,4.232,130,2.658,131,3.472,132,2.92,133,1.945,134,3.808,135,2.728,136,3.472,137,0.709,138,3.997,139,0.575,140,3.466,141,3.309,142,3.227,144,1.695,148,0.603,151,0.615,157,0.288,159,0.366,163,0.38,164,0.773,165,0.304,170,0.621,172,0.324,173,0.567,175,1.511,176,0.857,178,2.041,179,1.021,180,1.021,181,0.718,182,1.872,183,2.765,184,0.348,185,1.239,186,3.406,187,0.718,188,3.272,190,0.605,191,2.405,192,2.995,193,0.462,194,0.615,197,2.178,198,2.786,199,3.475,200,3.036,201,2.838,202,2.668,203,0.863,204,2.941,205,2.442,206,2.874,207,0.552,208,1.379,209,2.519,210,0.666,211,0.474,212,0.468,213,0.423,214,2.815,215,0.359,216,1.287,217,1.076,218,1.077,219,1.557,220,1.084,221,1.456,222,0.436,223,0.396,224,1.652,225,2.669,226,1.217,227,2.321,228,0.45,229,0.372,230,0.723,231,0.323,232,2.363,233,1.521,234,0.804,235,0.468,236,1.306,237,0.51,238,1.027,239,1.057,240,0.653,241,0.396,242,0.341,243,2.54,244,4.127,245,0.402,246,0.402,247,0.552,248,0.436,249,4.518,250,0.284,251,0.985,252,3.493,253,1.457,254,0.552,255,0.552,256,0.696,257,0.419,258,0.468,259,0.515,260,0.552,261,0.515,262,0.552,263,0.936,264,0.552,265,1.689,266,0.552,267,0.515,268,0.875,269,0.489,270,0.488,271,1.337,272,0.681,273,0.33,274,0.39,275,0.515,276,0.385,277,0.505,278,0.45,279,4.244,280,0.835,281,0.353,282,1.8,283,0.552,284,1.347,285,1.236,286,1.16,287,0.685,288,0.296,289,1.351,290,0.441,291,0.441,293,3.117,297,0.705,298,1.242,299,0.28,300,1.916,301,3.478,302,0.783,303,1.941,304,0.488,305,1.942,306,1.503,307,0.94,308,0.372,309,2.363,310,1.677,311,0.936,312,2.173,313,1.738,314,2.852,315,0.287,316,3.941,317,0.472,318,0.393,319,0.811,320,0.532,321,0.399,322,1.157,323,1.152,324,0.399,325,0.39,326,0.986,327,1.292,328,0.468,329,0.419,330,1.205,331,0.506,332,0.33,333,1.249,334,0.488,335,0.269,336,0.986,337,1.925,338,0.488,339,0.723,340,0.522,341,0.31,342,0.331,343,0.436,344,0.538,345,0.45,346,0.552,347,0.331,348,0.488,350,1.71,351,1.008,352,1.324,353,1.773,354,3.24,355,0.515,356,1.403,357,2.028,360,0.32,363,1.879,364,1.333,365,1.592,366,1.369,367,1.52,368,0.666,370,1.729,371,1.103,372,1.753,373,0.621,374,4.491,375,4.083,376,0.67,377,0.863,378,0.638,379,0.753,380,1.256,382,0.436,383,1.223,384,0.638,385,1.202,388,2.077,389,0.488,390,0.488,391,1.521,392,1.851,393,1.189,394,1.622,395,1.347,396,0.515,397,0.986,398,0.552,399,0.552,400,0.552,401,1.242,402,1.289,403,0.986,404,1.289,409,0.339,420,0.28,421,0.318,422,0.552,423,1.324,424,0.723,425,1.057,426,0.45,428,0.432,429,0.986,430,0.552,431,0.515,432,0.552,433,0.552,438,0.481,439,1.3,440,0.552,441,0.936,442,0.538,443,0.552,444,0.692,445,0.552,446,1.202,447,0.584,448,0.382,449,0.363,450,0.357,451,0.515,452,1.525,453,0.368,454,0.753,455,0.764,456,0.552,457,1.724,458,0.584,459,0.986,460,0.552,461,0.39,462,0.552,463,0.552,464,1.521,465,0.515,466,0.552,467,1.496,468,1.726,469,1.733,470,0.737,471,0.896,472,1.677,473,0.835,474,0.863,475,0.552,476,1.146,477,0.552,478,1.652,479,0.802,480,0.552,481,0.375,482,0.346,483,0.316,484,1.193,485,0.552,486,0.488,487,0.552,488,0.552,489,0.61,490,0.552,491,0.811,492,1.057,493,0.515,494,0.552,495,3.259,496,0.355,519,0.399,524,0.811,525,0.341,535,0.753,540,0.368,542,0.402,550,0.317,569,0.328,595,0.423,596,2.512,598,0.38,615,0.382,617,0.673,621,0.325,622,0.427,637,0.641,643,0.331,647,0.886,651,0.375,658,0.402,691,0.488,703,0.375,704,0.986,711,0.468,726,0.37,751,0.393,753,0.632,767,0.39,768,0.468,798,0.324,811,0.441,822,0.317,826,0.456,863,0.366,869,0.382,972,0.267,974,0.416,978,0.402,1037,0.427,1107,0.409,1108,1.04,1145,0.474,1159,0.488,1166,1.521,1192,0.488,1204,0.804,1209,0.552,1215,0.853,1222,0.456,1234,3.034,1243,1.057,1249,1.077,1252,0.737,1253,0.385,1256,0.552,1366,0.409,1525,0.515,1567,0.396,1652,0.552,1656,0.436,1695,0.908,1822,0.436,1837,0.552,2060,0.488,2062,1.03,2330,1.03,2414,1.069,2758,0.368,2881,0.481,2917,0.481,2971,0.515,2972,0.896,2973,0.552,2974,0.552,2975,0.515,2976,0.611,2977,0.568,2978,0.611,2979,0.611,2980,0.611,2981,0.611,2982,1.171,2983,0.611,2984,0.611,2985,0.611,2986,0.611,2987,0.399,2988,0.611,2989,0.488,2990,0.568,2991,0.488]],["component/163",[11,0.279,108,0.486]],["title/164",[11,11.796,72,27.171,672,35.088]],["name/164",[72,0.521,672,0.673]],["text/164",[11,2.237,13,4.602,18,3.609,32,4.305,34,5.327,36,5.356,69,6.863,72,4.291,89,5.716,119,4.334,192,3.966,288,4.485,420,4.236,421,4.826,495,5.589,672,5.541,990,7.401,1005,7.803,2992,9.265]],["component/164",[11,0.279,108,0.486]],["title/165-1",[118,34.841,2993,69.076]],["name/165-1",[]],["text/165-1",[]],["component/165-1",[]],["title/165",[11,13.888,72,31.992]],["name/165",[72,0.943]],["text/165",[0,2.586,11,2.513,18,3.339,40,2.754,41,5.455,47,2.937,67,4.63,69,5.289,72,4.914,77,2.065,81,3.637,84,3.62,113,4.713,118,3.124,120,3.297,124,6.246,128,2.651,129,3.522,130,2.717,131,2.947,132,3.859,135,2.682,136,3.227,137,3.75,138,3.268,139,3.043,140,3.641,141,2.999,142,2.999,143,4.948,144,5.311,145,4.676,146,5.588,147,7.54,148,3.187,149,5.217,150,5.78,151,3.254,152,4.25,153,5.588,154,5.217,155,5.588,156,4.948,157,2.917,158,4.25,159,3.705,160,5.217,161,3.437,162,5.588,163,3.847,164,2.841,165,3.077,166,4.141,167,4.737,168,4.075,169,3.454,170,3.282,171,3.662,172,3.282,173,2.999,174,4.948,175,3.112,176,3.149,177,3.506,178,2.705,672,3.705]],["component/165",[11,0.279,108,0.486]],["title/166-1",[11,13.888,39,39.302]],["name/166-1",[]],["text/166-1",[]],["component/166-1",[]],["title/166-2",[11,13.888,40,30.711]],["name/166-2",[]],["text/166-2",[]],["component/166-2",[]],["title/166",[34,39.718,73,42.614]],["name/166",[34,0.647,73,0.694]],["text/166",[11,2.377,18,2.163,27,3.055,37,1.75,39,4.517,40,4.12,41,3.082,50,1.418,51,2.028,52,2.282,60,1.498,65,3.375,66,2.653,67,1.634,77,1.157,81,2.937,84,2.028,87,2.771,89,2.14,92,2.881,94,2.771,109,3.665,113,4.082,118,1.75,127,1.743,128,3.966,130,2.753,131,1.65,135,3.007,144,1.736,150,2.339,151,1.823,157,1.634,159,2.075,161,3.854,163,3.449,164,2.547,171,4.106,173,2.689,175,4.364,180,1.639,182,1.736,186,2.137,192,1.485,194,1.823,200,1.855,202,1.871,216,1.717,225,2.073,227,1.723,236,3.989,237,1.511,243,2.589,244,1.396,253,1.351,268,3.603,293,1.322,297,2.087,305,1.538,307,1.934,312,2.44,313,2.319,315,4.894,320,3.155,332,1.871,353,4.613,354,3.677,356,2.876,361,2.858,392,3.437,393,1.586,406,1.704,414,2.184,420,1.586,423,2.126,447,1.73,458,1.73,461,2.214,469,1.477,478,4.248,479,2.642,481,2.126,483,1.792,484,4.796,496,2.016,503,1.906,527,2.247,533,2.1,558,3.68,593,1.897,609,2.3,610,1.674,611,1.736,627,3.972,641,2.359,643,3.01,651,3.404,655,5.849,671,2.339,682,2.319,683,2.474,693,2.282,707,2.184,771,3.449,772,2.005,773,4.427,864,2.231,908,3.811,913,2.619,971,2.339,980,2.474,1035,1.925,1037,2.425,1086,1.771,1112,3.228,1134,2.005,1172,2.282,1186,1.995,1187,2.38,1188,3.777,1196,4.248,1204,2.38,1212,2.449,1340,4.433,1343,2.282,1471,3.01,1495,7.17,1567,2.247,1698,2.474,2009,3.13,2022,2.587,2085,2.5,2343,2.126,2426,3.598,2448,5.312,2456,1.785,2495,2.817,2531,3.92,2824,2.527,2852,3.051,2962,2.1,2968,2.184,2994,3.13,2995,2.402,2996,2.319,2997,2.771,2998,1.964,2999,3.469,3000,2.38,3001,2.729,3002,2.474,3003,2.771,3004,2.653,3005,3.13,3006,2.922,3007,3.13,3008,3.13,3009,3.13]],["component/166",[11,0.279,108,0.486]],["title/167-1",[588,55.237]],["name/167-1",[]],["text/167-1",[]],["component/167-1",[]],["title/167-2",[77,16.997,81,18.859,984,30.139,1962,34.085]],["name/167-2",[]],["text/167-2",[]],["component/167-2",[]],["title/167-3",[133,24.426,356,24.295,984,34.681]],["name/167-3",[]],["text/167-3",[]],["component/167-3",[]],["title/167-4",[469,29.4,984,40.833]],["name/167-4",[]],["text/167-4",[]],["component/167-4",[]],["title/167-5",[957,44.305]],["name/167-5",[]],["text/167-5",[]],["component/167-5",[]],["title/167-6",[27,17.931,483,26.341,759,23.769,910,32.315]],["name/167-6",[]],["text/167-6",[]],["component/167-6",[]],["title/167",[130,21.893,984,40.833]],["name/167",[984,1.204]],["text/167",[11,0.354,14,0.793,18,1.989,21,1.087,26,0.929,27,1.483,35,0.85,50,1.723,57,0.735,60,1.35,63,0.942,69,1.087,92,0.914,99,1.711,103,3.829,105,3.913,106,3.484,113,1.224,114,0.899,115,2.772,130,1.619,133,1.756,141,1.514,142,0.853,164,0.808,183,1.209,186,1.204,205,2.115,214,0.91,216,1.548,218,1.559,221,3.134,227,1.553,244,2.353,245,1.159,253,0.686,269,5.428,271,0.783,279,1.473,281,1.018,288,2.042,302,1.453,305,1.869,308,1.073,310,1.737,312,2.244,316,1.488,317,3.322,320,1.916,327,1.054,331,0.76,335,3.471,338,2.498,340,3.332,356,1.295,361,0.906,367,2.465,374,1.603,409,1.735,420,0.805,448,1.955,449,1.047,483,0.91,502,2.617,503,1.719,536,1.133,541,2.318,550,1.622,603,0.992,604,1.982,611,0.882,621,0.938,623,0.914,641,1.198,679,1.283,726,1.066,759,1.458,764,3.362,827,1.133,841,1.178,909,1.013,910,4.736,917,0.955,925,1.22,933,1.269,951,5.951,957,2.225,972,1.366,981,1.244,982,1.22,984,7.325,985,2.584,1102,2.508,1129,1.08,1155,1.456,1254,4.853,1367,1.256,1398,1.589,1405,2.498,1505,1.298,1688,2.392,1698,1.256,1709,1.484,2235,1.347,2253,7.023,2450,1.231,2453,2.751,2529,3.317,2531,2.208,2565,3.485,2756,3.485,2807,2.584,2858,1.549,2905,2.46,2987,1.15,3001,1.386,3010,1.484,3011,1.484,3012,2.634,3013,4.301,3014,4.925,3015,4.925,3016,4.925,3017,1.589,3020,1.589,3021,1.589,3022,1.589,3023,1.484,3024,1.589,3025,2.821,3026,1.484,3027,1.407,3028,2.821,3032,2.392,3033,1.484,3034,2.821,3035,2.821,3036,2.821,3037,2.821,3038,2.821,3039,2.821,3040,2.821,3041,2.821,3042,2.821,3043,2.821,3044,2.821,3045,3.805,3046,2.821,3047,2.821,3048,2.634,3049,2.821,3050,2.821,3051,2.821,3052,2.821,3053,2.821,3054,2.821,3055,2.821,3056,2.821,3057,2.821,3058,2.821,3059,2.821,3060,2.821,3061,2.821,3062,2.634,3063,2.821,3064,2.821,3065,2.821,3066,2.821,3067,2.821,3090,1.484,3091,1.589,3092,4.301,3093,5.171,3111,4.301,3112,3.552,3115,3.805,3116,3.805,3118,3.805,3120,1.589,3121,11.085,3122,3.369,3123,1.589,3124,1.589,3125,1.589,3126,1.589,3127,1.589,3128,1.589,3129,1.589,3130,6.323,3131,6.323,3132,2.821,3133,2.821,3134,1.589,3164,1.762,3165,1.589,3166,1.762,3167,4.217,3168,3.127,3169,1.762,3170,3.127,3171,1.762,3172,4.217,3173,1.762,3174,1.762,3175,1.762,3176,1.762,3177,1.762,3178,1.762,3179,1.762,3180,1.762,3181,1.762,3182,3.127,3183,1.762,3184,3.127,3185,1.762,3186,1.762,3187,1.762,3188,4.217,3189,1.762,3190,1.762,3191,1.762,3192,1.762,3193,1.762,3194,1.762,3195,1.762]],["component/167",[11,0.279,108,0.486]],["title/168-1",[496,48.809]],["name/168-1",[]],["text/168-1",[]],["component/168-1",[]],["title/168-2",[40,20.044,133,18.77,186,17.349,229,27.461,483,23.291]],["name/168-2",[]],["text/168-2",[]],["component/168-2",[]],["title/168-3",[7,28.573,40,30.28,133,18.77,186,17.349]],["name/168-3",[]],["text/168-3",[]],["component/168-3",[]],["title/168-4",[7,28.573,133,18.77,186,17.349,909,39.16]],["name/168-4",[]],["text/168-4",[]],["component/168-4",[]],["title/168-5",[77,16.997,81,18.859,1962,34.085,3196,37.568]],["name/168-5",[]],["text/168-5",[]],["component/168-5",[]],["title/168-6",[130,18.595,1962,39.221,3196,43.228]],["name/168-6",[]],["text/168-6",[]],["component/168-6",[]],["title/168-7",[133,24.426,1123,52.928,3197,52.928]],["name/168-7",[]],["text/168-7",[]],["component/168-7",[]],["title/168-8",[54,28.183,78,24.318,225,16.829,3198,37.967,3199,37.967]],["name/168-8",[]],["text/168-8",[]],["component/168-8",[]],["title/168",[130,18.595,225,21.9,320,26.654]],["name/168",[3198,0.947,3199,0.947]],["text/168",[0,0.902,7,1.37,9,1.705,10,1.182,14,0.973,18,1.458,19,1.182,27,1.74,33,1.199,45,1.008,50,1.529,57,0.902,68,1.09,71,3.767,81,0.8,102,1.166,103,1.108,105,2.458,106,2.307,113,1.465,114,1.91,115,3.461,119,1.011,130,2.75,133,3.45,148,1.112,151,1.136,157,1.762,169,1.205,170,2.622,171,1.278,172,1.145,173,1.046,183,2.281,185,0.89,186,1.904,192,2.525,213,1.497,218,1.078,220,3.792,223,1.4,225,4.398,228,1.593,240,1.205,244,1.991,249,3.073,252,0.95,253,1.458,269,5.564,271,3.482,281,1.25,282,2.591,292,2.786,293,2.783,297,1.301,299,1.716,304,1.727,313,1.445,317,3.5,320,0.982,323,0.958,335,3.217,340,2.973,347,2.681,360,1.131,364,0.958,380,1.256,393,0.988,420,0.988,421,1.126,447,1.078,483,1.117,486,1.727,502,1.108,509,2.668,510,2.989,515,1.541,529,1.325,541,2.719,556,1.727,593,1.182,621,1.15,651,1.325,693,1.422,774,2.757,776,1.575,835,2.925,909,1.243,934,2.355,938,1.39,940,2.567,946,2.825,949,2.862,951,4.255,952,3.151,957,1.14,975,2.355,995,1.361,1008,1.483,1054,1.95,1058,1.7,1067,1.786,1075,3.943,1121,3.952,1134,2.163,1144,1.755,1165,1.188,1199,1.95,1326,1.117,1405,1.727,1470,1.727,1474,1.95,1568,1.351,1576,4.739,1701,2.567,1707,3.565,1908,1.593,1962,1.445,2103,1.541,2246,1.301,2253,2.309,2453,1.901,2531,2.641,2714,3.735,2726,1.727,2913,1.786,3010,1.82,3011,1.82,3152,1.95,3196,4.912,3197,5.321,3198,7.843,3199,8.264,3200,2.162,3201,2.162,3202,2.162,3203,2.162,3204,2.162,3205,1.95,3206,2.162,3207,2.162,3208,1.676,3209,8.675,3210,3.742,3211,1.82,3212,2.162,3213,3.151,3214,3.742,3215,3.742,3216,2.862,3217,3.742,3218,3.742,3219,3.742,3220,3.742,3221,3.742,3222,3.742,3224,3.742,3225,3.742,3226,3.742,3227,2.162,3228,4.948,3229,4.948,3230,4.948,3231,3.742,3232,3.742,3233,3.742,3234,2.162,3235,2.162,3236,2.162,3237,2.162,3238,2.162,3239,2.162,3240,1.95,3241,1.95,3242,2.162,3243,2.162,3244,2.162,3245,2.162,3246,2.162,3247,2.162,3248,2.162,3249,1.82,3250,1.95,3251,2.162,3252,2.162,3253,2.162,3254,2.162,3255,2.162,3256,2.162,3257,2.162,3258,2.162,3259,3.742,3260,2.162,3261,2.162,3262,2.162,3263,2.162,3264,3.376,3265,5.614,3266,2.162,3267,2.162,3268,2.162,3269,3.742,3270,3.742,3271,2.162,3272,3.742,3273,2.162,3274,2.162]],["component/168",[11,0.279,108,0.486]],["title/169-1",[302,32.097,374,35.397]],["name/169-1",[]],["text/169-1",[]],["component/169-1",[]],["title/169-2",[481,42.341,656,35.686]],["name/169-2",[]],["text/169-2",[]],["component/169-2",[]],["title/169-3",[128,25.111,243,27.351,656,30.31]],["name/169-3",[]],["text/169-3",[]],["component/169-3",[]],["title/169-4",[164,23.385,243,23.769,458,25.422,798,27.017]],["name/169-4",[]],["text/169-4",[]],["component/169-4",[]],["title/169-5",[11,10.251,27,17.931,40,22.669,243,23.769]],["name/169-5",[]],["text/169-5",[]],["component/169-5",[]],["title/169",[27,20.633,243,27.351,656,30.31]],["name/169",[243,0.524,656,0.581]],["text/169",[0,1.734,11,0.835,17,2.033,40,1.847,50,1.698,54,2.597,68,2.096,75,2.231,77,1.385,81,1.537,95,2.933,96,2.402,101,2.272,106,3.638,113,2.505,114,2.12,115,4.94,126,2.026,128,3.34,130,1.317,133,1.73,161,2.305,164,1.906,169,2.316,180,1.963,183,1.607,184,2.364,192,1.778,237,2.787,242,2.316,243,4.662,244,1.672,252,1.825,253,1.618,256,3.805,269,5.329,279,3.675,281,3.699,302,1.93,310,1.711,312,1.825,317,3.819,335,2.82,340,2.854,354,3.615,361,3.292,364,1.842,367,2.428,393,1.899,465,3.499,474,4.715,481,3.922,484,2.294,491,4.431,493,3.499,525,2.316,529,4.784,551,4.114,569,3.436,582,3.167,623,2.155,630,2.615,637,2.272,656,3.306,657,3.66,777,5.112,798,2.202,806,2.777,827,2.671,870,2.615,974,2.825,1037,2.904,1326,3.306,1471,2.251,1505,3.061,1943,3.177,2022,4.771,2253,2.563,2439,3.373,2442,4.473,2487,2.328,2771,3.99,2831,3.99,2968,2.615,3205,7.041,3216,3.177,3275,3.748,3276,4.155,3277,4.155,3278,3.748,3279,3.748,3280,6.864,3281,3.748,3282,3.748,3283,3.748,3284,3.748,3285,4.155,3286,4.155,3287,4.155,3288,5.773,3289,4.155,3290,7.805,3291,3.748,3292,3.748,3293,3.748,3294,4.155,3295,4.155,3296,4.155,3297,4.155,3298,4.155,3299,4.155,3300,4.155,3301,4.155,3302,4.155,3303,4.155,3304,3.748,3305,3.748,3306,4.155,3307,4.155,3308,6.399,3309,4.155,3310,4.155,3311,4.155,3312,7.805,3313,4.155,3314,4.155,3315,4.155,3316,3.027,3317,4.155,3318,4.155,3319,4.155,3320,4.155,3321,4.155,3322,4.155,3323,6.399,3324,4.155,3325,6.399,3326,3.748,3327,5.389,3328,5.773]],["component/169",[11,0.279,108,0.486]],["title/170-1",[588,55.237]],["name/170-1",[]],["text/170-1",[]],["component/170-1",[]],["title/170-2",[77,16.997,81,18.859,984,30.139,1962,34.085]],["name/170-2",[]],["text/170-2",[]],["component/170-2",[]],["title/170-3",[133,24.426,356,24.295,984,34.681]],["name/170-3",[]],["text/170-3",[]],["component/170-3",[]],["title/170-4",[469,29.4,984,40.833]],["name/170-4",[]],["text/170-4",[]],["component/170-4",[]],["title/170-5",[957,44.305]],["name/170-5",[]],["text/170-5",[]],["component/170-5",[]],["title/170-6",[27,17.931,483,26.341,759,23.769,910,32.315]],["name/170-6",[]],["text/170-6",[]],["component/170-6",[]],["title/170",[130,21.893,984,40.833]],["name/170",[984,1.204]],["text/170",[11,0.879,14,0.83,18,2.055,21,1.137,26,0.972,27,1.856,35,0.889,50,1.787,57,0.769,60,1.405,63,0.985,77,2.008,92,0.956,99,1.78,103,3.921,105,4.001,106,3.567,113,1.274,114,0.941,115,2.856,130,1.672,133,1.82,142,0.892,164,0.845,183,1.259,186,1.253,198,1.038,205,0.763,214,0.952,216,1.611,221,3.221,227,1.617,244,2.893,245,1.212,253,0.718,269,5.182,271,0.819,279,1.533,288,1.576,299,1.493,302,1.513,305,1.938,308,1.123,310,0.759,312,2.318,313,1.232,316,1.549,317,3.392,318,1.185,320,1.986,331,0.796,335,3.549,338,2.6,340,3.412,353,0.874,356,1.348,361,0.948,367,2.555,374,1.668,420,0.843,449,1.096,483,0.952,502,2.704,503,1.789,536,1.185,541,2.402,550,1.689,569,1.748,571,1.71,572,1.06,573,1.137,603,1.038,604,2.063,610,0.889,611,0.923,621,0.981,623,0.956,641,1.253,679,1.343,726,1.971,759,1.518,764,1.06,827,1.185,909,1.06,910,4.85,917,0.999,925,1.276,933,1.328,951,2.79,957,1.717,972,1.422,981,1.301,982,1.276,984,7.392,985,2.69,1102,1.935,1129,1.13,1155,1.523,1249,0.919,1254,4.978,1357,1.552,1367,1.314,1405,2.6,1505,3.221,1688,2.49,1698,1.314,1709,1.552,2024,1.663,2235,1.41,2253,6.958,2450,1.288,2529,2.561,2531,2.298,2565,3.612,2756,1.523,2768,1.621,2807,2.69,2858,1.621,2905,2.561,2987,1.203,3001,1.45,3010,1.552,3011,1.552,3012,2.741,3013,3.682,3014,5.074,3015,5.074,3016,5.074,3017,1.663,3018,1.843,3019,1.843,3020,1.663,3021,1.663,3022,1.663,3023,1.552,3024,1.663,3025,2.937,3026,1.552,3027,1.472,3028,2.937,3029,3.255,3030,1.843,3031,1.843,3032,1.41,3033,1.552,3034,1.663,3035,2.937,3036,2.937,3037,2.937,3038,2.937,3039,2.937,3040,2.937,3041,2.937,3042,2.937,3043,2.937,3044,2.937,3045,3.944,3046,2.937,3047,2.937,3048,2.741,3049,2.937,3050,2.937,3051,2.937,3052,2.937,3053,2.937,3054,2.937,3055,2.937,3056,2.937,3057,2.937,3058,2.937,3059,2.937,3060,2.937,3061,2.937,3062,2.741,3063,2.937,3064,2.937,3065,2.937,3066,2.937,3067,2.937,3068,1.843,3069,3.255,3070,1.663,3071,1.843,3072,1.843,3073,1.843,3074,1.843,3075,1.843,3076,6.653,3077,1.843,3078,4.372,3079,4.372,3080,1.843,3081,4.372,3082,1.843,3083,1.843,3084,1.843,3085,1.843,3086,1.843,3087,1.843,3088,1.843,3089,3.255,3090,1.552,3091,1.663,3092,3.682,3093,5.315,3094,1.843,3095,3.255,3096,1.843,3097,1.843,3098,3.255,3099,1.843,3100,1.843,3101,1.843,3102,1.843,3103,1.843,3104,1.843,3105,1.843,3106,1.843,3107,1.843,3108,1.843,3109,1.843,3110,1.843,3111,3.682,3112,2.741,3113,1.843,3114,1.843,3115,3.944,3116,3.944,3117,1.472,3118,3.944,3119,1.843,3120,1.663,3121,11.151,3122,3.492,3123,1.663,3124,1.663,3125,1.663,3126,1.663,3127,1.663,3128,1.663,3129,1.663,3130,6.486,3131,6.486,3132,2.937,3133,2.937,3134,1.663,3135,1.843,3136,1.843]],["component/170",[11,0.279,108,0.486]],["title/171",[11,11.655,39,20.828,40,16.275,113,14.328,200,19.569,293,13.954]],["name/171",[40,0.5,293,0.429]],["text/171",[0,1.809,11,2.045,18,1.688,27,2.324,39,2.465,40,4.702,47,2.054,77,1.444,81,1.603,88,2.807,113,2.587,115,3.798,119,2.027,126,2.113,135,3.468,175,2.177,185,1.785,194,2.276,200,2.316,220,4.249,244,2.659,250,2.013,253,3.12,269,5.455,271,3.562,293,4.624,299,3.031,310,1.785,312,1.904,317,1.748,323,1.921,331,1.871,335,1.909,337,2.229,340,1.932,341,4.538,356,3.711,361,2.229,380,2.519,393,4.412,532,2.766,538,3.122,550,2.248,569,2.327,571,5.069,572,4.606,582,4.435,771,2.691,772,2.505,934,2.727,938,2.786,939,3.231,944,3.359,950,4.494,954,3.359,955,3.359,1009,3,1186,2.491,1188,2.946,1217,3.231,1277,5.279,1450,2.709,1520,2.946,1576,3.78,1687,3.122,2718,2.533,2727,3.909,3384,2.828,3411,2.873,4255,3.359,4735,4.023,4737,4.023,5912,7.439,6264,8.606,6344,4.563,6345,4.563,6346,10.162,6347,4.563,6348,4.563,6349,4.563,6350,4.563,6351,4.563,6352,4.563,6353,4.563,6354,9.439,6355,4.563,6356,4.563,6357,6.96,6358,4.563,6359,8.437,6360,6.96,6361,4.563,6362,4.563,6363,4.563,6364,4.563,6365,4.563,6366,4.563,6367,4.563,6368,4.563]],["component/171",[11,0.279,108,0.486]],["title/172",[217,25.791,359,22.418,910,25.608,1134,23.357,2246,24.31,2331,27.977]],["name/172",[225,0.42,1411,0.794]],["text/172",[4,1.692,11,1.809,27,2.067,31,2.684,33,2.067,47,1.766,50,1.522,65,3.537,81,3.057,109,1.72,113,1.458,135,1.613,157,3.428,165,4.105,166,6.933,176,1.894,185,3.705,199,3.616,206,1.965,217,7.235,219,2.684,225,4.292,227,3.616,236,3.657,240,2.077,244,3.325,250,3.382,253,3.504,269,5.168,271,2.613,292,2.098,293,3.15,299,1.709,301,4.646,312,1.637,315,2.758,317,2.371,324,2.431,331,3.568,335,1.641,340,2.621,341,1.886,359,6.184,364,2.605,384,3.2,393,3.328,424,2.298,461,2.378,483,3.761,502,1.909,503,4,550,1.933,569,2,571,3.088,572,3.379,573,3.626,623,1.933,646,1.933,647,1.957,696,2.298,697,2.93,726,2.255,759,2.74,767,2.378,771,2.313,772,2.154,786,2.047,791,4.437,802,6.402,909,3.379,910,6.926,911,6.13,921,3.836,979,3.078,999,2.93,1004,2.329,1086,1.901,1134,3.398,1135,4.406,1244,5.302,1249,1.857,1352,2.47,1522,2.63,1576,3.362,1697,2.93,2003,3.137,2005,2.745,2094,3.361,2246,2.241,2253,2.298,2331,2.579,2456,1.917,2566,3.277,2808,3.577,2996,2.49,3137,3.725,3138,5.302,3139,3.361,3140,2.976,3141,2.579,3142,3.725,3143,5.877,3144,3.725,3145,4.695,3146,3.725,3147,3.725,3148,3.725,3149,3.725,3150,3.725,3151,3.137,3152,3.361,3153,3.137,3154,3.137,3155,3.725,3156,3.725,3157,3.725,3158,3.725,3159,3.725,3160,3.725,3161,3.725,3162,3.361,3163,3.725]],["component/172",[11,0.279,108,0.486]],["title/173-1",[11,13.888,3329,62.317]],["name/173-1",[]],["text/173-1",[]],["component/173-1",[]],["title/173-2",[11,11.796,177,33.208,1704,33.38]],["name/173-2",[]],["text/173-2",[]],["component/173-2",[]],["title/173-3",[3330,70.719]],["name/173-3",[]],["text/173-3",[]],["component/173-3",[]],["title/173-4",[3331,75.757]],["name/173-4",[]],["text/173-4",[]],["component/173-4",[]],["title/173-5",[2088,70.719]],["name/173-5",[]],["text/173-5",[]],["component/173-5",[]],["title/173-6",[3332,75.757]],["name/173-6",[]],["text/173-6",[]],["component/173-6",[]],["title/173-7",[3333,75.757]],["name/173-7",[]],["text/173-7",[]],["component/173-7",[]],["title/173-8",[11,11.796,161,32.552,177,33.208]],["name/173-8",[]],["text/173-8",[]],["component/173-8",[]],["title/173-9",[3334,75.757]],["name/173-9",[]],["text/173-9",[]],["component/173-9",[]],["title/173-10",[3335,70.719]],["name/173-10",[]],["text/173-10",[]],["component/173-10",[]],["title/173-11",[3336,70.719]],["name/173-11",[]],["text/173-11",[]],["component/173-11",[]],["title/173-12",[3337,75.757]],["name/173-12",[]],["text/173-12",[]],["component/173-12",[]],["title/173-13",[361,35.541,1704,39.302]],["name/173-13",[]],["text/173-13",[]],["component/173-13",[]],["title/173-14",[140,40.601,1704,39.302]],["name/173-14",[]],["text/173-14",[]],["component/173-14",[]],["title/173-15",[3338,75.757]],["name/173-15",[]],["text/173-15",[]],["component/173-15",[]],["title/173-16",[3339,75.757]],["name/173-16",[]],["text/173-16",[]],["component/173-16",[]],["title/173-17",[3340,83.973]],["name/173-17",[]],["text/173-17",[]],["component/173-17",[]],["title/173-18",[3341,75.757]],["name/173-18",[]],["text/173-18",[]],["component/173-18",[]],["title/173-19",[800,44.413,1704,39.302]],["name/173-19",[]],["text/173-19",[]],["component/173-19",[]],["title/173",[323,30.619,1704,39.302]],["name/173",[361,0.579,1704,0.64]],["text/173",[11,1.674,17,0.883,26,0.952,27,3.509,32,1.997,37,0.91,38,0.956,47,2.037,51,1.054,58,1.627,67,1.504,68,2.167,70,1.054,71,2.101,75,0.969,77,2.368,81,1.181,84,3.838,88,1.168,93,1.021,109,1.984,114,0.921,119,1.494,123,1.186,128,2.811,130,1.882,133,0.751,135,0.781,139,1.569,140,5.245,157,1.504,158,2.191,161,5.092,164,1.971,170,0.956,171,1.066,172,0.956,177,4.283,183,1.235,184,1.026,190,3.393,192,1.367,201,3.7,205,0.747,215,1.06,223,1.168,230,1.97,243,0.841,250,0.838,253,2.313,269,4.293,271,1.911,285,1.032,288,2.515,293,1.98,297,4.274,299,1.465,307,1.006,310,2.14,317,0.728,323,2.911,335,0.795,340,0.804,342,0.977,347,2.815,353,2.463,354,1.99,356,3.3,361,2.673,364,0.799,369,4.192,371,0.921,376,1.032,378,0.982,392,0.893,393,1.965,409,1.772,414,4.133,428,1.273,451,2.689,455,1.177,505,1.186,506,1.216,519,2.084,529,1.106,540,1.085,550,2.695,558,3.147,560,3.973,562,3.531,582,3.515,603,1.016,610,2.865,617,2.471,619,5.493,623,1.657,637,1.747,643,0.977,646,0.936,647,0.948,657,1.032,674,1.085,679,2.326,683,2.277,690,1.329,702,0.977,741,1.286,764,1.836,771,1.983,772,1.846,786,1.755,798,0.956,800,6.047,857,1.128,863,1.079,922,2.069,929,1.16,938,1.16,972,1.395,977,5.079,987,2.353,995,4.133,1004,1.128,1010,3.877,1012,1.419,1028,1.856,1035,4.198,1046,1.286,1086,0.921,1109,2.172,1165,2.855,1186,1.836,1196,6.095,1249,1.592,1353,1.151,1366,1.206,1420,1.237,1471,1.73,1494,1.206,1519,4.375,1558,3.973,1559,2.153,1560,1.627,1567,1.168,1607,1.441,1609,4.569,1613,1.16,1619,2.442,1638,5.924,1639,1.627,1645,1.781,1649,1.227,1704,6.804,1708,1.143,1963,2.277,2088,1.519,2089,4.542,2157,1.151,2499,2.512,2577,3.244,2718,2.512,2734,1.177,2758,5.659,2821,1.586,2822,1.732,2879,1.586,2904,1.362,2966,1.441,2995,1.249,2998,4.02,3000,1.237,3122,1.441,3141,2.211,3326,1.627,3329,7.796,3330,8.66,3331,2.881,3334,6.408,3335,1.519,3336,2.689,3342,1.804,3343,3.193,3344,2.326,3345,1.804,3346,3.433,3347,6.712,3348,3.193,3349,1.441,3350,6.651,3351,1.804,3352,1.804,3353,1.804,3354,1.804,3355,1.286,3356,5.939,3357,5.358,3358,1.804,3359,1.804,3360,1.804,3361,1.379,3362,1.627,3363,1.519,3364,1.519,3365,1.286,3366,1.627,3367,1.804,3368,3.286,3369,1.519,3370,1.804,3371,1.804,3372,1.804,3373,1.286,3374,1.519,3375,1.519,3376,3.067,3377,1.379,3378,3.193,3379,3.193,3380,2.881,3381,1.362,3382,1.804,3383,1.804,3384,3.391,3385,1.441,3386,1.804,3387,1.329,3388,1.804,3389,1.804,3390,1.804,3391,1.627,3392,1.804,3393,1.627,3394,1.804,3395,1.519,3396,2.881,3397,1.804,3398,1.804,3399,5.195]],["component/173",[11,0.279,108,0.486]],["title/174-1",[68,42.354]],["name/174-1",[]],["text/174-1",[]],["component/174-1",[]],["title/174-2",[2998,47.532]],["name/174-2",[]],["text/174-2",[]],["component/174-2",[]],["title/174-3",[2998,39.1,3400,58.174]],["name/174-3",[]],["text/174-3",[]],["component/174-3",[]],["title/174-4",[3401,75.757]],["name/174-4",[]],["text/174-4",[]],["component/174-4",[]],["title/174-5",[3402,83.973]],["name/174-5",[]],["text/174-5",[]],["component/174-5",[]],["title/174-6",[3403,83.973]],["name/174-6",[]],["text/174-6",[]],["component/174-6",[]],["title/174-7",[3404,83.973]],["name/174-7",[]],["text/174-7",[]],["component/174-7",[]],["title/174-8",[3405,83.973]],["name/174-8",[]],["text/174-8",[]],["component/174-8",[]],["title/174-9",[3406,83.973]],["name/174-9",[]],["text/174-9",[]],["component/174-9",[]],["title/174-10",[3407,75.757]],["name/174-10",[]],["text/174-10",[]],["component/174-10",[]],["title/174-11",[3408,83.973]],["name/174-11",[]],["text/174-11",[]],["component/174-11",[]],["title/174-12",[3409,83.973]],["name/174-12",[]],["text/174-12",[]],["component/174-12",[]],["title/174-13",[3385,67.077]],["name/174-13",[]],["text/174-13",[]],["component/174-13",[]],["title/174-14",[1326,35.686,2998,39.1]],["name/174-14",[]],["text/174-14",[]],["component/174-14",[]],["title/174-15",[226,38.901,290,49.776]],["name/174-15",[]],["text/174-15",[]],["component/174-15",[]],["title/174-16",[226,38.901,957,36.445]],["name/174-16",[]],["text/174-16",[]],["component/174-16",[]],["title/174-17",[2718,40.373,2998,39.1]],["name/174-17",[]],["text/174-17",[]],["component/174-17",[]],["title/174-18",[957,26.901,2998,28.86,3410,45.997,3411,33.807]],["name/174-18",[]],["text/174-18",[]],["component/174-18",[]],["title/174-19",[47,27.814,2998,33.208,3373,41.834]],["name/174-19",[]],["text/174-19",[]],["component/174-19",[]],["title/174-20",[37,22.739,38,23.889,370,25.922,753,24.318,1326,23.291]],["name/174-20",[]],["text/174-20",[]],["component/174-20",[]],["title/174-21",[753,24.318,1326,23.291,1471,24.429,3373,32.147,3412,34.479]],["name/174-21",[]],["text/174-21",[]],["component/174-21",[]],["title/174-22",[370,25.922,1326,23.291,1471,24.429,3373,32.147,3412,34.479]],["name/174-22",[]],["text/174-22",[]],["component/174-22",[]],["title/174-23",[753,24.318,1326,23.291,2456,23.196,3373,32.147,3412,34.479]],["name/174-23",[]],["text/174-23",[]],["component/174-23",[]],["title/174-24",[370,25.922,1326,23.291,2456,23.196,3373,32.147,3412,34.479]],["name/174-24",[]],["text/174-24",[]],["component/174-24",[]],["title/174-25",[1704,33.38,2998,33.208,3413,52.928]],["name/174-25",[]],["text/174-25",[]],["component/174-25",[]],["title/174-26",[1568,43.182,3368,52.828]],["name/174-26",[]],["text/174-26",[]],["component/174-26",[]],["title/174-27",[253,22.852,1568,36.675,3368,44.869]],["name/174-27",[]],["text/174-27",[]],["component/174-27",[]],["title/174-28",[3414,75.757]],["name/174-28",[]],["text/174-28",[]],["component/174-28",[]],["title/174-29",[3415,75.757]],["name/174-29",[]],["text/174-29",[]],["component/174-29",[]],["title/174-30",[3416,75.757]],["name/174-30",[]],["text/174-30",[]],["component/174-30",[]],["title/174-31",[93,39.1,859,49.256]],["name/174-31",[]],["text/174-31",[]],["component/174-31",[]],["title/174-32",[175,34.706,2998,39.1]],["name/174-32",[]],["text/174-32",[]],["component/174-32",[]],["title/174-33",[469,35.74]],["name/174-33",[]],["text/174-33",[]],["component/174-33",[]],["title/174-34",[139,28.818,299,26.909,2998,33.208]],["name/174-34",[]],["text/174-34",[]],["component/174-34",[]],["title/174-35",[253,26.906,3400,58.174]],["name/174-35",[]],["text/174-35",[]],["component/174-35",[]],["title/174",[3417,75.757]],["name/174",[139,0.553,2998,0.637]],["text/174",[0,0.751,4,0.182,9,0.519,11,0.482,12,0.77,13,0.199,14,0.351,15,0.397,21,0.703,22,0.685,24,0.211,25,0.781,26,0.601,27,2.46,32,0.978,33,0.223,35,1.156,36,1.843,37,1.209,38,1.27,45,1.369,46,1.752,47,2.678,49,1.157,50,0.979,53,0.965,59,0.703,60,0.173,63,0.609,65,0.718,67,2.66,68,0.746,70,0.456,74,3.086,75,0.216,76,0.574,77,0.38,78,0.217,81,0.289,84,0.456,86,0.589,90,0.299,93,0.227,97,0.233,99,1.462,100,0.222,101,0.623,102,0.614,103,1.228,105,2.227,106,1.808,113,0.579,117,2.026,118,0.203,119,1.603,128,2.076,130,0.931,132,0.181,135,0.64,139,3.384,140,0.459,144,0.201,148,1.233,149,0.338,152,0.275,157,0.991,158,1.235,160,2.887,161,0.223,163,0.707,164,3.815,167,0.307,169,0.224,170,3.413,172,0.783,175,3.112,176,0.915,178,0.497,180,0.369,181,0.478,183,0.814,185,0.322,187,0.246,190,2.003,192,0.172,194,0.211,199,0.734,201,1.097,205,0.166,215,0.459,216,0.199,217,0.256,221,0.378,226,3.694,230,0.248,231,0.601,236,0.572,237,0.644,240,0.435,242,1.637,244,1.804,245,0.749,248,0.812,250,0.978,252,1.4,253,1.144,265,0.568,268,0.405,269,4.899,271,3.063,274,0.727,280,1.054,281,1.041,285,1.204,288,0.716,289,2.424,290,6.178,291,0.562,293,0.563,296,1.245,297,1.442,299,0.184,302,0.187,303,3.342,305,0.346,308,1.459,309,0.421,310,0.165,317,3.434,323,1.988,324,0.262,325,0.498,328,0.307,330,1.49,331,1.48,332,0.614,335,2.989,337,1.64,340,2.083,341,0.395,342,0.218,347,0.218,353,0.853,360,0.773,361,0.402,363,0.223,364,0.178,369,0.727,370,2.351,371,2.289,373,0.414,378,0.98,383,0.442,392,0.386,393,1.457,406,0.559,407,0.214,409,1.483,414,1.682,424,0.482,439,0.47,444,0.461,450,1.052,455,0.262,458,0.2,461,0.498,469,1.138,472,0.224,479,0.703,489,5.244,495,0.392,507,1.163,514,0.286,519,0.262,520,1.76,525,0.224,529,0.478,532,0.256,536,0.502,538,0.562,540,1.442,544,0.321,547,0.338,548,0.293,550,2.854,558,0.414,569,2.082,571,1.259,573,0.912,582,3.246,610,0.713,611,1.199,617,1.211,621,0.787,623,3.574,629,0.248,630,0.491,633,0.506,641,0.774,644,0.482,645,0.93,646,0.405,647,0.211,649,0.227,651,0.246,653,1.149,657,0.651,660,0.959,661,1.131,667,0.307,668,0.225,674,0.242,696,0.482,702,0.423,703,0.478,707,0.717,709,0.286,713,0.219,718,0.522,726,0.243,751,0.258,753,3.342,759,1.117,764,1.378,765,0.557,772,0.855,778,4.144,786,1.317,789,0.296,800,0.258,803,1.682,816,0.451,818,0.26,827,0.258,835,0.461,837,0.321,842,0.522,856,0.253,857,2.143,859,0.557,863,1.077,871,0.249,879,0.253,907,0.286,908,0.275,909,0.231,912,0.321,917,0.617,929,0.502,957,3.056,970,0.307,972,0.341,977,0.669,991,0.286,993,0.624,995,2.006,997,3.052,1004,1.671,1010,5.596,1028,0.662,1030,0.727,1035,1.168,1036,0.645,1039,0.275,1046,0.557,1055,2.135,1056,0.531,1058,0.896,1062,0.311,1064,0.557,1086,2.19,1089,0.54,1102,0.239,1109,0.273,1119,0.83,1129,0.246,1131,0.509,1135,0.689,1137,0.303,1156,0.321,1161,0.362,1165,0.626,1167,0.278,1186,0.85,1187,0.275,1188,1.005,1202,0.299,1215,0.83,1216,1.102,1224,1.224,1249,2.888,1252,0.253,1253,0.253,1270,0.657,1325,0.296,1326,3.2,1327,0.546,1338,0.774,1340,0.256,1353,1.149,1364,0.316,1367,0.286,1368,0.321,1380,1.043,1393,1.516,1417,0.321,1421,0.321,1422,0.321,1423,0.624,1434,1.089,1435,1.311,1446,0.597,1450,0.251,1471,1.448,1493,0.296,1494,0.522,1511,0.321,1512,0.321,1514,0.338,1520,0.273,1521,0.338,1559,3.905,1568,1.671,1576,0.446,1602,0.703,1607,1.682,1613,1.354,1615,0.959,1619,0.307,1645,1.174,1649,0.774,1687,0.289,1688,0.307,1696,0.362,1704,3.92,1705,0.722,1706,0.281,1708,0.495,1840,0.338,1901,0.271,1902,0.575,1908,0.575,1942,0.296,1945,0.557,1963,1.284,2022,1.342,2038,0.562,2085,0.289,2089,0.871,2092,1.245,2103,0.286,2114,0.296,2117,0.289,2118,1.947,2157,0.944,2239,0.871,2246,0.47,2253,0.703,2333,0.526,2343,0.246,2415,0.959,2423,0.281,2434,0.326,2443,0.326,2451,2.271,2456,1.882,2499,0.316,2503,0.332,2577,1.359,2580,1.868,2600,0.353,2625,0.321,2705,0.286,2716,2.508,2718,5.011,2734,0.743,2758,2.333,2797,0.687,2801,1.42,2875,1.326,2878,0.345,2885,0.634,2909,0.332,2917,0.316,2961,0.275,2966,0.321,2968,0.93,2972,0.597,2995,4.2,2997,0.321,2998,6.895,3032,0.597,3062,0.338,3265,0.338,3316,1.947,3330,0.338,3332,0.362,3335,1.773,3336,1.245,3337,1.334,3338,1.027,3339,1.027,3341,0.362,3346,2.135,3347,0.338,3350,0.624,3355,3.923,3368,3.281,3373,3.33,3374,2.685,3375,2.887,3380,0.362,3381,0.303,3384,0.262,3385,3.582,3387,3.573,3393,0.362,3395,2.251,3400,7.321,3401,3.093,3407,0.362,3410,1.9,3411,1.396,3412,0.307,3413,1.9,3414,0.704,3415,0.362,3416,1.027,3417,0.704,3418,1.8,3419,2.673,3420,2.588,3421,3.266,3422,0.402,3423,5.501,3424,1.969,3425,4.484,3426,0.781,3427,0.338,3428,1.139,3429,3.3,3430,0.91,3431,0.307,3432,0.91,3433,2.473,3434,3.658,3435,0.402,3436,0.307,3437,0.402,3438,0.402,3439,0.402,3440,0.362,3441,0.402,3442,0.402,3443,0.402,3444,0.704,3445,0.321,3446,0.402,3447,0.402,3448,0.402,3449,0.402,3450,0.362,3451,0.402,3452,2.018,3453,0.402,3454,0.402,3455,0.575,3456,3.3,3457,4.963,3458,0.402,3459,2.106,3460,2.649,3461,3.428,3462,1.139,3463,2.411,3464,0.402,3465,0.402,3466,1.139,3467,0.402,3468,0.338,3469,0.402,3470,0.704,3471,0.624,3472,1.419,3473,0.402,3474,1.478,3475,0.402,3476,0.402,3477,0.402,3478,0.402,3479,0.597,3480,0.789,3481,0.338,3482,1.077,3483,1.245,3484,0.338,3485,0.781,3486,0.781,3487,0.781,3488,1.334,3489,1.245,3490,0.402,3491,0.402,3492,0.402,3493,1.139,3494,1.139,3495,1.139,3496,1.139,3497,1.139,3498,1.478,3499,1.139,3500,0.781,3501,0.781,3502,6.065,3503,5.347,3504,0.402,3505,0.781,3506,1.139,3507,0.704,3508,0.959,3509,0.781,3510,1.334,3511,2.251,3512,0.781,3513,0.781,3514,0.781,3515,0.402,3516,0.402,3517,0.402,3518,1.478,3519,0.307,3520,1.245,3521,0.402,3522,1.139,3523,0.839,3524,1.027,3525,0.959,3526,0.402,3527,0.402,3528,0.402,3529,0.402,3530,0.321,3531,0.781,3532,0.402,3533,0.402,3534,1.139,3535,1.139,3536,0.402,3537,1.139,3538,0.402,3539,0.402,3540,0.402,3541,0.402,3542,2.396,3543,1.8,3544,3.428,3545,0.657,3546,0.657,3547,0.781,3548,1.116,3549,0.402,3550,0.402,3551,1.139,3552,0.402,3553,1.139,3554,1.139,3555,0.781,3556,0.402,3557,1.478,3558,0.402,3559,1.139,3560,1.139,3561,1.139,3562,1.139,3563,0.402,3564,0.402,3565,0.293,3566,0.402,3567,1.478,3568,0.402,3569,0.402,3570,0.402,3571,0.402,3572,0.402,3573,0.402,3574,0.402,3575,0.402,3576,0.781,3577,0.402,3578,0.402,3579,0.402,3580,0.959,3581,0.402,3582,0.704,3583,0.781,3584,0.402,3585,0.781,3586,0.402,3587,0.781,3588,0.402,3589,0.402,3590,0.781,3591,0.402,3592,0.362,3593,0.402,3594,0.264,3595,1.139,3596,0.402,3597,0.781,3598,0.781,3599,0.402,3600,0.402,3601,0.402,3602,0.402,3603,0.402,3604,0.402,3605,0.781,3606,3.188,3607,0.781,3608,0.781,3609,0.402,3610,0.402,3611,0.402,3612,0.362,3613,0.402,3614,0.624,3615,0.353,3616,1.139,3617,0.781,3618,0.781,3619,0.781,3620,0.781,3621,1.139,3622,0.781,3623,0.657,3624,0.781,3625,0.402,3626,0.338,3627,0.321,3628,0.338,3629,0.338,3630,0.402,3631,0.402,3632,0.402,3633,0.402,3634,0.402,3635,0.781,3636,0.402,3637,0.402,3638,1.139,3639,0.402,3640,0.402,3641,0.402,3642,0.307,3643,0.781,3644,0.402,3645,0.362,3646,0.402,3647,0.402,3648,0.402,3649,0.402,3650,0.781,3651,0.402,3652,0.402,3653,0.781,3654,0.362,3655,0.362,3656,0.402,3657,0.402,3658,0.402,3659,0.402,3660,0.402,3661,0.402,3662,0.402,3663,0.338,3664,0.402,3665,0.353,3666,0.402,3667,0.402,3668,0.704,3669,0.402,3670,0.839,3671,0.91,3672,0.402,3673,0.402,3674,0.402,3675,0.402,3676,0.338,3677,0.402,3678,2.673,3679,1.478,3680,0.781,3681,0.781,3682,0.402,3683,0.704,3684,1.334,3685,0.402,3686,0.402,3687,0.402,3688,0.402,3689,0.781,3690,0.781,3691,0.781,3692,0.781,3693,0.402,3694,0.959]],["component/174",[11,0.279,108,0.486]],["title/175-1",[113,27.038,3411,45.802]],["name/175-1",[]],["text/175-1",[]],["component/175-1",[]],["title/175-2",[93,39.1,2580,48.285]],["name/175-2",[]],["text/175-2",[]],["component/175-2",[]],["title/175-3",[244,27.793,3695,50.897]],["name/175-3",[]],["text/175-3",[]],["component/175-3",[]],["title/175-4",[3696,75.757]],["name/175-4",[]],["text/175-4",[]],["component/175-4",[]],["title/175-5",[139,33.93,1645,38.515]],["name/175-5",[]],["text/175-5",[]],["component/175-5",[]],["title/175-6",[1645,38.515,3594,45.438]],["name/175-6",[]],["text/175-6",[]],["component/175-6",[]],["title/175-7",[2379,70.719]],["name/175-7",[]],["text/175-7",[]],["component/175-7",[]],["title/175-8",[274,44.092,1645,38.515]],["name/175-8",[]],["text/175-8",[]],["component/175-8",[]],["title/175-9",[309,37.26,1645,38.515]],["name/175-9",[]],["text/175-9",[]],["component/175-9",[]],["title/175-10",[1645,38.515,3697,62.317]],["name/175-10",[]],["text/175-10",[]],["component/175-10",[]],["title/175-11",[938,53.991]],["name/175-11",[]],["text/175-11",[]],["component/175-11",[]],["title/175-12",[1420,47.393,1645,38.515]],["name/175-12",[]],["text/175-12",[]],["component/175-12",[]],["title/175-13",[406,41.248]],["name/175-13",[]],["text/175-13",[]],["component/175-13",[]],["title/175-14",[1028,48.809]],["name/175-14",[]],["text/175-14",[]],["component/175-14",[]],["title/175-15",[253,32.708]],["name/175-15",[]],["text/175-15",[]],["component/175-15",[]],["title/175-16",[1156,55.177,1645,38.515]],["name/175-16",[]],["text/175-16",[]],["component/175-16",[]],["title/175-17",[1645,38.515,3698,58.174]],["name/175-17",[]],["text/175-17",[]],["component/175-17",[]],["title/175-18",[139,33.93,469,29.4]],["name/175-18",[]],["text/175-18",[]],["component/175-18",[]],["title/175-19",[185,28.453,2630,66.332]],["name/175-19",[]],["text/175-19",[]],["component/175-19",[]],["title/175-20",[221,33.442,253,26.906]],["name/175-20",[]],["text/175-20",[]],["component/175-20",[]],["title/175-21",[469,29.4,1112,40.15]],["name/175-21",[]],["text/175-21",[]],["component/175-21",[]],["title/175-22",[11,11.796,185,24.166,1102,34.882]],["name/175-22",[]],["text/175-22",[]],["component/175-22",[]],["title/175",[93,47.532]],["name/175",[93,1.152]],["text/175",[0,1.049,4,0.151,7,0.412,8,0.277,9,0.296,11,1.063,13,0.617,19,0.521,22,0.2,24,0.652,26,0.343,27,3.169,32,1.372,33,1.394,35,0.86,36,0.192,37,0.626,38,0.344,40,0.289,41,0.185,42,0.86,44,0.384,45,1.743,46,0.834,47,0.72,49,0.214,50,1.027,51,0.194,52,0.427,53,0.424,54,0.208,57,0.271,60,0.144,61,0.221,62,0.224,63,0.509,65,0.866,66,0.95,67,1.074,68,0.168,71,0.263,73,0.766,75,0.511,76,1.268,77,1.054,78,0.514,81,0.24,89,0.205,92,0.494,93,2.916,95,0.672,96,0.376,97,0.378,99,1.247,100,0.359,101,0.355,102,0.35,103,0.333,105,0.473,106,0.579,109,1.459,111,0.198,113,2.794,115,1.4,117,2.418,119,1.913,121,0.309,123,0.817,126,0.162,127,0.763,128,1.677,130,1.971,131,0.848,132,0.15,133,0.271,135,0.772,137,0.752,139,2.393,140,0.196,141,0.461,142,0.161,144,1.019,148,0.334,152,0.446,157,0.959,158,0.228,159,0.743,163,0.403,164,1.046,165,1.248,166,0.434,168,0.219,169,0.531,170,1.079,171,0.563,172,0.945,173,0.315,175,0.479,176,1.159,177,0.368,178,0.542,179,0.577,180,0.962,181,0.204,183,3.895,184,2.127,185,4.643,186,1.819,188,3.004,190,1.052,192,1.172,194,0.175,197,0.612,198,0.187,200,0.178,201,0.647,205,4.182,206,0.941,208,0.608,214,0.784,216,1.461,218,0.324,220,0.214,223,1.773,226,0.187,227,0.165,228,0.245,229,0.58,230,0.766,231,0.502,234,0.228,236,0.896,237,1.924,238,0.58,240,0.846,241,0.421,242,1.981,243,0.949,244,3.797,245,0.817,246,0.427,248,0.237,249,0.173,250,1.272,251,0.194,252,2.433,253,1.309,256,0.738,265,0.475,268,0.925,269,4.307,271,3.523,272,0.554,273,0.514,274,1.885,276,0.599,278,1.501,279,0.306,281,1.318,282,0.45,286,0.349,287,0.726,288,0.735,289,2.557,293,0.363,295,0.702,298,0.702,299,0.818,302,0.828,303,0.173,305,0.422,309,0.514,310,0.939,316,0.453,317,1.433,320,0.295,323,1.011,324,0.424,325,0.969,328,0.254,329,1.223,331,1.614,332,0.819,335,0.897,337,1.048,340,0.554,341,3.615,342,0.516,343,0.237,347,0.516,353,1.939,354,2.257,356,1.548,359,0.528,360,0.649,363,0.689,364,1.575,371,3.559,373,0.176,374,0.17,376,0.19,378,0.181,380,1.591,382,0.463,383,0.188,384,0.354,392,2.264,393,1.791,406,2.839,407,0.949,409,0.185,414,0.209,420,0.297,423,0.398,428,0.459,439,0.747,447,0.475,450,0.38,454,0.418,457,0.221,458,0.324,467,1.051,469,2.193,470,0.209,471,0.254,472,0.531,473,0.237,474,0.245,479,0.309,481,0.204,482,0.188,483,0.172,484,1.124,489,0.647,491,0.23,497,0.214,501,0.364,502,0.333,503,0.357,506,1.537,507,0.686,511,0.446,512,0.28,513,0.28,516,1.512,520,0.359,525,3.156,527,0.215,532,0.415,540,0.2,541,0.183,542,0.219,546,1.922,550,0.173,551,2.032,558,0.176,569,2.616,571,1.964,572,0.191,573,0.401,576,0.251,582,2.481,593,0.182,597,0.237,599,0.608,603,1.284,609,1.007,610,1.621,611,0.892,612,1.082,617,0.374,619,0.999,620,0.728,621,0.661,623,1.532,624,1.054,627,1.02,630,0.599,631,0.766,632,0.224,634,0.588,637,0.355,638,0.24,639,0.228,640,0.728,643,0.18,645,0.599,646,0.337,647,0.341,649,0.539,651,0.204,653,0.969,658,0.219,668,0.851,670,0.262,682,0.222,683,0.237,688,0.975,696,0.401,698,1.256,699,0.262,700,0.28,702,0.352,703,1.248,704,0.28,707,0.209,709,1.952,711,0.254,712,0.237,713,2.133,719,1.852,722,0.747,741,0.237,746,0.479,751,0.976,752,0.217,753,0.35,756,0.913,758,0.547,759,0.831,760,0.586,763,0.3,764,2.352,765,0.237,770,0.254,771,0.207,772,0.192,773,0.362,778,1.627,779,0.463,786,2.514,787,0.3,788,0.438,792,0.266,795,2.359,797,0.497,798,0.176,800,0.612,803,0.266,806,4.088,809,0.266,810,0.3,811,0.24,816,0.718,818,0.804,827,0.418,835,0.197,837,0.266,842,1.83,856,0.409,857,0.406,859,0.679,861,0.463,863,2.546,864,0.418,870,1.582,871,0.403,881,0.245,882,0.586,917,0.18,922,0.215,938,0.612,957,0.343,972,0.996,973,0.28,975,0.209,976,0.28,977,0.73,980,0.237,982,0.23,991,0.463,995,0.955,996,0.45,997,0.781,1003,0.235,1004,0.776,1008,0.653,1010,1.329,1011,0.219,1028,2.277,1030,1.138,1034,0.266,1035,0.689,1036,0.703,1039,0.228,1055,0.519,1056,0.442,1058,0.262,1084,0.915,1086,1.715,1102,6.187,1110,0.27,1112,1.461,1119,0.242,1128,0.226,1129,0.398,1131,1.787,1135,0.201,1142,0.653,1154,1.202,1156,2.986,1165,0.357,1173,0.442,1177,0.266,1181,0.28,1182,0.248,1183,0.519,1186,0.191,1191,1.501,1192,0.266,1194,0.519,1195,0.571,1196,0.254,1197,1.37,1198,0.702,1205,0.992,1217,0.71,1224,0.844,1246,0.27,1249,2.823,1252,0.409,1323,0.266,1325,0.245,1326,0.921,1338,0.442,1343,0.626,1344,1.119,1352,1.35,1353,2.821,1363,0.586,1366,0.222,1380,3.439,1390,1.258,1391,0.196,1393,0.28,1399,0.547,1400,0.586,1402,0.248,1417,1.213,1420,1.724,1435,1.299,1450,1.425,1471,0.966,1493,0.915,1494,0.83,1528,0.254,1537,0.3,1539,0.859,1559,0.438,1564,0.262,1568,0.208,1576,2.528,1602,4.302,1603,0.738,1605,0.3,1645,5.872,1649,0.226,1660,2.106,1694,0.571,1695,0.963,1697,0.262,1704,0.864,1705,0.412,1706,0.233,1708,0.787,1846,0.233,1901,0.224,1902,0.479,1903,0.3,1945,0.237,1962,0.222,1965,0.761,2004,0.266,2005,0.245,2038,0.24,2039,0.431,2057,0.245,2059,0.586,2060,0.761,2117,1.094,2118,0.242,2150,0.251,2152,0.3,2157,0.793,2161,0.222,2235,0.254,2239,0.254,2246,0.747,2247,0.24,2253,3.772,2327,0.519,2333,0.438,2335,0.586,2375,1.278,2376,0.519,2379,0.28,2394,1.852,2410,0.473,2415,0.28,2423,1.757,2433,1.815,2435,0.309,2441,0.266,2442,1.424,2451,1.107,2456,0.639,2460,0.787,2487,0.851,2488,0.864,2499,1.194,2500,0.624,2501,0.319,2502,0.624,2504,0.319,2512,1.484,2524,0.319,2525,1.791,2530,0.309,2577,0.491,2580,1.757,2604,0.915,2628,1.146,2718,0.557,2730,0.293,2737,0.233,2755,0.251,2758,0.573,2775,0.275,2786,0.624,2797,1.335,2821,0.571,2873,2.936,2875,0.702,2904,0.251,2962,1.079,2968,0.781,2969,0.519,2974,2.47,2975,0.28,2987,0.424,2989,0.266,2991,0.266,2995,1.234,2996,0.222,2998,1.29,3000,1.042,3002,0.679,3003,0.519,3117,4.522,3264,1.12,3316,2.724,3328,1.37,3344,0.242,3349,0.266,3350,0.761,3355,0.463,3361,0.254,3365,0.237,3368,0.254,3374,0.802,3375,0.28,3384,0.424,3411,0.431,3420,0.491,3427,0.547,3430,2.008,3431,0.728,3471,0.761,3482,0.242,3489,1.278,3507,0.3,3508,0.547,3511,0.28,3520,0.802,3524,0.859,3525,0.28,3548,0.251,3565,0.242,3582,1.12,3594,0.219,3626,0.28,3627,0.266,3628,0.28,3629,0.802,3642,0.254,3645,0.586,3695,1.119,3696,0.859,3697,0.3,3698,1.046,3699,0.333,3700,0.333,3701,0.468,3702,0.3,3703,0.333,3704,1.314,3705,0.28,3706,0.333,3707,0.3,3708,0.333,3709,0.586,3710,0.65,3711,0.333,3712,2.664,3713,0.333,3714,0.952,3715,0.333,3716,0.333,3717,0.333,3718,0.333,3719,0.333,3720,0.333,3721,0.333,3722,0.3,3723,0.3,3724,0.333,3725,0.802,3726,0.3,3727,0.266,3728,1.12,3729,1.242,3730,0.519,3731,0.333,3732,0.333,3733,0.333,3734,0.333,3735,0.333,3736,0.333,3737,0.333,3738,0.333,3739,0.65,3740,0.333,3741,0.333,3742,0.333,3743,0.333,3744,0.728,3745,1.837,3746,0.952,3747,0.65,3748,0.333,3749,0.586,3750,0.333,3751,0.333,3752,0.333,3753,0.333,3754,0.3,3755,0.333,3756,0.333,3757,0.333,3758,0.3,3759,1.518,3760,1.783,3761,1.242,3762,2.036,3763,0.952,3764,0.65,3765,0.333,3766,0.333,3767,0.3,3768,0.3,3769,0.333,3770,1.518,3771,0.333,3772,0.333,3773,0.65,3774,0.333,3775,0.333,3776,0.333,3777,0.333,3778,0.333,3779,0.333,3780,0.333,3781,0.333,3782,0.3,3783,0.497,3784,0.3,3785,0.333,3786,0.333,3787,0.258,3788,0.333,3789,0.333,3790,0.333,3791,0.333,3792,0.952,3793,0.333,3794,0.65,3795,0.333,3796,0.333,3797,0.952,3798,0.333,3799,0.333,3800,1.242,3801,0.333,3802,0.333,3803,0.333,3804,0.333,3805,0.333,3806,0.333,3807,0.333,3808,0.28,3809,0.333,3810,0.333,3811,0.333,3812,0.992,3813,0.333,3814,0.459,3815,0.333,3816,0.333,3817,0.65,3818,0.65,3819,0.333,3820,0.333,3821,0.333,3822,0.333,3823,0.333,3824,0.333,3825,0.952,3826,0.333,3827,0.333,3828,0.65,3829,0.65,3830,0.65,3831,0.65,3832,0.333,3833,0.333,3834,0.28,3835,0.293,3836,0.3,3837,0.333,3838,0.586,3839,0.586,3840,0.333,3841,0.3,3842,0.624,3843,0.586,3844,0.3,3845,0.333,3846,0.333,3847,0.333,3848,0.333,3849,0.333,3850,0.333,3851,0.333,3852,0.333,3853,0.333,3854,0.333,3855,0.333,3856,0.952,3857,0.333,3858,0.65,3859,0.65,3860,0.65,3861,0.333,3862,0.333,3863,0.333,3864,0.333,3865,0.952,3866,0.333,3867,0.333,3868,0.333,3869,0.333,3870,0.333,3871,0.28,3872,0.333,3873,0.333,3874,0.333,3875,0.333,3876,0.333,3877,1.242,3878,0.333,3879,0.3,3880,2.359,3881,0.333,3882,0.333,3883,0.65,3884,0.3,3885,0.333,3886,0.28,3887,0.333,3888,0.333,3889,0.333,3890,0.28,3891,0.586,3892,0.333,3893,0.586,3894,0.586,3895,1.242,3896,0.333,3897,0.333,3898,0.586,3899,0.28,3900,0.3,3901,0.3,3902,1.046,3903,0.333,3904,0.333,3905,0.333,3906,0.333,3907,0.586,3908,0.333,3909,0.3,3910,0.333,3911,0.333,3912,2.83,3913,0.333,3914,1.271,3915,0.333,3916,0.333,3917,0.28,3918,0.333,3919,0.333,3920,0.333,3921,0.333,3922,0.333,3923,0.333,3924,0.333,3925,0.333,3926,0.65,3927,0.333,3928,0.333,3929,0.3,3930,0.333,3931,0.333,3932,1.278,3933,0.333,3934,0.333,3935,0.65,3936,0.65,3937,1.12,3938,0.333,3939,0.65,3940,0.333,3941,0.333,3942,0.65,3943,0.333,3944,0.319,3945,0.333,3946,0.333,3947,0.859,3948,0.333,3949,0.333,3950,0.333,3951,0.333,3952,0.333,3953,0.333,3954,0.333,3955,0.65,3956,0.333,3957,0.65,3958,1.12,3959,0.333,3960,0.333,3961,0.333,3962,0.333,3963,0.333,3964,0.65,3965,0.65,3966,0.333,3967,0.333,3968,0.333,3969,0.333,3970,0.333,3971,0.333,3972,0.859,3973,0.333,3974,0.333,3975,0.65,3976,1.12,3977,0.65,3978,0.65,3979,0.333,3980,0.333,3981,0.333,3982,1.837,3983,0.65,3984,0.333,3985,0.333,3986,0.3,3987,0.333,3988,0.3,3989,0.802,3990,0.28,3991,0.859,3992,0.859,3993,0.266,3994,0.586,3995,0.547,3996,0.3,3997,0.3,3998,0.3,3999,0.3,4000,0.3,4001,0.333,4002,0.333,4003,0.3,4004,0.3,4005,0.65,4006,0.547,4007,0.333,4008,0.3,4009,0.333,4010,0.333,4011,0.3,4012,0.333,4013,0.333,4014,0.333,4015,0.333,4016,0.586,4017,0.3,4018,0.333,4019,0.333,4020,0.333,4021,0.333,4022,1.608,4023,0.65,4024,0.333,4025,0.952,4026,0.333,4027,0.333,4028,0.3,4029,0.333,4030,0.333,4031,0.333,4032,0.333,4033,0.952,4034,0.728,4035,0.952,4036,0.586,4037,0.333,4038,0.586,4039,0.333,4040,0.333,4041,0.333,4042,0.333,4043,0.333,4044,0.333,4045,0.65,4046,0.333,4047,0.28,4048,0.65,4049,1.37,4050,0.309,4051,0.333,4052,0.333,4053,0.333,4054,0.333,4055,0.333,4056,0.333,4057,0.333,4058,0.333,4059,0.333,4060,0.333,4061,0.65,4062,0.333,4063,0.65,4064,0.333,4065,0.333,4066,0.333,4067,0.333,4068,0.497,4069,0.333,4070,0.333,4071,0.333,4072,0.333,4073,0.65,4074,0.333,4075,0.333,4076,0.333,4077,0.333,4078,0.333,4079,0.333,4080,0.333,4081,0.333,4082,0.333,4083,0.65,4084,0.333,4085,0.3,4086,0.3,4087,0.3,4088,0.333,4089,0.3,4090,0.333,4091,0.3,4092,0.3,4093,0.547,4094,0.266,4095,0.3,4096,0.333,4097,1.783,4098,0.333,4099,0.333,4100,0.333,4101,0.333,4102,0.333,4103,0.333,4104,0.333,4105,0.333,4106,0.333,4107,0.333,4108,0.333,4109,0.333,4110,0.333,4111,0.333,4112,0.333,4113,0.333,4114,0.333,4115,0.333,4116,0.333,4117,0.333,4118,0.333,4119,0.333,4120,0.333,4121,0.333,4122,0.333,4123,0.333,4124,0.333,4125,0.3,4126,0.65,4127,0.333,4128,0.333,4129,0.333,4130,0.333,4131,0.3,4132,0.333,4133,0.333,4134,0.333,4135,0.333,4136,0.333,4137,0.3,4138,0.333,4139,0.333,4140,0.65,4141,0.333,4142,0.333,4143,0.333]],["component/175",[11,0.279,108,0.486]],["title/176-1",[130,16.16,1131,33.278,1249,25.422,1613,32.782]],["name/176-1",[]],["text/176-1",[]],["component/176-1",[]],["title/176-2",[185,28.453,1613,44.413]],["name/176-2",[]],["text/176-2",[]],["component/176-2",[]],["title/176-3",[185,28.453,3364,58.174]],["name/176-3",[]],["text/176-3",[]],["component/176-3",[]],["title/176-4",[185,28.453,3546,58.174]],["name/176-4",[]],["text/176-4",[]],["component/176-4",[]],["title/176",[1613,53.991]],["name/176",[164,0.516,201,0.586]],["text/176",[0,1.323,11,0.36,21,1.956,26,1.673,27,3.217,32,0.831,37,2.605,47,1.503,50,1.745,68,0.902,71,2.088,77,2.178,81,3.383,82,3.595,88,1.159,115,0.848,123,1.177,127,2.145,128,2.797,130,2.516,148,2.196,164,4.88,165,1.575,170,0.948,173,0.866,175,3.283,178,0.781,180,2.017,181,1.943,183,1.997,185,2.912,190,1.638,194,2.243,198,1.007,200,2.282,201,5.703,205,0.741,221,0.866,223,1.159,229,3.598,230,1.956,237,3.612,242,1.768,243,1.478,248,1.275,253,0.697,268,0.928,269,4.282,271,2.296,273,2.303,274,1.142,292,1.007,293,0.682,296,1.506,303,3.908,307,2.38,308,1.09,309,2.303,317,2.083,323,0.793,331,4.295,335,2.275,340,1.414,347,1.718,353,4.082,354,1.977,360,1.658,368,1.018,369,1.142,393,0.818,406,0.879,407,4.733,414,5.22,424,1.103,439,2.568,450,2.495,484,4.58,489,0.932,501,3.961,525,3.942,529,1.943,541,2.346,550,0.928,558,3.462,577,1.35,582,1.569,610,2.491,611,0.895,619,2.392,643,2.313,646,1.644,682,3.452,748,1.25,759,0.834,773,1.768,777,3.41,786,2.346,788,1.206,912,1.429,929,2.038,936,1.051,997,1.126,1003,1.263,1010,2.069,1028,1.04,1035,3.625,1086,3.608,1109,1.216,1119,2.309,1131,4.265,1135,1.083,1202,1.334,1249,3.756,1326,2.205,1340,1.142,1343,2.085,1390,2.238,1394,1.263,1450,1.982,1503,2.62,1567,1.159,1568,1.118,1576,1.023,1607,1.429,1613,6.764,1615,1.506,1704,1.018,1708,1.134,1713,2.284,1942,3.145,2039,1.186,2089,1.368,2093,1.429,2157,1.142,2239,2.424,2423,5.548,2433,3.917,2451,4.39,2657,4.542,2718,3.452,2758,3.554,2878,1.538,2995,5.496,3140,1.429,3141,1.239,3333,1.614,3346,3.41,3355,4.212,3364,5.954,3365,7.209,3391,1.614,3396,3.851,3424,1.318,3433,1.506,3436,1.368,3440,5.329,3445,2.532,3472,3.481,3479,3.949,3480,4.895,3481,1.506,3482,2.309,3483,1.506,3545,7.489,3546,4.975,3623,1.506,3728,1.614,3783,1.368,4085,2.86,4094,3.41,4144,1.478,4145,1.789,4146,1.614,4147,4.269,4148,5.329,4149,1.789,4150,1.789,4151,1.789,4152,1.789,4153,5.164,4154,1.789,4155,1.789,4156,1.789,4157,1.789,4158,1.789,4159,3.17,4160,1.789,4161,1.789,4162,1.789,4163,1.789,4164,1.789,4165,1.614,4166,1.227,4167,1.789,4168,4.349,4169,1.789,4170,1.789,4171,1.789,4172,3.17,4173,1.789,4174,1.789,4175,1.789,4176,3.17,4177,3.17,4178,3.17,4179,3.17,4180,4.269,4181,1.789,4182,1.789,4183,1.789,4184,3.17,4185,1.789,4186,1.789,4187,1.789,4188,3.682,4189,1.429,4190,1.614,4191,1.789,4192,3.17,4193,1.789,4194,4.269,4195,3.595,4196,1.789,4197,3.17,4198,1.789,4199,1.789,4200,2.86,4201,1.789,4202,1.789]],["component/176",[11,0.279,108,0.486]],["title/177",[3479,64.221]],["name/177",[164,0.516,3480,0.779]],["text/177",[26,3.255,29,4.783,46,3.39,50,2.521,77,2.057,81,2.282,96,3.566,130,2.71,173,2.987,178,2.694,190,3.187,194,3.241,201,4.453,210,3.51,237,3.723,242,5.47,252,2.71,290,6.16,303,5.089,310,2.541,316,4.067,317,3.449,323,2.735,324,4.027,327,3.69,332,3.328,383,4.839,414,6.175,424,3.806,453,3.712,489,3.214,525,3.44,529,3.782,550,3.2,611,3.088,649,3.492,753,3.328,798,3.269,818,3.996,972,2.694,1086,5.406,1202,4.6,1390,4.355,1613,3.967,1702,5.195,2394,4.546,2718,7.227,3355,4.399,3385,4.928,3395,7.2,3424,4.546,3445,4.928,3472,4.159,3479,9.025,3480,8.329,3482,4.494,3483,5.195,3594,4.058,4203,11.124,4204,5.566,4205,5.566]],["component/177",[11,0.279,108,0.486]],["title/178-1",[183,19.716,516,30.677,773,28.428,1142,34.981]],["name/178-1",[]],["text/178-1",[]],["component/178-1",[]],["title/178-2",[409,32.552,841,39.221,3006,49.409]],["name/178-2",[]],["text/178-2",[]],["component/178-2",[]],["title/178-3",[572,33.734,841,39.221,4206,52.928]],["name/178-3",[]],["text/178-3",[]],["component/178-3",[]],["title/178-4",[214,30.31,698,36.194,1902,43.228]],["name/178-4",[]],["text/178-4",[]],["component/178-4",[]],["title/178-5",[469,17.197,1112,23.485,2451,25.09,3880,50.027,4207,40.405]],["name/178-5",[]],["text/178-5",[]],["component/178-5",[]],["title/178-6",[3890,70.719]],["name/178-6",[]],["text/178-6",[]],["component/178-6",[]],["title/178-7",[698,51.805]],["name/178-7",[]],["text/178-7",[]],["component/178-7",[]],["title/178-8",[698,42.614,1009,47.83]],["name/178-8",[]],["text/178-8",[]],["component/178-8",[]],["title/178-9",[183,26.711,2512,50.322]],["name/178-9",[]],["text/178-9",[]],["component/178-9",[]],["title/178-10",[482,39.1,713,37.604]],["name/178-10",[]],["text/178-10",[]],["component/178-10",[]],["title/178-11",[175,25.617,185,21.002,244,20.515,483,26.341]],["name/178-11",[]],["text/178-11",[]],["component/178-11",[]],["title/178-12",[482,39.1,3452,58.174]],["name/178-12",[]],["text/178-12",[]],["component/178-12",[]],["title/178-13",[484,32.394,1134,33.915,1495,43.228]],["name/178-13",[]],["text/178-13",[]],["component/178-13",[]],["title/178-14",[368,39.302,2512,50.322]],["name/178-14",[]],["text/178-14",[]],["component/178-14",[]],["title/178-15",[27,17.931,226,28.714,271,22.669,2568,40.107]],["name/178-15",[]],["text/178-15",[]],["component/178-15",[]],["title/178-16",[4208,56.088,4209,58.174]],["name/178-16",[]],["text/178-16",[]],["component/178-16",[]],["title/178",[698,51.805]],["name/178",[698,1.256]],["text/178",[9,0.45,11,1.493,13,0.915,16,0.564,17,1.881,24,0.518,25,0.677,26,0.521,27,3.211,35,0.889,38,0.976,41,0.547,45,1.517,46,0.542,47,0.468,50,1.786,51,1.077,57,0.769,61,0.654,63,0.527,65,1.581,67,1.221,71,0.399,75,0.53,76,2.205,77,1.615,78,0.532,81,0.365,92,0.512,96,1.881,97,1.071,99,1.418,100,1.018,101,1.008,102,0.994,103,0.944,105,0.915,106,0.859,109,4.215,111,1.096,113,2.218,117,0.583,121,0.877,127,0.926,128,1.11,130,1.218,133,1.355,135,0.798,139,0.485,141,2.116,144,1.298,148,0.508,151,1.362,157,1.221,161,1.438,164,0.453,165,0.49,169,1.027,170,2.316,173,0.892,175,1.635,176,0.502,178,1.132,180,3.615,183,2.04,185,1.341,186,0.709,188,0.547,190,3.112,192,1.871,194,2.019,205,1.074,206,0.521,214,1.986,215,0.58,216,1.283,218,0.919,219,1.868,225,0.968,226,2.462,227,0.915,230,0.609,235,1.409,236,2.196,237,2.297,238,0.601,240,0.55,242,0.55,243,1.209,244,2.28,250,2.451,252,0.433,253,1.497,265,1.293,268,2.514,269,5.149,271,1.447,272,0.574,276,1.16,280,0.704,281,1.881,285,1.054,286,0.53,288,3.899,295,0.727,299,2.005,303,0.956,305,1.149,307,1.027,310,0.759,317,2.43,320,0.448,323,0.437,329,0.677,330,0.55,331,3.103,332,0.532,335,1.926,337,0.508,340,1.156,341,0.933,347,1.764,351,0.59,353,0.468,354,1.78,356,0.763,357,5.43,361,0.948,363,1.022,364,1.704,368,0.561,369,0.63,373,0.976,384,0.537,392,0.912,393,2.412,406,0.485,409,1.806,420,1.185,438,0.776,450,1.077,467,0.683,469,1.636,472,1.445,481,3.473,482,3.766,483,0.952,484,1.018,489,0.514,501,0.553,502,0.506,512,0.831,516,3.409,520,0.545,525,0.55,540,3.821,558,0.523,569,4.684,571,2.772,572,2.786,573,1.599,582,3.43,595,2.254,603,1.833,610,0.476,617,1.06,619,2.449,621,3.541,624,0.583,629,0.609,630,2.048,633,0.639,637,0.54,638,0.711,640,0.755,644,0.609,649,1.043,652,0.831,653,0.63,657,1.483,658,0.649,665,0.776,668,2.154,674,1.109,676,0.815,683,0.704,686,1.763,687,1.409,688,2.391,693,0.649,698,5.081,702,0.535,707,0.621,708,0.815,711,0.755,713,2.638,719,2.398,743,0.649,753,0.994,755,0.89,756,1.56,757,1.472,758,4.081,764,3.258,765,4.744,773,2.941,779,0.704,786,1.013,788,0.665,789,0.727,796,0.621,800,1.667,812,0.89,816,1.065,823,0.727,826,1.374,841,2.176,842,1.232,856,0.621,861,1.314,865,0.831,867,2.741,870,1.16,871,0.613,881,0.727,909,1.06,913,0.745,921,0.644,951,0.63,995,0.621,997,0.621,1000,1.276,1003,0.696,1004,0.617,1009,1.795,1036,3.595,1039,1.264,1046,0.704,1102,0.587,1112,2.234,1134,2.222,1142,5.249,1172,0.649,1179,2.071,1186,1.491,1187,1.264,1188,2.614,1198,1.358,1212,0.696,1246,0.801,1249,0.919,1252,1.16,1253,1.16,1327,1.288,1338,1.253,1344,0.727,1352,2.549,1353,1.655,1354,1.957,1355,1.957,1380,1.83,1391,0.58,1446,3.343,1450,0.617,1494,0.66,1495,0.727,1520,0.671,1558,0.755,1559,1.242,1568,1.152,1576,1.483,1645,0.55,1647,1.472,1660,1.849,1688,0.755,1701,0.677,1704,1.048,1706,0.69,1822,0.704,1840,0.831,1899,0.696,1901,1.242,1902,1.358,1908,0.727,1945,0.704,1950,0.831,2016,1.662,2043,0.89,2057,1.358,2085,1.868,2087,1.552,2089,0.755,2092,0.831,2117,2.345,2202,1.552,2247,0.711,2253,0.609,2333,1.748,2343,0.605,2414,0.625,2426,0.639,2448,0.755,2451,1.144,2456,0.508,2512,4.388,2531,0.696,2563,0.776,2568,2.039,2678,0.948,2722,0.916,2737,0.69,2755,1.391,2787,0.868,2796,0.948,2811,0.948,2815,0.948,2820,0.948,2825,0.916,2870,0.948,2885,0.801,2904,0.745,2957,0.848,2987,1.692,2996,1.232,3000,1.779,3006,3.237,3008,0.89,3093,2.6,3141,1.795,3288,2.339,3327,0.831,3349,0.788,3361,0.755,3363,0.831,3369,0.831,3377,1.409,3436,0.755,3455,0.727,3480,0.683,3565,0.719,3744,0.755,3767,0.89,3784,0.89,3880,4.214,3884,0.89,3890,1.552,3937,2.339,3995,0.831,4034,1.983,4036,0.89,4166,0.677,4206,4.372,4208,0.801,4209,4.772,4210,0.987,4211,0.987,4212,0.987,4213,5.603,4214,0.987,4215,0.987,4216,0.987,4217,0.987,4218,0.987,4219,1.843,4220,0.987,4221,0.987,4222,0.987,4223,0.987,4224,0.987,4225,0.987,4226,0.987,4227,0.987,4228,0.987,4229,0.987,4230,0.987,4231,0.776,4232,2.593,4233,0.987,4234,1.843,4235,1.843,4236,0.987,4237,0.987,4238,0.987,4239,0.987,4240,1.843,4241,1.843,4242,0.987,4243,0.987,4244,0.89,4245,1.662,4246,0.704,4247,0.89,4248,0.987,4249,0.987,4250,1.843,4251,0.987,4252,0.987,4253,1.843,4254,1.843,4255,0.765,4256,0.987,4257,0.987,4258,0.987,4259,1.843,4260,0.987,4261,0.987,4262,0.987,4263,0.987,4264,0.987,4265,0.987,4266,0.987,4267,0.987,4268,0.987,4269,3.255,4270,0.987,4271,3.255,4272,3.255,4273,0.987,4274,2.593,4275,0.987,4276,0.987,4277,0.987,4278,4.371,4279,2.593,4280,0.987,4281,0.987,4282,1.843,4283,0.987,4284,3.255,4285,0.987,4286,0.987,4287,0.987,4288,0.987,4289,0.987,4290,1.843,4291,1.843,4292,0.987,4293,0.987,4294,0.987,4295,0.987,4296,0.987,4297,0.987,4298,0.987,4299,0.987,4300,0.755,4301,0.987,4302,3.844,4303,2.142,4304,3.844,4305,0.987,4306,0.987,4307,2.593,4308,0.987,4309,0.987,4310,0.987,4311,0.987,4312,1.843,4313,0.987,4314,2.593,4315,0.987,4316,0.987,4317,0.987,4318,0.788,4319,1.843,4320,0.987,4321,0.987,4322,0.987,4323,2.593,4324,0.987,4325,0.987,4326,0.987,4327,0.987,4328,0.987,4329,0.987,4330,4.372,4331,0.987,4332,0.987,4333,0.987,4334,0.987,4335,0.987,4336,0.987,4337,0.987,4338,0.987,4339,0.987,4340,0.987,4341,0.987,4342,0.987,4343,0.987,4344,0.987,4345,0.987,4346,0.987,4347,0.987,4348,0.987]],["component/178",[11,0.279,108,0.486]],["title/179-1",[4349,75.757]],["name/179-1",[]],["text/179-1",[]],["component/179-1",[]],["title/179-2",[619,38.706,639,47.393]],["name/179-2",[]],["text/179-2",[]],["component/179-2",[]],["title/179-3",[469,29.4,4350,58.174]],["name/179-3",[]],["text/179-3",[]],["component/179-3",[]],["title/179-4",[806,46.178,3430,55.177]],["name/179-4",[]],["text/179-4",[]],["component/179-4",[]],["title/179-5",[469,29.4,4351,69.076]],["name/179-5",[]],["text/179-5",[]],["component/179-5",[]],["title/179",[4350,70.719]],["name/179",[3455,0.829,4093,0.947]],["text/179",[11,0.888,24,0.98,27,3.653,33,1.035,37,0.941,50,1.804,57,0.779,60,0.805,63,0.997,67,0.879,70,1.091,76,1.66,77,1.774,106,2.058,114,0.952,117,4.279,123,2.904,128,3.296,130,2.68,144,0.934,145,1.409,157,0.879,166,2.2,176,1.673,178,2.325,183,2.799,185,3.612,188,1.826,190,3.74,192,1.408,198,1.051,200,3.246,201,0.972,205,2.776,215,1.097,216,0.923,221,0.903,236,0.937,237,0.813,238,2.004,244,2.697,245,2.904,250,2.051,252,1.446,253,1.719,265,1.641,269,3.777,271,3.603,273,1.006,303,0.968,317,1.327,331,1.906,335,1.45,340,1.467,342,1.011,345,1.375,354,3.352,363,1.035,371,4.746,373,0.989,376,1.067,378,1.016,393,0.853,406,2.168,407,0.993,424,2.723,439,3.203,458,0.93,469,0.794,479,0.888,497,1.2,507,2.437,532,3.876,533,1.13,540,1.123,550,0.968,571,0.98,582,2.184,610,1.587,611,2.664,617,1.073,619,4.056,623,1.707,627,1.067,632,1.258,634,1.151,639,5.559,646,1.707,653,1.191,709,1.33,714,1.571,716,1.683,719,2.425,722,1.123,752,1.218,756,1.123,757,1.49,764,1.892,786,1.025,788,2.976,795,4.252,798,2.339,806,7.982,823,1.375,857,1.166,863,3.183,867,1.571,901,2.976,909,1.073,922,2.132,929,1.2,970,1.427,972,4.249,991,1.33,997,1.174,1004,2.057,1010,2.881,1035,1.826,1086,2.717,1102,1.956,1135,1.13,1136,1.427,1173,1.269,1205,3.526,1212,1.317,1217,2.453,1249,2.654,1251,2.894,1325,1.375,1326,0.964,1353,3.876,1367,2.346,1417,7.771,1471,1.011,1493,1.375,1568,1.166,1603,1.447,1645,1.04,1649,1.269,1705,3.374,1950,3.717,2005,1.375,2039,4.444,2083,1.247,2085,1.345,2157,1.191,2246,1.123,2253,3.746,2389,4.398,2423,1.304,2434,1.515,2451,1.159,2460,1.542,2568,1.468,2580,1.304,2600,1.641,2725,1.359,2773,1.792,2852,2.894,2873,1.542,2875,2.425,2935,1.604,2961,1.28,2972,1.427,2995,1.292,2998,1.863,3048,1.571,3265,2.771,3316,3.216,3384,1.218,3424,1.375,3430,7.771,3431,2.517,3455,2.425,3471,1.49,3480,1.292,3627,1.49,3683,1.683,3684,3.982,3704,1.375,3705,2.771,3912,2.771,3914,3.148,4022,5.479,4038,2.969,4086,1.683,4087,1.683,4089,1.683,4091,1.683,4092,1.683,4093,8.748,4094,1.49,4095,1.683,4349,6.53,4350,6.096,4352,1.866,4353,1.866,4354,6.703,4355,6.073,4356,1.866,4357,1.683,4358,1.866,4359,1.683,4360,1.866,4361,1.866,4362,4.483,4363,1.866,4364,1.866,4365,1.866,4366,1.866,4367,1.866,4368,1.866,4369,1.866,4370,1.49,4371,1.866,4372,1.866,4373,4.414,4374,1.866,4375,1.866,4376,1.866,4377,1.866,4378,1.866,4379,1.866,4380,1.866,4381,1.866,4382,1.866,4383,1.866,4384,1.866,4385,1.866,4386,3.291,4387,1.866,4388,1.683,4389,6.703,4390,4.414,4391,1.866,4392,1.866,4393,1.866,4394,1.866,4395,1.866,4396,6.703,4397,1.866,4398,4.414,4399,1.866,4400,1.866,4401,1.866,4402,1.866,4403,1.866,4404,3.291,4405,1.866,4406,1.866,4407,5.323,4408,1.866,4409,1.866,4410,1.866,4411,1.866,4412,1.866,4413,1.866,4414,1.866,4415,1.866,4416,1.866,4417,1.866,4418,1.866,4419,1.866,4420,1.866,4421,3.291,4422,1.866,4423,1.866,4424,1.866,4425,1.427,4426,3.291,4427,1.866,4428,1.866,4429,1.683]],["component/179",[11,0.279,108,0.486]],["title/180",[178,30.168,447,34.441]],["name/180",[178,0.491,447,0.561]],["text/180",[4,2.947,11,1.779,15,3.297,27,3.112,31,4.674,61,4.301,65,3.152,105,5.003,151,3.408,156,5.181,157,4.167,178,4.725,269,4.727,271,2.884,340,2.893,371,3.311,420,2.966,447,5.646,472,3.617,482,5.009,483,3.351,484,3.582,553,4.625,779,4.625,821,5.705,842,4.336,856,4.083,857,4.055,879,4.083,913,4.897,936,3.812,1064,4.625,1067,5.36,1072,5.181,1084,4.779,1154,4.373,1253,4.083,1415,6.767,1494,4.336,1705,4.111,1901,4.373,2375,5.463,2489,6.023,2491,5.852,2497,6.023,2634,5.267,2814,6.229,2875,4.779,2922,6.229,2923,5.705,2924,6.229,2925,6.229,2926,6.229,2927,6.229,2928,6.229,2929,6.229,2930,6.229,3000,4.45,3023,5.463,3140,5.181,3886,5.463,3993,5.181,4430,5.463,4431,6.486,4432,6.486,4433,6.486,4434,6.486,4435,6.486,4436,6.486,4437,6.486,4438,6.486,4439,5.852,4440,6.486,4441,6.486]],["component/180",[11,0.279,108,0.486]],["title/181-1",[139,33.93,302,32.097]],["name/181-1",[]],["text/181-1",[]],["component/181-1",[]],["title/181-2",[279,32.527,4442,60.755]],["name/181-2",[]],["text/181-2",[]],["component/181-2",[]],["title/181-3",[469,29.4,904,48.759]],["name/181-3",[]],["text/181-3",[]],["component/181-3",[]],["title/181-4",[470,52.853]],["name/181-4",[]],["text/181-4",[]],["component/181-4",[]],["title/181-5",[472,32.712,688,32.088,1036,33.208]],["name/181-5",[]],["text/181-5",[]],["component/181-5",[]],["title/181-6",[1061,55.177,4430,58.174]],["name/181-6",[]],["text/181-6",[]],["component/181-6",[]],["title/181-7",[483,35.686,4443,58.174]],["name/181-7",[]],["text/181-7",[]],["component/181-7",[]],["title/181-8",[469,29.4,2589,58.174]],["name/181-8",[]],["text/181-8",[]],["component/181-8",[]],["title/181-9",[280,59.878]],["name/181-9",[]],["text/181-9",[]],["component/181-9",[]],["title/181-10",[287,29.8,392,25.231,599,32.545,905,42.939]],["name/181-10",[]],["text/181-10",[]],["component/181-10",[]],["title/181-11",[479,39.948]],["name/181-11",[]],["text/181-11",[]],["component/181-11",[]],["title/181-12",[369,53.601]],["name/181-12",[]],["text/181-12",[]],["component/181-12",[]],["title/181-13",[458,41.869]],["name/181-13",[]],["text/181-13",[]],["component/181-13",[]],["title/181-14",[369,53.601]],["name/181-14",[]],["text/181-14",[]],["component/181-14",[]],["title/181-15",[407,23.994,458,22.478,597,32.147,686,30.657,4444,40.672]],["name/181-15",[]],["text/181-15",[]],["component/181-15",[]],["title/181-16",[2591,64.221]],["name/181-16",[]],["text/181-16",[]],["component/181-16",[]],["title/181-17",[1056,46.973,2591,52.828]],["name/181-17",[]],["text/181-17",[]],["component/181-17",[]],["title/181-18",[2426,44.744,4208,56.088]],["name/181-18",[]],["text/181-18",[]],["component/181-18",[]],["title/181-19",[279,24.009,1471,27.628,2426,33.026,2456,26.233]],["name/181-19",[]],["text/181-19",[]],["component/181-19",[]],["title/181",[55,43.78,479,32.861]],["name/181",[55,0.713,479,0.535]],["text/181",[0,2.22,4,0.549,7,0.766,8,0.27,11,2.035,13,0.863,18,2.258,24,0.913,26,0.333,27,3.609,31,0.455,32,2.222,34,0.363,35,0.839,36,0.365,37,0.319,38,0.335,40,0.989,41,0.964,44,0.374,45,2.092,46,1.223,47,0.573,49,0.777,50,2.067,51,0.369,55,0.401,57,2.112,60,1.155,61,0.419,63,0.929,65,0.588,67,0.819,68,0.877,69,1.373,70,0.707,71,0.703,75,0.339,76,0.319,77,0.579,78,0.652,81,2.51,84,0.707,88,0.409,89,0.746,92,0.627,94,1.388,95,0.446,96,0.699,97,0.367,99,0.346,100,0.349,101,0.346,102,0.341,103,0.62,105,0.314,106,0.295,109,0.292,113,2.436,114,0.617,115,3.518,117,1.028,118,0.61,119,1.952,121,2.406,123,0.416,124,0.881,126,0.308,127,1.118,128,1.786,130,1.906,131,0.301,132,0.284,133,1.448,135,0.274,136,0.63,139,0.594,142,2.315,144,1.547,151,2.512,157,0.569,159,0.378,161,1.235,164,3.754,165,1.328,168,0.795,169,0.352,170,0.641,172,1.417,173,0.842,175,0.608,176,2.571,177,0.358,178,1.35,180,0.299,183,3.207,184,1.978,185,0.917,186,3.835,190,0.327,191,0.406,192,2.664,200,0.646,201,0.906,210,0.36,211,0.49,213,0.837,214,0.898,215,0.371,216,1.529,219,1.253,220,2.683,221,1.077,223,0.409,231,0.638,232,0.341,236,0.873,237,2.082,238,0.737,244,1.076,249,3.788,250,1.034,252,0.764,253,1.494,268,1.387,269,4.809,271,2.577,273,0.938,274,0.403,278,0.891,279,3.955,280,0.451,281,1.546,285,0.361,287,1.3,288,0.585,293,0.663,299,0.555,302,2.35,303,0.328,305,0.536,310,0.917,312,3.438,315,0.297,317,0.255,320,1.011,321,0.413,323,0.536,329,1.527,331,1.501,332,1.667,335,0.766,340,0.539,342,1.675,347,0.342,351,0.723,354,1.932,360,0.633,364,0.771,367,0.369,368,0.36,369,3.84,371,2.13,373,0.335,374,0.324,378,0.344,382,0.451,384,1.682,392,0.313,394,0.341,406,2.349,407,0.336,409,0.964,420,2.845,421,1.393,424,1.072,444,0.715,446,2.204,447,2.89,450,0.707,453,0.728,454,1.431,455,0.413,458,4.288,469,3.158,470,4.271,471,0.483,472,0.674,474,2.277,479,3.893,482,0.358,483,2.874,484,1.229,489,1.61,495,0.873,496,2.021,501,1.948,502,1.14,503,0.664,505,0.416,506,1.172,507,1.229,511,2.386,519,0.413,520,1.229,523,0.406,525,0.352,527,0.783,528,0.36,531,2.413,533,1.052,536,0.406,538,0.871,544,1.388,551,0.777,558,1.179,571,0.332,582,1.899,587,0.505,591,0.451,592,0.438,593,2.615,594,0.49,599,3.229,603,0.681,604,3.526,610,1.491,611,1.339,617,0.695,621,0.336,623,1.154,624,0.715,626,1.464,627,0.994,629,0.39,634,0.746,637,0.661,645,0.761,646,1.387,647,0.635,649,0.358,650,2.236,651,1.639,661,0.925,667,0.483,668,0.974,670,0.497,671,1.803,672,0.378,673,0.477,674,0.728,681,0.862,682,1.162,686,4.84,688,2.909,689,1.777,693,0.795,696,0.39,702,2.261,703,0.741,707,0.398,709,1.587,712,0.862,713,1.211,722,0.38,726,0.383,743,0.416,752,0.413,753,0.341,756,1.609,759,0.81,764,2.206,770,0.483,776,0.881,779,1.907,788,0.815,796,1.683,798,0.335,811,0.871,816,1.286,822,1.154,827,0.777,835,1.315,842,0.423,856,0.398,859,0.862,862,1.973,868,0.466,869,0.395,870,0.398,871,0.392,904,5.612,905,1.874,909,1.538,913,0.913,914,0.543,919,0.57,921,0.789,926,0.466,927,0.483,929,0.777,930,0.497,933,3.832,934,1.094,939,0.471,971,1.172,972,0.759,977,1.572,981,0.446,982,1.204,983,0.532,986,0.505,987,0.466,1000,0.837,1002,1.329,1003,0.446,1009,0.837,1024,1.777,1026,1.702,1028,0.367,1030,0.403,1035,0.671,1036,0.684,1037,0.442,1040,0.57,1045,1.702,1046,1.587,1056,1.182,1060,3.461,1061,1.388,1069,0.57,1077,1.807,1078,1.464,1086,0.617,1089,0.438,1090,3.514,1091,2.788,1092,2.788,1093,2.413,1094,3.375,1095,2.928,1096,5.229,1097,1.568,1098,0.57,1099,0.57,1102,4.576,1103,2.788,1104,0.532,1107,0.808,1129,1.065,1130,2.204,1134,0.699,1137,0.913,1159,0.505,1167,0.438,1170,0.505,1173,1.182,1211,0.587,1241,0.532,1252,0.398,1253,0.398,1254,0.837,1277,0.505,1323,0.505,1325,0.466,1343,0.416,1353,0.772,1380,0.446,1391,1.308,1399,0.532,1450,0.756,1471,0.342,1522,0.446,1528,0.483,1567,0.409,1569,1.04,1649,1.513,1701,0.434,1706,0.442,1708,0.766,1793,1.296,1964,1.018,1965,0.505,2040,1.227,2083,1.162,2093,0.505,2246,0.38,2343,0.387,2364,0.532,2376,0.505,2414,0.766,2418,0.497,2422,0.513,2424,0.513,2425,0.532,2426,4.985,2448,1.702,2456,0.622,2503,0.522,2585,0.543,2587,2.788,2589,5.066,2591,3.657,2596,1.614,2634,0.982,2705,0.451,2708,0.543,2724,2.104,2725,0.46,2726,0.505,2737,0.442,2755,0.477,2758,0.38,2824,0.46,2881,2.104,2904,0.477,2912,0.925,2935,0.543,2961,0.83,2968,1.4,3007,1.568,3027,0.505,3208,2.074,3327,0.532,3444,1.091,3482,0.46,3484,0.532,3523,0.466,3694,1.464,3727,0.966,3787,0.938,3902,0.532,3929,0.57,3947,0.57,3986,0.57,4028,0.57,4050,0.587,4137,0.57,4166,0.434,4188,0.451,4208,0.513,4246,0.451,4430,0.532,4442,1.957,4443,0.532,4444,1.091,4445,1.568,4446,0.543,4447,0.632,4448,0.632,4449,0.57,4450,2.137,4451,0.632,4452,0.57,4453,2.225,4454,0.632,4455,0.632,4456,0.483,4457,0.632,4458,0.632,4459,0.632,4460,0.632,4461,0.632,4462,0.925,4463,1.209,4464,2.225,4465,0.57,4466,0.632,4467,0.632,4468,1.209,4469,1.329,4470,0.505,4471,1.209,4472,1.209,4473,1.738,4474,0.57,4475,0.632,4476,0.632,4477,0.632,4478,0.632,4479,0.632,4481,0.632,4482,0.632,4483,0.632,4488,1.209,4489,1.209,4490,0.632,4494,1.738,4495,0.632,4496,0.632,4497,0.632,4498,2.674,4499,3.837,4500,0.632,4501,0.632,4502,2.674,4503,1.568,4504,0.57,4505,0.632,4506,0.632,4507,0.632,4508,0.632,4509,0.632,4510,0.632,4511,0.632,4512,0.632,4513,0.632,4514,0.632,4515,0.632,4516,0.632,4517,0.632,4518,2.674,4519,0.556,4520,0.632,4521,0.632,4522,0.632,4523,0.632,4524,0.632,4525,0.632,4526,0.57,4527,0.632,4528,0.632,4529,1.209,4530,0.632,4531,0.632,4532,0.632,4533,0.632,4534,0.632,4535,0.632,4536,0.632,4537,0.632,4538,0.632,4539,0.632,4540,0.632,4541,0.57,4542,0.632,4543,0.632,4544,0.632,4545,0.632,4547,0.632,4548,1.161,4549,0.632,4550,3.091,4551,0.632,4552,0.57,4553,0.632,4556,0.632,4557,0.632,4558,0.632,4914,0.513,4931,2.87,6126,0.632,6146,1.253,6201,1.209,6286,0.587,6369,0.666,6370,0.666,6371,0.666,6372,0.666,6373,0.666,6374,0.666,6375,2.817,6376,0.666,6377,2.343,6378,1.273,6379,1.831,6380,2.343,6381,0.666,6382,0.666,6383,0.666,6384,0.666,6385,0.666,6386,0.666,6387,1.273,6388,1.273,6389,1.273,6390,1.273,6391,0.666,6392,0.666,6393,0.666]],["component/181",[11,0.279,108,0.486]],["title/182-1",[936,34.483,1065,43.228,1143,44.869]],["name/182-1",[]],["text/182-1",[]],["component/182-1",[]],["title/182",[936,49.357]],["name/182",[936,1.197]],["text/182",[0,1.794,6,2.896,8,1.834,27,3.138,32,3.051,37,3.312,38,2.276,55,6.683,77,2.189,89,2.65,92,4.629,100,2.372,103,3.364,105,3.261,106,3.061,113,1.682,148,3.378,171,2.54,183,1.661,185,3.675,188,4.95,199,2.134,204,5.616,205,1.779,210,2.444,216,3.249,218,2.142,250,1.996,253,1.673,269,2.741,272,6.32,286,2.307,293,3.401,316,3.123,317,3.878,322,5.467,331,3.852,335,2.893,340,2.928,356,2.719,364,1.904,378,2.339,383,2.432,447,3.274,448,2.686,469,3.392,484,2.372,600,3.033,627,2.457,649,2.432,657,2.457,703,2.633,722,5.368,756,2.585,759,2.003,767,2.742,842,2.872,870,6.05,936,5.244,975,4.132,1065,7.083,1143,5.021,1235,5.245,1249,2.142,1434,3.165,1471,2.328,1520,2.921,1576,2.457,1663,3.432,1701,2.948,1705,5.655,1707,3.096,1945,4.682,1962,2.872,2118,5.805,2451,4.077,2456,2.21,2529,6.268,2563,3.379,2714,3.243,3411,2.849,4559,4.296,4560,4.296,4561,4.296,4562,4.296,4563,4.296,4564,10.135,4565,4.296,4566,8.922,4567,3.876,4568,9.612,4569,8.922,4570,4.296,4571,4.296,4572,6.566,4573,4.296,4574,4.296,4575,6.566,4576,4.296,4577,4.296,4578,4.296,4579,4.296,4580,4.296,4581,4.296,4582,4.296,4583,4.296,4584,4.296,4585,4.296,4586,4.296,4587,4.296,4588,4.296,4589,4.296]],["component/182",[11,0.279,108,0.486]],["title/183-1",[11,11.796,40,26.084,1108,36.194]],["name/183-1",[]],["text/183-1",[]],["component/183-1",[]],["title/183-2",[244,23.606,1108,36.194,2040,41.413]],["name/183-2",[]],["text/183-2",[]],["component/183-2",[]],["title/183-3",[175,34.706,299,31.683]],["name/183-3",[]],["text/183-3",[]],["component/183-3",[]],["title/183-4",[1108,42.614,4590,59.388]],["name/183-4",[]],["text/183-4",[]],["component/183-4",[]],["title/183-5",[11,11.796,39,33.38,1108,36.194]],["name/183-5",[]],["text/183-5",[]],["component/183-5",[]],["title/183-6",[6,56.611]],["name/183-6",[]],["text/183-6",[]],["component/183-6",[]],["title/183-7",[1108,51.805]],["name/183-7",[]],["text/183-7",[]],["component/183-7",[]],["title/183-8",[253,22.852,299,26.909,950,39.895]],["name/183-8",[]],["text/183-8",[]],["component/183-8",[]],["title/183-9",[3670,61.873]],["name/183-9",[]],["text/183-9",[]],["component/183-9",[]],["title/183-10",[293,22.364,299,26.909,1165,32.24]],["name/183-10",[]],["text/183-10",[]],["component/183-10",[]],["title/183-11",[541,37.959,767,44.092]],["name/183-11",[]],["text/183-11",[]],["component/183-11",[]],["title/183-12",[79,53.601]],["name/183-12",[]],["text/183-12",[]],["component/183-12",[]],["title/183",[1108,51.805]],["name/183",[1108,1.256]],["text/183",[0,0.718,4,0.782,7,1.09,9,0.418,11,1.702,13,0.854,15,0.875,18,1.612,19,0.501,24,0.482,26,0.484,27,2.922,32,0.799,33,0.509,35,0.83,39,0.522,41,0.509,45,2.144,47,0.816,50,2.208,57,1.515,60,0.396,63,1.637,65,0.836,67,1.948,68,3.357,71,0.983,72,1.418,75,1.644,76,1.83,77,2.916,78,1.652,79,0.585,80,0.721,81,1.531,88,0.594,91,1.334,92,1.261,96,0.53,97,0.533,99,0.501,100,0.506,101,0.501,102,0.495,103,0.47,105,0.455,106,0.427,111,0.545,113,1.8,114,0.468,115,2.882,127,0.461,128,0.736,130,2.268,132,0.774,133,0.716,142,0.444,148,1.25,157,1.948,161,0.509,165,2.055,172,0.912,173,1.177,175,2.522,176,1.557,179,0.555,180,2.173,183,2.226,185,1.494,186,1.396,190,1.874,192,1.969,194,0.904,201,0.478,202,0.928,204,1.083,205,1.502,208,0.585,210,0.522,216,0.454,220,3.474,223,0.594,225,2.581,227,0.455,230,1.889,231,1.914,232,0.495,236,1.221,237,3.304,238,1.48,242,3.989,243,0.802,244,4.235,246,0.603,248,4.104,250,1.686,252,1.345,253,2.368,265,3.031,268,0.476,269,5.192,271,3.374,272,0.533,274,0.585,279,0.81,282,0.635,284,0.732,286,1.305,293,2.432,298,1.791,299,4.772,300,1.268,303,0.892,305,1.608,306,0.53,307,0.959,310,1.001,312,1.594,315,3.124,317,0.37,318,0.589,319,1.683,320,1.104,323,1.357,325,1.098,331,1.049,335,0.404,337,0.885,340,0.409,341,0.464,342,0.932,354,0.425,356,1.905,360,1.898,363,0.954,364,1.608,367,0.536,368,1.383,371,0.878,373,0.912,380,0.533,381,0.732,383,0.974,384,0.499,389,1.374,390,2.898,393,1.111,406,1.194,420,1.111,421,0.896,423,0.562,428,1.214,449,0.545,453,3.02,489,0.896,502,0.882,503,2.969,505,1.132,507,1.691,514,0.654,519,1.123,520,0.95,525,0.511,533,1.041,536,0.589,541,4.565,550,0.476,569,4.28,571,2.416,573,1.889,582,1.203,587,3.305,599,0.585,600,0.647,603,1.724,610,1.75,611,0.459,612,0.654,619,0.514,621,1.293,623,0.892,627,0.984,631,0.566,634,0.566,637,0.501,644,0.566,646,1.588,650,2.661,653,0.585,657,0.524,663,0.827,664,0.827,666,0.701,668,0.514,669,0.647,674,0.552,679,0.668,699,0.721,702,0.497,718,0.613,743,0.603,751,1.106,753,0.928,756,0.552,759,1.133,764,0.989,767,2.316,771,0.569,772,0.994,786,1.683,816,0.53,822,1.588,826,1.283,856,1.083,857,2.587,879,0.577,901,0.618,917,1.317,934,2.284,939,1.283,940,1.667,946,0.692,949,2.775,950,3.413,951,2.316,954,1.334,955,0.711,961,0.732,971,0.618,972,3.4,1000,0.635,1004,0.573,1028,1.78,1030,0.585,1036,2.841,1039,0.629,1045,0.701,1086,0.468,1108,7.45,1111,0.772,1128,0.623,1130,0.654,1131,1.586,1135,1.854,1136,0.701,1150,0.827,1165,1.683,1167,0.635,1172,2.722,1186,0.527,1187,0.629,1188,0.623,1224,0.623,1235,2.446,1249,3.679,1252,0.577,1253,0.577,1254,0.635,1327,0.641,1338,0.623,1343,2.014,1352,1.611,1353,1.551,1354,1.835,1355,1.835,1366,1.15,1390,0.647,1394,0.647,1420,1.18,1435,0.668,1450,1.519,1470,1.374,1471,0.497,1522,0.647,1602,1.499,1701,0.629,1704,0.979,1708,1.09,1731,1.552,1740,0.772,1863,0.827,1878,1.449,1899,0.647,1929,0.827,2026,0.827,2040,1.715,2086,0.827,2117,3.894,2157,0.585,2246,0.552,2410,1.253,2414,0.581,2426,1.983,2456,1.575,2735,0.758,2737,0.641,2742,1.513,2758,1.035,2788,0.88,2909,0.758,2958,4.551,2989,1.374,2998,0.974,3000,0.629,3002,0.654,3196,0.676,3208,1.334,3344,0.668,3377,0.701,3381,0.692,3384,0.598,3456,0.827,3457,0.827,3460,0.827,3519,0.701,3594,1.599,3614,1.374,3670,2.256,3671,1.374,3701,0.661,3704,0.676,3727,0.732,3730,1.941,3808,0.772,4188,0.654,4246,0.654,4300,2.342,4567,0.827,4590,1.479,4591,0.917,4592,0.917,4593,4.138,4594,0.917,4595,0.88,4596,0.88,4597,0.917,4598,2.43,4599,0.917,4600,1.72,4601,4.138,4602,1.72,4603,0.917,4604,0.917,4605,1.72,4606,1.72,4607,0.917,4608,0.917,4609,1.552,4610,1.72,4611,0.917,4612,0.917,4613,0.917,4614,0.917,4615,0.917,4616,1.316,4617,0.917,4618,2.43,4619,0.917,4620,0.772,4621,0.917,4622,0.917,4623,3.062,4624,0.917,4625,0.917,4626,0.917,4627,1.72,4628,0.917,4629,0.917,4630,0.917,4631,0.917,4632,2.43,4633,0.917,4634,1.72,4635,1.72,4636,0.917,4637,0.917,4638,0.917,4639,1.72,4640,0.917,4641,0.917,4642,0.917,4643,0.917,4644,0.917,4645,0.917,4646,0.917,4647,0.917,4648,0.917,4649,0.917,4650,1.72,4651,2.43,4652,2.43,4653,0.917,4654,0.917,4655,0.917,4656,0.917,4657,0.917,4658,1.72,4659,1.72,4660,1.72,4661,1.72,4662,1.72,4663,0.917,4664,0.917,4665,0.917,4666,1.72,4667,1.72,4668,1.72,4669,1.72,4670,1.72,4671,0.917,4672,0.917,4673,0.917,4674,0.917,4675,0.917,4676,0.827,4677,0.917,4678,1.72,4679,0.917,4680,0.917,4681,0.917,4682,0.917,4683,0.917,4684,1.72,4685,0.917,4686,0.917,4687,0.917,4688,0.917,4689,1.72,4690,0.917,4691,0.917,4692,0.917,4693,0.917,4694,0.917,4695,0.917,4696,0.917,4697,0.917,4698,1.72,4699,0.917,4700,0.917,4701,0.917,4702,0.917,4703,0.917,4704,0.917,4705,0.917,4706,0.917,4707,0.917,4708,1.72,4709,0.917,4710,0.917,4711,0.917,4712,0.917,4713,0.917,4714,0.917,4715,0.917,4716,0.917,4717,0.827,4718,0.917,4719,0.806,4720,0.917,4721,0.917]],["component/183",[11,0.279,108,0.486]],["title/184",[225,25.785,293,26.331]],["name/184",[225,0.42,293,0.429]],["text/184",[26,3.908,27,4.013,50,3.027,57,3.092,92,5.015,128,3.17,192,3.17,221,3.586,225,4.616,227,4.802,237,3.225,253,2.885,269,3.092,293,4.713,305,3.283,315,5.051,316,3.523,317,2.988,318,4.762,332,3.995,334,8.598,364,3.283,558,3.925,657,5.53,835,5.715,922,4.798,950,5.037,1340,4.728,1343,4.872,3005,6.682,3196,5.457,3377,5.664,3384,4.834,3814,5.228,4188,5.281,4722,6.682,4723,7.407,4724,7.407,4725,7.407,6394,7.112]],["component/184",[11,0.279,108,0.486]],["title/185-1",[293,26.331,3411,45.802]],["name/185-1",[]],["text/185-1",[]],["component/185-1",[]],["title/185",[293,32.009]],["name/185",[293,0.776]],["text/185",[13,1.655,21,2.055,26,1.758,27,3.367,45,3.151,46,1.831,47,1.58,50,2.762,54,2.083,57,1.391,63,1.781,68,4.59,70,1.947,75,1.789,78,1.797,87,2.661,109,3.12,114,1.7,119,2.515,137,2.017,139,1.637,145,2.515,148,3.478,168,2.192,173,2.603,182,4.259,183,2.614,185,1.372,190,1.721,192,1.426,194,4.075,200,4.864,202,3.646,205,3.768,206,1.758,218,4.537,225,4.108,228,4.98,232,2.9,237,4.599,270,2.661,272,3.125,273,1.797,288,1.613,293,4.608,303,1.728,306,1.926,307,3.769,312,2.362,315,3.172,320,1.514,322,2.286,323,2.383,330,2.998,331,2.918,332,1.797,352,4.143,356,4.374,360,1.743,366,2.112,367,1.947,373,1.765,384,1.814,393,3.09,420,1.523,447,1.661,449,1.981,450,3.142,495,1.674,520,1.84,528,1.896,532,6.11,543,3.656,558,1.765,593,2.941,619,3.013,621,1.773,627,3.075,649,1.886,707,3.384,712,2.376,759,3.151,772,1.926,816,5.26,835,1.97,841,2.227,862,2.127,869,3.361,871,2.069,917,1.805,944,2.583,957,1.758,974,4.596,1011,2.192,1065,4.98,1089,2.307,1112,5.564,1119,2.427,1135,2.017,1143,2.548,1173,2.266,1220,3.006,1277,8.437,1326,2.778,1340,2.127,1392,3.006,1435,4.924,1567,2.158,1698,2.376,1707,3.874,1708,3.408,1943,2.548,2103,3.834,2114,2.455,2343,2.042,2490,3.094,2714,4.059,2716,4.229,2718,4.534,2892,2.864,3411,2.209,3421,2.806,3783,2.548,3917,2.806,3989,4.528,4188,2.376,4456,2.548,4727,3.332,4728,3.332,4729,3.332,4730,3.006,4731,4.85,4732,3.332,4733,3.332,4734,3.332,4735,3.094,4736,3.332,4737,3.094,4738,3.332,4739,3.199,4740,3.332,4741,3.332,4742,2.661,4743,3.332,4744,3.332,4745,3.332,4746,3.332,4747,3.332]],["component/185",[11,0.279,108,0.486]],["title/186-1",[4748,83.973]],["name/186-1",[]],["text/186-1",[]],["component/186-1",[]],["title/186-2",[4749,83.973]],["name/186-2",[]],["text/186-2",[]],["component/186-2",[]],["title/186-3",[4750,83.973]],["name/186-3",[]],["text/186-3",[]],["component/186-3",[]],["title/186-4",[4751,75.757]],["name/186-4",[]],["text/186-4",[]],["component/186-4",[]],["title/186-5",[4751,75.757]],["name/186-5",[]],["text/186-5",[]],["component/186-5",[]],["title/186-6",[4752,75.757]],["name/186-6",[]],["text/186-6",[]],["component/186-6",[]],["title/186-7",[4752,75.757]],["name/186-7",[]],["text/186-7",[]],["component/186-7",[]],["title/186-8",[4753,83.973]],["name/186-8",[]],["text/186-8",[]],["component/186-8",[]],["title/186",[8,25.04,482,33.208,2594,40.623]],["name/186",[8,0.332,482,0.44,2594,0.538]],["text/186",[4,3.122,8,4.427,11,2.14,26,1.801,27,3.4,33,3.043,37,1.722,40,1.518,46,1.876,51,1.996,68,1.722,75,1.833,76,1.722,78,1.842,81,1.263,96,1.974,109,2.531,111,2.03,113,2.69,119,1.597,127,2.755,128,2.347,130,1.082,141,3.809,142,4.454,144,1.709,148,1.757,151,2.881,157,3.705,161,1.894,165,2.724,172,1.809,176,3.493,177,3.104,178,1.491,185,2.259,186,3.316,192,2.347,201,1.779,209,3.951,214,1.764,218,1.702,221,2.655,240,1.904,244,1.374,250,1.587,252,4.557,253,3.916,256,2.03,269,1.425,271,1.518,289,3.428,302,3.193,303,3.565,305,2.431,320,3.122,331,1.474,341,1.729,347,2.971,354,3.644,363,3.043,379,3.526,406,1.677,407,2.918,447,3.923,454,2.195,470,3.451,472,1.904,482,6.156,483,1.764,484,3.028,489,1.779,503,1.876,507,1.885,593,1.867,619,3.073,623,1.771,624,2.018,637,1.867,643,1.85,651,3.361,686,3.729,702,4.669,703,2.093,707,2.149,713,4.283,746,2.516,792,2.727,816,3.17,862,2.179,870,3.451,881,4.04,904,3.871,926,2.516,963,2.876,987,5.063,1009,7.531,1011,2.246,1028,1.985,1045,5.255,1086,1.743,1107,3.666,1121,2.727,1134,1.974,1177,2.727,2083,3.666,2161,2.283,2333,2.302,2414,2.164,2451,2.12,2456,1.757,2594,5.448,2725,3.995,2755,8.897,2758,4.734,2953,2.822,2996,2.283,3694,6.626,4370,2.727,4503,4.947,4541,4.947,4620,4.618,4731,3.08,4754,3.414,4755,3.414,4756,3.414,4757,3.414,4758,3.414,4759,3.414,4760,5.484,4761,5.484,4762,7.098,4763,4.947,4764,5.484,4765,3.414]],["component/186",[11,0.279,108,0.486]],["title/187-1",[528,39.302,921,45.085]],["name/187-1",[]],["text/187-1",[]],["component/187-1",[]],["title/187-2",[27,17.931,320,23.164,528,29.009,921,33.278]],["name/187-2",[]],["text/187-2",[]],["component/187-2",[]],["title/187-3",[130,16.16,320,23.164,528,29.009,921,33.278]],["name/187-3",[]],["text/187-3",[]],["component/187-3",[]],["title/187-4",[118,42.354]],["name/187-4",[]],["text/187-4",[]],["component/187-4",[]],["title/187",[528,47.778]],["name/187",[528,1.158]],["text/187",[0,0.783,5,1.434,9,2.02,11,1.918,14,2.404,17,0.918,19,2.424,27,3.608,32,1.536,35,1.594,40,0.834,45,1.541,50,2.49,57,1.38,59,4.147,60,1.427,62,1.264,63,1.002,67,0.883,70,1.096,77,1.781,81,0.694,98,1.382,111,1.115,113,1.294,114,1.687,115,3.187,118,2.235,119,2.073,121,0.892,130,2.301,131,2.898,133,2.224,137,2.001,141,0.908,157,2.087,166,1.254,175,0.942,176,1.68,177,1.061,178,0.819,182,2.673,183,1.278,184,1.88,185,0.772,186,4.003,190,1.707,191,1.206,192,2.286,198,1.056,199,1.642,202,2.881,215,1.943,216,1.635,218,1.648,220,1.206,231,0.989,234,1.287,237,0.817,238,1.142,244,1.783,249,1.722,250,2.059,252,2.347,253,1.287,256,1.965,265,1.648,269,4.282,271,1.97,272,1.09,278,2.435,279,2.515,287,2.59,288,2.145,305,1.465,315,2.507,317,0.756,320,3.507,323,0.831,331,3.914,332,1.011,333,1.084,335,1.456,337,0.965,340,0.836,341,2.705,347,1.791,348,1.498,351,1.977,353,1.567,356,0.777,364,1.465,371,0.957,394,1.783,406,0.921,420,2.026,421,1.722,426,1.382,454,2.849,458,0.935,468,1.498,483,2.76,486,1.498,495,2.226,505,1.233,509,1.337,516,1.989,523,2.125,525,1.843,528,7.091,533,1.135,543,2.247,550,1.714,551,2.125,557,1.366,569,2.38,571,1.736,572,1.078,576,2.495,582,0.928,584,1.579,593,1.026,596,2.039,610,2.577,621,2.843,647,0.985,649,1.871,665,1.475,669,1.324,674,1.128,687,1.434,688,2.921,722,3.214,726,2.001,741,5.792,759,0.874,786,1.03,822,0.973,824,1.579,842,1.254,879,2.08,880,1.337,908,1.287,910,1.188,917,1.016,921,7.8,922,2.141,926,1.382,927,1.434,977,1.102,1036,2.508,1043,2.982,1047,1.692,1087,1.523,1108,1.157,1168,3.998,1203,1.692,1249,0.935,1344,1.382,1352,1.243,1402,1.398,1413,1.498,1471,1.791,1680,1.692,1701,3.665,1705,2.095,1707,3.193,1846,3.098,1908,2.435,2061,1.692,2083,2.962,2157,1.197,2161,2.209,2426,1.215,2443,1.523,2459,1.741,2495,1.523,2633,6.455,2634,1.523,2660,4.255,2661,8.138,2706,5.85,2707,1.801,2708,1.612,2709,4.255,2710,1.475,2711,1.801,2712,3.174,2713,3.174,2714,2.495,2715,1.801,2716,1.475,2807,1.55,2923,1.649,2987,2.157,2991,1.498,2996,1.254,3033,1.579,3153,2.783,3154,1.579,3211,1.579,4188,1.337,4370,1.498,4465,4.819,4762,2.982,4766,3.998,4767,1.692,4768,1.692,4769,1.692,4770,1.55,4771,4.267,4772,1.875,4773,1.875,4774,1.875,4775,1.875,4776,1.875,4777,3.305,4778,1.875,4779,1.875,4780,1.875,4781,1.579,4782,1.875,4783,3.305,4784,1.875,4785,1.875,4786,1.875,4787,1.875,4788,1.875,4789,3.305,4790,1.875,4791,1.875,4792,1.875,4793,1.875,4794,1.692,4795,1.875,4796,4.431,4797,4.431,4798,1.875,4799,1.875,4800,1.875,4801,2.982,4802,1.875,4803,1.692,4804,1.875,4805,3.305,4806,6.092,4807,1.875,4808,3.174,4809,1.875,4810,1.579,4811,4.819,4812,1.875,4813,1.875,4814,1.875,4815,3.069,4816,1.875,4817,1.875,4818,1.875,4819,1.875,4820,1.875,4821,1.875,4822,4.431,4823,1.692,4824,1.875,4825,1.875,4826,1.875,4827,3.305,4828,1.875,4829,1.875]],["component/187",[11,0.279,108,0.486]],["title/188-1",[315,23.928,773,28.428,1064,36.356,4742,40.727]],["name/188-1",[]],["text/188-1",[]],["component/188-1",[]],["title/188-2",[318,53.991]],["name/188-2",[]],["text/188-2",[]],["component/188-2",[]],["title/188-3",[133,24.426,320,26.654,1165,32.24]],["name/188-3",[]],["text/188-3",[]],["component/188-3",[]],["title/188-4",[1072,55.177,1075,46.178]],["name/188-4",[]],["text/188-4",[]],["component/188-4",[]],["title/188-5",[936,40.601,4830,58.174]],["name/188-5",[]],["text/188-5",[]],["component/188-5",[]],["title/188-6",[235,44.869,650,37.722,902,49.409]],["name/188-6",[]],["text/188-6",[]],["component/188-6",[]],["title/188-7",[227,34.311,4830,58.174]],["name/188-7",[]],["text/188-7",[]],["component/188-7",[]],["title/188-8",[293,26.331,1075,46.178]],["name/188-8",[]],["text/188-8",[]],["component/188-8",[]],["title/188-9",[756,41.561,1075,46.178]],["name/188-9",[]],["text/188-9",[]],["component/188-9",[]],["title/188-10",[65,28.505,132,26.405,718,39.221]],["name/188-10",[]],["text/188-10",[]],["component/188-10",[]],["title/188-11",[60,29.82,1964,58.174]],["name/188-11",[]],["text/188-11",[]],["component/188-11",[]],["title/188-12",[109,31.888,4213,58.174]],["name/188-12",[]],["text/188-12",[]],["component/188-12",[]],["title/188-13",[61,45.802,62,46.568]],["name/188-13",[]],["text/188-13",[]],["component/188-13",[]],["title/188",[178,30.168,1415,52.828]],["name/188",[1415,1.557]],["text/188",[11,1.367,13,1.482,17,0.817,24,0.878,26,0.881,27,3.288,32,0.776,35,0.806,36,0.966,37,1.504,38,0.885,39,0.95,41,0.927,42,1.157,44,1.763,45,2.631,46,1.639,47,0.792,50,1.651,55,1.059,57,2.051,60,2.436,63,1.594,65,2.387,67,1.903,68,0.842,77,0.557,78,0.901,81,1.103,88,1.082,92,2.096,99,1.631,100,0.922,106,0.779,109,2.268,113,2.452,119,2.298,128,2.103,130,0.945,132,2.819,133,1.242,135,0.723,139,1.985,141,0.809,152,1.146,158,1.146,159,0.999,164,3.118,165,0.83,168,1.962,172,1.581,173,2.378,175,1.499,176,0.849,178,1.303,180,0.789,182,0.836,183,0.646,186,1.148,194,0.878,201,0.87,202,2.65,204,3.552,205,1.673,210,1.697,214,0.863,215,0.982,217,1.066,218,0.833,222,1.191,225,3.322,227,3.376,230,1.84,232,0.901,236,0.839,237,1.299,242,1.663,244,3.086,250,0.776,253,1.913,257,1.146,268,0.866,269,4.827,271,0.743,273,1.609,288,1.956,292,0.941,293,2.591,299,2.253,306,3.621,307,3.79,308,1.017,310,1.229,312,1.775,315,2.648,316,2.684,317,0.674,318,1.074,320,1.836,323,0.74,329,2.046,331,2.436,332,1.609,335,1.314,340,0.745,345,2.198,347,0.905,353,0.792,354,1.381,360,0.874,361,0.859,364,1.791,373,1.581,406,0.82,420,2.864,421,2.105,447,0.833,448,1.044,449,1.773,455,1.09,469,0.711,472,0.931,482,2.781,483,2.088,484,0.922,503,1.639,505,1.962,511,1.146,518,1.231,526,1.277,527,3.182,528,1.697,529,1.024,536,1.074,553,4.024,569,3.03,571,4.029,572,3.909,573,3.864,582,2,593,3.718,610,1.439,624,0.987,637,0.914,638,1.204,644,1.03,645,1.877,646,1.547,649,0.945,650,3.628,651,1.024,654,1.231,659,1.407,665,1.314,669,1.179,673,1.261,681,1.191,693,1.099,696,1.03,707,1.051,712,1.191,718,1.117,722,1.005,748,1.168,753,1.609,756,3.769,759,2.29,764,2.324,767,1.066,772,0.966,773,5.093,794,1.126,796,1.051,798,0.885,811,1.204,835,0.987,840,1.507,862,1.904,871,1.852,879,1.051,907,1.191,909,1.715,925,1.157,936,2.887,951,1.066,957,0.881,970,2.281,975,1.051,980,1.191,995,1.051,1004,1.044,1028,2.855,1035,0.927,1036,0.945,1062,1.295,1064,3.503,1065,2.198,1071,1.38,1072,7.767,1075,7.055,1086,2.507,1089,1.157,1108,2.493,1116,3.013,1134,0.966,1135,1.011,1157,1.469,1165,0.918,1167,2.065,1191,1.231,1193,1.507,1198,1.231,1215,1.217,1249,2.015,1306,2.691,1326,0.863,1402,1.245,1411,1.179,1413,4.507,1415,6.387,1424,3.646,1434,1.231,1520,2.028,1534,1.38,1645,2.253,1695,2.313,1697,2.346,1698,2.127,1705,1.89,1706,2.085,1707,4.066,1741,1.507,1822,1.191,1878,1.407,1977,1.507,2039,1.108,2083,1.117,2156,1.245,2157,1.904,2202,4.137,2246,2.431,2247,1.204,2343,1.024,2450,2.825,2580,1.168,2585,1.436,2646,3.554,2677,1.604,2714,2.252,2718,0.976,2734,1.09,2775,2.465,2875,1.231,2889,1.551,2903,1.604,2905,1.314,2961,1.146,3002,2.127,3141,2.065,3151,1.407,3455,1.231,3523,1.231,3530,1.334,3565,1.217,3626,1.407,3709,1.507,3768,1.507,3844,1.507,4034,1.277,4166,1.146,4213,1.407,4231,2.346,4246,1.191,4255,1.295,4429,1.507,4462,2.281,4469,1.277,4742,5.801,4830,1.407,4831,4.041,4832,1.67,4833,1.67,4834,1.67,4835,1.507,4836,1.67,4837,1.67,4838,1.67,4839,1.67,4840,1.67,4841,1.67,4842,1.67,4843,1.67,4844,1.67,4845,1.67,4846,1.67,4847,1.67,4848,1.507,4849,1.67,4850,2.983,4851,1.67,4852,1.67,4853,1.67,4854,5.643,4855,1.67,4856,1.67,4857,1.67,4858,1.67,4859,1.67,4860,2.983,4861,1.67,4862,1.67,4863,1.67,4864,1.67,4865,1.67,4866,1.67,4867,1.67,4868,2.983,4869,2.983,4870,1.67,4871,1.67,4872,1.67,4873,1.67,4874,1.67,4875,2.983,4876,1.67,4877,1.67,4878,1.67,4879,1.67,4880,2.983,4881,1.67,4882,1.67,4883,1.67,4884,1.67,4885,1.67,4886,1.67,4887,4.041,4888,1.67,4889,1.67,4890,1.67,4891,2.983,4892,1.67,4893,1.67]],["component/188",[11,0.279,108,0.486]],["title/189",[11,9.064,39,25.651,178,19.689,2456,23.196,2710,35.463]],["name/189",[441,0.899,2710,0.885]],["text/189",[9,1.969,24,2.27,27,3.926,45,2.014,63,2.31,77,2.198,80,3.399,100,3.641,101,5.271,102,3.557,103,3.379,105,3.275,106,3.728,113,1.691,119,3.084,132,4.755,144,2.162,159,2.584,168,2.842,173,2.092,176,2.196,178,2.88,181,2.648,183,3.092,198,2.433,202,4.314,205,1.789,222,3.081,225,3.597,250,2.008,253,1.683,265,2.154,281,2.498,288,4.332,293,3.048,310,3.294,317,2.66,320,4.378,327,4.783,331,4.16,335,2.906,340,3.566,384,3.59,393,1.975,420,1.975,610,3.181,611,2.162,637,2.363,669,3.05,696,2.665,697,3.399,713,5.752,743,2.842,756,3.968,764,6.419,765,3.081,771,2.683,772,2.498,786,5.296,975,5.033,1086,4.081,1326,2.232,1391,4.7,2456,2.223,2705,3.081,2710,10.055,2968,4.15,3141,7.033,3472,2.913,3508,5.553,3548,3.262,3704,3.184,4209,5.553,4894,4.321,4895,4.321,4896,4.321,4897,4.321,4898,4.321,4899,4.321,4900,4.321,4901,4.321,4902,4.321,4903,4.321,4904,4.321,4905,6.735,4906,7.997,4907,4.321,4908,4.321,4909,4.321,4910,4.321]],["component/189",[11,0.279,108,0.486]],["title/190",[972,30.168,1131,45.085]],["name/190",[972,0.491,1131,0.734]],["text/190",[7,2.7,9,1.941,11,1.925,18,2.541,27,3.99,45,1.986,50,2.666,57,1.778,60,1.839,68,5.095,77,3.192,81,1.576,115,3.758,123,2.802,130,3.437,133,2.716,148,2.192,151,2.238,172,2.257,173,2.062,175,3.983,183,3.703,186,2.51,197,2.739,214,2.201,227,5.815,237,4.578,242,4.42,244,4.473,250,1.979,251,3.813,252,2.866,265,3.252,268,2.21,269,3.708,271,3.524,279,2.006,288,2.062,299,1.954,305,1.888,310,3.265,312,2.866,315,3.061,317,1.718,320,1.935,323,2.891,335,1.877,341,2.157,364,1.888,406,2.092,420,1.948,421,2.219,502,2.183,558,2.257,571,2.238,582,2.108,610,2.055,623,3.384,631,4.024,644,4.024,646,3.384,647,2.238,668,2.387,673,3.216,773,2.375,835,2.518,871,2.645,879,2.681,934,4.106,938,2.739,940,4.475,961,3.403,972,4.736,1028,3.792,1086,2.174,1128,4.436,1129,2.611,1131,5.798,1899,3.007,2057,3.139,3208,3.303,3216,3.258,3594,4.291,3744,3.258,3814,3.007,4300,6.063,4462,3.258,4726,7.612,4911,6.972,4912,9.379,4913,4.26,4914,3.459,4915,5.211,4916,4.26,4918,3.843,4919,4.26,4920,7.927,4921,4.26,5654,3.956,6394,4.091]],["component/190",[11,0.279,108,0.486]],["title/191-1",[186,22.577,496,34.101,909,33.734]],["name/191-1",[]],["text/191-1",[]],["component/191-1",[]],["title/191-2",[320,31.382,856,43.477]],["name/191-2",[]],["text/191-2",[]],["component/191-2",[]],["title/191-3",[910,43.78,4922,62.317]],["name/191-3",[]],["text/191-3",[]],["component/191-3",[]],["title/191-4",[320,31.382,4923,58.174]],["name/191-4",[]],["text/191-4",[]],["component/191-4",[]],["title/191-5",[982,58.144]],["name/191-5",[]],["text/191-5",[]],["component/191-5",[]],["title/191-6",[177,39.1,479,32.861]],["name/191-6",[]],["text/191-6",[]],["component/191-6",[]],["title/191",[1134,48.544]],["name/191",[1134,1.177]],["text/191",[0,1.936,4,0.574,7,4.619,11,2.27,15,0.643,17,0.619,18,1.25,19,0.692,21,0.78,22,0.761,24,1.218,27,3.534,28,1.112,30,1.689,32,1.847,35,0.61,37,0.638,38,1.701,39,1.319,40,1.767,45,1.853,46,0.695,50,0.947,57,1.659,59,2.452,60,2.669,63,0.676,65,2.535,67,1.512,68,0.638,70,2.323,73,0.78,75,0.679,77,0.773,78,0.682,79,1.48,81,1.715,88,0.819,91,0.98,92,0.656,96,0.731,99,0.692,101,0.692,102,0.682,103,0.648,105,2.303,106,2.432,109,1.07,113,2.723,114,0.645,115,4.598,127,1.613,128,2.452,130,1.653,131,2.482,133,1.336,137,0.765,141,0.612,142,1.122,144,0.633,150,0.852,151,0.664,157,0.595,159,0.756,164,0.58,165,0.628,166,4.406,172,0.67,173,1.122,175,0.635,176,1.632,178,0.552,179,0.765,180,0.597,182,0.633,183,3.388,185,0.955,186,4.049,192,1.374,194,1.686,196,1.293,203,0.932,205,0.524,210,1.319,213,0.875,216,1.588,221,1.122,223,0.819,237,2.272,242,0.705,244,0.933,249,1.672,250,2.662,252,2.895,253,2.032,265,1.156,269,1.34,271,2.93,272,0.735,273,1.25,279,3.276,287,2.323,288,0.612,291,0.911,295,0.932,299,0.58,303,0.656,305,0.56,306,0.731,309,0.682,312,2.716,315,3.42,316,1.103,317,2.494,320,3.573,323,1.423,331,1.716,332,1.25,335,2.724,340,1.431,342,0.685,354,1.074,360,1.679,364,0.56,373,1.701,376,1.836,382,0.902,383,0.716,384,0.688,393,0.578,406,1.577,409,2.573,420,1.817,421,0.659,446,0.902,447,1.6,448,1.449,450,0.739,467,1.605,470,0.796,479,1.891,483,4.063,484,2.56,489,0.659,502,0.648,503,1.274,506,5.628,511,5.728,516,1.395,525,1.79,527,0.819,528,0.719,533,1.403,541,1.764,550,0.656,557,0.921,571,2.088,611,0.633,623,1.203,624,0.747,631,0.78,637,0.692,645,1.459,646,1.203,647,1.218,649,1.312,650,3.354,651,2.436,654,0.932,657,0.723,667,0.967,668,1.799,687,0.967,693,0.832,696,0.78,702,1.739,710,1.045,726,0.765,759,3.784,768,0.967,771,0.785,772,0.731,773,0.705,791,4.975,792,1.01,794,2.164,798,1.228,815,1.045,816,2.298,822,0.656,827,2.555,842,0.845,904,0.893,907,0.902,909,5.648,910,6.982,911,7.677,917,0.685,922,1.502,925,2.223,926,0.932,927,1.773,934,0.796,936,1.887,971,2.679,979,1.045,981,5.357,982,8.056,983,1.065,996,0.875,1002,0.967,1008,0.867,1045,2.455,1084,0.932,1086,2.028,1102,0.752,1104,1.065,1122,1.141,1129,0.775,1130,1.653,1133,2.091,1134,4.021,1135,0.765,1142,4.521,1154,0.852,1172,0.832,1173,0.86,1180,1.916,1194,1.01,1249,1.156,1326,0.653,1394,0.893,1471,1.739,1576,0.723,1649,0.86,1705,0.801,1708,0.801,1793,0.943,2157,0.807,2246,0.761,2253,1.98,2343,1.421,2414,0.801,2451,0.785,2456,1.193,2568,0.995,2594,0.875,2651,2.226,2734,0.825,2758,0.761,2905,0.995,2913,1.045,2972,0.967,2987,0.825,2996,0.845,3003,1.01,3026,2.703,3027,4.576,3153,1.065,3162,5.168,3211,2.703,3350,1.01,3366,1.141,3381,0.954,3387,0.932,3436,0.967,3523,1.708,3580,1.065,3642,0.967,3835,1.112,3880,1.01,4148,1.141,4255,0.98,4330,1.141,4443,1.065,4445,2.091,4469,2.455,4609,1.141,4794,1.141,4823,1.141,4922,6.846,4924,1.264,4925,3.21,4926,1.264,4927,1.264,4928,1.264,4929,1.264,4930,1.264,4931,1.174,4932,3.21,4933,1.264,4934,1.264,4935,2.318,4936,2.318,4937,1.264,4938,1.264,4939,1.264,4940,1.264,4941,1.264,4942,3.21,4943,1.264,4944,1.141,4945,1.264,4946,1.264,4947,1.264,4948,7.589,4949,1.264,4950,3.974,4951,1.264,4952,1.264,4953,2.318,4954,3.974,4955,1.264,4956,1.264,4957,1.264,4958,1.264,4959,1.264,4960,1.264,4961,1.264,4962,1.264,4963,1.264,4964,1.264,4965,1.264,4966,1.264,4967,1.264,4968,1.264,4969,1.264,4970,1.264,4971,3.21,4972,1.264,4973,1.264,4974,1.264,4975,1.264]],["component/191",[11,0.279,108,0.486]],["title/192-1",[141,28.403,185,24.166,186,22.577]],["name/192-1",[]],["text/192-1",[]],["component/192-1",[]],["title/192-2",[128,25.111,141,28.403,243,27.351]],["name/192-2",[]],["text/192-2",[]],["component/192-2",[]],["title/192-3",[27,17.931,185,21.002,186,19.621,407,27.136]],["name/192-3",[]],["text/192-3",[]],["component/192-3",[]],["title/192-4",[186,26.583,1026,52.828]],["name/192-4",[]],["text/192-4",[]],["component/192-4",[]],["title/192",[141,40.654]],["name/192",[141,0.986]],["text/192",[0,1.388,9,1.515,11,1.357,15,1.69,18,1.295,27,3.712,33,1.845,42,3.716,57,1.388,67,1.565,71,1.345,72,1.54,86,2.51,106,1.55,109,3.116,113,2.642,128,3.891,131,1.582,135,1.439,136,2.796,138,3.561,139,1.633,140,6.041,141,5.725,144,2.686,167,2.542,172,1.762,174,2.656,176,2.728,178,1.452,180,1.571,183,3.515,185,4.348,186,4.363,191,3.451,192,2.297,198,1.872,209,4.454,221,1.609,227,1.651,236,2.697,243,4.792,244,3.117,250,1.545,252,2.358,253,2.629,259,2.8,261,2.8,263,2.656,267,2.8,268,1.725,269,4.505,271,3.444,276,3.378,277,4.435,299,2.462,312,3.403,317,3.429,320,1.51,323,2.379,325,4.308,329,2.281,331,1.435,332,1.793,333,3.902,335,1.465,340,1.483,341,2.718,342,2.908,354,1.54,359,4.298,364,2.379,373,1.762,392,2.656,393,3.086,407,2.856,469,1.415,470,2.092,496,1.932,524,2.302,528,3.054,558,1.762,571,2.82,572,1.912,582,1.645,629,2.051,632,2.241,674,2,688,1.818,713,1.81,722,4.061,741,5.524,746,2.45,756,2,759,2.502,773,1.854,818,2.153,824,2.8,861,2.371,864,2.137,870,2.092,977,1.954,1026,4.105,1086,2.739,1109,2.261,1111,2.8,1119,2.422,1154,2.241,1253,2.092,1375,2.999,1420,2.281,1446,2.542,1522,2.347,1567,2.153,1712,2.656,1960,2.8,2114,2.45,2432,2.924,2512,4.917,2563,2.615,2951,5.154,2966,2.656,3344,2.422,3670,2.45,3671,2.656,3879,4.842,4504,2.999,4811,4.842,4976,3.324,4977,3.324,4978,3.324,4979,3.324,4980,3.324,4981,3.324,4982,3.324,4983,3.324,4984,3.324,4985,3.324,4986,3.324,4987,3.324,4988,3.324,4989,5.367,4990,3.324,4991,3.324,4992,5.367,4993,3.324,4994,3.324,4995,3.324,4996,3.324,4997,3.324,4998,3.324,4999,3.324,5000,3.324,5001,3.324,5002,3.324,5003,3.324,5004,3.324,5005,3.324,5006,3.324,5007,3.324,5008,3.324]],["component/192",[11,0.279,108,0.486]],["title/193-1",[131,27.91,496,34.101,6146,42.276]],["name/193-1",[]],["text/193-1",[]],["component/193-1",[]],["title/193-2",[79,44.092,6146,49.776]],["name/193-2",[]],["text/193-2",[]],["component/193-2",[]],["title/193",[178,30.168,6146,49.776]],["name/193",[6146,1.467]],["text/193",[0,2.407,11,1.993,15,1.848,18,2.791,22,2.188,24,1.91,27,3.327,32,1.689,36,2.102,45,1.695,47,3.397,50,1.486,55,2.304,67,4.454,71,1.47,72,1.684,73,3.557,75,1.952,76,1.834,77,1.922,79,6.038,81,4.228,85,3.062,118,1.834,119,2.697,120,1.935,126,1.773,127,2.897,128,1.556,130,2.271,131,2.743,133,1.514,134,2.541,137,2.201,142,1.76,144,4.734,148,1.871,150,2.451,151,4.67,157,1.712,159,2.175,165,2.864,169,2.027,172,1.927,173,1.76,183,1.406,185,1.498,186,3.138,190,1.878,192,1.556,193,4.352,215,2.137,221,1.76,231,1.918,236,1.827,265,2.875,279,1.712,285,2.079,288,1.76,299,1.668,305,1.612,310,4.236,312,3.582,316,1.73,317,1.467,323,3.176,361,2.966,364,1.612,368,2.069,376,2.079,394,1.961,406,1.786,420,2.636,469,3.47,479,3.879,496,2.113,502,1.863,511,2.495,593,1.989,594,2.819,603,2.048,604,2.304,627,3.298,630,2.288,631,2.243,633,3.735,643,1.97,645,2.288,650,2.338,651,4.998,657,4.663,668,3.231,671,3.887,672,2.175,693,2.392,696,2.243,698,2.243,703,3.534,713,1.979,743,2.392,753,1.961,759,1.695,791,2.745,798,1.927,811,2.62,822,1.886,835,2.149,915,3.28,933,2.62,972,1.588,1000,2.517,1061,2.904,1077,2.952,1089,2.517,1191,2.679,1221,3.28,1249,2.875,1330,3.28,1397,5.479,1434,2.679,1567,2.355,1899,2.566,2156,2.711,2410,2.649,2418,4.535,2426,6.421,2591,4.409,2824,4.2,2904,2.745,2912,2.781,2971,3.062,3701,2.62,3993,2.904,4034,2.781,4166,3.956,4452,3.28,6132,3.491,6146,8.667,6268,5.766,6269,3.636,6286,5.354,6287,3.636,6293,3.636,6294,3.636,6395,6.072,6396,6.072,6397,3.829,6398,3.829,6399,3.829,6400,3.829]],["component/193",[11,0.279,108,0.486]],["title/194-1",[1112,34.101,2594,40.623,5009,46.864]],["name/194-1",[]],["text/194-1",[]],["component/194-1",[]],["title/194-2",[320,26.654,2594,40.623,5009,46.864]],["name/194-2",[]],["text/194-2",[]],["component/194-2",[]],["title/194-3",[320,31.382,1112,40.15]],["name/194-3",[]],["text/194-3",[]],["component/194-3",[]],["title/194",[205,28.605,225,25.785]],["name/194",[205,0.466,225,0.42]],["text/194",[7,1.505,18,0.925,27,3.484,32,1.886,35,1.958,44,1.404,45,3.29,47,1.126,50,2.171,57,3.21,60,1.025,63,2.169,65,1.154,67,1.118,68,3.169,77,0.792,103,1.217,105,1.18,106,1.892,109,3.997,114,2.071,115,1.126,128,2.274,130,1.286,133,1.69,141,3.723,161,4.267,168,1.562,169,2.263,173,1.15,180,1.122,183,2.729,190,3.246,199,2.016,205,4.856,206,2.141,216,1.175,218,2.023,225,3.924,236,1.193,237,2.736,246,2.669,250,1.886,253,2.749,265,2.023,269,4.389,271,3.652,273,2.866,276,2.554,286,2.179,293,1.547,297,1.429,299,1.861,302,1.886,303,3.26,305,1.799,306,1.373,310,3.566,316,1.13,317,1.637,320,2.414,323,1.053,330,4.288,331,3.32,335,1.788,337,1.222,340,1.059,341,2.055,347,1.287,356,2.2,364,1.799,371,2.071,373,2.815,378,1.293,393,1.086,406,2.609,407,1.264,420,2.873,421,1.237,453,1.429,489,1.237,502,1.217,511,2.784,529,2.487,533,1.438,558,2.15,582,3.805,593,3.86,605,1.897,610,1.146,611,3.145,616,1.793,617,1.366,619,2.274,623,1.232,627,1.359,630,1.495,643,1.287,647,1.248,649,1.344,669,1.677,671,1.601,707,2.554,722,1.429,752,1.55,753,2.189,771,2.52,773,1.324,818,1.539,822,1.232,863,2.427,925,1.645,934,1.495,950,4.273,972,1.037,977,5.312,978,5.945,1008,2.784,1009,2.81,1028,3.088,1086,3.207,1089,1.645,1112,6.816,1130,1.694,1136,1.817,1173,1.615,1186,1.366,1188,5.229,1212,1.677,1216,1.771,1435,1.73,1559,3.581,1568,1.485,1687,1.712,1693,2.143,1713,2.924,2114,2.99,2161,2.713,2331,1.645,2343,1.456,2456,2.088,2594,6.859,2641,2.281,2725,2.956,2734,2.649,2781,2.089,2998,1.344,3216,1.817,3783,1.817,3843,7.811,4144,1.963,4166,2.784,4246,1.694,4255,1.842,4469,1.817,4470,1.897,4722,5.669,4918,2.143,4944,2.143,5009,7.482,5010,5.312,5011,2.375,5012,2.375,5013,2.375,5014,2.375,5015,2.375,5016,2.206,5017,2.375,5018,2.143,5019,2.375,5020,2.375,5021,2.375,5022,2.375,5023,2.375,5024,2.375,5025,2.375,5026,2.375,5027,2.375,5028,2.375,5029,2.375,5030,6.284,5031,2.375,5032,2.375,5033,2.375,5034,4.058,5035,2.375,5036,2.375,5037,2.375,5038,2.375,5039,2.375,5040,2.375,5041,2.375,5042,2.375,5043,2.375,5044,2.375,5045,2.375,5046,2.375,5048,2.375,5049,2.375,6401,2.502]],["component/194",[11,0.279,108,0.486]],["title/195-1",[225,25.785,1411,48.759]],["name/195-1",[]],["text/195-1",[]],["component/195-1",[]],["title/195-2",[984,49.639]],["name/195-2",[]],["text/195-2",[]],["component/195-2",[]],["title/195-3",[225,25.785,226,38.901]],["name/195-3",[]],["text/195-3",[]],["component/195-3",[]],["title/195-4",[6105,73.857]],["name/195-4",[]],["text/195-4",[]],["component/195-4",[]],["title/195-5",[6257,75.757]],["name/195-5",[]],["text/195-5",[]],["component/195-5",[]],["title/195-6",[6258,75.757]],["name/195-6",[]],["text/195-6",[]],["component/195-6",[]],["title/195",[9,31.481,315,32.418]],["name/195",[9,0.513,315,0.528]],["text/195",[0,0.431,9,0.471,11,1.006,13,0.955,18,0.749,21,0.637,24,0.542,26,0.545,27,3.307,29,0.8,32,0.893,37,0.97,38,0.547,39,1.094,40,1.77,44,0.61,45,1.257,47,0.911,57,0.431,60,1.719,65,0.934,67,0.486,68,1.704,71,0.777,74,0.779,76,0.97,77,0.899,78,0.557,81,0.382,86,0.779,87,0.825,89,0.637,106,0.481,108,0.361,109,1.245,113,1.322,115,0.911,119,1.58,127,0.519,128,2.141,130,1.585,139,0.507,141,3.979,151,1.01,157,0.486,159,0.617,161,0.573,165,0.513,166,0.69,170,2.11,173,0.5,176,1.717,178,1.178,183,1.539,184,0.587,185,2.81,188,3.435,190,0.533,192,3.595,194,1.01,197,2.56,198,1.083,199,0.513,201,0.538,202,4.433,204,0.65,205,2.7,208,0.659,210,0.587,216,0.511,217,3.47,218,2.908,221,1.306,225,3.136,226,5.639,227,1.34,230,0.637,231,0.545,236,1.355,237,2.839,240,0.576,242,0.576,243,1.575,244,1.359,253,1.316,269,5.325,271,2.417,276,1.21,281,2.891,287,1.124,288,0.5,291,0.744,299,0.474,301,3.192,302,0.48,305,1.196,310,3.596,312,2.562,315,3.942,316,1.607,317,1.363,320,1.809,323,0.852,327,1.15,330,0.576,331,3.465,332,0.557,333,0.597,335,0.455,340,0.857,341,0.523,352,0.633,353,0.489,356,2.251,358,0.702,359,4.453,360,0.54,361,0.531,364,1.196,371,0.981,373,0.547,376,0.591,378,0.562,380,0.6,393,1.544,394,1.455,406,1.325,409,3.435,423,0.633,426,0.761,449,2.367,450,0.603,483,0.993,501,1.077,502,0.985,507,0.57,520,0.57,525,3.452,527,0.669,541,3.583,550,0.536,576,1.451,582,3.064,593,1.051,596,1.664,603,1.083,610,1.921,611,0.517,615,0.645,617,1.942,623,0.997,637,1.051,643,1.042,646,1.399,647,1.01,649,1.088,653,4.162,654,0.761,656,1.745,657,2.584,666,0.79,674,0.621,679,1.4,696,0.637,703,0.633,706,0.908,713,1.046,722,0.621,759,1.257,764,3.749,765,0.736,767,0.659,773,1.504,785,0.8,789,0.761,794,0.696,801,1.734,841,1.285,862,0.659,863,2.02,869,1.686,879,0.65,909,0.594,910,2.523,921,0.674,922,0.669,930,0.812,934,1.21,938,1.734,940,1.319,944,0.8,951,3.47,954,0.8,955,0.8,972,2.848,975,2.126,977,1.585,978,0.679,980,0.736,981,0.729,984,4.859,994,0.869,995,0.65,996,0.715,999,0.812,1022,1.734,1035,1.067,1064,0.736,1071,0.853,1075,1.285,1086,1.377,1102,2.367,1109,0.702,1129,2.071,1134,1.953,1139,0.931,1186,0.594,1202,2.011,1204,0.708,1222,0.77,1249,2.494,1252,0.65,1254,0.715,1270,0.869,1340,2.541,1343,0.679,1394,0.729,1411,3.53,1471,0.559,1494,0.69,1495,0.761,1520,0.702,1576,1.932,1600,0.888,1687,1.385,1698,0.736,1704,0.587,1705,2.141,1901,0.696,1942,0.761,1962,0.69,2004,2.154,2083,0.69,2103,0.736,2156,0.77,2235,0.79,2246,1.623,2253,1.186,2331,3.129,2364,0.869,2414,0.654,2427,2.505,2442,0.722,2446,2.372,2450,0.722,2456,0.531,2495,0.838,2529,1.512,2531,3.19,2559,0.991,2565,0.853,2566,0.908,2646,0.908,2648,0.991,2734,0.674,2756,2.229,2832,1.785,2833,1.785,2834,2.505,2835,2.505,2836,1.846,2837,5.945,2838,1.846,2839,1.846,2853,1.785,2912,0.79,2913,0.853,2938,0.908,2961,0.708,2987,0.674,3001,0.812,3002,1.371,3003,3.609,3012,2.271,3013,1.619,3014,0.869,3015,0.869,3016,0.869,3032,1.47,3070,1.734,3090,1.619,3092,1.619,3093,0.825,3111,0.869,3112,0.869,3122,2.154,3138,0.931,3139,0.931,3145,0.825,3151,2.845,3154,1.619,3165,1.734,3213,0.869,3240,0.931,3241,0.931,3249,0.869,3250,0.931,3344,0.752,3357,1.734,3387,0.761,3420,0.779,3431,0.79,3488,0.931,3615,0.908,3701,0.744,3704,0.761,3758,2.433,3787,0.8,3812,0.825,3814,0.729,4456,0.79,4616,2.583,4719,0.908,4742,0.825,4763,0.931,4771,0.825,4781,0.869,4810,0.869,4848,1.734,5009,1.536,5050,1.032,5051,1.032,5052,1.032,5053,1.032,5054,1.032,5055,1.032,5056,1.734,5057,2.697,5058,1.032,5059,1.032,5060,1.032,5061,1.032,5062,1.032,5063,1.032,5064,1.032,5065,1.032,5066,1.032,5067,1.032,5068,1.032,5069,0.931,5070,1.922,5071,1.032,5072,1.032,5073,1.032,5074,1.032,5075,1.032,5076,1.032,5077,1.032,5078,1.032,5079,1.032,5080,1.032,5081,1.032,5082,1.032,5083,1.032,5084,1.032,5085,1.032,5086,1.032,5087,1.032,5088,1.032,5089,1.032,5090,1.032,5091,1.032,5092,1.032,5093,1.032,5094,2.697,5095,1.032,5096,1.032,5097,1.032,5098,1.032,5099,1.032,5100,1.922,5101,1.922,5102,1.032,5103,1.032,5104,1.032,5105,1.032,5106,1.032,5107,1.032,5108,1.032,5109,1.032,5110,1.032,5111,1.032,5112,1.032,5113,1.032,5114,1.032,5115,1.032,5116,1.032,5117,1.032,5118,1.619,5119,1.032,5120,1.032,5121,1.922,5122,1.922,5123,1.032,5124,3.378,5125,1.032,5126,1.032,5127,1.032,5128,1.032,5129,1.032,5130,1.032,5131,1.032,5132,1.032,5133,1.922,5134,1.032,5136,1.032,5137,1.032,5138,1.032,5139,1.922,5140,1.922,5141,1.922,5142,1.032,5143,1.032,5144,1.922,5145,1.032,5146,1.032,5147,1.032,5148,2.697,5149,1.922,5150,1.032,5151,1.032,5152,1.032,5153,1.032,5154,1.032,5155,1.032,5156,1.032,5157,1.032,5158,1.032,5159,1.032,5160,1.032,5161,1.032,5162,2.697,5163,5.437,5164,1.032,5165,1.922,5166,1.922,5167,1.032,5168,1.032,5169,1.032,5170,1.032,5171,1.032,5172,1.922,5173,1.032,5174,1.922,5175,1.922,5176,1.032,5177,1.032,5178,1.032,5179,1.032,5180,1.032,5181,1.032,6105,2.971,6257,4.077,6258,1.734,6279,1.087,6402,1.087,6403,3.558,6404,2.841,6405,2.025,6406,1.087,6407,1.087,6408,2.025,6409,2.025,6437,1.171,6438,1.171,6439,1.171,6440,1.171,6441,1.171]],["component/195",[11,0.279,108,0.486]],["title/196-1",[3411,55.679]],["name/196-1",[]],["text/196-1",[]],["component/196-1",[]],["title/196-2",[130,21.893,315,32.418]],["name/196-2",[]],["text/196-2",[]],["component/196-2",[]],["title/196-3",[130,18.595,315,27.533,1450,36.675]],["name/196-3",[]],["text/196-3",[]],["component/196-3",[]],["title/196-4",[27,17.931,175,25.617,1846,35.64,2442,35.64]],["name/196-4",[]],["text/196-4",[]],["component/196-4",[]],["title/196-5",[19,37.78,315,32.418]],["name/196-5",[]],["text/196-5",[]],["component/196-5",[]],["title/196-6",[184,39.302,315,32.418]],["name/196-6",[]],["text/196-6",[]],["component/196-6",[]],["title/196-7",[185,34.589]],["name/196-7",[]],["text/196-7",[]],["component/196-7",[]],["title/196-8",[185,28.453,315,32.418]],["name/196-8",[]],["text/196-8",[]],["component/196-8",[]],["title/196-9",[957,44.305]],["name/196-9",[]],["text/196-9",[]],["component/196-9",[]],["title/196-10",[185,24.166,759,27.351,957,30.954]],["name/196-10",[]],["text/196-10",[]],["component/196-10",[]],["title/196-11",[184,39.302,957,36.445]],["name/196-11",[]],["text/196-11",[]],["component/196-11",[]],["title/196-12",[528,47.778]],["name/196-12",[]],["text/196-12",[]],["component/196-12",[]],["title/196-13",[327,41.313,3614,55.177]],["name/196-13",[]],["text/196-13",[]],["component/196-13",[]],["title/196",[315,39.409]],["name/196",[315,0.956]],["text/196",[0,0.685,4,0.269,7,0.376,9,1.814,11,1.318,14,2.698,15,0.578,18,2.081,19,1.605,22,0.685,24,0.861,25,1.125,26,1.928,27,3.438,32,1.363,33,0.91,35,1.415,36,0.343,37,0.299,38,0.314,39,0.337,40,0.264,41,0.329,44,0.351,45,1.181,46,0.625,47,0.997,48,1.173,50,2.277,57,2.326,59,1.298,60,1.427,61,0.393,62,0.4,63,1.768,65,1.425,67,0.991,68,3.024,71,1.337,72,0.275,74,0.448,75,0.319,76,0.299,77,0.978,81,1.473,92,0.308,94,0.474,95,0.419,96,2.645,97,0.345,99,0.324,100,0.328,101,0.324,102,0.32,103,0.304,105,0.565,106,0.53,109,0.525,112,1.384,113,0.232,114,0.837,115,3.188,117,1.498,119,1.71,121,0.541,123,0.39,127,0.298,128,1.085,130,2.716,132,0.267,133,0.876,134,0.415,137,0.993,144,0.297,148,1.304,150,0.4,151,1.737,152,0.781,157,0.279,161,0.329,165,1.045,168,0.39,170,0.603,172,0.603,173,1.42,175,3.999,176,2.024,178,0.716,179,0.359,180,1.386,181,0.697,182,2.789,183,1.539,184,2.603,185,4.226,186,1.407,190,0.847,192,1.704,194,0.861,199,1.045,200,0.877,202,1.972,205,2.785,210,0.647,214,0.306,215,0.349,216,1.254,217,0.379,218,1.463,220,2.126,221,0.794,222,0.423,225,3.539,227,0.565,231,1.337,236,1.057,237,3.881,238,1.281,240,3.655,241,0.384,244,1.725,246,0.39,250,2.126,252,2.72,253,2.743,265,0.296,268,1.896,269,4.937,270,0.474,271,2.836,273,0.884,276,0.373,279,0.279,281,1.216,285,0.339,288,1.42,291,1.826,293,3.366,297,0.685,299,1.162,301,0.379,302,0.529,305,0.504,306,3.221,307,3.107,308,2.226,309,0.32,310,2.77,312,1.749,313,0.397,315,5.48,316,1.205,317,0.459,318,2.757,320,1.333,323,0.263,324,0.387,327,4.891,330,0.331,331,1.094,332,1.583,335,0.927,337,0.305,340,1.13,341,3.229,342,1.981,345,0.838,351,0.355,352,0.364,354,0.275,356,0.679,359,0.329,360,0.31,361,1.082,364,1.466,368,1.442,371,2.473,378,0.323,379,0.732,380,0.661,384,1.8,392,0.563,393,0.271,394,0.884,396,1.772,406,1.795,420,1.158,421,0.593,424,0.366,439,0.357,447,0.296,448,0.711,449,0.677,450,0.347,469,0.252,482,2.743,484,0.905,489,1.096,501,0.332,502,1.873,503,0.326,507,0.628,516,0.357,520,1.162,528,2.757,532,1.343,533,0.359,540,0.685,541,2.804,543,0.403,550,0.308,551,0.381,553,0.423,558,1.555,569,0.319,571,0.312,582,1.636,593,1.809,599,0.379,603,0.641,610,1.763,611,0.821,615,0.371,623,1.715,627,1.203,629,0.366,632,1.418,634,0.366,637,0.324,641,1.115,642,0.5,644,0.702,645,2.081,646,1.091,647,0.312,649,1.434,651,1.289,652,0.5,653,0.379,659,0.5,666,0.454,668,0.919,669,2.071,671,0.4,674,0.685,688,0.324,696,1.012,702,1.14,703,0.697,713,0.619,739,0.474,741,1.5,752,1.654,753,1.367,759,3.351,764,0.654,772,0.343,773,0.634,776,0.829,786,0.625,796,0.373,798,0.314,811,0.427,816,0.343,822,0.59,835,0.969,859,1.169,862,1.343,869,0.711,881,1.208,887,0.423,901,1.105,907,0.811,921,1.915,922,0.384,925,0.411,934,3.363,936,1.489,938,0.732,939,0.848,940,1.738,946,0.859,950,3.634,951,3.093,957,4.702,971,1.105,972,1.739,975,0.373,977,0.964,1002,1.254,1004,0.711,1008,0.407,1011,0.39,1028,0.345,1030,0.379,1035,0.91,1039,0.407,1046,0.423,1086,1.688,1089,0.788,1090,1.381,1107,0.397,1109,0.403,1121,2.343,1128,0.774,1129,1.005,1130,0.423,1131,0.387,1135,0.359,1144,0.482,1159,0.474,1165,1.156,1172,0.39,1182,0.442,1186,0.341,1187,0.407,1204,0.407,1212,0.803,1216,1.569,1218,0.535,1235,0.474,1249,3.18,1252,0.373,1253,0.373,1273,0.482,1326,1.087,1327,0.415,1338,0.403,1340,0.379,1343,0.748,1390,2.81,1397,0.454,1411,2.071,1450,1.584,1494,0.761,1516,0.5,1520,0.403,1523,0.522,1534,0.49,1567,0.384,1569,0.51,1576,0.339,1599,0.535,1701,1.738,1713,2.869,1740,1.381,1822,1.169,1846,2.311,1899,0.803,1901,0.767,1942,0.437,1943,0.454,1945,0.423,2005,0.437,2022,3.197,2039,0.393,2057,1.208,2063,0.535,2083,1.694,2117,0.427,2150,0.448,2157,1.047,2161,0.397,2247,0.427,2343,1.005,2389,1.355,2394,0.838,2414,1.333,2418,0.467,2434,0.482,2442,2.555,2450,1.47,2456,0.305,2503,2.732,2531,4.232,2580,4.814,2705,1.169,2724,1.655,2726,0.909,2735,0.49,2742,1.442,2746,1.575,2755,1.913,2758,0.357,2775,0.94,2812,0.57,2824,0.432,2892,4.594,2957,0.51,2961,0.407,2968,0.373,2972,1.254,3004,0.87,3196,0.437,3213,0.958,3216,0.87,3249,0.5,3384,0.387,3387,0.838,3411,0.393,3424,0.437,3431,0.454,3510,0.535,3519,0.454,3523,1.55,3614,3.18,3663,0.958,3698,5.371,3701,0.427,3707,0.535,3749,0.535,3754,0.535,3814,0.803,3990,0.958,4166,0.781,4168,0.958,4300,0.87,4425,1.609,4446,0.51,4456,0.454,4462,0.454,4469,0.87,4470,0.474,4552,0.535,4616,0.454,4730,0.535,4766,0.535,4767,0.535,4768,0.535,4769,0.535,4770,0.49,4771,2.343,4801,0.535,4815,0.551,4835,1.479,4905,2.471,4911,2.908,4912,0.551,4914,0.482,4915,0.909,5018,0.535,5069,0.535,5187,1.64,5189,0.593,5193,0.593,5194,0.593,5195,0.593,5205,1.479,5212,1.64,5213,0.593,5214,1.138,5215,2.104,5217,0.593,5219,0.593,5220,0.593,5221,0.593,5222,0.593,5223,0.593,5224,1.64,5225,0.593,5226,0.593,5227,0.593,5229,0.535,5230,0.593,5231,0.593,5232,0.593,5233,0.593,5234,1.138,5235,0.593,5236,0.593,5237,0.593,5238,1.64,5239,1.138,5240,0.593,5241,0.593,5242,0.593,5243,0.593,5245,0.593,5246,0.593,5247,0.593,5248,0.593,5249,0.593,5250,0.593,5252,1.64,5253,1.138,5254,0.593,5255,1.138,5256,1.138,5257,1.138,5258,0.593,5259,0.593,5260,0.593,5261,0.593,5262,0.593,5263,0.593,5264,0.593,5265,0.593,5266,0.593,5267,1.64,5268,1.138,5269,1.138,5270,1.138,5271,1.138,5272,0.593,5273,0.593,5274,0.593,5275,0.593,5276,1.138,5277,0.593,5278,0.593,5279,0.593,5280,0.593,5281,0.593,5282,0.593,5283,0.593,5284,0.593,5285,0.593,5286,0.593,5287,0.593,5288,0.593,5289,0.593,5290,0.593,5291,0.593,5292,0.593,5293,0.593,5294,0.593,5295,0.593,5296,0.593,5297,0.593,5298,0.593,5299,0.535,5300,0.593,5301,0.593,5966,1.479,6129,0.593,6146,2.114,6272,0.593,6273,0.593,6275,1.138,6278,1.64,6410,1.198,6411,0.625,6412,0.625,6413,0.625,6414,3.09,6415,0.625,6416,1.727,6417,0.625,6418,0.625]],["component/196",[11,0.279,108,0.486]],["title/197-1",[253,32.708]],["name/197-1",[]],["text/197-1",[]],["component/197-1",[]],["title/197-2",[356,28.605,5302,62.317]],["name/197-2",[]],["text/197-2",[]],["component/197-2",[]],["title/197-3",[156,55.177,5303,62.317]],["name/197-3",[]],["text/197-3",[]],["component/197-3",[]],["title/197-4",[132,37.794]],["name/197-4",[]],["text/197-4",[]],["component/197-4",[]],["title/197-5",[354,27.171,501,32.874,2456,30.186]],["name/197-5",[]],["text/197-5",[]],["component/197-5",[]],["title/197-6",[682,56.137]],["name/197-6",[]],["text/197-6",[]],["component/197-6",[]],["title/197-7",[5304,75.757]],["name/197-7",[]],["text/197-7",[]],["component/197-7",[]],["title/197-8",[1154,34.373,3365,53.218,5305,50.986]],["name/197-8",[]],["text/197-8",[]],["component/197-8",[]],["title/197-9",[501,32.874,2463,49.409,3932,49.409]],["name/197-9",[]],["text/197-9",[]],["component/197-9",[]],["title/197-10",[2433,45.802,5306,62.317]],["name/197-10",[]],["text/197-10",[]],["component/197-10",[]],["title/197-11",[361,43.206]],["name/197-11",[]],["text/197-11",[]],["component/197-11",[]],["title/197-12",[130,16.16,353,24.172,1165,28.018,2433,33.807]],["name/197-12",[]],["text/197-12",[]],["component/197-12",[]],["title/197-13",[361,30.186,2433,38.901,3663,49.409]],["name/197-13",[]],["text/197-13",[]],["component/197-13",[]],["title/197-14",[3432,55.177,4195,58.174]],["name/197-14",[]],["text/197-14",[]],["component/197-14",[]],["title/197-15",[11,11.796,175,29.477,394,31.646]],["name/197-15",[]],["text/197-15",[]],["component/197-15",[]],["title/197",[353,32.749,2433,45.802]],["name/197",[353,0.533,2433,0.746]],["text/197",[0,0.834,11,1.683,17,0.978,26,1.055,27,2.805,38,1.059,45,2.172,46,1.921,47,0.948,65,3.084,67,1.646,76,1.008,77,2.506,81,0.739,91,1.55,105,0.993,106,1.63,109,3.222,113,0.782,119,2.969,130,2.212,133,0.832,163,1.241,164,0.917,165,2.314,169,1.115,173,0.968,175,3.776,179,1.21,183,0.773,190,1.033,194,2.447,196,1.115,198,3.147,200,1.869,206,1.055,208,2.231,213,1.384,215,1.175,221,0.968,229,1.218,236,2.341,237,2.029,240,1.115,242,2.597,243,2.605,244,2.248,245,1.315,253,1.815,265,0.997,269,4.302,271,3.342,276,1.258,286,1.877,293,1.333,305,0.886,308,1.218,309,1.078,310,1.44,312,3.503,316,2.658,317,1.41,323,0.886,325,1.276,332,1.078,335,1.54,339,1.233,340,1.559,347,1.894,353,5.795,354,5.163,356,1.448,357,1.348,361,3.592,364,3.331,370,2.01,384,1.088,393,2.902,394,1.886,406,0.982,409,1.109,410,1.803,420,1.598,421,1.041,484,4.622,501,4.886,506,2.357,520,1.93,525,3.539,533,1.21,550,1.813,558,1.059,569,3.409,571,2.447,573,2.157,582,1.73,596,1.233,610,2.696,611,1,619,1.959,630,1.258,634,1.233,637,1.093,639,3.196,643,1.083,646,1.037,647,1.836,649,1.979,658,1.315,682,5.829,698,1.233,751,1.285,753,1.886,759,2.959,773,3.539,788,3.141,798,1.852,822,1.813,859,1.425,870,2.932,876,1.803,908,1.371,917,1.083,936,1.175,957,1.055,972,0.873,975,1.258,978,2.299,997,2.932,1010,1.305,1035,1.109,1086,1.784,1135,1.21,1154,3.141,1165,4.791,1189,1.683,1192,1.597,1215,1.456,1273,1.623,1326,1.033,1344,3.433,1353,4.052,1413,1.597,1471,1.083,1528,1.529,1568,2.185,1647,1.597,1660,1.425,1663,1.597,1706,2.444,1822,1.425,1902,1.473,1942,1.473,2083,2.337,2161,1.336,2333,1.348,2433,8.355,2451,4.335,2456,2.397,2463,2.944,2577,1.509,2580,2.444,2657,3.075,2737,1.397,2975,1.683,2995,1.384,2997,3.721,2998,2.637,3316,1.456,3355,2.493,3365,6.804,3387,1.473,3424,1.473,3432,1.597,3468,1.683,3470,1.803,3525,1.683,3565,2.547,3627,1.597,3629,3.923,3642,1.529,3654,3.154,3655,1.803,3695,1.473,3725,1.683,3834,1.683,3932,4.706,4047,1.683,4125,5.727,4195,4.706,4200,1.803,4231,1.572,4246,1.425,4462,1.529,5303,1.803,5304,1.803,5306,3.154,5307,2.944,5308,1.803,5309,1.999,5310,1.92,5311,1.999,5312,1.999,5313,1.999,5314,1.999,5315,1.999,5316,1.999,5317,1.999,5318,1.999,5319,1.999,5320,1.999,5321,1.999,5322,1.999,5323,1.999,5324,1.999,5325,4.659,5326,1.999,5327,1.999,5328,3.496,5329,1.999,5330,1.999,5331,1.999,5332,1.999,5333,1.999,5334,1.999,5335,1.999,5336,1.999,5337,1.999,5338,1.999,5339,1.999]],["component/197",[11,0.279,108,0.486]],["title/198-1",[439,50.524]],["name/198-1",[]],["text/198-1",[]],["component/198-1",[]],["title/198-2",[81,25.551,853,62.317]],["name/198-2",[]],["text/198-2",[]],["component/198-2",[]],["title/198-3",[188,38.326,310,28.453]],["name/198-3",[]],["text/198-3",[]],["component/198-3",[]],["title/198-4",[27,24.294,339,42.614]],["name/198-4",[]],["text/198-4",[]],["component/198-4",[]],["title/198-5",[2331,47.83,5340,58.174]],["name/198-5",[]],["text/198-5",[]],["component/198-5",[]],["title/198-6",[81,21.701,180,27.72,231,30.954]],["name/198-6",[]],["text/198-6",[]],["component/198-6",[]],["title/198-7",[339,42.614,1036,39.1]],["name/198-7",[]],["text/198-7",[]],["component/198-7",[]],["title/198-8",[81,21.701,135,25.4,869,36.675]],["name/198-8",[]],["text/198-8",[]],["component/198-8",[]],["title/198-9",[72,38.891]],["name/198-9",[]],["text/198-9",[]],["component/198-9",[]],["title/198-10",[339,42.614,2333,46.568]],["name/198-10",[]],["text/198-10",[]],["component/198-10",[]],["title/198",[81,25.551,310,28.453]],["name/198",[81,0.416,310,0.463]],["text/198",[11,1.288,22,1.854,27,3.621,32,1.432,35,1.486,38,3.395,41,1.709,45,1.436,57,1.286,62,2.077,65,1.497,67,1.451,68,2.545,71,2.995,72,1.427,75,2.709,76,1.554,77,1.682,81,4.535,109,2.329,126,1.502,128,1.319,135,2.184,137,1.865,139,1.513,141,3.102,152,2.114,172,1.633,176,2.565,177,1.744,185,2.639,186,1.941,188,5.14,192,2.742,194,1.619,199,1.53,205,3.383,209,3.684,216,4.342,218,1.536,225,1.883,236,2.535,244,3.287,250,3.796,269,4.707,271,2.848,286,3.44,297,1.854,298,3.717,299,3.397,308,1.877,310,4.122,312,2.216,323,1.366,325,3.22,327,1.843,331,1.33,335,1.358,339,7.403,341,2.555,342,3.472,353,1.461,354,1.427,358,2.095,360,1.612,361,1.585,364,2.236,381,4.03,393,3.735,406,3.147,414,3.175,423,1.888,439,1.854,469,1.311,533,1.865,535,1.981,540,3.035,557,2.244,569,2.709,571,1.619,572,1.771,582,3.665,596,3.112,600,3.561,603,2.841,615,1.926,644,1.901,674,1.854,722,1.854,786,1.693,796,1.939,816,1.781,822,4.238,861,2.197,864,1.981,869,1.926,870,1.939,957,2.662,972,1.346,1011,2.027,1030,1.967,1036,1.744,1086,2.575,1087,2.502,1186,1.771,1204,5.081,1214,2.779,1222,2.297,1249,2.515,1340,3.22,1390,4.522,1434,2.27,1576,2.885,1602,1.901,1860,2.779,1940,2.779,1960,2.595,2003,2.595,2057,2.27,2331,6.075,2333,3.401,2456,1.585,2737,2.154,2880,2.959,2912,2.356,2950,2.959,3000,2.114,3117,2.461,3145,2.461,3530,2.461,3701,2.22,4318,2.461,4425,2.356,4474,2.779,4771,2.461,4803,2.779,4915,6.526,4923,2.595,5308,2.779,5340,6.237,5341,3.081,5342,3.081,5343,2.779,5344,2.779,5345,3.081,5346,3.081,5347,3.081,5348,3.081,5349,3.081,5350,3.081,5351,3.081,5352,3.081,5353,3.081,5354,3.081,5355,3.081,5356,3.081,5357,3.081,5358,2.779,5359,3.081,5360,3.081,5361,3.081,5362,3.081,5363,3.081,5364,3.081,5365,6.406,5366,3.081,5367,3.081]],["component/198",[11,0.279,108,0.486]],["title/199-1",[59,36.194,356,24.295,972,25.622]],["name/199-1",[]],["text/199-1",[]],["component/199-1",[]],["title/199-2",[4068,64.221]],["name/199-2",[]],["text/199-2",[]],["component/199-2",[]],["title/199-3",[252,30.346,310,28.453]],["name/199-3",[]],["text/199-3",[]],["component/199-3",[]],["title/199-4",[4,31.382,310,28.453]],["name/199-4",[]],["text/199-4",[]],["component/199-4",[]],["title/199-5",[1128,46.973,2619,60.755]],["name/199-5",[]],["text/199-5",[]],["component/199-5",[]],["title/199-6",[458,34.441,2410,50.322]],["name/199-6",[]],["text/199-6",[]],["component/199-6",[]],["title/199-7",[251,29.8,252,22.399,356,21.114,972,22.267]],["name/199-7",[]],["text/199-7",[]],["component/199-7",[]],["title/199-8",[252,30.346,1391,40.601]],["name/199-8",[]],["text/199-8",[]],["component/199-8",[]],["title/199-9",[977,40.601,1391,40.601]],["name/199-9",[]],["text/199-9",[]],["component/199-9",[]],["title/199-10",[1056,46.973,1391,40.601]],["name/199-10",[]],["text/199-10",[]],["component/199-10",[]],["title/199-11",[361,30.186,1391,34.483,2440,48.48]],["name/199-11",[]],["text/199-11",[]],["component/199-11",[]],["title/199-12",[180,24.09,356,21.114,972,22.267,1391,29.968]],["name/199-12",[]],["text/199-12",[]],["component/199-12",[]],["title/199-13",[269,18.821,356,18.669,972,19.689,1366,30.138,5701,40.672]],["name/199-13",[]],["text/199-13",[]],["component/199-13",[]],["title/199-14",[356,18.669,428,31.823,972,19.689,1234,31.216,1391,26.498]],["name/199-14",[]],["text/199-14",[]],["component/199-14",[]],["title/199-15",[356,24.295,392,29.032,972,25.622]],["name/199-15",[]],["text/199-15",[]],["component/199-15",[]],["title/199-16",[4318,55.177,4425,52.828]],["name/199-16",[]],["text/199-16",[]],["component/199-16",[]],["title/199-17",[822,35.834,2440,57.081]],["name/199-17",[]],["text/199-17",[]],["component/199-17",[]],["title/199-18",[180,27.72,205,24.295,863,35.088]],["name/199-18",[]],["text/199-18",[]],["component/199-18",[]],["title/199-19",[184,39.302,972,30.168]],["name/199-19",[]],["text/199-19",[]],["component/199-19",[]],["title/199-20",[356,16.732,392,19.995,869,25.258,972,17.646,2723,34.738,3871,34.028]],["name/199-20",[]],["text/199-20",[]],["component/199-20",[]],["title/199-21",[305,22.6,356,21.114,972,22.267,5702,45.997]],["name/199-21",[]],["text/199-21",[]],["component/199-21",[]],["title/199-22",[302,32.097,374,35.397]],["name/199-22",[]],["text/199-22",[]],["component/199-22",[]],["title/199-23",[356,24.295,972,25.622,3695,43.228]],["name/199-23",[]],["text/199-23",[]],["component/199-23",[]],["title/199-24",[299,23.385,320,23.164,2441,40.727,2625,40.727]],["name/199-24",[]],["text/199-24",[]],["component/199-24",[]],["title/199-25",[356,21.114,383,28.86,972,22.267,5703,45.997]],["name/199-25",[]],["text/199-25",[]],["component/199-25",[]],["title/199-26",[71,18.233,310,18.57,356,18.669,383,25.519,972,19.689]],["name/199-26",[]],["text/199-26",[]],["component/199-26",[]],["title/199-27",[458,34.441,2881,54.337]],["name/199-27",[]],["text/199-27",[]],["component/199-27",[]],["title/199",[356,28.605,972,30.168]],["name/199",[356,0.466,972,0.491]],["text/199",[4,2.465,8,1.924,9,0.678,11,0.906,19,0.292,24,0.281,26,0.543,27,3.261,32,0.692,37,1.168,38,0.545,45,2.102,50,0.218,59,0.33,60,0.231,63,0.286,65,0.723,71,1.488,73,0.33,77,1.123,78,0.288,79,0.341,81,0.381,84,0.312,88,0.346,90,0.398,92,0.534,93,0.583,97,0.311,99,0.292,100,0.568,101,1.048,102,1.034,103,0.763,105,1.674,106,1.571,108,0.187,113,0.403,115,0.253,119,2.438,127,0.748,128,1.93,130,0.734,131,0.254,133,0.798,135,1.719,157,0.701,158,0.367,165,0.739,170,0.283,172,2.251,175,0.268,176,1.545,177,1.907,178,1.175,180,3.218,183,1.536,184,2.093,185,1.388,186,0.206,188,0.826,190,0.276,192,1.301,205,4.276,208,0.341,210,1.09,214,0.532,216,2.58,221,0.928,229,0.627,231,0.785,234,1.021,236,0.268,237,0.448,238,0.627,240,1.695,241,0.346,242,0.298,244,3.911,246,0.979,250,0.248,251,0.312,252,3.989,253,3.301,265,1.155,268,0.277,269,5.287,271,4.227,274,0.341,276,0.648,279,1.267,286,1.029,288,0.498,289,1.198,290,0.385,292,0.58,297,1.618,299,2.391,300,0.394,302,1.076,303,0.534,305,1.883,310,3.893,312,0.654,317,2.422,320,1.93,323,0.456,325,0.657,331,1.714,335,2.564,340,1.771,341,4.058,342,0.29,356,4.321,360,1.59,361,1.384,364,0.85,369,0.341,371,1.72,374,0.274,378,0.291,379,0.662,380,0.311,383,3.071,392,2.469,393,2.976,406,1.321,409,1.869,428,2.597,439,0.321,449,0.612,453,0.321,455,0.349,458,1.341,461,0.657,470,0.336,479,0.912,501,0.299,505,0.351,506,0.36,507,0.295,514,0.381,529,0.328,536,1.489,538,0.385,540,1.153,541,0.818,560,2.814,569,5.044,571,2.368,572,0.592,582,4.558,603,0.301,610,1.298,613,0.377,615,1.198,617,0.307,621,1.958,623,0.534,627,0.306,629,2.934,632,1.004,637,0.292,646,0.277,647,1.413,656,0.532,657,0.589,668,0.834,702,0.29,713,0.291,722,0.321,746,1.097,751,0.344,759,0.894,771,0.332,772,1.108,779,0.381,786,3.198,794,0.36,796,0.336,798,0.283,818,0.346,822,2.589,835,0.316,856,0.937,863,1.385,864,0.344,868,0.394,869,1.9,908,0.367,929,0.662,938,0.662,972,4.8,977,1.361,978,0.351,980,0.381,987,1.097,991,0.381,1004,0.334,1028,0.598,1030,0.657,1035,0.296,1036,2.404,1039,0.367,1044,0.928,1056,0.363,1084,0.394,1128,1.829,1134,0.309,1145,0.414,1154,0.36,1186,1.102,1187,0.367,1191,0.758,1196,0.409,1204,0.367,1212,0.377,1234,1.031,1249,3.893,1252,0.336,1253,0.336,1278,0.482,1326,0.532,1327,0.374,1338,0.363,1340,0.95,1352,1.271,1353,0.657,1354,0.403,1355,0.403,1364,0.42,1366,2.46,1367,0.381,1368,0.427,1380,0.377,1391,6.542,1394,1.353,1421,0.427,1422,0.427,1423,0.427,1450,1.9,1460,0.482,1471,1.255,1493,0.394,1511,0.427,1512,0.427,1514,0.45,1521,0.45,1522,0.377,1547,0.482,1559,0.36,1564,1.822,1576,2.104,1602,4.015,1645,0.83,1663,0.427,1702,1.614,1705,0.339,1712,1.531,1713,0.385,1846,1.041,1852,0.482,1901,0.36,1963,1.062,2040,0.377,2058,0.482,2103,0.381,2118,0.389,2161,0.995,2343,0.328,2394,0.758,2410,1.687,2426,1.5,2430,1.382,2439,1.556,2440,4.483,2441,5.322,2442,5.22,2443,1.556,2444,0.496,2445,2.823,2448,0.409,2499,0.42,2577,0.403,2619,0.47,2624,1.648,2625,5.554,2627,2.583,2705,0.381,2723,1.28,2724,0.81,2725,0.75,2727,1.343,2728,2.224,2730,1.686,2734,0.349,2735,0.85,2736,0.988,2758,0.896,2768,0.905,2776,1.43,2777,4.567,2787,0.47,2794,0.45,2881,0.42,2938,0.905,2946,4.078,2953,0.442,2973,0.482,2987,0.349,2994,0.482,2996,0.688,2997,0.427,3002,0.381,3117,0.822,3141,0.713,3362,0.482,3377,0.409,3384,1.512,3432,0.427,3452,0.867,3468,1.614,3642,0.787,3695,0.758,3702,0.928,3812,0.427,3814,1.051,3836,0.482,3871,1.254,3899,0.45,4034,0.409,4049,0.928,4068,1.466,4189,0.427,4303,0.85,4318,0.427,4425,2.057,4456,0.409,4526,3.319,4616,0.787,4915,0.822,5118,0.45,5376,0.45,5399,0.47,5701,0.482,5702,0.482,5703,2.743,5704,0.534,5705,5.575,5706,0.534,5707,0.534,5708,1.029,5709,0.534,5710,6.004,5711,1.917,5712,1.917,5713,0.534,5714,0.534,5715,1.029,5716,1.917,5717,1.029,5718,0.534,5719,0.534,5720,0.534,5721,2.427,5722,2.427,5723,2.089,5724,0.534,5725,0.534,5726,1.917,5727,1.029,5728,0.534,5729,1.029,5730,0.534,5731,1.029,5732,0.534,5733,0.482,5734,1.029,5735,0.534,5736,1.029,5737,0.534,5738,0.928,5739,0.534,5740,0.534,5741,1.029,5742,1.029,5743,0.534,5744,0.534,5745,1.489,5746,1.489,5747,0.534,5748,0.534,5749,1.029,5750,1.029,5751,0.534,5752,0.534,5753,0.534,5754,0.534,5755,0.534,5756,1.029,5757,0.534,5758,0.534,5759,0.534,5760,0.534,5761,0.534,5762,0.534,5763,0.534,5764,0.534,5765,0.534,5766,0.534,5767,0.534,5768,0.534,5769,0.534,5770,0.534,5771,0.534,5772,0.534,5773,1.343,5774,0.534,5775,0.534,5776,0.534,5777,1.029,5778,0.534,5779,1.029,5780,0.534,5781,1.029,5782,0.534,5783,1.029,5784,0.534,5785,0.534,5786,0.534,5787,0.534,5788,3.04,5789,0.534,5790,1.489,5791,1.917,5792,0.534,5793,0.534,5794,0.534,5795,0.534,5796,0.534,5797,0.534,5798,1.489,5799,1.489,5800,0.534,5801,0.534,5802,0.534,5803,0.534,5804,0.534,5805,3.679,5806,1.917,5807,0.534,5808,1.489,5809,0.534,5810,0.534,5811,1.029,5812,0.534,5813,0.534,5814,0.534,5815,0.534,5816,0.534,5817,0.534,5818,0.534,5819,0.534,5820,0.534,5821,1.029,5822,0.534,5823,2.69,5824,0.534,5825,0.534,5826,0.534,5827,0.534,5828,0.534,5829,0.534,5830,0.534,5831,1.029,5832,0.534,5833,0.534,5834,1.917,5835,0.534,5836,0.534,5837,0.534,5838,0.534,5839,0.534,5840,0.534,5841,1.029,5842,1.489,5843,0.534,5844,0.534,5845,1.029,5846,0.534,5847,0.534,5848,0.534,5849,1.029,5850,0.534,5851,0.534,5852,0.534,5853,0.534,5854,0.534,5855,0.534,5856,0.534,5857,1.489,5858,2.316,5859,0.534,5860,0.534,5861,0.534,5862,1.029,5863,0.534,5864,0.534,5865,0.534,5866,0.534,5867,0.534,5868,0.534,5869,0.534,5870,0.534,5871,0.534,5872,0.534,5873,0.534,5874,0.534,5875,0.534,5876,0.534,5877,0.534,5878,1.029,5879,1.029,5880,1.029,5881,1.029,5882,1.029,5883,0.534,5884,0.534,5885,0.534,5886,0.534,5887,0.534,5888,0.534,5889,0.534,5890,0.534,5891,0.534,5892,0.534,5893,0.534,5894,0.534,5895,0.534,5896,0.534,5897,1.917,5898,0.534,5899,0.534,5900,0.534,5901,1.029,5902,0.534,5903,0.534,5904,0.534,5905,1.489,5906,0.534,5907,0.534,5908,0.534,5909,0.534,5910,0.534,5911,0.534,5912,2.498,5913,0.47,5914,0.482,5915,0.534,5916,0.534,5917,0.534,5918,0.534,5919,0.534,5920,0.513,5921,0.534,5922,0.534,5923,0.534,5924,0.534,5925,0.534,5926,0.534]],["component/199",[11,0.279,108,0.486]],["title/200-1",[68,42.354]],["name/200-1",[]],["text/200-1",[]],["component/200-1",[]],["title/200-2",[51,29.8,2487,28.57,2488,29.009,2628,38.49]],["name/200-2",[]],["text/200-2",[]],["component/200-2",[]],["title/200-3",[4,23.164,2487,28.57,2488,29.009,2628,38.49]],["name/200-3",[]],["text/200-3",[]],["component/200-3",[]],["title/200-4",[164,20.678,192,19.296,481,27.634,2487,25.262,2488,25.651]],["name/200-4",[]],["text/200-4",[]],["component/200-4",[]],["title/200-5",[164,20.678,192,19.296,2487,25.262,2488,25.651,2917,35.463]],["name/200-5",[]],["text/200-5",[]],["component/200-5",[]],["title/200-6",[469,21.7,2487,28.57,2488,29.009,2628,38.49]],["name/200-6",[]],["text/200-6",[]],["component/200-6",[]],["title/200-7",[5368,75.757]],["name/200-7",[]],["text/200-7",[]],["component/200-7",[]],["title/200-8",[302,18.774,374,20.705,457,26.791,469,17.197,2487,22.64,2488,22.989]],["name/200-8",[]],["text/200-8",[]],["component/200-8",[]],["title/200-9",[469,19.188,481,27.634,491,31.216,2487,25.262,2488,25.651]],["name/200-9",[]],["text/200-9",[]],["component/200-9",[]],["title/200-10",[1132,70.719]],["name/200-10",[]],["text/200-10",[]],["component/200-10",[]],["title/200-11",[444,30.139,479,24.255,1656,36.356,2962,30.864]],["name/200-11",[]],["text/200-11",[]],["component/200-11",[]],["title/200-12",[469,17.197,550,20.96,822,20.96,1656,28.811,2962,24.459,5369,36.451]],["name/200-12",[]],["text/200-12",[]],["component/200-12",[]],["title/200-13",[132,13.868,186,11.858,320,13.999,541,16.932,550,15.984,2327,24.613,2969,24.613,3004,23.565,5370,27.798]],["name/200-13",[]],["text/200-13",[]],["component/200-13",[]],["title/200-14",[118,25.716,643,27.628,1602,31.454,5371,35.304]],["name/200-14",[]],["text/200-14",[]],["component/200-14",[]],["title/200-15",[18,14.258,71,14.805,118,18.464,643,19.836,713,19.928,1602,22.583,5371,25.347]],["name/200-15",[]],["text/200-15",[]],["component/200-15",[]],["title/200-16",[444,23.885,479,19.222,548,29.435,1656,28.811,2962,24.459,5371,27.977]],["name/200-16",[]],["text/200-16",[]],["component/200-16",[]],["title/200-17",[18,13.033,71,13.532,383,18.94,444,19.78,479,15.918,1656,23.86,2962,20.255,5371,23.169]],["name/200-17",[]],["text/200-17",[]],["component/200-17",[]],["title/200-18",[4,20.482,372,30.393,450,26.35,688,24.658,1167,31.216]],["name/200-18",[]],["text/200-18",[]],["component/200-18",[]],["title/200-19",[5372,75.757]],["name/200-19",[]],["text/200-19",[]],["component/200-19",[]],["title/200-20",[128,29.566,2962,41.815]],["name/200-20",[]],["text/200-20",[]],["component/200-20",[]],["title/200-21",[142,28.403,702,31.791,1172,38.592]],["name/200-21",[]],["text/200-21",[]],["component/200-21",[]],["title/200-22",[142,21.826,392,22.31,702,24.429,822,23.387,5373,36.012]],["name/200-22",[]],["text/200-22",[]],["component/200-22",[]],["title/200-23",[142,24.684,702,27.628,822,26.45,3450,45.997]],["name/200-23",[]],["text/200-23",[]],["component/200-23",[]],["title/200-24",[469,29.4,3914,49.256]],["name/200-24",[]],["text/200-24",[]],["component/200-24",[]],["title/200-25",[59,31.454,142,24.684,253,19.86,702,27.628]],["name/200-25",[]],["text/200-25",[]],["component/200-25",[]],["title/200-26",[469,21.7,1165,28.018,2487,28.57,2488,29.009]],["name/200-26",[]],["text/200-26",[]],["component/200-26",[]],["title/200-27",[310,18.57,719,33.218,1165,24.774,1326,23.291,3472,30.393]],["name/200-27",[]],["text/200-27",[]],["component/200-27",[]],["title/200-28",[71,18.233,2487,25.262,2488,25.651,3472,30.393,5374,36.012]],["name/200-28",[]],["text/200-28",[]],["component/200-28",[]],["title/200-29",[2962,35.515,3594,38.592,5373,46.864]],["name/200-29",[]],["text/200-29",[]],["component/200-29",[]],["title/200-30",[2487,32.874,2488,33.38,4006,49.409]],["name/200-30",[]],["text/200-30",[]],["component/200-30",[]],["title/200-31",[609,45.802,5375,62.317]],["name/200-31",[]],["text/200-31",[]],["component/200-31",[]],["title/200-32",[2962,41.815,2968,43.477]],["name/200-32",[]],["text/200-32",[]],["component/200-32",[]],["title/200-33",[1224,46.973,2962,41.815]],["name/200-33",[]],["text/200-33",[]],["component/200-33",[]],["title/200-34",[525,32.712,2718,34.29,2962,35.515]],["name/200-34",[]],["text/200-34",[]],["component/200-34",[]],["title/200-35",[472,28.428,519,33.278,525,28.428,1035,28.289]],["name/200-35",[]],["text/200-35",[]],["component/200-35",[]],["title/200-36",[1165,32.24,1326,30.31,3472,39.552]],["name/200-36",[]],["text/200-36",[]],["component/200-36",[]],["title/200-37",[128,19.296,495,22.651,797,34.479,1165,24.774,3914,32.147]],["name/200-37",[]],["text/200-37",[]],["component/200-37",[]],["title/200-38",[71,16.341,353,19.156,2487,22.64,2488,22.989,3472,27.239,5374,32.275]],["name/200-38",[]],["text/200-38",[]],["component/200-38",[]],["title/200-39",[183,19.716,353,24.172,469,21.7,2488,29.009]],["name/200-39",[]],["text/200-39",[]],["component/200-39",[]],["title/200-40",[323,19.984,718,30.138,861,32.147,5376,37.967,5377,40.672]],["name/200-40",[]],["text/200-40",[]],["component/200-40",[]],["title/200-41",[701,45.487,2487,32.874,2488,33.38]],["name/200-41",[]],["text/200-41",[]],["component/200-41",[]],["title/200-42",[5378,75.757]],["name/200-42",[]],["text/200-42",[]],["component/200-42",[]],["title/200-43",[5379,75.757]],["name/200-43",[]],["text/200-43",[]],["component/200-43",[]],["title/200-44",[5380,75.757]],["name/200-44",[]],["text/200-44",[]],["component/200-44",[]],["title/200-45",[5381,83.973]],["name/200-45",[]],["text/200-45",[]],["component/200-45",[]],["title/200-46",[18,15.738,71,16.341,186,15.549,713,21.996,5371,27.977,5382,36.451]],["name/200-46",[]],["text/200-46",[]],["component/200-46",[]],["title/200-47",[18,15.738,71,16.341,186,15.549,713,21.996,5371,27.977,5383,36.451]],["name/200-47",[]],["text/200-47",[]],["component/200-47",[]],["title/200-48",[18,15.738,71,16.341,186,15.549,713,21.996,2486,34.738,5371,27.977]],["name/200-48",[]],["text/200-48",[]],["component/200-48",[]],["title/200-49",[1249,34.441,3914,49.256]],["name/200-49",[]],["text/200-49",[]],["component/200-49",[]],["title/200-50",[5384,83.973]],["name/200-50",[]],["text/200-50",[]],["component/200-50",[]],["title/200-51",[5385,83.973]],["name/200-51",[]],["text/200-51",[]],["component/200-51",[]],["title/200-52",[5386,75.757]],["name/200-52",[]],["text/200-52",[]],["component/200-52",[]],["title/200-53",[598,42.894,797,52.828]],["name/200-53",[]],["text/200-53",[]],["component/200-53",[]],["title/200-54",[5387,75.757]],["name/200-54",[]],["text/200-54",[]],["component/200-54",[]],["title/200",[2487,32.874,2488,33.38,2962,35.515]],["name/200",[2487,0.63,2488,0.64]],["text/200",[0,0.24,4,0.501,6,0.198,8,0.679,9,1.302,11,0.812,12,0.153,14,0.258,17,0.144,18,0.527,24,0.302,26,0.445,27,2.778,32,2.537,33,0.75,35,0.879,36,0.638,37,0.919,38,0.447,42,0.203,44,0.173,45,0.63,46,0.161,47,0.4,49,0.189,50,1.457,51,0.171,52,0.193,53,0.551,54,0.183,57,0.122,59,1.261,60,0.975,62,0.387,63,0.59,65,1.732,67,2.17,68,0.426,69,0.982,70,0.171,71,2.02,73,0.181,74,0.221,75,0.157,76,0.556,77,0.451,78,0.158,81,0.408,86,0.637,90,0.219,92,0.438,93,0.166,97,0.334,99,0.871,100,0.747,101,0.603,102,0.729,103,1.048,105,0.905,106,1.242,109,0.735,112,0.726,113,1.261,114,0.293,115,0.4,117,1.208,118,0.148,119,0.516,120,0.156,121,0.402,123,0.555,126,1.484,127,0.424,128,2.718,130,1.076,131,1.359,132,0.716,133,0.663,135,1.317,139,0.782,142,3.277,144,0.147,148,0.296,150,0.198,152,0.394,157,1.755,161,0.163,164,2.504,165,0.419,169,0.163,170,0.155,171,0.173,172,1.612,173,0.655,176,1.148,177,0.478,178,1.164,180,1.438,183,1.883,184,0.628,185,1.725,186,2.927,187,0.676,190,1.056,192,2.084,193,0.221,194,0.836,196,0.471,198,0.621,199,0.146,201,3.011,202,0.158,205,0.847,209,0.169,210,0.167,212,0.224,214,0.297,216,0.902,223,0.547,225,0.594,226,0.475,227,0.419,228,0.216,229,0.179,230,0.521,231,0.713,232,0.158,236,0.8,237,1.16,240,0.163,241,0.19,242,1.593,243,1.502,244,2.555,245,1.199,246,0.193,248,2.17,249,0.949,250,0.628,252,2.139,253,1.631,256,0.341,257,0.394,265,0.146,268,0.945,269,4.563,271,3.144,273,0.31,274,0.704,278,0.216,279,2.861,282,0.936,284,0.234,286,0.157,287,0.336,288,0.278,293,0.112,297,0.176,299,0.62,302,1.877,303,0.438,305,0.906,308,0.179,309,0.455,310,2.338,312,0.252,316,0.525,317,2.91,320,1.694,323,2.32,324,0.191,325,0.367,327,0.505,328,0.224,330,0.471,331,2.357,332,0.455,333,1.306,335,2.837,337,0.151,340,1.994,341,1.72,342,1.224,351,0.175,353,1.842,354,2.134,356,0.847,360,0.153,361,0.151,363,1.585,368,0.327,371,3.002,372,0.569,373,0.585,374,2.292,376,0.168,378,0.16,379,0.189,383,0.765,384,0.16,392,2.756,393,2.904,394,0.158,406,1.211,407,0.449,409,0.468,414,0.361,420,0.618,423,0.352,424,0.181,426,0.216,439,1.096,444,2.878,450,0.336,452,0.596,453,0.176,454,0.189,457,1.497,458,0.146,461,0.704,467,1.262,469,3.237,470,0.185,471,0.224,472,3.105,473,0.41,479,1.074,481,1.865,482,0.166,489,1.176,491,1.262,495,1.529,502,0.294,513,0.711,514,0.41,516,1.603,519,0.191,521,0.265,525,3.44,529,0.352,533,0.177,535,0.189,536,0.543,540,0.346,541,1.354,542,0.378,546,0.439,548,0.214,550,3.051,551,1.314,557,0.418,558,1.708,569,2.81,571,2.421,572,1.417,573,0.834,582,2.28,588,0.193,596,0.354,597,0.602,598,1.774,603,0.761,609,2.364,610,0.879,611,0.677,613,0.405,615,0.183,616,0.221,617,0.33,619,1.705,621,0.587,622,1.274,623,1.279,625,0.209,627,1.634,629,0.354,631,0.681,633,1.031,639,0.201,640,0.224,641,0.391,643,0.862,644,0.181,645,0.361,646,1.172,647,0.58,653,0.704,657,1.042,658,0.378,668,0.322,671,0.198,674,1.23,676,0.242,682,2.383,688,0.74,696,0.521,698,1.261,702,3.752,703,0.829,707,0.694,709,0.41,713,1.656,714,0.484,718,3.255,719,5.416,726,0.177,743,0.378,746,0.813,748,0.771,751,0.369,753,0.729,756,0.508,757,0.459,759,0.63,764,1.417,765,0.209,768,0.224,770,0.439,771,0.182,772,0.17,773,0.887,775,0.518,776,0.804,778,0.881,784,0.265,786,0.743,788,0.569,789,0.216,793,0.258,795,2.128,796,0.531,797,3.203,798,1.083,800,0.369,806,1.367,809,0.234,815,0.698,816,0.638,819,0.518,822,3.742,835,0.799,841,0.564,856,1.002,857,1.139,861,1.458,862,0.187,863,0.952,864,0.543,870,1.798,871,0.357,879,0.851,880,0.209,901,0.198,908,0.201,912,0.459,917,0.159,922,0.19,929,0.189,970,1.563,971,2.172,972,0.128,975,0.185,977,0.172,978,1.345,986,0.234,987,0.813,995,0.531,997,0.361,1010,0.191,1012,0.231,1020,0.761,1030,0.187,1035,2.156,1036,0.325,1037,0.771,1039,0.201,1056,0.574,1062,0.227,1064,0.209,1086,1.36,1095,0.247,1102,0.656,1107,0.384,1109,1.082,1112,1.059,1116,0.219,1128,2.191,1132,0.484,1137,0.221,1142,1.828,1165,4.77,1167,0.398,1170,0.234,1186,0.169,1191,0.813,1194,0.459,1198,1.173,1205,0.234,1216,0.428,1217,0.219,1224,1.812,1249,1.777,1252,0.185,1253,0.185,1254,0.936,1271,0.258,1323,1.456,1325,0.813,1326,0.57,1327,0.205,1335,0.518,1338,0.391,1340,0.187,1343,0.378,1344,0.216,1352,0.194,1364,0.231,1366,0.196,1367,0.209,1368,0.234,1380,1.124,1391,0.338,1394,0.954,1402,0.219,1421,0.234,1422,0.234,1423,0.234,1446,0.224,1450,2.331,1471,0.733,1493,0.216,1494,0.384,1495,1.173,1500,0.711,1503,0.242,1513,0.265,1516,0.484,1519,0.247,1520,0.391,1558,0.439,1559,0.744,1564,0.868,1567,0.19,1576,0.328,1602,4.908,1603,1.751,1613,2.184,1619,0.224,1645,2.167,1649,0.199,1656,1.9,1660,0.209,1687,0.414,1704,1.037,1708,0.535,1793,1.684,1898,0.466,1899,0.207,1901,0.198,1908,0.813,1943,0.646,1963,1.299,2038,0.211,2060,0.674,2082,0.518,2093,1.08,2103,0.41,2150,0.434,2156,0.629,2239,0.439,2246,0.814,2253,0.181,2327,2.282,2343,0.18,2394,0.216,2414,0.186,2422,0.238,2423,0.205,2451,0.182,2456,0.696,2460,0.242,2476,0.533,2486,0.252,2487,3.963,2488,4.618,2498,0.282,2512,0.214,2525,0.258,2618,0.272,2628,4.794,2705,0.209,2718,0.645,2724,0.231,2725,0.615,2726,0.234,2734,0.551,2758,0.814,2824,0.214,2827,0.811,2873,0.242,2885,0.238,2893,1.059,2917,2.096,2918,0.552,2953,0.242,2961,0.201,2962,5.47,2968,1.002,2969,4.776,2971,0.247,2989,0.234,2991,0.234,2995,1.415,2996,0.196,3004,3.089,3032,0.646,3141,0.203,3316,2.348,3344,0.418,3346,0.234,3347,0.484,3349,0.234,3355,1.458,3361,0.844,3363,0.247,3365,0.602,3369,1.34,3381,0.434,3420,0.221,3421,0.247,3429,0.265,3433,0.247,3436,0.439,3445,0.674,3463,0.265,3471,0.881,3472,1.228,3480,0.203,3481,0.247,3484,0.247,3489,0.711,3511,0.247,3519,0.439,3520,0.484,3545,1.139,3548,0.221,3565,0.615,3580,0.247,3592,0.265,3594,0.555,3612,0.265,3623,0.247,3628,0.484,3665,0.258,3668,0.761,3670,0.216,3671,0.881,3676,0.247,3701,0.211,3705,0.247,3712,0.265,3723,0.265,3726,0.995,3730,0.234,3744,0.439,3782,0.265,3783,0.224,3787,0.654,3808,0.247,3812,0.234,3834,0.247,3838,1.644,3886,0.929,3891,0.265,3893,0.265,3894,0.265,3898,0.265,3899,0.247,3900,0.265,3901,0.265,3902,1.722,3907,0.265,3909,0.518,3912,1.722,3914,5.334,3917,0.247,3976,0.761,3982,0.995,3988,0.265,3989,0.484,3990,0.711,3991,0.265,3992,1.436,3993,0.234,3994,0.265,3995,0.484,3996,0.995,3997,0.518,3998,0.265,3999,0.265,4000,0.265,4003,0.265,4004,0.265,4006,2.406,4008,0.265,4011,0.518,4016,4.721,4017,0.265,4047,0.484,4144,0.242,4146,1.22,4165,0.518,4166,0.579,4168,0.484,4188,0.41,4189,0.234,4190,0.518,4204,0.518,4205,0.518,4244,0.518,4245,0.518,4246,0.209,4300,1.034,4357,0.518,4362,0.484,4388,0.265,4439,0.265,4446,0.494,4519,0.258,4620,0.711,4676,0.265,4717,0.995,4770,1.866,4781,0.929,4914,0.238,4917,0.811,4923,0.247,5205,1.22,5229,0.265,5299,0.265,5302,0.265,5307,0.247,5344,0.265,5368,0.518,5369,4.157,5370,2.907,5371,1.415,5372,0.995,5373,5.002,5374,2.848,5375,3.506,5376,0.711,5377,0.518,5378,0.265,5379,0.265,5380,0.265,5382,0.265,5383,0.265,5386,0.265,5387,0.265,5388,0.293,5389,0.293,5390,0.293,5391,0.293,5392,0.293,5393,1.352,5394,0.574,5395,0.293,5396,1.592,5397,0.293,5398,0.293,5399,0.258,5400,0.844,5401,0.293,5402,0.293,5403,0.293,5404,0.293,5405,0.293,5406,0.293,5407,0.293,5408,0.293,5409,0.574,5410,0.574,5411,0.293,5412,0.574,5413,0.844,5414,0.574,5415,0.293,5416,0.293,5417,0.293,5418,0.293,5419,0.293,5420,0.293,5421,0.293,5422,0.574,5423,1.103,5424,0.293,5425,0.574,5426,0.574,5427,0.574,5428,0.293,5429,0.293,5430,1.822,5431,0.293,5432,0.293,5433,3.043,5434,0.844,5435,0.844,5436,0.574,5437,0.574,5438,0.293,5439,0.293,5440,0.293,5441,0.293,5442,0.293,5443,0.293,5444,0.293,5445,0.293,5446,1.352,5447,0.574,5448,0.844,5449,0.293,5450,0.293,5451,0.293,5452,0.293,5453,0.844,5454,0.293,5455,0.761,5456,1.592,5457,0.574,5458,1.103,5459,1.352,5460,0.293,5461,0.265,5462,0.574,5463,0.574,5464,0.293,5465,0.293,5466,0.293,5467,0.293,5468,0.293,5469,0.293,5470,0.293,5471,0.844,5472,0.293,5473,0.293,5474,0.293,5475,0.293,5476,0.574,5477,0.574,5478,0.574,5479,0.293,5480,0.293,5481,0.293,5482,0.293,5483,0.293,5484,0.293,5485,0.574,5486,3.043,5487,0.293,5488,0.844,5489,0.574,5490,1.592,5491,0.293,5492,0.293,5493,0.844,5494,0.844,5495,1.822,5496,0.844,5497,1.822,5498,0.574,5499,2.258,5500,0.293,5501,1.352,5502,0.293,5503,0.293,5504,0.844,5505,0.844,5506,0.844,5507,0.293,5508,0.293,5509,0.293,5510,0.574,5511,0.293,5512,0.844,5513,0.293,5514,0.844,5515,0.574,5516,0.844,5517,0.844,5518,0.293,5519,0.293,5520,0.293,5521,0.293,5522,0.574,5523,0.293,5524,0.293,5525,0.574,5526,0.293,5527,0.574,5528,0.574,5529,0.574,5530,0.844,5531,0.844,5532,0.293,5533,0.293,5534,0.844,5535,0.844,5536,0.293,5537,0.574,5538,0.574,5539,0.574,5540,0.293,5541,0.293,5542,0.293,5543,0.293,5544,0.844,5545,2.258,5546,1.352,5547,1.352,5548,0.293,5549,0.293,5550,0.293,5551,1.352,5552,1.103,5553,0.293,5554,0.844,5555,0.293,5556,0.293,5557,0.293,5558,0.844,5559,0.844,5560,0.844,5561,0.844,5562,0.293,5563,0.293,5564,0.574,5565,0.293,5566,0.293,5567,0.293,5568,0.574,5569,0.293,5570,0.293,5571,0.574,5572,0.293,5573,0.293,5574,0.293,5575,0.293,5576,0.293,5577,0.293,5578,0.293,5579,0.293,5580,0.293,5581,0.293,5582,1.352,5583,0.293,5584,1.103,5585,0.293,5586,0.293,5587,0.293,5588,0.293,5589,0.293,5590,0.293,5591,0.293,5592,0.293,5593,0.293,5594,0.293,5595,0.293,5596,1.436,5597,0.293,5598,0.574,5599,0.293,5600,0.293,5601,0.844,5602,0.293,5603,0.293,5604,0.293,5605,0.293,5606,0.293,5607,0.293,5608,0.293,5609,0.293,5610,0.282,5611,0.293,5612,0.293,5613,0.293,5614,0.293,5615,0.293,5616,0.293,5617,0.293,5618,0.293,5619,0.293,5620,0.293,5621,0.574,5622,0.844,5623,0.293,5624,0.293,5625,0.574,5626,0.574,5627,0.574,5628,0.293,5629,0.293,5630,0.265,5631,0.293,5632,0.293,5633,0.293,5634,0.293,5635,3.222,5636,0.574,5637,0.844,5638,1.352,5639,1.592,5640,0.844,5641,1.352,5642,0.574,5643,0.844,5644,1.103,5645,0.844,5646,1.352,5647,3.222,5648,1.103,5649,0.293,5650,0.574,5651,1.103,5652,0.574,5653,0.293,5654,0.272,5655,0.293,5656,0.844,5657,0.844,5658,0.844,5659,0.293,5660,0.293,5661,0.293,5662,0.293,5663,0.293,5664,0.293,5665,0.293,5666,0.293,5667,0.574,5668,0.293,5669,0.293,5670,0.293,5671,0.293,5672,0.293,5673,0.574,5674,0.293,5675,0.293,5676,0.293,5677,0.293,5678,0.293,5679,0.293,5680,0.293,5681,0.293,5682,0.293,5683,0.293,5684,0.293,5685,0.293,5686,0.293,5687,0.293,5688,0.293,5689,0.293,5690,0.293,5691,0.293,5692,0.574,5693,0.574,5694,0.293,5695,0.293,5696,0.293,5697,0.293,5698,0.293,5699,0.293,5700,0.293]],["component/200",[11,0.279,108,0.486]],["title/201-1",[11,13.888,40,30.711]],["name/201-1",[]],["text/201-1",[]],["component/201-1",[]],["title/201-2",[11,13.888,39,39.302]],["name/201-2",[]],["text/201-2",[]],["component/201-2",[]],["title/201-3",[2150,63.392]],["name/201-3",[]],["text/201-3",[]],["component/201-3",[]],["title/201-4",[237,25.547,310,24.166,359,32.552]],["name/201-4",[]],["text/201-4",[]],["component/201-4",[]],["title/201-5",[243,32.203,359,38.326]],["name/201-5",[]],["text/201-5",[]],["component/201-5",[]],["title/201-6",[237,25.547,359,32.552,407,31.225]],["name/201-6",[]],["text/201-6",[]],["component/201-6",[]],["title/201-7",[6,56.611]],["name/201-7",[]],["text/201-7",[]],["component/201-7",[]],["title/201-8",[185,34.589]],["name/201-8",[]],["text/201-8",[]],["component/201-8",[]],["title/201-9",[81,25.551,253,26.906]],["name/201-9",[]],["text/201-9",[]],["component/201-9",[]],["title/201",[237,30.08,359,38.326]],["name/201",[237,0.49,359,0.624]],["text/201",[0,2.533,9,0.849,11,0.887,14,1.985,27,3.742,32,0.866,37,1.658,39,1.06,50,0.762,57,0.778,59,1.15,65,1.597,67,0.878,75,1.001,77,1.096,81,1.631,89,1.15,92,0.967,98,2.422,109,3.339,115,0.884,119,3.133,121,1.564,128,1.887,130,1.042,133,1.369,141,4.798,142,0.902,164,0.855,166,1.246,169,1.039,170,3.549,176,2.704,180,2.513,182,0.933,185,0.768,188,5.018,192,3.096,197,1.198,204,1.173,205,3.353,216,0.922,217,6.535,218,1.639,219,1.343,221,1.591,225,3.876,231,2.327,236,1.652,237,4.73,243,2.829,244,3.258,246,1.226,253,2.071,268,0.967,269,4.925,271,2.698,273,1.005,286,1.765,288,0.902,289,2.055,299,0.855,301,2.098,302,1.527,307,2.459,310,2.499,312,1.444,315,0.875,323,0.826,327,2.637,330,2.459,331,2.296,339,2.028,341,2.693,342,1.01,347,1.01,354,2.463,356,3.187,358,4.919,359,6.647,364,2.357,393,0.852,406,1.615,407,0.992,414,1.173,420,0.852,447,0.929,469,1.399,483,0.963,484,1.815,489,0.971,501,1.044,507,1.815,516,1.121,520,1.029,528,1.87,550,0.967,558,2.337,569,3.596,571,2.794,572,2.536,573,2.721,582,4.007,600,2.32,611,0.933,615,1.165,621,0.992,624,1.102,637,1.019,643,1.01,644,1.15,646,1.705,647,0.979,653,1.19,656,0.963,657,1.066,753,1.773,786,1.024,816,1.9,857,1.165,863,1.115,870,1.173,907,1.329,957,0.983,978,4.758,1036,1.861,1086,0.951,1129,1.142,1172,1.226,1183,3.523,1186,1.072,1188,2.235,1204,3.026,1222,2.451,1249,3.607,1351,1.681,1352,2.924,1353,1.19,1354,2.481,1355,1.407,1357,1.569,1391,1.932,1411,6.384,1420,5.798,1451,1.681,1471,2.39,1511,1.489,1512,1.489,1568,1.165,1576,2.522,1712,2.626,1713,2.369,1870,2.965,1898,4.318,2039,1.236,2040,4.283,2118,1.358,2331,4.638,2349,1.681,2376,1.489,2450,1.303,2456,2.736,2716,1.466,2758,3.2,2781,1.639,2968,1.173,3002,1.329,3140,1.489,3145,4.847,3420,3.329,3482,4.421,3530,1.489,3704,2.422,3744,1.425,3814,1.315,3839,2.965,4131,1.681,4616,1.425,4905,1.569,5056,1.681,5340,2.768,5343,1.681,5358,1.681,5914,2.965,5927,1.864,5928,1.864,5929,3.287,5930,3.287,5931,3.287,5932,3.287,5933,1.864,5934,1.864,5935,1.864,5936,3.287,5937,3.287,5938,1.864,5939,1.864,5940,1.864,5941,6.068,5942,6.068,5943,1.864,5944,1.864,5945,1.864,5946,1.864,5947,1.864,5948,6.698,5949,1.864,5950,3.287,5951,3.287,5952,1.864,5953,1.864,5954,1.864,5955,1.864,5956,1.864,5957,1.864,5958,1.864,5959,1.864,5960,1.864,5961,1.864,5962,3.287,5963,3.287,5964,3.287,5965,1.864,5966,1.681,5967,1.864,5968,1.864,5969,1.864,5970,1.864,5971,1.864,5972,1.864,5973,1.864,5974,1.864,5975,1.864,5976,1.864,5977,1.864,5978,1.864,5979,1.864]],["component/201",[11,0.279,108,0.486]],["title/202-1",[251,34.29,656,30.31,688,32.088]],["name/202-1",[]],["text/202-1",[]],["component/202-1",[]],["title/202-2",[128,25.111,656,30.31,688,32.088]],["name/202-2",[]],["text/202-2",[]],["component/202-2",[]],["title/202-3",[656,30.31,688,32.088,3594,38.592]],["name/202-3",[]],["text/202-3",[]],["component/202-3",[]],["title/202-4",[113,22.964,299,26.909,656,30.31]],["name/202-4",[]],["text/202-4",[]],["component/202-4",[]],["title/202-5",[356,28.605,972,30.168]],["name/202-5",[]],["text/202-5",[]],["component/202-5",[]],["title/202-6",[4068,64.221]],["name/202-6",[]],["text/202-6",[]],["component/202-6",[]],["title/202-7",[1613,53.991]],["name/202-7",[]],["text/202-7",[]],["component/202-7",[]],["title/202-8",[139,33.93,302,32.097]],["name/202-8",[]],["text/202-8",[]],["component/202-8",[]],["title/202-9",[353,32.749,656,35.686]],["name/202-9",[]],["text/202-9",[]],["component/202-9",[]],["title/202-10",[185,24.166,353,27.814,656,30.31]],["name/202-10",[]],["text/202-10",[]],["component/202-10",[]],["title/202-11",[353,24.172,516,30.677,656,26.341,1660,36.356]],["name/202-11",[]],["text/202-11",[]],["component/202-11",[]],["title/202-12",[178,25.622,656,30.31,2718,34.29]],["name/202-12",[]],["text/202-12",[]],["component/202-12",[]],["title/202-13",[353,24.172,688,40.819,2718,29.8]],["name/202-13",[]],["text/202-13",[]],["component/202-13",[]],["title/202-14",[226,28.714,495,25.617,525,28.428,2718,29.8]],["name/202-14",[]],["text/202-14",[]],["component/202-14",[]],["title/202-15",[226,28.714,393,23.311,481,31.253,2718,29.8]],["name/202-15",[]],["text/202-15",[]],["component/202-15",[]],["title/202",[656,43.383]],["name/202",[656,1.052]],["text/202",[9,0.43,11,1.751,12,0.92,24,1.646,25,0.647,26,0.497,27,3.422,32,2.18,33,2.344,35,0.852,37,0.475,38,0.935,41,0.523,47,0.837,50,1.018,65,1.522,67,0.831,71,3.11,75,0.948,76,0.475,77,0.83,81,0.349,84,1.032,93,1.41,97,0.548,99,0.515,100,0.52,101,0.515,102,0.508,103,0.483,105,0.468,106,1.161,109,0.435,111,0.56,113,1.451,119,1.466,128,1.587,130,0.789,131,0.84,133,0.735,135,0.764,139,0.867,148,0.485,154,2.639,157,1.173,161,0.523,164,0.81,165,1.237,167,0.721,169,0.984,170,1.32,172,1.66,173,0.456,178,1.088,181,1.082,183,0.963,184,0.536,185,2.546,186,0.679,190,1.286,192,1.808,194,0.927,201,1.297,205,0.39,209,0.542,216,1.551,221,1.206,226,3.807,227,0.468,231,1.314,236,1.251,237,2.396,241,3.039,242,3.068,243,2.565,244,3.382,250,1.963,252,0.414,253,2.995,256,0.56,268,0.916,269,4.975,271,3.326,273,0.508,274,0.602,279,1.475,281,1.811,285,0.539,287,0.551,292,0.531,295,0.694,297,0.567,299,1.701,300,1.301,302,2.18,303,1.292,305,0.418,309,0.508,312,1.094,317,2.927,320,1.424,331,3.133,335,2.58,337,0.485,340,1.111,341,2.59,347,0.511,351,0.564,353,3.986,354,1.153,356,1.943,359,0.523,360,1.303,361,0.485,363,0.523,364,0.418,371,1.599,373,0.499,374,0.483,378,0.513,383,2.099,384,0.513,392,1.232,393,3.42,394,1.69,406,1.539,407,0.502,409,0.98,420,1.433,421,0.491,439,0.567,450,1.032,453,2.542,455,1.152,457,1.171,461,0.602,469,1.334,479,0.448,481,1.921,489,0.92,491,2.925,496,0.548,507,0.52,516,4.067,520,0.975,525,5.426,529,0.578,532,2,536,0.606,538,0.679,540,0.567,541,0.518,546,1.35,551,0.606,558,0.935,560,0.721,569,4.129,571,2.687,572,4.035,573,2.894,582,3.591,603,0.994,610,1.201,611,0.472,615,0.589,617,0.542,619,0.528,621,1.325,624,1.472,631,0.581,639,1.211,643,0.511,644,0.581,645,1.111,647,0.927,649,0.533,656,5.534,657,3.707,658,0.62,668,0.528,688,5.548,691,0.753,703,1.082,708,0.779,713,1.356,726,0.571,748,0.659,751,1.135,752,1.152,753,0.508,759,1.161,770,0.721,773,4.288,777,0.753,786,1.722,798,1.32,806,2.824,816,0.545,823,0.694,827,0.606,835,0.557,841,1.18,856,0.593,857,1.557,871,0.585,901,0.635,929,0.606,957,0.931,971,2.5,972,2.403,975,0.593,977,1.464,997,0.593,1030,0.602,1035,0.523,1036,1.41,1055,0.753,1075,2.095,1086,0.481,1107,0.63,1110,3.011,1112,0.548,1129,1.082,1142,2.15,1154,1.19,1198,0.694,1215,0.687,1217,0.703,1224,1.693,1241,0.794,1249,2.106,1252,0.593,1253,0.593,1326,0.912,1327,0.659,1338,0.641,1366,1.18,1391,0.554,1397,0.721,1420,0.647,1437,0.85,1450,1.104,1471,0.957,1505,0.694,1558,2.396,1559,1.19,1576,1.01,1602,1.933,1613,2.384,1619,1.35,1645,1.388,1647,0.753,1660,1.776,1687,0.679,1704,1.783,1793,1.857,1945,1.776,1963,1.259,1965,1.41,2018,3.345,2039,0.625,2040,0.665,2085,0.679,2087,0.794,2161,0.63,2333,0.635,2343,0.578,2423,1.234,2426,1.613,2439,4.153,2442,2.592,2451,1.546,2456,1.281,2487,2.367,2563,0.741,2624,0.81,2705,0.672,2718,4.913,2734,1.152,2737,0.659,2738,0.85,2758,0.567,2794,1.487,2824,0.687,2879,0.829,2909,0.779,2968,0.593,2987,0.615,3000,1.708,3004,0.721,3009,0.85,3275,3.811,3278,1.593,3279,0.85,3280,4.126,3281,0.85,3282,0.85,3283,0.85,3284,1.593,3291,0.85,3292,0.85,3293,1.593,3304,2.247,3305,1.593,3361,0.721,3365,2.234,3384,1.152,3427,2.097,3455,4.054,3479,1.35,3480,0.653,3519,0.721,3523,1.301,3548,1.333,3594,1.161,3670,3.113,3676,0.794,3695,0.694,3722,0.85,3725,0.794,3727,1.41,3730,0.753,3745,0.85,3787,0.731,3841,0.85,3914,1.776,3958,1.593,3972,4.615,4068,2.396,4094,0.753,4189,0.753,4231,0.741,4247,0.85,4303,0.779,4359,0.85,4362,0.794,4370,0.753,4449,0.85,4470,0.753,4810,0.794,5118,0.794,5307,1.487,5373,0.753,5374,1.41,5455,0.85,5461,0.85,5596,0.85,5630,0.85,5705,3.811,5721,0.85,5722,0.85,5723,0.85,5733,0.85,5738,0.85,5773,0.85,5980,0.942,5981,1.765,5982,0.942,5983,0.942,5984,0.942,5985,0.942,5986,3.708,5987,0.942,5988,0.942,5989,0.942,5990,0.942,5991,0.942,5992,0.942,5993,0.942,5994,0.942,5995,1.765,5996,0.942,5997,1.765,5998,1.765,5999,0.942,6000,0.942,6001,0.942,6002,0.942,6003,4.691,6004,2.49,6005,0.942,6006,0.942,6007,1.765,6008,1.765,6009,0.942,6010,1.765,6011,1.765,6012,1.765,6013,1.765,6014,1.765,6015,2.49,6016,1.765,6017,1.765,6018,1.765,6019,1.765,6020,1.765,6021,0.942,6022,0.942,6023,0.942,6024,0.942,6025,0.942,6026,0.942,6027,0.942,6028,0.942,6029,1.765,6030,1.765,6031,0.942,6032,1.765,6033,4.225,6034,4.225,6035,1.765,6036,3.708,6037,3.708,6038,3.708,6039,3.133,6040,2.49,6041,0.942,6042,0.942,6043,0.942,6044,0.942,6045,1.765,6046,0.942,6047,0.942,6048,0.942,6049,1.695,6050,0.942,6051,0.942,6052,0.942,6053,0.942,6054,0.942,6055,0.942,6056,0.942,6057,0.942,6058,0.942,6059,0.942,6060,0.942,6061,0.942,6064,0.942,6065,0.942,6066,1.765,6067,1.765,6068,0.942,6069,3.708,6070,1.765,6071,0.942,6072,0.942,6073,1.765,6074,0.942,6075,0.942,6076,0.942,6077,0.942,6078,0.942,6079,0.942,6080,0.942,6081,0.942,6082,0.942,6083,0.942,6084,0.942,6085,0.942,6086,0.942,6087,0.942,6088,0.942,6089,0.942,6090,0.942,6091,0.942,6092,0.942,6093,0.942,6094,0.942,6095,2.49,6096,0.942]],["component/202",[11,0.279,108,0.486]]],"invertedIndex":[["",{"_index":269,"title":{"26-18":{},"64-13":{},"92-16":{},"92-21":{},"131-13":{},"199-13":{}},"name":{},"text":{"4":{},"5":{},"16":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"71":{},"82":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"118":{},"119":{},"120":{},"122":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"138":{},"139":{},"150":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"162":{},"163":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"186":{},"187":{},"188":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["0",{"_index":2253,"title":{},"name":{},"text":{"23":{},"33":{},"34":{},"35":{},"36":{},"37":{},"39":{},"40":{},"43":{},"44":{},"56":{},"59":{},"63":{},"90":{},"99":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"109":{},"110":{},"123":{},"127":{},"132":{},"158":{},"167":{},"168":{},"169":{},"170":{},"172":{},"174":{},"175":{},"178":{},"179":{},"191":{},"195":{},"200":{}},"component":{}}],["0.0.0",{"_index":3873,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["0.000976",{"_index":2876,"title":{},"name":{},"text":{"26":{}},"component":{}}],["00:00",{"_index":5640,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["01",{"_index":3838,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["012151f572f2",{"_index":1800,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["019b",{"_index":1998,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["02",{"_index":3839,"title":{},"name":{},"text":{"40":{},"65":{},"107":{},"133":{},"175":{},"201":{}},"component":{}}],["03",{"_index":3840,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["0382",{"_index":1317,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["057e",{"_index":1979,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["0c1dd62fdca7",{"_index":1982,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["0d69",{"_index":1873,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["0dd0",{"_index":1477,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["0df1",{"_index":4659,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["1",{"_index":317,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"47":{},"48":{},"49":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"70":{},"72":{},"73":{},"74":{},"76":{},"77":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"116":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"138":{},"140":{},"141":{},"142":{},"144":{},"145":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"181":{},"182":{},"183":{},"184":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["1,2,3,4,5",{"_index":5729,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["1.0",{"_index":6256,"title":{"93-3":{}},"name":{},"text":{"93":{}},"component":{}}],["1.0.0",{"_index":2466,"title":{},"name":{},"text":{"26":{},"92":{},"160":{}},"component":{}}],["1.000",{"_index":5103,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["1.2.0",{"_index":5728,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["1.2.1",{"_index":1080,"title":{},"name":{},"text":{"22":{}},"component":{}}],["1.2.2",{"_index":6103,"title":{},"name":{},"text":{"88":{},"156":{}},"component":{}}],["1.3",{"_index":820,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["1.5px",{"_index":2711,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["10",{"_index":99,"title":{},"name":{},"text":{"1":{},"16":{},"19":{},"22":{},"23":{},"24":{},"27":{},"29":{},"33":{},"35":{},"39":{},"40":{},"43":{},"46":{},"48":{},"53":{},"56":{},"60":{},"63":{},"64":{},"66":{},"67":{},"82":{},"84":{},"88":{},"89":{},"90":{},"95":{},"99":{},"102":{},"106":{},"107":{},"110":{},"113":{},"115":{},"120":{},"123":{},"128":{},"131":{},"132":{},"134":{},"135":{},"150":{},"152":{},"156":{},"157":{},"158":{},"163":{},"167":{},"170":{},"174":{},"175":{},"178":{},"181":{},"183":{},"188":{},"191":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["10'000",{"_index":3775,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["10.0.0",{"_index":4501,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["10.15.2.0",{"_index":1508,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["100",{"_index":3265,"title":{},"name":{},"text":{"36":{},"39":{},"44":{},"103":{},"106":{},"109":{},"168":{},"174":{},"179":{}},"component":{}}],["1000",{"_index":5102,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["1000000",{"_index":5091,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["106",{"_index":3052,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["10:15am",{"_index":3493,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["11",{"_index":97,"title":{},"name":{},"text":{"1":{},"16":{},"19":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"39":{},"40":{},"43":{},"46":{},"48":{},"63":{},"64":{},"66":{},"67":{},"82":{},"84":{},"88":{},"89":{},"90":{},"95":{},"106":{},"107":{},"110":{},"113":{},"115":{},"128":{},"131":{},"132":{},"134":{},"135":{},"150":{},"152":{},"156":{},"157":{},"158":{},"163":{},"174":{},"175":{},"178":{},"181":{},"183":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["11.0",{"_index":2462,"title":{},"name":{},"text":{"26":{}},"component":{}}],["1109",{"_index":2190,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["1111",{"_index":5024,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["1111222233334444",{"_index":5023,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["12",{"_index":1252,"title":{},"name":{},"text":{"23":{},"27":{},"29":{},"39":{},"40":{},"43":{},"46":{},"48":{},"59":{},"63":{},"64":{},"66":{},"90":{},"95":{},"106":{},"107":{},"110":{},"113":{},"115":{},"127":{},"128":{},"131":{},"132":{},"134":{},"158":{},"163":{},"174":{},"175":{},"178":{},"181":{},"183":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["12.1",{"_index":2930,"title":{},"name":{},"text":{"27":{},"45":{},"112":{},"180":{}},"component":{}}],["120",{"_index":1448,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["123",{"_index":3357,"title":{},"name":{},"text":{"38":{},"59":{},"105":{},"127":{},"173":{},"195":{}},"component":{}}],["12345",{"_index":3389,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["128",{"_index":3966,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["13",{"_index":1253,"title":{},"name":{},"text":{"23":{},"27":{},"29":{},"39":{},"43":{},"45":{},"46":{},"48":{},"57":{},"63":{},"64":{},"66":{},"90":{},"95":{},"106":{},"110":{},"112":{},"113":{},"115":{},"125":{},"128":{},"131":{},"132":{},"134":{},"158":{},"163":{},"174":{},"178":{},"180":{},"181":{},"183":{},"192":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["132",{"_index":3055,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["13bd15199101",{"_index":1919,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["14",{"_index":1327,"title":{},"name":{},"text":{"23":{},"39":{},"43":{},"48":{},"63":{},"64":{},"66":{},"90":{},"106":{},"110":{},"115":{},"128":{},"131":{},"132":{},"134":{},"158":{},"174":{},"178":{},"183":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["144dad3c208f",{"_index":1350,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["14:00",{"_index":3691,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["14:05",{"_index":3692,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["15",{"_index":1338,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"43":{},"48":{},"63":{},"64":{},"66":{},"90":{},"106":{},"107":{},"110":{},"115":{},"128":{},"131":{},"132":{},"134":{},"158":{},"174":{},"175":{},"178":{},"183":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["150x150",{"_index":2631,"title":{},"name":{},"text":{"26":{}},"component":{}}],["152px",{"_index":3266,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["16",{"_index":1039,"title":{},"name":{},"text":{"22":{},"23":{},"39":{},"40":{},"43":{},"48":{},"63":{},"64":{},"90":{},"106":{},"107":{},"110":{},"115":{},"128":{},"131":{},"132":{},"156":{},"158":{},"174":{},"175":{},"178":{},"183":{},"196":{},"199":{},"200":{}},"component":{}}],["16.13.0",{"_index":2475,"title":{},"name":{},"text":{"26":{}},"component":{}}],["162",{"_index":3047,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["16px",{"_index":2707,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["17",{"_index":514,"title":{"26-9":{}},"name":{},"text":{"16":{},"23":{},"26":{},"27":{},"39":{},"48":{},"63":{},"64":{},"82":{},"90":{},"106":{},"115":{},"131":{},"132":{},"150":{},"158":{},"174":{},"183":{},"199":{},"200":{}},"component":{}}],["18",{"_index":1364,"title":{},"name":{},"text":{"23":{},"39":{},"63":{},"64":{},"88":{},"90":{},"106":{},"131":{},"132":{},"158":{},"174":{},"199":{},"200":{}},"component":{}}],["18.12.1",{"_index":6116,"title":{},"name":{},"text":{"92":{}},"component":{}}],["180deg",{"_index":3270,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["182",{"_index":3063,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["1832",{"_index":1786,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["19",{"_index":1368,"title":{},"name":{},"text":{"23":{},"39":{},"63":{},"64":{},"90":{},"106":{},"131":{},"132":{},"158":{},"174":{},"199":{},"200":{}},"component":{}}],["191919",{"_index":3123,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["192.168.10.199",{"_index":4358,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["192.200.0.0",{"_index":5524,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["192.255.0.0",{"_index":5526,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["1970",{"_index":5645,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["1:1",{"_index":5735,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["1:n",{"_index":1220,"title":{},"name":{},"text":{"23":{},"50":{},"90":{},"117":{},"158":{},"185":{}},"component":{}}],["1f1ae4b74d4",{"_index":1466,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["1h",{"_index":4427,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["1l",{"_index":1355,"title":{},"name":{},"text":{"23":{},"43":{},"48":{},"64":{},"65":{},"90":{},"93":{},"110":{},"115":{},"131":{},"133":{},"158":{},"178":{},"183":{},"199":{},"201":{}},"component":{}}],["1px",{"_index":2715,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["1s",{"_index":3267,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["2",{"_index":335,"title":{},"name":{},"text":{"5":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"46":{},"47":{},"48":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"70":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"119":{},"120":{},"121":{},"122":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"134":{},"138":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"181":{},"182":{},"183":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["2.0",{"_index":5016,"title":{"93-3":{}},"name":{},"text":{"58":{},"93":{},"126":{},"194":{}},"component":{}}],["2.3",{"_index":5388,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["2.3.x",{"_index":5392,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["20",{"_index":1367,"title":{},"name":{},"text":{"23":{},"33":{},"35":{},"39":{},"44":{},"63":{},"64":{},"90":{},"99":{},"102":{},"106":{},"109":{},"131":{},"132":{},"158":{},"167":{},"170":{},"174":{},"179":{},"199":{},"200":{}},"component":{}}],["200",{"_index":3927,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["2000m",{"_index":4064,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["2010",{"_index":5097,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["2016",{"_index":5671,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["2020",{"_index":5098,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["2022",{"_index":6202,"title":{},"name":{},"text":{"92":{}},"component":{}}],["202e63daffc8",{"_index":1883,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["2048",{"_index":4083,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["20d",{"_index":4715,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["21",{"_index":1421,"title":{},"name":{},"text":{"23":{},"39":{},"63":{},"64":{},"90":{},"106":{},"131":{},"132":{},"158":{},"174":{},"199":{},"200":{}},"component":{}}],["2109",{"_index":3885,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["217",{"_index":3060,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["21fb",{"_index":1916,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["22",{"_index":90,"title":{},"name":{},"text":{"1":{},"23":{},"26":{},"27":{},"39":{},"63":{},"64":{},"67":{},"90":{},"106":{},"131":{},"132":{},"135":{},"158":{},"174":{},"199":{},"200":{}},"component":{}}],["22.0",{"_index":20,"title":{},"name":{},"text":{"1":{},"23":{},"26":{},"92":{}},"component":{}}],["22.0.0",{"_index":2468,"title":{},"name":{},"text":{"26":{},"46":{},"92":{},"160":{}},"component":{}}],["22.0.11",{"_index":2472,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["22.0.2",{"_index":1079,"title":{},"name":{},"text":{"22":{},"26":{}},"component":{}}],["22.0.3",{"_index":2455,"title":{"26-39":{}},"name":{},"text":{},"component":{}}],["22.0.35",{"_index":2458,"title":{"26-40":{}},"name":{},"text":{},"component":{}}],["22.0.41",{"_index":2464,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["22.0.46",{"_index":2461,"title":{"26-41":{}},"name":{},"text":{},"component":{}}],["22.0.x",{"_index":2477,"title":{},"name":{},"text":{"26":{}},"component":{}}],["2222",{"_index":5025,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["224",{"_index":5394,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["22a9b3ce890d",{"_index":4662,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["22e4",{"_index":2269,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["23",{"_index":1422,"title":{},"name":{},"text":{"23":{},"39":{},"63":{},"64":{},"90":{},"106":{},"131":{},"132":{},"158":{},"174":{},"199":{},"200":{}},"component":{}}],["23.1",{"_index":6097,"title":{},"name":{},"text":{"67":{},"90":{},"92":{},"93":{},"160":{}},"component":{}}],["23.1.0",{"_index":6371,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["23.1.2",{"_index":6102,"title":{},"name":{},"text":{"88":{},"156":{}},"component":{}}],["23.1.8",{"_index":6115,"title":{},"name":{},"text":{"92":{},"93":{}},"component":{}}],["23.1.x",{"_index":6117,"title":{},"name":{},"text":{"92":{}},"component":{}}],["23.2",{"_index":6419,"title":{},"name":{},"text":{"135":{},"158":{},"160":{}},"component":{}}],["23.2.0",{"_index":6423,"title":{},"name":{},"text":{"160":{},"161":{}},"component":{}}],["234",{"_index":5057,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["24",{"_index":1423,"title":{},"name":{},"text":{"23":{},"39":{},"63":{},"64":{},"90":{},"106":{},"131":{},"132":{},"158":{},"174":{},"199":{},"200":{}},"component":{}}],["243",{"_index":3056,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["245ddb8b8441",{"_index":5351,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["24px",{"_index":2712,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["25",{"_index":1493,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"44":{},"63":{},"64":{},"90":{},"106":{},"107":{},"109":{},"131":{},"132":{},"158":{},"174":{},"175":{},"179":{},"199":{},"200":{}},"component":{}}],["250",{"_index":5100,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["2512d734ebac",{"_index":2293,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["257f",{"_index":2262,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["25t14:22:58:583+0100",{"_index":5672,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["26",{"_index":1511,"title":{},"name":{},"text":{"23":{},"39":{},"64":{},"65":{},"90":{},"106":{},"131":{},"133":{},"158":{},"174":{},"199":{},"201":{}},"component":{}}],["261",{"_index":3066,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["27",{"_index":1512,"title":{},"name":{},"text":{"23":{},"39":{},"64":{},"65":{},"90":{},"106":{},"131":{},"133":{},"158":{},"174":{},"199":{},"201":{}},"component":{}}],["28",{"_index":1514,"title":{},"name":{},"text":{"23":{},"39":{},"64":{},"90":{},"106":{},"131":{},"158":{},"174":{},"199":{}},"component":{}}],["280",{"_index":4586,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["28d82a5d7bf9",{"_index":1721,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["29",{"_index":1521,"title":{},"name":{},"text":{"23":{},"39":{},"64":{},"90":{},"106":{},"131":{},"158":{},"174":{},"199":{}},"component":{}}],["2914",{"_index":1865,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["29d7a7400abf",{"_index":2199,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["2>/dev/nul",{"_index":2520,"title":{},"name":{},"text":{"26":{}},"component":{}}],["2ab3",{"_index":2274,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["2c6053b2fdf5b816fae5.min.j",{"_index":4543,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["2c89",{"_index":1772,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["2d62",{"_index":4840,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["2e89e18eeae",{"_index":1311,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["2pc",{"_index":5390,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["3",{"_index":340,"title":{},"name":{},"text":{"5":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"27":{},"29":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"70":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"119":{},"120":{},"121":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"138":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"187":{},"188":{},"189":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["3.0",{"_index":4240,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["3.10.1",{"_index":2588,"title":{},"name":{},"text":{"26":{}},"component":{}}],["3.6.0",{"_index":2469,"title":{},"name":{},"text":{"26":{},"92":{},"160":{}},"component":{}}],["3.6.3",{"_index":2474,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["3.7.0",{"_index":2428,"title":{"26-10":{}},"name":{},"text":{},"component":{}}],["3.9",{"_index":107,"title":{},"name":{},"text":{"1":{},"67":{},"135":{}},"component":{}}],["30",{"_index":991,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"39":{},"40":{},"44":{},"64":{},"87":{},"89":{},"90":{},"106":{},"107":{},"109":{},"131":{},"155":{},"157":{},"158":{},"174":{},"175":{},"179":{},"199":{}},"component":{}}],["300",{"_index":4429,"title":{},"name":{},"text":{"44":{},"53":{},"109":{},"120":{},"179":{},"188":{}},"component":{}}],["30000",{"_index":4421,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["3097c5e011b6",{"_index":568,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["31",{"_index":1688,"title":{},"name":{},"text":{"23":{},"33":{},"35":{},"39":{},"43":{},"90":{},"99":{},"102":{},"106":{},"110":{},"158":{},"167":{},"170":{},"174":{},"178":{}},"component":{}}],["312",{"_index":3051,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["3178f7a9e720",{"_index":1320,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["32",{"_index":837,"title":{},"name":{},"text":{"19":{},"23":{},"39":{},"40":{},"84":{},"90":{},"106":{},"107":{},"152":{},"158":{},"174":{},"175":{}},"component":{}}],["33",{"_index":1696,"title":{},"name":{},"text":{"23":{},"39":{},"90":{},"106":{},"158":{},"174":{}},"component":{}}],["3333",{"_index":5026,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["333333",{"_index":5061,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["34",{"_index":1703,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["347ef67cf80f",{"_index":2001,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["35",{"_index":1709,"title":{},"name":{},"text":{"23":{},"33":{},"35":{},"90":{},"99":{},"102":{},"158":{},"167":{},"170":{}},"component":{}}],["36",{"_index":1710,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["3600",{"_index":3821,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["3600l",{"_index":3818,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["37",{"_index":1711,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["3725b0995558",{"_index":2187,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["38",{"_index":1836,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["39",{"_index":1842,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["391",{"_index":3064,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["3938",{"_index":1933,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["3bb3ef592b12",{"_index":1851,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["3c99",{"_index":565,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["3d",{"_index":3268,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["3d6e",{"_index":1754,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["3e3d9ce48f21",{"_index":1974,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["3rd",{"_index":2425,"title":{"26-8":{},"26-10":{},"26-11":{},"27-13":{},"92-8":{},"92-9":{}},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["4",{"_index":106,"title":{},"name":{},"text":{"1":{},"5":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"27":{},"29":{},"33":{},"35":{},"36":{},"37":{},"39":{},"40":{},"43":{},"44":{},"46":{},"47":{},"48":{},"53":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"67":{},"70":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"99":{},"102":{},"103":{},"104":{},"106":{},"107":{},"109":{},"110":{},"113":{},"114":{},"115":{},"120":{},"121":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"135":{},"138":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"167":{},"168":{},"169":{},"170":{},"174":{},"175":{},"178":{},"179":{},"181":{},"182":{},"183":{},"188":{},"189":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["4.0.0",{"_index":1501,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4.2",{"_index":4627,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["4.5.0",{"_index":6124,"title":{},"name":{},"text":{"92":{}},"component":{}}],["40",{"_index":1843,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4000",{"_index":3773,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["4001",{"_index":3771,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["401f",{"_index":1866,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["402f",{"_index":2180,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["404",{"_index":5990,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["40a3",{"_index":1301,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["40dc",{"_index":2400,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["41",{"_index":1844,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4132",{"_index":4841,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["415",{"_index":3065,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["4151",{"_index":2066,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4194",{"_index":4660,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["41a4",{"_index":1779,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["42",{"_index":2058,"title":{},"name":{},"text":{"23":{},"64":{},"90":{},"131":{},"158":{},"199":{}},"component":{}}],["4208",{"_index":2346,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["421e",{"_index":2370,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4238",{"_index":2286,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4239",{"_index":1755,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4284",{"_index":1787,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4290",{"_index":2209,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4296",{"_index":1798,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["42bc",{"_index":1849,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["42c914ec29d5",{"_index":1858,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["42d70aaa568f",{"_index":2149,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["43",{"_index":2113,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["436e",{"_index":2275,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["439f",{"_index":1910,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["43cd",{"_index":1761,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["43d8",{"_index":1348,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["43e3a138796b",{"_index":2182,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["44",{"_index":2159,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["441b",{"_index":1384,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4444",{"_index":5027,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["445",{"_index":3059,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["44a2",{"_index":1767,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["44b8",{"_index":1925,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["45",{"_index":2160,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4500",{"_index":3776,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["456e",{"_index":1911,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["45dc",{"_index":2263,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["45e8",{"_index":2185,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["46",{"_index":2244,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4619eff8d841",{"_index":1303,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["462a",{"_index":2399,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["462b",{"_index":1485,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["462f",{"_index":2137,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["465",{"_index":3048,"title":{},"name":{},"text":{"33":{},"35":{},"44":{},"99":{},"102":{},"109":{},"167":{},"170":{},"179":{}},"component":{}}],["4684",{"_index":1428,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["46a6",{"_index":1464,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["46bb4e50e7fb",{"_index":2402,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["46c2",{"_index":1856,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["47",{"_index":2248,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["470e",{"_index":1917,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["471a",{"_index":1318,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4736",{"_index":566,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["4757",{"_index":1441,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["477a",{"_index":4864,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["4794",{"_index":1455,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["47c6",{"_index":1737,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["47da",{"_index":2301,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["47e4",{"_index":2147,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["48",{"_index":2326,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4892",{"_index":1309,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["49",{"_index":2337,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["491a",{"_index":1288,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4923",{"_index":1848,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["498",{"_index":3057,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["4a",{"_index":1831,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4a61",{"_index":1999,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4a97",{"_index":2281,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4ad2",{"_index":2124,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4b2b",{"_index":1810,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4b39",{"_index":2191,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4b50",{"_index":1881,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4b5c",{"_index":2197,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4bd6",{"_index":1372,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4c08",{"_index":5945,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["4c1a",{"_index":2218,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4c1d",{"_index":1980,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4c4c4c",{"_index":3124,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["4c79",{"_index":2360,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4c7f",{"_index":1989,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4cad",{"_index":2256,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4d02",{"_index":1874,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4dd3",{"_index":2165,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4e22",{"_index":2270,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4e4e",{"_index":1478,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4e4f",{"_index":2306,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4e61",{"_index":1281,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4e86",{"_index":1749,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4e90",{"_index":2296,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4e93",{"_index":2291,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4ee8",{"_index":1295,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4ef8",{"_index":1773,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4f11",{"_index":1955,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4f3c",{"_index":2142,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4f97",{"_index":1934,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4fa1",{"_index":4668,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["4fdd",{"_index":1719,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4fe0",{"_index":5349,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["4fef",{"_index":1972,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["4ff4",{"_index":1744,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["5",{"_index":105,"title":{},"name":{},"text":{"1":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"27":{},"29":{},"33":{},"35":{},"36":{},"39":{},"40":{},"43":{},"45":{},"46":{},"47":{},"48":{},"54":{},"56":{},"58":{},"60":{},"61":{},"63":{},"64":{},"66":{},"67":{},"82":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"99":{},"102":{},"103":{},"106":{},"107":{},"110":{},"112":{},"113":{},"114":{},"115":{},"121":{},"123":{},"126":{},"128":{},"129":{},"131":{},"132":{},"134":{},"135":{},"150":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"163":{},"167":{},"168":{},"170":{},"174":{},"175":{},"178":{},"180":{},"181":{},"182":{},"183":{},"189":{},"191":{},"194":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["5'900",{"_index":3647,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["5.2",{"_index":104,"title":{},"name":{},"text":{"1":{},"67":{},"135":{}},"component":{}}],["5.2.0",{"_index":5441,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["50",{"_index":2338,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["500",{"_index":4848,"title":{},"name":{},"text":{"53":{},"59":{},"120":{},"127":{},"188":{},"195":{}},"component":{}}],["5000",{"_index":3770,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["5000m",{"_index":4066,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["502",{"_index":6429,"title":{},"name":{},"text":{"160":{}},"component":{}}],["502c",{"_index":2208,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["503",{"_index":6431,"title":{},"name":{},"text":{"160":{}},"component":{}}],["504",{"_index":6433,"title":{},"name":{},"text":{"160":{}},"component":{}}],["51",{"_index":2340,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["512",{"_index":3901,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["52",{"_index":2366,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["53",{"_index":2378,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["537",{"_index":3050,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["54",{"_index":2380,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["55",{"_index":2390,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["55e08492f65f",{"_index":4843,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["56",{"_index":2397,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["57",{"_index":2405,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["572633b9d4ef",{"_index":1739,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["59",{"_index":3062,"title":{},"name":{},"text":{"33":{},"35":{},"39":{},"99":{},"102":{},"106":{},"167":{},"170":{},"174":{}},"component":{}}],["5999",{"_index":3772,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["5a",{"_index":1280,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["5bd5",{"_index":2369,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["5c08b56ce998",{"_index":2348,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["5e305af5e6a9",{"_index":2272,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["5f5038b1d47c",{"_index":2167,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["6",{"_index":103,"title":{},"name":{},"text":{"1":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"27":{},"29":{},"33":{},"35":{},"36":{},"39":{},"40":{},"43":{},"46":{},"47":{},"48":{},"54":{},"56":{},"58":{},"60":{},"63":{},"64":{},"66":{},"67":{},"82":{},"83":{},"84":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"99":{},"102":{},"103":{},"106":{},"107":{},"110":{},"113":{},"114":{},"115":{},"121":{},"123":{},"126":{},"128":{},"131":{},"132":{},"134":{},"135":{},"150":{},"151":{},"152":{},"156":{},"157":{},"158":{},"163":{},"167":{},"168":{},"170":{},"174":{},"175":{},"178":{},"181":{},"182":{},"183":{},"189":{},"191":{},"194":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["6,7,8,9",{"_index":5864,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["6.0",{"_index":3137,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["6.22.2",{"_index":607,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"26":{}},"component":{}}],["6.3.20",{"_index":2590,"title":{},"name":{},"text":{"26":{}},"component":{}}],["6.4.1",{"_index":6125,"title":{},"name":{},"text":{"92":{}},"component":{}}],["60",{"_index":3684,"title":{},"name":{},"text":{"39":{},"44":{},"106":{},"109":{},"174":{},"179":{}},"component":{}}],["601e",{"_index":1778,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["6098edad8416",{"_index":1283,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["60a744e4467a",{"_index":1769,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["615",{"_index":3058,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["63",{"_index":2599,"title":{},"name":{},"text":{"26":{}},"component":{}}],["64",{"_index":2077,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["65535",{"_index":4020,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["66b1",{"_index":1371,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["66cb7ce43fc3",{"_index":2215,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["66e8",{"_index":1287,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["6731",{"_index":1440,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["69",{"_index":2924,"title":{},"name":{},"text":{"27":{},"45":{},"112":{},"180":{}},"component":{}}],["69adca724b90",{"_index":1290,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["6a8a0aae925f",{"_index":2283,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["6c04",{"_index":2255,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["6eb8",{"_index":1797,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["7",{"_index":102,"title":{},"name":{},"text":{"1":{},"16":{},"19":{},"22":{},"23":{},"24":{},"27":{},"29":{},"36":{},"39":{},"40":{},"43":{},"46":{},"48":{},"54":{},"56":{},"60":{},"63":{},"64":{},"66":{},"67":{},"82":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"103":{},"106":{},"107":{},"110":{},"113":{},"115":{},"121":{},"123":{},"128":{},"131":{},"132":{},"134":{},"135":{},"150":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"163":{},"168":{},"174":{},"175":{},"178":{},"181":{},"183":{},"189":{},"191":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["7.16.0",{"_index":6100,"title":{},"name":{},"text":{"83":{},"87":{},"89":{},"92":{},"151":{},"155":{},"157":{}},"component":{}}],["7.16.5",{"_index":2595,"title":{},"name":{},"text":{"26":{},"46":{}},"component":{}}],["7034",{"_index":4215,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["71",{"_index":2927,"title":{},"name":{},"text":{"27":{},"45":{},"112":{},"180":{}},"component":{}}],["7200",{"_index":4428,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["737373",{"_index":3125,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["73e21a7415d8",{"_index":1812,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["7464",{"_index":2305,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["75",{"_index":3067,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["750",{"_index":5101,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["759",{"_index":3049,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["759f",{"_index":4667,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["77b2",{"_index":2123,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["78fd1e6bb69d",{"_index":1487,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["7a62",{"_index":1484,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["7b6c",{"_index":1855,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["7b72",{"_index":5348,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["7d401e64702c",{"_index":2068,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["7e8588",{"_index":4965,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["7f806284bdb3",{"_index":2126,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8",{"_index":101,"title":{},"name":{},"text":{"1":{},"16":{},"19":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"37":{},"39":{},"40":{},"43":{},"46":{},"48":{},"54":{},"56":{},"60":{},"63":{},"64":{},"66":{},"67":{},"82":{},"84":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"104":{},"106":{},"107":{},"110":{},"113":{},"115":{},"121":{},"123":{},"128":{},"131":{},"132":{},"134":{},"135":{},"150":{},"152":{},"156":{},"157":{},"158":{},"163":{},"169":{},"174":{},"175":{},"178":{},"181":{},"183":{},"189":{},"191":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["8.0",{"_index":3150,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["8.1.0",{"_index":2586,"title":{},"name":{},"text":{"26":{}},"component":{}}],["8.10.0",{"_index":2592,"title":{},"name":{},"text":{"26":{},"46":{}},"component":{}}],["8.27.0",{"_index":6126,"title":{},"name":{},"text":{"92":{},"113":{},"181":{}},"component":{}}],["8080",{"_index":761,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["81",{"_index":3054,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["8124",{"_index":2166,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["819aa491db27",{"_index":2362,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["831d",{"_index":1289,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["842c",{"_index":1780,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8476",{"_index":1956,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["84d4",{"_index":2217,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["85b4",{"_index":1282,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["85f9",{"_index":1308,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["86ac",{"_index":5944,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["8845",{"_index":1743,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8859",{"_index":4999,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["8923",{"_index":1832,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["898f",{"_index":1768,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["89cbf905eb2",{"_index":1957,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8ad7",{"_index":1799,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8bca",{"_index":2371,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8c84",{"_index":1857,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8d5cc1b786a9",{"_index":2258,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8dfd",{"_index":1745,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8e57",{"_index":2065,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["8f00",{"_index":1918,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9",{"_index":100,"title":{},"name":{},"text":{"1":{},"16":{},"19":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"39":{},"40":{},"43":{},"46":{},"47":{},"48":{},"53":{},"54":{},"60":{},"63":{},"64":{},"66":{},"67":{},"82":{},"84":{},"88":{},"89":{},"90":{},"95":{},"106":{},"107":{},"110":{},"113":{},"114":{},"115":{},"120":{},"121":{},"128":{},"131":{},"132":{},"134":{},"135":{},"150":{},"152":{},"156":{},"157":{},"158":{},"163":{},"174":{},"175":{},"178":{},"181":{},"182":{},"183":{},"188":{},"189":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["9.0",{"_index":830,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["9.1",{"_index":2921,"title":{},"name":{},"text":{"27":{}},"component":{}}],["9.1.1",{"_index":6123,"title":{},"name":{},"text":{"92":{}},"component":{}}],["90.cgi",{"_index":892,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["9000",{"_index":5743,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["90c28c68c6ce",{"_index":1876,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["914e58f7b82d",{"_index":2139,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9234",{"_index":1479,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["92e7",{"_index":1720,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["93c7d1aeded",{"_index":1374,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["93f3",{"_index":1811,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["94",{"_index":3046,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["94654c",{"_index":3176,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["94ccf9b9db59",{"_index":1927,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["95c8",{"_index":4865,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["9635",{"_index":1383,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["965a",{"_index":2271,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["96a2",{"_index":1310,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9745",{"_index":1850,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9769",{"_index":5946,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["976e",{"_index":1988,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9784",{"_index":2181,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["990c",{"_index":1465,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9953",{"_index":4842,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["9963",{"_index":1296,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["996f",{"_index":2192,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["99892bb4459f",{"_index":1480,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["999999",{"_index":3126,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["99ec",{"_index":1486,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9]+)*(\\\\.[a",{"_index":2073,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9a96",{"_index":1774,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9a99",{"_index":2292,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9b0d",{"_index":1912,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9cae",{"_index":2148,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9d70",{"_index":4661,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["9d8a",{"_index":2276,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9daa",{"_index":1924,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9e785c1477ac",{"_index":2288,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9f42",{"_index":1867,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["9f450dc7ff9b",{"_index":1789,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["_",{"_index":5239,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["_a",{"_index":2070,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["_createcont",{"_index":6165,"title":{},"name":{},"text":{"92":{}},"component":{}}],["_createdetailform",{"_index":2748,"title":{},"name":{},"text":{"26":{}},"component":{}}],["_createdetailt",{"_index":2750,"title":{},"name":{},"text":{"26":{}},"component":{}}],["_createfiltersupport",{"_index":5164,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["_createkeystrokecontext",{"_index":5147,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["_createmodel",{"_index":6164,"title":{},"name":{},"text":{"92":{}},"component":{}}],["_createt",{"_index":2749,"title":{},"name":{},"text":{"26":{}},"component":{}}],["_ensuredetailform",{"_index":2753,"title":{},"name":{},"text":{"26":{}},"component":{}}],["_init",{"_index":2742,"title":{},"name":{},"text":{"26":{},"48":{},"60":{},"115":{},"128":{},"183":{},"196":{}},"component":{}}],["_init(model",{"_index":954,"title":{},"name":{},"text":{"20":{},"22":{},"48":{},"59":{},"86":{},"88":{},"100":{},"115":{},"127":{},"154":{},"156":{},"171":{},"183":{},"195":{}},"component":{}}],["_initdetailform(form",{"_index":2743,"title":{},"name":{},"text":{"26":{}},"component":{}}],["_initdetailt",{"_index":2752,"title":{},"name":{},"text":{"26":{}},"component":{}}],["_initdetailtable(t",{"_index":2744,"title":{},"name":{},"text":{"26":{}},"component":{}}],["_initt",{"_index":2751,"title":{},"name":{},"text":{"26":{}},"component":{}}],["_installextens",{"_index":4618,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["_jsonmodel",{"_index":939,"title":{},"name":{},"text":{"20":{},"22":{},"46":{},"48":{},"60":{},"86":{},"88":{},"100":{},"113":{},"115":{},"128":{},"154":{},"156":{},"171":{},"181":{},"183":{},"196":{}},"component":{}}],["_load",{"_index":4734,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["_oncardmousedown",{"_index":3251,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["_preparewidgetproperti",{"_index":5246,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["_preserveonpropertychangeproperti",{"_index":5247,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["_remov",{"_index":3249,"title":{},"name":{},"text":{"36":{},"59":{},"60":{},"103":{},"127":{},"128":{},"168":{},"195":{},"196":{}},"component":{}}],["_removexi",{"_index":5248,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["_render",{"_index":3213,"title":{},"name":{},"text":{"36":{},"59":{},"60":{},"103":{},"127":{},"128":{},"168":{},"195":{},"196":{}},"component":{}}],["_renderbackimag",{"_index":3247,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["_rendercont",{"_index":6152,"title":{},"name":{},"text":{"92":{}},"component":{}}],["_renderflip",{"_index":3255,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["_renderfrontimag",{"_index":3245,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["_renderlabelvis",{"_index":5240,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["_rendermodel",{"_index":6166,"title":{},"name":{},"text":{"92":{}},"component":{}}],["_renderproperti",{"_index":3240,"title":{},"name":{},"text":{"36":{},"59":{},"103":{},"127":{},"168":{},"195":{}},"component":{}}],["_rendertextfilteren",{"_index":5160,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["_renderwidget",{"_index":6151,"title":{},"name":{},"text":{"92":{}},"component":{}}],["_save",{"_index":4738,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["_setlabelvis",{"_index":5243,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["_setproperti",{"_index":5238,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["_setpropertynam",{"_index":5242,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["_type",{"_index":2777,"title":{},"name":{},"text":{"26":{},"64":{},"131":{},"199":{}},"component":{}}],["_typevers",{"_index":5726,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["_valid",{"_index":4741,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["a009",{"_index":2219,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a057",{"_index":2214,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a07",{"_index":2307,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a2e9",{"_index":2287,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a442",{"_index":1981,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a5b2",{"_index":2282,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a693",{"_index":2184,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a69d",{"_index":1973,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a6bc",{"_index":1349,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a799",{"_index":1442,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a7acad",{"_index":4964,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["a7f5",{"_index":567,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["a826",{"_index":1738,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a889",{"_index":2186,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a8ed01fbf664",{"_index":1751,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a907",{"_index":2198,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["a9d7",{"_index":1373,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["aacdbb4788d3",{"_index":1443,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abb6",{"_index":1926,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abc4",{"_index":1302,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abil",{"_index":4918,"title":{},"name":{},"text":{"55":{},"58":{},"122":{},"126":{},"190":{},"194":{}},"component":{}}],["abnorm",{"_index":3382,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["abort",{"_index":3989,"title":{},"name":{},"text":{"40":{},"50":{},"63":{},"107":{},"117":{},"132":{},"175":{},"185":{},"200":{}},"component":{}}],["abov",{"_index":384,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"22":{},"23":{},"26":{},"29":{},"34":{},"40":{},"43":{},"46":{},"48":{},"50":{},"54":{},"56":{},"60":{},"61":{},"63":{},"66":{},"73":{},"74":{},"76":{},"78":{},"79":{},"88":{},"90":{},"92":{},"95":{},"101":{},"107":{},"110":{},"113":{},"115":{},"117":{},"121":{},"123":{},"128":{},"129":{},"132":{},"134":{},"141":{},"142":{},"144":{},"146":{},"147":{},"156":{},"158":{},"163":{},"172":{},"175":{},"178":{},"181":{},"183":{},"185":{},"189":{},"191":{},"196":{},"197":{},"200":{},"202":{}},"component":{}}],["absolut",{"_index":3264,"title":{},"name":{},"text":{"36":{},"40":{},"103":{},"107":{},"168":{},"175":{}},"component":{}}],["abstract",{"_index":1366,"title":{"64-13":{},"131-13":{},"199-13":{}},"name":{},"text":{"23":{},"27":{},"29":{},"38":{},"40":{},"48":{},"63":{},"64":{},"66":{},"90":{},"95":{},"105":{},"107":{},"115":{},"131":{},"132":{},"134":{},"158":{},"163":{},"173":{},"175":{},"183":{},"199":{},"200":{},"202":{}},"component":{}}],["abstractaccesscontrolservic",{"_index":4276,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["abstractaddressbox",{"_index":2237,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractbigdecimalfield",{"_index":4664,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["abstractbooleanconfigproperti",{"_index":1536,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractbrowserfield#postmessag",{"_index":2731,"title":{},"name":{},"text":{"26":{}},"component":{}}],["abstractcancelbutton",{"_index":1791,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractchart",{"_index":3031,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["abstractchartfield",{"_index":3029,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["abstractcod",{"_index":1860,"title":{},"name":{},"text":{"23":{},"62":{},"90":{},"130":{},"158":{},"198":{}},"component":{}}],["abstractcodetyp",{"_index":381,"title":{},"name":{},"text":{"7":{},"23":{},"48":{},"62":{},"73":{},"90":{},"115":{},"130":{},"141":{},"158":{},"183":{},"198":{}},"component":{}}],["abstractcodetypeextens",{"_index":4633,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["abstractcompositeid",{"_index":6310,"title":{},"name":{},"text":{"93":{}},"component":{}}],["abstractdataobjectsignaturetest",{"_index":5749,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["abstractdatefield",{"_index":1929,"title":{},"name":{},"text":{"23":{},"48":{},"90":{},"115":{},"158":{},"183":{}},"component":{}}],["abstractderbysqlservic",{"_index":1551,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractdesktop",{"_index":1284,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractdesktop#getconfiguredlogoid",{"_index":2629,"title":{},"name":{},"text":{"26":{}},"component":{}}],["abstractdesktop#settheme(str",{"_index":4947,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["abstractdynamicnlstextproviderservic",{"_index":4989,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["abstractemailfield",{"_index":2236,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractexampleentitydo",{"_index":5788,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["abstractform",{"_index":389,"title":{},"name":{},"text":{"8":{},"23":{},"29":{},"48":{},"74":{},"90":{},"95":{},"115":{},"142":{},"158":{},"163":{},"183":{}},"component":{}}],["abstractformextens",{"_index":4690,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["abstractformfielddata",{"_index":4679,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["abstractformhandl",{"_index":2026,"title":{},"name":{},"text":{"23":{},"48":{},"90":{},"115":{},"158":{},"183":{}},"component":{}}],["abstractformhandlerextens",{"_index":4702,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["abstractformmenu",{"_index":1269,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractgroupbox",{"_index":1741,"title":{},"name":{},"text":{"23":{},"53":{},"90":{},"120":{},"158":{},"188":{}},"component":{}}],["abstractgroupboxextens",{"_index":4635,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["abstracthierachicallookuprowdo",{"_index":2943,"title":{},"name":{},"text":{"27":{}},"component":{}}],["abstracthierarchicallookuprowdo",{"_index":2942,"title":{},"name":{},"text":{"27":{}},"component":{}}],["abstracthtmlfield",{"_index":2200,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstracticons.applicationlogo",{"_index":2640,"title":{},"name":{},"text":{"26":{}},"component":{}}],["abstractid",{"_index":6205,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractidstructuretest",{"_index":6221,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractimagefield",{"_index":1885,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractimagefieldextens",{"_index":4636,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["abstractjsform",{"_index":6347,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["abstractlabelfield",{"_index":4253,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["abstractlongconfigproperti",{"_index":3820,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["abstractlookuprowdo",{"_index":2941,"title":{},"name":{},"text":{"27":{}},"component":{}}],["abstractlookupservic",{"_index":415,"title":{},"name":{},"text":{"10":{},"76":{},"144":{}},"component":{}}],["abstractmenu",{"_index":1268,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractnotesbox",{"_index":2238,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractobservablenotificationhandl",{"_index":5329,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["abstractokbutton",{"_index":1783,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractoutlin",{"_index":570,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["abstractoutlineviewbutton",{"_index":1291,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractpagewithnod",{"_index":431,"title":{},"name":{},"text":{"12":{},"23":{},"29":{},"78":{},"90":{},"95":{},"146":{},"158":{},"163":{}},"component":{}}],["abstractpagewithnodes.execcreatechildpag",{"_index":2412,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractpagewitht",{"_index":429,"title":{},"name":{},"text":{"12":{},"23":{},"29":{},"78":{},"90":{},"95":{},"146":{},"158":{},"163":{}},"component":{}}],["abstractpagewithtable.execcreatechildpag",{"_index":2411,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractpermiss",{"_index":4279,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["abstractpermission#evalpermiss",{"_index":4301,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["abstractradiobuttongroup",{"_index":1938,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractrestclienthelp",{"_index":6011,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["abstractrestrequestcancellationservletfilt",{"_index":6093,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["abstractrootid",{"_index":6203,"title":{},"name":{},"text":{"92":{},"93":{}},"component":{}}],["abstractsequencebox",{"_index":1984,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractsmartcolumn",{"_index":1449,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractsmartfield",{"_index":2003,"title":{},"name":{},"text":{"23":{},"34":{},"62":{},"90":{},"101":{},"130":{},"158":{},"172":{},"198":{}},"component":{}}],["abstractsqllookupservic",{"_index":2334,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractsqlservic",{"_index":1548,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractstringcolumn",{"_index":1431,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractstringconfigproperti",{"_index":1543,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractstringfield",{"_index":1878,"title":{},"name":{},"text":{"23":{},"48":{},"53":{},"90":{},"115":{},"120":{},"158":{},"183":{},"188":{}},"component":{}}],["abstractstringfieldextens",{"_index":4632,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["abstractstringid",{"_index":6222,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractstringidstructuretest",{"_index":6226,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractsubjectconfigproperti",{"_index":1545,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractt",{"_index":1387,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstracttabbox",{"_index":1752,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstracttypevers",{"_index":5745,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["abstracturlimagefield",{"_index":2121,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstracturlimagefielddata",{"_index":2120,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstracturlimagefielddata.class",{"_index":2127,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["abstractuuid",{"_index":5916,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["abstractuuidstructuretest",{"_index":6225,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractvaluefielddata",{"_index":4684,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["abstractwebservicecli",{"_index":5582,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["abstractwidgetpopup#createcont",{"_index":6160,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractwidgetpopup#createwidget",{"_index":6159,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractwidgetpopup#getconfiguredcont",{"_index":6158,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractwidgetpopup#getconfiguredwidget",{"_index":6157,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractwidgetpopup#setcont",{"_index":6162,"title":{},"name":{},"text":{"92":{}},"component":{}}],["abstractwidgetpopup#setwidget",{"_index":6161,"title":{},"name":{},"text":{"92":{}},"component":{}}],["ac41e9032107",{"_index":1775,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ac5a",{"_index":1788,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["aca5",{"_index":1766,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["accent",{"_index":4922,"title":{"56-3":{},"123-3":{},"191-3":{}},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["accept",{"_index":617,"title":{},"name":{},"text":{"17":{},"19":{},"21":{},"23":{},"24":{},"29":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{},"58":{},"59":{},"63":{},"64":{},"66":{},"83":{},"84":{},"87":{},"89":{},"90":{},"95":{},"105":{},"106":{},"107":{},"109":{},"110":{},"113":{},"126":{},"127":{},"131":{},"132":{},"134":{},"151":{},"152":{},"155":{},"157":{},"158":{},"163":{},"173":{},"174":{},"175":{},"178":{},"179":{},"181":{},"194":{},"195":{},"199":{},"200":{},"202":{}},"component":{}}],["accept(mediatype.application_json",{"_index":6039,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["accept(til",{"_index":5127,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["acceptedtext",{"_index":5124,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["access",{"_index":180,"title":{"4-2":{},"23-17":{},"62-6":{},"64-12":{},"64-18":{},"71-2":{},"90-17":{},"130-6":{},"131-12":{},"131-18":{},"139-2":{},"158-17":{},"198-6":{},"199-12":{},"199-18":{}},"name":{},"text":{"4":{},"5":{},"11":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"32":{},"37":{},"39":{},"40":{},"41":{},"43":{},"46":{},"48":{},"53":{},"56":{},"57":{},"58":{},"60":{},"63":{},"64":{},"65":{},"70":{},"71":{},"77":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"93":{},"95":{},"98":{},"104":{},"106":{},"107":{},"110":{},"111":{},"113":{},"115":{},"120":{},"123":{},"125":{},"126":{},"128":{},"131":{},"132":{},"133":{},"138":{},"139":{},"145":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"166":{},"169":{},"174":{},"175":{},"176":{},"178":{},"181":{},"183":{},"188":{},"191":{},"192":{},"194":{},"196":{},"199":{},"200":{},"201":{}},"component":{}}],["access.check(new",{"_index":2043,"title":{},"name":{},"text":{"23":{},"43":{},"90":{},"110":{},"158":{},"178":{}},"component":{}}],["access.checkallandthrow(new",{"_index":4288,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["access.checkandthrow(new",{"_index":4282,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["access.checkanyandthrow(new",{"_index":4289,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["accesscontrolservic",{"_index":2015,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["accessforbiddenexcept",{"_index":4283,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["accessforbiddenexception(texts.get(\"youarenotallowedtoreadthisdata",{"_index":4281,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["accessor",{"_index":4526,"title":{},"name":{},"text":{"46":{},"64":{},"113":{},"131":{},"181":{},"199":{}},"component":{}}],["accid",{"_index":4088,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["accident",{"_index":4236,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["accomplish",{"_index":1166,"title":{},"name":{},"text":{"22":{},"29":{},"88":{},"95":{},"156":{},"163":{}},"component":{}}],["accord",{"_index":378,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"19":{},"23":{},"26":{},"29":{},"38":{},"39":{},"40":{},"44":{},"46":{},"47":{},"58":{},"59":{},"60":{},"63":{},"64":{},"66":{},"73":{},"74":{},"76":{},"78":{},"79":{},"84":{},"90":{},"92":{},"95":{},"105":{},"106":{},"107":{},"109":{},"113":{},"114":{},"126":{},"127":{},"128":{},"131":{},"132":{},"134":{},"141":{},"142":{},"144":{},"146":{},"147":{},"152":{},"158":{},"163":{},"173":{},"174":{},"175":{},"179":{},"181":{},"182":{},"194":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["accordingli",{"_index":748,"title":{},"name":{},"text":{"19":{},"22":{},"23":{},"26":{},"41":{},"53":{},"63":{},"66":{},"84":{},"88":{},"90":{},"92":{},"111":{},"120":{},"132":{},"134":{},"152":{},"156":{},"158":{},"176":{},"188":{},"200":{},"202":{}},"component":{}}],["account",{"_index":275,"title":{},"name":{},"text":{"4":{},"23":{},"29":{},"71":{},"90":{},"95":{},"139":{},"158":{},"163":{}},"component":{}}],["accur",{"_index":1245,"title":{},"name":{},"text":{"23":{},"26":{},"90":{},"158":{}},"component":{}}],["achiev",{"_index":917,"title":{"23-8":{},"23-16":{},"23-24":{},"23-31":{},"23-38":{},"23-40":{},"23-45":{},"90-8":{},"90-16":{},"90-24":{},"90-31":{},"90-38":{},"90-40":{},"90-45":{},"158-8":{},"158-16":{},"158-24":{},"158-31":{},"158-38":{},"158-40":{},"158-45":{}},"name":{},"text":{"20":{},"21":{},"23":{},"24":{},"33":{},"35":{},"39":{},"40":{},"48":{},"50":{},"52":{},"56":{},"61":{},"63":{},"86":{},"87":{},"89":{},"90":{},"99":{},"102":{},"106":{},"107":{},"115":{},"117":{},"119":{},"123":{},"129":{},"132":{},"154":{},"155":{},"157":{},"158":{},"167":{},"170":{},"174":{},"175":{},"183":{},"185":{},"187":{},"191":{},"197":{},"200":{}},"component":{}}],["acknowledg",{"_index":1247,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["acquir",{"_index":3621,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["act",{"_index":1020,"title":{},"name":{},"text":{"21":{},"63":{},"87":{},"132":{},"155":{},"200":{}},"component":{}}],["action",{"_index":181,"title":{"4-4":{},"27-4":{},"29-27":{},"71-4":{},"95-27":{},"139-4":{},"163-27":{}},"name":{},"text":{"4":{},"5":{},"23":{},"26":{},"27":{},"29":{},"39":{},"40":{},"41":{},"54":{},"60":{},"66":{},"70":{},"71":{},"90":{},"92":{},"95":{},"106":{},"107":{},"111":{},"121":{},"128":{},"134":{},"138":{},"139":{},"158":{},"163":{},"174":{},"175":{},"176":{},"189":{},"196":{},"202":{}},"component":{}}],["activ",{"_index":373,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"19":{},"23":{},"26":{},"27":{},"29":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"50":{},"53":{},"56":{},"57":{},"58":{},"59":{},"63":{},"66":{},"73":{},"74":{},"76":{},"78":{},"79":{},"84":{},"90":{},"95":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"117":{},"120":{},"123":{},"125":{},"126":{},"127":{},"132":{},"134":{},"141":{},"142":{},"144":{},"146":{},"147":{},"152":{},"158":{},"163":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"185":{},"188":{},"191":{},"192":{},"194":{},"195":{},"200":{},"202":{}},"component":{}}],["actual",{"_index":835,"title":{},"name":{},"text":{"19":{},"23":{},"26":{},"36":{},"39":{},"40":{},"46":{},"49":{},"50":{},"53":{},"55":{},"60":{},"63":{},"64":{},"66":{},"84":{},"90":{},"93":{},"103":{},"106":{},"107":{},"113":{},"116":{},"117":{},"120":{},"122":{},"124":{},"128":{},"131":{},"132":{},"134":{},"152":{},"158":{},"168":{},"174":{},"175":{},"181":{},"184":{},"185":{},"188":{},"190":{},"193":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["ad",{"_index":305,"title":{"23-9":{},"23-13":{},"23-15":{},"23-18":{},"23-25":{},"23-28":{},"23-29":{},"23-36":{},"23-39":{},"29-25":{},"64-21":{},"90-9":{},"90-13":{},"90-15":{},"90-18":{},"90-25":{},"90-28":{},"90-29":{},"90-36":{},"90-39":{},"95-25":{},"131-21":{},"158-9":{},"158-13":{},"158-15":{},"158-18":{},"158-25":{},"158-28":{},"158-29":{},"158-36":{},"158-39":{},"163-25":{},"199-21":{}},"name":{},"text":{"5":{},"6":{},"11":{},"21":{},"22":{},"23":{},"26":{},"29":{},"32":{},"33":{},"35":{},"39":{},"40":{},"43":{},"46":{},"48":{},"49":{},"51":{},"52":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"70":{},"72":{},"77":{},"87":{},"88":{},"90":{},"93":{},"95":{},"98":{},"99":{},"102":{},"106":{},"107":{},"110":{},"113":{},"115":{},"116":{},"118":{},"119":{},"122":{},"123":{},"124":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"138":{},"140":{},"145":{},"155":{},"156":{},"158":{},"163":{},"166":{},"167":{},"170":{},"174":{},"175":{},"178":{},"181":{},"183":{},"184":{},"186":{},"187":{},"190":{},"191":{},"193":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["ad6d",{"_index":1294,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ad89",{"_index":2345,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["adapt",{"_index":718,"title":{"53-10":{},"63-40":{},"120-10":{},"132-40":{},"160-10":{},"188-10":{},"200-40":{}},"name":{},"text":{"19":{},"23":{},"26":{},"39":{},"48":{},"53":{},"63":{},"84":{},"90":{},"93":{},"106":{},"115":{},"120":{},"132":{},"152":{},"158":{},"160":{},"174":{},"183":{},"188":{},"200":{}},"component":{}}],["adapter’",{"_index":5634,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["add",{"_index":133,"title":{"9-1":{},"17-3":{},"20-4":{},"21-4":{},"24-4":{},"29-32":{},"33-3":{},"35-3":{},"36-2":{},"36-3":{},"36-4":{},"36-7":{},"53-3":{},"75-1":{},"83-3":{},"86-4":{},"87-4":{},"89-4":{},"95-32":{},"99-3":{},"102-3":{},"103-2":{},"103-3":{},"103-4":{},"103-7":{},"120-3":{},"143-1":{},"151-3":{},"154-4":{},"155-4":{},"157-4":{},"163-32":{},"167-3":{},"168-2":{},"168-3":{},"168-4":{},"168-7":{},"170-3":{},"188-3":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"9":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"43":{},"46":{},"48":{},"52":{},"53":{},"55":{},"56":{},"58":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"69":{},"70":{},"71":{},"72":{},"75":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"99":{},"102":{},"103":{},"104":{},"105":{},"107":{},"110":{},"113":{},"115":{},"119":{},"120":{},"122":{},"123":{},"124":{},"126":{},"128":{},"129":{},"131":{},"132":{},"133":{},"134":{},"137":{},"138":{},"139":{},"140":{},"143":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"167":{},"168":{},"169":{},"170":{},"173":{},"175":{},"178":{},"181":{},"183":{},"187":{},"188":{},"190":{},"191":{},"193":{},"194":{},"196":{},"197":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["add/chang",{"_index":559,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["add/remove/renam",{"_index":5739,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["addcssclass(\"mobil",{"_index":4873,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["added/imported/export",{"_index":4685,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["addfilt",{"_index":2844,"title":{},"name":{},"text":{"26":{}},"component":{}}],["addfilter(filt",{"_index":2836,"title":{},"name":{},"text":{"26":{},"59":{},"127":{},"195":{}},"component":{}}],["addit",{"_index":221,"title":{"5-1":{},"23-10":{},"40-20":{},"70-1":{},"90-10":{},"107-20":{},"138-1":{},"158-10":{},"175-20":{}},"name":{},"text":{"4":{},"5":{},"6":{},"9":{},"11":{},"14":{},"18":{},"22":{},"23":{},"26":{},"29":{},"33":{},"35":{},"39":{},"41":{},"44":{},"46":{},"49":{},"51":{},"56":{},"57":{},"59":{},"60":{},"61":{},"64":{},"65":{},"66":{},"70":{},"71":{},"72":{},"75":{},"77":{},"80":{},"85":{},"88":{},"90":{},"93":{},"95":{},"99":{},"102":{},"106":{},"109":{},"111":{},"113":{},"116":{},"118":{},"123":{},"124":{},"125":{},"127":{},"128":{},"129":{},"131":{},"133":{},"134":{},"138":{},"139":{},"140":{},"143":{},"145":{},"148":{},"153":{},"156":{},"158":{},"163":{},"167":{},"170":{},"174":{},"176":{},"179":{},"181":{},"184":{},"186":{},"191":{},"192":{},"193":{},"195":{},"196":{},"197":{},"199":{},"201":{},"202":{}},"component":{}}],["addition",{"_index":929,"title":{},"name":{},"text":{"20":{},"22":{},"24":{},"38":{},"39":{},"41":{},"44":{},"46":{},"63":{},"64":{},"66":{},"86":{},"88":{},"89":{},"105":{},"106":{},"109":{},"111":{},"113":{},"131":{},"132":{},"134":{},"154":{},"156":{},"157":{},"173":{},"174":{},"176":{},"179":{},"181":{},"199":{},"200":{},"202":{}},"component":{}}],["additionalsessionproperti",{"_index":4369,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["additionaltablerowdata",{"_index":5063,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["address",{"_index":788,"title":{},"name":{},"text":{"19":{},"23":{},"40":{},"41":{},"43":{},"44":{},"46":{},"61":{},"63":{},"84":{},"90":{},"107":{},"109":{},"110":{},"111":{},"113":{},"129":{},"132":{},"152":{},"158":{},"175":{},"176":{},"178":{},"179":{},"181":{},"197":{},"200":{}},"component":{}}],["addressbox",{"_index":1764,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["addressbox.c",{"_index":2241,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["addressbox.countri",{"_index":2242,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["addressbox.street",{"_index":2240,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["addtilefilter(filt",{"_index":2840,"title":{},"name":{},"text":{"26":{}},"component":{}}],["addtorecipient(beans.get(mailparticipant.class).withname(\"recipient\").withemail(\"somebody@example.com",{"_index":4410,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["addvalid",{"_index":5045,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["adjust",{"_index":650,"title":{"26-24":{},"26-39":{},"53-6":{},"120-6":{},"188-6":{}},"name":{},"text":{"18":{},"20":{},"22":{},"23":{},"26":{},"46":{},"48":{},"53":{},"56":{},"85":{},"86":{},"88":{},"90":{},"92":{},"113":{},"115":{},"120":{},"123":{},"124":{},"153":{},"154":{},"156":{},"158":{},"181":{},"183":{},"188":{},"191":{},"193":{}},"component":{}}],["admin",{"_index":812,"title":{},"name":{},"text":{"19":{},"43":{},"84":{},"110":{},"152":{},"178":{}},"component":{}}],["adoptium",{"_index":2473,"title":{},"name":{},"text":{"26":{}},"component":{}}],["advanc",{"_index":4923,"title":{"56-4":{},"123-4":{},"191-4":{}},"name":{},"text":{"62":{},"63":{},"130":{},"132":{},"198":{},"200":{}},"component":{}}],["advantag",{"_index":907,"title":{},"name":{},"text":{"20":{},"23":{},"39":{},"53":{},"56":{},"60":{},"65":{},"86":{},"90":{},"106":{},"120":{},"123":{},"128":{},"133":{},"154":{},"158":{},"174":{},"188":{},"191":{},"196":{},"201":{}},"component":{}}],["advic",{"_index":1401,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ae43",{"_index":1319,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["aeca",{"_index":2210,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["af9d",{"_index":1971,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["affect",{"_index":2602,"title":{},"name":{},"text":{"26":{},"92":{}},"component":{}}],["afterward",{"_index":616,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"26":{},"58":{},"63":{},"83":{},"87":{},"89":{},"126":{},"132":{},"151":{},"155":{},"157":{},"194":{},"200":{}},"component":{}}],["ag",{"_index":3879,"title":{},"name":{},"text":{"40":{},"57":{},"107":{},"125":{},"175":{},"192":{}},"component":{}}],["again",{"_index":752,"title":{},"name":{},"text":{"19":{},"21":{},"22":{},"23":{},"26":{},"40":{},"44":{},"46":{},"58":{},"60":{},"66":{},"84":{},"87":{},"88":{},"90":{},"107":{},"109":{},"113":{},"126":{},"128":{},"134":{},"152":{},"155":{},"156":{},"158":{},"175":{},"179":{},"181":{},"194":{},"196":{},"202":{}},"component":{}}],["again.th",{"_index":5208,"title":{},"name":{},"text":{"60":{}},"component":{}}],["against",{"_index":1198,"title":{},"name":{},"text":{"23":{},"40":{},"43":{},"53":{},"63":{},"66":{},"90":{},"107":{},"110":{},"120":{},"132":{},"134":{},"158":{},"175":{},"178":{},"188":{},"200":{},"202":{}},"component":{}}],["agent",{"_index":4213,"title":{"53-12":{},"120-12":{},"188-12":{}},"name":{},"text":{"43":{},"53":{},"110":{},"120":{},"178":{},"188":{}},"component":{}}],["aggre",{"_index":5047,"title":{},"name":{},"text":{"58":{}},"component":{}}],["aggreg",{"_index":3851,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["agre",{"_index":6401,"title":{},"name":{},"text":{"126":{},"194":{}},"component":{}}],["ajax",{"_index":3327,"title":{},"name":{},"text":{"37":{},"43":{},"46":{},"104":{},"110":{},"113":{},"169":{},"178":{},"181":{}},"component":{}}],["ajaxopt",{"_index":3312,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["aka",{"_index":3422,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["algorithm",{"_index":5695,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["alia",{"_index":724,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["alias",{"_index":1081,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["alic",{"_index":555,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["align",{"_index":174,"title":{},"name":{},"text":{"3":{},"26":{},"27":{},"31":{},"57":{},"69":{},"93":{},"97":{},"125":{},"137":{},"165":{},"192":{}},"component":{}}],["aliv",{"_index":3955,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["allattribut",{"_index":5872,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["allow",{"_index":190,"title":{},"name":{},"text":{"4":{},"19":{},"22":{},"23":{},"26":{},"27":{},"29":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"50":{},"52":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"71":{},"84":{},"88":{},"90":{},"93":{},"95":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"117":{},"119":{},"124":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"139":{},"152":{},"156":{},"158":{},"163":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"181":{},"183":{},"185":{},"187":{},"193":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["allowedtyp",{"_index":6171,"title":{},"name":{},"text":{"92":{}},"component":{}}],["all|text|key|rec",{"_index":5053,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["alon",{"_index":3005,"title":{},"name":{},"text":{"32":{},"49":{},"98":{},"116":{},"166":{},"184":{}},"component":{}}],["along",{"_index":5310,"title":{},"name":{},"text":{"61":{},"92":{},"129":{},"197":{}},"component":{}}],["alongsid",{"_index":4718,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["alreadi",{"_index":611,"title":{},"name":{},"text":{"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"32":{},"33":{},"35":{},"39":{},"40":{},"41":{},"42":{},"44":{},"46":{},"48":{},"54":{},"56":{},"58":{},"59":{},"60":{},"61":{},"63":{},"65":{},"66":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"98":{},"99":{},"102":{},"106":{},"107":{},"108":{},"109":{},"111":{},"113":{},"115":{},"121":{},"123":{},"126":{},"127":{},"128":{},"129":{},"132":{},"133":{},"134":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"162":{},"166":{},"167":{},"170":{},"174":{},"175":{},"176":{},"177":{},"179":{},"181":{},"183":{},"189":{},"191":{},"194":{},"195":{},"196":{},"197":{},"200":{},"201":{},"202":{}},"component":{}}],["alt",{"_index":1255,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["alt+f5",{"_index":1513,"title":{},"name":{},"text":{"23":{},"63":{},"90":{},"132":{},"158":{},"200":{}},"component":{}}],["alt+shift+r",{"_index":1243,"title":{},"name":{},"text":{"23":{},"29":{},"90":{},"95":{},"158":{},"163":{}},"component":{}}],["altern",{"_index":880,"title":{"29-7":{},"92-12":{},"95-7":{},"163-7":{}},"name":{},"text":{"19":{},"22":{},"23":{},"26":{},"52":{},"63":{},"84":{},"88":{},"90":{},"92":{},"119":{},"132":{},"152":{},"156":{},"158":{},"187":{},"200":{}},"component":{}}],["alway",{"_index":649,"title":{},"name":{},"text":{"18":{},"23":{},"26":{},"27":{},"39":{},"40":{},"42":{},"43":{},"46":{},"47":{},"50":{},"52":{},"53":{},"56":{},"58":{},"60":{},"61":{},"66":{},"85":{},"90":{},"93":{},"106":{},"107":{},"108":{},"110":{},"113":{},"114":{},"117":{},"119":{},"120":{},"123":{},"126":{},"127":{},"128":{},"129":{},"134":{},"153":{},"158":{},"161":{},"174":{},"175":{},"177":{},"178":{},"181":{},"182":{},"185":{},"187":{},"188":{},"191":{},"194":{},"195":{},"196":{},"197":{},"202":{}},"component":{}}],["alwaysvisiblemenu",{"_index":6406,"title":{},"name":{},"text":{"127":{},"195":{}},"component":{}}],["amongst",{"_index":3754,"title":{},"name":{},"text":{"40":{},"60":{},"107":{},"128":{},"175":{},"196":{}},"component":{}}],["amount",{"_index":2235,"title":{},"name":{},"text":{"23":{},"33":{},"35":{},"40":{},"59":{},"90":{},"99":{},"102":{},"107":{},"127":{},"158":{},"167":{},"170":{},"175":{},"195":{}},"component":{}}],["analysi",{"_index":4548,"title":{},"name":{},"text":{"46":{},"92":{},"113":{},"181":{}},"component":{}}],["analyz",{"_index":3007,"title":{},"name":{},"text":{"32":{},"46":{},"98":{},"113":{},"166":{},"181":{}},"component":{}}],["anchor",{"_index":3347,"title":{},"name":{},"text":{"38":{},"39":{},"63":{},"105":{},"106":{},"132":{},"173":{},"174":{},"200":{}},"component":{}}],["and/or",{"_index":1145,"title":{},"name":{},"text":{"22":{},"23":{},"26":{},"29":{},"64":{},"88":{},"90":{},"92":{},"95":{},"131":{},"156":{},"158":{},"163":{},"199":{}},"component":{}}],["andaresingleexecut",{"_index":3539,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andfilt",{"_index":3600,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andmatch(new",{"_index":3542,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andmatcheventtype(jobeventtype.job_state_chang",{"_index":3553,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andmatchexecutionhint(\"comput",{"_index":3537,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andmatchexecutionhint(\"report",{"_index":3607,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andmatchfuture(future1",{"_index":3560,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andmatchnotfuture(ifuture.current.get",{"_index":3540,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andmatchnotstate(jobstate.pend",{"_index":3538,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andmatchruncontext(clientruncontext.class",{"_index":3541,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["andmatchstate(jobstate.run",{"_index":3554,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["android",{"_index":4441,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["anew",{"_index":3612,"title":{},"name":{},"text":{"39":{},"63":{},"106":{},"132":{},"174":{},"200":{}},"component":{}}],["angl",{"_index":2683,"title":{},"name":{},"text":{"26":{}},"component":{}}],["anim",{"_index":2913,"title":{},"name":{},"text":{"27":{},"36":{},"56":{},"59":{},"103":{},"123":{},"127":{},"168":{},"191":{},"195":{}},"component":{}}],["animations.less",{"_index":4938,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["annot",{"_index":1602,"title":{"26-15":{},"26-16":{},"26-31":{},"26-40":{},"63-14":{},"63-15":{},"132-14":{},"132-15":{},"200-14":{},"200-15":{}},"name":{},"text":{"23":{},"26":{},"27":{},"28":{},"39":{},"40":{},"48":{},"62":{},"63":{},"64":{},"66":{},"90":{},"94":{},"106":{},"107":{},"115":{},"130":{},"131":{},"132":{},"134":{},"158":{},"162":{},"174":{},"175":{},"183":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["annoy",{"_index":4517,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["anobject",{"_index":4555,"title":{},"name":{},"text":{"46":{}},"component":{}}],["anonym",{"_index":517,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["anonymousaccesscontrol",{"_index":3875,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["anoth",{"_index":26,"title":{},"name":{},"text":{"1":{},"22":{},"23":{},"33":{},"35":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"48":{},"49":{},"50":{},"51":{},"53":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"67":{},"88":{},"90":{},"93":{},"99":{},"102":{},"105":{},"106":{},"107":{},"108":{},"110":{},"111":{},"113":{},"115":{},"116":{},"117":{},"118":{},"120":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"135":{},"156":{},"158":{},"167":{},"170":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"181":{},"183":{},"184":{},"185":{},"186":{},"188":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["anothervers",{"_index":3762,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["answer",{"_index":1497,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["anymor",{"_index":291,"title":{},"name":{},"text":{"4":{},"26":{},"29":{},"39":{},"56":{},"59":{},"60":{},"71":{},"92":{},"95":{},"106":{},"123":{},"127":{},"128":{},"139":{},"163":{},"174":{},"191":{},"195":{},"196":{}},"component":{}}],["anymore.everi",{"_index":5191,"title":{},"name":{},"text":{"60":{}},"component":{}}],["anyon",{"_index":2010,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["anyth",{"_index":4470,"title":{},"name":{},"text":{"46":{},"58":{},"60":{},"66":{},"113":{},"126":{},"128":{},"134":{},"181":{},"194":{},"196":{},"202":{}},"component":{}}],["anyway",{"_index":2885,"title":{},"name":{},"text":{"26":{},"39":{},"43":{},"63":{},"92":{},"106":{},"110":{},"132":{},"174":{},"178":{},"200":{}},"component":{}}],["anywher",{"_index":2975,"title":{},"name":{},"text":{"29":{},"40":{},"61":{},"95":{},"107":{},"129":{},"163":{},"175":{},"197":{}},"component":{}}],["apach",{"_index":609,"title":{"19-6":{},"63-31":{},"84-6":{},"132-31":{},"152-6":{},"200-31":{}},"name":{},"text":{"17":{},"19":{},"21":{},"24":{},"32":{},"40":{},"63":{},"66":{},"83":{},"84":{},"87":{},"89":{},"92":{},"98":{},"107":{},"132":{},"151":{},"152":{},"155":{},"157":{},"166":{},"175":{},"200":{}},"component":{}}],["apart",{"_index":1044,"title":{},"name":{},"text":{"22":{},"64":{},"88":{},"131":{},"156":{},"199":{}},"component":{}}],["api",{"_index":657,"title":{"26-37":{},"27-21":{},"92-14":{},"93-23":{}},"name":{},"text":{"18":{},"26":{},"27":{},"37":{},"38":{},"39":{},"43":{},"47":{},"48":{},"49":{},"56":{},"59":{},"63":{},"64":{},"65":{},"66":{},"85":{},"92":{},"93":{},"104":{},"105":{},"106":{},"110":{},"114":{},"115":{},"116":{},"123":{},"124":{},"127":{},"131":{},"132":{},"133":{},"134":{},"153":{},"169":{},"173":{},"174":{},"178":{},"182":{},"183":{},"184":{},"191":{},"193":{},"195":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["api/serverstatu",{"_index":3308,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["apiservlet",{"_index":3290,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["app",{"_index":503,"title":{"19":{},"84":{},"152":{}},"name":{},"text":{"16":{},"17":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"32":{},"33":{},"34":{},"35":{},"40":{},"46":{},"48":{},"51":{},"53":{},"56":{},"60":{},"82":{},"83":{},"84":{},"85":{},"86":{},"88":{},"89":{},"90":{},"98":{},"99":{},"101":{},"102":{},"107":{},"113":{},"115":{},"118":{},"120":{},"123":{},"128":{},"150":{},"151":{},"152":{},"153":{},"154":{},"156":{},"157":{},"158":{},"166":{},"167":{},"170":{},"172":{},"175":{},"181":{},"183":{},"186":{},"188":{},"191":{},"196":{}},"component":{}}],["app().init",{"_index":1127,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["app.init",{"_index":4626,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["appear",{"_index":526,"title":{},"name":{},"text":{"16":{},"17":{},"23":{},"24":{},"53":{},"82":{},"83":{},"89":{},"90":{},"120":{},"150":{},"151":{},"157":{},"158":{},"188":{}},"component":{}}],["append",{"_index":881,"title":{},"name":{},"text":{"19":{},"23":{},"40":{},"43":{},"51":{},"60":{},"84":{},"90":{},"107":{},"110":{},"118":{},"128":{},"152":{},"158":{},"175":{},"178":{},"186":{},"196":{}},"component":{}}],["appendix",{"_index":701,"title":{"19-6":{},"29-30":{},"63-41":{},"84-6":{},"95-30":{},"132-41":{},"152-6":{},"163-30":{},"200-41":{}},"name":{},"text":{"19":{},"26":{},"84":{},"92":{},"152":{}},"component":{}}],["appendto",{"_index":4610,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["appl",{"_index":2928,"title":{},"name":{},"text":{"27":{},"45":{},"112":{},"180":{}},"component":{}}],["appli",{"_index":2246,"title":{"34":{},"101":{},"172":{}},"name":{},"text":{"23":{},"26":{},"27":{},"34":{},"36":{},"39":{},"40":{},"44":{},"46":{},"48":{},"53":{},"56":{},"59":{},"63":{},"90":{},"92":{},"101":{},"103":{},"106":{},"107":{},"109":{},"113":{},"115":{},"120":{},"123":{},"127":{},"132":{},"158":{},"160":{},"168":{},"172":{},"174":{},"175":{},"179":{},"181":{},"183":{},"188":{},"191":{},"195":{},"200":{}},"component":{}}],["applic",{"_index":113,"title":{"100":{},"171":{},"16-1":{},"16-2":{},"16-4":{},"16-5":{},"19-3":{},"19-9":{},"22-4":{},"22-5":{},"23-1":{},"26-18":{},"27-2":{},"40-1":{},"66-4":{},"82-1":{},"82-2":{},"82-4":{},"82-5":{},"84-3":{},"84-9":{},"88-4":{},"88-5":{},"90-1":{},"93-2":{},"107-1":{},"134-4":{},"150-1":{},"150-2":{},"150-4":{},"150-5":{},"152-3":{},"152-9":{},"156-4":{},"156-5":{},"158-1":{},"161-2":{},"175-1":{},"202-4":{}},"name":{},"text":{"2":{},"3":{},"6":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"39":{},"40":{},"43":{},"46":{},"47":{},"48":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"68":{},"69":{},"72":{},"80":{},"81":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"110":{},"113":{},"114":{},"115":{},"118":{},"119":{},"120":{},"121":{},"123":{},"125":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"136":{},"137":{},"140":{},"148":{},"149":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"161":{},"163":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"174":{},"175":{},"178":{},"181":{},"182":{},"183":{},"186":{},"187":{},"188":{},"189":{},"191":{},"192":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["application.in",{"_index":4491,"title":{},"name":{},"text":{"46":{}},"component":{}}],["application/json",{"_index":3314,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["application_logo",{"_index":4780,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["application_logo.png",{"_index":4775,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["application_logo_larg",{"_index":2639,"title":{},"name":{},"text":{"26":{}},"component":{}}],["application`",{"_index":4007,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["applicationlogo",{"_index":4779,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["applicationnameconst",{"_index":3861,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["applicationnameproperti",{"_index":3856,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["applicationnamepropertyredirect",{"_index":3863,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["applicationscop",{"_index":1603,"title":{"26-40":{}},"name":{},"text":{"23":{},"26":{},"40":{},"44":{},"63":{},"90":{},"107":{},"109":{},"132":{},"158":{},"175":{},"179":{},"200":{}},"component":{}}],["application’",{"_index":1012,"title":{},"name":{},"text":{"21":{},"23":{},"26":{},"38":{},"63":{},"87":{},"90":{},"105":{},"132":{},"155":{},"158":{},"173":{},"200":{}},"component":{}}],["applict",{"_index":1598,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["applink",{"_index":6328,"title":{},"name":{},"text":{"93":{}},"component":{}}],["applyfilt",{"_index":2837,"title":{},"name":{},"text":{"26":{},"59":{},"127":{},"195":{}},"component":{}}],["approach",{"_index":644,"title":{},"name":{},"text":{"18":{},"20":{},"23":{},"39":{},"43":{},"48":{},"53":{},"55":{},"60":{},"62":{},"63":{},"65":{},"66":{},"85":{},"86":{},"90":{},"106":{},"110":{},"115":{},"120":{},"122":{},"128":{},"130":{},"132":{},"133":{},"134":{},"153":{},"154":{},"158":{},"174":{},"178":{},"183":{},"188":{},"190":{},"196":{},"198":{},"200":{},"201":{},"202":{}},"component":{}}],["appropri",{"_index":455,"title":{},"name":{},"text":{"14":{},"16":{},"23":{},"26":{},"29":{},"38":{},"39":{},"46":{},"53":{},"64":{},"66":{},"80":{},"82":{},"90":{},"95":{},"105":{},"106":{},"113":{},"120":{},"131":{},"134":{},"148":{},"150":{},"158":{},"163":{},"173":{},"174":{},"181":{},"188":{},"199":{},"202":{}},"component":{}}],["apr",{"_index":3037,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["apt",{"_index":5371,"title":{"63-14":{},"63-15":{},"63-16":{},"63-17":{},"63-46":{},"63-47":{},"63-48":{},"132-14":{},"132-15":{},"132-16":{},"132-17":{},"132-46":{},"132-47":{},"132-48":{},"200-14":{},"200-15":{},"200-16":{},"200-17":{},"200-46":{},"200-47":{},"200-48":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["arbitrari",{"_index":2938,"title":{},"name":{},"text":{"27":{},"59":{},"64":{},"127":{},"131":{},"195":{},"199":{}},"component":{}}],["archetyp",{"_index":4445,"title":{},"name":{},"text":{"46":{},"56":{},"113":{},"123":{},"181":{},"191":{}},"component":{}}],["architectur",{"_index":23,"title":{},"name":{},"text":{"1":{},"19":{},"22":{},"24":{},"67":{},"84":{},"88":{},"89":{},"135":{},"152":{},"156":{},"157":{}},"component":{}}],["archiv",{"_index":5,"title":{"1-4":{},"67-4":{},"135-4":{}},"name":{},"text":{"1":{},"19":{},"24":{},"52":{},"67":{},"84":{},"89":{},"119":{},"135":{},"152":{},"157":{},"187":{}},"component":{}}],["area",{"_index":576,"title":{},"name":{},"text":{"16":{},"23":{},"27":{},"40":{},"52":{},"59":{},"82":{},"90":{},"107":{},"119":{},"127":{},"150":{},"158":{},"175":{},"187":{},"195":{}},"component":{}}],["arg",{"_index":1096,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["args.env",{"_index":4527,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["args.resdirarray",{"_index":1097,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["args.run",{"_index":6383,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["argument",{"_index":369,"title":{"46-12":{},"46-14":{},"113-12":{},"113-14":{},"181-12":{},"181-14":{}},"name":{},"text":{"7":{},"22":{},"23":{},"26":{},"38":{},"39":{},"41":{},"43":{},"46":{},"64":{},"73":{},"88":{},"90":{},"105":{},"106":{},"110":{},"111":{},"113":{},"131":{},"141":{},"156":{},"158":{},"173":{},"174":{},"176":{},"178":{},"181":{},"199":{}},"component":{}}],["around",{"_index":823,"title":{},"name":{},"text":{"19":{},"22":{},"27":{},"43":{},"44":{},"66":{},"84":{},"88":{},"93":{},"109":{},"110":{},"134":{},"152":{},"156":{},"161":{},"178":{},"179":{},"202":{}},"component":{}}],["arrang",{"_index":1392,"title":{},"name":{},"text":{"23":{},"50":{},"90":{},"117":{},"158":{},"185":{}},"component":{}}],["array",{"_index":2724,"title":{},"name":{},"text":{"26":{},"46":{},"60":{},"63":{},"64":{},"113":{},"128":{},"131":{},"132":{},"181":{},"196":{},"199":{},"200":{}},"component":{}}],["arraylist",{"_index":1357,"title":{},"name":{},"text":{"23":{},"33":{},"65":{},"90":{},"99":{},"133":{},"158":{},"170":{},"201":{}},"component":{}}],["arraylist(contactoutline.class",{"_index":1260,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["arriv",{"_index":6086,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["arrow",{"_index":1203,"title":{},"name":{},"text":{"23":{},"52":{},"90":{},"119":{},"158":{},"187":{}},"component":{}}],["artboard",{"_index":2713,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["articl",{"_index":916,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["article.[3",{"_index":825,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["artifact",{"_index":444,"title":{"18-4":{},"63-11":{},"63-16":{},"63-17":{},"85-4":{},"132-11":{},"132-16":{},"132-17":{},"153-4":{},"200-11":{},"200-16":{},"200-17":{}},"name":{},"text":{"14":{},"17":{},"18":{},"21":{},"23":{},"24":{},"26":{},"27":{},"29":{},"39":{},"46":{},"63":{},"80":{},"83":{},"85":{},"87":{},"89":{},"90":{},"92":{},"95":{},"106":{},"113":{},"132":{},"148":{},"151":{},"153":{},"155":{},"157":{},"158":{},"160":{},"163":{},"174":{},"181":{},"200":{}},"component":{}}],["artifactid",{"_index":445,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["ascend",{"_index":3769,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["ascii",{"_index":3896,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["ask",{"_index":3783,"title":{},"name":{},"text":{"40":{},"41":{},"50":{},"58":{},"63":{},"107":{},"111":{},"117":{},"126":{},"132":{},"175":{},"176":{},"185":{},"194":{},"200":{}},"component":{}}],["aspect",{"_index":854,"title":{},"name":{},"text":{"19":{},"23":{},"84":{},"90":{},"152":{},"158":{}},"component":{}}],["assembl",{"_index":1680,"title":{},"name":{},"text":{"23":{},"52":{},"90":{},"119":{},"158":{},"187":{}},"component":{}}],["assert",{"_index":3362,"title":{},"name":{},"text":{"38":{},"64":{},"105":{},"131":{},"173":{},"199":{}},"component":{}}],["assertequals(object",{"_index":5925,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["assertionexcept",{"_index":3332,"title":{"38-6":{},"105-6":{},"173-6":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["assertionexception(\"unsupport",{"_index":5909,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["asset",{"_index":592,"title":{"20-3":{},"86-3":{},"154-3":{}},"name":{},"text":{"17":{},"18":{},"20":{},"21":{},"24":{},"26":{},"46":{},"83":{},"85":{},"86":{},"87":{},"89":{},"92":{},"113":{},"151":{},"153":{},"154":{},"155":{},"157":{},"160":{},"181":{}},"component":{}}],["assign",{"_index":1945,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"43":{},"47":{},"60":{},"66":{},"90":{},"106":{},"107":{},"110":{},"114":{},"128":{},"134":{},"158":{},"174":{},"175":{},"178":{},"182":{},"196":{},"202":{}},"component":{}}],["assist",{"_index":134,"title":{"29-20":{},"95-20":{},"163-20":{}},"name":{},"text":{"3":{},"5":{},"6":{},"23":{},"29":{},"69":{},"70":{},"72":{},"90":{},"93":{},"95":{},"124":{},"128":{},"137":{},"138":{},"140":{},"158":{},"163":{},"193":{},"196":{}},"component":{}}],["associ",{"_index":414,"title":{},"name":{},"text":{"10":{},"19":{},"23":{},"32":{},"38":{},"39":{},"40":{},"41":{},"42":{},"62":{},"63":{},"65":{},"76":{},"84":{},"90":{},"98":{},"105":{},"106":{},"107":{},"108":{},"111":{},"130":{},"132":{},"133":{},"144":{},"152":{},"158":{},"166":{},"173":{},"174":{},"175":{},"176":{},"177":{},"198":{},"200":{},"201":{}},"component":{}}],["assum",{"_index":2987,"title":{},"name":{},"text":{"29":{},"33":{},"35":{},"40":{},"43":{},"52":{},"56":{},"59":{},"60":{},"64":{},"66":{},"95":{},"99":{},"102":{},"107":{},"110":{},"119":{},"123":{},"127":{},"131":{},"134":{},"163":{},"167":{},"170":{},"175":{},"178":{},"187":{},"191":{},"195":{},"199":{},"202":{}},"component":{}}],["assumpt",{"_index":3363,"title":{},"name":{},"text":{"38":{},"43":{},"63":{},"105":{},"110":{},"132":{},"173":{},"178":{},"200":{}},"component":{}}],["asynchron",{"_index":3432,"title":{"61-14":{},"129-14":{},"197-14":{}},"name":{},"text":{"39":{},"61":{},"64":{},"106":{},"129":{},"131":{},"174":{},"197":{},"199":{}},"component":{}}],["attach",{"_index":2389,"title":{},"name":{},"text":{"23":{},"26":{},"44":{},"60":{},"90":{},"109":{},"128":{},"158":{},"179":{},"196":{}},"component":{}}],["attack",{"_index":2815,"title":{},"name":{},"text":{"26":{},"43":{},"110":{},"178":{}},"component":{}}],["attempt",{"_index":3510,"title":{},"name":{},"text":{"39":{},"60":{},"106":{},"128":{},"174":{},"196":{}},"component":{}}],["attibut",{"_index":1436,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["attr1",{"_index":5870,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["attribut",{"_index":1391,"title":{"64-8":{},"64-9":{},"64-10":{},"64-11":{},"64-12":{},"64-14":{},"131-8":{},"131-9":{},"131-10":{},"131-11":{},"131-12":{},"131-14":{},"199-8":{},"199-9":{},"199-10":{},"199-11":{},"199-12":{},"199-14":{}},"name":{},"text":{"23":{},"26":{},"27":{},"40":{},"43":{},"54":{},"63":{},"64":{},"65":{},"66":{},"90":{},"93":{},"107":{},"110":{},"113":{},"121":{},"131":{},"132":{},"133":{},"134":{},"158":{},"175":{},"178":{},"181":{},"189":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["attributenam",{"_index":5756,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["attributename(\"mycustomnam",{"_index":5757,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["attributename(\"nameex",{"_index":5835,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["attributes.foreach",{"_index":5891,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["audienc",{"_index":2986,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["aug",{"_index":3040,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["augment",{"_index":4761,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["auth",{"_index":5536,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["authent",{"_index":3914,"title":{"63-24":{},"63-37":{},"63-49":{},"132-24":{},"132-37":{},"132-49":{},"200-24":{},"200-37":{},"200-49":{}},"name":{},"text":{"40":{},"44":{},"63":{},"66":{},"107":{},"109":{},"132":{},"134":{},"175":{},"179":{},"200":{},"202":{}},"component":{}}],["authenticationhandl",{"_index":5498,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["authhandl",{"_index":5535,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["author",{"_index":4208,"title":{"43-16":{},"110-16":{},"113-18":{},"178-16":{},"181-18":{}},"name":{},"text":{"43":{},"93":{},"110":{},"113":{},"178":{},"181":{}},"component":{}}],["auto",{"_index":1254,"title":{},"name":{},"text":{"23":{},"28":{},"33":{},"35":{},"46":{},"48":{},"59":{},"63":{},"90":{},"94":{},"99":{},"102":{},"113":{},"115":{},"127":{},"132":{},"158":{},"162":{},"167":{},"170":{},"181":{},"183":{},"195":{},"200":{}},"component":{}}],["autocreatedatabas",{"_index":1606,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["autom",{"_index":6284,"title":{},"name":{},"text":{"93":{}},"component":{}}],["automat",{"_index":165,"title":{},"name":{},"text":{"3":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"31":{},"34":{},"40":{},"41":{},"43":{},"46":{},"48":{},"51":{},"53":{},"56":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"69":{},"82":{},"83":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"101":{},"107":{},"110":{},"111":{},"113":{},"115":{},"118":{},"120":{},"123":{},"124":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"137":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"165":{},"172":{},"175":{},"176":{},"178":{},"181":{},"183":{},"186":{},"188":{},"191":{},"193":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["autoresizecolumn",{"_index":4888,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["avail",{"_index":119,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"16":{},"17":{},"18":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"30":{},"36":{},"38":{},"39":{},"40":{},"46":{},"50":{},"51":{},"52":{},"53":{},"54":{},"59":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"68":{},"69":{},"70":{},"71":{},"82":{},"83":{},"85":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"100":{},"103":{},"105":{},"106":{},"107":{},"113":{},"117":{},"118":{},"119":{},"120":{},"121":{},"124":{},"127":{},"128":{},"129":{},"131":{},"132":{},"133":{},"134":{},"136":{},"137":{},"138":{},"139":{},"150":{},"151":{},"153":{},"155":{},"156":{},"157":{},"158":{},"160":{},"162":{},"163":{},"164":{},"168":{},"171":{},"173":{},"174":{},"175":{},"181":{},"185":{},"186":{},"187":{},"188":{},"189":{},"193":{},"195":{},"196":{},"197":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["avoid",{"_index":2996,"title":{},"name":{},"text":{"32":{},"34":{},"40":{},"43":{},"51":{},"52":{},"56":{},"63":{},"64":{},"92":{},"98":{},"101":{},"107":{},"110":{},"118":{},"119":{},"123":{},"131":{},"132":{},"166":{},"172":{},"175":{},"178":{},"186":{},"187":{},"191":{},"199":{},"200":{}},"component":{}}],["await",{"_index":3373,"title":{"39-19":{},"39-21":{},"39-22":{},"39-23":{},"39-24":{},"106-19":{},"106-21":{},"106-22":{},"106-23":{},"106-24":{},"174-19":{},"174-21":{},"174-22":{},"174-23":{},"174-24":{}},"name":{},"text":{"38":{},"39":{},"105":{},"106":{},"173":{},"174":{}},"component":{}}],["awaitdon",{"_index":3584,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["awaitdoneandget",{"_index":3585,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["awaitfinish",{"_index":3597,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["awar",{"_index":1434,"title":{},"name":{},"text":{"23":{},"39":{},"47":{},"53":{},"62":{},"90":{},"93":{},"106":{},"114":{},"120":{},"124":{},"130":{},"158":{},"174":{},"182":{},"188":{},"193":{},"198":{}},"component":{}}],["away",{"_index":3844,"title":{},"name":{},"text":{"40":{},"53":{},"107":{},"120":{},"175":{},"188":{}},"component":{}}],["awesomeicon",{"_index":4797,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["awesomeicons.woff",{"_index":4790,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["ax",{"_index":3165,"title":{},"name":{},"text":{"35":{},"59":{},"102":{},"127":{},"167":{},"195":{}},"component":{}}],["axi",{"_index":3070,"title":{},"name":{},"text":{"33":{},"59":{},"99":{},"127":{},"170":{},"195":{}},"component":{}}],["axis.add(new",{"_index":3073,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["b",{"_index":2882,"title":{},"name":{},"text":{"26":{}},"component":{}}],["b013",{"_index":1429,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b04b",{"_index":1990,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b0c9",{"_index":1750,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b26b",{"_index":2257,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b281",{"_index":2067,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b2f8",{"_index":1385,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b414",{"_index":2125,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b44d",{"_index":2302,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b4f8",{"_index":1875,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b548",{"_index":2146,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b59e9bc2ebcf",{"_index":2298,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b5e5",{"_index":1454,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b666",{"_index":5350,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["b6e2d2aa3b7a",{"_index":1757,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b737",{"_index":4669,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["b7cd",{"_index":2401,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b7da",{"_index":1756,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b814",{"_index":1882,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b86a",{"_index":1456,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["b8ea",{"_index":2264,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ba23",{"_index":2138,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ba52",{"_index":1762,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ba78",{"_index":2000,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ba89",{"_index":1760,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["babel",{"_index":914,"title":{"46-17":{}},"name":{},"text":{"20":{},"26":{},"46":{},"86":{},"113":{},"154":{},"181":{}},"component":{}}],["babel/cor",{"_index":6127,"title":{},"name":{},"text":{"92":{}},"component":{}}],["babel/eslint",{"_index":2593,"title":{},"name":{},"text":{"26":{},"46":{},"92":{}},"component":{}}],["back",{"_index":292,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"23":{},"26":{},"34":{},"36":{},"41":{},"53":{},"64":{},"66":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"90":{},"101":{},"103":{},"111":{},"120":{},"131":{},"134":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"158":{},"168":{},"172":{},"176":{},"188":{},"199":{},"202":{}},"component":{}}],["back.jpg",{"_index":3260,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["backend",{"_index":624,"title":{},"name":{},"text":{"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"40":{},"43":{},"46":{},"51":{},"53":{},"56":{},"65":{},"66":{},"83":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"107":{},"110":{},"113":{},"118":{},"120":{},"123":{},"133":{},"134":{},"151":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"175":{},"178":{},"181":{},"186":{},"188":{},"191":{},"201":{},"202":{}},"component":{}}],["backendcallprofilerdecor",{"_index":3796,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["backendcallprofilerdecorator(ibeandecor",{"_index":3798,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["backendcallprofilerdecorator<>(super.decorate(bean",{"_index":3795,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["backfac",{"_index":3271,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["background",{"_index":166,"title":{},"name":{},"text":{"3":{},"26":{},"31":{},"34":{},"40":{},"44":{},"52":{},"56":{},"59":{},"65":{},"69":{},"97":{},"101":{},"107":{},"109":{},"119":{},"123":{},"127":{},"133":{},"137":{},"165":{},"172":{},"175":{},"179":{},"187":{},"191":{},"195":{},"201":{}},"component":{}}],["backgroundcolor",{"_index":2566,"title":{},"name":{},"text":{"26":{},"34":{},"59":{},"101":{},"127":{},"172":{},"195":{}},"component":{}}],["backimag",{"_index":3261,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["backslash",{"_index":740,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["backupselect",{"_index":6178,"title":{},"name":{},"text":{"92":{}},"component":{}}],["backward",{"_index":2920,"title":{},"name":{},"text":{"27":{}},"component":{}}],["bad",{"_index":2738,"title":{},"name":{},"text":{"26":{},"66":{},"92":{},"134":{},"160":{},"202":{}},"component":{}}],["bafc",{"_index":2143,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["balanc",{"_index":817,"title":{},"name":{},"text":{"19":{},"23":{},"84":{},"90":{},"152":{},"158":{}},"component":{}}],["bar",{"_index":449,"title":{},"name":{},"text":{"14":{},"16":{},"17":{},"19":{},"21":{},"24":{},"29":{},"33":{},"35":{},"48":{},"50":{},"53":{},"59":{},"60":{},"64":{},"80":{},"82":{},"83":{},"84":{},"87":{},"89":{},"95":{},"99":{},"102":{},"115":{},"117":{},"120":{},"127":{},"128":{},"131":{},"148":{},"150":{},"151":{},"152":{},"155":{},"157":{},"163":{},"167":{},"170":{},"183":{},"185":{},"188":{},"195":{},"196":{},"199":{}},"component":{}}],["base",{"_index":172,"title":{},"name":{},"text":{"3":{},"22":{},"23":{},"26":{},"27":{},"29":{},"31":{},"36":{},"38":{},"39":{},"40":{},"46":{},"48":{},"51":{},"53":{},"56":{},"57":{},"60":{},"62":{},"63":{},"64":{},"66":{},"69":{},"88":{},"90":{},"92":{},"93":{},"95":{},"97":{},"103":{},"105":{},"106":{},"107":{},"113":{},"115":{},"118":{},"120":{},"122":{},"123":{},"124":{},"125":{},"128":{},"130":{},"131":{},"132":{},"134":{},"137":{},"156":{},"158":{},"163":{},"165":{},"168":{},"173":{},"174":{},"175":{},"181":{},"183":{},"186":{},"188":{},"190":{},"191":{},"192":{},"193":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["base64",{"_index":2525,"title":{},"name":{},"text":{"26":{},"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["baseconfig",{"_index":1091,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["baseconfig(config",{"_index":4476,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["baseconfig(env",{"_index":1103,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["baseconfig.libraryconfig(config",{"_index":6378,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["baseconfig.rewriteindeximports('@your/cor",{"_index":6391,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["basemodel",{"_index":4606,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["bash",{"_index":1082,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["basi",{"_index":1325,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"44":{},"46":{},"63":{},"90":{},"106":{},"107":{},"109":{},"113":{},"132":{},"158":{},"174":{},"175":{},"179":{},"181":{},"200":{}},"component":{}}],["basic",{"_index":856,"title":{"56-2":{},"123-2":{},"191-2":{}},"name":{},"text":{"19":{},"23":{},"27":{},"39":{},"40":{},"43":{},"45":{},"48":{},"63":{},"64":{},"66":{},"84":{},"90":{},"106":{},"107":{},"110":{},"112":{},"113":{},"115":{},"131":{},"132":{},"134":{},"152":{},"158":{},"174":{},"175":{},"178":{},"180":{},"181":{},"183":{},"199":{},"200":{},"202":{}},"component":{}}],["basicauthenticationhandl",{"_index":5622,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["basicauthenticationmethod",{"_index":5384,"title":{"63-50":{},"132-50":{},"200-50":{}},"name":{},"text":{},"component":{}}],["basicpermiss",{"_index":435,"title":{},"name":{},"text":{"13":{},"79":{},"147":{}},"component":{}}],["bb1a",{"_index":4863,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["bc11",{"_index":2347,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["bcd31196b462",{"_index":1763,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["bdca",{"_index":1935,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["bdcc5482eb5b",{"_index":2277,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["be",{"_index":1004,"title":{},"name":{},"text":{"21":{},"24":{},"27":{},"34":{},"38":{},"39":{},"40":{},"43":{},"44":{},"48":{},"53":{},"60":{},"64":{},"87":{},"89":{},"101":{},"105":{},"106":{},"107":{},"109":{},"110":{},"115":{},"120":{},"128":{},"131":{},"155":{},"157":{},"172":{},"173":{},"174":{},"175":{},"178":{},"179":{},"183":{},"188":{},"196":{},"199":{}},"component":{}}],["be92",{"_index":2297,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["bean",{"_index":1645,"title":{"40-5":{},"40-6":{},"40-8":{},"40-9":{},"40-10":{},"40-12":{},"40-16":{},"40-17":{},"107-5":{},"107-6":{},"107-8":{},"107-9":{},"107-10":{},"107-12":{},"107-16":{},"107-17":{},"175-5":{},"175-6":{},"175-8":{},"175-9":{},"175-10":{},"175-12":{},"175-16":{},"175-17":{}},"name":{},"text":{"23":{},"26":{},"27":{},"38":{},"39":{},"40":{},"43":{},"44":{},"53":{},"63":{},"64":{},"66":{},"90":{},"93":{},"105":{},"106":{},"107":{},"109":{},"110":{},"120":{},"131":{},"132":{},"134":{},"158":{},"173":{},"174":{},"175":{},"178":{},"179":{},"188":{},"199":{},"200":{},"202":{}},"component":{}}],["bean.addcontentline(new",{"_index":4852,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["bean.settitle(\"custom",{"_index":4851,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["beanclass",{"_index":3739,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beandata",{"_index":3735,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beanmanag",{"_index":4152,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["beanmetadata",{"_index":3734,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beanmetadata(beanclass.class).withapplicationscoped(tru",{"_index":3736,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beanornul",{"_index":3756,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.all(imyservice.class",{"_index":3780,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.get",{"_index":3786,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.get(allpermissioncollection.class",{"_index":2019,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["beans.get(beansingletonclass.class",{"_index":3755,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.get(cancellationresourceclient.class).cancel(requestid",{"_index":6083,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["beans.get(cancellationrestclienthelper.class",{"_index":6074,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["beans.get(clientnotificationregistry.class).putforuser(\"admin",{"_index":5314,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["beans.get(codeservice.class",{"_index":5332,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["beans.get(dataobjectinventory.class).getattributesdescription(exampleentitydo.class",{"_index":5890,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["beans.get(derbysqlservice.class).createdb",{"_index":1612,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["beans.get(doentitybuilder.class",{"_index":5879,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["beans.get(exampledoentitylistdo.class",{"_index":5819,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["beans.get(exampleentity1do.class",{"_index":5821,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["beans.get(exampleentity2do.class",{"_index":5825,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["beans.get(exampleentitydo.class",{"_index":5721,"title":{},"name":{},"text":{"64":{},"66":{},"131":{},"134":{},"199":{},"202":{}},"component":{}}],["beans.get(examplemapentitydo.class",{"_index":5866,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["beans.get(examplerestclienthelper.class",{"_index":6031,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["beans.get(exceptionhandler.class).handle(",{"_index":1620,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["beans.get(iaccesscontrolservice.class).getuseridofcurrentsubject",{"_index":6070,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["beans.get(ichartconfig.class",{"_index":3095,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["beans.get(icompanyservice.class).isowncompany(companyid",{"_index":4316,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["beans.get(idataobjectmapper.class",{"_index":5731,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["beans.get(idataobjectmapper.class).writevalue(ent",{"_index":5724,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["beans.get(idevicetransformationservice.class).excludefield(thi",{"_index":4872,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["beans.get(idevicetransformationservice.class).excludefieldtransformation(thi",{"_index":4870,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["beans.get(iextensionregistry.class).register(namefieldextension.class",{"_index":4646,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["beans.get(iextensionregistry.class).register(personformmainboxextension.class",{"_index":4674,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["beans.get(iextensionregistry.class).registermove(namefield.class",{"_index":4714,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["beans.get(ijobmanager.class",{"_index":3447,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["beans.get(imyservice.class",{"_index":3763,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.get(iorganizationservice.class",{"_index":1659,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["beans.get(ipersonservice.class",{"_index":2027,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["beans.get(jaxwsruncontextlookup.class).lookup(m_webservicecontext",{"_index":5684,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["beans.get(jaxwsundeclaredexceptiontranslator.class).translate(",{"_index":5682,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["beans.get(jobinput.class",{"_index":3449,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["beans.get(mailhelper.class).createmimemessage(mailmessag",{"_index":4417,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["beans.get(mailmessage.class",{"_index":4408,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["beans.get(myserviceimpl.class",{"_index":3778,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.get(myservicemod.class",{"_index":3779,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.get(myspecialversion.class",{"_index":3764,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.get(pingwebserviceclient.class).newinvocationcontext",{"_index":5601,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["beans.get(pingwebserviceclient.class).newinvocationcontext().getport",{"_index":5597,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["beans.get(pingwebserviceporttype.class).ping(p",{"_index":5679,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["beans.get(platformexceptiontranslator.class).translate(",{"_index":1560,"title":{},"name":{},"text":{"23":{},"38":{},"90":{},"105":{},"158":{},"173":{}},"component":{}}],["beans.get(restrequestcancellationregistry.class).cancel(requestid",{"_index":6071,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["beans.get(smtphelper.class).sendmessage(sess",{"_index":4419,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["beans.get(smtphelper.class).sendmessage(smtpserverconfig",{"_index":4418,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["beans.get(smtpserverconfig.class",{"_index":4378,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["beans.get(superuserruncontextproducer.class).produc",{"_index":1614,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["beans.get(yesornocodetype.class).getcode(key",{"_index":5356,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["beans.getbeanmanager().registerbean(beandata",{"_index":3737,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.getbeanmanager().registerclass(beansingletonclass.class",{"_index":3733,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beans.opt(beanclass.class",{"_index":3757,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["beansingletonclass",{"_index":3747,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["bearerauthaccesscontrol",{"_index":2457,"title":{"26-40":{}},"name":{},"text":{"26":{}},"component":{}}],["beautifi",{"_index":2901,"title":{},"name":{},"text":{"27":{}},"component":{}}],["becom",{"_index":158,"title":{},"name":{},"text":{"3":{},"23":{},"31":{},"38":{},"39":{},"40":{},"53":{},"64":{},"69":{},"90":{},"93":{},"97":{},"105":{},"106":{},"107":{},"120":{},"131":{},"137":{},"158":{},"165":{},"173":{},"174":{},"175":{},"188":{},"199":{}},"component":{}}],["befor",{"_index":507,"title":{},"name":{},"text":{"16":{},"17":{},"18":{},"19":{},"22":{},"23":{},"24":{},"26":{},"28":{},"39":{},"40":{},"44":{},"46":{},"48":{},"51":{},"59":{},"60":{},"64":{},"65":{},"66":{},"82":{},"83":{},"84":{},"85":{},"88":{},"89":{},"90":{},"93":{},"94":{},"106":{},"107":{},"109":{},"113":{},"115":{},"118":{},"127":{},"128":{},"131":{},"133":{},"134":{},"150":{},"151":{},"152":{},"153":{},"156":{},"157":{},"158":{},"162":{},"174":{},"175":{},"179":{},"181":{},"183":{},"186":{},"195":{},"196":{},"199":{},"201":{},"202":{}},"component":{}}],["begin",{"_index":1516,"title":{},"name":{},"text":{"23":{},"60":{},"63":{},"90":{},"128":{},"132":{},"158":{},"196":{},"200":{}},"component":{}}],["behalf",{"_index":3545,"title":{},"name":{},"text":{"39":{},"41":{},"63":{},"106":{},"111":{},"132":{},"174":{},"176":{},"200":{}},"component":{}}],["behav",{"_index":1139,"title":{},"name":{},"text":{"22":{},"59":{},"88":{},"127":{},"156":{},"195":{}},"component":{}}],["behavior",{"_index":1135,"title":{},"name":{},"text":{"22":{},"23":{},"26":{},"27":{},"34":{},"39":{},"40":{},"41":{},"44":{},"48":{},"50":{},"53":{},"56":{},"60":{},"61":{},"88":{},"90":{},"93":{},"101":{},"106":{},"107":{},"109":{},"111":{},"115":{},"117":{},"120":{},"123":{},"128":{},"129":{},"156":{},"158":{},"172":{},"174":{},"175":{},"176":{},"179":{},"183":{},"185":{},"188":{},"191":{},"196":{},"197":{}},"component":{}}],["behaviour",{"_index":2852,"title":{},"name":{},"text":{"26":{},"32":{},"44":{},"98":{},"109":{},"166":{},"179":{}},"component":{}}],["behind",{"_index":3767,"title":{},"name":{},"text":{"40":{},"43":{},"107":{},"110":{},"175":{},"178":{}},"component":{}}],["belgium",{"_index":264,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["belong",{"_index":2972,"title":{},"name":{},"text":{"29":{},"39":{},"44":{},"56":{},"60":{},"95":{},"106":{},"109":{},"123":{},"128":{},"163":{},"174":{},"179":{},"191":{},"196":{}},"component":{}}],["below",{"_index":179,"title":{},"name":{},"text":{"3":{},"4":{},"16":{},"19":{},"21":{},"23":{},"24":{},"28":{},"29":{},"40":{},"48":{},"56":{},"60":{},"61":{},"69":{},"71":{},"82":{},"84":{},"87":{},"89":{},"90":{},"94":{},"95":{},"107":{},"115":{},"123":{},"128":{},"129":{},"137":{},"139":{},"150":{},"152":{},"155":{},"157":{},"158":{},"162":{},"163":{},"175":{},"183":{},"191":{},"196":{},"197":{}},"component":{}}],["bench",{"_index":1143,"title":{"47-1":{},"114-1":{},"182-1":{}},"name":{},"text":{"22":{},"23":{},"47":{},"50":{},"88":{},"90":{},"114":{},"117":{},"156":{},"158":{},"182":{},"185":{}},"component":{}}],["benchcolumndata",{"_index":4578,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["benchlayoutdata",{"_index":4575,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["benchlayoutdata.withcachekey",{"_index":4571,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["benefici",{"_index":6290,"title":{},"name":{},"text":{"93":{}},"component":{}}],["benefit",{"_index":1899,"title":{},"name":{},"text":{"23":{},"43":{},"48":{},"55":{},"60":{},"63":{},"90":{},"92":{},"93":{},"110":{},"115":{},"122":{},"124":{},"128":{},"132":{},"158":{},"178":{},"183":{},"190":{},"193":{},"196":{},"200":{}},"component":{}}],["besid",{"_index":2343,"title":{},"name":{},"text":{"23":{},"26":{},"32":{},"39":{},"43":{},"46":{},"50":{},"53":{},"56":{},"58":{},"60":{},"63":{},"64":{},"66":{},"90":{},"98":{},"106":{},"110":{},"113":{},"117":{},"120":{},"123":{},"126":{},"128":{},"131":{},"132":{},"134":{},"158":{},"166":{},"174":{},"178":{},"181":{},"185":{},"188":{},"191":{},"194":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["best",{"_index":61,"title":{"53-13":{},"120-13":{},"188-13":{}},"name":{},"text":{"1":{},"22":{},"23":{},"24":{},"40":{},"43":{},"45":{},"46":{},"67":{},"88":{},"89":{},"90":{},"107":{},"110":{},"112":{},"113":{},"128":{},"135":{},"156":{},"157":{},"158":{},"175":{},"178":{},"180":{},"181":{},"196":{}},"component":{}}],["better",{"_index":1397,"title":{"27-8":{},"27-12":{}},"name":{},"text":{"23":{},"27":{},"60":{},"66":{},"90":{},"93":{},"124":{},"128":{},"134":{},"158":{},"193":{},"196":{},"202":{}},"component":{}}],["between",{"_index":38,"title":{"39-20":{},"106-20":{},"174-20":{}},"name":{},"text":{"1":{},"4":{},"5":{},"19":{},"23":{},"26":{},"29":{},"38":{},"39":{},"40":{},"43":{},"46":{},"47":{},"53":{},"56":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{},"70":{},"71":{},"84":{},"90":{},"92":{},"95":{},"105":{},"106":{},"107":{},"110":{},"113":{},"114":{},"120":{},"123":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"134":{},"135":{},"138":{},"139":{},"152":{},"158":{},"163":{},"173":{},"174":{},"175":{},"178":{},"181":{},"182":{},"188":{},"191":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["bewar",{"_index":4672,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["beyond",{"_index":4437,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["bf2e",{"_index":2361,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["bf3ef61c1b4b",{"_index":5947,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["bfa3bc0d0642",{"_index":1430,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["bfbfbf",{"_index":3127,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["bfc2c3",{"_index":4963,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["bgcolor",{"_index":3147,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["big",{"_index":4462,"title":{},"name":{},"text":{"46":{},"53":{},"55":{},"60":{},"61":{},"113":{},"120":{},"122":{},"128":{},"129":{},"181":{},"188":{},"190":{},"196":{},"197":{}},"component":{}}],["bigdecim",{"_index":2768,"title":{},"name":{},"text":{"26":{},"33":{},"64":{},"99":{},"131":{},"170":{},"199":{}},"component":{}}],["bigdecimal(\"200.0",{"_index":4688,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["bigdecimal(valu",{"_index":3081,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["bigger",{"_index":2773,"title":{},"name":{},"text":{"26":{},"44":{},"109":{},"179":{}},"component":{}}],["biginteg",{"_index":5855,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["bin",{"_index":858,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["binari",{"_index":2989,"title":{},"name":{},"text":{"29":{},"40":{},"48":{},"63":{},"95":{},"107":{},"115":{},"132":{},"163":{},"175":{},"183":{},"200":{}},"component":{}}],["binaryresourc",{"_index":4398,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["binaryresources.cr",{"_index":4400,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["bind",{"_index":3004,"title":{"63-13":{},"132-13":{},"200-13":{}},"name":{},"text":{"32":{},"60":{},"63":{},"66":{},"98":{},"128":{},"132":{},"134":{},"166":{},"196":{},"200":{},"202":{}},"component":{}}],["bind(thi",{"_index":3325,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["bindings.xml",{"_index":5456,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["birth",{"_index":1792,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["birthday",{"_index":4652,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["birthdayfield",{"_index":4671,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["bit",{"_index":839,"title":{},"name":{},"text":{"19":{},"22":{},"84":{},"88":{},"152":{},"156":{}},"component":{}}],["bit/64",{"_index":838,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["bitmap",{"_index":4766,"title":{},"name":{},"text":{"52":{},"60":{},"119":{},"128":{},"187":{},"196":{}},"component":{}}],["black",{"_index":2807,"title":{},"name":{},"text":{"26":{},"33":{},"35":{},"52":{},"99":{},"102":{},"119":{},"167":{},"170":{},"187":{}},"component":{}}],["bleed",{"_index":4554,"title":{},"name":{},"text":{"46":{}},"component":{}}],["blind",{"_index":4392,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["bloc",{"_index":5885,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["block",{"_index":1568,"title":{"39-26":{},"39-27":{},"106-26":{},"106-27":{},"174-26":{},"174-27":{}},"name":{},"text":{"23":{},"36":{},"39":{},"40":{},"41":{},"43":{},"44":{},"58":{},"61":{},"65":{},"90":{},"93":{},"103":{},"106":{},"107":{},"109":{},"110":{},"111":{},"126":{},"129":{},"133":{},"158":{},"168":{},"174":{},"175":{},"176":{},"178":{},"179":{},"194":{},"197":{},"201":{}},"component":{}}],["blue",{"_index":4942,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["blurri",{"_index":2645,"title":{},"name":{},"text":{"26":{}},"component":{}}],["board",{"_index":5051,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["bob",{"_index":4976,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["bodi",{"_index":1251,"title":{},"name":{},"text":{"23":{},"44":{},"90":{},"93":{},"109":{},"158":{},"179":{}},"component":{}}],["bold",{"_index":2678,"title":{},"name":{},"text":{"26":{},"43":{},"110":{},"178":{}},"component":{}}],["bookmarknotificationcoalesc",{"_index":5318,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["boolean",{"_index":1380,"title":{},"name":{},"text":{"23":{},"26":{},"39":{},"40":{},"43":{},"46":{},"63":{},"64":{},"90":{},"106":{},"107":{},"110":{},"113":{},"131":{},"132":{},"158":{},"174":{},"175":{},"178":{},"181":{},"199":{},"200":{}},"component":{}}],["boolean.tru",{"_index":1538,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["bootstrap",{"_index":963,"title":{},"name":{},"text":{"20":{},"22":{},"51":{},"86":{},"88":{},"118":{},"154":{},"156":{},"186":{}},"component":{}}],["border",{"_index":1155,"title":{},"name":{},"text":{"22":{},"26":{},"33":{},"35":{},"88":{},"99":{},"102":{},"156":{},"167":{},"170":{}},"component":{}}],["bordercolor",{"_index":2567,"title":{},"name":{},"text":{"26":{}},"component":{}}],["borderdecor",{"_index":947,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["borderwidth",{"_index":2564,"title":{},"name":{},"text":{"26":{}},"component":{}}],["both",{"_index":461,"title":{},"name":{},"text":{"14":{},"18":{},"23":{},"24":{},"29":{},"32":{},"34":{},"39":{},"63":{},"64":{},"66":{},"80":{},"85":{},"89":{},"90":{},"95":{},"98":{},"101":{},"106":{},"131":{},"132":{},"134":{},"148":{},"153":{},"157":{},"158":{},"160":{},"163":{},"166":{},"172":{},"174":{},"199":{},"200":{},"202":{}},"component":{}}],["bottom",{"_index":29,"title":{},"name":{},"text":{"1":{},"16":{},"26":{},"27":{},"42":{},"59":{},"67":{},"82":{},"108":{},"127":{},"135":{},"150":{},"177":{},"195":{}},"component":{}}],["bounc",{"_index":4033,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["bound",{"_index":4168,"title":{},"name":{},"text":{"41":{},"60":{},"63":{},"111":{},"128":{},"132":{},"176":{},"196":{},"200":{}},"component":{}}],["boundari",{"_index":4147,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["box",{"_index":307,"title":{"27-6":{}},"name":{},"text":{"5":{},"14":{},"16":{},"19":{},"20":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"32":{},"38":{},"41":{},"43":{},"48":{},"50":{},"53":{},"60":{},"65":{},"70":{},"80":{},"82":{},"84":{},"86":{},"88":{},"90":{},"94":{},"95":{},"98":{},"105":{},"110":{},"111":{},"115":{},"117":{},"120":{},"128":{},"133":{},"138":{},"148":{},"150":{},"152":{},"154":{},"156":{},"158":{},"162":{},"163":{},"166":{},"173":{},"176":{},"178":{},"183":{},"185":{},"188":{},"196":{},"201":{}},"component":{}}],["box.thi",{"_index":5203,"title":{},"name":{},"text":{"60":{}},"component":{}}],["branch",{"_index":1041,"title":{},"name":{},"text":{"22":{},"27":{},"88":{},"93":{},"156":{},"161":{}},"component":{}}],["brave",{"_index":2925,"title":{},"name":{},"text":{"27":{},"45":{},"112":{},"180":{}},"component":{}}],["break",{"_index":5737,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["briefli",{"_index":1201,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["bring",{"_index":3768,"title":{},"name":{},"text":{"40":{},"53":{},"107":{},"120":{},"175":{},"188":{}},"component":{}}],["broken",{"_index":2886,"title":{},"name":{},"text":{"26":{}},"component":{}}],["broker",{"_index":4048,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["brows",{"_index":98,"title":{},"name":{},"text":{"1":{},"14":{},"16":{},"29":{},"52":{},"65":{},"67":{},"80":{},"82":{},"95":{},"119":{},"133":{},"135":{},"148":{},"150":{},"163":{},"187":{},"201":{}},"component":{}}],["browser",{"_index":447,"title":{"45":{},"112":{},"180":{},"16-6":{},"26-26":{},"27-15":{},"27-19":{},"82-6":{},"150-6":{}},"name":{"45":{},"112":{},"180":{}},"text":{"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"32":{},"36":{},"40":{},"45":{},"46":{},"47":{},"50":{},"51":{},"53":{},"56":{},"60":{},"65":{},"80":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"95":{},"98":{},"103":{},"107":{},"112":{},"113":{},"114":{},"117":{},"118":{},"120":{},"123":{},"128":{},"133":{},"148":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"166":{},"168":{},"175":{},"180":{},"181":{},"182":{},"185":{},"186":{},"188":{},"191":{},"196":{},"201":{}},"component":{}}],["browser.html",{"_index":2494,"title":{},"name":{},"text":{"26":{}},"component":{}}],["browserfield",{"_index":4226,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["brush",{"_index":2887,"title":{"27-3":{}},"name":{},"text":{"27":{}},"component":{}}],["bsicrm",{"_index":4966,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["bubbl",{"_index":3122,"title":{},"name":{},"text":{"33":{},"35":{},"38":{},"59":{},"99":{},"102":{},"105":{},"127":{},"167":{},"170":{},"173":{},"195":{}},"component":{}}],["bug",{"_index":4263,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["buid",{"_index":4516,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["build",{"_index":479,"title":{"19":{},"46":{},"84":{},"113":{},"152":{},"181":{},"22-4":{},"22-7":{},"46-11":{},"56-6":{},"63-11":{},"63-16":{},"63-17":{},"88-4":{},"88-7":{},"92-23":{},"93-14":{},"93-15":{},"93-17":{},"113-11":{},"123-6":{},"132-11":{},"132-16":{},"132-17":{},"156-4":{},"156-7":{},"181-11":{},"191-6":{},"200-11":{},"200-16":{},"200-17":{}},"name":{"46":{},"113":{},"181":{}},"text":{"14":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"32":{},"39":{},"40":{},"44":{},"46":{},"56":{},"63":{},"64":{},"66":{},"80":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"98":{},"106":{},"107":{},"109":{},"113":{},"123":{},"124":{},"131":{},"132":{},"134":{},"148":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"166":{},"174":{},"175":{},"179":{},"181":{},"191":{},"193":{},"199":{},"200":{},"202":{}},"component":{}}],["build.launch",{"_index":488,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["build:al",{"_index":4500,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["build:dev",{"_index":1060,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["build:dev:watch",{"_index":1024,"title":{},"name":{},"text":{"21":{},"22":{},"24":{},"46":{},"87":{},"88":{},"89":{},"113":{},"155":{},"156":{},"157":{},"181":{}},"component":{}}],["build:prod",{"_index":4499,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["builder",{"_index":3452,"title":{"43-12":{},"110-12":{},"178-12":{}},"name":{},"text":{"39":{},"64":{},"106":{},"131":{},"174":{},"199":{}},"component":{}}],["buildstr",{"_index":5884,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["built",{"_index":779,"title":{},"name":{},"text":{"19":{},"26":{},"40":{},"43":{},"45":{},"46":{},"64":{},"84":{},"92":{},"107":{},"110":{},"112":{},"113":{},"131":{},"152":{},"160":{},"175":{},"178":{},"180":{},"181":{},"199":{}},"component":{}}],["bunch",{"_index":4490,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["bundl",{"_index":470,"title":{"46-4":{},"113-4":{},"181-4":{}},"name":{},"text":{"14":{},"19":{},"22":{},"29":{},"40":{},"46":{},"51":{},"56":{},"57":{},"63":{},"64":{},"80":{},"84":{},"88":{},"95":{},"107":{},"113":{},"118":{},"123":{},"125":{},"131":{},"132":{},"148":{},"152":{},"156":{},"163":{},"175":{},"181":{},"186":{},"191":{},"192":{},"199":{},"200":{}},"component":{}}],["bundler",{"_index":903,"title":{},"name":{},"text":{"20":{},"86":{},"93":{},"154":{}},"component":{}}],["busi",{"_index":771,"title":{},"name":{},"text":{"19":{},"23":{},"32":{},"34":{},"38":{},"40":{},"48":{},"54":{},"56":{},"58":{},"63":{},"64":{},"84":{},"90":{},"98":{},"100":{},"101":{},"105":{},"107":{},"115":{},"121":{},"123":{},"126":{},"131":{},"132":{},"152":{},"158":{},"166":{},"171":{},"172":{},"173":{},"175":{},"183":{},"189":{},"191":{},"194":{},"199":{},"200":{}},"component":{}}],["business’",{"_index":3632,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["button",{"_index":182,"title":{"4-4":{},"29-27":{},"71-4":{},"95-27":{},"139-4":{},"163-27":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"32":{},"50":{},"52":{},"53":{},"56":{},"60":{},"65":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"98":{},"117":{},"119":{},"120":{},"123":{},"128":{},"133":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"166":{},"185":{},"187":{},"188":{},"191":{},"196":{},"201":{}},"component":{}}],["button.displaystyle.toggl",{"_index":5265,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["button.off('click",{"_index":5257,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["button.on('click",{"_index":5253,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["button.on('propertychang",{"_index":5266,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["button.on('propertychange:select",{"_index":5275,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["button.rend",{"_index":5252,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["button.setselected(tru",{"_index":5271,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["button/menu",{"_index":2656,"title":{},"name":{},"text":{"26":{}},"component":{}}],["byte",{"_index":1994,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["c",{"_index":600,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"26":{},"47":{},"48":{},"62":{},"65":{},"83":{},"87":{},"89":{},"114":{},"115":{},"130":{},"133":{},"151":{},"155":{},"157":{},"182":{},"183":{},"198":{},"201":{}},"component":{}}],["c.getsalary().setvalue(new",{"_index":4687,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["c.gettext",{"_index":5357,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["c.getvalidityfrom",{"_index":5968,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["c.getvalidityto",{"_index":5969,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["c.setvalidityfrom(dateutility.parse(\"2012",{"_index":5961,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["c.setvalidityto(dateutility.parse(\"2013",{"_index":5965,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["c1",{"_index":6315,"title":{},"name":{},"text":{"93":{}},"component":{}}],["c2",{"_index":6317,"title":{},"name":{},"text":{"93":{}},"component":{}}],["c29366c22742",{"_index":1746,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["c77f903c6881",{"_index":4670,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["c832b034a298",{"_index":1913,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["c:\\java\\jdk11\\lib\\security\\cacert",{"_index":750,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["ca",{"_index":2584,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ca87",{"_index":2196,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["cacert",{"_index":747,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["cach",{"_index":870,"title":{},"name":{},"text":{"19":{},"37":{},"40":{},"43":{},"46":{},"47":{},"51":{},"57":{},"61":{},"62":{},"63":{},"65":{},"84":{},"104":{},"107":{},"110":{},"113":{},"114":{},"118":{},"125":{},"129":{},"130":{},"132":{},"133":{},"152":{},"169":{},"175":{},"178":{},"181":{},"182":{},"186":{},"192":{},"197":{},"198":{},"200":{},"201":{}},"component":{}}],["caef",{"_index":1427,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["calculatesubtitl",{"_index":2034,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["calendar",{"_index":4781,"title":{"93-21":{}},"name":{},"text":{"52":{},"63":{},"93":{},"119":{},"132":{},"187":{},"195":{},"200":{}},"component":{}}],["calendar.menutypes.emptyspac",{"_index":6437,"title":{},"name":{},"text":{"195":{}},"component":{}}],["calendardateadapt",{"_index":5650,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["calendardatetimeadapt",{"_index":5651,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["calendarintervalschedulebuild",{"_index":3636,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["calendartimeadapt",{"_index":5652,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["call",{"_index":237,"title":{"65":{},"133":{},"201":{},"23-11":{},"23-42":{},"23-43":{},"65-4":{},"65-6":{},"90-11":{},"90-42":{},"90-43":{},"133-4":{},"133-6":{},"158-11":{},"158-42":{},"158-43":{},"201-4":{},"201-6":{}},"name":{"65":{},"133":{},"201":{}},"text":{"4":{},"6":{},"10":{},"18":{},"19":{},"20":{},"21":{},"23":{},"26":{},"27":{},"29":{},"32":{},"37":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"71":{},"72":{},"76":{},"84":{},"85":{},"86":{},"87":{},"90":{},"92":{},"93":{},"95":{},"98":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"116":{},"117":{},"119":{},"120":{},"122":{},"123":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"133":{},"134":{},"139":{},"140":{},"144":{},"152":{},"153":{},"154":{},"155":{},"158":{},"163":{},"166":{},"169":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"181":{},"183":{},"184":{},"185":{},"187":{},"188":{},"190":{},"191":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["call.getdatabykey",{"_index":5977,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["call.setkey(thiskey",{"_index":5976,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["callabl",{"_index":3433,"title":{},"name":{},"text":{"39":{},"41":{},"63":{},"106":{},"111":{},"132":{},"174":{},"176":{},"200":{}},"component":{}}],["callback",{"_index":2022,"title":{},"name":{},"text":{"23":{},"26":{},"27":{},"32":{},"37":{},"39":{},"60":{},"90":{},"98":{},"104":{},"106":{},"128":{},"158":{},"166":{},"169":{},"174":{},"196":{}},"component":{}}],["called\").show",{"_index":4700,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["caller",{"_index":4094,"title":{},"name":{},"text":{"40":{},"41":{},"44":{},"66":{},"107":{},"109":{},"111":{},"134":{},"175":{},"176":{},"179":{},"202":{}},"component":{}}],["cancel",{"_index":2718,"title":{"39-17":{},"63-34":{},"66-12":{},"66-13":{},"66-14":{},"66-15":{},"106-17":{},"132-34":{},"134-12":{},"134-13":{},"134-14":{},"134-15":{},"174-17":{},"200-34":{},"202-12":{},"202-13":{},"202-14":{},"202-15":{}},"name":{},"text":{"26":{},"38":{},"39":{},"40":{},"41":{},"42":{},"50":{},"53":{},"63":{},"66":{},"100":{},"105":{},"106":{},"107":{},"108":{},"111":{},"117":{},"120":{},"132":{},"134":{},"171":{},"173":{},"174":{},"175":{},"176":{},"177":{},"185":{},"188":{},"200":{},"202":{}},"component":{}}],["cancel(@pathparam(\"requestid",{"_index":6068,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["cancel(str",{"_index":6075,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["cancelbutton",{"_index":1790,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["cancellablework",{"_index":3693,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["cancellationresourc",{"_index":6066,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["cancellationresourcecli",{"_index":6072,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["cancellationrestclienthelp",{"_index":6073,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["cancelmenu",{"_index":4744,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["cancelrequest(str",{"_index":6082,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["candid",{"_index":2974,"title":{},"name":{},"text":{"29":{},"40":{},"95":{},"107":{},"163":{},"175":{}},"component":{}}],["can’t",{"_index":2582,"title":{},"name":{},"text":{"26":{}},"component":{}}],["capabl",{"_index":1064,"title":{"53-1":{},"120-1":{},"188-1":{}},"name":{},"text":{"22":{},"39":{},"45":{},"53":{},"59":{},"63":{},"88":{},"106":{},"112":{},"120":{},"127":{},"132":{},"156":{},"174":{},"180":{},"188":{},"195":{},"200":{}},"component":{}}],["capac",{"_index":3926,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["carbon",{"_index":4390,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["card",{"_index":3199,"title":{"36-8":{},"103-8":{},"168-8":{}},"name":{"36":{},"103":{},"168":{}},"text":{"36":{},"103":{},"168":{}},"component":{}}],["care",{"_index":168,"title":{},"name":{},"text":{"3":{},"18":{},"31":{},"40":{},"46":{},"50":{},"53":{},"54":{},"58":{},"69":{},"85":{},"93":{},"97":{},"107":{},"113":{},"117":{},"120":{},"121":{},"126":{},"128":{},"137":{},"153":{},"165":{},"175":{},"181":{},"185":{},"188":{},"189":{},"194":{},"196":{}},"component":{}}],["caret",{"_index":1085,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["cargo",{"_index":2483,"title":{},"name":{},"text":{"26":{}},"component":{}}],["case",{"_index":364,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"43":{},"46":{},"47":{},"48":{},"49":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"64":{},"65":{},"66":{},"73":{},"74":{},"76":{},"78":{},"79":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"95":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"110":{},"113":{},"114":{},"115":{},"116":{},"119":{},"120":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"133":{},"134":{},"141":{},"142":{},"144":{},"146":{},"147":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"168":{},"169":{},"172":{},"173":{},"174":{},"175":{},"178":{},"181":{},"182":{},"183":{},"184":{},"187":{},"188":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"201":{},"202":{}},"component":{}}],["cash",{"_index":4508,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["cast",{"_index":5966,"title":{},"name":{},"text":{"65":{},"93":{},"128":{},"133":{},"196":{},"201":{}},"component":{}}],["catalina",{"_index":888,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["catalina”.[4",{"_index":828,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["catch",{"_index":1519,"title":{},"name":{},"text":{"23":{},"38":{},"63":{},"90":{},"105":{},"132":{},"158":{},"173":{},"200":{}},"component":{}}],["catched/tr",{"_index":3367,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["categori",{"_index":1395,"title":{"93-22":{}},"name":{},"text":{"23":{},"26":{},"90":{},"93":{},"158":{}},"component":{}}],["category_bold",{"_index":2675,"title":{},"name":{},"text":{"26":{}},"component":{}}],["caus",{"_index":3350,"title":{},"name":{},"text":{"38":{},"39":{},"40":{},"56":{},"105":{},"106":{},"107":{},"123":{},"173":{},"174":{},"175":{},"191":{}},"component":{}}],["cc00ee",{"_index":5060,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["cdn",{"_index":56,"title":{"20":{},"86":{},"154":{},"18-5":{},"85-5":{},"153-5":{}},"name":{"20":{},"86":{},"154":{}},"text":{"1":{},"18":{},"20":{},"26":{},"67":{},"85":{},"86":{},"92":{},"135":{},"153":{},"154":{},"160":{}},"component":{}}],["cell",{"_index":235,"title":{"53-6":{},"120-6":{},"188-6":{}},"name":{},"text":{"4":{},"23":{},"29":{},"43":{},"71":{},"90":{},"95":{},"110":{},"139":{},"158":{},"163":{},"178":{}},"component":{}}],["center",{"_index":4564,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["central",{"_index":683,"title":{},"name":{},"text":{"18":{},"23":{},"26":{},"32":{},"38":{},"40":{},"43":{},"85":{},"90":{},"92":{},"98":{},"105":{},"107":{},"110":{},"153":{},"158":{},"160":{},"166":{},"173":{},"175":{},"178":{}},"component":{}}],["certain",{"_index":3704,"title":{},"name":{},"text":{"40":{},"44":{},"48":{},"54":{},"59":{},"65":{},"107":{},"109":{},"115":{},"121":{},"127":{},"133":{},"175":{},"179":{},"183":{},"189":{},"195":{},"201":{}},"component":{}}],["certainli",{"_index":6285,"title":{},"name":{},"text":{"93":{}},"component":{}}],["certif",{"_index":700,"title":{"19-2":{},"84-2":{},"152-2":{}},"name":{},"text":{"19":{},"40":{},"84":{},"107":{},"152":{},"175":{}},"component":{}}],["cf04",{"_index":2179,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ch",{"_index":4130,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["cha",{"_index":1517,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["chain",{"_index":248,"title":{},"name":{},"text":{"4":{},"29":{},"39":{},"40":{},"41":{},"48":{},"63":{},"71":{},"95":{},"106":{},"107":{},"111":{},"115":{},"132":{},"139":{},"163":{},"174":{},"175":{},"176":{},"183":{},"200":{}},"component":{}}],["chain.execinitfield",{"_index":4641,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["chain.execinitform",{"_index":4695,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["chain.execpostload",{"_index":4705,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["chain.xml",{"_index":5539,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["challeng",{"_index":5505,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["chang",{"_index":759,"title":{"23-6":{},"23-7":{},"26-13":{},"26-15":{},"33-6":{},"35-6":{},"60-9":{},"90-6":{},"90-7":{},"92-14":{},"93-23":{},"99-6":{},"102-6":{},"128-10":{},"158-6":{},"158-7":{},"167-6":{},"170-6":{},"196-10":{}},"name":{},"text":{"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"33":{},"34":{},"35":{},"39":{},"40":{},"41":{},"46":{},"47":{},"48":{},"50":{},"52":{},"53":{},"56":{},"57":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"99":{},"101":{},"102":{},"106":{},"107":{},"111":{},"113":{},"114":{},"115":{},"117":{},"119":{},"120":{},"123":{},"124":{},"125":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"152":{},"155":{},"156":{},"157":{},"158":{},"160":{},"161":{},"167":{},"170":{},"172":{},"174":{},"175":{},"176":{},"181":{},"182":{},"183":{},"185":{},"187":{},"188":{},"191":{},"192":{},"193":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["changeit",{"_index":735,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["channel",{"_index":758,"title":{},"name":{},"text":{"19":{},"40":{},"43":{},"84":{},"107":{},"110":{},"152":{},"175":{},"178":{}},"component":{}}],["chaper",{"_index":4630,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["chapter",{"_index":2414,"title":{},"name":{},"text":{"23":{},"25":{},"26":{},"29":{},"43":{},"46":{},"48":{},"51":{},"56":{},"59":{},"60":{},"63":{},"90":{},"91":{},"93":{},"95":{},"110":{},"113":{},"115":{},"118":{},"123":{},"127":{},"128":{},"132":{},"158":{},"159":{},"163":{},"178":{},"181":{},"183":{},"186":{},"191":{},"195":{},"196":{},"200":{}},"component":{}}],["charact",{"_index":741,"title":{},"name":{},"text":{"19":{},"23":{},"38":{},"40":{},"52":{},"57":{},"60":{},"84":{},"90":{},"105":{},"107":{},"119":{},"125":{},"128":{},"152":{},"158":{},"173":{},"175":{},"187":{},"192":{},"196":{}},"component":{}}],["characterist",{"_index":3728,"title":{},"name":{},"text":{"40":{},"41":{},"107":{},"111":{},"175":{},"176":{}},"component":{}}],["charg",{"_index":5927,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["charset=utf",{"_index":3315,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["charsetsafemimemessag",{"_index":4416,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["chart",{"_index":984,"title":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{},"33-2":{},"33-3":{},"33-4":{},"35-2":{},"35-3":{},"35-4":{},"59-2":{},"99-2":{},"99-3":{},"99-4":{},"102-2":{},"102-3":{},"102-4":{},"127-2":{},"167-2":{},"167-3":{},"167-4":{},"170-2":{},"170-3":{},"170-4":{},"195-2":{}},"name":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"text":{"20":{},"26":{},"33":{},"35":{},"59":{},"86":{},"99":{},"102":{},"127":{},"154":{},"167":{},"170":{},"195":{}},"component":{}}],["chart.checkeditem",{"_index":3194,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["chart.j",{"_index":2427,"title":{"26-10":{}},"name":{},"text":{"26":{},"59":{},"127":{},"195":{}},"component":{}}],["chart.on('valueclick",{"_index":3193,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["chart.setconfig(config",{"_index":3172,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["chart.setdata(data",{"_index":3168,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["chart.type.bar",{"_index":3169,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["chart.type.bubbl",{"_index":3195,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["chartaxisbean(label",{"_index":3074,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["chartdata",{"_index":3069,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["chartfield",{"_index":3030,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["chartvaluegroup",{"_index":3166,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["cheat",{"_index":3010,"title":{},"name":{},"text":{"33":{},"35":{},"36":{},"99":{},"102":{},"103":{},"167":{},"168":{},"170":{}},"component":{}}],["check",{"_index":288,"title":{},"name":{},"text":{"4":{},"16":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"33":{},"35":{},"38":{},"39":{},"40":{},"43":{},"46":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"59":{},"60":{},"63":{},"64":{},"65":{},"71":{},"82":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"99":{},"102":{},"105":{},"106":{},"107":{},"110":{},"113":{},"117":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"127":{},"128":{},"131":{},"132":{},"133":{},"139":{},"150":{},"152":{},"155":{},"156":{},"157":{},"158":{},"161":{},"162":{},"163":{},"164":{},"167":{},"170":{},"173":{},"174":{},"175":{},"178":{},"181":{},"185":{},"187":{},"188":{},"189":{},"190":{},"191":{},"193":{},"195":{},"196":{},"199":{},"200":{},"201":{}},"component":{}}],["checkabl",{"_index":3111,"title":{},"name":{},"text":{"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["checkbox",{"_index":224,"title":{},"name":{},"text":{"4":{},"11":{},"14":{},"23":{},"29":{},"71":{},"77":{},"80":{},"90":{},"95":{},"139":{},"145":{},"148":{},"158":{},"163":{}},"component":{}}],["checker",{"_index":6263,"title":{"93-22":{}},"name":{},"text":{"93":{}},"component":{}}],["checkout",{"_index":1040,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["child",{"_index":1390,"title":{},"name":{},"text":{"23":{},"27":{},"40":{},"41":{},"42":{},"48":{},"60":{},"62":{},"90":{},"107":{},"108":{},"111":{},"115":{},"128":{},"130":{},"158":{},"175":{},"176":{},"177":{},"183":{},"196":{},"198":{}},"component":{}}],["childpag",{"_index":2408,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["childpage.setorganizationid(gettable().getorganizationidcolumn().getvalue(row",{"_index":2409,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["children",{"_index":4905,"title":{},"name":{},"text":{"54":{},"60":{},"65":{},"121":{},"128":{},"133":{},"189":{},"196":{},"201":{}},"component":{}}],["children.in",{"_index":5202,"title":{},"name":{},"text":{"60":{}},"component":{}}],["children.typ",{"_index":5188,"title":{},"name":{},"text":{"60":{}},"component":{}}],["chocol",{"_index":3053,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["chocolate.getvalues().add(new",{"_index":3084,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["chocolate.setcolorhexvalue(\"#94654c",{"_index":3100,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["chocolate.setgroupname(\"chocol",{"_index":3083,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["choic",{"_index":789,"title":{},"name":{},"text":{"19":{},"23":{},"39":{},"43":{},"59":{},"63":{},"84":{},"90":{},"106":{},"110":{},"127":{},"132":{},"152":{},"158":{},"174":{},"178":{},"195":{},"200":{}},"component":{}}],["choos",{"_index":596,"title":{"18-1":{},"85-1":{},"153-1":{}},"name":{},"text":{"17":{},"18":{},"19":{},"21":{},"23":{},"24":{},"29":{},"52":{},"59":{},"61":{},"62":{},"63":{},"83":{},"84":{},"85":{},"87":{},"89":{},"90":{},"95":{},"119":{},"127":{},"129":{},"130":{},"132":{},"151":{},"152":{},"153":{},"155":{},"157":{},"158":{},"163":{},"187":{},"195":{},"197":{},"198":{},"200":{}},"component":{}}],["chooser",{"_index":802,"title":{},"name":{},"text":{"19":{},"26":{},"34":{},"84":{},"101":{},"152":{},"172":{}},"component":{}}],["chosen",{"_index":809,"title":{},"name":{},"text":{"19":{},"24":{},"40":{},"63":{},"84":{},"89":{},"107":{},"132":{},"152":{},"157":{},"175":{},"200":{}},"component":{}}],["chrome",{"_index":2634,"title":{},"name":{},"text":{"26":{},"27":{},"45":{},"46":{},"52":{},"112":{},"113":{},"119":{},"180":{},"181":{},"187":{}},"component":{}}],["chrome’",{"_index":1068,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["chromium",{"_index":2497,"title":{},"name":{},"text":{"26":{},"27":{},"45":{},"112":{},"180":{}},"component":{}}],["chunk",{"_index":3694,"title":{},"name":{},"text":{"39":{},"46":{},"51":{},"106":{},"113":{},"118":{},"174":{},"181":{},"186":{}},"component":{}}],["circumst",{"_index":2818,"title":{},"name":{},"text":{"26":{}},"component":{}}],["citi",{"_index":1409,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["citycolumn",{"_index":1410,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["cityfield",{"_index":1992,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["clarifi",{"_index":2769,"title":{},"name":{},"text":{"26":{}},"component":{}}],["class",{"_index":244,"title":{"23-6":{},"23-7":{},"26-38":{},"29-3":{},"29-6":{},"40-3":{},"43-11":{},"48-2":{},"90-6":{},"90-7":{},"92-11":{},"93-9":{},"95-3":{},"95-6":{},"107-3":{},"110-11":{},"115-2":{},"158-6":{},"158-7":{},"163-3":{},"163-6":{},"175-3":{},"178-11":{},"183-2":{}},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"18":{},"20":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"85":{},"86":{},"88":{},"90":{},"92":{},"93":{},"94":{},"95":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"118":{},"119":{},"120":{},"122":{},"123":{},"125":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"138":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"153":{},"154":{},"156":{},"158":{},"162":{},"163":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"186":{},"187":{},"188":{},"190":{},"191":{},"192":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["class/interfac",{"_index":5484,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["classcastexcept",{"_index":5874,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["classeshavingbeanannot",{"_index":3718,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["classic",{"_index":39,"title":{"24":{},"54":{},"89":{},"100":{},"121":{},"157":{},"171":{},"189":{},"32-1":{},"48-5":{},"65-2":{},"92-16":{},"98-1":{},"115-5":{},"133-2":{},"166-1":{},"183-5":{},"201-2":{}},"name":{},"text":{"1":{},"18":{},"24":{},"26":{},"32":{},"48":{},"53":{},"56":{},"59":{},"60":{},"65":{},"67":{},"85":{},"89":{},"92":{},"93":{},"98":{},"100":{},"115":{},"120":{},"123":{},"127":{},"128":{},"133":{},"135":{},"153":{},"157":{},"166":{},"171":{},"183":{},"188":{},"191":{},"195":{},"196":{},"201":{}},"component":{}}],["classid",{"_index":2959,"title":{"28-6":{},"94-6":{},"162-6":{}},"name":{},"text":{"28":{},"94":{},"162":{}},"component":{}}],["classid(\"032f5ffb",{"_index":4862,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["classid(\"08832a97",{"_index":1742,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"08ccc68",{"_index":5347,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["classid(\"0b4d059d",{"_index":2289,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"18f7a78",{"_index":1476,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"1cbc9059",{"_index":1426,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"1cde38c1",{"_index":1717,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"2081b483",{"_index":1753,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"22789824",{"_index":2344,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"23c10251",{"_index":1370,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"23e1540",{"_index":1864,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"26612eb9",{"_index":1785,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"27a040ac",{"_index":1735,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"2a10bd00",{"_index":2279,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"2e53e50",{"_index":2368,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"303c0267",{"_index":564,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["classid(\"32b71aa6",{"_index":2189,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"3469046",{"_index":1747,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"359be835",{"_index":1909,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"37736ea5",{"_index":1346,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"3b30ebf1",{"_index":2163,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"3ea6ac2a",{"_index":1987,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"3fa1374b",{"_index":1382,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"478037fb",{"_index":4666,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["classid(\"4a8f5e0",{"_index":1796,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"4c1a0dea",{"_index":2254,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"4e15ce0",{"_index":2207,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"4e48c196",{"_index":2268,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"4fce42bf",{"_index":1307,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"504a4845",{"_index":2284,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"50df7a9d",{"_index":1299,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"54f3d730",{"_index":1483,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"55febc84",{"_index":1293,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"5f9d9363",{"_index":2064,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"6154090",{"_index":5943,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["classid(\"617ffd40",{"_index":1872,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"6366a23",{"_index":1879,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"68008603",{"_index":2261,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"6c5e0da2",{"_index":2178,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"70eda4c8",{"_index":1279,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"736450dd",{"_index":1759,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"73a4276f",{"_index":2122,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"7c602360",{"_index":1923,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"85f4dfb0",{"_index":2294,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"8679ade5",{"_index":1915,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"8893e1e4",{"_index":1854,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"8ac358f2",{"_index":1808,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"8dbfbe9d",{"_index":1316,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"8e18a673",{"_index":1765,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"9405937b",{"_index":1286,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"97c3ce",{"_index":2299,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"98af1bc6",{"_index":4839,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["classid(\"999c32e9",{"_index":2195,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"99c1c12a",{"_index":2216,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"99df594a",{"_index":1439,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"a278333c",{"_index":1978,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"a39ad408",{"_index":1453,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"a9137ad1",{"_index":1970,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"b20aad47",{"_index":2140,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"b9d0593",{"_index":1932,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"bbe8fae2",{"_index":1847,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"c6c9e644",{"_index":2273,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"cd4a7afd",{"_index":2358,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"ce791f14",{"_index":1953,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"d4dfce4f",{"_index":1997,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"d63bfcd6",{"_index":2304,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"d80625e3",{"_index":2145,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"e54548b8",{"_index":1777,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"e7efc084",{"_index":2135,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"effb3b69",{"_index":1829,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"f074181d",{"_index":2398,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"f278815a",{"_index":2212,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"fa879506",{"_index":1462,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"fcb5b155",{"_index":1771,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classid(\"fda7cd67",{"_index":4658,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["classid(\"fdcc7087",{"_index":2183,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["classifi",{"_index":5734,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["classinventori",{"_index":3714,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["classinventory.get",{"_index":3715,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["classinventory.getallknownsubclasses(iservice.class",{"_index":3717,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["classinventory.getknownannotatedtypes(bean.class",{"_index":3719,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["classload",{"_index":5401,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["classnam",{"_index":3800,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["classpath",{"_index":278,"title":{},"name":{},"text":{"4":{},"29":{},"40":{},"46":{},"52":{},"63":{},"71":{},"95":{},"107":{},"113":{},"119":{},"132":{},"139":{},"163":{},"175":{},"181":{},"187":{},"200":{}},"component":{}}],["claus",{"_index":2357,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["clazz",{"_index":5503,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["clazz(basicauthenticationmethod.class",{"_index":5528,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["clazz(configfilecredentialverifier.class",{"_index":5529,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["clazz(ipaddressfilter.class",{"_index":5520,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["clean",{"_index":776,"title":{"92-22":{}},"name":{},"text":{"19":{},"23":{},"36":{},"46":{},"60":{},"63":{},"84":{},"90":{},"103":{},"113":{},"128":{},"132":{},"152":{},"158":{},"168":{},"181":{},"196":{},"200":{}},"component":{}}],["cleaner",{"_index":2914,"title":{},"name":{},"text":{"27":{}},"component":{}}],["cleanup",{"_index":2434,"title":{"26-23":{}},"name":{},"text":{"26":{},"39":{},"44":{},"60":{},"106":{},"109":{},"128":{},"174":{},"179":{},"196":{}},"component":{}}],["cleanup:snapshot",{"_index":2610,"title":{},"name":{},"text":{"26":{}},"component":{}}],["clear",{"_index":2904,"title":{},"name":{},"text":{"27":{},"38":{},"40":{},"43":{},"46":{},"93":{},"105":{},"107":{},"110":{},"113":{},"124":{},"173":{},"175":{},"178":{},"181":{},"193":{}},"component":{}}],["cleartext",{"_index":3908,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["cli",{"_index":905,"title":{"46-10":{},"113-10":{},"181-10":{}},"name":{},"text":{"20":{},"46":{},"86":{},"113":{},"154":{},"181":{}},"component":{}}],["click",{"_index":14,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"94":{},"95":{},"99":{},"102":{},"103":{},"106":{},"119":{},"128":{},"132":{},"133":{},"138":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"167":{},"168":{},"170":{},"174":{},"187":{},"196":{},"200":{},"201":{}},"component":{}}],["clickabl",{"_index":2756,"title":{},"name":{},"text":{"26":{},"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["clicked\\n",{"_index":3120,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["clickhandl",{"_index":3184,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["clickjack",{"_index":4214,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["clickobject",{"_index":3185,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["clickobject.dataindex",{"_index":3189,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["clickobject.datasetindex",{"_index":3187,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["clickobject.xindex",{"_index":3190,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["clickobject.yindex",{"_index":3191,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["client",{"_index":353,"title":{"61":{},"129":{},"197":{},"61-12":{},"63-38":{},"63-39":{},"66-9":{},"66-10":{},"66-11":{},"66-13":{},"92-27":{},"129-12":{},"132-38":{},"132-39":{},"134-9":{},"134-10":{},"134-11":{},"134-13":{},"197-12":{},"200-38":{},"200-39":{},"202-9":{},"202-10":{},"202-11":{},"202-13":{}},"name":{"61":{},"129":{},"197":{}},"text":{"6":{},"8":{},"12":{},"14":{},"19":{},"23":{},"24":{},"26":{},"29":{},"32":{},"33":{},"38":{},"39":{},"40":{},"41":{},"43":{},"52":{},"53":{},"59":{},"61":{},"62":{},"63":{},"66":{},"72":{},"74":{},"78":{},"80":{},"84":{},"89":{},"90":{},"92":{},"95":{},"98":{},"99":{},"105":{},"106":{},"107":{},"110":{},"111":{},"119":{},"120":{},"127":{},"129":{},"130":{},"132":{},"134":{},"140":{},"142":{},"146":{},"148":{},"152":{},"157":{},"158":{},"160":{},"163":{},"166":{},"170":{},"173":{},"174":{},"175":{},"176":{},"178":{},"187":{},"188":{},"195":{},"197":{},"198":{},"200":{},"202":{}},"component":{}}],["client/backend",{"_index":6297,"title":{},"name":{},"text":{"93":{}},"component":{}}],["clientbuild",{"_index":6015,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["clientbuilder.property(restclientproperties.cookie_spec",{"_index":6017,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["clientbuilder.property(restclientproperties.proxy_uri",{"_index":6019,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["clientbuilder.register(new",{"_index":6080,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["clientnodeid",{"_index":4186,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["clientnotificationaddress",{"_index":5304,"title":{"61-7":{},"129-7":{},"197-7":{}},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["clientnotificationcollector",{"_index":4179,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["clientnotificationcollector.curr",{"_index":4181,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["clientnotificationcollector.current.get",{"_index":4185,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["clientnotificationdispatch",{"_index":5322,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["clientnotificationpol",{"_index":5312,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["clientnotificationregistri",{"_index":5311,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["clientruncontext",{"_index":3546,"title":{"41-4":{},"111-4":{},"176-4":{}},"name":{},"text":{"39":{},"41":{},"106":{},"111":{},"174":{},"176":{}},"component":{}}],["clientruncontexts.copycurr",{"_index":3596,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["clientsessionprovider.currentsession().getdesktop",{"_index":5337,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["client’",{"_index":4183,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["clipboard",{"_index":425,"title":{},"name":{},"text":{"11":{},"29":{},"77":{},"95":{},"145":{},"163":{}},"component":{}}],["clone",{"_index":510,"title":{},"name":{},"text":{"16":{},"22":{},"23":{},"36":{},"82":{},"88":{},"90":{},"103":{},"150":{},"156":{},"158":{},"168":{}},"component":{}}],["cloned/download",{"_index":1169,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["closabl",{"_index":2717,"title":{"27-11":{}},"name":{},"text":{"26":{}},"component":{}}],["close",{"_index":532,"title":{},"name":{},"text":{"16":{},"19":{},"23":{},"26":{},"27":{},"28":{},"39":{},"40":{},"44":{},"50":{},"60":{},"66":{},"82":{},"84":{},"90":{},"94":{},"100":{},"106":{},"107":{},"109":{},"117":{},"128":{},"134":{},"150":{},"152":{},"158":{},"162":{},"171":{},"174":{},"175":{},"179":{},"185":{},"196":{},"202":{}},"component":{}}],["close(messagecontext",{"_index":5561,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["closemenu",{"_index":4747,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["closer",{"_index":1073,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["cloud",{"_index":6291,"title":{},"name":{},"text":{"93":{}},"component":{}}],["clumsi",{"_index":3451,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["cluster",{"_index":3932,"title":{"61-9":{},"129-9":{},"197-9":{}},"name":{},"text":{"40":{},"61":{},"107":{},"129":{},"175":{},"197":{}},"component":{}}],["clusternotif",{"_index":5317,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["cn=localhost",{"_index":733,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["coalesc",{"_index":5306,"title":{"61-10":{},"129-10":{},"197-10":{}},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["coalesce(list",{"_index":5320,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["code",{"_index":81,"title":{"62":{},"130":{},"198":{},"3-2":{},"5-4":{},"20-4":{},"22-3":{},"22-6":{},"23-28":{},"28-3":{},"29-23":{},"33-2":{},"35-2":{},"36-5":{},"62-2":{},"62-6":{},"62-8":{},"65-9":{},"69-2":{},"70-4":{},"86-4":{},"88-3":{},"88-6":{},"90-28":{},"93-13":{},"94-3":{},"95-23":{},"99-2":{},"102-2":{},"103-5":{},"130-2":{},"130-6":{},"130-8":{},"133-9":{},"137-2":{},"138-4":{},"154-4":{},"156-3":{},"156-6":{},"158-28":{},"162-3":{},"163-23":{},"167-2":{},"168-5":{},"170-2":{},"198-2":{},"198-6":{},"198-8":{},"201-9":{}},"name":{"62":{},"130":{},"198":{}},"text":{"1":{},"3":{},"4":{},"5":{},"7":{},"11":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"46":{},"48":{},"51":{},"52":{},"53":{},"55":{},"56":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"70":{},"71":{},"73":{},"77":{},"82":{},"83":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"97":{},"98":{},"100":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"110":{},"111":{},"113":{},"115":{},"118":{},"119":{},"120":{},"122":{},"123":{},"124":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"141":{},"145":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"161":{},"162":{},"163":{},"165":{},"166":{},"168":{},"169":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"181":{},"183":{},"186":{},"187":{},"188":{},"190":{},"191":{},"193":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["codebas",{"_index":1176,"title":{"23-4":{},"90-4":{},"158-4":{}},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["codelookupcal",{"_index":5971,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["codepen",{"_index":920,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["codeservic",{"_index":5330,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["codetyp",{"_index":339,"title":{"7-1":{},"62-4":{},"62-7":{},"62-10":{},"73-1":{},"130-4":{},"130-7":{},"130-10":{},"141-1":{},"198-4":{},"198-7":{},"198-10":{}},"name":{},"text":{"5":{},"6":{},"7":{},"23":{},"28":{},"29":{},"61":{},"62":{},"65":{},"70":{},"72":{},"73":{},"90":{},"94":{},"95":{},"129":{},"130":{},"133":{},"138":{},"140":{},"141":{},"158":{},"162":{},"163":{},"197":{},"198":{},"201":{}},"component":{}}],["codetypestor",{"_index":5367,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["cog",{"_index":4820,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["collect",{"_index":1003,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"40":{},"41":{},"43":{},"46":{},"87":{},"89":{},"90":{},"92":{},"107":{},"110":{},"111":{},"113":{},"155":{},"157":{},"158":{},"175":{},"176":{},"178":{},"181":{}},"component":{}}],["collections.emptyset",{"_index":5560,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["collections.singleton(mycustomexample.class",{"_index":6002,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["collectionutil",{"_index":1259,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["collectionutility.arraylist(collectionutility.firstelement(notif",{"_index":5321,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["collectionutility.hashset(tables.getvalu",{"_index":1637,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["collector",{"_index":4180,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["collis",{"_index":5461,"title":{},"name":{},"text":{"63":{},"66":{},"132":{},"134":{},"200":{},"202":{}},"component":{}}],["colon",{"_index":3894,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["color",{"_index":910,"title":{"34":{},"101":{},"172":{},"33-6":{},"35-6":{},"56-3":{},"99-6":{},"102-6":{},"123-3":{},"167-6":{},"170-6":{},"191-3":{}},"name":{},"text":{"20":{},"26":{},"27":{},"33":{},"34":{},"35":{},"52":{},"56":{},"59":{},"86":{},"99":{},"101":{},"102":{},"119":{},"123":{},"127":{},"154":{},"167":{},"170":{},"172":{},"187":{},"191":{},"195":{}},"component":{}}],["coloropac",{"_index":6176,"title":{},"name":{},"text":{"92":{}},"component":{}}],["colors(@chart",{"_index":3131,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["colors.less",{"_index":4935,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["colorschem",{"_index":3170,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["colorschemes.colorschemeid.rainbow",{"_index":3171,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["column",{"_index":204,"title":{"5-3":{},"23-13":{},"29-22":{},"70-3":{},"90-13":{},"95-22":{},"138-3":{},"158-13":{},"163-22":{}},"name":{},"text":{"4":{},"5":{},"23":{},"29":{},"47":{},"48":{},"53":{},"59":{},"65":{},"70":{},"71":{},"90":{},"95":{},"114":{},"115":{},"120":{},"127":{},"133":{},"138":{},"139":{},"158":{},"163":{},"182":{},"183":{},"188":{},"195":{},"201":{}},"component":{}}],["com.example.net.socketfactori",{"_index":4372,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["com.sun.xml.w",{"_index":5412,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["com.sun.xml.ws.server.http.publishstatuspag",{"_index":5417,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["com.sun.xml.ws.server.http.publishwsdl",{"_index":5418,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["com.sun.xml.ws.transport.http.servlet.wsservlet",{"_index":5420,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["com.sun.xml.ws.transport.http.servlet.wsservletcontextlisten",{"_index":5419,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["com.sun.xml.ws:jaxw",{"_index":4008,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["combin",{"_index":1600,"title":{},"name":{},"text":{"23":{},"26":{},"59":{},"90":{},"92":{},"127":{},"158":{},"195":{}},"component":{}}],["combo",{"_index":2891,"title":{"27-10":{}},"name":{},"text":{"27":{}},"component":{}}],["come",{"_index":137,"title":{},"name":{},"text":{"3":{},"19":{},"21":{},"23":{},"26":{},"27":{},"29":{},"31":{},"40":{},"50":{},"52":{},"56":{},"60":{},"62":{},"69":{},"84":{},"87":{},"90":{},"93":{},"95":{},"97":{},"107":{},"117":{},"119":{},"123":{},"124":{},"128":{},"130":{},"137":{},"152":{},"155":{},"158":{},"161":{},"163":{},"165":{},"175":{},"185":{},"187":{},"191":{},"193":{},"196":{},"198":{}},"component":{}}],["comma",{"_index":882,"title":{},"name":{},"text":{"19":{},"40":{},"84":{},"107":{},"152":{},"175":{}},"component":{}}],["command",{"_index":599,"title":{"46-10":{},"113-10":{},"181-10":{}},"name":{},"text":{"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"40":{},"46":{},"48":{},"60":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"107":{},"113":{},"115":{},"128":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"175":{},"181":{},"183":{},"196":{}},"component":{}}],["commenc",{"_index":3423,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["comment",{"_index":284,"title":{},"name":{},"text":{"4":{},"29":{},"48":{},"63":{},"71":{},"95":{},"115":{},"132":{},"139":{},"163":{},"183":{},"200":{}},"component":{}}],["commit",{"_index":2657,"title":{},"name":{},"text":{"26":{},"41":{},"61":{},"111":{},"129":{},"176":{},"197":{}},"component":{}}],["common",{"_index":1340,"title":{},"name":{},"text":{"23":{},"26":{},"32":{},"39":{},"41":{},"49":{},"50":{},"59":{},"60":{},"62":{},"63":{},"64":{},"90":{},"98":{},"106":{},"111":{},"116":{},"117":{},"127":{},"128":{},"130":{},"131":{},"132":{},"158":{},"166":{},"174":{},"176":{},"184":{},"185":{},"195":{},"196":{},"198":{},"199":{},"200":{}},"component":{}}],["commonli",{"_index":1547,"title":{},"name":{},"text":{"23":{},"64":{},"90":{},"131":{},"158":{},"199":{}},"component":{}}],["commun",{"_index":658,"title":{},"name":{},"text":{"18":{},"19":{},"21":{},"24":{},"29":{},"40":{},"43":{},"61":{},"63":{},"66":{},"84":{},"85":{},"87":{},"89":{},"95":{},"107":{},"110":{},"129":{},"132":{},"134":{},"152":{},"153":{},"155":{},"157":{},"163":{},"175":{},"178":{},"197":{},"200":{},"202":{}},"component":{}}],["compact",{"_index":4830,"title":{"53-5":{},"53-7":{},"120-5":{},"120-7":{},"188-5":{},"188-7":{}},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["compactbean",{"_index":4850,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["compactline(\"label",{"_index":4853,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["compani",{"_index":1179,"title":{"23-15":{},"23-39":{},"90-15":{},"90-39":{},"158-15":{},"158-39":{}},"name":{},"text":{"23":{},"43":{},"90":{},"110":{},"158":{},"178":{}},"component":{}}],["company.com/mi",{"_index":3951,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["companyid",{"_index":4307,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["company’",{"_index":2115,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["compar",{"_index":1212,"title":{},"name":{},"text":{"23":{},"32":{},"43":{},"44":{},"58":{},"60":{},"64":{},"90":{},"93":{},"98":{},"109":{},"110":{},"126":{},"128":{},"131":{},"158":{},"166":{},"178":{},"179":{},"194":{},"196":{},"199":{}},"component":{}}],["comparison",{"_index":1328,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["compat",{"_index":1087,"title":{},"name":{},"text":{"22":{},"26":{},"27":{},"52":{},"62":{},"88":{},"119":{},"130":{},"156":{},"187":{},"198":{}},"component":{}}],["compet",{"_index":3522,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["compil",{"_index":622,"title":{},"name":{},"text":{"17":{},"19":{},"23":{},"24":{},"26":{},"28":{},"29":{},"63":{},"83":{},"84":{},"89":{},"90":{},"93":{},"94":{},"95":{},"132":{},"151":{},"152":{},"157":{},"158":{},"162":{},"163":{},"200":{}},"component":{}}],["complet",{"_index":47,"title":{"28-3":{},"39-19":{},"94-3":{},"106-19":{},"162-3":{},"174-19":{}},"name":{},"text":{"1":{},"14":{},"16":{},"17":{},"18":{},"20":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"34":{},"38":{},"39":{},"40":{},"41":{},"43":{},"46":{},"48":{},"50":{},"53":{},"58":{},"59":{},"61":{},"63":{},"66":{},"80":{},"82":{},"83":{},"85":{},"86":{},"87":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"97":{},"100":{},"101":{},"105":{},"106":{},"107":{},"110":{},"111":{},"113":{},"115":{},"117":{},"120":{},"124":{},"126":{},"127":{},"128":{},"129":{},"132":{},"134":{},"135":{},"148":{},"150":{},"151":{},"153":{},"154":{},"155":{},"157":{},"158":{},"160":{},"162":{},"163":{},"165":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"181":{},"183":{},"185":{},"188":{},"193":{},"194":{},"195":{},"196":{},"197":{},"200":{},"202":{}},"component":{}}],["complex",{"_index":1187,"title":{"23-34":{},"90-34":{},"158-34":{}},"name":{},"text":{"23":{},"26":{},"32":{},"39":{},"43":{},"48":{},"60":{},"64":{},"90":{},"98":{},"106":{},"110":{},"115":{},"128":{},"131":{},"158":{},"166":{},"174":{},"178":{},"183":{},"196":{},"199":{}},"component":{}}],["complianc",{"_index":5389,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["complic",{"_index":5117,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["compon",{"_index":132,"title":{"6-3":{},"7-3":{},"8-3":{},"10-3":{},"12-3":{},"13-3":{},"14-3":{},"23-5":{},"29-13":{},"29-16":{},"29-19":{},"53-10":{},"61-4":{},"63-13":{},"72-3":{},"73-3":{},"74-3":{},"76-3":{},"78-3":{},"79-3":{},"80-3":{},"90-5":{},"95-13":{},"95-16":{},"95-19":{},"120-10":{},"129-4":{},"132-13":{},"140-3":{},"141-3":{},"142-3":{},"144-3":{},"146-3":{},"147-3":{},"148-3":{},"158-5":{},"163-13":{},"163-16":{},"163-19":{},"188-10":{},"197-4":{},"200-13":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"19":{},"23":{},"26":{},"29":{},"31":{},"39":{},"40":{},"46":{},"48":{},"53":{},"54":{},"60":{},"63":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"84":{},"90":{},"93":{},"95":{},"97":{},"106":{},"107":{},"113":{},"115":{},"120":{},"121":{},"128":{},"132":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"152":{},"158":{},"163":{},"165":{},"174":{},"175":{},"181":{},"183":{},"188":{},"189":{},"196":{},"200":{}},"component":{}}],["composit",{"_index":4590,"title":{"48-4":{},"115-4":{},"183-4":{}},"name":{},"text":{"48":{},"92":{},"93":{},"115":{},"183":{}},"component":{}}],["compound",{"_index":1021,"title":{},"name":{},"text":{"21":{},"24":{},"87":{},"89":{},"155":{},"157":{}},"component":{}}],["comprehens",{"_index":872,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["compress",{"_index":4081,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["comput",{"_index":3420,"title":{},"name":{},"text":{"39":{},"40":{},"59":{},"63":{},"65":{},"93":{},"106":{},"107":{},"127":{},"132":{},"133":{},"174":{},"175":{},"195":{},"200":{},"201":{}},"component":{}}],["computation’",{"_index":3435,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["computeexclusivekey",{"_index":1714,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["concentr",{"_index":1213,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["concept",{"_index":1172,"title":{"63-21":{},"132-21":{},"200-21":{}},"name":{},"text":{"22":{},"23":{},"24":{},"32":{},"43":{},"48":{},"56":{},"60":{},"65":{},"88":{},"89":{},"90":{},"98":{},"110":{},"115":{},"123":{},"128":{},"133":{},"156":{},"157":{},"158":{},"166":{},"178":{},"183":{},"191":{},"196":{},"201":{}},"component":{}}],["concern",{"_index":5989,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["concis",{"_index":4262,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["conclud",{"_index":1690,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["conclus",{"_index":3163,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["concret",{"_index":1564,"title":{},"name":{},"text":{"23":{},"40":{},"63":{},"64":{},"90":{},"93":{},"107":{},"131":{},"132":{},"158":{},"175":{},"199":{},"200":{}},"component":{}}],["concurr",{"_index":3429,"title":{},"name":{},"text":{"39":{},"63":{},"106":{},"132":{},"174":{},"200":{}},"component":{}}],["condens",{"_index":4849,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["condit",{"_index":3368,"title":{"39-26":{},"39-27":{},"106-26":{},"106-27":{},"174-26":{},"174-27":{}},"name":{},"text":{"38":{},"39":{},"40":{},"105":{},"106":{},"107":{},"173":{},"174":{},"175":{}},"component":{}}],["conf",{"_index":860,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["confid",{"_index":6268,"title":{},"name":{},"text":{"93":{},"124":{},"193":{}},"component":{}}],["config",{"_index":1102,"title":{"23-19":{},"40-22":{},"90-19":{},"107-22":{},"158-19":{},"175-22":{}},"name":{},"text":{"22":{},"23":{},"26":{},"33":{},"35":{},"39":{},"40":{},"43":{},"44":{},"46":{},"56":{},"59":{},"63":{},"66":{},"88":{},"90":{},"92":{},"99":{},"102":{},"106":{},"107":{},"109":{},"110":{},"113":{},"123":{},"127":{},"132":{},"156":{},"158":{},"167":{},"170":{},"174":{},"175":{},"178":{},"179":{},"181":{},"191":{},"195":{},"200":{}},"component":{}}],["config.bubbl",{"_index":2547,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.data.dataset[i].typ",{"_index":2560,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.data.datasets[i].pointbordercolor",{"_index":2561,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.data.datasets[i].pointhoverbackgroundcolor",{"_index":2557,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.data.datasets[i].pointhoverbordercolor",{"_index":2562,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.entri",{"_index":1104,"title":{},"name":{},"text":{"22":{},"46":{},"56":{},"88":{},"113":{},"123":{},"156":{},"181":{},"191":{}},"component":{}}],["config.fulfil",{"_index":2549,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.getpropertyvalue(databaseautocreateproperty.class",{"_index":1611,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["config.getpropertyvalue(databaseautopopulateproperty.class",{"_index":1624,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["config.getpropertyvalue(jdbcmappingnameproperty.class",{"_index":1552,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["config.getpropertyvalue(mycustomtimeoutproperty.class",{"_index":3822,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["config.opt",{"_index":3182,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["config.options.autocolor",{"_index":3179,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["config.options.bubbl",{"_index":2548,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.fulfil",{"_index":2550,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.salesfunnel",{"_index":2552,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.scal",{"_index":3180,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["config.options.scale.minspacebetweentick",{"_index":2536,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.scales.[id].aftercalculatelabelrot",{"_index":2539,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.scales.[id].aftercalculatetickrot",{"_index":2538,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.scales.minspacebetweenxtick",{"_index":2532,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.scales.minspacebetweenytick",{"_index":2534,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.scales.r.minspacebetweentick",{"_index":2537,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.scales.x.minspacebetweentick",{"_index":2533,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.scales.y.minspacebetweentick",{"_index":2535,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.speedo",{"_index":2554,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.options.venn",{"_index":2556,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.properti",{"_index":467,"title":{},"name":{},"text":{"14":{},"19":{},"23":{},"29":{},"40":{},"43":{},"56":{},"63":{},"80":{},"84":{},"90":{},"95":{},"107":{},"110":{},"123":{},"132":{},"148":{},"152":{},"158":{},"163":{},"175":{},"178":{},"191":{},"200":{}},"component":{}}],["config.salesfunnel",{"_index":2551,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.speedo",{"_index":2553,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.typ",{"_index":2558,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.venn",{"_index":2555,"title":{},"name":{},"text":{"26":{}},"component":{}}],["config.withautocolor(fals",{"_index":3102,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["configfilecredentialverifi",{"_index":5387,"title":{"63-54":{},"132-54":{},"200-54":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["configur",{"_index":469,"title":{"22-14":{},"23-46":{},"33-4":{},"35-4":{},"39-33":{},"40-18":{},"40-21":{},"43-5":{},"44-3":{},"44-5":{},"46-3":{},"46-8":{},"63-6":{},"63-8":{},"63-9":{},"63-12":{},"63-24":{},"63-26":{},"63-39":{},"88-14":{},"90-46":{},"99-4":{},"102-4":{},"106-33":{},"107-18":{},"107-21":{},"109-3":{},"109-5":{},"110-5":{},"113-3":{},"113-8":{},"132-6":{},"132-8":{},"132-9":{},"132-12":{},"132-24":{},"132-26":{},"132-39":{},"156-14":{},"158-46":{},"167-4":{},"170-4":{},"174-33":{},"175-18":{},"175-21":{},"178-5":{},"179-3":{},"179-5":{},"181-3":{},"181-8":{},"200-6":{},"200-8":{},"200-9":{},"200-12":{},"200-24":{},"200-26":{},"200-39":{}},"name":{},"text":{"14":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"32":{},"39":{},"40":{},"43":{},"44":{},"46":{},"47":{},"53":{},"57":{},"60":{},"62":{},"63":{},"65":{},"66":{},"80":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"98":{},"106":{},"107":{},"109":{},"110":{},"113":{},"114":{},"120":{},"124":{},"125":{},"128":{},"130":{},"132":{},"133":{},"134":{},"148":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"166":{},"174":{},"175":{},"178":{},"179":{},"181":{},"182":{},"188":{},"192":{},"193":{},"196":{},"198":{},"200":{},"201":{},"202":{}},"component":{}}],["configurableproxyselector",{"_index":3957,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["configurations/st",{"_index":2871,"title":{},"name":{},"text":{"26":{}},"component":{}}],["configureclientbuilder(clientbuild",{"_index":6014,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["confirm",{"_index":518,"title":{},"name":{},"text":{"16":{},"17":{},"19":{},"21":{},"24":{},"53":{},"82":{},"83":{},"84":{},"87":{},"89":{},"120":{},"150":{},"151":{},"152":{},"155":{},"157":{},"188":{}},"component":{}}],["conflict",{"_index":4803,"title":{},"name":{},"text":{"52":{},"62":{},"119":{},"130":{},"187":{},"198":{}},"component":{}}],["conform",{"_index":3883,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["confus",{"_index":2641,"title":{},"name":{},"text":{"26":{},"58":{},"126":{},"194":{}},"component":{}}],["congratul",{"_index":1006,"title":{},"name":{},"text":{"21":{},"24":{},"87":{},"89":{},"155":{},"157":{}},"component":{}}],["connect",{"_index":806,"title":{"44-4":{},"109-4":{},"179-4":{}},"name":{},"text":{"19":{},"21":{},"23":{},"37":{},"40":{},"44":{},"63":{},"66":{},"84":{},"87":{},"90":{},"92":{},"104":{},"107":{},"109":{},"132":{},"134":{},"152":{},"155":{},"158":{},"169":{},"175":{},"179":{},"200":{},"202":{}},"component":{}}],["connector",{"_index":522,"title":{},"name":{},"text":{"16":{},"17":{},"19":{},"24":{},"66":{},"82":{},"83":{},"84":{},"89":{},"150":{},"151":{},"152":{},"157":{}},"component":{}}],["consecut",{"_index":1211,"title":{},"name":{},"text":{"23":{},"90":{},"113":{},"158":{},"181":{}},"component":{}}],["consequ",{"_index":1271,"title":{},"name":{},"text":{"23":{},"26":{},"63":{},"90":{},"132":{},"158":{},"200":{}},"component":{}}],["consid",{"_index":276,"title":{},"name":{},"text":{"4":{},"23":{},"26":{},"29":{},"40":{},"43":{},"57":{},"58":{},"59":{},"60":{},"61":{},"64":{},"71":{},"90":{},"92":{},"93":{},"95":{},"107":{},"110":{},"125":{},"126":{},"127":{},"128":{},"129":{},"131":{},"139":{},"158":{},"163":{},"175":{},"178":{},"192":{},"194":{},"195":{},"196":{},"197":{},"199":{}},"component":{}}],["consist",{"_index":171,"title":{"27-7":{}},"name":{},"text":{"3":{},"16":{},"17":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"31":{},"32":{},"36":{},"38":{},"40":{},"47":{},"63":{},"69":{},"82":{},"83":{},"87":{},"88":{},"89":{},"90":{},"93":{},"97":{},"98":{},"103":{},"105":{},"107":{},"114":{},"132":{},"137":{},"150":{},"151":{},"155":{},"156":{},"157":{},"158":{},"165":{},"166":{},"168":{},"173":{},"175":{},"182":{},"200":{}},"component":{}}],["consol",{"_index":548,"title":{"63-16":{},"132-16":{},"200-16":{}},"name":{},"text":{"16":{},"17":{},"24":{},"26":{},"39":{},"63":{},"82":{},"83":{},"89":{},"106":{},"132":{},"150":{},"151":{},"157":{},"174":{},"200":{}},"component":{}}],["console.log('button",{"_index":5255,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["console.log('properti",{"_index":5268,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["console.log('seg",{"_index":3192,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["console.log(event.foo",{"_index":5261,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["console.log(field.labelvis",{"_index":5234,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["console.log(groupbox.fields[0",{"_index":5245,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["consolid",{"_index":5083,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["const",{"_index":1090,"title":{},"name":{},"text":{"22":{},"46":{},"60":{},"88":{},"113":{},"128":{},"156":{},"181":{},"196":{}},"component":{}}],["const:nam",{"_index":5225,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["const:on_field",{"_index":5226,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["constant",{"_index":1846,"title":{"60-4":{},"92-13":{},"93-11":{},"128-4":{},"196-4":{}},"name":{},"text":{"23":{},"26":{},"40":{},"52":{},"60":{},"64":{},"90":{},"92":{},"93":{},"107":{},"119":{},"128":{},"131":{},"158":{},"175":{},"187":{},"196":{},"199":{}},"component":{}}],["constraint",{"_index":1577,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["construct",{"_index":4148,"title":{},"name":{},"text":{"41":{},"56":{},"111":{},"123":{},"176":{},"191":{}},"component":{}}],["constructor",{"_index":938,"title":{"40-11":{},"107-11":{},"175-11":{}},"name":{},"text":{"20":{},"22":{},"23":{},"36":{},"38":{},"40":{},"55":{},"59":{},"60":{},"64":{},"86":{},"90":{},"100":{},"103":{},"105":{},"107":{},"122":{},"127":{},"128":{},"131":{},"154":{},"158":{},"168":{},"171":{},"173":{},"175":{},"190":{},"195":{},"196":{},"199":{}},"component":{}}],["constructor’",{"_index":3351,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["consult",{"_index":2935,"title":{},"name":{},"text":{"27":{},"44":{},"92":{},"93":{},"109":{},"113":{},"179":{},"181":{}},"component":{}}],["consum",{"_index":2968,"title":{"63-32":{},"132-32":{},"200-32":{}},"name":{},"text":{"28":{},"32":{},"37":{},"39":{},"40":{},"46":{},"54":{},"60":{},"63":{},"65":{},"66":{},"94":{},"98":{},"104":{},"106":{},"107":{},"113":{},"121":{},"128":{},"132":{},"133":{},"134":{},"162":{},"166":{},"169":{},"174":{},"175":{},"181":{},"189":{},"196":{},"200":{},"201":{},"202":{}},"component":{}}],["consumpt",{"_index":3929,"title":{},"name":{},"text":{"40":{},"93":{},"107":{},"113":{},"175":{},"181":{}},"component":{}}],["contact",{"_index":497,"title":{"16-4":{},"16-6":{},"23-1":{},"23-14":{},"82-4":{},"82-6":{},"90-1":{},"90-14":{},"150-4":{},"150-6":{},"158-1":{},"158-14":{}},"name":{},"text":{"16":{},"21":{},"22":{},"23":{},"24":{},"40":{},"44":{},"82":{},"87":{},"88":{},"89":{},"90":{},"107":{},"109":{},"150":{},"155":{},"156":{},"157":{},"158":{},"175":{},"179":{}},"component":{}}],["contactinfobox",{"_index":1758,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contactoutlin",{"_index":563,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["contactoutlineviewbutton",{"_index":1265,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.cli",{"_index":1227,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.database.autocr",{"_index":1540,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.database.autocreate=tru",{"_index":1530,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.database.autopopulate=tru",{"_index":1531,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.database.jdbc.mappingnam",{"_index":1561,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.database.jdbc.mappingname=jdbc:derby:memory:contact",{"_index":1529,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.serv",{"_index":1230,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.server.app.dev",{"_index":1527,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.shar",{"_index":1232,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contacts.superuser=system",{"_index":1532,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["contain",{"_index":192,"title":{"19-1":{},"63-4":{},"63-5":{},"84-1":{},"132-4":{},"132-5":{},"152-1":{},"200-4":{},"200-5":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"18":{},"19":{},"20":{},"22":{},"23":{},"26":{},"27":{},"29":{},"30":{},"32":{},"36":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"84":{},"85":{},"86":{},"88":{},"90":{},"92":{},"93":{},"95":{},"96":{},"98":{},"103":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"116":{},"117":{},"118":{},"119":{},"123":{},"124":{},"125":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"152":{},"153":{},"154":{},"156":{},"158":{},"163":{},"164":{},"166":{},"168":{},"169":{},"173":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"184":{},"185":{},"186":{},"187":{},"191":{},"192":{},"193":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["containerbasedauthenticationmethod",{"_index":5386,"title":{"63-52":{},"132-52":{},"200-52":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["containerrequestfilt",{"_index":6087,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["containerresponsefilt",{"_index":6088,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["container’",{"_index":3668,"title":{},"name":{},"text":{"39":{},"63":{},"106":{},"132":{},"174":{},"200":{}},"component":{}}],["content",{"_index":214,"title":{"29-20":{},"43-4":{},"95-20":{},"110-4":{},"163-20":{},"178-4":{}},"name":{},"text":{"4":{},"5":{},"6":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"26":{},"29":{},"33":{},"35":{},"40":{},"43":{},"46":{},"51":{},"53":{},"55":{},"60":{},"63":{},"64":{},"70":{},"71":{},"72":{},"83":{},"84":{},"85":{},"86":{},"87":{},"89":{},"90":{},"92":{},"95":{},"99":{},"102":{},"107":{},"110":{},"113":{},"118":{},"120":{},"122":{},"128":{},"131":{},"132":{},"138":{},"139":{},"140":{},"151":{},"152":{},"153":{},"154":{},"155":{},"157":{},"158":{},"163":{},"167":{},"170":{},"175":{},"178":{},"181":{},"186":{},"188":{},"190":{},"196":{},"199":{},"200":{}},"component":{}}],["contentsecuritypolicyreporthandl",{"_index":4230,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["contenttyp",{"_index":3313,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["context",{"_index":201,"title":{},"name":{"41":{},"111":{},"176":{}},"text":{"4":{},"5":{},"7":{},"8":{},"10":{},"12":{},"13":{},"19":{},"23":{},"26":{},"29":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"46":{},"48":{},"51":{},"53":{},"63":{},"66":{},"70":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"84":{},"90":{},"95":{},"105":{},"106":{},"107":{},"108":{},"109":{},"111":{},"113":{},"115":{},"118":{},"120":{},"127":{},"132":{},"134":{},"138":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"152":{},"158":{},"163":{},"173":{},"174":{},"175":{},"176":{},"177":{},"179":{},"181":{},"183":{},"186":{},"188":{},"195":{},"200":{},"202":{}},"component":{}}],["context.get(\"cid",{"_index":5569,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["context.gethttpresponseheader(\"x",{"_index":5618,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["context.gethttpstatuscod",{"_index":5616,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["context.getport().ping(\"hello",{"_index":5614,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["context.gettargetmethod().getdeclaringclass().getsimplenam",{"_index":3802,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["context.gettargetmethod().getnam",{"_index":3805,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["context.gettargetobject",{"_index":3801,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["context.gettargetobject().getclass().getsimplenam",{"_index":3803,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["context.proce",{"_index":3809,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["context.put(\"cid",{"_index":5563,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["context.run(runn",{"_index":1618,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["context.setscope(\"cid",{"_index":5565,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["context’",{"_index":3481,"title":{},"name":{},"text":{"39":{},"41":{},"63":{},"106":{},"111":{},"132":{},"174":{},"176":{},"200":{}},"component":{}}],["continu",{"_index":49,"title":{},"name":{},"text":{"1":{},"16":{},"17":{},"21":{},"23":{},"24":{},"26":{},"29":{},"39":{},"40":{},"46":{},"63":{},"82":{},"83":{},"87":{},"89":{},"90":{},"95":{},"106":{},"107":{},"113":{},"132":{},"135":{},"150":{},"151":{},"155":{},"157":{},"158":{},"163":{},"174":{},"175":{},"181":{},"200":{}},"component":{}}],["contract",{"_index":5492,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["contrast",{"_index":1270,"title":{},"name":{},"text":{"23":{},"39":{},"59":{},"90":{},"106":{},"127":{},"158":{},"174":{},"195":{}},"component":{}}],["contribut",{"_index":3670,"title":{"48-9":{},"115-9":{},"183-9":{}},"name":{},"text":{"39":{},"48":{},"57":{},"63":{},"66":{},"106":{},"115":{},"125":{},"132":{},"134":{},"174":{},"183":{},"192":{},"200":{},"202":{}},"component":{}}],["contributor",{"_index":5997,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["control",{"_index":450,"title":{"63-18":{},"132-18":{},"200-18":{}},"name":{},"text":{"14":{},"18":{},"23":{},"27":{},"29":{},"39":{},"40":{},"41":{},"43":{},"46":{},"50":{},"56":{},"60":{},"63":{},"66":{},"80":{},"85":{},"90":{},"95":{},"106":{},"107":{},"110":{},"111":{},"113":{},"117":{},"123":{},"127":{},"128":{},"132":{},"134":{},"148":{},"153":{},"158":{},"163":{},"174":{},"175":{},"176":{},"178":{},"181":{},"185":{},"191":{},"195":{},"196":{},"200":{},"202":{}},"component":{}}],["conveni",{"_index":629,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"23":{},"24":{},"39":{},"43":{},"46":{},"57":{},"60":{},"63":{},"64":{},"83":{},"85":{},"87":{},"88":{},"89":{},"90":{},"106":{},"110":{},"113":{},"125":{},"128":{},"131":{},"132":{},"151":{},"153":{},"155":{},"156":{},"157":{},"158":{},"174":{},"178":{},"181":{},"192":{},"196":{},"199":{},"200":{}},"component":{}}],["convent",{"_index":251,"title":{"64-7":{},"66-1":{},"131-7":{},"134-1":{},"199-7":{},"202-1":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"13":{},"17":{},"21":{},"23":{},"24":{},"29":{},"40":{},"55":{},"64":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"83":{},"87":{},"89":{},"90":{},"95":{},"107":{},"122":{},"131":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"151":{},"155":{},"157":{},"158":{},"163":{},"175":{},"190":{},"199":{}},"component":{}}],["convers",{"_index":2364,"title":{},"name":{},"text":{"23":{},"46":{},"59":{},"90":{},"113":{},"127":{},"158":{},"181":{},"195":{}},"component":{}}],["convert",{"_index":2725,"title":{},"name":{},"text":{"26":{},"44":{},"46":{},"51":{},"58":{},"63":{},"64":{},"109":{},"113":{},"118":{},"126":{},"131":{},"132":{},"179":{},"181":{},"186":{},"194":{},"199":{},"200":{}},"component":{}}],["cooki",{"_index":3880,"title":{"43-5":{},"110-5":{},"178-5":{}},"name":{},"text":{"40":{},"43":{},"56":{},"107":{},"110":{},"123":{},"175":{},"178":{},"191":{}},"component":{}}],["cookieaccesscontrol",{"_index":3877,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["cookiespecs.standard",{"_index":6018,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["coordin",{"_index":2918,"title":{},"name":{},"text":{"27":{},"63":{},"132":{},"200":{}},"component":{}}],["copi",{"_index":424,"title":{},"name":{},"text":{"11":{},"19":{},"22":{},"23":{},"29":{},"34":{},"39":{},"41":{},"42":{},"44":{},"46":{},"60":{},"63":{},"77":{},"84":{},"88":{},"90":{},"95":{},"101":{},"106":{},"108":{},"109":{},"111":{},"113":{},"128":{},"132":{},"145":{},"152":{},"156":{},"158":{},"163":{},"172":{},"174":{},"176":{},"177":{},"179":{},"181":{},"196":{},"200":{}},"component":{}}],["copycssifgreat",{"_index":6177,"title":{},"name":{},"text":{"92":{}},"component":{}}],["copycurr",{"_index":4153,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["core",{"_index":827,"title":{},"name":{},"text":{"19":{},"20":{},"26":{},"33":{},"35":{},"37":{},"39":{},"40":{},"46":{},"56":{},"66":{},"84":{},"86":{},"92":{},"99":{},"102":{},"104":{},"106":{},"107":{},"113":{},"123":{},"134":{},"152":{},"154":{},"160":{},"167":{},"169":{},"170":{},"174":{},"175":{},"181":{},"191":{},"202":{}},"component":{}}],["core.j",{"_index":928,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["corepools",{"_index":3996,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["corner",{"_index":211,"title":{},"name":{},"text":{"4":{},"16":{},"26":{},"27":{},"29":{},"46":{},"71":{},"82":{},"95":{},"113":{},"139":{},"150":{},"163":{},"181":{}},"component":{}}],["corpor",{"_index":5309,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["correct",{"_index":2161,"title":{},"name":{},"text":{"23":{},"40":{},"51":{},"52":{},"58":{},"61":{},"64":{},"66":{},"90":{},"92":{},"93":{},"107":{},"118":{},"119":{},"126":{},"128":{},"129":{},"131":{},"134":{},"158":{},"175":{},"186":{},"187":{},"194":{},"196":{},"197":{},"199":{},"202":{}},"component":{}}],["correctli",{"_index":2912,"title":{},"name":{},"text":{"27":{},"28":{},"46":{},"59":{},"62":{},"94":{},"113":{},"124":{},"127":{},"130":{},"162":{},"181":{},"193":{},"195":{},"198":{}},"component":{}}],["correctly\").show",{"_index":4707,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["correl",{"_index":5374,"title":{"63-28":{},"63-38":{},"132-28":{},"132-38":{},"200-28":{},"200-38":{}},"name":{},"text":{"63":{},"66":{},"132":{},"134":{},"200":{},"202":{}},"component":{}}],["correlationid",{"_index":5568,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["correlationidhandl",{"_index":5530,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["correlationidlogg",{"_index":5567,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["correlationidporttyp",{"_index":5570,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["correspond",{"_index":286,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"10":{},"16":{},"19":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"40":{},"43":{},"47":{},"48":{},"58":{},"61":{},"62":{},"63":{},"64":{},"65":{},"70":{},"71":{},"75":{},"76":{},"82":{},"84":{},"88":{},"89":{},"90":{},"92":{},"94":{},"95":{},"107":{},"110":{},"114":{},"115":{},"126":{},"129":{},"130":{},"131":{},"132":{},"133":{},"138":{},"139":{},"143":{},"144":{},"150":{},"152":{},"156":{},"157":{},"158":{},"162":{},"163":{},"175":{},"178":{},"182":{},"183":{},"194":{},"197":{},"198":{},"199":{},"200":{},"201":{}},"component":{}}],["cost",{"_index":4002,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["couldn’t",{"_index":2626,"title":{},"name":{},"text":{"26":{}},"component":{}}],["count",{"_index":3626,"title":{},"name":{},"text":{"39":{},"40":{},"53":{},"106":{},"107":{},"120":{},"174":{},"175":{},"188":{}},"component":{}}],["counter",{"_index":5987,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["countri",{"_index":258,"title":{"23-11":{},"90-11":{},"158-11":{}},"name":{},"text":{"4":{},"9":{},"23":{},"29":{},"71":{},"75":{},"90":{},"95":{},"139":{},"143":{},"158":{},"163":{}},"component":{}}],["country.getdisplaycountri",{"_index":1362,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["countrycod",{"_index":1358,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["countrycolumn",{"_index":1412,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["countryfield",{"_index":2002,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["countrylookupcal",{"_index":1345,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["countrylookupcall.class",{"_index":1459,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["cours",{"_index":3436,"title":{},"name":{},"text":{"39":{},"41":{},"43":{},"56":{},"63":{},"106":{},"110":{},"111":{},"123":{},"132":{},"174":{},"176":{},"178":{},"191":{},"200":{}},"component":{}}],["cover",{"_index":1214,"title":{},"name":{},"text":{"23":{},"62":{},"90":{},"130":{},"158":{},"198":{}},"component":{}}],["crash",{"_index":3930,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["crate",{"_index":408,"title":{},"name":{},"text":{"9":{},"75":{},"143":{}},"component":{}}],["cream",{"_index":3015,"title":{},"name":{},"text":{"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["creat",{"_index":130,"title":{"33":{},"35":{},"36":{},"99":{},"102":{},"103":{},"167":{},"168":{},"170":{},"5-2":{},"5-3":{},"5-4":{},"7-3":{},"8-3":{},"10-3":{},"12-3":{},"13-3":{},"14-3":{},"17-4":{},"19-2":{},"19-4":{},"21-6":{},"23-4":{},"23-10":{},"23-11":{},"23-12":{},"23-17":{},"23-35":{},"23-42":{},"24-7":{},"29-3":{},"29-4":{},"29-13":{},"29-16":{},"29-19":{},"29-21":{},"29-22":{},"29-23":{},"36-6":{},"41-1":{},"52-3":{},"60-2":{},"60-3":{},"61-12":{},"70-2":{},"70-3":{},"70-4":{},"73-3":{},"74-3":{},"76-3":{},"78-3":{},"79-3":{},"80-3":{},"83-4":{},"84-2":{},"84-4":{},"87-6":{},"89-7":{},"90-4":{},"90-10":{},"90-11":{},"90-12":{},"90-17":{},"90-35":{},"90-42":{},"95-3":{},"95-4":{},"95-13":{},"95-16":{},"95-19":{},"95-21":{},"95-22":{},"95-23":{},"103-6":{},"111-1":{},"119-3":{},"128-2":{},"128-3":{},"129-12":{},"138-2":{},"138-3":{},"138-4":{},"141-3":{},"142-3":{},"144-3":{},"146-3":{},"147-3":{},"148-3":{},"151-4":{},"152-2":{},"152-4":{},"155-6":{},"157-7":{},"158-4":{},"158-10":{},"158-11":{},"158-12":{},"158-17":{},"158-35":{},"158-42":{},"163-3":{},"163-4":{},"163-13":{},"163-16":{},"163-19":{},"163-21":{},"163-22":{},"163-23":{},"168-6":{},"176-1":{},"187-3":{},"196-2":{},"196-3":{},"197-12":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"51":{},"52":{},"53":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"69":{},"70":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"97":{},"98":{},"99":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"118":{},"119":{},"120":{},"122":{},"123":{},"124":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"133":{},"134":{},"137":{},"138":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"181":{},"183":{},"186":{},"187":{},"188":{},"190":{},"191":{},"193":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["create(organizationformdata",{"_index":2313,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["create(personformdata",{"_index":2042,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["create/edit",{"_index":1184,"title":{"23-25":{},"90-25":{},"158-25":{}},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["create/us",{"_index":6295,"title":{},"name":{},"text":{"93":{}},"component":{}}],["create=tru",{"_index":1556,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["createadaptermodel",{"_index":6185,"title":{},"name":{},"text":{"92":{}},"component":{}}],["createcompanypermiss",{"_index":4284,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["createdb",{"_index":1553,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["createdetailform",{"_index":2747,"title":{},"name":{},"text":{"26":{}},"component":{}}],["createexecutor",{"_index":3672,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["createimmedi",{"_index":1604,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["createorganizationpermiss",{"_index":2314,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["createorganizationt",{"_index":1616,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["createpersonpermiss",{"_index":2044,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["createpersont",{"_index":1617,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["creation",{"_index":309,"title":{"26-27":{},"28-6":{},"40-9":{},"94-6":{},"107-9":{},"162-6":{},"175-9":{}},"name":{},"text":{"5":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"19":{},"23":{},"24":{},"29":{},"39":{},"40":{},"41":{},"56":{},"60":{},"61":{},"63":{},"66":{},"70":{},"72":{},"73":{},"74":{},"76":{},"78":{},"79":{},"84":{},"89":{},"90":{},"95":{},"106":{},"107":{},"111":{},"123":{},"128":{},"129":{},"132":{},"134":{},"138":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"152":{},"157":{},"158":{},"163":{},"174":{},"175":{},"176":{},"191":{},"196":{},"197":{},"200":{},"202":{}},"component":{}}],["creation/access",{"_index":1496,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["creation/edit",{"_index":2981,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["credenti",{"_index":797,"title":{"63-37":{},"63-53":{},"132-37":{},"132-53":{},"200-37":{},"200-53":{}},"name":{},"text":{"19":{},"40":{},"63":{},"84":{},"107":{},"132":{},"152":{},"175":{},"200":{}},"component":{}}],["criteria",{"_index":1393,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"90":{},"106":{},"107":{},"158":{},"174":{},"175":{}},"component":{}}],["cron",{"_index":3638,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["cronschedulebuild",{"_index":3635,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["cross",{"_index":4234,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["crucial",{"_index":2813,"title":{},"name":{},"text":{"26":{}},"component":{}}],["crud",{"_index":5980,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["cs",{"_index":5331,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["cs.getcodetype(uithemecodetype.class).getcod",{"_index":5335,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["cs.reloadcodetype(uithemecodetype.class",{"_index":5333,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["csp",{"_index":3937,"title":{},"name":{},"text":{"40":{},"43":{},"107":{},"110":{},"175":{},"178":{}},"component":{}}],["csrf",{"_index":5982,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["css",{"_index":483,"title":{"26-21":{},"33-6":{},"35-6":{},"36-2":{},"43-11":{},"46-7":{},"99-6":{},"102-6":{},"103-2":{},"110-11":{},"113-7":{},"167-6":{},"168-2":{},"170-6":{},"178-11":{},"181-7":{}},"name":{},"text":{"14":{},"18":{},"22":{},"26":{},"29":{},"32":{},"33":{},"34":{},"35":{},"36":{},"40":{},"43":{},"45":{},"46":{},"51":{},"52":{},"53":{},"56":{},"59":{},"65":{},"80":{},"85":{},"88":{},"95":{},"98":{},"99":{},"101":{},"102":{},"103":{},"107":{},"110":{},"112":{},"113":{},"118":{},"119":{},"120":{},"123":{},"127":{},"133":{},"148":{},"153":{},"156":{},"163":{},"166":{},"167":{},"168":{},"170":{},"172":{},"175":{},"178":{},"180":{},"181":{},"186":{},"187":{},"188":{},"191":{},"195":{},"201":{}},"component":{}}],["css/less",{"_index":3153,"title":{},"name":{},"text":{"34":{},"52":{},"56":{},"101":{},"119":{},"123":{},"172":{},"187":{},"191":{}},"component":{}}],["cssclass",{"_index":3151,"title":{},"name":{},"text":{"34":{},"53":{},"59":{},"101":{},"120":{},"127":{},"172":{},"188":{},"195":{}},"component":{}}],["csswidthtocontentanim",{"_index":6182,"title":{},"name":{},"text":{"92":{}},"component":{}}],["ctrl",{"_index":344,"title":{},"name":{},"text":{"5":{},"29":{},"70":{},"92":{},"95":{},"138":{},"163":{}},"component":{}}],["ctrl+1",{"_index":2976,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["ctrl+n",{"_index":350,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"23":{},"28":{},"29":{},"72":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"90":{},"94":{},"95":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"158":{},"162":{},"163":{}},"component":{}}],["ctrl+shift+n",{"_index":1237,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ctrl+shift+o",{"_index":1256,"title":{},"name":{},"text":{"23":{},"29":{},"90":{},"95":{},"158":{},"163":{}},"component":{}}],["ctrl+shift+t",{"_index":1238,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ctrl+space",{"_index":311,"title":{},"name":{},"text":{"5":{},"23":{},"28":{},"29":{},"70":{},"90":{},"94":{},"95":{},"138":{},"158":{},"162":{},"163":{}},"component":{}}],["curiou",{"_index":6130,"title":{},"name":{},"text":{"92":{}},"component":{}}],["current",{"_index":303,"title":{},"name":{},"text":{"5":{},"7":{},"8":{},"10":{},"12":{},"13":{},"23":{},"24":{},"29":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"50":{},"51":{},"56":{},"58":{},"63":{},"64":{},"66":{},"70":{},"73":{},"74":{},"76":{},"78":{},"79":{},"89":{},"90":{},"93":{},"95":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"117":{},"118":{},"123":{},"126":{},"131":{},"132":{},"134":{},"138":{},"141":{},"142":{},"144":{},"146":{},"147":{},"157":{},"158":{},"163":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"181":{},"183":{},"185":{},"186":{},"191":{},"194":{},"199":{},"200":{},"202":{}},"component":{}}],["currentmsgctx",{"_index":5572,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["currentmsgctx.get(\"cid",{"_index":5574,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["cursor",{"_index":304,"title":{},"name":{},"text":{"5":{},"23":{},"29":{},"36":{},"70":{},"90":{},"95":{},"103":{},"138":{},"158":{},"163":{},"168":{}},"component":{}}],["custom",{"_index":320,"title":{"36":{},"103":{},"168":{},"52-2":{},"52-3":{},"53-3":{},"56-2":{},"56-4":{},"58-2":{},"58-3":{},"63-13":{},"64-24":{},"119-2":{},"119-3":{},"120-3":{},"123-2":{},"123-4":{},"126-2":{},"126-3":{},"131-24":{},"132-13":{},"187-2":{},"187-3":{},"188-3":{},"191-2":{},"191-4":{},"194-2":{},"194-3":{},"199-24":{},"200-13":{}},"name":{},"text":{"5":{},"14":{},"22":{},"26":{},"29":{},"32":{},"33":{},"35":{},"36":{},"40":{},"43":{},"46":{},"48":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"63":{},"64":{},"66":{},"70":{},"80":{},"88":{},"93":{},"95":{},"98":{},"99":{},"102":{},"103":{},"107":{},"110":{},"113":{},"115":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"125":{},"126":{},"127":{},"128":{},"131":{},"132":{},"134":{},"138":{},"148":{},"156":{},"163":{},"166":{},"167":{},"168":{},"170":{},"175":{},"178":{},"181":{},"183":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["customapp",{"_index":4623,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["customapp.j",{"_index":4622,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["customattributenameent",{"_index":5759,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["customdevicetransformationplatformlisten",{"_index":4861,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["custommobiledevicetransform",{"_index":4856,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["customt",{"_index":4920,"title":{},"name":{},"text":{"55":{},"122":{},"190":{}},"component":{}}],["customtil",{"_index":5119,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["customtilefilt",{"_index":5121,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["cxf",{"_index":5375,"title":{"63-31":{},"132-31":{},"200-31":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["cycl",{"_index":2023,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["d005",{"_index":2300,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["d1d40169a63a",{"_index":1297,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["d1e066682205",{"_index":2265,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["d307",{"_index":2285,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["d38c",{"_index":1463,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["d430a5f1fd97",{"_index":1833,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["d8d8d8",{"_index":3128,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["da32",{"_index":1718,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["daemon",{"_index":834,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["dailytimeintervalschedulebuild",{"_index":3637,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["danger",{"_index":4249,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["dark",{"_index":981,"title":{},"name":{},"text":{"20":{},"22":{},"26":{},"33":{},"35":{},"46":{},"56":{},"59":{},"86":{},"88":{},"99":{},"102":{},"113":{},"123":{},"127":{},"154":{},"156":{},"167":{},"170":{},"181":{},"191":{},"195":{}},"component":{}}],["dark.css",{"_index":983,"title":{},"name":{},"text":{"20":{},"46":{},"56":{},"86":{},"113":{},"123":{},"154":{},"181":{},"191":{}},"component":{}}],["dark.less",{"_index":3027,"title":{},"name":{},"text":{"33":{},"35":{},"46":{},"56":{},"99":{},"102":{},"113":{},"123":{},"167":{},"170":{},"181":{},"191":{}},"component":{}}],["darken",{"_index":3133,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["darken(@palett",{"_index":4943,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["dash",{"_index":5034,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["data",{"_index":356,"title":{"64":{},"131":{},"199":{},"23-23":{},"26-31":{},"27-20":{},"33-3":{},"35-3":{},"61-2":{},"64-1":{},"64-7":{},"64-12":{},"64-13":{},"64-14":{},"64-15":{},"64-20":{},"64-21":{},"64-23":{},"64-25":{},"64-26":{},"66-5":{},"90-23":{},"99-3":{},"102-3":{},"129-2":{},"131-1":{},"131-7":{},"131-12":{},"131-13":{},"131-14":{},"131-15":{},"131-20":{},"131-21":{},"131-23":{},"131-25":{},"131-26":{},"134-5":{},"158-23":{},"167-3":{},"170-3":{},"197-2":{},"199-1":{},"199-7":{},"199-12":{},"199-13":{},"199-14":{},"199-15":{},"199-20":{},"199-21":{},"199-23":{},"199-25":{},"199-26":{},"202-5":{}},"name":{"64":{},"131":{},"199":{}},"text":{"6":{},"8":{},"12":{},"16":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"32":{},"33":{},"35":{},"38":{},"40":{},"43":{},"47":{},"48":{},"50":{},"52":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"72":{},"74":{},"78":{},"82":{},"87":{},"89":{},"90":{},"93":{},"94":{},"95":{},"98":{},"99":{},"100":{},"102":{},"105":{},"107":{},"110":{},"114":{},"115":{},"117":{},"119":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"133":{},"134":{},"140":{},"142":{},"146":{},"150":{},"155":{},"157":{},"158":{},"162":{},"163":{},"166":{},"167":{},"170":{},"171":{},"173":{},"175":{},"178":{},"182":{},"183":{},"185":{},"187":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["data(personformmainboxextensiondata.class",{"_index":4653,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["data.chartvaluegroups[0].colorhexvalu",{"_index":3173,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["data.chartvaluegroups[1].colorhexvalu",{"_index":3175,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["data.chartvaluegroups[2].colorhexvalu",{"_index":3177,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["data.getaxes().add(axi",{"_index":3075,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["data.getchartvaluegroups().add(chocol",{"_index":3085,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["data.getchartvaluegroups().add(strawberri",{"_index":3088,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["data.getchartvaluegroups().add(vanilla",{"_index":3082,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["data.getcontribution(personformmainboxextensiondata.class",{"_index":4686,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["data.length",{"_index":2579,"title":{},"name":{},"text":{"26":{}},"component":{}}],["data.splice(n",{"_index":2578,"title":{},"name":{},"text":{"26":{}},"component":{}}],["databas",{"_index":864,"title":{"23-17":{},"23-21":{},"90-17":{},"90-21":{},"158-17":{},"158-21":{}},"name":{},"text":{"19":{},"21":{},"23":{},"32":{},"40":{},"57":{},"62":{},"63":{},"64":{},"84":{},"87":{},"90":{},"98":{},"107":{},"125":{},"130":{},"131":{},"132":{},"152":{},"155":{},"158":{},"166":{},"175":{},"192":{},"198":{},"199":{},"200":{}},"component":{}}],["databaseautocreateproperti",{"_index":1535,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["databaseautopopulateproperti",{"_index":1541,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["databaseproperti",{"_index":1533,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["databasesetupservic",{"_index":1601,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["databykey",{"_index":5975,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["datachang",{"_index":5338,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["dataindex",{"_index":3188,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["datamodel",{"_index":2454,"title":{"26-38":{}},"name":{},"text":{"26":{}},"component":{}}],["dataobject",{"_index":2776,"title":{},"name":{},"text":{"26":{},"64":{},"131":{},"199":{}},"component":{}}],["dataobjectdeseri",{"_index":5895,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dataobjecthelp",{"_index":5853,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dataobjectinventory#gettypevers",{"_index":2621,"title":{},"name":{},"text":{"26":{}},"component":{}}],["dataobjectmigr",{"_index":6113,"title":{"92-26":{}},"name":{},"text":{"92":{}},"component":{}}],["dataobjectmigrationcontext",{"_index":6229,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dataobjectmigrationcountingpassthroughlogg",{"_index":6231,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dataobjectmigrationinventori",{"_index":6233,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dataobjectmigrationinventory#getdomigrationcontextvalu",{"_index":6250,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dataobjectmigrationinventory#getmigrationhandl",{"_index":6248,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dataobjectmigrationpassthroughlogg",{"_index":6235,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dataobjectmigrationstatscontextdata",{"_index":6237,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dataobjectseri",{"_index":5894,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dataobjecttesthelp",{"_index":5924,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dataset",{"_index":2565,"title":{},"name":{},"text":{"26":{},"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["datasetindex",{"_index":3118,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["datatyp",{"_index":2771,"title":{},"name":{},"text":{"26":{},"37":{},"104":{},"169":{}},"component":{}}],["date",{"_index":978,"title":{"160-9":{}},"name":{},"text":{"20":{},"23":{},"27":{},"29":{},"58":{},"59":{},"61":{},"63":{},"64":{},"65":{},"86":{},"90":{},"95":{},"126":{},"127":{},"129":{},"131":{},"132":{},"133":{},"154":{},"158":{},"160":{},"163":{},"194":{},"195":{},"197":{},"199":{},"200":{},"201":{}},"component":{}}],["date_of_birth",{"_index":1591,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["datefield",{"_index":4722,"title":{},"name":{},"text":{"49":{},"58":{},"116":{},"126":{},"184":{},"194":{}},"component":{}}],["dateformat",{"_index":5021,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["dateformat.default",{"_index":6425,"title":{},"name":{},"text":{"160":{}},"component":{}}],["dateformat.short",{"_index":6426,"title":{},"name":{},"text":{"160":{}},"component":{}}],["dateofbirth",{"_index":346,"title":{},"name":{},"text":{"5":{},"29":{},"70":{},"95":{},"138":{},"163":{}},"component":{}}],["dateofbirthfield",{"_index":1928,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["dates.issameday(valu",{"_index":5041,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["dateutil",{"_index":6421,"title":{"160-9":{}},"name":{},"text":{},"component":{}}],["dateutility#formatd",{"_index":6427,"title":{},"name":{},"text":{"160":{}},"component":{}}],["dateutility#formatdatetim",{"_index":6424,"title":{},"name":{},"text":{"160":{}},"component":{}}],["dateutility#formatdatetimeshort",{"_index":6428,"title":{},"name":{},"text":{"160":{}},"component":{}}],["date’",{"_index":5649,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["day",{"_index":53,"title":{"23":{},"90":{},"158":{}},"name":{"23":{},"90":{},"158":{}},"text":{"1":{},"20":{},"21":{},"23":{},"24":{},"39":{},"40":{},"63":{},"67":{},"86":{},"87":{},"89":{},"90":{},"93":{},"106":{},"107":{},"132":{},"135":{},"154":{},"155":{},"157":{},"158":{},"174":{},"175":{},"200":{}},"component":{}}],["day_of_month",{"_index":3689,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["day_of_week",{"_index":3690,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["db",{"_index":1018,"title":{},"name":{},"text":{"21":{},"87":{},"155":{}},"component":{}}],["db25b5f1cad1",{"_index":1781,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["dd",{"_index":5964,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["dd3c",{"_index":1300,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ddbaa3ae2a4c",{"_index":2144,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ddc13025862e",{"_index":1457,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["de",{"_index":410,"title":{},"name":{},"text":{"9":{},"61":{},"75":{},"129":{},"143":{},"197":{}},"component":{}}],["de17",{"_index":1809,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["de56",{"_index":2280,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["de_ch",{"_index":412,"title":{},"name":{},"text":{"9":{},"75":{},"143":{}},"component":{}}],["de_d",{"_index":411,"title":{},"name":{},"text":{"9":{},"75":{},"143":{}},"component":{}}],["deactiv",{"_index":4374,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["deal",{"_index":1215,"title":{},"name":{},"text":{"23":{},"29":{},"39":{},"53":{},"61":{},"66":{},"90":{},"93":{},"95":{},"106":{},"120":{},"129":{},"134":{},"158":{},"163":{},"174":{},"188":{},"197":{},"202":{}},"component":{}}],["debug",{"_index":1649,"title":{},"name":{},"text":{"23":{},"26":{},"38":{},"39":{},"40":{},"44":{},"46":{},"56":{},"63":{},"90":{},"92":{},"105":{},"106":{},"107":{},"109":{},"113":{},"123":{},"132":{},"158":{},"173":{},"174":{},"175":{},"179":{},"181":{},"191":{},"200":{}},"component":{}}],["debug/test",{"_index":4120,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["debug=fals",{"_index":4540,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["debug=tru",{"_index":4512,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["dec",{"_index":3044,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["decid",{"_index":42,"title":{},"name":{},"text":{"1":{},"18":{},"19":{},"23":{},"40":{},"53":{},"57":{},"63":{},"67":{},"84":{},"85":{},"90":{},"107":{},"120":{},"125":{},"132":{},"135":{},"152":{},"153":{},"158":{},"175":{},"188":{},"192":{},"200":{}},"component":{}}],["decimalformat",{"_index":5020,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["decis",{"_index":663,"title":{},"name":{},"text":{"18":{},"48":{},"85":{},"115":{},"153":{},"183":{}},"component":{}}],["declar",{"_index":1450,"title":{"60-3":{},"128-3":{},"196-3":{}},"name":{},"text":{"23":{},"39":{},"40":{},"41":{},"43":{},"48":{},"60":{},"63":{},"64":{},"66":{},"90":{},"100":{},"106":{},"107":{},"110":{},"111":{},"113":{},"115":{},"128":{},"131":{},"132":{},"134":{},"158":{},"171":{},"174":{},"175":{},"176":{},"178":{},"181":{},"183":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["decor",{"_index":1156,"title":{"40-16":{},"107-16":{},"175-16":{}},"name":{},"text":{"22":{},"39":{},"40":{},"88":{},"106":{},"107":{},"156":{},"174":{},"175":{}},"component":{}}],["decorate(ibean",{"_index":3793,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["dedic",{"_index":815,"title":{},"name":{},"text":{"19":{},"26":{},"56":{},"63":{},"84":{},"123":{},"132":{},"152":{},"191":{},"200":{}},"component":{}}],["deep",{"_index":5926,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["deepen",{"_index":1,"title":{"1-2":{},"67-2":{},"135-2":{}},"name":{},"text":{},"component":{}}],["def4b07f92ab",{"_index":2303,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["default",{"_index":183,"title":{"4-5":{},"7-2":{},"8-2":{},"10-2":{},"12-2":{},"13-2":{},"14-2":{},"29-12":{},"29-15":{},"29-18":{},"29-28":{},"43-1":{},"43-9":{},"63-39":{},"71-5":{},"73-2":{},"74-2":{},"76-2":{},"78-2":{},"79-2":{},"80-2":{},"95-12":{},"95-15":{},"95-18":{},"95-28":{},"110-1":{},"110-9":{},"132-39":{},"139-5":{},"141-2":{},"142-2":{},"144-2":{},"146-2":{},"147-2":{},"148-2":{},"160-9":{},"163-12":{},"163-15":{},"163-18":{},"163-28":{},"178-1":{},"178-9":{},"200-39":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"29":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"46":{},"47":{},"48":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"71":{},"73":{},"74":{},"76":{},"77":{},"78":{},"79":{},"80":{},"84":{},"87":{},"88":{},"90":{},"92":{},"93":{},"95":{},"99":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"117":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"139":{},"141":{},"142":{},"144":{},"145":{},"146":{},"147":{},"148":{},"152":{},"155":{},"156":{},"158":{},"163":{},"167":{},"168":{},"169":{},"170":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"181":{},"182":{},"183":{},"185":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["defaultdecimalsupportprovid",{"_index":4140,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["defaultdoentitydeserializertyperesolv",{"_index":2762,"title":{},"name":{},"text":{"26":{}},"component":{}}],["defaultdoentitydeserializertypestrategi",{"_index":2763,"title":{},"name":{},"text":{"26":{}},"component":{}}],["defaultexceptiontransl",{"_index":3338,"title":{"38-15":{},"105-15":{},"173-15":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["defaultexceptiontranslator.class",{"_index":3592,"title":{},"name":{},"text":{"39":{},"63":{},"106":{},"132":{},"174":{},"200":{}},"component":{}}],["defaultformatt",{"_index":5029,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["defaultformatter(valu",{"_index":5031,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["defaultpars",{"_index":5036,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["defaultparser(displaytext",{"_index":5038,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["defaultruntimeexceptiontransl",{"_index":3339,"title":{"38-16":{},"105-16":{},"173-16":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["defaults.j",{"_index":4472,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["defaultsubtypesdkcommand",{"_index":2128,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["defaultsubtypesdkcommand.cr",{"_index":2129,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["defaulttimezonedateadapt",{"_index":5655,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["defaulttimezonedatetimeadapt",{"_index":5658,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["defaulttimezonetimeadapt",{"_index":5659,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["defautl",{"_index":4024,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["defer",{"_index":5936,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["defin",{"_index":176,"title":{"93-6":{},"93-7":{}},"name":{},"text":{"3":{},"5":{},"22":{},"23":{},"29":{},"31":{},"34":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"69":{},"70":{},"88":{},"90":{},"93":{},"95":{},"97":{},"101":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"118":{},"119":{},"120":{},"121":{},"123":{},"125":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"137":{},"138":{},"156":{},"158":{},"163":{},"165":{},"172":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"186":{},"187":{},"188":{},"189":{},"191":{},"192":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{}},"component":{}}],["definedproperti",{"_index":6187,"title":{},"name":{},"text":{"92":{}},"component":{}}],["definit",{"_index":59,"title":{"63-25":{},"64-1":{},"131-1":{},"132-25":{},"199-1":{},"200-25":{}},"name":{},"text":{"1":{},"22":{},"27":{},"29":{},"39":{},"46":{},"52":{},"56":{},"60":{},"63":{},"64":{},"65":{},"67":{},"88":{},"93":{},"95":{},"106":{},"119":{},"123":{},"128":{},"131":{},"132":{},"133":{},"135":{},"156":{},"163":{},"174":{},"187":{},"191":{},"196":{},"199":{},"200":{},"201":{}},"component":{}}],["definitelytyp",{"_index":6399,"title":{},"name":{},"text":{"124":{},"193":{}},"component":{}}],["delay",{"_index":3425,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["deleg",{"_index":3744,"title":{},"name":{},"text":{"40":{},"43":{},"55":{},"63":{},"65":{},"107":{},"110":{},"122":{},"132":{},"133":{},"175":{},"178":{},"190":{},"200":{},"201":{}},"component":{}}],["delet",{"_index":241,"title":{"26-36":{}},"name":{},"text":{"4":{},"19":{},"21":{},"23":{},"26":{},"29":{},"40":{},"60":{},"63":{},"64":{},"66":{},"71":{},"84":{},"87":{},"90":{},"95":{},"107":{},"128":{},"131":{},"132":{},"134":{},"139":{},"152":{},"155":{},"158":{},"163":{},"175":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["deletecount",{"_index":2583,"title":{},"name":{},"text":{"26":{}},"component":{}}],["deleteexampleentity(str",{"_index":6043,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["deletefield",{"_index":5189,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["deliber",{"_index":4434,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["deliv",{"_index":626,"title":{},"name":{},"text":{"17":{},"24":{},"46":{},"83":{},"89":{},"113":{},"151":{},"157":{},"181":{}},"component":{}}],["demand",{"_index":3997,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["demo",{"_index":116,"title":{"16-1":{},"16-2":{},"16-4":{},"16-6":{},"27-2":{},"82-1":{},"82-2":{},"82-4":{},"82-6":{},"93-2":{},"150-1":{},"150-2":{},"150-4":{},"150-6":{},"161-2":{}},"name":{},"text":{"2":{},"15":{},"16":{},"17":{},"20":{},"23":{},"27":{},"68":{},"81":{},"82":{},"83":{},"86":{},"90":{},"93":{},"136":{},"149":{},"150":{},"151":{},"154":{},"158":{},"161":{}},"component":{}}],["demo.html",{"_index":4826,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["demonstr",{"_index":1217,"title":{},"name":{},"text":{"23":{},"40":{},"44":{},"63":{},"66":{},"90":{},"100":{},"107":{},"109":{},"132":{},"134":{},"158":{},"171":{},"175":{},"179":{},"200":{},"202":{}},"component":{}}],["denot",{"_index":4644,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["depend",{"_index":302,"title":{"37-1":{},"46-1":{},"46-17":{},"63-8":{},"64-22":{},"66-8":{},"104-1":{},"113-1":{},"131-22":{},"132-8":{},"134-8":{},"169-1":{},"181-1":{},"199-22":{},"200-8":{},"202-8":{}},"name":{},"text":{"5":{},"7":{},"8":{},"10":{},"12":{},"13":{},"17":{},"18":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"33":{},"35":{},"37":{},"39":{},"40":{},"46":{},"51":{},"58":{},"59":{},"60":{},"63":{},"64":{},"65":{},"66":{},"70":{},"73":{},"74":{},"76":{},"78":{},"79":{},"83":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"95":{},"99":{},"102":{},"104":{},"106":{},"107":{},"113":{},"118":{},"126":{},"127":{},"128":{},"131":{},"132":{},"133":{},"134":{},"138":{},"141":{},"142":{},"144":{},"146":{},"147":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"163":{},"167":{},"169":{},"170":{},"174":{},"175":{},"181":{},"186":{},"194":{},"195":{},"196":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["deploy",{"_index":51,"title":{"19":{},"84":{},"152":{},"19-5":{},"63-2":{},"84-5":{},"132-2":{},"152-5":{},"200-2":{}},"name":{"19":{},"84":{},"152":{}},"text":{"1":{},"14":{},"19":{},"27":{},"29":{},"32":{},"38":{},"40":{},"43":{},"46":{},"51":{},"63":{},"67":{},"80":{},"84":{},"93":{},"95":{},"98":{},"105":{},"107":{},"110":{},"113":{},"118":{},"132":{},"135":{},"148":{},"152":{},"161":{},"163":{},"166":{},"173":{},"175":{},"178":{},"181":{},"186":{},"200":{}},"component":{}}],["deprec",{"_index":2446,"title":{"26-32":{}},"name":{},"text":{"26":{},"59":{},"92":{},"93":{},"127":{},"195":{}},"component":{}}],["der",{"_index":2524,"title":{},"name":{},"text":{"26":{},"40":{},"107":{},"175":{}},"component":{}}],["derbi",{"_index":1013,"title":{},"name":{},"text":{"21":{},"23":{},"87":{},"90":{},"155":{},"158":{}},"component":{}}],["derbysqlservic",{"_index":1549,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["derbytool",{"_index":1509,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["deriv",{"_index":372,"title":{"63-18":{},"132-18":{},"200-18":{}},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"29":{},"63":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"95":{},"132":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"163":{},"200":{}},"component":{}}],["describ",{"_index":76,"title":{},"name":{},"text":{"1":{},"2":{},"7":{},"10":{},"11":{},"13":{},"19":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"51":{},"59":{},"60":{},"61":{},"62":{},"63":{},"66":{},"67":{},"68":{},"73":{},"76":{},"77":{},"79":{},"84":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"118":{},"124":{},"127":{},"128":{},"129":{},"130":{},"132":{},"134":{},"135":{},"136":{},"141":{},"144":{},"145":{},"147":{},"152":{},"157":{},"158":{},"160":{},"161":{},"162":{},"163":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"186":{},"193":{},"195":{},"196":{},"197":{},"198":{},"200":{},"202":{}},"component":{}}],["descript",{"_index":439,"title":{"62-1":{},"130-1":{},"198-1":{}},"name":{},"text":{"14":{},"19":{},"23":{},"29":{},"39":{},"40":{},"41":{},"44":{},"60":{},"62":{},"63":{},"64":{},"66":{},"80":{},"84":{},"90":{},"93":{},"95":{},"106":{},"107":{},"109":{},"111":{},"128":{},"130":{},"131":{},"132":{},"134":{},"148":{},"152":{},"158":{},"163":{},"174":{},"175":{},"176":{},"179":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["descriptionel",{"_index":6329,"title":{},"name":{},"text":{"93":{}},"component":{}}],["descriptor",{"_index":4241,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["deselect",{"_index":2162,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["deseri",{"_index":2441,"title":{"26-29":{},"26-30":{},"64-24":{},"131-24":{},"199-24":{}},"name":{},"text":{"26":{},"40":{},"64":{},"107":{},"131":{},"175":{},"199":{}},"component":{}}],["design",{"_index":1116,"title":{"23-26":{},"90-26":{},"158-26":{}},"name":{},"text":{"22":{},"23":{},"26":{},"27":{},"53":{},"63":{},"88":{},"90":{},"120":{},"132":{},"156":{},"158":{},"188":{},"200":{}},"component":{}}],["desir",{"_index":505,"title":{},"name":{},"text":{"16":{},"22":{},"23":{},"28":{},"38":{},"46":{},"48":{},"52":{},"53":{},"64":{},"82":{},"88":{},"90":{},"94":{},"105":{},"113":{},"115":{},"119":{},"120":{},"131":{},"150":{},"156":{},"158":{},"162":{},"173":{},"181":{},"183":{},"187":{},"188":{},"199":{}},"component":{}}],["desktop",{"_index":936,"title":{"47":{},"114":{},"182":{},"23-7":{},"47-1":{},"53-5":{},"90-7":{},"114-1":{},"120-5":{},"158-7":{},"182-1":{},"188-5":{}},"name":{"47":{},"114":{},"182":{}},"text":{"20":{},"22":{},"23":{},"26":{},"27":{},"41":{},"45":{},"47":{},"53":{},"56":{},"60":{},"61":{},"86":{},"88":{},"90":{},"111":{},"112":{},"114":{},"120":{},"123":{},"128":{},"129":{},"154":{},"156":{},"158":{},"176":{},"180":{},"182":{},"188":{},"191":{},"196":{},"197":{}},"component":{}}],["desktop#settheme(nam",{"_index":4949,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["desktop.but",{"_index":5206,"title":{},"name":{},"text":{"60":{}},"component":{}}],["desktop.datachanged(notification.getmessag",{"_index":5339,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["desktop.j",{"_index":1050,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["desktop.setbenchlayoutdata",{"_index":4574,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["desktop/bench/benchcolumn",{"_index":4959,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["desktop/bench/desktopbench",{"_index":4958,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["desktop/desktop",{"_index":1122,"title":{},"name":{},"text":{"22":{},"56":{},"88":{},"123":{},"156":{},"191":{}},"component":{}}],["desktop/desktopdens",{"_index":4957,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["desktop/desktoplogo",{"_index":4956,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["desktopmodel",{"_index":1148,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["desktopmodel.j",{"_index":1051,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["desktopnotif",{"_index":2931,"title":{},"name":{},"text":{"27":{}},"component":{}}],["despit",{"_index":5428,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["destin",{"_index":4069,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["destroy",{"_index":3698,"title":{"40-17":{},"107-17":{},"175-17":{}},"name":{},"text":{"40":{},"60":{},"107":{},"128":{},"175":{},"196":{}},"component":{}}],["destruct",{"_index":5313,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["detach",{"_index":5187,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["detail",{"_index":24,"title":{"27-24":{}},"name":{},"text":{"1":{},"14":{},"19":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"53":{},"54":{},"56":{},"59":{},"60":{},"63":{},"64":{},"66":{},"67":{},"80":{},"84":{},"88":{},"90":{},"93":{},"94":{},"95":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"120":{},"121":{},"123":{},"124":{},"127":{},"128":{},"131":{},"132":{},"134":{},"135":{},"148":{},"152":{},"156":{},"158":{},"161":{},"162":{},"163":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"188":{},"189":{},"191":{},"193":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["detailbox",{"_index":3222,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["detailform",{"_index":2437,"title":{"26-27":{}},"name":{},"text":{"26":{}},"component":{}}],["detailsbox",{"_index":1734,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["detailt",{"_index":2436,"title":{"26-27":{}},"name":{},"text":{"26":{}},"component":{}}],["detect",{"_index":4034,"title":{},"name":{},"text":{"40":{},"43":{},"53":{},"64":{},"93":{},"107":{},"110":{},"120":{},"124":{},"131":{},"175":{},"178":{},"188":{},"193":{},"199":{}},"component":{}}],["determin",{"_index":1942,"title":{},"name":{},"text":{"23":{},"39":{},"41":{},"59":{},"61":{},"90":{},"93":{},"106":{},"111":{},"127":{},"128":{},"129":{},"158":{},"174":{},"176":{},"195":{},"196":{},"197":{}},"component":{}}],["dev",{"_index":474,"title":{},"name":{},"text":{"14":{},"21":{},"29":{},"37":{},"40":{},"46":{},"80":{},"87":{},"95":{},"104":{},"107":{},"113":{},"148":{},"155":{},"163":{},"169":{},"175":{},"181":{}},"component":{}}],["dev/.app",{"_index":5887,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["devdepend",{"_index":1077,"title":{},"name":{},"text":{"22":{},"26":{},"46":{},"88":{},"92":{},"113":{},"124":{},"156":{},"160":{},"181":{},"193":{}},"component":{}}],["develop",{"_index":144,"title":{"29-31":{},"93-4":{},"95-31":{},"163-31":{}},"name":{},"text":{"3":{},"5":{},"14":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"31":{},"32":{},"39":{},"40":{},"43":{},"44":{},"46":{},"51":{},"54":{},"56":{},"57":{},"60":{},"63":{},"69":{},"70":{},"80":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"106":{},"107":{},"109":{},"110":{},"113":{},"118":{},"121":{},"123":{},"124":{},"125":{},"128":{},"132":{},"137":{},"138":{},"148":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"163":{},"165":{},"166":{},"174":{},"175":{},"178":{},"179":{},"181":{},"186":{},"189":{},"191":{},"192":{},"193":{},"196":{},"200":{}},"component":{}}],["devic",{"_index":1072,"title":{"53-4":{},"120-4":{},"188-4":{}},"name":{},"text":{"22":{},"45":{},"53":{},"88":{},"112":{},"120":{},"156":{},"180":{},"188":{}},"component":{}}],["devicetransformationplatformlisten",{"_index":4860,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["devmod",{"_index":4511,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["devtool",{"_index":1069,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["dfd2b7b55ded",{"_index":2220,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["diagnost",{"_index":2821,"title":{},"name":{},"text":{"26":{},"38":{},"40":{},"105":{},"107":{},"173":{},"175":{}},"component":{}}],["dialog",{"_index":352,"title":{},"name":{},"text":{"6":{},"14":{},"16":{},"17":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"50":{},"59":{},"60":{},"72":{},"80":{},"82":{},"83":{},"87":{},"88":{},"89":{},"90":{},"94":{},"95":{},"117":{},"127":{},"128":{},"140":{},"148":{},"150":{},"151":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"185":{},"195":{},"196":{}},"component":{}}],["didn’t",{"_index":3142,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["differ",{"_index":37,"title":{"39-20":{},"106-20":{},"174-20":{}},"name":{},"text":{"1":{},"4":{},"5":{},"16":{},"19":{},"22":{},"23":{},"26":{},"29":{},"32":{},"38":{},"39":{},"40":{},"41":{},"44":{},"46":{},"47":{},"51":{},"53":{},"56":{},"59":{},"60":{},"63":{},"64":{},"65":{},"66":{},"67":{},"70":{},"71":{},"82":{},"84":{},"88":{},"90":{},"93":{},"95":{},"98":{},"105":{},"106":{},"107":{},"109":{},"111":{},"113":{},"114":{},"118":{},"120":{},"123":{},"127":{},"128":{},"131":{},"132":{},"133":{},"134":{},"135":{},"138":{},"139":{},"150":{},"152":{},"156":{},"158":{},"163":{},"166":{},"173":{},"174":{},"175":{},"176":{},"179":{},"181":{},"182":{},"186":{},"188":{},"191":{},"195":{},"196":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["digit",{"_index":5022,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["dimens",{"_index":2710,"title":{"54":{},"121":{},"189":{}},"name":{"54":{},"121":{},"189":{}},"text":{"26":{},"52":{},"54":{},"119":{},"121":{},"187":{},"189":{}},"component":{}}],["dir",{"_index":4537,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["direct",{"_index":640,"title":{},"name":{},"text":{"18":{},"22":{},"40":{},"43":{},"63":{},"85":{},"88":{},"107":{},"110":{},"132":{},"153":{},"156":{},"175":{},"178":{},"200":{}},"component":{}}],["directli",{"_index":231,"title":{"62-6":{},"130-6":{},"198-6":{}},"name":{},"text":{"4":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"26":{},"28":{},"29":{},"39":{},"40":{},"46":{},"48":{},"52":{},"59":{},"60":{},"63":{},"64":{},"65":{},"66":{},"71":{},"84":{},"85":{},"86":{},"87":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"106":{},"107":{},"113":{},"115":{},"119":{},"124":{},"127":{},"128":{},"131":{},"132":{},"133":{},"134":{},"139":{},"152":{},"153":{},"154":{},"155":{},"157":{},"158":{},"160":{},"162":{},"163":{},"174":{},"175":{},"181":{},"183":{},"187":{},"193":{},"195":{},"196":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["directori",{"_index":454,"title":{"19-8":{},"84-8":{},"152-8":{}},"name":{},"text":{"14":{},"17":{},"19":{},"24":{},"29":{},"40":{},"46":{},"51":{},"52":{},"63":{},"80":{},"83":{},"84":{},"89":{},"95":{},"107":{},"113":{},"118":{},"119":{},"132":{},"148":{},"151":{},"152":{},"157":{},"163":{},"175":{},"181":{},"186":{},"187":{},"200":{}},"component":{}}],["disabl",{"_index":756,"title":{"26-39":{},"53-9":{},"120-9":{},"188-9":{}},"name":{},"text":{"19":{},"23":{},"26":{},"40":{},"43":{},"44":{},"46":{},"47":{},"48":{},"53":{},"54":{},"57":{},"63":{},"84":{},"90":{},"92":{},"93":{},"107":{},"109":{},"110":{},"113":{},"114":{},"115":{},"120":{},"121":{},"125":{},"132":{},"152":{},"158":{},"175":{},"178":{},"179":{},"181":{},"182":{},"183":{},"188":{},"189":{},"192":{},"200":{}},"component":{}}],["disadvantag",{"_index":5692,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["disappear",{"_index":4552,"title":{},"name":{},"text":{"46":{},"60":{},"113":{},"128":{},"181":{},"196":{}},"component":{}}],["discard",{"_index":3917,"title":{},"name":{},"text":{"40":{},"50":{},"63":{},"107":{},"117":{},"132":{},"175":{},"185":{},"200":{}},"component":{}}],["discourag",{"_index":5468,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["discov",{"_index":5424,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["discoveri",{"_index":5496,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["discret",{"_index":5087,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["discuss",{"_index":1597,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["disk",{"_index":1525,"title":{},"name":{},"text":{"23":{},"24":{},"29":{},"89":{},"90":{},"95":{},"157":{},"158":{},"163":{}},"component":{}}],["dispatch",{"_index":4195,"title":{"61-14":{},"129-14":{},"197-14":{}},"name":{},"text":{"41":{},"61":{},"111":{},"129":{},"176":{},"197":{}},"component":{}}],["display",{"_index":218,"title":{},"name":{},"text":{"4":{},"11":{},"14":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"35":{},"36":{},"40":{},"43":{},"47":{},"50":{},"51":{},"52":{},"53":{},"58":{},"59":{},"60":{},"62":{},"65":{},"71":{},"77":{},"80":{},"82":{},"83":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"93":{},"94":{},"95":{},"102":{},"103":{},"107":{},"110":{},"114":{},"117":{},"118":{},"119":{},"120":{},"126":{},"127":{},"128":{},"130":{},"133":{},"139":{},"145":{},"148":{},"150":{},"151":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"167":{},"168":{},"175":{},"178":{},"182":{},"185":{},"186":{},"187":{},"188":{},"194":{},"195":{},"196":{},"198":{},"201":{}},"component":{}}],["displayhint",{"_index":944,"title":{},"name":{},"text":{"20":{},"22":{},"50":{},"59":{},"86":{},"88":{},"100":{},"117":{},"127":{},"154":{},"156":{},"171":{},"185":{},"195":{}},"component":{}}],["displaystyl",{"_index":5264,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["displaytext",{"_index":5030,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["displaytext.match(/.{4}/g).join",{"_index":5032,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["displaytext.replac",{"_index":5037,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["displayviewid",{"_index":4560,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["disregard",{"_index":5316,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["dist",{"_index":689,"title":{},"name":{},"text":{"18":{},"20":{},"22":{},"46":{},"85":{},"86":{},"88":{},"113":{},"153":{},"154":{},"156":{},"181":{}},"component":{}}],["dist/r",{"_index":4522,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["distinct",{"_index":4955,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["distinguish",{"_index":3394,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["distribut",{"_index":2463,"title":{"61-9":{},"129-9":{},"197-9":{}},"name":{},"text":{"26":{},"61":{},"92":{},"129":{},"160":{},"197":{}},"component":{}}],["div",{"_index":3152,"title":{},"name":{},"text":{"34":{},"36":{},"101":{},"103":{},"168":{},"172":{}},"component":{}}],["dive",{"_index":1689,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["diverg",{"_index":5407,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["dname",{"_index":732,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["do",{"_index":74,"title":{},"name":{},"text":{"1":{},"26":{},"39":{},"59":{},"63":{},"67":{},"93":{},"106":{},"127":{},"128":{},"132":{},"135":{},"174":{},"195":{},"196":{},"200":{}},"component":{}}],["doc",{"_index":108,"title":{},"name":{},"text":{"16":{},"27":{},"59":{},"64":{},"82":{},"93":{},"127":{},"131":{},"150":{},"161":{},"195":{},"199":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}}}],["doc/manag",{"_index":899,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["doc/setup.html#unix_daemon",{"_index":897,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["doc/setup.html#window",{"_index":894,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["docssnippetsdataobjectsignaturetest",{"_index":5750,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["doctyp",{"_index":1115,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["document",{"_index":8,"title":{"51":{},"118":{},"186":{},"26-1":{},"27-21":{},"92-1":{},"160-1":{}},"name":{"51":{},"118":{},"186":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"88":{},"90":{},"92":{},"93":{},"107":{},"113":{},"114":{},"118":{},"131":{},"132":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"156":{},"158":{},"160":{},"175":{},"181":{},"182":{},"186":{},"199":{},"200":{}},"component":{}}],["doentiti",{"_index":2440,"title":{"26-29":{},"64-11":{},"64-17":{},"131-11":{},"131-17":{},"199-11":{},"199-17":{}},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["doentity.getdecim",{"_index":5856,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["doentitybuild",{"_index":5878,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["doesn’t",{"_index":1150,"title":{},"name":{},"text":{"22":{},"48":{},"88":{},"115":{},"156":{},"183":{}},"component":{}}],["dolist",{"_index":2728,"title":{},"name":{},"text":{"26":{},"64":{},"131":{},"199":{}},"component":{}}],["dolist(\"listattribut",{"_index":5807,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dolist(\"valu",{"_index":5709,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dom",{"_index":1121,"title":{},"name":{},"text":{"22":{},"36":{},"51":{},"60":{},"88":{},"103":{},"118":{},"128":{},"156":{},"168":{},"186":{},"196":{}},"component":{}}],["domain",{"_index":5704,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["domapent",{"_index":5857,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["done",{"_index":753,"title":{"39-20":{},"39-21":{},"39-23":{},"106-20":{},"106-21":{},"106-23":{},"174-20":{},"174-21":{},"174-23":{}},"name":{},"text":{"19":{},"21":{},"23":{},"29":{},"39":{},"40":{},"42":{},"43":{},"46":{},"48":{},"53":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"84":{},"87":{},"90":{},"92":{},"93":{},"95":{},"106":{},"107":{},"108":{},"110":{},"113":{},"115":{},"120":{},"124":{},"126":{},"128":{},"129":{},"132":{},"133":{},"134":{},"152":{},"155":{},"158":{},"163":{},"174":{},"175":{},"177":{},"178":{},"181":{},"183":{},"188":{},"193":{},"194":{},"196":{},"197":{},"200":{},"201":{},"202":{}},"component":{}}],["done(function(result",{"_index":3322,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["donod",{"_index":5775,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["donode.exist",{"_index":5785,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["donode.get",{"_index":5776,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["don’t",{"_index":593,"title":{},"name":{},"text":{"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"32":{},"40":{},"46":{},"50":{},"51":{},"52":{},"53":{},"58":{},"59":{},"60":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"98":{},"103":{},"107":{},"113":{},"117":{},"118":{},"119":{},"120":{},"124":{},"126":{},"127":{},"128":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"166":{},"168":{},"175":{},"181":{},"185":{},"186":{},"187":{},"188":{},"193":{},"194":{},"195":{},"196":{}},"component":{}}],["dostructuremigr",{"_index":6112,"title":{"92-26":{}},"name":{},"text":{"92":{}},"component":{}}],["dostructuremigrationcontext",{"_index":6228,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dostructuremigrationcountingpassthroughlogg",{"_index":6230,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dostructuremigrationinventori",{"_index":6232,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dostructuremigrationpassthroughlogg",{"_index":6234,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dostructuremigrationstatscontextdata",{"_index":6236,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dostructuremigrator#migratedataobject(dataobjectmigrationcontext",{"_index":6252,"title":{},"name":{},"text":{"92":{}},"component":{}}],["dot",{"_index":3899,"title":{},"name":{},"text":{"40":{},"63":{},"64":{},"107":{},"131":{},"132":{},"175":{},"199":{},"200":{}},"component":{}}],["dot/period",{"_index":3827,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["doubl",{"_index":234,"title":{},"name":{},"text":{"4":{},"5":{},"16":{},"23":{},"26":{},"29":{},"40":{},"52":{},"64":{},"70":{},"71":{},"82":{},"90":{},"95":{},"107":{},"119":{},"131":{},"138":{},"139":{},"150":{},"158":{},"163":{},"175":{},"187":{},"199":{}},"component":{}}],["doughnut",{"_index":5078,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["dovalu",{"_index":2946,"title":{},"name":{},"text":{"27":{},"64":{},"131":{},"199":{}},"component":{}}],["dovalue(\"d",{"_index":5764,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dovalue(\"mycustomnam",{"_index":5758,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dovalue(\"nam",{"_index":5708,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dovalue(\"name1ex",{"_index":5792,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dovalue(\"name2ex",{"_index":5800,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dovalue(\"nameex",{"_index":5836,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dovalue(\"singleattribut",{"_index":5809,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["dovalue(id",{"_index":2947,"title":{},"name":{},"text":{"27":{}},"component":{}}],["dovalue(parent_id",{"_index":2948,"title":{},"name":{},"text":{"27":{}},"component":{}}],["down",{"_index":1202,"title":{},"name":{},"text":{"23":{},"26":{},"39":{},"41":{},"42":{},"59":{},"90":{},"92":{},"106":{},"108":{},"111":{},"127":{},"158":{},"174":{},"176":{},"177":{},"195":{}},"component":{}}],["download",{"_index":523,"title":{},"name":{},"text":{"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"26":{},"46":{},"52":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"92":{},"113":{},"119":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"160":{},"181":{},"187":{}},"component":{}}],["draft",{"_index":4218,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["drag",{"_index":4585,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["drawback",{"_index":5366,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["drill",{"_index":2329,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["driver",{"_index":4099,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["drop",{"_index":2004,"title":{},"name":{},"text":{"23":{},"26":{},"27":{},"40":{},"59":{},"90":{},"92":{},"107":{},"127":{},"158":{},"175":{},"195":{}},"component":{}}],["dropdown",{"_index":1022,"title":{},"name":{},"text":{"21":{},"59":{},"87":{},"127":{},"155":{},"195":{}},"component":{}}],["dto",{"_index":2958,"title":{"28-4":{},"94-4":{},"162-4":{}},"name":{},"text":{"28":{},"48":{},"94":{},"115":{},"162":{},"183":{}},"component":{}}],["due",{"_index":1494,"title":{},"name":{},"text":{"23":{},"27":{},"38":{},"39":{},"40":{},"43":{},"45":{},"59":{},"60":{},"63":{},"90":{},"105":{},"106":{},"107":{},"110":{},"112":{},"127":{},"128":{},"132":{},"158":{},"173":{},"174":{},"175":{},"178":{},"180":{},"195":{},"196":{},"200":{}},"component":{}}],["duplic",{"_index":2953,"title":{},"name":{},"text":{"27":{},"51":{},"63":{},"64":{},"118":{},"131":{},"132":{},"186":{},"199":{},"200":{}},"component":{}}],["durat",{"_index":6289,"title":{},"name":{},"text":{"93":{}},"component":{}}],["dure",{"_index":703,"title":{},"name":{},"text":{"19":{},"23":{},"26":{},"29":{},"39":{},"40":{},"46":{},"47":{},"51":{},"59":{},"60":{},"63":{},"66":{},"84":{},"90":{},"93":{},"95":{},"106":{},"107":{},"113":{},"114":{},"118":{},"124":{},"127":{},"128":{},"132":{},"134":{},"152":{},"158":{},"163":{},"174":{},"175":{},"181":{},"182":{},"186":{},"193":{},"195":{},"196":{},"200":{},"202":{}},"component":{}}],["duser.language=fr",{"_index":4984,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["dynam",{"_index":2333,"title":{"62-10":{},"130-10":{},"198-10":{}},"name":{},"text":{"23":{},"39":{},"40":{},"43":{},"51":{},"61":{},"62":{},"66":{},"90":{},"106":{},"107":{},"110":{},"118":{},"129":{},"130":{},"134":{},"158":{},"174":{},"175":{},"178":{},"186":{},"197":{},"198":{},"202":{}},"component":{}}],["e",{"_index":1558,"title":{},"name":{},"text":{"23":{},"38":{},"43":{},"63":{},"66":{},"90":{},"105":{},"110":{},"132":{},"134":{},"158":{},"173":{},"178":{},"200":{},"202":{}},"component":{}}],["e.g",{"_index":610,"title":{},"name":{},"text":{"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"32":{},"33":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"98":{},"99":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"115":{},"119":{},"120":{},"121":{},"122":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"162":{},"166":{},"170":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"181":{},"183":{},"187":{},"188":{},"189":{},"190":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["e.getform().isformstor",{"_index":1826,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["e.gettyp",{"_index":1825,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["e070",{"_index":2141,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["e0ac",{"_index":2359,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["e409ac2fb605",{"_index":1868,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["e83359f3bc5b",{"_index":2211,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["e861",{"_index":1347,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["e8f",{"_index":2164,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["e9ebeb",{"_index":4962,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["eac5",{"_index":1736,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["each",{"_index":216,"title":{},"name":{},"text":{"4":{},"16":{},"17":{},"19":{},"21":{},"23":{},"24":{},"26":{},"29":{},"32":{},"33":{},"35":{},"39":{},"40":{},"43":{},"44":{},"46":{},"47":{},"48":{},"52":{},"56":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"71":{},"82":{},"83":{},"84":{},"87":{},"89":{},"90":{},"95":{},"98":{},"99":{},"102":{},"106":{},"107":{},"109":{},"110":{},"113":{},"114":{},"115":{},"119":{},"123":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"139":{},"150":{},"151":{},"152":{},"155":{},"157":{},"158":{},"163":{},"166":{},"167":{},"170":{},"174":{},"175":{},"178":{},"179":{},"181":{},"182":{},"183":{},"187":{},"191":{},"194":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["eager",{"_index":3697,"title":{"40-10":{},"107-10":{},"175-10":{}},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["eagerli",{"_index":3750,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["earli",{"_index":915,"title":{},"name":{},"text":{"20":{},"86":{},"93":{},"124":{},"154":{},"193":{}},"component":{}}],["earlier",{"_index":1278,"title":{},"name":{},"text":{"23":{},"64":{},"90":{},"131":{},"158":{},"199":{}},"component":{}}],["eas",{"_index":296,"title":{},"name":{},"text":{"5":{},"39":{},"41":{},"70":{},"106":{},"111":{},"138":{},"174":{},"176":{}},"component":{}}],["easi",{"_index":1567,"title":{},"name":{},"text":{"23":{},"29":{},"32":{},"38":{},"41":{},"46":{},"50":{},"57":{},"60":{},"63":{},"90":{},"95":{},"98":{},"105":{},"111":{},"113":{},"117":{},"124":{},"125":{},"128":{},"132":{},"158":{},"163":{},"166":{},"173":{},"176":{},"181":{},"185":{},"192":{},"193":{},"196":{},"200":{}},"component":{}}],["easier",{"_index":671,"title":{},"name":{},"text":{"18":{},"22":{},"24":{},"32":{},"46":{},"58":{},"60":{},"63":{},"85":{},"88":{},"89":{},"93":{},"98":{},"113":{},"124":{},"126":{},"128":{},"132":{},"153":{},"156":{},"157":{},"166":{},"181":{},"193":{},"194":{},"196":{},"200":{}},"component":{}}],["easier.if",{"_index":4493,"title":{},"name":{},"text":{"46":{}},"component":{}}],["easiest",{"_index":5229,"title":{},"name":{},"text":{"60":{},"63":{},"128":{},"132":{},"196":{},"200":{}},"component":{}}],["easili",{"_index":693,"title":{},"name":{},"text":{"18":{},"20":{},"23":{},"32":{},"36":{},"43":{},"46":{},"53":{},"56":{},"85":{},"86":{},"90":{},"93":{},"98":{},"103":{},"110":{},"113":{},"120":{},"123":{},"124":{},"153":{},"154":{},"158":{},"166":{},"168":{},"178":{},"181":{},"188":{},"191":{},"193":{}},"component":{}}],["easily.th",{"_index":4485,"title":{},"name":{},"text":{"46":{}},"component":{}}],["east",{"_index":4563,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["eb1173a77f8c",{"_index":2308,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ec",{"_index":2516,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ec0d7d1ae5ec",{"_index":1991,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ec81",{"_index":2290,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["echo",{"_index":2514,"title":{},"name":{},"text":{"26":{}},"component":{}}],["eclips",{"_index":18,"title":{"2":{},"18":{},"23":{},"26":{},"27":{},"29":{},"68":{},"85":{},"90":{},"92":{},"93":{},"95":{},"136":{},"153":{},"158":{},"160":{},"161":{},"163":{},"24-6":{},"24-9":{},"26-7":{},"26-12":{},"29-1":{},"29-31":{},"29-32":{},"63-15":{},"63-17":{},"63-46":{},"63-47":{},"63-48":{},"89-6":{},"89-9":{},"92-7":{},"95-1":{},"95-31":{},"95-32":{},"132-15":{},"132-17":{},"132-46":{},"132-47":{},"132-48":{},"157-6":{},"157-9":{},"160-7":{},"163-1":{},"163-31":{},"163-32":{},"200-15":{},"200-17":{},"200-46":{},"200-47":{},"200-48":{}},"name":{"29":{},"95":{},"163":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"35":{},"36":{},"46":{},"48":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"63":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"102":{},"103":{},"113":{},"115":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"132":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"170":{},"171":{},"181":{},"183":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"200":{}},"component":{}}],["eclipse.ex",{"_index":4985,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["eclipse.ini",{"_index":2963,"title":{},"name":{},"text":{"28":{},"94":{},"162":{}},"component":{}}],["ecmascript",{"_index":4430,"title":{"46-6":{},"113-6":{},"181-6":{}},"name":{},"text":{"45":{},"46":{},"112":{},"113":{},"180":{},"181":{}},"component":{}}],["econom",{"_index":1961,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ecparam",{"_index":2507,"title":{},"name":{},"text":{"26":{}},"component":{}}],["edg",{"_index":2491,"title":{},"name":{},"text":{"26":{},"27":{},"45":{},"46":{},"112":{},"180":{}},"component":{}}],["edit",{"_index":191,"title":{},"name":{},"text":{"4":{},"5":{},"18":{},"21":{},"23":{},"24":{},"26":{},"28":{},"29":{},"52":{},"57":{},"70":{},"71":{},"85":{},"87":{},"89":{},"90":{},"94":{},"95":{},"113":{},"119":{},"125":{},"138":{},"139":{},"153":{},"155":{},"157":{},"158":{},"162":{},"163":{},"181":{},"187":{},"192":{}},"component":{}}],["editmenu",{"_index":1801,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["editmenu.class",{"_index":1795,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["editor",{"_index":136,"title":{"4-1":{},"4-2":{},"4-3":{},"5-1":{},"29-26":{},"70-1":{},"71-1":{},"71-2":{},"71-3":{},"95-26":{},"138-1":{},"139-1":{},"139-2":{},"139-3":{},"163-26":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"18":{},"23":{},"28":{},"29":{},"31":{},"46":{},"57":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"85":{},"90":{},"94":{},"95":{},"97":{},"113":{},"125":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"153":{},"158":{},"162":{},"163":{},"165":{},"181":{},"192":{}},"component":{}}],["editurlmenu",{"_index":2221,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ee",{"_index":2917,"title":{"63-5":{},"132-5":{},"200-5":{}},"name":{},"text":{"27":{},"29":{},"39":{},"63":{},"95":{},"106":{},"132":{},"163":{},"174":{},"200":{}},"component":{}}],["ee95",{"_index":1748,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["effect",{"_index":123,"title":{"3-2":{},"69-2":{},"137-2":{}},"name":{},"text":{"23":{},"27":{},"38":{},"40":{},"41":{},"44":{},"55":{},"60":{},"63":{},"90":{},"105":{},"107":{},"109":{},"111":{},"113":{},"122":{},"128":{},"132":{},"158":{},"173":{},"175":{},"176":{},"179":{},"181":{},"190":{},"196":{},"200":{}},"component":{}}],["effici",{"_index":193,"title":{"93-16":{}},"name":{},"text":{"4":{},"23":{},"29":{},"63":{},"71":{},"90":{},"93":{},"95":{},"124":{},"132":{},"139":{},"158":{},"163":{},"193":{},"200":{}},"component":{}}],["effort",{"_index":4436,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["egit",{"_index":5483,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["elaps",{"_index":3375,"title":{},"name":{},"text":{"38":{},"39":{},"40":{},"105":{},"106":{},"107":{},"173":{},"174":{},"175":{}},"component":{}}],["element",{"_index":541,"title":{"27-4":{},"48-11":{},"63-13":{},"115-11":{},"132-13":{},"183-11":{},"200-13":{}},"name":{},"text":{"16":{},"18":{},"19":{},"22":{},"23":{},"26":{},"27":{},"33":{},"35":{},"36":{},"40":{},"41":{},"48":{},"56":{},"59":{},"60":{},"63":{},"64":{},"66":{},"82":{},"84":{},"85":{},"88":{},"90":{},"99":{},"102":{},"103":{},"107":{},"111":{},"115":{},"123":{},"127":{},"128":{},"131":{},"132":{},"134":{},"150":{},"152":{},"153":{},"156":{},"158":{},"167":{},"168":{},"170":{},"175":{},"176":{},"183":{},"191":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["element._datasetindex",{"_index":2573,"title":{},"name":{},"text":{"26":{}},"component":{}}],["element._index",{"_index":2575,"title":{},"name":{},"text":{"26":{}},"component":{}}],["element.datasetindex",{"_index":2574,"title":{},"name":{},"text":{"26":{}},"component":{}}],["element.index",{"_index":2576,"title":{},"name":{},"text":{"26":{}},"component":{}}],["element.text",{"_index":5167,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["element’",{"_index":5460,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["ellipsi",{"_index":2677,"title":{},"name":{},"text":{"26":{},"53":{},"120":{},"188":{}},"component":{}}],["elsewher",{"_index":1138,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["email",{"_index":1417,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"44":{},"90":{},"106":{},"107":{},"109":{},"158":{},"174":{},"175":{},"179":{}},"component":{}}],["email_pattern",{"_index":2069,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["email_work",{"_index":1594,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["emailcolumn",{"_index":1418,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["emailfield",{"_index":2008,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["emailworkfield",{"_index":1949,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["emb",{"_index":4731,"title":{},"name":{},"text":{"50":{},"51":{},"117":{},"118":{},"185":{},"186":{}},"component":{}}],["embed",{"_index":2722,"title":{},"name":{},"text":{"26":{},"27":{},"43":{},"110":{},"178":{}},"component":{}}],["empti",{"_index":229,"title":{"36-2":{},"103-2":{},"168-2":{}},"name":{},"text":{"4":{},"17":{},"20":{},"22":{},"23":{},"24":{},"26":{},"29":{},"40":{},"41":{},"61":{},"63":{},"64":{},"71":{},"83":{},"86":{},"88":{},"89":{},"90":{},"92":{},"95":{},"107":{},"111":{},"129":{},"131":{},"132":{},"139":{},"151":{},"154":{},"156":{},"157":{},"158":{},"163":{},"175":{},"176":{},"197":{},"199":{},"200":{}},"component":{}}],["emtpi",{"_index":3724,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["emul",{"_index":1070,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["en",{"_index":5042,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["en,en",{"_index":4128,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["enabl",{"_index":713,"title":{"43-10":{},"63-15":{},"63-46":{},"63-47":{},"63-48":{},"110-10":{},"132-15":{},"132-46":{},"132-47":{},"132-48":{},"178-10":{},"200-15":{},"200-46":{},"200-47":{},"200-48":{}},"name":{},"text":{"19":{},"20":{},"26":{},"27":{},"39":{},"40":{},"43":{},"46":{},"51":{},"54":{},"57":{},"59":{},"60":{},"63":{},"64":{},"66":{},"84":{},"86":{},"92":{},"106":{},"107":{},"110":{},"113":{},"118":{},"121":{},"124":{},"125":{},"127":{},"128":{},"131":{},"132":{},"134":{},"152":{},"154":{},"174":{},"175":{},"178":{},"181":{},"186":{},"189":{},"192":{},"193":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["enable/dis",{"_index":3962,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["enabled_custom",{"_index":4908,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["enabled_gr",{"_index":4909,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["enabled_slav",{"_index":4910,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["enabledisablekeystrok",{"_index":6169,"title":{},"name":{},"text":{"92":{}},"component":{}}],["encapsul",{"_index":4388,"title":{},"name":{},"text":{"44":{},"63":{},"109":{},"132":{},"179":{},"200":{}},"component":{}}],["enclos",{"_index":3603,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["encod",{"_index":2512,"title":{"43-9":{},"43-14":{},"110-9":{},"110-14":{},"178-9":{},"178-14":{}},"name":{},"text":{"26":{},"40":{},"43":{},"57":{},"63":{},"107":{},"110":{},"125":{},"132":{},"175":{},"178":{},"192":{},"200":{}},"component":{}}],["encrypt",{"_index":757,"title":{},"name":{},"text":{"19":{},"43":{},"44":{},"63":{},"84":{},"109":{},"110":{},"132":{},"152":{},"178":{},"179":{},"200":{}},"component":{}}],["end",{"_index":285,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"10":{},"12":{},"13":{},"16":{},"23":{},"27":{},"29":{},"38":{},"39":{},"43":{},"46":{},"60":{},"66":{},"70":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"82":{},"90":{},"93":{},"95":{},"105":{},"106":{},"110":{},"113":{},"124":{},"128":{},"134":{},"138":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"150":{},"158":{},"163":{},"173":{},"174":{},"178":{},"181":{},"193":{},"196":{},"202":{}},"component":{}}],["end_of_line=lf",{"_index":4553,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["endpoint",{"_index":5373,"title":{"63-22":{},"63-29":{},"132-22":{},"132-29":{},"200-22":{},"200-29":{}},"name":{},"text":{"63":{},"66":{},"132":{},"134":{},"200":{},"202":{}},"component":{}}],["endpointinterfac",{"_index":5490,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["endpoint’",{"_index":5485,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["enforc",{"_index":2093,"title":{},"name":{},"text":{"23":{},"41":{},"46":{},"63":{},"90":{},"111":{},"113":{},"132":{},"158":{},"176":{},"181":{},"200":{}},"component":{}}],["engin",{"_index":1944,"title":{"26-13":{}},"name":{},"text":{"23":{},"26":{},"90":{},"92":{},"158":{}},"component":{}}],["enhanc",{"_index":4452,"title":{},"name":{},"text":{"46":{},"93":{},"113":{},"124":{},"181":{},"193":{}},"component":{}}],["enough",{"_index":1193,"title":{},"name":{},"text":{"23":{},"53":{},"90":{},"120":{},"158":{},"188":{}},"component":{}}],["ensur",{"_index":169,"title":{},"name":{},"text":{"3":{},"17":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"31":{},"36":{},"37":{},"39":{},"40":{},"43":{},"58":{},"61":{},"63":{},"65":{},"66":{},"69":{},"83":{},"87":{},"89":{},"90":{},"94":{},"97":{},"103":{},"104":{},"106":{},"107":{},"110":{},"113":{},"124":{},"126":{},"129":{},"132":{},"133":{},"134":{},"137":{},"151":{},"155":{},"157":{},"158":{},"162":{},"165":{},"168":{},"169":{},"174":{},"175":{},"178":{},"181":{},"193":{},"194":{},"197":{},"200":{},"201":{},"202":{}},"component":{}}],["ensuredetailform",{"_index":2754,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ensureuniqueid",{"_index":3319,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["enter",{"_index":330,"title":{},"name":{},"text":{"5":{},"11":{},"14":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"29":{},"39":{},"43":{},"50":{},"58":{},"59":{},"60":{},"63":{},"65":{},"70":{},"77":{},"80":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"95":{},"106":{},"110":{},"117":{},"126":{},"127":{},"128":{},"132":{},"133":{},"138":{},"145":{},"148":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"174":{},"178":{},"185":{},"194":{},"195":{},"196":{},"200":{},"201":{}},"component":{}}],["enter/edit",{"_index":1334,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["entir",{"_index":3782,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["entiti",{"_index":560,"title":{},"name":{},"text":{"16":{},"23":{},"38":{},"64":{},"66":{},"82":{},"90":{},"105":{},"131":{},"134":{},"150":{},"158":{},"173":{},"199":{},"202":{}},"component":{}}],["entity.get(\"nam",{"_index":5841,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.getlist(\"valu",{"_index":5845,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.getnam",{"_index":5782,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.getstring(\"nam",{"_index":5844,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.getstringlist(\"valu",{"_index":5847,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.getvalu",{"_index":5784,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.name().exist",{"_index":5787,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.name().get",{"_index":5778,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.optlist(\"valu",{"_index":5849,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.remove(\"nam",{"_index":5772,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.remove(entity.nam",{"_index":5770,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.remove(entity.name().getattributenam",{"_index":5771,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.remove(entity::nam",{"_index":5769,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.values().get",{"_index":5780,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.withlistattribut",{"_index":5820,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entity.withsingleattribut",{"_index":5828,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entitycontribut",{"_index":2861,"title":{},"name":{},"text":{"26":{}},"component":{}}],["entitystr",{"_index":5883,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["entri",{"_index":142,"title":{"5-5":{},"11-1":{},"22-12":{},"29-25":{},"63-21":{},"63-22":{},"63-23":{},"63-25":{},"70-5":{},"77-1":{},"88-12":{},"95-25":{},"132-21":{},"132-22":{},"132-23":{},"132-25":{},"138-5":{},"145-1":{},"156-12":{},"163-25":{},"200-21":{},"200-22":{},"200-23":{},"200-25":{}},"name":{"11":{},"77":{},"145":{}},"text":{"3":{},"4":{},"5":{},"6":{},"11":{},"14":{},"22":{},"23":{},"26":{},"28":{},"29":{},"31":{},"33":{},"35":{},"40":{},"46":{},"48":{},"51":{},"56":{},"63":{},"65":{},"69":{},"70":{},"71":{},"72":{},"77":{},"80":{},"88":{},"90":{},"93":{},"94":{},"95":{},"97":{},"99":{},"102":{},"107":{},"113":{},"115":{},"118":{},"123":{},"124":{},"132":{},"133":{},"137":{},"138":{},"139":{},"140":{},"145":{},"148":{},"156":{},"158":{},"162":{},"163":{},"165":{},"167":{},"170":{},"175":{},"181":{},"183":{},"186":{},"191":{},"193":{},"200":{},"201":{}},"component":{}}],["entrypoint",{"_index":4620,"title":{},"name":{},"text":{"48":{},"51":{},"63":{},"115":{},"118":{},"132":{},"183":{},"186":{},"200":{}},"component":{}}],["entrypointnam",{"_index":5493,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["entrypointpackag",{"_index":5494,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["enum",{"_index":3702,"title":{},"name":{},"text":{"40":{},"64":{},"107":{},"131":{},"175":{},"199":{}},"component":{}}],["enum/const",{"_index":5224,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["enumer",{"_index":5703,"title":{"64-25":{},"131-25":{},"199-25":{}},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["enumnam",{"_index":5898,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["enumname(\"scout.exampleenum",{"_index":5900,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["enums/const",{"_index":5220,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["enumvers",{"_index":2431,"title":{"26-16":{}},"name":{},"text":{"26":{}},"component":{}}],["env",{"_index":1095,"title":{},"name":{},"text":{"22":{},"46":{},"63":{},"88":{},"113":{},"132":{},"156":{},"181":{},"200":{}},"component":{}}],["environ",{"_index":709,"title":{},"name":{},"text":{"19":{},"26":{},"39":{},"40":{},"44":{},"46":{},"63":{},"84":{},"92":{},"93":{},"106":{},"107":{},"109":{},"113":{},"132":{},"152":{},"174":{},"175":{},"179":{},"181":{},"200":{}},"component":{}}],["envis",{"_index":5442,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["episod",{"_index":5470,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["epl",{"_index":2990,"title":{"93-3":{}},"name":{},"text":{"29":{},"93":{},"95":{},"163":{}},"component":{}}],["epoch",{"_index":5644,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["equal",{"_index":4425,"title":{"64-16":{},"131-16":{},"199-16":{}},"name":{},"text":{"44":{},"60":{},"62":{},"64":{},"109":{},"128":{},"130":{},"131":{},"179":{},"196":{},"198":{},"199":{}},"component":{}}],["equals(object",{"_index":4322,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["equival",{"_index":2797,"title":{},"name":{},"text":{"26":{},"39":{},"40":{},"106":{},"107":{},"174":{},"175":{}},"component":{}}],["error",{"_index":161,"title":{"26-41":{},"38-8":{},"105-8":{},"173-8":{}},"name":{},"text":{"3":{},"23":{},"26":{},"28":{},"31":{},"32":{},"37":{},"38":{},"39":{},"43":{},"46":{},"48":{},"51":{},"58":{},"59":{},"60":{},"63":{},"66":{},"69":{},"90":{},"93":{},"94":{},"97":{},"98":{},"104":{},"105":{},"106":{},"110":{},"113":{},"115":{},"118":{},"126":{},"127":{},"128":{},"132":{},"134":{},"137":{},"158":{},"160":{},"162":{},"165":{},"166":{},"169":{},"173":{},"174":{},"178":{},"181":{},"183":{},"186":{},"194":{},"195":{},"196":{},"200":{},"202":{}},"component":{}}],["errordo",{"_index":6023,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["errordorestclientexceptiontransform",{"_index":6422,"title":{"160-10":{}},"name":{},"text":{"160":{}},"component":{}}],["es",{"_index":4461,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["es5",{"_index":4466,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["es6",{"_index":4442,"title":{"46-2":{},"113-2":{},"181-2":{}},"name":{},"text":{"46":{},"92":{},"113":{},"181":{}},"component":{}}],["esbuild",{"_index":6288,"title":{},"name":{},"text":{"93":{}},"component":{}}],["escap",{"_index":5003,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["eslint",{"_index":2591,"title":{"46-16":{},"46-18":{},"93-18":{},"113-16":{},"113-17":{},"181-16":{},"181-17":{}},"name":{},"text":{"26":{},"46":{},"92":{},"93":{},"113":{},"124":{},"181":{},"193":{}},"component":{}}],["eslintignor",{"_index":4556,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["eslintrc.j",{"_index":2596,"title":{},"name":{},"text":{"26":{},"46":{},"92":{},"113":{},"181":{}},"component":{}}],["esm",{"_index":6374,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["especi",{"_index":2961,"title":{},"name":{},"text":{"28":{},"39":{},"44":{},"46":{},"53":{},"59":{},"60":{},"63":{},"93":{},"94":{},"106":{},"109":{},"113":{},"120":{},"127":{},"128":{},"132":{},"162":{},"174":{},"179":{},"181":{},"188":{},"195":{},"196":{},"200":{}},"component":{}}],["essenti",{"_index":4880,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["establish",{"_index":3990,"title":{},"name":{},"text":{"40":{},"60":{},"63":{},"107":{},"128":{},"132":{},"175":{},"196":{},"200":{}},"component":{}}],["estat",{"_index":1966,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["etc",{"_index":922,"title":{},"name":{},"text":{"20":{},"26":{},"27":{},"38":{},"40":{},"44":{},"49":{},"52":{},"56":{},"59":{},"60":{},"63":{},"86":{},"105":{},"107":{},"109":{},"116":{},"119":{},"123":{},"127":{},"128":{},"132":{},"154":{},"173":{},"175":{},"179":{},"184":{},"187":{},"191":{},"195":{},"196":{},"200":{}},"component":{}}],["eval(str",{"_index":4221,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["evalpermission(ipermiss",{"_index":4310,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["evalu",{"_index":2092,"title":{},"name":{},"text":{"23":{},"39":{},"43":{},"90":{},"106":{},"110":{},"158":{},"174":{},"178":{}},"component":{}}],["even",{"_index":63,"title":{},"name":{},"text":{"1":{},"18":{},"20":{},"23":{},"26":{},"27":{},"33":{},"35":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"50":{},"52":{},"53":{},"54":{},"56":{},"58":{},"60":{},"63":{},"64":{},"85":{},"86":{},"90":{},"92":{},"93":{},"99":{},"102":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"117":{},"119":{},"120":{},"121":{},"123":{},"126":{},"128":{},"131":{},"132":{},"135":{},"153":{},"154":{},"158":{},"167":{},"170":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"185":{},"187":{},"188":{},"189":{},"191":{},"194":{},"196":{},"199":{},"200":{}},"component":{}}],["event",{"_index":957,"title":{"33-5":{},"35-5":{},"39-16":{},"39-18":{},"60-8":{},"60-9":{},"93-7":{},"99-5":{},"102-5":{},"106-16":{},"106-18":{},"128-9":{},"128-10":{},"128-11":{},"167-5":{},"170-5":{},"174-16":{},"174-18":{},"196-9":{},"196-10":{},"196-11":{}},"name":{},"text":{"20":{},"22":{},"23":{},"26":{},"27":{},"33":{},"35":{},"36":{},"39":{},"40":{},"50":{},"53":{},"60":{},"61":{},"62":{},"65":{},"66":{},"86":{},"88":{},"90":{},"93":{},"99":{},"102":{},"103":{},"106":{},"107":{},"117":{},"120":{},"128":{},"129":{},"130":{},"133":{},"134":{},"154":{},"156":{},"158":{},"167":{},"168":{},"170":{},"174":{},"175":{},"185":{},"188":{},"196":{},"197":{},"198":{},"201":{},"202":{}},"component":{}}],["event.data",{"_index":3186,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["event.getdata().getfutur",{"_index":3575,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["event.getst",{"_index":3710,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["event.newvalu",{"_index":5270,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["event.oldvalu",{"_index":5269,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["event.propertynam",{"_index":5267,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["event.source.label",{"_index":5256,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["eventfilt",{"_index":3549,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["eventmap",{"_index":6272,"title":{},"name":{},"text":{"93":{},"128":{},"196":{}},"component":{}}],["eventsourc",{"_index":4229,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["eventsupport",{"_index":5250,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["eventtablepag",{"_index":2374,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["eventtypecodetyp",{"_index":3155,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["eventu",{"_index":2781,"title":{},"name":{},"text":{"26":{},"58":{},"65":{},"126":{},"133":{},"194":{},"201":{}},"component":{}}],["everyth",{"_index":2858,"title":{},"name":{},"text":{"26":{},"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["everywher",{"_index":4628,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["ex",{"_index":5823,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exact",{"_index":2375,"title":{},"name":{},"text":{"23":{},"40":{},"45":{},"90":{},"107":{},"112":{},"158":{},"175":{},"180":{}},"component":{}}],["exactli",{"_index":324,"title":{},"name":{},"text":{"5":{},"22":{},"23":{},"26":{},"29":{},"34":{},"39":{},"40":{},"42":{},"60":{},"63":{},"70":{},"88":{},"90":{},"95":{},"101":{},"106":{},"107":{},"108":{},"128":{},"132":{},"138":{},"156":{},"158":{},"163":{},"172":{},"174":{},"175":{},"177":{},"196":{},"200":{}},"component":{}}],["exampl",{"_index":253,"title":{"39-27":{},"39-35":{},"40-15":{},"40-20":{},"48-8":{},"61-1":{},"63-25":{},"65-9":{},"106-27":{},"106-35":{},"107-15":{},"107-20":{},"115-8":{},"129-1":{},"132-25":{},"133-9":{},"174-27":{},"174-35":{},"175-15":{},"175-20":{},"183-8":{},"197-1":{},"200-25":{},"201-9":{}},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"26":{},"27":{},"29":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"70":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"84":{},"85":{},"86":{},"87":{},"88":{},"90":{},"92":{},"93":{},"95":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"116":{},"118":{},"119":{},"120":{},"121":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"133":{},"134":{},"138":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"152":{},"153":{},"154":{},"155":{},"156":{},"158":{},"160":{},"163":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"181":{},"182":{},"183":{},"184":{},"186":{},"187":{},"188":{},"189":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["example.cli",{"_index":6344,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["example.com",{"_index":6060,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["example.examplejsform",{"_index":6349,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["example.menutyp",{"_index":6172,"title":{},"name":{},"text":{"92":{}},"component":{}}],["exampleclasscontributor",{"_index":6001,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["examplecompositeid",{"_index":6313,"title":{},"name":{},"text":{"93":{}},"component":{}}],["examplecompositeid(c1",{"_index":6324,"title":{},"name":{},"text":{"93":{}},"component":{}}],["examplecompositeid(examplestringid",{"_index":6314,"title":{},"name":{},"text":{"93":{}},"component":{}}],["examplecompositeid(examplestringid.of(c1",{"_index":6321,"title":{},"name":{},"text":{"93":{}},"component":{}}],["exampledoentitylistdo",{"_index":5805,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleent",{"_index":5862,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleentity1",{"_index":5831,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleentity1do",{"_index":5790,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleentity2",{"_index":5832,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleentity2do",{"_index":5798,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleentitydo",{"_index":5705,"title":{},"name":{},"text":{"64":{},"66":{},"131":{},"134":{},"199":{},"202":{}},"component":{}}],["exampleentitydo.class",{"_index":5733,"title":{},"name":{},"text":{"64":{},"66":{},"131":{},"134":{},"199":{},"202":{}},"component":{}}],["exampleentityexdo",{"_index":5834,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleenum",{"_index":5901,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleenum(str",{"_index":5906,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["examplefield",{"_index":6358,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["exampleform",{"_index":4601,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["exampleformmodel.j",{"_index":4597,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["exampleid",{"_index":5912,"title":{},"name":{},"text":{"64":{},"100":{},"131":{},"171":{},"199":{}},"component":{}}],["exampleid(id",{"_index":5919,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleid(uuid",{"_index":5922,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleid(uuid.fromstring(id",{"_index":5921,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["exampleid(uuid.randomuuid",{"_index":5917,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["examplejsform",{"_index":6346,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["examplejsform.getoutputdata",{"_index":6356,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["examplejsform.isformstor",{"_index":6353,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["examplejsform.setinputdata(getexamplejsforminputdata",{"_index":6350,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["examplejsform.start",{"_index":6351,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["examplejsform.waitfor",{"_index":6352,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["examplejsformdo",{"_index":6354,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["examplejsformmodel",{"_index":6357,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["examplelookuprowdo",{"_index":2945,"title":{},"name":{},"text":{"27":{}},"component":{}}],["examplemapent",{"_index":5860,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["examplemapentitydo",{"_index":5858,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["examplemenu",{"_index":6281,"title":{},"name":{},"text":{"93":{}},"component":{}}],["exampleresourc",{"_index":5992,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["exampleresourcecli",{"_index":6028,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["examplerestclienthelp",{"_index":6010,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["exampleuuid",{"_index":6316,"title":{},"name":{},"text":{"93":{}},"component":{}}],["exampleuuid.of(c2",{"_index":6322,"title":{},"name":{},"text":{"93":{}},"component":{}}],["exce",{"_index":2872,"title":{},"name":{},"text":{"26":{}},"component":{}}],["exceed",{"_index":2460,"title":{"26-41":{}},"name":{},"text":{"40":{},"44":{},"63":{},"107":{},"109":{},"132":{},"175":{},"179":{},"200":{}},"component":{}}],["except",{"_index":1704,"title":{"38":{},"105":{},"173":{},"38-2":{},"38-13":{},"38-14":{},"38-19":{},"39-25":{},"105-2":{},"105-13":{},"105-14":{},"105-19":{},"106-25":{},"173-2":{},"173-13":{},"173-14":{},"173-19":{},"174-25":{}},"name":{"38":{},"105":{},"173":{}},"text":{"23":{},"38":{},"39":{},"40":{},"41":{},"43":{},"48":{},"56":{},"59":{},"63":{},"66":{},"90":{},"105":{},"106":{},"107":{},"110":{},"111":{},"115":{},"127":{},"132":{},"134":{},"158":{},"160":{},"173":{},"174":{},"175":{},"176":{},"178":{},"183":{},"195":{},"200":{},"202":{}},"component":{}}],["exceptionhandl",{"_index":3466,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["exceptions/error",{"_index":3342,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["exception’",{"_index":3348,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["excerpt",{"_index":4954,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["exclamation_mark",{"_index":2703,"title":{},"name":{},"text":{"26":{}},"component":{}}],["exclamation_mark_bold",{"_index":2704,"title":{},"name":{},"text":{"26":{}},"component":{}}],["exclud",{"_index":1167,"title":{"63-18":{},"132-18":{},"200-18":{}},"name":{},"text":{"22":{},"23":{},"39":{},"46":{},"48":{},"53":{},"63":{},"88":{},"90":{},"106":{},"113":{},"115":{},"120":{},"132":{},"156":{},"158":{},"174":{},"181":{},"183":{},"188":{},"200":{}},"component":{}}],["exclus",{"_index":2415,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"90":{},"106":{},"107":{},"158":{},"174":{},"175":{}},"component":{}}],["exec",{"_index":4634,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["execact",{"_index":1803,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execchangedmastervalu",{"_index":1900,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execchangedmastervalue(object",{"_index":1888,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execchangedvalu",{"_index":2094,"title":{},"name":{},"text":{"23":{},"34":{},"90":{},"101":{},"158":{},"172":{}},"component":{}}],["execcreatechildpag",{"_index":1250,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execcreatechildpage(itablerow",{"_index":2407,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execcreatechildpages(list",{"_index":574,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["execcreatelookuprow",{"_index":1356,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execinitfield",{"_index":2202,"title":{},"name":{},"text":{"23":{},"43":{},"53":{},"90":{},"110":{},"120":{},"158":{},"178":{},"188":{}},"component":{}}],["execinitfield(formfieldinitfieldchain",{"_index":4640,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["execinitform(forminitformchain",{"_index":4694,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["execinstallhandl",{"_index":5621,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["execinstallhandlers(list",{"_index":5625,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["execload",{"_index":2024,"title":{},"name":{},"text":{"23":{},"33":{},"90":{},"99":{},"158":{},"170":{}},"component":{}}],["execloaddata",{"_index":1389,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execloaddata(searchfilt",{"_index":1376,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execloadpermiss",{"_index":4277,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["execloadpermissions(str",{"_index":2017,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execpostload(formhandlerpostloadchain",{"_index":4704,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["execpostmessag",{"_index":2719,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["execpostmessage(object",{"_index":2733,"title":{},"name":{},"text":{"26":{}},"component":{}}],["execpostmessage(str",{"_index":2732,"title":{},"name":{},"text":{"26":{}},"component":{}}],["execpreparelookup(ilookupcal",{"_index":5960,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["execstor",{"_index":2025,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execut",{"_index":489,"title":{},"name":{},"text":{"14":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"39":{},"40":{},"41":{},"42":{},"43":{},"46":{},"48":{},"51":{},"56":{},"58":{},"60":{},"63":{},"65":{},"66":{},"80":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"106":{},"107":{},"108":{},"110":{},"111":{},"113":{},"115":{},"118":{},"123":{},"126":{},"128":{},"132":{},"133":{},"134":{},"148":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"174":{},"175":{},"176":{},"177":{},"178":{},"181":{},"183":{},"186":{},"191":{},"194":{},"196":{},"200":{},"201":{},"202":{}},"component":{}}],["executionexcept",{"_index":3380,"title":{},"name":{},"text":{"38":{},"39":{},"105":{},"106":{},"173":{},"174":{}},"component":{}}],["executionsemaphor",{"_index":3414,"title":{"39-28":{},"106-28":{},"174-28":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["executionsemaphore.that",{"_index":3651,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["executiontrigg",{"_index":3415,"title":{"39-29":{},"106-29":{},"174-29":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["executor",{"_index":3418,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["execvalid",{"_index":2105,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execvalidatevalu",{"_index":2086,"title":{},"name":{},"text":{"23":{},"48":{},"90":{},"115":{},"158":{},"183":{}},"component":{}}],["execvalidatevalue(str",{"_index":2078,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["execvalueclick",{"_index":3113,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["execvalueclick(bigdecim",{"_index":3114,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["exhaust",{"_index":4438,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["exist",{"_index":265,"title":{"29-32":{},"95-32":{},"163-32":{}},"name":{},"text":{"4":{},"5":{},"15":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"39":{},"40":{},"43":{},"44":{},"48":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"63":{},"64":{},"70":{},"71":{},"81":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"106":{},"107":{},"109":{},"110":{},"115":{},"119":{},"121":{},"122":{},"123":{},"124":{},"126":{},"128":{},"129":{},"131":{},"132":{},"138":{},"139":{},"149":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"160":{},"161":{},"163":{},"174":{},"175":{},"178":{},"179":{},"183":{},"187":{},"189":{},"190":{},"191":{},"193":{},"194":{},"196":{},"197":{},"199":{},"200":{}},"component":{}}],["exit",{"_index":328,"title":{},"name":{},"text":{"5":{},"29":{},"39":{},"40":{},"63":{},"70":{},"95":{},"106":{},"107":{},"132":{},"138":{},"163":{},"174":{},"175":{},"200":{}},"component":{}}],["expand",{"_index":1015,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"87":{},"89":{},"90":{},"155":{},"157":{},"158":{}},"component":{}}],["expect",{"_index":2734,"title":{},"name":{},"text":{"26":{},"28":{},"38":{},"39":{},"53":{},"56":{},"58":{},"59":{},"63":{},"64":{},"66":{},"94":{},"105":{},"106":{},"120":{},"123":{},"126":{},"127":{},"131":{},"132":{},"134":{},"162":{},"173":{},"174":{},"188":{},"191":{},"194":{},"195":{},"199":{},"200":{},"202":{}},"component":{}}],["expens",{"_index":3995,"title":{},"name":{},"text":{"40":{},"43":{},"63":{},"107":{},"110":{},"132":{},"175":{},"178":{},"200":{}},"component":{}}],["experi",{"_index":2422,"title":{"93-4":{}},"name":{},"text":{"24":{},"26":{},"46":{},"63":{},"89":{},"113":{},"132":{},"157":{},"181":{},"200":{}},"component":{}}],["experienc",{"_index":2971,"title":{},"name":{},"text":{"29":{},"63":{},"93":{},"95":{},"124":{},"132":{},"163":{},"193":{},"200":{}},"component":{}}],["expir",{"_index":3520,"title":{},"name":{},"text":{"39":{},"40":{},"63":{},"106":{},"107":{},"132":{},"174":{},"175":{},"200":{}},"component":{}}],["explain",{"_index":80,"title":{},"name":{},"text":{"1":{},"23":{},"48":{},"54":{},"67":{},"90":{},"93":{},"115":{},"121":{},"135":{},"158":{},"183":{},"189":{}},"component":{}}],["explicit",{"_index":5455,"title":{},"name":{},"text":{"63":{},"66":{},"132":{},"134":{},"200":{},"202":{}},"component":{}}],["explicitli",{"_index":2705,"title":{},"name":{},"text":{"26":{},"39":{},"54":{},"60":{},"63":{},"64":{},"66":{},"106":{},"113":{},"121":{},"128":{},"131":{},"132":{},"134":{},"174":{},"181":{},"189":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["exploit",{"_index":4237,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["explor",{"_index":366,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"16":{},"17":{},"23":{},"24":{},"26":{},"27":{},"29":{},"50":{},"73":{},"74":{},"76":{},"78":{},"79":{},"82":{},"83":{},"89":{},"90":{},"95":{},"117":{},"141":{},"142":{},"144":{},"146":{},"147":{},"150":{},"151":{},"157":{},"158":{},"163":{},"185":{}},"component":{}}],["export",{"_index":220,"title":{},"name":{},"text":{"4":{},"19":{},"22":{},"29":{},"36":{},"40":{},"46":{},"48":{},"52":{},"60":{},"71":{},"84":{},"88":{},"93":{},"95":{},"100":{},"103":{},"107":{},"113":{},"115":{},"119":{},"128":{},"139":{},"152":{},"156":{},"163":{},"168":{},"171":{},"175":{},"181":{},"183":{},"187":{},"196":{}},"component":{}}],["export/import",{"_index":4807,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["exportcert",{"_index":745,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["exportdata",{"_index":4737,"title":{},"name":{},"text":{"50":{},"100":{},"117":{},"171":{},"185":{}},"component":{}}],["exportformdata(formdata",{"_index":2028,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["expos",{"_index":4247,"title":{},"name":{},"text":{"43":{},"66":{},"110":{},"134":{},"178":{},"202":{}},"component":{}}],["express",{"_index":2084,"title":{},"name":{},"text":{"23":{},"26":{},"90":{},"158":{}},"component":{}}],["extend",{"_index":299,"title":{"39-34":{},"48-3":{},"48-8":{},"48-10":{},"64-24":{},"66-4":{},"106-34":{},"115-3":{},"115-8":{},"115-10":{},"131-24":{},"134-4":{},"174-34":{},"183-3":{},"183-8":{},"183-10":{},"199-24":{},"202-4":{}},"name":{},"text":{"5":{},"16":{},"20":{},"22":{},"23":{},"26":{},"27":{},"29":{},"33":{},"34":{},"36":{},"38":{},"39":{},"40":{},"43":{},"46":{},"48":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"82":{},"86":{},"88":{},"90":{},"92":{},"93":{},"95":{},"99":{},"100":{},"101":{},"103":{},"105":{},"106":{},"107":{},"110":{},"113":{},"115":{},"120":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"138":{},"150":{},"154":{},"156":{},"158":{},"163":{},"168":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"178":{},"181":{},"183":{},"188":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["extend(tru",{"_index":3183,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["extend({par",{"_index":5217,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["extendedform",{"_index":4602,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["extendedform.j",{"_index":4600,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["extendedformmodel",{"_index":4605,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["extendedformmodel.j",{"_index":4611,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["extends(personformdata.class",{"_index":4675,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["extens",{"_index":1108,"title":{"48":{},"115":{},"183":{},"48-1":{},"48-2":{},"48-4":{},"48-5":{},"48-7":{},"115-1":{},"115-2":{},"115-4":{},"115-5":{},"115-7":{},"183-1":{},"183-2":{},"183-4":{},"183-5":{},"183-7":{}},"name":{"48":{},"115":{},"183":{}},"text":{"22":{},"23":{},"29":{},"48":{},"52":{},"53":{},"88":{},"90":{},"95":{},"115":{},"119":{},"120":{},"156":{},"158":{},"163":{},"183":{},"187":{},"188":{}},"component":{}}],["extension.instal",{"_index":4624,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["extension.testmethod",{"_index":4710,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["extern",{"_index":219,"title":{},"name":{},"text":{"4":{},"14":{},"29":{},"34":{},"43":{},"65":{},"71":{},"80":{},"95":{},"101":{},"110":{},"113":{},"133":{},"139":{},"148":{},"163":{},"172":{},"178":{},"181":{},"201":{}},"component":{}}],["extra",{"_index":994,"title":{},"name":{},"text":{"21":{},"24":{},"59":{},"87":{},"89":{},"127":{},"155":{},"157":{},"195":{}},"component":{}}],["extract",{"_index":868,"title":{},"name":{},"text":{"19":{},"21":{},"22":{},"24":{},"46":{},"64":{},"84":{},"87":{},"88":{},"89":{},"113":{},"131":{},"152":{},"155":{},"156":{},"157":{},"181":{},"199":{}},"component":{}}],["f",{"_index":1870,"title":{},"name":{},"text":{"23":{},"65":{},"90":{},"133":{},"158":{},"201":{}},"component":{}}],["f01e",{"_index":2671,"title":{},"name":{},"text":{"26":{}},"component":{}}],["f0e2",{"_index":2669,"title":{},"name":{},"text":{"26":{}},"component":{}}],["f185e930a977",{"_index":4866,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["f2",{"_index":233,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["f35a677faa06",{"_index":2193,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["f375",{"_index":2295,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["f488",{"_index":1830,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["f4cf",{"_index":2213,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["f5",{"_index":784,"title":{},"name":{},"text":{"19":{},"63":{},"84":{},"132":{},"152":{},"200":{}},"component":{}}],["f5f5f5",{"_index":4961,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["f89fa1",{"_index":3178,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["f8ba",{"_index":1880,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["facad",{"_index":3396,"title":{},"name":{},"text":{"38":{},"41":{},"105":{},"111":{},"173":{},"176":{}},"component":{}}],["face",{"_index":4795,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["facil",{"_index":5402,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["facilit",{"_index":912,"title":{},"name":{},"text":{"20":{},"39":{},"41":{},"63":{},"86":{},"106":{},"111":{},"132":{},"154":{},"174":{},"176":{},"200":{}},"component":{}}],["fact",{"_index":1335,"title":{},"name":{},"text":{"23":{},"63":{},"90":{},"132":{},"158":{},"200":{}},"component":{}}],["factor",{"_index":2814,"title":{},"name":{},"text":{"26":{},"45":{},"112":{},"180":{}},"component":{}}],["factori",{"_index":1131,"title":{"55":{},"122":{},"190":{},"41-1":{},"111-1":{},"176-1":{}},"name":{"55":{},"122":{},"190":{}},"text":{"22":{},"39":{},"40":{},"41":{},"48":{},"55":{},"60":{},"88":{},"92":{},"106":{},"107":{},"111":{},"115":{},"122":{},"128":{},"156":{},"174":{},"175":{},"176":{},"183":{},"190":{},"196":{}},"component":{}}],["factorypath",{"_index":2486,"title":{"63-48":{},"132-48":{},"200-48":{}},"name":{},"text":{"26":{},"63":{},"92":{},"132":{},"200":{}},"component":{}}],["fail",{"_index":630,"title":{},"name":{},"text":{"17":{},"21":{},"23":{},"24":{},"28":{},"37":{},"39":{},"40":{},"43":{},"58":{},"61":{},"83":{},"87":{},"89":{},"90":{},"93":{},"94":{},"104":{},"106":{},"107":{},"110":{},"124":{},"126":{},"129":{},"151":{},"155":{},"157":{},"158":{},"162":{},"169":{},"174":{},"175":{},"178":{},"193":{},"194":{},"197":{}},"component":{}}],["failov",{"_index":4061,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["failur",{"_index":3326,"title":{},"name":{},"text":{"37":{},"38":{},"104":{},"105":{},"169":{},"173":{}},"component":{}}],["fair",{"_index":3625,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["fall",{"_index":3529,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["fals",{"_index":281,"title":{},"name":{},"text":{"4":{},"20":{},"22":{},"23":{},"26":{},"29":{},"35":{},"36":{},"37":{},"39":{},"40":{},"43":{},"46":{},"54":{},"59":{},"60":{},"66":{},"71":{},"86":{},"88":{},"90":{},"92":{},"95":{},"102":{},"103":{},"104":{},"106":{},"107":{},"110":{},"113":{},"121":{},"127":{},"128":{},"134":{},"139":{},"154":{},"156":{},"158":{},"163":{},"167":{},"168":{},"169":{},"174":{},"175":{},"178":{},"181":{},"189":{},"195":{},"196":{},"202":{}},"component":{}}],["famili",{"_index":4796,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["familiar",{"_index":2988,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["faq",{"_index":6267,"title":{},"name":{},"text":{"93":{}},"component":{}}],["far",{"_index":1218,"title":{},"name":{},"text":{"23":{},"60":{},"90":{},"128":{},"158":{},"196":{}},"component":{}}],["faster",{"_index":4519,"title":{"93-16":{}},"name":{},"text":{"46":{},"63":{},"113":{},"132":{},"181":{},"200":{}},"component":{}}],["favor",{"_index":2780,"title":{},"name":{},"text":{"26":{}},"component":{}}],["favorit",{"_index":549,"title":{},"name":{},"text":{"16":{},"17":{},"21":{},"24":{},"82":{},"83":{},"87":{},"89":{},"150":{},"151":{},"155":{},"157":{}},"component":{}}],["favour",{"_index":5970,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["favourit",{"_index":3201,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["faz",{"_index":5928,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["fc50f27d790b",{"_index":2372,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["fca6",{"_index":1954,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["fdb6a1ce1d77",{"_index":1936,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["fdf2d1",{"_index":3174,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["fe7a",{"_index":2136,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["featur",{"_index":78,"title":{"36-8":{},"103-8":{},"168-8":{}},"name":{},"text":{"1":{},"5":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"39":{},"40":{},"43":{},"46":{},"48":{},"50":{},"51":{},"53":{},"56":{},"59":{},"63":{},"64":{},"67":{},"70":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"106":{},"107":{},"110":{},"113":{},"115":{},"117":{},"118":{},"120":{},"123":{},"127":{},"131":{},"132":{},"135":{},"138":{},"156":{},"157":{},"158":{},"162":{},"163":{},"174":{},"175":{},"178":{},"181":{},"183":{},"185":{},"186":{},"188":{},"191":{},"195":{},"199":{},"200":{}},"component":{}}],["features/version/22.0.41",{"_index":2894,"title":{},"name":{},"text":{"27":{}},"component":{}}],["features/version/23.1.8",{"_index":6266,"title":{},"name":{},"text":{"93":{}},"component":{}}],["features/version/23.2.0",{"_index":6436,"title":{},"name":{},"text":{"161":{}},"component":{}}],["feb",{"_index":3035,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["feb24b50740a",{"_index":1386,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["feel",{"_index":5050,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["femal",{"_index":1839,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["femalecod",{"_index":1869,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["fetch",{"_index":1183,"title":{"23-23":{},"90-23":{},"158-23":{}},"name":{},"text":{"23":{},"40":{},"65":{},"90":{},"107":{},"133":{},"158":{},"175":{},"201":{}},"component":{}}],["few",{"_index":88,"title":{},"name":{},"text":{"1":{},"19":{},"22":{},"38":{},"41":{},"46":{},"48":{},"53":{},"56":{},"64":{},"67":{},"84":{},"88":{},"100":{},"105":{},"111":{},"113":{},"115":{},"120":{},"123":{},"131":{},"135":{},"152":{},"156":{},"171":{},"173":{},"176":{},"181":{},"183":{},"188":{},"191":{},"199":{}},"component":{}}],["fewer",{"_index":1396,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["field",{"_index":225,"title":{"36":{},"49":{},"58":{},"103":{},"116":{},"126":{},"168":{},"184":{},"194":{},"5-2":{},"7-2":{},"8-2":{},"10-2":{},"12-2":{},"13-2":{},"14-2":{},"23-29":{},"23-32":{},"23-33":{},"23-34":{},"23-35":{},"23-36":{},"23-37":{},"26-26":{},"27-19":{},"27-22":{},"27-23":{},"27-25":{},"29-12":{},"29-15":{},"29-18":{},"29-21":{},"36-8":{},"59-1":{},"59-3":{},"70-2":{},"73-2":{},"74-2":{},"76-2":{},"78-2":{},"79-2":{},"80-2":{},"90-29":{},"90-32":{},"90-33":{},"90-34":{},"90-35":{},"90-36":{},"90-37":{},"95-12":{},"95-15":{},"95-18":{},"95-21":{},"103-8":{},"127-1":{},"127-3":{},"138-2":{},"141-2":{},"142-2":{},"144-2":{},"146-2":{},"147-2":{},"148-2":{},"158-29":{},"158-32":{},"158-33":{},"158-34":{},"158-35":{},"158-36":{},"158-37":{},"163-12":{},"163-15":{},"163-18":{},"163-21":{},"168-8":{},"195-1":{},"195-3":{}},"name":{"34":{},"49":{},"58":{},"101":{},"116":{},"126":{},"172":{},"184":{},"194":{}},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"17":{},"20":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"32":{},"34":{},"36":{},"43":{},"48":{},"49":{},"50":{},"53":{},"54":{},"58":{},"59":{},"60":{},"62":{},"63":{},"65":{},"70":{},"71":{},"72":{},"73":{},"74":{},"76":{},"77":{},"78":{},"79":{},"80":{},"83":{},"86":{},"88":{},"89":{},"90":{},"94":{},"95":{},"98":{},"101":{},"103":{},"110":{},"115":{},"116":{},"117":{},"120":{},"121":{},"126":{},"127":{},"128":{},"130":{},"132":{},"133":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"145":{},"146":{},"147":{},"148":{},"151":{},"154":{},"156":{},"157":{},"158":{},"162":{},"163":{},"166":{},"168":{},"172":{},"178":{},"183":{},"184":{},"185":{},"188":{},"189":{},"194":{},"195":{},"196":{},"198":{},"200":{},"201":{}},"component":{}}],["field.addvalidator(valid",{"_index":5046,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["field.appenddiv('card",{"_index":3234,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["field.do",{"_index":5207,"title":{},"name":{},"text":{"60":{}},"component":{}}],["field.extern",{"_index":3160,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["field.priv",{"_index":3158,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["field.publ",{"_index":3156,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["field.setformatter(formatt",{"_index":5033,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["field.setlabelvisible(tru",{"_index":5235,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["field.setparser(pars",{"_index":5039,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["field.setvalue(valu",{"_index":5012,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["field.thi",{"_index":5209,"title":{},"name":{},"text":{"60":{}},"component":{}}],["field.valu",{"_index":5011,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["field]",{"_index":4727,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["fields.if",{"_index":5204,"title":{},"name":{},"text":{"60":{}},"component":{}}],["figur",{"_index":316,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"19":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"33":{},"35":{},"40":{},"42":{},"47":{},"49":{},"53":{},"56":{},"58":{},"59":{},"60":{},"61":{},"63":{},"70":{},"72":{},"73":{},"74":{},"76":{},"77":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"87":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"99":{},"102":{},"107":{},"108":{},"114":{},"116":{},"120":{},"123":{},"124":{},"126":{},"127":{},"128":{},"129":{},"132":{},"138":{},"140":{},"141":{},"142":{},"144":{},"145":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"155":{},"157":{},"158":{},"162":{},"163":{},"167":{},"170":{},"175":{},"177":{},"182":{},"184":{},"188":{},"191":{},"193":{},"194":{},"195":{},"196":{},"197":{},"200":{}},"component":{}}],["file",{"_index":186,"title":{"4-5":{},"19-4":{},"19-8":{},"22-11":{},"26-41":{},"29-28":{},"36-2":{},"36-3":{},"36-4":{},"56-1":{},"57-1":{},"57-3":{},"57-4":{},"63-13":{},"63-46":{},"63-47":{},"63-48":{},"71-5":{},"84-4":{},"84-8":{},"88-11":{},"95-28":{},"103-2":{},"103-3":{},"103-4":{},"123-1":{},"125-1":{},"125-3":{},"125-4":{},"132-13":{},"132-46":{},"132-47":{},"132-48":{},"139-5":{},"152-4":{},"152-8":{},"156-11":{},"163-28":{},"168-2":{},"168-3":{},"168-4":{},"191-1":{},"192-1":{},"192-3":{},"192-4":{},"200-13":{},"200-46":{},"200-47":{},"200-48":{}},"name":{},"text":{"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"32":{},"33":{},"35":{},"36":{},"40":{},"43":{},"46":{},"48":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"60":{},"62":{},"63":{},"64":{},"66":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"98":{},"99":{},"102":{},"103":{},"107":{},"110":{},"113":{},"115":{},"118":{},"119":{},"120":{},"122":{},"123":{},"124":{},"125":{},"128":{},"130":{},"131":{},"132":{},"134":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"166":{},"167":{},"168":{},"170":{},"175":{},"178":{},"181":{},"183":{},"186":{},"187":{},"188":{},"190":{},"191":{},"192":{},"193":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["file.html",{"_index":4535,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["filenam",{"_index":4762,"title":{},"name":{},"text":{"51":{},"52":{},"118":{},"119":{},"186":{},"187":{}},"component":{}}],["filesystem",{"_index":3825,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["fill",{"_index":367,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"17":{},"23":{},"24":{},"29":{},"33":{},"35":{},"37":{},"46":{},"48":{},"50":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"83":{},"89":{},"90":{},"95":{},"99":{},"102":{},"104":{},"113":{},"115":{},"117":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"151":{},"157":{},"158":{},"163":{},"167":{},"169":{},"170":{},"181":{},"183":{},"185":{}},"component":{}}],["filler",{"_index":4891,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["filter",{"_index":226,"title":{"26-37":{},"27-22":{},"39-15":{},"39-16":{},"43-15":{},"59-3":{},"66-14":{},"66-15":{},"92-18":{},"106-15":{},"106-16":{},"110-15":{},"127-3":{},"134-14":{},"134-15":{},"174-15":{},"174-16":{},"178-15":{},"195-3":{},"202-14":{},"202-15":{}},"name":{},"text":{"4":{},"14":{},"23":{},"26":{},"27":{},"29":{},"39":{},"40":{},"43":{},"59":{},"63":{},"66":{},"71":{},"80":{},"90":{},"92":{},"93":{},"95":{},"106":{},"107":{},"110":{},"127":{},"132":{},"134":{},"139":{},"148":{},"158":{},"163":{},"174":{},"175":{},"178":{},"195":{},"200":{},"202":{}},"component":{}}],["filter.setacceptedtext(text",{"_index":5137,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["filteraccept",{"_index":5176,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["filteraccordingtoselect",{"_index":6167,"title":{},"name":{},"text":{"92":{}},"component":{}}],["filteredelementsdirti",{"_index":5177,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["filtersupport",{"_index":5163,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["filtersupport.renderfilterfield",{"_index":5180,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["filtertext",{"_index":5129,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["filtertext.indexof(this.acceptedtext",{"_index":5132,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["filtertil",{"_index":2850,"title":{},"name":{},"text":{"26":{}},"component":{}}],["filterwidget",{"_index":5138,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["final",{"_index":621,"title":{},"name":{},"text":{"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"29":{},"33":{},"35":{},"36":{},"39":{},"40":{},"43":{},"48":{},"50":{},"52":{},"63":{},"64":{},"65":{},"66":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"99":{},"102":{},"103":{},"106":{},"107":{},"110":{},"113":{},"115":{},"117":{},"119":{},"131":{},"132":{},"133":{},"134":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"167":{},"168":{},"170":{},"174":{},"175":{},"178":{},"181":{},"183":{},"185":{},"187":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["find",{"_index":19,"title":{"4-6":{},"29-29":{},"60-5":{},"71-6":{},"93-8":{},"95-29":{},"128-5":{},"139-6":{},"163-29":{},"196-5":{}},"name":{},"text":{"1":{},"4":{},"14":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"36":{},"40":{},"48":{},"52":{},"56":{},"60":{},"64":{},"67":{},"71":{},"80":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"103":{},"107":{},"115":{},"119":{},"123":{},"128":{},"131":{},"135":{},"139":{},"148":{},"152":{},"155":{},"156":{},"157":{},"158":{},"163":{},"168":{},"175":{},"183":{},"187":{},"191":{},"196":{},"199":{}},"component":{}}],["find/replac",{"_index":6131,"title":{},"name":{},"text":{"92":{}},"component":{}}],["fine",{"_index":673,"title":{},"name":{},"text":{"18":{},"23":{},"26":{},"46":{},"53":{},"55":{},"85":{},"90":{},"113":{},"120":{},"122":{},"153":{},"158":{},"181":{},"188":{},"190":{}},"component":{}}],["finger",{"_index":4834,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["fingerprint",{"_index":4541,"title":{},"name":{},"text":{"46":{},"51":{},"113":{},"118":{},"181":{},"186":{}},"component":{}}],["finish",{"_index":370,"title":{"39-20":{},"39-22":{},"39-24":{},"106-20":{},"106-22":{},"106-24":{},"174-20":{},"174-22":{},"174-24":{}},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"21":{},"23":{},"24":{},"29":{},"39":{},"61":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"83":{},"87":{},"89":{},"90":{},"95":{},"106":{},"129":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"155":{},"157":{},"158":{},"163":{},"174":{},"197":{}},"component":{}}],["finit",{"_index":5342,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["fire",{"_index":3421,"title":{},"name":{},"text":{"39":{},"50":{},"63":{},"106":{},"117":{},"132":{},"174":{},"185":{},"200":{}},"component":{}}],["firefox",{"_index":2923,"title":{},"name":{},"text":{"27":{},"45":{},"52":{},"112":{},"119":{},"180":{},"187":{}},"component":{}}],["firewal",{"_index":5691,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["first",{"_index":35,"title":{},"name":{},"text":{"1":{},"4":{},"6":{},"7":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"33":{},"35":{},"39":{},"40":{},"43":{},"46":{},"48":{},"52":{},"53":{},"56":{},"58":{},"60":{},"62":{},"63":{},"66":{},"67":{},"71":{},"72":{},"73":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"95":{},"99":{},"102":{},"106":{},"107":{},"110":{},"113":{},"115":{},"119":{},"120":{},"123":{},"126":{},"128":{},"130":{},"132":{},"134":{},"135":{},"139":{},"140":{},"141":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"167":{},"170":{},"174":{},"175":{},"178":{},"181":{},"183":{},"187":{},"188":{},"191":{},"194":{},"196":{},"198":{},"200":{},"202":{}},"component":{}}],["first_nam",{"_index":1588,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["firstnam",{"_index":1438,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["firstnamecolumn",{"_index":1407,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["firstnamefield",{"_index":1914,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["fit",{"_index":1697,"title":{},"name":{},"text":{"23":{},"26":{},"34":{},"40":{},"53":{},"90":{},"101":{},"107":{},"120":{},"158":{},"172":{},"175":{},"188":{}},"component":{}}],["fix",{"_index":2118,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"47":{},"64":{},"65":{},"90":{},"92":{},"106":{},"107":{},"114":{},"131":{},"133":{},"158":{},"174":{},"175":{},"182":{},"199":{},"201":{}},"component":{}}],["fixeddelayschedulebuild",{"_index":3640,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["fixturestringid",{"_index":6224,"title":{},"name":{},"text":{"92":{}},"component":{}}],["flag",{"_index":765,"title":{},"name":{},"text":{"19":{},"39":{},"40":{},"43":{},"54":{},"59":{},"63":{},"84":{},"106":{},"107":{},"110":{},"121":{},"127":{},"132":{},"152":{},"174":{},"175":{},"178":{},"189":{},"195":{},"200":{}},"component":{}}],["flat",{"_index":5344,"title":{},"name":{},"text":{"62":{},"63":{},"130":{},"132":{},"198":{},"200":{}},"component":{}}],["flatten",{"_index":2417,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["flavor",{"_index":3033,"title":{},"name":{},"text":{"33":{},"35":{},"52":{},"99":{},"102":{},"119":{},"167":{},"170":{},"187":{}},"component":{}}],["flavour",{"_index":5070,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["flaw",{"_index":4235,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["flexboxlayoutdata",{"_index":4582,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["flexboxlayoutdata().withgrow(0).withshrink(0).withinitial(280).withrelative(fals",{"_index":4580,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["flexboxlayoutdata().withshrink(0).withiniti",{"_index":4584,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["flexibl",{"_index":697,"title":{},"name":{},"text":{"18":{},"23":{},"27":{},"34":{},"54":{},"85":{},"90":{},"101":{},"121":{},"153":{},"158":{},"172":{},"189":{}},"component":{}}],["fli",{"_index":4510,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["flip",{"_index":3198,"title":{"36-8":{},"103-8":{},"168-8":{}},"name":{"36":{},"103":{},"168":{}},"text":{"36":{},"103":{},"168":{}},"component":{}}],["flipcard",{"_index":3197,"title":{"36-7":{},"103-7":{},"168-7":{}},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["flipcard.j",{"_index":3227,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["flipcard/flipcardfield",{"_index":3210,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["flipcardfield",{"_index":3209,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["flipcardfield.j",{"_index":3212,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["flipcardfield.less",{"_index":3263,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["float",{"_index":2444,"title":{"26-30":{}},"name":{},"text":{"26":{},"64":{},"131":{},"199":{}},"component":{}}],["flow",{"_index":5302,"title":{"61-2":{},"129-2":{},"197-2":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["fluent",{"_index":5720,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["focu",{"_index":654,"title":{"27-8":{},"27-25":{}},"name":{},"text":{"18":{},"23":{},"27":{},"53":{},"56":{},"59":{},"85":{},"90":{},"120":{},"123":{},"127":{},"153":{},"158":{},"188":{},"191":{},"195":{}},"component":{}}],["focus",{"_index":2851,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["folder",{"_index":249,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"29":{},"36":{},"40":{},"46":{},"52":{},"56":{},"63":{},"71":{},"73":{},"74":{},"75":{},"76":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"95":{},"103":{},"107":{},"113":{},"119":{},"123":{},"132":{},"139":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"168":{},"175":{},"181":{},"187":{},"191":{},"200":{}},"component":{}}],["folder]_person",{"_index":554,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["follow",{"_index":50,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"58":{},"60":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"71":{},"72":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"98":{},"99":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"116":{},"117":{},"119":{},"120":{},"122":{},"123":{},"124":{},"126":{},"128":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"166":{},"167":{},"168":{},"169":{},"170":{},"172":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"181":{},"183":{},"184":{},"185":{},"187":{},"188":{},"190":{},"191":{},"193":{},"194":{},"196":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["follow_redirect",{"_index":6055,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["font",{"_index":921,"title":{"52-1":{},"52-2":{},"52-3":{},"119-1":{},"119-2":{},"119-3":{},"187-1":{},"187-2":{},"187-3":{}},"name":{},"text":{"20":{},"26":{},"34":{},"43":{},"46":{},"52":{},"59":{},"60":{},"86":{},"101":{},"110":{},"113":{},"119":{},"127":{},"128":{},"154":{},"172":{},"178":{},"181":{},"187":{},"195":{},"196":{}},"component":{}}],["font.famili",{"_index":2542,"title":{},"name":{},"text":{"26":{}},"component":{}}],["font.siz",{"_index":2544,"title":{},"name":{},"text":{"26":{}},"component":{}}],["font.styl",{"_index":2546,"title":{},"name":{},"text":{"26":{}},"component":{}}],["font:[utf",{"_index":5278,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["font:\\ue003",{"_index":4782,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["font:\\ue043",{"_index":5279,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["font:awesomeicon",{"_index":4783,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["font:fooicon",{"_index":5280,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["fontawesom",{"_index":4805,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["fontcolor",{"_index":2540,"title":{},"name":{},"text":{"26":{}},"component":{}}],["fontfamili",{"_index":2541,"title":{},"name":{},"text":{"26":{}},"component":{}}],["fonts.css",{"_index":4800,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["fonts.less",{"_index":4794,"title":{},"name":{},"text":{"52":{},"56":{},"119":{},"123":{},"187":{},"191":{}},"component":{}}],["fontsiz",{"_index":2543,"title":{},"name":{},"text":{"26":{}},"component":{}}],["fontstyl",{"_index":2545,"title":{},"name":{},"text":{"26":{}},"component":{}}],["foo",{"_index":4616,"title":{},"name":{},"text":{"48":{},"59":{},"60":{},"64":{},"65":{},"115":{},"127":{},"128":{},"131":{},"133":{},"183":{},"195":{},"196":{},"199":{},"201":{}},"component":{}}],["foo.icons.bar",{"_index":5287,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["fooicons.ttf",{"_index":5282,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["footer",{"_index":4817,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["footprint",{"_index":1403,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["forbiddencredentialverifi",{"_index":5508,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["forc",{"_index":1646,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["fore",{"_index":3547,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["foreach(label",{"_index":3072,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["foreach(valu",{"_index":3079,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["foregroundcolor",{"_index":3138,"title":{},"name":{},"text":{"34":{},"59":{},"101":{},"127":{},"172":{},"195":{}},"component":{}}],["foreign",{"_index":1596,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["forev",{"_index":3683,"title":{},"name":{},"text":{"39":{},"44":{},"106":{},"109":{},"174":{},"179":{}},"component":{}}],["forget",{"_index":1908,"title":{},"name":{},"text":{"23":{},"26":{},"39":{},"43":{},"52":{},"63":{},"90":{},"103":{},"106":{},"110":{},"119":{},"132":{},"158":{},"168":{},"174":{},"178":{},"187":{},"200":{}},"component":{}}],["form",{"_index":293,"title":{"49":{},"50":{},"100":{},"116":{},"117":{},"171":{},"184":{},"185":{},"5-2":{},"8-1":{},"23-25":{},"23-26":{},"23-27":{},"23-29":{},"23-30":{},"23-32":{},"23-33":{},"23-34":{},"23-36":{},"23-39":{},"23-43":{},"26-18":{},"26-25":{},"27-23":{},"27-24":{},"29-17":{},"29-21":{},"48-10":{},"50-1":{},"53-8":{},"70-2":{},"74-1":{},"90-25":{},"90-26":{},"90-27":{},"90-29":{},"90-30":{},"90-32":{},"90-33":{},"90-34":{},"90-36":{},"90-39":{},"90-43":{},"95-17":{},"95-21":{},"115-10":{},"117-1":{},"120-8":{},"138-2":{},"142-1":{},"158-25":{},"158-26":{},"158-27":{},"158-29":{},"158-30":{},"158-32":{},"158-33":{},"158-34":{},"158-36":{},"158-39":{},"158-43":{},"163-17":{},"163-21":{},"183-10":{},"185-1":{},"188-8":{}},"name":{"49":{},"50":{},"100":{},"116":{},"117":{},"171":{},"184":{},"185":{}},"text":{"5":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"20":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"32":{},"34":{},"36":{},"38":{},"39":{},"40":{},"41":{},"46":{},"47":{},"48":{},"49":{},"50":{},"53":{},"54":{},"58":{},"60":{},"61":{},"63":{},"70":{},"72":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"86":{},"88":{},"90":{},"93":{},"94":{},"95":{},"98":{},"100":{},"101":{},"103":{},"105":{},"106":{},"107":{},"111":{},"113":{},"114":{},"115":{},"116":{},"117":{},"120":{},"121":{},"126":{},"128":{},"129":{},"132":{},"138":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"154":{},"156":{},"158":{},"162":{},"163":{},"166":{},"168":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"181":{},"182":{},"183":{},"184":{},"185":{},"188":{},"189":{},"194":{},"196":{},"197":{},"200":{}},"component":{}}],["form.addformlistener(new",{"_index":1805,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["form.displayhint.view",{"_index":1152,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["form.getorganizationfield().setvalue(getorganizationid",{"_index":2391,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["form.geturlfield().setvalue(oldurl",{"_index":2228,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["form.isformstor",{"_index":2230,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["form.open",{"_index":4730,"title":{},"name":{},"text":{"50":{},"60":{},"117":{},"128":{},"185":{},"196":{}},"component":{}}],["form.rend",{"_index":4732,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["form.setpersonid(getpersonidcolumn().getselectedvalu",{"_index":1804,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["form.startmodifi",{"_index":1807,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["form.startnew",{"_index":1819,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["form.waitfor",{"_index":2229,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["form.widget('mystringfield",{"_index":5230,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["format",{"_index":977,"title":{"64-9":{},"131-9":{},"160-9":{},"199-9":{}},"name":{},"text":{"20":{},"23":{},"38":{},"39":{},"40":{},"46":{},"52":{},"57":{},"58":{},"59":{},"60":{},"63":{},"64":{},"66":{},"86":{},"90":{},"105":{},"106":{},"107":{},"113":{},"119":{},"125":{},"126":{},"127":{},"128":{},"131":{},"132":{},"134":{},"154":{},"158":{},"160":{},"173":{},"174":{},"175":{},"181":{},"187":{},"192":{},"194":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["format('woff",{"_index":4799,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["formatt",{"_index":5009,"title":{"58-1":{},"58-2":{},"126-1":{},"126-2":{},"194-1":{},"194-2":{}},"name":{},"text":{"58":{},"59":{},"126":{},"127":{},"194":{},"195":{}},"component":{}}],["formatter(valu",{"_index":5028,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["formatvalu",{"_index":5015,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["formchanged(formev",{"_index":1821,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["formdata",{"_index":390,"title":{},"name":{},"text":{"8":{},"23":{},"29":{},"48":{},"74":{},"90":{},"95":{},"115":{},"142":{},"158":{},"163":{},"183":{}},"component":{}}],["formdata(valu",{"_index":1722,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["formdata.setorganizationid(uuid.randomuuid().tostr",{"_index":2316,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["formdata.setpersonid(uuid.randomuuid().tostr",{"_index":2047,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["formdatastatementbuild",{"_index":2860,"title":{},"name":{},"text":{"26":{}},"component":{}}],["former",{"_index":2767,"title":{},"name":{},"text":{"26":{},"92":{},"160":{}},"component":{}}],["formevent.type_clos",{"_index":1824,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["formfield",{"_index":3196,"title":{"36-5":{},"36-6":{},"103-5":{},"103-6":{},"168-5":{},"168-6":{}},"name":{},"text":{"36":{},"48":{},"49":{},"60":{},"103":{},"115":{},"116":{},"128":{},"168":{},"183":{},"184":{},"196":{}},"component":{}}],["formfield.labelposition.top",{"_index":5219,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["formfield.setvisible(tru",{"_index":4898,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["formfield2",{"_index":4906,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["formfield2.setvisible(tru",{"_index":4900,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["formfield3",{"_index":4907,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["formfield3.isen",{"_index":4903,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["formfield3.isenabled(idimensions.en",{"_index":4902,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["formfield3.isenabled(idimensions.enabled_custom",{"_index":4901,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["formfield3.isenabledincludingpar",{"_index":4904,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["formhandl",{"_index":3068,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["formlifecycl",{"_index":4733,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["formlisten",{"_index":1820,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["formmodel",{"_index":6361,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["forum",{"_index":1033,"title":{},"name":{},"text":{"21":{},"22":{},"24":{},"87":{},"88":{},"89":{},"155":{},"156":{},"157":{}},"component":{}}],["forward",{"_index":3808,"title":{},"name":{},"text":{"40":{},"48":{},"63":{},"107":{},"115":{},"132":{},"175":{},"183":{},"200":{}},"component":{}}],["found",{"_index":631,"title":{},"name":{},"text":{"17":{},"19":{},"21":{},"23":{},"24":{},"26":{},"27":{},"40":{},"48":{},"55":{},"56":{},"63":{},"66":{},"83":{},"84":{},"87":{},"89":{},"90":{},"93":{},"107":{},"115":{},"122":{},"123":{},"124":{},"132":{},"134":{},"151":{},"152":{},"155":{},"157":{},"158":{},"161":{},"175":{},"183":{},"190":{},"191":{},"193":{},"200":{},"202":{}},"component":{}}],["four",{"_index":1460,"title":{},"name":{},"text":{"23":{},"64":{},"90":{},"131":{},"158":{},"199":{}},"component":{}}],["fourth",{"_index":2056,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["fragement",{"_index":4758,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["fragment",{"_index":4258,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["frame",{"_index":3006,"title":{"43-2":{},"110-2":{},"178-2":{}},"name":{},"text":{"32":{},"43":{},"98":{},"110":{},"166":{},"178":{}},"component":{}}],["framework",{"_index":84,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"18":{},"21":{},"22":{},"23":{},"24":{},"29":{},"31":{},"32":{},"38":{},"39":{},"46":{},"64":{},"66":{},"67":{},"69":{},"70":{},"85":{},"87":{},"88":{},"89":{},"90":{},"95":{},"97":{},"98":{},"105":{},"106":{},"113":{},"131":{},"134":{},"135":{},"137":{},"138":{},"153":{},"155":{},"156":{},"157":{},"158":{},"163":{},"165":{},"166":{},"173":{},"174":{},"181":{},"199":{},"202":{}},"component":{}}],["franc",{"_index":422,"title":{},"name":{},"text":{"11":{},"29":{},"77":{},"95":{},"145":{},"163":{}},"component":{}}],["frank",{"_index":3476,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["free",{"_index":993,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"39":{},"87":{},"89":{},"90":{},"106":{},"155":{},"157":{},"158":{},"174":{}},"component":{}}],["french",{"_index":263,"title":{},"name":{},"text":{"4":{},"11":{},"29":{},"57":{},"71":{},"77":{},"95":{},"125":{},"139":{},"145":{},"163":{},"192":{}},"component":{}}],["frequent",{"_index":314,"title":{},"name":{},"text":{"5":{},"23":{},"29":{},"70":{},"90":{},"95":{},"138":{},"158":{},"163":{}},"component":{}}],["fresh",{"_index":2899,"title":{},"name":{},"text":{"27":{}},"component":{}}],["fri",{"_index":3501,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["friday",{"_index":3498,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["friendli",{"_index":2903,"title":{},"name":{},"text":{"27":{},"53":{},"120":{},"188":{}},"component":{}}],["front",{"_index":793,"title":{},"name":{},"text":{"19":{},"63":{},"84":{},"93":{},"132":{},"152":{},"200":{}},"component":{}}],["front.jpg",{"_index":3262,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["frontend",{"_index":625,"title":{},"name":{},"text":{"17":{},"18":{},"19":{},"21":{},"23":{},"24":{},"63":{},"83":{},"84":{},"85":{},"87":{},"89":{},"90":{},"132":{},"151":{},"152":{},"153":{},"155":{},"157":{},"158":{},"200":{}},"component":{}}],["frontimag",{"_index":3258,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["fulfil",{"_index":5108,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["full",{"_index":54,"title":{"21":{},"87":{},"155":{},"28-8":{},"36-8":{},"94-8":{},"103-8":{},"162-8":{},"168-8":{}},"name":{},"text":{"1":{},"18":{},"21":{},"22":{},"23":{},"26":{},"37":{},"40":{},"50":{},"63":{},"67":{},"85":{},"87":{},"88":{},"90":{},"104":{},"107":{},"117":{},"132":{},"135":{},"153":{},"155":{},"156":{},"158":{},"169":{},"175":{},"185":{},"200":{}},"component":{}}],["fulli",{"_index":1191,"title":{},"name":{},"text":{"23":{},"40":{},"53":{},"63":{},"64":{},"90":{},"93":{},"107":{},"120":{},"124":{},"131":{},"132":{},"158":{},"175":{},"188":{},"193":{},"199":{},"200":{}},"component":{}}],["fullstack",{"_index":989,"title":{},"name":{"21":{},"87":{},"155":{}},"text":{},"component":{}}],["fun",{"_index":988,"title":{},"name":{},"text":{"20":{},"86":{},"93":{},"154":{}},"component":{}}],["function",{"_index":68,"title":{"26-32":{},"26-33":{},"39-1":{},"63-1":{},"106-1":{},"132-1":{},"174-1":{},"200-1":{}},"name":{},"text":{"1":{},"22":{},"23":{},"26":{},"27":{},"29":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"46":{},"48":{},"50":{},"51":{},"53":{},"55":{},"56":{},"58":{},"59":{},"60":{},"62":{},"63":{},"67":{},"88":{},"90":{},"92":{},"93":{},"95":{},"103":{},"104":{},"105":{},"106":{},"107":{},"111":{},"113":{},"115":{},"117":{},"118":{},"120":{},"122":{},"123":{},"126":{},"127":{},"128":{},"130":{},"132":{},"135":{},"156":{},"158":{},"160":{},"161":{},"163":{},"168":{},"169":{},"173":{},"174":{},"175":{},"176":{},"181":{},"183":{},"185":{},"186":{},"188":{},"190":{},"191":{},"194":{},"195":{},"196":{},"198":{},"200":{}},"component":{}}],["function(ev",{"_index":5254,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["function(str",{"_index":4224,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["function(valu",{"_index":5040,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["functionalinterfac",{"_index":5660,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["further",{"_index":1963,"title":{},"name":{},"text":{"23":{},"26":{},"38":{},"39":{},"63":{},"64":{},"66":{},"90":{},"92":{},"93":{},"105":{},"106":{},"131":{},"132":{},"134":{},"158":{},"173":{},"174":{},"199":{},"200":{},"202":{}},"component":{}}],["furthermor",{"_index":818,"title":{},"name":{},"text":{"19":{},"20":{},"22":{},"24":{},"26":{},"27":{},"39":{},"40":{},"42":{},"57":{},"58":{},"64":{},"84":{},"86":{},"88":{},"89":{},"106":{},"107":{},"108":{},"125":{},"126":{},"131":{},"152":{},"154":{},"156":{},"157":{},"174":{},"175":{},"177":{},"192":{},"194":{},"199":{}},"component":{}}],["futher",{"_index":5838,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["futur",{"_index":290,"title":{"39-15":{},"106-15":{},"174-15":{}},"name":{},"text":{"4":{},"27":{},"29":{},"39":{},"42":{},"64":{},"71":{},"92":{},"95":{},"106":{},"108":{},"131":{},"139":{},"163":{},"174":{},"177":{},"199":{}},"component":{}}],["future.addlistener(jobs.neweventfilterbuild",{"_index":3578,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future.awaitdon",{"_index":3587,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future.awaitdone(10",{"_index":3588,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future.awaitdoneandget",{"_index":3589,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future.awaitdoneandget(10",{"_index":3590,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future.awaitdoneandget(defaultexceptiontranslator.class",{"_index":3591,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future.awaitfinished(10",{"_index":3599,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future.cancel(fals",{"_index":3558,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future.getjobinput().getnam",{"_index":3577,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future.whendone(ev",{"_index":3595,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future2",{"_index":3561,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future3",{"_index":3562,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["futurecancellederror",{"_index":3336,"title":{"38-11":{},"105-11":{},"173-11":{}},"name":{},"text":{"38":{},"39":{},"105":{},"106":{},"173":{},"174":{}},"component":{}}],["futurefilt",{"_index":3532,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["futurefilterbuild",{"_index":3534,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["future’",{"_index":3412,"title":{"39-21":{},"39-22":{},"39-23":{},"39-24":{},"106-21":{},"106-22":{},"106-23":{},"106-24":{},"174-21":{},"174-22":{},"174-23":{},"174-24":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["g",{"_index":605,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"58":{},"83":{},"87":{},"89":{},"126":{},"151":{},"155":{},"157":{},"194":{}},"component":{}}],["ga/tutorial/html/connmgmt.html#d5e659",{"_index":3978,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["gain",{"_index":2421,"title":{},"name":{},"text":{"24":{},"89":{},"157":{}},"component":{}}],["gap",{"_index":4874,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["gateway",{"_index":6430,"title":{},"name":{},"text":{"160":{}},"component":{}}],["gb",{"_index":2883,"title":{},"name":{},"text":{"26":{}},"component":{}}],["gender",{"_index":1185,"title":{"23-28":{},"90-28":{},"158-28":{}},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["gendercodetyp",{"_index":1845,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["gendercodetype.class",{"_index":1941,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["gendergroup",{"_index":1937,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["gener",{"_index":822,"title":{"27-21":{},"63-12":{},"63-22":{},"63-23":{},"64-17":{},"131-17":{},"132-12":{},"132-22":{},"132-23":{},"199-17":{},"200-12":{},"200-22":{},"200-23":{}},"name":{},"text":{"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"27":{},"28":{},"29":{},"46":{},"48":{},"52":{},"56":{},"58":{},"60":{},"61":{},"62":{},"63":{},"64":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"113":{},"115":{},"119":{},"123":{},"124":{},"126":{},"128":{},"129":{},"130":{},"131":{},"132":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"162":{},"163":{},"181":{},"183":{},"187":{},"191":{},"193":{},"194":{},"196":{},"197":{},"198":{},"199":{},"200":{}},"component":{}}],["generalbox",{"_index":1732,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["generated(\"doconveniencemethodsgener",{"_index":5710,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["generated(valu",{"_index":4676,"title":{},"name":{},"text":{"48":{},"63":{},"115":{},"132":{},"183":{},"200":{}},"component":{}}],["genkey",{"_index":729,"title":{},"name":{},"text":{"19":{},"26":{},"84":{},"152":{}},"component":{}}],["german",{"_index":261,"title":{},"name":{},"text":{"4":{},"29":{},"57":{},"71":{},"95":{},"125":{},"139":{},"163":{},"192":{}},"component":{}}],["get",{"_index":22,"title":{"15-1":{},"81-1":{},"149-1":{}},"name":{},"text":{"1":{},"2":{},"16":{},"18":{},"19":{},"22":{},"23":{},"27":{},"39":{},"40":{},"56":{},"60":{},"62":{},"67":{},"68":{},"82":{},"84":{},"85":{},"88":{},"90":{},"93":{},"106":{},"107":{},"123":{},"124":{},"128":{},"130":{},"135":{},"136":{},"150":{},"152":{},"153":{},"156":{},"158":{},"174":{},"175":{},"191":{},"193":{},"196":{},"198":{}},"component":{}}],["get(exampleentitydo.class",{"_index":6040,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["getaccesscheckfailedmessag",{"_index":4286,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["getal",{"_index":5929,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getbaseuri",{"_index":6012,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["getbirthday",{"_index":4680,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["getbykey",{"_index":5931,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getbyrec",{"_index":5932,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getbytext",{"_index":5930,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getcityfield().setmandatory(hasstreet",{"_index":2100,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getclass",{"_index":4312,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["getcodetext(boolean",{"_index":5354,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["getcompanyid",{"_index":4309,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["getconfiguredautocheckfromto",{"_index":1986,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredautofit",{"_index":1893,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredbodylayoutconfig",{"_index":4875,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["getconfiguredbordervis",{"_index":1967,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredcodetyp",{"_index":1940,"title":{},"name":{},"text":{"23":{},"62":{},"90":{},"130":{},"158":{},"198":{}},"component":{}}],["getconfiguredconnecttimeoutproperti",{"_index":5592,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["getconfiguredcssclass",{"_index":1322,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfigureddefaultmenu",{"_index":1794,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfigureddisplay",{"_index":1432,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfigureddisplayhint",{"_index":1715,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredendpointurlproperti",{"_index":5586,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["getconfiguredform",{"_index":1272,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredgridcolumncount",{"_index":1969,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredgridh",{"_index":1892,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredgriduseuiheight",{"_index":2201,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredgridw",{"_index":1968,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredgridweighti",{"_index":2252,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredheadertext",{"_index":1444,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredhtmlen",{"_index":4257,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["getconfigurediconid",{"_index":584,"title":{},"name":{},"text":{"16":{},"23":{},"52":{},"82":{},"90":{},"119":{},"150":{},"158":{},"187":{}},"component":{}}],["getconfiguredimageid",{"_index":1894,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredjdbcmappingnam",{"_index":1550,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredjsformobjecttyp",{"_index":6348,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["getconfiguredlabel",{"_index":1733,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredlabelposit",{"_index":1995,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredlabelvis",{"_index":1891,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredleaf",{"_index":1381,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredlookupcal",{"_index":1451,"title":{},"name":{},"text":{"23":{},"65":{},"90":{},"133":{},"158":{},"201":{}},"component":{}}],["getconfiguredmandatori",{"_index":2260,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredmasterfield",{"_index":1886,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredmaxlength",{"_index":2076,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredmenutyp",{"_index":1815,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredmultilinetext",{"_index":1959,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfigurednativenotificationdefault",{"_index":2636,"title":{},"name":{},"text":{"26":{}},"component":{}}],["getconfiguredoutlin",{"_index":1257,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredpasswordproperti",{"_index":5590,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["getconfiguredprimarykey",{"_index":1433,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredreadtimeoutproperti",{"_index":5594,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["getconfiguredrespons",{"_index":4846,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["getconfiguredservic",{"_index":2349,"title":{},"name":{},"text":{"23":{},"65":{},"90":{},"133":{},"158":{},"201":{}},"component":{}}],["getconfiguredsqlselect",{"_index":2351,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredstatusvis",{"_index":2194,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredtext",{"_index":1304,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredtitl",{"_index":581,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["getconfiguredusernameproperti",{"_index":5588,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["getconfiguredvis",{"_index":1468,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredwidth",{"_index":1447,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getconfiguredxxxxxx",{"_index":5358,"title":{},"name":{},"text":{"62":{},"65":{},"130":{},"133":{},"198":{},"201":{}},"component":{}}],["getconvi",{"_index":1469,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getcountryfield().setmandatory(hasstreet",{"_index":2101,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getdatabyal",{"_index":5939,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getdatabyall(ilookupcal",{"_index":5967,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getdatabykey",{"_index":5937,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getdatabyrec",{"_index":5940,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getdatabytext",{"_index":5938,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getdefaultvalu",{"_index":1537,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["getdevicetransformationconfig().disabletransformation(mobiledevicetransformation.move_field_label_to_top",{"_index":4859,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["getdostructuremigrationtargetcontextdata",{"_index":6251,"title":{},"name":{},"text":{"92":{}},"component":{}}],["getdynamicnlsbasenam",{"_index":4992,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["getelementsforfilt",{"_index":5165,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["getelementtext",{"_index":5166,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["getexamlpeentity(@pathparam(\"id",{"_index":5994,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["getexampleentity(str",{"_index":6032,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["getexampleentitycustomexceptionhandling(str",{"_index":6046,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["getexistingt",{"_index":1633,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getexistingtables().contains(\"organ",{"_index":1621,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getexistingtables().contains(\"person",{"_index":1628,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getextension(class",{"_index":4712,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["getfieldbyclass(birthday.class",{"_index":4681,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["getfieldbyclass(chartfield.class).getchart().extendconfig(beans.get(ichartconfig.class",{"_index":3107,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["getfieldbyclass(chartfield.class).getchart().setconfig(config",{"_index":3098,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["getfieldbyclass(chartfield.class).getchart().setdata(data",{"_index":3089,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["getfieldbyclass(infofield.class",{"_index":2177,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getfieldbyclass(salary.class",{"_index":4683,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["getfieldbyclass(urlfield.class",{"_index":2174,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getfilenameprefix",{"_index":5751,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getfirstnamefield().getvalu",{"_index":2036,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getfirstnamefield().requestfocu",{"_index":2110,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getform().setsubtitle(calculatesubtitl",{"_index":2031,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getform().touch",{"_index":2232,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["gethead",{"_index":5559,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["getid",{"_index":1852,"title":{},"name":{},"text":{"23":{},"64":{},"90":{},"131":{},"158":{},"199":{}},"component":{}}],["getinfofield",{"_index":2176,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getkey",{"_index":1539,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["getlastnamefield().getvalu",{"_index":2037,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getlevel",{"_index":4314,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["getlist",{"_index":5851,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getlistattribut",{"_index":5813,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getlookuprow",{"_index":3146,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["getnam",{"_index":5713,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getname().equals(p.getnam",{"_index":4313,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["getname1ex",{"_index":5795,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getname2ex",{"_index":5803,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getord",{"_index":5744,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getorganizationid",{"_index":1379,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getorganizationtabledata",{"_index":1657,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getorganizationtabledata(filt",{"_index":1661,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getorganizationtabledata(searchfilt",{"_index":1666,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getown",{"_index":4711,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["getowner().getform()).getextension(personformextension.class",{"_index":4709,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["getowner().getnamefield().setenabled(fals",{"_index":4696,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["getowner().setvalue(\"firstnam",{"_index":4642,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["getpackagenameprefix",{"_index":5752,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getpersonid",{"_index":1727,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getpersontabledata",{"_index":1681,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getpersontabledata(filt",{"_index":1378,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getpersontabledata(searchfilt",{"_index":1684,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getport",{"_index":5607,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["getport().ping(\"hello",{"_index":5620,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["getproductlogo",{"_index":2644,"title":{},"name":{},"text":{"26":{}},"component":{}}],["getsalari",{"_index":4682,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["getsingleattribut",{"_index":5817,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getstart",{"_index":636,"title":{},"name":{"18":{},"85":{},"153":{}},"text":{},"component":{}}],["getstatu",{"_index":3306,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["getstructuremigrationhandl",{"_index":6249,"title":{},"name":{},"text":{"92":{}},"component":{}}],["gettabledata",{"_index":1664,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getter",{"_index":1712,"title":{},"name":{},"text":{"23":{},"57":{},"64":{},"65":{},"90":{},"125":{},"131":{},"133":{},"158":{},"192":{},"199":{},"201":{}},"component":{}}],["getter/sett",{"_index":5774,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["geturl",{"_index":2130,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["geturlfield",{"_index":2173,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["getvalidityfrom",{"_index":5953,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getvalidityto",{"_index":5956,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["getvalu",{"_index":5718,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["getvalue(str",{"_index":3857,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["getxyzinst",{"_index":6343,"title":{},"name":{},"text":{"93":{}},"component":{}}],["gif",{"_index":4767,"title":{},"name":{},"text":{"52":{},"60":{},"119":{},"128":{},"187":{},"196":{}},"component":{}}],["git",{"_index":509,"title":{"22-14":{},"23-46":{},"88-14":{},"90-46":{},"156-14":{},"158-46":{}},"name":{},"text":{"16":{},"22":{},"23":{},"36":{},"52":{},"82":{},"88":{},"90":{},"103":{},"119":{},"150":{},"156":{},"158":{},"168":{},"187":{}},"component":{}}],["github",{"_index":122,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"23":{},"27":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"90":{},"93":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"158":{},"161":{}},"component":{}}],["gitignor",{"_index":1170,"title":{},"name":{},"text":{"22":{},"23":{},"46":{},"63":{},"88":{},"90":{},"113":{},"132":{},"156":{},"158":{},"181":{},"200":{}},"component":{}}],["give",{"_index":696,"title":{},"name":{},"text":{"18":{},"23":{},"34":{},"39":{},"40":{},"46":{},"53":{},"54":{},"56":{},"59":{},"60":{},"63":{},"85":{},"90":{},"93":{},"101":{},"106":{},"107":{},"113":{},"120":{},"121":{},"123":{},"124":{},"127":{},"128":{},"132":{},"153":{},"158":{},"172":{},"174":{},"175":{},"181":{},"188":{},"189":{},"191":{},"193":{},"195":{},"196":{},"200":{}},"component":{}}],["given",{"_index":2758,"title":{},"name":{},"text":{"26":{},"29":{},"38":{},"39":{},"40":{},"41":{},"46":{},"48":{},"51":{},"56":{},"60":{},"63":{},"64":{},"65":{},"66":{},"95":{},"105":{},"106":{},"107":{},"111":{},"113":{},"115":{},"118":{},"123":{},"128":{},"131":{},"132":{},"133":{},"134":{},"163":{},"173":{},"174":{},"175":{},"176":{},"181":{},"183":{},"186":{},"191":{},"196":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["global",{"_index":970,"title":{},"name":{},"text":{"20":{},"39":{},"44":{},"53":{},"63":{},"86":{},"106":{},"109":{},"120":{},"132":{},"154":{},"174":{},"179":{},"188":{},"200":{}},"component":{}}],["glue",{"_index":5475,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["gmt",{"_index":5639,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["go",{"_index":196,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"18":{},"20":{},"23":{},"24":{},"56":{},"61":{},"63":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"85":{},"86":{},"89":{},"90":{},"123":{},"129":{},"132":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"153":{},"154":{},"157":{},"158":{},"191":{},"197":{},"200":{}},"component":{}}],["goal",{"_index":1037,"title":{},"name":{},"text":{"22":{},"23":{},"27":{},"29":{},"32":{},"37":{},"46":{},"63":{},"88":{},"90":{},"93":{},"95":{},"98":{},"104":{},"113":{},"132":{},"156":{},"158":{},"163":{},"166":{},"169":{},"181":{},"200":{}},"component":{}}],["good",{"_index":557,"title":{},"name":{},"text":{"16":{},"23":{},"52":{},"56":{},"62":{},"63":{},"82":{},"90":{},"92":{},"119":{},"123":{},"130":{},"132":{},"150":{},"158":{},"187":{},"191":{},"198":{},"200":{}},"component":{}}],["googl",{"_index":1067,"title":{},"name":{},"text":{"22":{},"27":{},"36":{},"45":{},"88":{},"103":{},"112":{},"156":{},"168":{},"180":{}},"component":{}}],["grant",{"_index":4209,"title":{"43-16":{},"110-16":{},"178-16":{}},"name":{},"text":{"43":{},"54":{},"110":{},"121":{},"178":{},"189":{}},"component":{}}],["graph_bold",{"_index":2672,"title":{},"name":{},"text":{"26":{}},"component":{}}],["graphic",{"_index":4806,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["gray",{"_index":3162,"title":{},"name":{},"text":{"34":{},"56":{},"101":{},"123":{},"172":{},"191":{}},"component":{}}],["gray/black",{"_index":4946,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["great",{"_index":664,"title":{},"name":{},"text":{"18":{},"48":{},"85":{},"115":{},"153":{},"183":{}},"component":{}}],["greatli",{"_index":1524,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["green",{"_index":999,"title":{},"name":{},"text":{"21":{},"24":{},"26":{},"34":{},"59":{},"87":{},"89":{},"101":{},"127":{},"155":{},"157":{},"172":{},"195":{}},"component":{}}],["greet",{"_index":1052,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["greetbutton",{"_index":952,"title":{},"name":{},"text":{"20":{},"22":{},"36":{},"86":{},"88":{},"103":{},"154":{},"156":{},"168":{}},"component":{}}],["greeting/helloform",{"_index":1124,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["grey",{"_index":3121,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["grid",{"_index":1698,"title":{},"name":{},"text":{"23":{},"32":{},"33":{},"35":{},"50":{},"53":{},"59":{},"90":{},"98":{},"99":{},"102":{},"117":{},"120":{},"127":{},"158":{},"166":{},"167":{},"170":{},"185":{},"188":{},"195":{}},"component":{}}],["griddatahint",{"_index":3224,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["gridh",{"_index":4887,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["group",{"_index":306,"title":{"26-12":{}},"name":{},"text":{"5":{},"14":{},"16":{},"17":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"48":{},"50":{},"53":{},"56":{},"58":{},"60":{},"70":{},"80":{},"82":{},"83":{},"87":{},"88":{},"89":{},"90":{},"94":{},"95":{},"115":{},"117":{},"120":{},"123":{},"126":{},"128":{},"138":{},"148":{},"150":{},"151":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"183":{},"185":{},"188":{},"191":{},"194":{},"196":{}},"component":{}}],["groupbox",{"_index":318,"title":{"53-2":{},"120-2":{},"188-2":{}},"name":{},"text":{"5":{},"20":{},"22":{},"27":{},"29":{},"33":{},"48":{},"49":{},"53":{},"60":{},"70":{},"86":{},"88":{},"92":{},"93":{},"95":{},"99":{},"115":{},"116":{},"120":{},"128":{},"138":{},"154":{},"156":{},"163":{},"170":{},"183":{},"184":{},"188":{},"196":{}},"component":{}}],["groupbox.borderdecoration.empti",{"_index":1153,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["groupid",{"_index":442,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"92":{},"95":{},"148":{},"163":{}},"component":{}}],["groupnam",{"_index":3167,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["grow",{"_index":2309,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["growabl",{"_index":4588,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["guarante",{"_index":3642,"title":{},"name":{},"text":{"39":{},"40":{},"56":{},"61":{},"64":{},"106":{},"107":{},"123":{},"129":{},"131":{},"174":{},"175":{},"191":{},"197":{},"199":{}},"component":{}}],["guard",{"_index":2741,"title":{},"name":{},"text":{"26":{}},"component":{}}],["guess",{"_index":377,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"29":{},"73":{},"74":{},"76":{},"78":{},"79":{},"95":{},"141":{},"142":{},"144":{},"146":{},"147":{},"163":{}},"component":{}}],["gui",{"_index":876,"title":{},"name":{},"text":{"19":{},"61":{},"84":{},"129":{},"152":{},"197":{}},"component":{}}],["guid",{"_index":34,"title":{"2":{},"26":{},"32":{},"68":{},"92":{},"98":{},"136":{},"160":{},"166":{}},"name":{"26":{},"32":{},"92":{},"98":{},"160":{},"166":{}},"text":{"1":{},"2":{},"16":{},"18":{},"19":{},"21":{},"22":{},"24":{},"25":{},"26":{},"27":{},"30":{},"67":{},"68":{},"82":{},"84":{},"85":{},"87":{},"88":{},"89":{},"91":{},"93":{},"96":{},"113":{},"135":{},"136":{},"150":{},"152":{},"153":{},"155":{},"156":{},"157":{},"159":{},"161":{},"164":{},"181":{}},"component":{}}],["guidanc",{"_index":2900,"title":{},"name":{},"text":{"27":{}},"component":{}}],["guide.[8",{"_index":844,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["guide/configuring#eslintignor",{"_index":4558,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["guide:us",{"_index":6395,"title":{},"name":{},"text":{"124":{},"193":{}},"component":{}}],["guidelin",{"_index":833,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["h",{"_index":3225,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["half",{"_index":1693,"title":{},"name":{},"text":{"23":{},"58":{},"90":{},"126":{},"158":{},"194":{}},"component":{}}],["hamburg",{"_index":4809,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["hand",{"_index":1687,"title":{},"name":{},"text":{"23":{},"39":{},"58":{},"59":{},"63":{},"66":{},"90":{},"100":{},"106":{},"126":{},"127":{},"132":{},"134":{},"158":{},"171":{},"174":{},"194":{},"195":{},"200":{},"202":{}},"component":{}}],["handi",{"_index":270,"title":{},"name":{},"text":{"4":{},"29":{},"50":{},"60":{},"71":{},"95":{},"117":{},"128":{},"139":{},"163":{},"185":{},"196":{}},"component":{}}],["handl",{"_index":361,"title":{"27-7":{},"38-13":{},"61-11":{},"61-13":{},"64-11":{},"105-13":{},"129-11":{},"129-13":{},"131-11":{},"173-13":{},"197-11":{},"197-13":{},"199-11":{}},"name":{"38":{},"105":{},"173":{}},"text":{"6":{},"22":{},"23":{},"26":{},"32":{},"33":{},"35":{},"37":{},"38":{},"39":{},"43":{},"53":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"72":{},"88":{},"90":{},"98":{},"99":{},"100":{},"102":{},"104":{},"105":{},"106":{},"110":{},"120":{},"124":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"134":{},"140":{},"156":{},"158":{},"166":{},"167":{},"169":{},"170":{},"171":{},"173":{},"174":{},"178":{},"188":{},"193":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["handle(throw",{"_index":3467,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["handlefault(soapmessagecontext",{"_index":5558,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handlemessage(soapmessagecontext",{"_index":5554,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handlenotification(fin",{"_index":5328,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["handler",{"_index":1165,"title":{"23-30":{},"48-10":{},"53-3":{},"61-12":{},"63-26":{},"63-27":{},"63-36":{},"63-37":{},"90-30":{},"115-10":{},"120-3":{},"129-12":{},"132-26":{},"132-27":{},"132-36":{},"132-37":{},"158-30":{},"183-10":{},"188-3":{},"197-12":{},"200-26":{},"200-27":{},"200-36":{},"200-37":{}},"name":{},"text":{"22":{},"23":{},"27":{},"36":{},"38":{},"39":{},"40":{},"48":{},"53":{},"60":{},"61":{},"63":{},"88":{},"90":{},"92":{},"93":{},"103":{},"105":{},"106":{},"107":{},"115":{},"120":{},"128":{},"129":{},"132":{},"156":{},"158":{},"168":{},"173":{},"174":{},"175":{},"183":{},"188":{},"196":{},"197":{},"200":{}},"component":{}}],["handler(@clazz(correlationidhandler.class",{"_index":5518,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handler(@clazz(loghandler.class",{"_index":5527,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handler(@clazz(wsprovidercorrelationidhandler.class",{"_index":5579,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handler(valu",{"_index":5519,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handlerchain",{"_index":5499,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handlerchain(fil",{"_index":5549,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handlerchain.add(beans.get(loghandler.class",{"_index":5627,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handlerchain.add(beans.get(wsconsumercorrelationidhandler.class",{"_index":5632,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handlerchain.add(new",{"_index":5626,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handler’",{"_index":5410,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handleundeclaredfault(",{"_index":5680,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["handleundeclaredfault(fin",{"_index":5681,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["happen",{"_index":3523,"title":{},"name":{},"text":{"39":{},"46":{},"53":{},"56":{},"60":{},"66":{},"106":{},"113":{},"120":{},"123":{},"128":{},"134":{},"174":{},"181":{},"188":{},"191":{},"196":{},"202":{}},"component":{}}],["happi",{"_index":4816,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["hard",{"_index":3140,"title":{},"name":{},"text":{"34":{},"41":{},"45":{},"65":{},"101":{},"111":{},"112":{},"133":{},"172":{},"176":{},"180":{},"201":{}},"component":{}}],["hardcod",{"_index":5362,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["harder",{"_index":5223,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["hardwar",{"_index":6292,"title":{},"name":{},"text":{"93":{}},"component":{}}],["hasciti",{"_index":2098,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["hash",{"_index":3902,"title":{},"name":{},"text":{"40":{},"46":{},"63":{},"107":{},"113":{},"132":{},"175":{},"181":{},"200":{}},"component":{}}],["hash;jack:salt.password",{"_index":5698,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["hash;john:salt.password",{"_index":5699,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["hashcod",{"_index":4318,"title":{"64-16":{},"131-16":{},"199-16":{}},"name":{},"text":{"43":{},"62":{},"64":{},"110":{},"130":{},"131":{},"178":{},"198":{},"199":{}},"component":{}}],["hashset",{"_index":1816,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["hasnam",{"_index":5786,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["hasnext",{"_index":2804,"title":{},"name":{},"text":{"26":{}},"component":{}}],["hasstreet",{"_index":2096,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["have",{"_index":1030,"title":{},"name":{},"text":{"21":{},"23":{},"26":{},"39":{},"40":{},"46":{},"48":{},"62":{},"63":{},"64":{},"66":{},"87":{},"90":{},"93":{},"106":{},"107":{},"113":{},"115":{},"128":{},"130":{},"131":{},"132":{},"134":{},"155":{},"158":{},"174":{},"175":{},"181":{},"183":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["head",{"_index":5981,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["headach",{"_index":4926,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["header",{"_index":1142,"title":{"43-1":{},"110-1":{},"178-1":{}},"name":{},"text":{"22":{},"23":{},"26":{},"40":{},"43":{},"56":{},"63":{},"66":{},"88":{},"90":{},"107":{},"110":{},"123":{},"132":{},"134":{},"156":{},"158":{},"175":{},"178":{},"191":{},"200":{},"202":{}},"component":{}}],["headervis",{"_index":943,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["headless",{"_index":4529,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["health",{"_index":6262,"title":{"93-22":{}},"name":{},"text":{"93":{}},"component":{}}],["healthcheckcategoryid",{"_index":6337,"title":{},"name":{},"text":{"93":{}},"component":{}}],["height",{"_index":2714,"title":{},"name":{},"text":{"26":{},"36":{},"47":{},"50":{},"52":{},"53":{},"103":{},"114":{},"117":{},"119":{},"120":{},"168":{},"182":{},"185":{},"187":{},"188":{}},"component":{}}],["held",{"_index":1398,"title":{},"name":{},"text":{"23":{},"35":{},"90":{},"102":{},"158":{},"167":{}},"component":{}}],["hell",{"_index":5297,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["hello",{"_index":48,"title":{"20":{},"21":{},"22":{},"24":{},"86":{},"87":{},"88":{},"89":{},"154":{},"155":{},"156":{},"157":{},"17-1":{},"83-1":{},"151-1":{}},"name":{},"text":{"1":{},"2":{},"15":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"28":{},"29":{},"60":{},"67":{},"68":{},"81":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"94":{},"95":{},"128":{},"135":{},"136":{},"149":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"196":{}},"component":{}}],["hello.j",{"_index":935,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["helloform",{"_index":1123,"title":{"36-7":{},"103-7":{},"168-7":{}},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["helloform.j",{"_index":1053,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["helloform.json",{"_index":3257,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["helloformmodel",{"_index":1162,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["helloformmodel.j",{"_index":1054,"title":{},"name":{},"text":{"22":{},"36":{},"88":{},"103":{},"156":{},"168":{}},"component":{}}],["helloj",{"_index":3204,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["hellojs.flipcardfield",{"_index":3223,"title":{},"name":{},"text":{"36":{}},"component":{}}],["hellojs.helloform",{"_index":3221,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["helloscout",{"_index":774,"title":{},"name":{"20":{},"21":{},"22":{},"24":{},"86":{},"87":{},"88":{},"89":{},"154":{},"155":{},"156":{},"157":{}},"text":{"19":{},"36":{},"84":{},"103":{},"152":{},"168":{}},"component":{}}],["helloscout.server.app.war/src/main/webapp/web",{"_index":766,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["helloscout.ui.html",{"_index":2420,"title":{},"name":{},"text":{"24":{},"89":{},"157":{}},"component":{}}],["helloscout.ui.html.app.war/src/main/resourc",{"_index":754,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["helloscout.ui.html.app.war/src/main/webapp/web",{"_index":762,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["helloscout/helloscout.server.app.war/target",{"_index":781,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["helloscout/helloscout.ui.html.app.war/target",{"_index":783,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["helloscoutj",{"_index":1007,"title":{},"name":{},"text":{"21":{},"22":{},"87":{},"88":{},"155":{},"156":{}},"component":{}}],["helloscoutjs.app",{"_index":1025,"title":{},"name":{},"text":{"21":{},"87":{},"155":{}},"component":{}}],["helloscoutjs.app.dev/db",{"_index":1019,"title":{},"name":{},"text":{"21":{},"87":{},"155":{}},"component":{}}],["helloworld",{"_index":446,"title":{},"name":{},"text":{"14":{},"22":{},"23":{},"28":{},"29":{},"46":{},"56":{},"80":{},"88":{},"90":{},"94":{},"95":{},"113":{},"123":{},"148":{},"156":{},"158":{},"162":{},"163":{},"181":{},"191":{}},"component":{}}],["helloworld.cli",{"_index":395,"title":{},"name":{},"text":{"8":{},"12":{},"14":{},"29":{},"74":{},"78":{},"80":{},"95":{},"142":{},"146":{},"148":{},"163":{}},"component":{}}],["helloworld.helloform",{"_index":1141,"title":{},"name":{},"text":{"22":{}},"component":{}}],["helloworld.j",{"_index":1048,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["helloworld.less",{"_index":1049,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["helloworld.mydataobject",{"_index":5755,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["helloworld.serv",{"_index":402,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"14":{},"29":{},"74":{},"76":{},"78":{},"80":{},"95":{},"142":{},"144":{},"146":{},"148":{},"163":{}},"component":{}}],["helloworld.server.app.dev",{"_index":466,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["helloworld.server.app.war",{"_index":477,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["helloworld.shar",{"_index":385,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"29":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"95":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"163":{}},"component":{}}],["helloworld.ui.html",{"_index":480,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["helloworld.ui.html.app.dev",{"_index":490,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["helloworld.ui.html.app.war",{"_index":494,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["helloworld_serv",{"_index":855,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["helloworldform",{"_index":460,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["helloworldformdata",{"_index":463,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["helloworldservic",{"_index":465,"title":{},"name":{},"text":{"14":{},"29":{},"37":{},"80":{},"95":{},"104":{},"148":{},"163":{},"169":{}},"component":{}}],["help",{"_index":41,"title":{},"name":{},"text":{"1":{},"3":{},"14":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"31":{},"32":{},"40":{},"43":{},"46":{},"48":{},"53":{},"60":{},"62":{},"66":{},"67":{},"69":{},"80":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"107":{},"110":{},"113":{},"115":{},"120":{},"128":{},"130":{},"134":{},"135":{},"137":{},"148":{},"155":{},"156":{},"157":{},"158":{},"160":{},"163":{},"165":{},"166":{},"175":{},"178":{},"181":{},"183":{},"188":{},"196":{},"198":{},"202":{}},"component":{}}],["helper",{"_index":3455,"title":{},"name":{"44":{},"109":{},"179":{}},"text":{"39":{},"43":{},"44":{},"53":{},"66":{},"106":{},"109":{},"110":{},"120":{},"134":{},"174":{},"178":{},"179":{},"188":{},"202":{}},"component":{}}],["helper().target(resource_path",{"_index":6034,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["henc",{"_index":2879,"title":{},"name":{},"text":{"26":{},"38":{},"66":{},"105":{},"134":{},"173":{},"202":{}},"component":{}}],["here",{"_index":15,"title":{},"name":{},"text":{"1":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"84":{},"86":{},"88":{},"90":{},"92":{},"93":{},"106":{},"112":{},"115":{},"123":{},"124":{},"125":{},"128":{},"135":{},"152":{},"154":{},"156":{},"158":{},"160":{},"161":{},"174":{},"180":{},"183":{},"191":{},"192":{},"193":{},"196":{}},"component":{}}],["here’",{"_index":3154,"title":{},"name":{},"text":{"34":{},"52":{},"59":{},"101":{},"119":{},"127":{},"172":{},"187":{},"195":{}},"component":{}}],["heurist",{"_index":4035,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["hex",{"_index":4937,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["hexadecim",{"_index":5006,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["hhhh",{"_index":5005,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["hidden",{"_index":1405,"title":{},"name":{},"text":{"23":{},"33":{},"35":{},"36":{},"90":{},"99":{},"102":{},"103":{},"158":{},"167":{},"168":{},"170":{}},"component":{}}],["hide",{"_index":222,"title":{},"name":{},"text":{"4":{},"22":{},"23":{},"29":{},"53":{},"54":{},"60":{},"71":{},"88":{},"90":{},"95":{},"120":{},"121":{},"128":{},"139":{},"156":{},"158":{},"163":{},"188":{},"189":{},"196":{}},"component":{}}],["hierarch",{"_index":1222,"title":{"27-20":{}},"name":{},"text":{"23":{},"27":{},"29":{},"59":{},"62":{},"65":{},"90":{},"95":{},"127":{},"130":{},"133":{},"158":{},"163":{},"195":{},"198":{},"201":{}},"component":{}}],["hierarchi",{"_index":2394,"title":{},"name":{},"text":{"23":{},"40":{},"42":{},"60":{},"63":{},"64":{},"90":{},"107":{},"108":{},"128":{},"131":{},"132":{},"158":{},"175":{},"177":{},"196":{},"199":{},"200":{}},"component":{}}],["high",{"_index":2060,"title":{},"name":{},"text":{"23":{},"29":{},"40":{},"63":{},"90":{},"95":{},"107":{},"132":{},"158":{},"163":{},"175":{},"200":{}},"component":{}}],["higher",{"_index":1473,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["highli",{"_index":5399,"title":{},"name":{},"text":{"63":{},"64":{},"92":{},"131":{},"132":{},"199":{},"200":{}},"component":{}}],["highlight",{"_index":790,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["hijack",{"_index":2816,"title":{},"name":{},"text":{"26":{}},"component":{}}],["hint",{"_index":2716,"title":{},"name":{},"text":{"26":{},"39":{},"50":{},"52":{},"65":{},"106":{},"117":{},"119":{},"133":{},"174":{},"185":{},"187":{},"201":{}},"component":{}}],["hit",{"_index":348,"title":{},"name":{},"text":{"5":{},"23":{},"29":{},"52":{},"70":{},"90":{},"95":{},"119":{},"138":{},"158":{},"163":{},"187":{}},"component":{}}],["hk2",{"_index":3282,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["hoc",{"_index":5702,"title":{"64-21":{},"131-21":{},"199-21":{}},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["hold",{"_index":208,"title":{},"name":{},"text":{"4":{},"11":{},"17":{},"23":{},"24":{},"26":{},"29":{},"40":{},"48":{},"59":{},"61":{},"64":{},"71":{},"77":{},"83":{},"89":{},"90":{},"95":{},"107":{},"115":{},"127":{},"129":{},"131":{},"139":{},"145":{},"151":{},"157":{},"158":{},"163":{},"175":{},"183":{},"195":{},"197":{},"199":{}},"component":{}}],["holiday",{"_index":3633,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["home",{"_index":2604,"title":{},"name":{},"text":{"26":{},"40":{},"107":{},"175":{}},"component":{}}],["homepag",{"_index":874,"title":{},"name":{},"text":{"19":{},"23":{},"84":{},"90":{},"152":{},"158":{}},"component":{}}],["homepage.[11",{"_index":873,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["homepage.[5",{"_index":829,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["homepagecolumn",{"_index":1491,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["homepagefield",{"_index":2266,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["horizont",{"_index":1977,"title":{},"name":{},"text":{"23":{},"53":{},"90":{},"120":{},"158":{},"188":{}},"component":{}}],["host",{"_index":867,"title":{},"name":{},"text":{"19":{},"43":{},"44":{},"84":{},"109":{},"110":{},"152":{},"178":{},"179":{}},"component":{}}],["hostnam",{"_index":4356,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["hot",{"_index":1027,"title":{},"name":{},"text":{"21":{},"24":{},"87":{},"89":{},"155":{},"157":{}},"component":{}}],["hour",{"_index":3489,"title":{},"name":{},"text":{"39":{},"40":{},"63":{},"106":{},"107":{},"132":{},"174":{},"175":{},"200":{}},"component":{}}],["housekeep",{"_index":4135,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["hover",{"_index":2905,"title":{},"name":{},"text":{"27":{},"33":{},"35":{},"53":{},"56":{},"99":{},"102":{},"120":{},"123":{},"167":{},"170":{},"188":{},"191":{}},"component":{}}],["hover.check",{"_index":3134,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["howto.html",{"_index":900,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["hst",{"_index":4212,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["html",{"_index":482,"title":{"51":{},"118":{},"186":{},"43-10":{},"43-12":{},"110-10":{},"110-12":{},"178-10":{},"178-12":{}},"name":{"51":{},"118":{},"186":{}},"text":{"14":{},"18":{},"20":{},"22":{},"26":{},"29":{},"40":{},"43":{},"45":{},"46":{},"51":{},"53":{},"60":{},"63":{},"80":{},"85":{},"86":{},"88":{},"92":{},"95":{},"107":{},"110":{},"112":{},"113":{},"118":{},"120":{},"128":{},"132":{},"148":{},"153":{},"154":{},"156":{},"160":{},"163":{},"175":{},"178":{},"180":{},"181":{},"186":{},"188":{},"196":{},"200":{}},"component":{}}],["html.bold",{"_index":2204,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["html.ui",{"_index":4792,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["htmlcomponent.install(this.$contain",{"_index":5152,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["htmldocumentpars",{"_index":4754,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["htmlenabl",{"_index":2811,"title":{},"name":{},"text":{"26":{},"43":{},"110":{},"178":{}},"component":{}}],["http",{"_index":516,"title":{"19-3":{},"26-35":{},"43-1":{},"66-11":{},"84-3":{},"110-1":{},"134-11":{},"152-3":{},"178-1":{},"202-11":{}},"name":{},"text":{"16":{},"19":{},"26":{},"40":{},"43":{},"52":{},"56":{},"60":{},"63":{},"65":{},"66":{},"82":{},"84":{},"92":{},"107":{},"110":{},"119":{},"123":{},"128":{},"132":{},"133":{},"134":{},"150":{},"152":{},"160":{},"175":{},"178":{},"187":{},"191":{},"196":{},"200":{},"201":{},"202":{}},"component":{}}],["http(",{"_index":3949,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["http.keepal",{"_index":3963,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["http.session.id",{"_index":2823,"title":{},"name":{},"text":{"26":{}},"component":{}}],["http://127.0.0.1:8080",{"_index":1063,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["http://[base]/fonts/awesomeicons.woff",{"_index":4793,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["http://[base]/yourapp",{"_index":4802,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["http://content",{"_index":4336,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["http://eclipse.org/public/services/ws/common/soap",{"_index":5465,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["http://eclipse.org/public/services/ws/soap",{"_index":5464,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["http://en.wikipedia.org/wiki/apache_tomcat",{"_index":885,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["http://en.wikipedia.org/wiki/war_file_format_%28sun%29",{"_index":883,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["http://hc.apache.org/httpcompon",{"_index":3977,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["http://java.sun.com/xml/ns/jaxb",{"_index":5459,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["http://java.sun.com/xml/ns/jaxw",{"_index":5458,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["http://karma",{"_index":4533,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["http://localhost:8080",{"_index":787,"title":{},"name":{},"text":{"19":{},"40":{},"84":{},"107":{},"152":{},"175":{}},"component":{}}],["http://localhost:8080/jaxw",{"_index":5581,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["http://localhost:8080/jaxws/pingwebservic",{"_index":5580,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["http://localhost:8080/org.eclipse.scout.apps.helloscout.ui.html",{"_index":807,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["http://localhost:8082",{"_index":552,"title":{},"name":{},"text":{"16":{},"17":{},"23":{},"24":{},"82":{},"83":{},"89":{},"90":{},"150":{},"151":{},"157":{},"158":{}},"component":{}}],["http://localhost:8084",{"_index":1029,"title":{},"name":{},"text":{"21":{},"87":{},"155":{}},"component":{}}],["http://localhost:8086",{"_index":3941,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["http://localhost:9876/debug.html",{"_index":4531,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["http://my.proxy.com",{"_index":6020,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["http://scout.eclipse.org/docs/ws/pingwebservic",{"_index":5547,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["http://scout.eclipse.org/docs/ws/pingwebservice/p",{"_index":5664,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["http://services.nexus6studio.com/stockquoteservice.asmx?wsdl",{"_index":2970,"title":{},"name":{},"text":{"28":{},"94":{},"162":{}},"component":{}}],["http://tomcat.apache.org",{"_index":890,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["http://tomcat.apache.org/download",{"_index":891,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["http://tomcat.apache.org/tomcat",{"_index":893,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["http://www.mojohaus.org/jaxw",{"_index":5454,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["http://www.mulesoft.com/tomcat",{"_index":889,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["http://www.quartz",{"_index":3485,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["http://www.vogella.com/articles/apachetomcat/article.html",{"_index":898,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["http:localhost:[ui",{"_index":3310,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["httponli",{"_index":3890,"title":{"43-6":{},"110-6":{},"178-6":{}},"name":{},"text":{"40":{},"43":{},"107":{},"110":{},"175":{},"178":{}},"component":{}}],["httpresponsehead",{"_index":5617,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["httpruncontextfilt",{"_index":6004,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["https://api.example.org",{"_index":6013,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["https://developer.mozilla.org/en",{"_index":4330,"title":{},"name":{},"text":{"43":{},"56":{},"110":{},"123":{},"178":{},"191":{}},"component":{}}],["https://docs.oracle.com/javase/8/docs/api/java/text/simpledateformat.html",{"_index":5767,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["https://download.eclipse.org/scout/releas",{"_index":2471,"title":{},"name":{},"text":{"26":{},"92":{},"160":{}},"component":{}}],["https://en.wikipedia.org/wiki/.properti",{"_index":4143,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["https://en.wikipedia.org/wiki/ajax_%28programming%29",{"_index":4343,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["https://en.wikipedia.org/wiki/cascading_style_sheet",{"_index":4339,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["https://en.wikipedia.org/wiki/clickjack",{"_index":4332,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["https://en.wikipedia.org/wiki/cross",{"_index":4334,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["https://en.wikipedia.org/wiki/framing_(world_wide_web",{"_index":4340,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["https://en.wikipedia.org/wiki/javascript",{"_index":4338,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["https://en.wikipedia.org/wiki/transport_layer_secur",{"_index":884,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["https://en.wikipedia.org/wiki/websocket",{"_index":4341,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["https://eslint.org/docs/us",{"_index":4557,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["https://github.com/bsi",{"_index":1199,"title":{},"name":{},"text":{"23":{},"36":{},"90":{},"103":{},"158":{},"168":{}},"component":{}}],["https://github.com/eclips",{"_index":2658,"title":{},"name":{},"text":{"26":{}},"component":{}}],["https://github.com/wildfly/jandex",{"_index":4142,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["https://localhost:8443/manager/html",{"_index":742,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["https://localhost:8443/org.eclipse.scout.apps.helloscout.ui.html",{"_index":808,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["https://plugins.jetbrains.com/plugin/13393",{"_index":2992,"title":{},"name":{},"text":{"30":{},"96":{},"164":{}},"component":{}}],["https://scout.bsi",{"_index":2895,"title":{},"name":{},"text":{"27":{},"93":{},"161":{}},"component":{}}],["https://tools.ietf.org/html/rfc7034",{"_index":4333,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["https://unpkg.com/@eclips",{"_index":965,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["https://webpack.js.org/configuration/stat",{"_index":4525,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["https://wolfpaulus.com/?s=tomcat",{"_index":896,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["https://www.jsdelivr.com/package/npm/@eclips",{"_index":694,"title":{},"name":{},"text":{"18":{},"26":{},"85":{},"92":{},"153":{},"160":{}},"component":{}}],["https://www.mi",{"_index":3950,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["https://www.mojohaus.org/jaxb2",{"_index":5473,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["https://www.typescriptlang.org",{"_index":6400,"title":{},"name":{},"text":{"124":{},"193":{}},"component":{}}],["https://www.w3.org/tr/csp2",{"_index":3938,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["httpserverruncontextfilt",{"_index":6003,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["httpservletcontrol",{"_index":4210,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["httpsessionidloghelp",{"_index":2828,"title":{},"name":{},"text":{"26":{}},"component":{}}],["httpstatuscod",{"_index":5615,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["huge",{"_index":4448,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["iaccesscontrolservic",{"_index":4275,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["iauthenticationmethod",{"_index":5504,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["ibeandecor",{"_index":3792,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["ibeandecorationfactori",{"_index":3781,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["ibeanfield",{"_index":4260,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["iblockingcondit",{"_index":3617,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["ic",{"_index":3014,"title":{},"name":{},"text":{"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["icalendaritemdescriptionel",{"_index":6330,"title":{},"name":{},"text":{"93":{}},"component":{}}],["icancel",{"_index":4203,"title":{},"name":{},"text":{"42":{},"108":{},"177":{}},"component":{}}],["icecream",{"_index":3025,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["icecream.j",{"_index":3021,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["ichartconfig",{"_index":3094,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["iclassinventori",{"_index":3713,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["iclientnodeid.curr",{"_index":4187,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["iclientnodeid.current.get",{"_index":4191,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["iclientsess",{"_index":3649,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["icoalesc",{"_index":5319,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["icod",{"_index":5355,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["icodetyp",{"_index":5341,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["icomoon",{"_index":2661,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["icomposerfield",{"_index":2855,"title":{},"name":{},"text":{"26":{}},"component":{}}],["icompositeid",{"_index":6261,"title":{"93-20":{}},"name":{},"text":{"93":{}},"component":{}}],["icon",{"_index":528,"title":{"52":{},"119":{},"187":{},"26-22":{},"27-6":{},"52-1":{},"52-2":{},"52-3":{},"60-10":{},"119-1":{},"119-2":{},"119-3":{},"128-12":{},"187-1":{},"187-2":{},"187-3":{},"196-12":{}},"name":{"52":{},"119":{},"187":{}},"text":{"16":{},"23":{},"26":{},"27":{},"46":{},"50":{},"52":{},"53":{},"56":{},"57":{},"60":{},"65":{},"82":{},"90":{},"93":{},"113":{},"117":{},"119":{},"120":{},"123":{},"125":{},"128":{},"133":{},"150":{},"158":{},"181":{},"185":{},"187":{},"188":{},"191":{},"192":{},"196":{},"201":{}},"component":{}}],["icon/charact",{"_index":4818,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["iconfigproperti",{"_index":1546,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["iconfigurationvalid",{"_index":3868,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["iconid",{"_index":4771,"title":{},"name":{},"text":{"52":{},"59":{},"60":{},"62":{},"119":{},"127":{},"128":{},"130":{},"187":{},"195":{},"196":{},"198":{}},"component":{}}],["iconid:[const",{"_index":5283,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["iconid:angle_up",{"_index":5284,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["iconid:foo.bar",{"_index":5286,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["icons.angle_up",{"_index":5285,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["icons.calendar",{"_index":4785,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["icons.fold",{"_index":585,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["icons.gear",{"_index":1313,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["icons.j",{"_index":4801,"title":{},"name":{},"text":{"52":{},"60":{},"119":{},"128":{},"187":{},"196":{}},"component":{}}],["icons.java",{"_index":4777,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["icons.less",{"_index":4823,"title":{},"name":{},"text":{"52":{},"56":{},"119":{},"123":{},"187":{},"191":{}},"component":{}}],["icons.personsolid",{"_index":1321,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["icons.us",{"_index":1895,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["icons/application_logo.png",{"_index":4778,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["icons/person.png",{"_index":5277,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["icredentialverifi",{"_index":5506,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["id",{"_index":71,"title":{"16-5":{},"18-3":{},"26-5":{},"26-35":{},"29-1":{},"29-31":{},"29-32":{},"63-15":{},"63-17":{},"63-28":{},"63-38":{},"63-46":{},"63-47":{},"63-48":{},"64-26":{},"82-5":{},"85-3":{},"92-5":{},"95-1":{},"95-31":{},"95-32":{},"131-26":{},"132-15":{},"132-17":{},"132-28":{},"132-38":{},"132-46":{},"132-47":{},"132-48":{},"150-5":{},"153-3":{},"160-5":{},"163-1":{},"163-31":{},"163-32":{},"199-26":{},"200-15":{},"200-17":{},"200-28":{},"200-38":{},"200-46":{},"200-47":{},"200-48":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"36":{},"38":{},"40":{},"41":{},"43":{},"46":{},"48":{},"57":{},"60":{},"62":{},"63":{},"64":{},"66":{},"67":{},"68":{},"69":{},"70":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"83":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"103":{},"105":{},"107":{},"110":{},"111":{},"113":{},"115":{},"124":{},"125":{},"127":{},"128":{},"130":{},"131":{},"132":{},"134":{},"135":{},"136":{},"137":{},"138":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"162":{},"163":{},"168":{},"173":{},"175":{},"176":{},"178":{},"181":{},"183":{},"192":{},"193":{},"195":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["idatamodel",{"_index":2854,"title":{},"name":{},"text":{"26":{}},"component":{}}],["idataobject",{"_index":2723,"title":{"64-20":{},"131-20":{},"199-20":{}},"name":{},"text":{"26":{},"64":{},"92":{},"131":{},"199":{}},"component":{}}],["idataobject.class",{"_index":5877,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["idataobjectmapp",{"_index":2730,"title":{},"name":{},"text":{"26":{},"40":{},"64":{},"107":{},"131":{},"175":{},"199":{}},"component":{}}],["idataobjectmigrationglobalcontextdata",{"_index":6239,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idataobjectmigrationlocalcontextdata",{"_index":6241,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idataobjectmigrationlogg",{"_index":6243,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idatastoreservic",{"_index":1608,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["idcodec",{"_index":6311,"title":{},"name":{},"text":{"93":{}},"component":{}}],["idcodec.fromqualifi",{"_index":6214,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idcodec.fromqualifiedleni",{"_index":6216,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idcodec.fromunqualifi",{"_index":6220,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idcodec.toqualifi",{"_index":6212,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idcodec.tounqualifi",{"_index":6218,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idea",{"_index":996,"title":{"26-6":{},"92-6":{},"160-6":{}},"name":{},"text":{"21":{},"22":{},"24":{},"26":{},"40":{},"56":{},"59":{},"87":{},"88":{},"89":{},"92":{},"107":{},"123":{},"127":{},"155":{},"156":{},"157":{},"160":{},"175":{},"191":{},"195":{}},"component":{}}],["ideal",{"_index":6382,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["idempot",{"_index":3972,"title":{},"name":{},"text":{"40":{},"66":{},"107":{},"134":{},"175":{},"202":{}},"component":{}}],["ident",{"_index":2794,"title":{},"name":{},"text":{"26":{},"64":{},"66":{},"92":{},"131":{},"134":{},"160":{},"199":{},"202":{}},"component":{}}],["identfi",{"_index":6296,"title":{},"name":{},"text":{"93":{}},"component":{}}],["identifi",{"_index":257,"title":{"93-19":{}},"name":{},"text":{"4":{},"7":{},"22":{},"23":{},"26":{},"29":{},"53":{},"63":{},"71":{},"73":{},"88":{},"90":{},"92":{},"93":{},"95":{},"120":{},"132":{},"139":{},"141":{},"156":{},"158":{},"163":{},"188":{},"200":{}},"component":{}}],["identifier.attribut",{"_index":1675,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["idesktop",{"_index":4200,"title":{},"name":{},"text":{"41":{},"61":{},"111":{},"129":{},"176":{},"197":{}},"component":{}}],["idesktop#getlogoid",{"_index":2643,"title":{},"name":{},"text":{"26":{}},"component":{}}],["idesktop.addnotif",{"_index":2908,"title":{},"name":{},"text":{"27":{}},"component":{}}],["idesktop.curr",{"_index":4201,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["idesktop.current.get",{"_index":4202,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["idesktop.setbenchlayoutdata",{"_index":4559,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["idestin",{"_index":4045,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["idexternalformatt",{"_index":6111,"title":{"92-25":{}},"name":{},"text":{},"component":{}}],["idexternalformatter.fromexternalform",{"_index":6213,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idexternalformatter.fromexternalformleni",{"_index":6215,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idexternalformatter.getidclass",{"_index":6209,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idexternalformatter.gettypenam",{"_index":6207,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idexternalformatter.toexternalform",{"_index":6211,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idfactori",{"_index":6110,"title":{"92-25":{}},"name":{},"text":{"93":{}},"component":{}}],["idfactory.createfromstr",{"_index":6219,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idimensions.visible_custom",{"_index":4897,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["idinventory.getidclass",{"_index":6210,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idinventory.gettypenam",{"_index":6208,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idisplaypar",{"_index":4194,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["idl",{"_index":4022,"title":{},"name":{},"text":{"40":{},"44":{},"107":{},"109":{},"175":{},"179":{}},"component":{}}],["idoent",{"_index":2727,"title":{},"name":{},"text":{"26":{},"64":{},"100":{},"131":{},"171":{},"199":{}},"component":{}}],["idoentitydeserializertyperesolv",{"_index":2760,"title":{},"name":{},"text":{"26":{}},"component":{}}],["idoentitydeserializertypestrategi",{"_index":2761,"title":{},"name":{},"text":{"26":{}},"component":{}}],["idostructuremigrationglobalcontextdata",{"_index":6238,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idostructuremigrationhandl",{"_index":6254,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idostructuremigrationlocalcontextdata",{"_index":6240,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idostructuremigrationlogg",{"_index":6242,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idovaluemigrationhandl",{"_index":6227,"title":{},"name":{},"text":{"92":{}},"component":{}}],["idtypename(\"example.examplecompositeid",{"_index":6312,"title":{},"name":{},"text":{"93":{}},"component":{}}],["idtypename(\"scout.exampleid",{"_index":5915,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["ienum",{"_index":2627,"title":{},"name":{},"text":{"26":{},"64":{},"131":{},"199":{}},"component":{}}],["iexceptiontransl",{"_index":3586,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["iexecutionsemaphor",{"_index":3512,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["iextensionregistri",{"_index":4650,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["ifilt",{"_index":3531,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["iform",{"_index":4192,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["iform.curr",{"_index":4193,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["iform.current.get",{"_index":4196,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["iform.display_hint_view",{"_index":1730,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["iform.getconfigureddisplayviewid",{"_index":4561,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["iformfield.java",{"_index":2952,"title":{},"name":{},"text":{"27":{}},"component":{}}],["ifram",{"_index":4225,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["ifutur",{"_index":3385,"title":{"39-13":{},"106-13":{},"174-13":{}},"name":{},"text":{"38":{},"39":{},"42":{},"105":{},"106":{},"108":{},"173":{},"174":{},"177":{}},"component":{}}],["ifuture.addexecutionhint(hint",{"_index":3515,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["ifuture.awaitdon",{"_index":4151,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["ifuture.awaitdoneandget",{"_index":3517,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["ifuture.curr",{"_index":3439,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["ifuture.current.get",{"_index":3393,"title":{},"name":{},"text":{"38":{},"39":{},"105":{},"106":{},"173":{},"174":{}},"component":{}}],["ifuture.iscancel",{"_index":3526,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["ifuture.removeexecutionhint(hint",{"_index":3516,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["ifuture’",{"_index":3372,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["ignor",{"_index":1056,"title":{"46-18":{},"64-10":{},"113-17":{},"131-10":{},"181-17":{},"199-10":{}},"name":{},"text":{"22":{},"26":{},"39":{},"40":{},"46":{},"63":{},"64":{},"88":{},"93":{},"106":{},"107":{},"113":{},"131":{},"132":{},"156":{},"174":{},"175":{},"181":{},"199":{},"200":{}},"component":{}}],["ignorewebserviceentrypoint",{"_index":5502,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["igroupbox.setnotif",{"_index":2907,"title":{},"name":{},"text":{"27":{}},"component":{}}],["ihealthcheck",{"_index":6335,"title":{},"name":{},"text":{"93":{}},"component":{}}],["ihelloworldservic",{"_index":462,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["iid",{"_index":5913,"title":{"92-25":{},"93-20":{}},"name":{},"text":{"64":{},"92":{},"93":{},"131":{},"199":{}},"component":{}}],["iid.unwrapasstr",{"_index":6217,"title":{},"name":{},"text":{"92":{}},"component":{}}],["ijobmanag",{"_index":3446,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["ijobmanager.destroy_ord",{"_index":3646,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["ilanguagelookupservice.class",{"_index":5952,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["illustr",{"_index":3445,"title":{},"name":{},"text":{"39":{},"41":{},"42":{},"63":{},"106":{},"108":{},"111":{},"132":{},"174":{},"176":{},"177":{},"200":{}},"component":{}}],["ilongid",{"_index":6309,"title":{},"name":{},"text":{"93":{}},"component":{}}],["ilookuprow",{"_index":3144,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["imag",{"_index":1701,"title":{},"name":{},"text":{"23":{},"26":{},"36":{},"43":{},"46":{},"47":{},"48":{},"52":{},"60":{},"90":{},"103":{},"110":{},"113":{},"114":{},"115":{},"119":{},"128":{},"158":{},"168":{},"178":{},"181":{},"182":{},"183":{},"187":{},"196":{}},"component":{}}],["imagefield",{"_index":6258,"title":{"93-12":{},"127-6":{},"195-6":{}},"name":{},"text":{"93":{},"127":{},"195":{}},"component":{}}],["imagefield.menutypes.imageurl",{"_index":6408,"title":{},"name":{},"text":{"127":{},"195":{}},"component":{}}],["imagefield.menutypes.nul",{"_index":6409,"title":{},"name":{},"text":{"127":{},"195":{}},"component":{}}],["imagefieldmenutype.imageid",{"_index":2224,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["imagefieldmenutype.imageurl",{"_index":2223,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["imagefieldmenutype.nul",{"_index":2225,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["imagin",{"_index":5069,"title":{},"name":{},"text":{"59":{},"60":{},"127":{},"128":{},"195":{},"196":{}},"component":{}}],["img",{"_index":3272,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["img/card",{"_index":3259,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["immedi",{"_index":3424,"title":{},"name":{},"text":{"39":{},"41":{},"42":{},"44":{},"60":{},"61":{},"106":{},"108":{},"109":{},"111":{},"128":{},"129":{},"174":{},"176":{},"177":{},"179":{},"196":{},"197":{}},"component":{}}],["impact",{"_index":4719,"title":{},"name":{},"text":{"48":{},"59":{},"93":{},"115":{},"127":{},"183":{},"195":{}},"component":{}}],["implement",{"_index":393,"title":{"23-27":{},"66-15":{},"90-27":{},"134-15":{},"158-27":{},"202-15":{}},"name":{},"text":{"8":{},"12":{},"16":{},"18":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"32":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"48":{},"50":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"74":{},"78":{},"82":{},"85":{},"88":{},"90":{},"92":{},"93":{},"94":{},"95":{},"98":{},"100":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"115":{},"117":{},"121":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"142":{},"146":{},"150":{},"153":{},"156":{},"158":{},"162":{},"163":{},"166":{},"168":{},"169":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"183":{},"185":{},"189":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["implementor",{"_index":2628,"title":{"63-2":{},"63-3":{},"63-6":{},"132-2":{},"132-3":{},"132-6":{},"200-2":{},"200-3":{},"200-6":{}},"name":{},"text":{"26":{},"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["impli",{"_index":1840,"title":{},"name":{},"text":{"23":{},"39":{},"43":{},"90":{},"106":{},"110":{},"158":{},"174":{},"178":{}},"component":{}}],["implicit",{"_index":5479,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["implicitli",{"_index":6206,"title":{},"name":{},"text":{"92":{}},"component":{}}],["import",{"_index":115,"title":{"16-1":{},"29-5":{},"82-1":{},"92-24":{},"95-5":{},"150-1":{},"163-5":{}},"name":{},"text":{"2":{},"4":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"22":{},"23":{},"26":{},"29":{},"33":{},"35":{},"36":{},"37":{},"40":{},"41":{},"46":{},"48":{},"52":{},"55":{},"56":{},"58":{},"59":{},"60":{},"63":{},"64":{},"65":{},"68":{},"71":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"88":{},"90":{},"92":{},"93":{},"95":{},"99":{},"100":{},"102":{},"103":{},"104":{},"107":{},"111":{},"113":{},"115":{},"119":{},"122":{},"123":{},"126":{},"127":{},"128":{},"131":{},"132":{},"133":{},"136":{},"139":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"156":{},"158":{},"160":{},"163":{},"167":{},"168":{},"169":{},"170":{},"171":{},"175":{},"176":{},"181":{},"183":{},"187":{},"190":{},"191":{},"194":{},"195":{},"196":{},"199":{},"200":{},"201":{}},"component":{}}],["import[0]=classpath:myconfigs/other.properti",{"_index":3853,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["import[1]=file:/c:/path/to/my/settings.properti",{"_index":3854,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["import[2]=file:${catalina.base}/conf/db_connection.properti",{"_index":3855,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["import[anykey",{"_index":3852,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["importantli",{"_index":3453,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["importdata",{"_index":4735,"title":{},"name":{},"text":{"50":{},"100":{},"117":{},"171":{},"185":{}},"component":{}}],["importformdata(formdata",{"_index":2030,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["importpagedata",{"_index":1662,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["importpagedata(beans.get(iorganizationservice.class).getorganizationtabledata(filt",{"_index":1482,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["importpagedata(beans.get(ipersonservice.class",{"_index":1377,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["impos",{"_index":6064,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["impress",{"_index":1038,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["improv",{"_index":120,"title":{"26-41":{},"27-10":{},"92-23":{},"93-4":{},"93-14":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"23":{},"27":{},"31":{},"63":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"90":{},"92":{},"93":{},"97":{},"124":{},"132":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"158":{},"165":{},"193":{},"200":{}},"component":{}}],["imylookupservic",{"_index":417,"title":{},"name":{},"text":{"10":{},"76":{},"144":{}},"component":{}}],["imyservic",{"_index":397,"title":{},"name":{},"text":{"8":{},"12":{},"29":{},"74":{},"78":{},"95":{},"142":{},"146":{},"163":{}},"component":{}}],["inaccess",{"_index":4233,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["inact",{"_index":4132,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["inamespac",{"_index":5741,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["incl",{"_index":5095,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["includ",{"_index":127,"title":{"20-3":{},"86-3":{},"154-3":{}},"name":{},"text":{"3":{},"6":{},"8":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"32":{},"40":{},"41":{},"43":{},"46":{},"48":{},"51":{},"56":{},"59":{},"63":{},"64":{},"69":{},"72":{},"74":{},"82":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"98":{},"107":{},"110":{},"111":{},"113":{},"115":{},"118":{},"123":{},"124":{},"127":{},"128":{},"131":{},"132":{},"137":{},"140":{},"142":{},"150":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"163":{},"166":{},"175":{},"176":{},"178":{},"181":{},"183":{},"186":{},"191":{},"193":{},"195":{},"196":{},"199":{},"200":{}},"component":{}}],["inclus",{"_index":1120,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["incom",{"_index":5307,"title":{},"name":{},"text":{"61":{},"63":{},"66":{},"129":{},"132":{},"134":{},"197":{},"200":{},"202":{}},"component":{}}],["incomplet",{"_index":2647,"title":{},"name":{},"text":{"26":{}},"component":{}}],["inconsist",{"_index":2865,"title":{},"name":{},"text":{"26":{}},"component":{}}],["incorrect",{"_index":6269,"title":{},"name":{},"text":{"93":{},"124":{},"193":{}},"component":{}}],["increas",{"_index":1402,"title":{},"name":{},"text":{"23":{},"26":{},"27":{},"40":{},"52":{},"53":{},"63":{},"90":{},"107":{},"119":{},"120":{},"132":{},"158":{},"175":{},"187":{},"188":{},"200":{}},"component":{}}],["increment",{"_index":5738,"title":{},"name":{},"text":{"64":{},"66":{},"131":{},"134":{},"199":{},"202":{}},"component":{}}],["independ",{"_index":3519,"title":{},"name":{},"text":{"39":{},"48":{},"60":{},"63":{},"66":{},"106":{},"115":{},"128":{},"132":{},"134":{},"174":{},"183":{},"196":{},"200":{},"202":{}},"component":{}}],["index",{"_index":7,"title":{"36-3":{},"36-4":{},"103-3":{},"103-4":{},"168-3":{},"168-4":{}},"name":{"1":{},"67":{},"135":{}},"text":{"22":{},"40":{},"46":{},"48":{},"55":{},"56":{},"58":{},"60":{},"88":{},"103":{},"107":{},"113":{},"115":{},"122":{},"123":{},"126":{},"128":{},"156":{},"168":{},"175":{},"181":{},"183":{},"190":{},"191":{},"194":{},"196":{}},"component":{}}],["index.html",{"_index":926,"title":{},"name":{},"text":{"20":{},"22":{},"46":{},"51":{},"52":{},"56":{},"86":{},"88":{},"113":{},"118":{},"119":{},"123":{},"154":{},"156":{},"181":{},"186":{},"187":{},"191":{}},"component":{}}],["index.j",{"_index":3208,"title":{},"name":{},"text":{"36":{},"46":{},"48":{},"55":{},"60":{},"92":{},"103":{},"113":{},"115":{},"122":{},"168":{},"181":{},"183":{},"190":{}},"component":{}}],["index.less",{"_index":3211,"title":{},"name":{},"text":{"36":{},"52":{},"56":{},"103":{},"119":{},"123":{},"168":{},"187":{},"191":{}},"component":{}}],["indic",{"_index":995,"title":{"27-8":{}},"name":{},"text":{"21":{},"23":{},"24":{},"26":{},"27":{},"36":{},"38":{},"39":{},"40":{},"43":{},"53":{},"59":{},"63":{},"87":{},"89":{},"90":{},"103":{},"105":{},"106":{},"107":{},"110":{},"120":{},"127":{},"132":{},"155":{},"157":{},"158":{},"168":{},"173":{},"174":{},"175":{},"178":{},"188":{},"195":{},"200":{}},"component":{}}],["indirect",{"_index":5432,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["individu",{"_index":382,"title":{},"name":{},"text":{"7":{},"20":{},"23":{},"26":{},"29":{},"40":{},"56":{},"73":{},"86":{},"90":{},"95":{},"107":{},"113":{},"123":{},"141":{},"154":{},"158":{},"163":{},"175":{},"181":{},"191":{}},"component":{}}],["indiviud",{"_index":440,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["ineffici",{"_index":4422,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["inf",{"_index":763,"title":{},"name":{},"text":{"19":{},"40":{},"84":{},"107":{},"152":{},"175":{}},"component":{}}],["inf/bind",{"_index":5437,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["inf/cxf",{"_index":5422,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["inf/scout.xml",{"_index":3720,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["inf/sun",{"_index":5471,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["inf/web.xml",{"_index":3288,"title":{},"name":{},"text":{"37":{},"43":{},"104":{},"110":{},"169":{},"178":{}},"component":{}}],["inf/wsdl",{"_index":5435,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["inf/wsdl/yourfirstwebservice.wsdl",{"_index":5449,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["inf/wsdl/yoursecondwebservice.wsdl",{"_index":5451,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["infinit",{"_index":3471,"title":{},"name":{},"text":{"39":{},"40":{},"44":{},"63":{},"106":{},"107":{},"109":{},"132":{},"174":{},"175":{},"179":{},"200":{}},"component":{}}],["influenc",{"_index":3749,"title":{},"name":{},"text":{"40":{},"60":{},"107":{},"128":{},"175":{},"196":{}},"component":{}}],["info",{"_index":1695,"title":{"26-18":{}},"name":{},"text":{"23":{},"26":{},"29":{},"40":{},"53":{},"90":{},"95":{},"107":{},"120":{},"158":{},"163":{},"175":{},"188":{}},"component":{}}],["infofield",{"_index":2175,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["inform",{"_index":1035,"title":{"22-7":{},"63-35":{},"88-7":{},"132-35":{},"156-7":{},"200-35":{}},"name":{},"text":{"22":{},"23":{},"26":{},"27":{},"32":{},"38":{},"39":{},"40":{},"41":{},"44":{},"46":{},"53":{},"59":{},"60":{},"61":{},"63":{},"64":{},"66":{},"88":{},"90":{},"92":{},"93":{},"98":{},"105":{},"106":{},"107":{},"109":{},"111":{},"113":{},"120":{},"127":{},"128":{},"129":{},"131":{},"132":{},"134":{},"156":{},"158":{},"166":{},"173":{},"174":{},"175":{},"176":{},"179":{},"181":{},"188":{},"195":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["infrastructur",{"_index":1180,"title":{"23-18":{},"90-18":{},"158-18":{}},"name":{},"text":{"23":{},"26":{},"56":{},"90":{},"123":{},"158":{},"191":{}},"component":{}}],["inherit",{"_index":223,"title":{"27-21":{}},"name":{},"text":{"4":{},"27":{},"29":{},"36":{},"38":{},"40":{},"41":{},"46":{},"48":{},"56":{},"63":{},"71":{},"95":{},"103":{},"105":{},"107":{},"111":{},"113":{},"115":{},"123":{},"132":{},"139":{},"163":{},"168":{},"173":{},"175":{},"176":{},"181":{},"183":{},"191":{},"200":{}},"component":{}}],["inheritaccess",{"_index":2866,"title":{},"name":{},"text":{"26":{}},"component":{}}],["init",{"_index":4300,"title":{},"name":{},"text":{"43":{},"48":{},"55":{},"60":{},"63":{},"110":{},"115":{},"122":{},"128":{},"132":{},"178":{},"183":{},"190":{},"196":{},"200":{}},"component":{}}],["initi",{"_index":148,"title":{"23-3":{},"23-4":{},"90-3":{},"90-4":{},"158-3":{},"158-4":{}},"name":{},"text":{"3":{},"14":{},"17":{},"21":{},"22":{},"23":{},"24":{},"27":{},"29":{},"31":{},"36":{},"39":{},"40":{},"41":{},"43":{},"47":{},"48":{},"50":{},"51":{},"55":{},"60":{},"63":{},"66":{},"69":{},"80":{},"83":{},"87":{},"88":{},"89":{},"90":{},"95":{},"97":{},"103":{},"106":{},"107":{},"110":{},"111":{},"114":{},"115":{},"117":{},"118":{},"122":{},"124":{},"128":{},"132":{},"134":{},"137":{},"148":{},"151":{},"155":{},"156":{},"157":{},"158":{},"163":{},"165":{},"168":{},"174":{},"175":{},"176":{},"178":{},"182":{},"183":{},"185":{},"186":{},"190":{},"193":{},"196":{},"200":{},"202":{}},"component":{}}],["initmodelof",{"_index":6363,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["initparam",{"_index":5521,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["initparam(key",{"_index":5522,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["inittransformationconfig",{"_index":4857,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["inject",{"_index":4717,"title":{},"name":{},"text":{"48":{},"63":{},"115":{},"132":{},"183":{},"200":{}},"component":{}}],["inlcud",{"_index":4757,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["inlin",{"_index":4219,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["inner",{"_index":298,"title":{},"name":{},"text":{"5":{},"23":{},"29":{},"40":{},"48":{},"62":{},"70":{},"90":{},"95":{},"107":{},"115":{},"130":{},"138":{},"158":{},"163":{},"175":{},"183":{},"198":{}},"component":{}}],["inotificationhandl",{"_index":5327,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["input",{"_index":1188,"title":{"23-36":{},"90-36":{},"158-36":{}},"name":{},"text":{"23":{},"32":{},"39":{},"43":{},"48":{},"58":{},"65":{},"90":{},"98":{},"100":{},"106":{},"110":{},"115":{},"126":{},"133":{},"158":{},"166":{},"171":{},"174":{},"178":{},"183":{},"194":{},"201":{}},"component":{}}],["insensit",{"_index":3895,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["insert",{"_index":1470,"title":{},"name":{},"text":{"23":{},"28":{},"36":{},"48":{},"90":{},"94":{},"103":{},"115":{},"158":{},"162":{},"168":{},"183":{}},"component":{}}],["insid",{"_index":313,"title":{},"name":{},"text":{"5":{},"11":{},"22":{},"23":{},"26":{},"29":{},"32":{},"33":{},"36":{},"60":{},"70":{},"77":{},"88":{},"90":{},"95":{},"98":{},"99":{},"103":{},"128":{},"138":{},"145":{},"156":{},"158":{},"163":{},"166":{},"168":{},"170":{},"196":{}},"component":{}}],["insofar",{"_index":3581,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["inspect",{"_index":6139,"title":{},"name":{},"text":{"92":{}},"component":{}}],["instal",{"_index":495,"title":{"16-2":{},"18-2":{},"19-2":{},"19-6":{},"29-30":{},"29-31":{},"29-33":{},"63-37":{},"66-14":{},"82-2":{},"84-2":{},"84-6":{},"85-2":{},"95-30":{},"95-31":{},"95-33":{},"132-37":{},"134-14":{},"150-2":{},"152-2":{},"152-6":{},"153-2":{},"163-30":{},"163-31":{},"163-33":{},"200-37":{},"202-14":{}},"name":{},"text":{"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"30":{},"39":{},"46":{},"50":{},"52":{},"63":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"94":{},"95":{},"96":{},"106":{},"113":{},"117":{},"119":{},"132":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"162":{},"163":{},"164":{},"174":{},"181":{},"185":{},"187":{},"200":{}},"component":{}}],["instanc",{"_index":786,"title":{"26-40":{}},"name":{},"text":{"19":{},"22":{},"23":{},"26":{},"34":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"48":{},"52":{},"54":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"84":{},"88":{},"90":{},"92":{},"101":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"115":{},"119":{},"121":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"152":{},"156":{},"158":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"183":{},"187":{},"189":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["instanceof",{"_index":2735,"title":{},"name":{},"text":{"26":{},"48":{},"60":{},"64":{},"115":{},"128":{},"131":{},"183":{},"196":{},"199":{}},"component":{}}],["instanti",{"_index":4915,"title":{},"name":{},"text":{"55":{},"60":{},"62":{},"64":{},"122":{},"128":{},"130":{},"131":{},"190":{},"196":{},"198":{},"199":{}},"component":{}}],["instead",{"_index":646,"title":{},"name":{},"text":{"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"26":{},"34":{},"38":{},"39":{},"40":{},"41":{},"44":{},"46":{},"48":{},"53":{},"55":{},"56":{},"59":{},"60":{},"61":{},"63":{},"64":{},"65":{},"84":{},"85":{},"86":{},"87":{},"88":{},"90":{},"92":{},"93":{},"101":{},"105":{},"106":{},"107":{},"109":{},"111":{},"113":{},"115":{},"120":{},"122":{},"123":{},"127":{},"128":{},"129":{},"131":{},"132":{},"133":{},"152":{},"153":{},"154":{},"155":{},"156":{},"158":{},"160":{},"172":{},"173":{},"174":{},"175":{},"176":{},"179":{},"181":{},"183":{},"188":{},"190":{},"191":{},"195":{},"196":{},"197":{},"199":{},"200":{},"201":{}},"component":{}}],["instruct",{"_index":633,"title":{"19-7":{},"84-7":{},"152-7":{}},"name":{},"text":{"17":{},"19":{},"21":{},"24":{},"26":{},"27":{},"39":{},"43":{},"63":{},"83":{},"84":{},"87":{},"89":{},"92":{},"93":{},"106":{},"110":{},"124":{},"132":{},"151":{},"152":{},"155":{},"157":{},"160":{},"161":{},"174":{},"178":{},"193":{},"200":{}},"component":{}}],["instrument",{"_index":3450,"title":{"63-23":{},"132-23":{},"200-23":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["int",{"_index":1446,"title":{},"name":{},"text":{"23":{},"39":{},"43":{},"57":{},"63":{},"90":{},"106":{},"110":{},"125":{},"132":{},"158":{},"174":{},"178":{},"192":{},"200":{}},"component":{}}],["integ",{"_index":3117,"title":{},"name":{},"text":{"33":{},"40":{},"62":{},"64":{},"99":{},"107":{},"130":{},"131":{},"170":{},"175":{},"198":{},"199":{}},"component":{}}],["integr",{"_index":1793,"title":{},"name":{},"text":{"23":{},"26":{},"46":{},"56":{},"63":{},"66":{},"90":{},"92":{},"113":{},"123":{},"132":{},"134":{},"158":{},"181":{},"191":{},"200":{},"202":{}},"component":{}}],["intellij",{"_index":672,"title":{"30":{},"96":{},"164":{},"21-5":{},"24-5":{},"24-8":{},"26-6":{},"87-5":{},"89-5":{},"89-8":{},"92-6":{},"155-5":{},"157-5":{},"157-8":{},"160-6":{}},"name":{"30":{},"96":{},"164":{}},"text":{"18":{},"21":{},"23":{},"24":{},"26":{},"30":{},"31":{},"46":{},"85":{},"87":{},"89":{},"90":{},"92":{},"96":{},"97":{},"113":{},"124":{},"153":{},"155":{},"157":{},"158":{},"160":{},"164":{},"165":{},"181":{},"193":{}},"component":{}}],["intend",{"_index":705,"title":{},"name":{},"text":{"19":{},"26":{},"84":{},"152":{}},"component":{}}],["intent",{"_index":4933,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["interact",{"_index":641,"title":{},"name":{},"text":{"18":{},"23":{},"27":{},"32":{},"33":{},"35":{},"39":{},"60":{},"63":{},"85":{},"90":{},"93":{},"98":{},"99":{},"102":{},"106":{},"128":{},"132":{},"153":{},"158":{},"166":{},"167":{},"170":{},"174":{},"196":{},"200":{}},"component":{}}],["intercept",{"_index":3730,"title":{},"name":{},"text":{"40":{},"48":{},"63":{},"66":{},"107":{},"115":{},"132":{},"134":{},"175":{},"183":{},"200":{},"202":{}},"component":{}}],["interceptcallablechain",{"_index":3675,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["interceptor",{"_index":3676,"title":{},"name":{},"text":{"39":{},"63":{},"66":{},"106":{},"132":{},"134":{},"174":{},"200":{},"202":{}},"component":{}}],["interest",{"_index":25,"title":{},"name":{},"text":{"1":{},"19":{},"22":{},"24":{},"26":{},"39":{},"43":{},"60":{},"66":{},"67":{},"84":{},"88":{},"89":{},"106":{},"110":{},"128":{},"134":{},"135":{},"152":{},"156":{},"157":{},"174":{},"178":{},"196":{},"202":{}},"component":{}}],["interfac",{"_index":392,"title":{"46-10":{},"63-22":{},"64-15":{},"64-20":{},"93-20":{},"113-10":{},"131-15":{},"131-20":{},"132-22":{},"181-10":{},"199-15":{},"199-20":{},"200-22":{}},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"14":{},"17":{},"18":{},"19":{},"21":{},"23":{},"24":{},"26":{},"27":{},"29":{},"32":{},"38":{},"39":{},"40":{},"43":{},"46":{},"57":{},"63":{},"64":{},"66":{},"74":{},"75":{},"76":{},"78":{},"80":{},"83":{},"84":{},"85":{},"87":{},"89":{},"90":{},"92":{},"93":{},"95":{},"98":{},"105":{},"106":{},"107":{},"110":{},"113":{},"125":{},"128":{},"131":{},"132":{},"134":{},"142":{},"143":{},"144":{},"146":{},"148":{},"151":{},"152":{},"153":{},"155":{},"157":{},"158":{},"163":{},"166":{},"173":{},"174":{},"175":{},"178":{},"181":{},"192":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["interface/build",{"_index":6396,"title":{},"name":{},"text":{"124":{},"193":{}},"component":{}}],["intermedi",{"_index":1329,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["intern",{"_index":3141,"title":{},"name":{},"text":{"34":{},"38":{},"41":{},"43":{},"53":{},"54":{},"63":{},"64":{},"101":{},"105":{},"110":{},"111":{},"120":{},"121":{},"131":{},"132":{},"172":{},"173":{},"176":{},"178":{},"188":{},"189":{},"199":{},"200":{}},"component":{}}],["internation",{"_index":4991,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["internet",{"_index":2490,"title":{},"name":{},"text":{"26":{},"27":{},"50":{},"117":{},"185":{}},"component":{}}],["interpret",{"_index":3787,"title":{},"name":{},"text":{"40":{},"46":{},"63":{},"66":{},"107":{},"113":{},"127":{},"132":{},"134":{},"175":{},"181":{},"195":{},"200":{},"202":{}},"component":{}}],["interrupt",{"_index":3346,"title":{},"name":{},"text":{"38":{},"39":{},"41":{},"63":{},"105":{},"106":{},"111":{},"132":{},"173":{},"174":{},"176":{},"200":{}},"component":{}}],["interruptifrun",{"_index":3556,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["interv",{"_index":4063,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["introduc",{"_index":826,"title":{},"name":{},"text":{"19":{},"23":{},"27":{},"29":{},"43":{},"48":{},"84":{},"90":{},"93":{},"95":{},"110":{},"115":{},"152":{},"158":{},"163":{},"178":{},"183":{}},"component":{}}],["introduct",{"_index":887,"title":{"20-1":{},"21-1":{},"22-1":{},"24-1":{},"86-1":{},"87-1":{},"88-1":{},"89-1":{},"154-1":{},"155-1":{},"156-1":{},"157-1":{}},"name":{},"text":{"19":{},"23":{},"60":{},"84":{},"90":{},"128":{},"152":{},"158":{},"196":{}},"component":{}}],["intstream.of(0",{"_index":3078,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["invalid",{"_index":2114,"title":{"27-25":{}},"name":{},"text":{"23":{},"27":{},"39":{},"50":{},"57":{},"58":{},"90":{},"93":{},"106":{},"117":{},"125":{},"126":{},"158":{},"174":{},"185":{},"192":{},"194":{}},"component":{}}],["inventori",{"_index":3695,"title":{"40-3":{},"64-23":{},"107-3":{},"131-23":{},"175-3":{},"199-23":{}},"name":{},"text":{"40":{},"61":{},"64":{},"66":{},"107":{},"129":{},"131":{},"134":{},"175":{},"197":{},"199":{},"202":{}},"component":{}}],["invers",{"_index":2810,"title":{},"name":{},"text":{"26":{}},"component":{}}],["invert",{"_index":2648,"title":{},"name":{},"text":{"26":{},"59":{},"127":{},"195":{}},"component":{}}],["invis",{"_index":1424,"title":{},"name":{},"text":{"23":{},"53":{},"90":{},"120":{},"158":{},"188":{}},"component":{}}],["invoc",{"_index":5596,"title":{},"name":{},"text":{"63":{},"66":{},"132":{},"134":{},"200":{},"202":{}},"component":{}}],["invocationcontext",{"_index":5584,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["invocationcontext.prop_password",{"_index":5629,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["invocationcontext.prop_usernam",{"_index":5628,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["invocationtargetexcept",{"_index":3379,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["invok",{"_index":1224,"title":{"63-33":{},"132-33":{},"200-33":{}},"name":{},"text":{"23":{},"28":{},"39":{},"40":{},"48":{},"63":{},"66":{},"90":{},"92":{},"94":{},"106":{},"107":{},"115":{},"132":{},"134":{},"158":{},"160":{},"162":{},"174":{},"175":{},"183":{},"200":{},"202":{}},"component":{}}],["invoke(ibeaninvocationcontext",{"_index":3799,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["involv",{"_index":1652,"title":{},"name":{},"text":{"23":{},"29":{},"90":{},"95":{},"158":{},"163":{}},"component":{}}],["io",{"_index":4440,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["io.smallrye:jandex",{"_index":6121,"title":{},"name":{},"text":{"92":{}},"component":{}}],["iobjectmapp",{"_index":2729,"title":{},"name":{},"text":{"26":{}},"component":{}}],["iorganizationlookupservic",{"_index":2341,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["iorganizationlookupservice.class",{"_index":2350,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["iorganizationservic",{"_index":1653,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ioutlin",{"_index":4197,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["ioutline.curr",{"_index":4198,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["ioutline.current.get",{"_index":4199,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["ip",{"_index":4357,"title":{},"name":{},"text":{"44":{},"63":{},"109":{},"132":{},"179":{},"200":{}},"component":{}}],["ipaddressfilt",{"_index":5531,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["ipag",{"_index":2406,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ipermiss",{"_index":4271,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["ipermission.getlevel",{"_index":4273,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["ipermissioncollect",{"_index":2016,"title":{},"name":{},"text":{"23":{},"43":{},"90":{},"110":{},"158":{},"178":{}},"component":{}}],["ipermissioncollection#impli",{"_index":4329,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["ipersonservic",{"_index":1682,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["iplaceholderfield",{"_index":4892,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["iplatformlisten",{"_index":3645,"title":{},"name":{},"text":{"39":{},"40":{},"106":{},"107":{},"174":{},"175":{}},"component":{}}],["irestapplicationclassescontributor",{"_index":5998,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["irestapplicationpropertiescontributor",{"_index":6000,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["irestapplicationsingletonscontributor",{"_index":5999,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["irestresourc",{"_index":3304,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["irestresourcecli",{"_index":6029,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["irootid",{"_index":6204,"title":{"93-20":{}},"name":{},"text":{"92":{}},"component":{}}],["irunn",{"_index":1615,"title":{},"name":{},"text":{"23":{},"39":{},"41":{},"90":{},"106":{},"111":{},"158":{},"174":{},"176":{}},"component":{}}],["iservic",{"_index":3716,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["isession.current.get",{"_index":4172,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["isn’t",{"_index":5049,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["iso",{"_index":4998,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["isol",{"_index":6091,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["issu",{"_index":4189,"title":{},"name":{},"text":{"41":{},"63":{},"64":{},"66":{},"111":{},"131":{},"132":{},"134":{},"176":{},"199":{},"200":{},"202":{}},"component":{}}],["ist",{"_index":5272,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["istextfilterfieldvis",{"_index":5162,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["istringid",{"_index":6308,"title":{},"name":{},"text":{"93":{}},"component":{}}],["it.it",{"_index":5184,"title":{},"name":{},"text":{"60":{}},"component":{}}],["ital",{"_index":2689,"title":{},"name":{},"text":{"26":{}},"component":{}}],["item",{"_index":2495,"title":{},"name":{},"text":{"26":{},"27":{},"32":{},"52":{},"93":{},"98":{},"119":{},"127":{},"166":{},"187":{},"195":{}},"component":{}}],["iter",{"_index":2796,"title":{},"name":{},"text":{"26":{},"43":{},"110":{},"178":{}},"component":{}}],["itextproviderservic",{"_index":4988,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["ithrowablewithcontextinfo",{"_index":3343,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["ithrowablewithcontextinfo.withcontextinfo(str",{"_index":3386,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["itokenprincipalproduc",{"_index":2869,"title":{},"name":{},"text":{"26":{}},"component":{}}],["itokenverifi",{"_index":2868,"title":{},"name":{},"text":{"26":{}},"component":{}}],["itransact",{"_index":6090,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["itransaction.current.get",{"_index":4178,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["itself",{"_index":332,"title":{},"name":{},"text":{"5":{},"19":{},"23":{},"26":{},"27":{},"29":{},"32":{},"39":{},"40":{},"42":{},"43":{},"46":{},"49":{},"50":{},"52":{},"53":{},"56":{},"57":{},"59":{},"60":{},"61":{},"63":{},"70":{},"84":{},"90":{},"92":{},"93":{},"95":{},"98":{},"106":{},"107":{},"108":{},"110":{},"113":{},"116":{},"117":{},"119":{},"120":{},"123":{},"125":{},"127":{},"128":{},"129":{},"132":{},"138":{},"152":{},"158":{},"163":{},"166":{},"174":{},"175":{},"177":{},"178":{},"181":{},"184":{},"185":{},"187":{},"188":{},"191":{},"192":{},"195":{},"196":{},"197":{},"200":{}},"component":{}}],["itypevers",{"_index":2619,"title":{"64-5":{},"131-5":{},"199-5":{}},"name":{},"text":{"26":{},"64":{},"131":{},"199":{}},"component":{}}],["itypewithclassid",{"_index":2967,"title":{},"name":{},"text":{"28":{},"94":{},"162":{}},"component":{}}],["it’",{"_index":665,"title":{},"name":{},"text":{"18":{},"27":{},"43":{},"52":{},"53":{},"85":{},"110":{},"119":{},"120":{},"153":{},"178":{},"187":{},"188":{}},"component":{}}],["iuuid",{"_index":6307,"title":{},"name":{},"text":{"93":{}},"component":{}}],["ivalueformatconst",{"_index":5765,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["ivalueformatconstants.date_pattern",{"_index":5763,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["iwebservicecontext",{"_index":5575,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["iwebservicecontext.current.get().getmessagecontext",{"_index":5573,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["iwidgetpopup#getcont",{"_index":6156,"title":{},"name":{},"text":{"92":{}},"component":{}}],["iwidgetpopup#getwidget",{"_index":6155,"title":{},"name":{},"text":{"92":{}},"component":{}}],["iwidgetpopup#prop_cont",{"_index":6154,"title":{},"name":{},"text":{"92":{}},"component":{}}],["iwidgetpopup#prop_widget",{"_index":6153,"title":{},"name":{},"text":{"92":{}},"component":{}}],["jaa",{"_index":6005,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["jack@eclipse.org",{"_index":3478,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jackson",{"_index":2439,"title":{"26-29":{}},"name":{},"text":{"26":{},"37":{},"64":{},"66":{},"104":{},"131":{},"134":{},"169":{},"199":{},"202":{}},"component":{}}],["jacksondataobjectmapper#readvalueraw",{"_index":2766,"title":{},"name":{},"text":{"26":{}},"component":{}}],["jakarta",{"_index":2916,"title":{},"name":{},"text":{"27":{}},"component":{}}],["jan",{"_index":3034,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["jandex",{"_index":3725,"title":{},"name":{},"text":{"40":{},"61":{},"66":{},"107":{},"129":{},"134":{},"175":{},"197":{},"202":{}},"component":{}}],["jar",{"_index":3726,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["jasmin",{"_index":2587,"title":{"92-21":{}},"name":{},"text":{"26":{},"46":{},"92":{},"113":{},"181":{}},"component":{}}],["jasminescout",{"_index":4479,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["jasminescout.runtestsuite(context",{"_index":4483,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["java",{"_index":135,"title":{"5-1":{},"26-3":{},"26-9":{},"27-14":{},"29-3":{},"29-4":{},"29-5":{},"62-8":{},"70-1":{},"92-3":{},"95-3":{},"95-4":{},"95-5":{},"130-8":{},"138-1":{},"160-3":{},"163-3":{},"163-4":{},"163-5":{},"198-8":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"31":{},"32":{},"34":{},"38":{},"39":{},"40":{},"43":{},"46":{},"53":{},"57":{},"62":{},"63":{},"64":{},"66":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"76":{},"77":{},"78":{},"79":{},"82":{},"83":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"100":{},"101":{},"105":{},"106":{},"107":{},"110":{},"113":{},"120":{},"125":{},"130":{},"131":{},"132":{},"134":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"145":{},"146":{},"147":{},"150":{},"151":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"160":{},"163":{},"165":{},"166":{},"171":{},"172":{},"173":{},"174":{},"175":{},"178":{},"181":{},"188":{},"192":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["java.lang",{"_index":5345,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["java.lang.annotation.@inherit",{"_index":3740,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["java.lang.error",{"_index":3345,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["java.lang.interruptedexcept",{"_index":3370,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["java.lang.system.getenv(str",{"_index":3824,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["java.lang.system.getproperty(str",{"_index":3823,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["java.secur",{"_index":4265,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["java.security.permiss",{"_index":4266,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["java.security.permissioncollect",{"_index":4267,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["java.text.decimalformat",{"_index":6342,"title":{},"name":{},"text":{"93":{}},"component":{}}],["java.text.numberformat",{"_index":6341,"title":{},"name":{},"text":{"93":{}},"component":{}}],["java.util.calendar",{"_index":5377,"title":{"63-40":{},"132-40":{},"200-40":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["java.util.d",{"_index":5376,"title":{"63-40":{},"132-40":{},"200-40":{}},"name":{},"text":{"63":{},"64":{},"131":{},"132":{},"199":{},"200":{}},"component":{}}],["java.util.function.predicate.not(p",{"_index":2799,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.util.log",{"_index":3397,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["java.util.resourcebundl",{"_index":4979,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["java.util.stream",{"_index":2806,"title":{},"name":{},"text":{"26":{}},"component":{}}],["java.util.stream.stream.iterate(initialel",{"_index":2805,"title":{},"name":{},"text":{"26":{}},"component":{}}],["javadoc",{"_index":3548,"title":{},"name":{},"text":{"39":{},"40":{},"54":{},"63":{},"66":{},"92":{},"106":{},"107":{},"121":{},"132":{},"134":{},"174":{},"175":{},"189":{},"200":{},"202":{}},"component":{}}],["javascript",{"_index":151,"title":{"26-4":{},"26-11":{},"92-4":{},"92-9":{},"93-13":{},"93-14":{},"160-4":{}},"name":{},"text":{"3":{},"14":{},"17":{},"18":{},"21":{},"22":{},"24":{},"26":{},"29":{},"31":{},"32":{},"36":{},"43":{},"45":{},"46":{},"51":{},"55":{},"56":{},"59":{},"60":{},"69":{},"80":{},"83":{},"85":{},"87":{},"88":{},"89":{},"92":{},"93":{},"95":{},"97":{},"98":{},"103":{},"110":{},"112":{},"113":{},"118":{},"122":{},"123":{},"124":{},"127":{},"128":{},"137":{},"148":{},"151":{},"153":{},"155":{},"156":{},"157":{},"160":{},"163":{},"165":{},"166":{},"168":{},"178":{},"180":{},"181":{},"186":{},"190":{},"191":{},"193":{},"195":{},"196":{}},"component":{}}],["javascript/html/css",{"_index":2999,"title":{},"name":{},"text":{"32":{},"98":{},"166":{}},"component":{}}],["javax",{"_index":2919,"title":{},"name":{},"text":{"27":{}},"component":{}}],["javax.annotation.@postconstruct",{"_index":3752,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["javax.annotation.@predestroy",{"_index":3811,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["javax.annotation.resourc",{"_index":5550,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["javax.mail.internet.mimemessag",{"_index":4353,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["javax.mail.sess",{"_index":4355,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["javax.net.ssl.sslsocket.getsupportedprotocol",{"_index":4366,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["javax.servlet.servlet",{"_index":5429,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["javax.ws.rs.appl",{"_index":3292,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["javax.ws.rs.core.appl",{"_index":5996,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["javax.ws.rs.core.mediatyp",{"_index":3299,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["javax.ws.rs.get",{"_index":3296,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["javax.ws.rs.path",{"_index":3297,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["javax.ws.rs.produc",{"_index":3298,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["javax.xml.ws.handler.handl",{"_index":5500,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["javax.xml.ws.handler.messagecontext",{"_index":5562,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jax",{"_index":2487,"title":{"63":{},"132":{},"200":{},"63-2":{},"63-3":{},"63-4":{},"63-5":{},"63-6":{},"63-8":{},"63-9":{},"63-26":{},"63-28":{},"63-30":{},"63-38":{},"63-41":{},"132-2":{},"132-3":{},"132-4":{},"132-5":{},"132-6":{},"132-8":{},"132-9":{},"132-26":{},"132-28":{},"132-30":{},"132-38":{},"132-41":{},"200-2":{},"200-3":{},"200-4":{},"200-5":{},"200-6":{},"200-8":{},"200-9":{},"200-26":{},"200-28":{},"200-30":{},"200-38":{},"200-41":{}},"name":{"63":{},"132":{},"200":{}},"text":{"26":{},"37":{},"40":{},"63":{},"66":{},"92":{},"104":{},"107":{},"132":{},"134":{},"169":{},"175":{},"200":{},"202":{}},"component":{}}],["jax_w",{"_index":5411,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxb",{"_index":5462,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxb.episod",{"_index":5472,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxw",{"_index":4016,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["jaxws.wsdl.fil",{"_index":5443,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxws.xml",{"_index":5423,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwsannotationprocessor",{"_index":5372,"title":{"63-19":{},"132-19":{},"200-19":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwscxfspecif",{"_index":5406,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwsimplementorspecif",{"_index":5368,"title":{"63-7":{},"132-7":{},"200-7":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwsmetrospecif",{"_index":5405,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwspingconnecttimeoutproperty.class",{"_index":5593,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwspingendpointurlproperty.class",{"_index":5587,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwspingpasswordproperty.class",{"_index":5591,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwspingreadtimeoutproperty.class",{"_index":5595,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwspingusernameproperty.class",{"_index":5589,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jaxwsrispecif",{"_index":5404,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jdbc",{"_index":1197,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["jdbc:derbi",{"_index":1563,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["jdbc:derby:c:\\\\derby\\\\contact",{"_index":1565,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["jdbc:derby:memory:contact",{"_index":1562,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["jdbc:oracle:thin:@localhost:1521:orcl",{"_index":4102,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["jdbcmappingnameproperti",{"_index":1542,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["jdk",{"_index":2960,"title":{},"name":{},"text":{"28":{},"94":{},"162":{}},"component":{}}],["jdk.min.vers",{"_index":2479,"title":{},"name":{},"text":{"26":{}},"component":{}}],["jdk.source.vers",{"_index":2478,"title":{},"name":{},"text":{"26":{}},"component":{}}],["jenkin",{"_index":4489,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["jersey",{"_index":3280,"title":{},"name":{},"text":{"37":{},"66":{},"92":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["jetbrain",{"_index":990,"title":{},"name":{},"text":{"21":{},"24":{},"26":{},"30":{},"87":{},"89":{},"92":{},"96":{},"155":{},"157":{},"160":{},"164":{}},"component":{}}],["jetti",{"_index":471,"title":{},"name":{},"text":{"14":{},"29":{},"40":{},"46":{},"63":{},"80":{},"95":{},"107":{},"113":{},"132":{},"148":{},"163":{},"175":{},"181":{},"200":{}},"component":{}}],["jettyserv",{"_index":4514,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["jm",{"_index":4057,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["jndi",{"_index":4097,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["job",{"_index":2998,"title":{"39-2":{},"39-3":{},"39-14":{},"39-17":{},"39-18":{},"39-19":{},"39-25":{},"39-32":{},"39-34":{},"106-2":{},"106-3":{},"106-14":{},"106-17":{},"106-18":{},"106-19":{},"106-25":{},"106-32":{},"106-34":{},"174-2":{},"174-3":{},"174-14":{},"174-17":{},"174-18":{},"174-19":{},"174-25":{},"174-32":{},"174-34":{}},"name":{"39":{},"106":{},"174":{}},"text":{"32":{},"38":{},"39":{},"40":{},"44":{},"48":{},"58":{},"61":{},"98":{},"105":{},"106":{},"107":{},"109":{},"115":{},"126":{},"129":{},"166":{},"173":{},"174":{},"175":{},"179":{},"183":{},"194":{},"197":{}},"component":{}}],["job_execution_hint_ad",{"_index":3571,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["job_execution_hint_remov",{"_index":3572,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["job_manager_shutdown",{"_index":3573,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["job_state_chang",{"_index":3566,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobev",{"_index":3660,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobeventfilterbuild",{"_index":3551,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobinput",{"_index":3401,"title":{"39-4":{},"106-4":{},"174-4":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobinput.withexceptionhandl",{"_index":3407,"title":{"39-10":{},"106-10":{},"174-10":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobinput.withexecutionhint",{"_index":3406,"title":{"39-9":{},"106-9":{},"174-9":{}},"name":{},"text":{},"component":{}}],["jobinput.withexecutionsemaphor",{"_index":3405,"title":{"39-8":{},"106-8":{},"174-8":{}},"name":{},"text":{},"component":{}}],["jobinput.withexecutiontrigg",{"_index":3404,"title":{"39-7":{},"106-7":{},"174-7":{}},"name":{},"text":{},"component":{}}],["jobinput.withexpirationtim",{"_index":3409,"title":{"39-12":{},"106-12":{},"174-12":{}},"name":{},"text":{},"component":{}}],["jobinput.withnam",{"_index":3402,"title":{"39-5":{},"106-5":{},"174-5":{}},"name":{},"text":{},"component":{}}],["jobinput.withruncontext",{"_index":3403,"title":{"39-6":{},"106-6":{},"174-6":{}},"name":{},"text":{},"component":{}}],["jobinput.withthreadnam",{"_index":3408,"title":{"39-11":{},"106-11":{},"174-11":{}},"name":{},"text":{},"component":{}}],["jobmanag",{"_index":3417,"title":{"39":{},"106":{},"174":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobmanager.schedul",{"_index":3448,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.getjobmanager().addlistener(jobs.neweventfilterbuild",{"_index":3574,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.getjobmanager().awaitdone(jobs.newfuturefilterbuild",{"_index":3605,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.getjobmanager().awaitfinished(jobs.newfuturefilterbuild",{"_index":3608,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.getjobmanager().cancel(jobs.newfuturefilterbuild",{"_index":3559,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.newblockingcondition(tru",{"_index":3619,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.neweventfilterbuild",{"_index":3552,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.newexecutionsemaphore(5",{"_index":3513,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.newexecutiontrigg",{"_index":3487,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.newfuturefilterbuild",{"_index":3536,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobs.newinput",{"_index":3457,"title":{},"name":{},"text":{"39":{},"48":{},"106":{},"115":{},"174":{},"183":{}},"component":{}}],["jobs.schedul",{"_index":3456,"title":{},"name":{},"text":{"39":{},"48":{},"106":{},"115":{},"174":{},"183":{}},"component":{}}],["jobs.schedule(new",{"_index":3557,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobstat",{"_index":3568,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobstate.run",{"_index":3570,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["jobstate.schedul",{"_index":3569,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["job’",{"_index":3395,"title":{},"name":{},"text":{"38":{},"39":{},"42":{},"105":{},"106":{},"108":{},"173":{},"174":{},"177":{}},"component":{}}],["john",{"_index":4163,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["john@eclipse.org",{"_index":3477,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["join",{"_index":3535,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["joint",{"_index":2090,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["jointli",{"_index":2091,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["jooq",{"_index":1014,"title":{},"name":{},"text":{"21":{},"87":{},"155":{}},"component":{}}],["journey",{"_index":1175,"title":{},"name":{},"text":{"22":{},"24":{},"88":{},"89":{},"156":{},"157":{}},"component":{}}],["jpeg",{"_index":4769,"title":{},"name":{},"text":{"52":{},"60":{},"119":{},"128":{},"187":{},"196":{}},"component":{}}],["jqueri",{"_index":930,"title":{"92-19":{}},"name":{},"text":{"20":{},"26":{},"46":{},"59":{},"86":{},"92":{},"113":{},"127":{},"154":{},"160":{},"181":{},"195":{}},"component":{}}],["jquery.triggermousemov",{"_index":6189,"title":{},"name":{},"text":{"92":{}},"component":{}}],["jquery.triggerwithposit",{"_index":6190,"title":{},"name":{},"text":{"92":{}},"component":{}}],["jqueryextens",{"_index":6193,"title":{},"name":{},"text":{"92":{}},"component":{}}],["jre",{"_index":513,"title":{},"name":{},"text":{"16":{},"40":{},"63":{},"82":{},"107":{},"132":{},"150":{},"175":{},"200":{}},"component":{}}],["jre\\bin\\server\\jvm.dl",{"_index":2965,"title":{},"name":{},"text":{"28":{},"94":{},"162":{}},"component":{}}],["js",{"_index":40,"title":{"20":{},"21":{},"22":{},"86":{},"87":{},"88":{},"100":{},"154":{},"155":{},"156":{},"171":{},"26-27":{},"26-28":{},"27-24":{},"27-25":{},"32-2":{},"36-2":{},"36-3":{},"37-5":{},"48-1":{},"65-1":{},"92-11":{},"92-13":{},"92-14":{},"92-16":{},"92-23":{},"93-4":{},"98-2":{},"103-2":{},"103-3":{},"104-5":{},"115-1":{},"133-1":{},"166-2":{},"168-2":{},"168-3":{},"169-5":{},"183-1":{},"201-1":{}},"name":{"21":{},"22":{},"87":{},"88":{},"100":{},"155":{},"156":{},"171":{}},"text":{"1":{},"3":{},"14":{},"17":{},"18":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"31":{},"32":{},"37":{},"40":{},"46":{},"48":{},"51":{},"52":{},"56":{},"59":{},"60":{},"67":{},"69":{},"80":{},"83":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"100":{},"104":{},"107":{},"113":{},"118":{},"119":{},"123":{},"127":{},"128":{},"135":{},"137":{},"148":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"165":{},"166":{},"169":{},"171":{},"175":{},"181":{},"186":{},"187":{},"191":{},"195":{},"196":{}},"component":{}}],["jsdelivr",{"_index":692,"title":{},"name":{},"text":{"18":{},"20":{},"85":{},"86":{},"153":{},"154":{}},"component":{}}],["jsdoc",{"_index":6129,"title":{},"name":{},"text":{"92":{},"128":{},"196":{}},"component":{}}],["jsessionid",{"_index":4207,"title":{"43-5":{},"110-5":{},"178-5":{}},"name":{},"text":{},"component":{}}],["jsform",{"_index":6264,"title":{"93-24":{}},"name":{},"text":{"93":{},"100":{},"171":{}},"component":{}}],["json",{"_index":2442,"title":{"26-30":{},"60-4":{},"128-4":{},"196-4":{}},"name":{},"text":{"26":{},"37":{},"40":{},"59":{},"60":{},"64":{},"66":{},"104":{},"107":{},"127":{},"128":{},"131":{},"134":{},"169":{},"175":{},"195":{},"196":{},"199":{},"202":{}},"component":{}}],["jsondataobjectmarshal",{"_index":4070,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["jsonignor",{"_index":5768,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["jsoup",{"_index":4264,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["jsp",{"_index":4755,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["jsr",{"_index":5393,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["jswidget",{"_index":537,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["jul",{"_index":3039,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["jun",{"_index":3038,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["junit",{"_index":4488,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["junitreporter.outputdir=custom",{"_index":4536,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["justifi",{"_index":1336,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["jvm",{"_index":5648,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["karma",{"_index":2589,"title":{"46-8":{},"92-21":{},"113-8":{},"181-8":{}},"name":{},"text":{"26":{},"46":{},"92":{},"113":{},"181":{}},"component":{}}],["karma.conf.j",{"_index":4473,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["kb",{"_index":2877,"title":{},"name":{},"text":{"26":{}},"component":{}}],["keep",{"_index":1008,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"26":{},"36":{},"40":{},"56":{},"58":{},"60":{},"87":{},"89":{},"90":{},"103":{},"107":{},"123":{},"126":{},"128":{},"155":{},"157":{},"158":{},"168":{},"175":{},"191":{},"194":{},"196":{}},"component":{}}],["kept",{"_index":1192,"title":{},"name":{},"text":{"23":{},"29":{},"40":{},"61":{},"90":{},"95":{},"107":{},"129":{},"158":{},"163":{},"175":{},"197":{}},"component":{}}],["key",{"_index":188,"title":{"4-6":{},"29-29":{},"62-3":{},"71-6":{},"95-29":{},"130-3":{},"139-6":{},"163-29":{},"198-3":{}},"name":{},"text":{"4":{},"5":{},"10":{},"11":{},"22":{},"23":{},"26":{},"28":{},"29":{},"40":{},"43":{},"44":{},"47":{},"59":{},"62":{},"64":{},"65":{},"70":{},"71":{},"76":{},"77":{},"88":{},"90":{},"94":{},"95":{},"107":{},"109":{},"110":{},"114":{},"127":{},"130":{},"131":{},"133":{},"138":{},"139":{},"144":{},"145":{},"156":{},"158":{},"162":{},"163":{},"175":{},"178":{},"179":{},"182":{},"195":{},"198":{},"199":{},"201":{}},"component":{}}],["key/valu",{"_index":3841,"title":{},"name":{},"text":{"40":{},"66":{},"107":{},"134":{},"175":{},"202":{}},"component":{}}],["key1=val1;key2=val2",{"_index":4107,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["keyalg",{"_index":730,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["keyboard",{"_index":1158,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["keypair",{"_index":2510,"title":{},"name":{},"text":{"26":{}},"component":{}}],["keypass",{"_index":734,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["keystor",{"_index":717,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["keystorefil",{"_index":738,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["keystrok",{"_index":785,"title":{"26-39":{}},"name":{},"text":{"19":{},"20":{},"22":{},"26":{},"59":{},"84":{},"86":{},"88":{},"127":{},"152":{},"154":{},"156":{},"195":{}},"component":{}}],["keystroke.j",{"_index":2864,"title":{},"name":{},"text":{"26":{}},"component":{}}],["keystrokecontext",{"_index":5148,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["keytool",{"_index":723,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["keytool.ex",{"_index":728,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["keyword",{"_index":4609,"title":{},"name":{},"text":{"48":{},"56":{},"115":{},"123":{},"183":{},"191":{}},"component":{}}],["kind",{"_index":3814,"title":{},"name":{},"text":{"40":{},"49":{},"55":{},"59":{},"60":{},"64":{},"65":{},"93":{},"107":{},"116":{},"122":{},"127":{},"128":{},"131":{},"133":{},"175":{},"184":{},"190":{},"195":{},"196":{},"199":{},"201":{}},"component":{}}],["know",{"_index":796,"title":{},"name":{},"text":{"19":{},"20":{},"21":{},"22":{},"24":{},"43":{},"46":{},"53":{},"62":{},"63":{},"64":{},"84":{},"86":{},"87":{},"88":{},"89":{},"93":{},"110":{},"113":{},"120":{},"128":{},"130":{},"131":{},"132":{},"152":{},"154":{},"155":{},"156":{},"157":{},"178":{},"181":{},"188":{},"196":{},"198":{},"199":{},"200":{}},"component":{}}],["knowledg",{"_index":2,"title":{"1-2":{},"67-2":{},"135-2":{}},"name":{},"text":{"26":{}},"component":{}}],["known",{"_index":746,"title":{},"name":{},"text":{"19":{},"40":{},"51":{},"57":{},"63":{},"64":{},"84":{},"107":{},"118":{},"125":{},"131":{},"132":{},"152":{},"175":{},"186":{},"192":{},"199":{},"200":{}},"component":{}}],["label",{"_index":951,"title":{},"name":{},"text":{"20":{},"22":{},"23":{},"33":{},"35":{},"36":{},"43":{},"48":{},"53":{},"59":{},"60":{},"86":{},"88":{},"90":{},"93":{},"99":{},"102":{},"103":{},"110":{},"115":{},"120":{},"127":{},"128":{},"154":{},"156":{},"158":{},"167":{},"168":{},"170":{},"178":{},"183":{},"188":{},"195":{},"196":{}},"component":{}}],["label_position_on_field",{"_index":1996,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["labelfield",{"_index":4252,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["labelposit",{"_index":4835,"title":{},"name":{},"text":{"53":{},"60":{},"120":{},"128":{},"188":{},"196":{}},"component":{}}],["labelvis",{"_index":5233,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["lack",{"_index":4435,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["languag",{"_index":209,"title":{"9-1":{},"75-1":{},"143-1":{}},"name":{},"text":{"4":{},"6":{},"9":{},"11":{},"17":{},"18":{},"20":{},"21":{},"22":{},"24":{},"29":{},"51":{},"57":{},"62":{},"63":{},"66":{},"71":{},"72":{},"75":{},"77":{},"83":{},"85":{},"86":{},"87":{},"88":{},"89":{},"95":{},"118":{},"125":{},"130":{},"132":{},"134":{},"139":{},"140":{},"143":{},"145":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"163":{},"186":{},"192":{},"198":{},"200":{},"202":{}},"component":{}}],["languagelookupcal",{"_index":5948,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["languagelookupcall.class",{"_index":5973,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["laptop",{"_index":4890,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["lar",{"_index":851,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["larg",{"_index":3002,"title":{},"name":{},"text":{"32":{},"40":{},"48":{},"53":{},"59":{},"64":{},"65":{},"98":{},"107":{},"115":{},"120":{},"127":{},"131":{},"133":{},"166":{},"175":{},"183":{},"188":{},"195":{},"199":{},"201":{}},"component":{}}],["large_exampl",{"_index":1518,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["larger",{"_index":2708,"title":{},"name":{},"text":{"26":{},"46":{},"52":{},"93":{},"113":{},"119":{},"181":{},"187":{}},"component":{}}],["largest",{"_index":5106,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["last",{"_index":519,"title":{"63-35":{},"132-35":{},"200-35":{}},"name":{},"text":{"16":{},"19":{},"23":{},"29":{},"38":{},"39":{},"46":{},"48":{},"63":{},"82":{},"84":{},"90":{},"92":{},"95":{},"105":{},"106":{},"113":{},"115":{},"132":{},"150":{},"152":{},"158":{},"163":{},"173":{},"174":{},"181":{},"183":{},"200":{}},"component":{}}],["last_nam",{"_index":1589,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["lastbox",{"_index":4713,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["lastbox.class",{"_index":4716,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["lastnam",{"_index":4643,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["lastnamecolumn",{"_index":1408,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["lastnamefield",{"_index":1920,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["later",{"_index":426,"title":{},"name":{},"text":{"11":{},"23":{},"29":{},"52":{},"59":{},"63":{},"77":{},"90":{},"95":{},"119":{},"127":{},"132":{},"145":{},"158":{},"163":{},"187":{},"195":{},"200":{}},"component":{}}],["latest",{"_index":2424,"title":{"26-2":{},"92-2":{},"160-2":{}},"name":{},"text":{"26":{},"27":{},"46":{},"92":{},"93":{},"113":{},"161":{},"181":{}},"component":{}}],["latin",{"_index":2951,"title":{},"name":{},"text":{"27":{},"57":{},"125":{},"192":{}},"component":{}}],["latter",{"_index":3580,"title":{},"name":{},"text":{"39":{},"56":{},"63":{},"106":{},"123":{},"132":{},"174":{},"191":{},"200":{}},"component":{}}],["launch",{"_index":476,"title":{"26-12":{}},"name":{},"text":{"14":{},"16":{},"17":{},"21":{},"23":{},"24":{},"26":{},"28":{},"29":{},"80":{},"82":{},"83":{},"87":{},"89":{},"90":{},"94":{},"95":{},"148":{},"150":{},"151":{},"155":{},"157":{},"158":{},"162":{},"163":{}},"component":{}}],["launcher",{"_index":530,"title":{},"name":{},"text":{"16":{},"26":{},"82":{},"150":{}},"component":{}}],["lay",{"_index":5295,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["layer",{"_index":1495,"title":{"43-13":{},"110-13":{},"178-13":{}},"name":{},"text":{"23":{},"32":{},"43":{},"59":{},"63":{},"90":{},"98":{},"110":{},"127":{},"132":{},"158":{},"166":{},"178":{},"195":{},"200":{}},"component":{}}],["layout",{"_index":1065,"title":{"47-1":{},"114-1":{},"182-1":{}},"name":{},"text":{"22":{},"23":{},"47":{},"50":{},"53":{},"88":{},"90":{},"114":{},"117":{},"120":{},"156":{},"158":{},"182":{},"185":{},"188":{}},"component":{}}],["lazi",{"_index":2435,"title":{"26-27":{},"27-24":{}},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["lazili",{"_index":2955,"title":{},"name":{},"text":{"27":{}},"component":{}}],["ldap://somehost:389",{"_index":4112,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["lead",{"_index":438,"title":{},"name":{},"text":{"14":{},"16":{},"26":{},"29":{},"43":{},"80":{},"82":{},"95":{},"110":{},"148":{},"150":{},"163":{},"178":{}},"component":{}}],["leaf",{"_index":3813,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["learn",{"_index":36,"title":{"3-3":{},"69-3":{},"137-3":{}},"name":{},"text":{"1":{},"3":{},"16":{},"17":{},"18":{},"21":{},"22":{},"23":{},"30":{},"39":{},"40":{},"53":{},"60":{},"63":{},"67":{},"69":{},"82":{},"83":{},"85":{},"87":{},"88":{},"90":{},"93":{},"96":{},"106":{},"107":{},"113":{},"120":{},"124":{},"128":{},"132":{},"135":{},"137":{},"150":{},"151":{},"153":{},"155":{},"156":{},"158":{},"164":{},"174":{},"175":{},"181":{},"188":{},"193":{},"196":{},"200":{}},"component":{}}],["leav",{"_index":4474,"title":{},"name":{},"text":{"46":{},"62":{},"113":{},"130":{},"181":{},"198":{}},"component":{}}],["left",{"_index":30,"title":{},"name":{},"text":{"1":{},"16":{},"21":{},"23":{},"24":{},"26":{},"56":{},"67":{},"82":{},"87":{},"89":{},"90":{},"123":{},"135":{},"150":{},"155":{},"157":{},"158":{},"191":{}},"component":{}}],["left/right",{"_index":2650,"title":{},"name":{},"text":{"26":{}},"component":{}}],["legaci",{"_index":2492,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["legend",{"_index":3112,"title":{},"name":{},"text":{"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["length",{"_index":2063,"title":{},"name":{},"text":{"23":{},"60":{},"90":{},"128":{},"158":{},"196":{}},"component":{}}],["length(",{"_index":2791,"title":{},"name":{},"text":{"26":{}},"component":{}}],["less",{"_index":909,"title":{"26-20":{},"36-4":{},"56-1":{},"103-4":{},"123-1":{},"168-4":{},"191-1":{}},"name":{},"text":{"20":{},"22":{},"23":{},"26":{},"33":{},"34":{},"35":{},"36":{},"39":{},"43":{},"44":{},"46":{},"53":{},"56":{},"59":{},"86":{},"88":{},"90":{},"92":{},"99":{},"101":{},"102":{},"103":{},"106":{},"109":{},"110":{},"113":{},"120":{},"123":{},"127":{},"154":{},"156":{},"158":{},"167":{},"168":{},"170":{},"172":{},"174":{},"178":{},"179":{},"181":{},"188":{},"191":{},"195":{}},"component":{}}],["let",{"_index":642,"title":{},"name":{},"text":{"18":{},"23":{},"60":{},"85":{},"90":{},"128":{},"153":{},"158":{},"196":{}},"component":{}}],["let’",{"_index":925,"title":{},"name":{},"text":{"20":{},"22":{},"33":{},"35":{},"53":{},"56":{},"58":{},"60":{},"86":{},"88":{},"99":{},"102":{},"120":{},"123":{},"126":{},"128":{},"154":{},"156":{},"167":{},"170":{},"188":{},"191":{},"194":{},"196":{}},"component":{}}],["level",{"_index":540,"title":{},"name":{},"text":{"16":{},"22":{},"23":{},"29":{},"38":{},"39":{},"40":{},"43":{},"44":{},"60":{},"62":{},"63":{},"64":{},"66":{},"82":{},"88":{},"90":{},"92":{},"95":{},"105":{},"106":{},"107":{},"109":{},"110":{},"128":{},"130":{},"131":{},"132":{},"134":{},"150":{},"156":{},"158":{},"163":{},"173":{},"174":{},"175":{},"178":{},"179":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["level_al",{"_index":4295,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["level_non",{"_index":4292,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["level_own",{"_index":4294,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["lf",{"_index":4551,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["li",{"_index":2332,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["librari",{"_index":2426,"title":{"26-10":{},"26-11":{},"92-9":{},"93-15":{},"113-18":{},"113-19":{},"181-18":{},"181-19":{}},"name":{},"text":{"26":{},"32":{},"43":{},"48":{},"52":{},"64":{},"66":{},"93":{},"98":{},"110":{},"113":{},"115":{},"119":{},"124":{},"131":{},"134":{},"166":{},"178":{},"181":{},"183":{},"187":{},"193":{},"199":{},"202":{}},"component":{}}],["library.j",{"_index":6380,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["library/index.t",{"_index":6389,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["libraryconfig",{"_index":6373,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["licenc",{"_index":992,"title":{},"name":{},"text":{"21":{},"24":{},"87":{},"89":{},"155":{},"157":{}},"component":{}}],["licens",{"_index":618,"title":{"93-3":{}},"name":{},"text":{"17":{},"24":{},"83":{},"89":{},"93":{},"151":{},"157":{}},"component":{}}],["life",{"_index":670,"title":{},"name":{},"text":{"18":{},"23":{},"27":{},"40":{},"46":{},"85":{},"90":{},"107":{},"113":{},"153":{},"158":{},"175":{},"181":{}},"component":{}}],["lifecycl",{"_index":3411,"title":{"39-18":{},"40-1":{},"50-1":{},"60-1":{},"106-18":{},"107-1":{},"117-1":{},"128-1":{},"174-18":{},"175-1":{},"185-1":{},"196-1":{}},"name":{},"text":{"39":{},"40":{},"47":{},"50":{},"60":{},"100":{},"106":{},"107":{},"114":{},"117":{},"128":{},"171":{},"174":{},"175":{},"182":{},"185":{},"196":{}},"component":{}}],["lifetim",{"_index":4090,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["light",{"_index":2706,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["lightbulb_off",{"_index":2699,"title":{},"name":{},"text":{"26":{}},"component":{}}],["lightbulb_on",{"_index":2701,"title":{},"name":{},"text":{"26":{}},"component":{}}],["lightslategrey",{"_index":3129,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["limit",{"_index":2875,"title":{},"name":{},"text":{"26":{},"39":{},"40":{},"44":{},"45":{},"53":{},"92":{},"93":{},"106":{},"107":{},"109":{},"112":{},"120":{},"174":{},"175":{},"179":{},"180":{},"188":{}},"component":{}}],["line",{"_index":287,"title":{"26-24":{},"46-10":{},"113-10":{},"181-10":{}},"name":{},"text":{"4":{},"17":{},"19":{},"21":{},"23":{},"24":{},"26":{},"29":{},"40":{},"46":{},"52":{},"56":{},"59":{},"63":{},"66":{},"71":{},"83":{},"84":{},"87":{},"89":{},"90":{},"92":{},"95":{},"107":{},"113":{},"119":{},"123":{},"127":{},"132":{},"134":{},"139":{},"151":{},"152":{},"155":{},"157":{},"158":{},"163":{},"175":{},"181":{},"187":{},"191":{},"195":{},"200":{},"202":{}},"component":{}}],["linebreak",{"_index":4550,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["link",{"_index":96,"title":{"23-14":{},"23-41":{},"23-44":{},"90-14":{},"90-41":{},"90-44":{},"158-14":{},"158-41":{},"158-44":{}},"name":{},"text":{"1":{},"3":{},"20":{},"23":{},"26":{},"27":{},"37":{},"40":{},"42":{},"43":{},"46":{},"48":{},"51":{},"56":{},"60":{},"67":{},"69":{},"86":{},"90":{},"104":{},"107":{},"108":{},"110":{},"113":{},"115":{},"118":{},"123":{},"128":{},"135":{},"137":{},"154":{},"158":{},"169":{},"175":{},"177":{},"178":{},"181":{},"183":{},"186":{},"191":{},"196":{}},"component":{}}],["linkag",{"_index":5292,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["lint",{"_index":6294,"title":{},"name":{},"text":{"93":{},"124":{},"193":{}},"component":{}}],["linter",{"_index":4547,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["linux",{"_index":847,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["list",{"_index":271,"title":{"43-15":{},"110-15":{},"178-15":{}},"name":{},"text":{"4":{},"5":{},"16":{},"19":{},"20":{},"22":{},"23":{},"26":{},"27":{},"29":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"46":{},"48":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"71":{},"82":{},"84":{},"86":{},"88":{},"90":{},"92":{},"93":{},"95":{},"99":{},"100":{},"101":{},"102":{},"103":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"112":{},"113":{},"115":{},"118":{},"119":{},"120":{},"122":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"138":{},"139":{},"150":{},"152":{},"154":{},"156":{},"158":{},"163":{},"167":{},"168":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"180":{},"181":{},"183":{},"186":{},"187":{},"188":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["list_ol_bold",{"_index":2666,"title":{},"name":{},"text":{"26":{}},"component":{}}],["list_ul_bold",{"_index":2664,"title":{},"name":{},"text":{"26":{}},"component":{}}],["listattribut",{"_index":5806,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["listattribute().get",{"_index":5814,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["listattribute().updateall(listattribut",{"_index":5811,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["listbox",{"_index":5343,"title":{},"name":{},"text":{"62":{},"65":{},"130":{},"133":{},"198":{},"201":{}},"component":{}}],["listen",{"_index":2580,"title":{"40-2":{},"107-2":{},"175-2":{}},"name":{},"text":{"26":{},"27":{},"39":{},"40":{},"44":{},"53":{},"60":{},"61":{},"106":{},"107":{},"109":{},"120":{},"128":{},"129":{},"174":{},"175":{},"179":{},"188":{},"196":{},"197":{}},"component":{}}],["liter",{"_index":6145,"title":{},"name":{},"text":{"92":{},"93":{}},"component":{}}],["littl",{"_index":1062,"title":{},"name":{},"text":{"22":{},"26":{},"39":{},"53":{},"63":{},"88":{},"92":{},"106":{},"120":{},"132":{},"156":{},"174":{},"188":{},"200":{}},"component":{}}],["live",{"_index":918,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["load",{"_index":816,"title":{"27-24":{}},"name":{},"text":{"19":{},"21":{},"23":{},"27":{},"39":{},"40":{},"43":{},"46":{},"48":{},"50":{},"51":{},"56":{},"60":{},"62":{},"63":{},"65":{},"66":{},"84":{},"87":{},"90":{},"106":{},"107":{},"110":{},"113":{},"115":{},"117":{},"118":{},"123":{},"128":{},"130":{},"132":{},"133":{},"134":{},"152":{},"155":{},"158":{},"174":{},"175":{},"178":{},"181":{},"183":{},"185":{},"186":{},"191":{},"196":{},"198":{},"200":{},"201":{},"202":{}},"component":{}}],["load(organizationformdata",{"_index":2318,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["load(personformdata",{"_index":2050,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["loadcod",{"_index":5363,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["loader",{"_index":4467,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["loadwebresourcesfromfilesystemconfigproperti",{"_index":4545,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["local",{"_index":407,"title":{"46-15":{},"57-3":{},"65-6":{},"113-15":{},"125-3":{},"133-6":{},"181-15":{},"192-3":{},"201-6":{}},"name":{},"text":{"9":{},"11":{},"17":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"39":{},"40":{},"41":{},"44":{},"46":{},"51":{},"57":{},"58":{},"63":{},"65":{},"66":{},"75":{},"77":{},"83":{},"86":{},"87":{},"88":{},"89":{},"90":{},"106":{},"107":{},"109":{},"111":{},"113":{},"118":{},"125":{},"126":{},"132":{},"133":{},"134":{},"143":{},"145":{},"151":{},"154":{},"155":{},"156":{},"157":{},"158":{},"174":{},"175":{},"176":{},"179":{},"181":{},"186":{},"192":{},"194":{},"200":{},"201":{},"202":{}},"component":{}}],["locale.getisocountri",{"_index":1359,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["locale.u",{"_index":4161,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["locales.json",{"_index":976,"title":{},"name":{},"text":{"20":{},"22":{},"40":{},"86":{},"88":{},"107":{},"154":{},"156":{},"175":{}},"component":{}}],["localesurl",{"_index":968,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["localhost",{"_index":716,"title":{},"name":{},"text":{"19":{},"44":{},"84":{},"109":{},"152":{},"179":{}},"component":{}}],["locallookupcal",{"_index":1351,"title":{},"name":{},"text":{"23":{},"65":{},"90":{},"133":{},"158":{},"201":{}},"component":{}}],["locat",{"_index":333,"title":{},"name":{},"text":{"5":{},"9":{},"14":{},"16":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"52":{},"57":{},"59":{},"63":{},"70":{},"75":{},"80":{},"82":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"94":{},"95":{},"119":{},"125":{},"127":{},"132":{},"138":{},"143":{},"148":{},"150":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"187":{},"192":{},"195":{},"200":{}},"component":{}}],["locationbox",{"_index":1983,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["lock.json",{"_index":1059,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["lockfile=tru",{"_index":2605,"title":{},"name":{},"text":{"26":{}},"component":{}}],["log",{"_index":800,"title":{"26-35":{},"38-19":{},"105-19":{},"173-19":{}},"name":{},"text":{"19":{},"22":{},"23":{},"26":{},"27":{},"38":{},"39":{},"40":{},"43":{},"63":{},"84":{},"88":{},"90":{},"92":{},"93":{},"105":{},"106":{},"107":{},"110":{},"132":{},"152":{},"156":{},"158":{},"161":{},"173":{},"174":{},"175":{},"178":{},"200":{}},"component":{}}],["log.info(\"databas",{"_index":1623,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["log4j",{"_index":2429,"title":{"26-14":{},"27-18":{}},"name":{},"text":{"27":{}},"component":{}}],["logback",{"_index":1639,"title":{},"name":{},"text":{"23":{},"38":{},"90":{},"105":{},"158":{},"173":{}},"component":{}}],["logback.xml",{"_index":1648,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["logfil",{"_index":866,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["logger",{"_index":1609,"title":{},"name":{},"text":{"23":{},"26":{},"38":{},"90":{},"105":{},"158":{},"173":{}},"component":{}}],["logger.error(\"fail",{"_index":3399,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["loggerfactori",{"_index":1640,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["loggerfactory.getlogger(databasesetupservice.class",{"_index":1610,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["loggerfactory.getlogger(getclass",{"_index":3398,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["loghandl",{"_index":5534,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["logic",{"_index":772,"title":{},"name":{},"text":{"19":{},"23":{},"26":{},"27":{},"32":{},"34":{},"38":{},"39":{},"40":{},"48":{},"50":{},"53":{},"54":{},"56":{},"60":{},"63":{},"64":{},"84":{},"90":{},"98":{},"100":{},"101":{},"105":{},"106":{},"107":{},"115":{},"117":{},"120":{},"121":{},"123":{},"128":{},"131":{},"132":{},"152":{},"158":{},"160":{},"166":{},"171":{},"172":{},"173":{},"174":{},"175":{},"183":{},"185":{},"188":{},"189":{},"191":{},"196":{},"199":{},"200":{}},"component":{}}],["logicalgrid",{"_index":6135,"title":{},"name":{},"text":{"92":{}},"component":{}}],["logicalgridlayoutconfig",{"_index":4876,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["login",{"_index":792,"title":{},"name":{},"text":{"19":{},"40":{},"51":{},"56":{},"84":{},"107":{},"118":{},"123":{},"152":{},"175":{},"186":{},"191":{}},"component":{}}],["login.html",{"_index":4756,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["logo",{"_index":2116,"title":{"26-18":{}},"name":{},"text":{"23":{},"26":{},"90":{},"158":{}},"component":{}}],["logo_url",{"_index":1579,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["logout",{"_index":4969,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["long",{"_index":1353,"title":{},"name":{},"text":{"23":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"61":{},"64":{},"65":{},"90":{},"93":{},"105":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"129":{},"131":{},"133":{},"158":{},"173":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"197":{},"199":{},"201":{}},"component":{}}],["longer",{"_index":751,"title":{},"name":{},"text":{"19":{},"23":{},"26":{},"27":{},"29":{},"39":{},"40":{},"48":{},"61":{},"63":{},"64":{},"66":{},"84":{},"90":{},"95":{},"106":{},"107":{},"115":{},"129":{},"131":{},"132":{},"134":{},"152":{},"158":{},"160":{},"163":{},"174":{},"175":{},"183":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["longrunningoper",{"_index":3616,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["look",{"_index":60,"title":{"53-11":{},"120-11":{},"188-11":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"32":{},"33":{},"35":{},"39":{},"40":{},"44":{},"46":{},"48":{},"52":{},"53":{},"55":{},"56":{},"58":{},"59":{},"60":{},"63":{},"64":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"93":{},"98":{},"99":{},"102":{},"106":{},"107":{},"109":{},"113":{},"115":{},"119":{},"120":{},"122":{},"123":{},"126":{},"127":{},"128":{},"131":{},"132":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"161":{},"166":{},"167":{},"170":{},"174":{},"175":{},"179":{},"181":{},"183":{},"187":{},"188":{},"190":{},"191":{},"194":{},"195":{},"196":{},"199":{},"200":{}},"component":{}}],["lookup",{"_index":359,"title":{"34":{},"65":{},"101":{},"133":{},"172":{},"201":{},"23-11":{},"23-42":{},"23-43":{},"65-4":{},"65-5":{},"65-6":{},"90-11":{},"90-42":{},"90-43":{},"133-4":{},"133-5":{},"133-6":{},"158-11":{},"158-42":{},"158-43":{},"201-4":{},"201-5":{},"201-6":{}},"name":{"65":{},"133":{},"201":{}},"text":{"6":{},"10":{},"23":{},"27":{},"34":{},"40":{},"57":{},"59":{},"60":{},"65":{},"66":{},"72":{},"76":{},"90":{},"101":{},"107":{},"125":{},"127":{},"128":{},"133":{},"134":{},"140":{},"144":{},"158":{},"172":{},"175":{},"192":{},"195":{},"196":{},"201":{},"202":{}},"component":{}}],["lookupbyall|text|key|rec",{"_index":5065,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["lookupcal",{"_index":358,"title":{"10-1":{},"27-20":{},"76-1":{},"144-1":{}},"name":{},"text":{"6":{},"10":{},"23":{},"28":{},"59":{},"62":{},"65":{},"72":{},"76":{},"90":{},"92":{},"94":{},"127":{},"130":{},"133":{},"140":{},"144":{},"158":{},"162":{},"195":{},"198":{},"201":{}},"component":{}}],["lookupcall(.j",{"_index":5933,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["lookuprow",{"_index":3145,"title":{},"name":{},"text":{"34":{},"59":{},"62":{},"65":{},"101":{},"127":{},"130":{},"133":{},"172":{},"195":{},"198":{},"201":{}},"component":{}}],["lookuprow.getbackgroundcolor",{"_index":3148,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["lookuprow<>(countrycod",{"_index":1361,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["lookupruncontext",{"_index":5683,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["lookupruncontext().call(new",{"_index":5678,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["loos",{"_index":4917,"title":{},"name":{},"text":{"55":{},"63":{},"132":{},"200":{}},"component":{}}],["lorem",{"_index":5727,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["lorem.exampleent",{"_index":5725,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["lorem_1_0_0",{"_index":5747,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["lorem_1_2_0",{"_index":5748,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["loremnamespac",{"_index":5742,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["loremtypevers",{"_index":5746,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["lose",{"_index":5654,"title":{},"name":{},"text":{"63":{},"122":{},"132":{},"190":{},"200":{}},"component":{}}],["lost",{"_index":5653,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["lot",{"_index":533,"title":{},"name":{},"text":{"16":{},"23":{},"26":{},"32":{},"44":{},"46":{},"48":{},"52":{},"56":{},"58":{},"60":{},"61":{},"62":{},"63":{},"82":{},"90":{},"92":{},"93":{},"98":{},"109":{},"113":{},"115":{},"119":{},"123":{},"126":{},"128":{},"129":{},"130":{},"132":{},"150":{},"158":{},"166":{},"179":{},"181":{},"183":{},"187":{},"191":{},"194":{},"196":{},"197":{},"198":{},"200":{}},"component":{}}],["low",{"_index":1400,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["lower",{"_index":1694,"title":{},"name":{},"text":{"23":{},"26":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["lower('%",{"_index":2386,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["lower(organization_id",{"_index":2385,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["lowercasefirstlett",{"_index":2779,"title":{},"name":{},"text":{"26":{}},"component":{}}],["lowest",{"_index":3777,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["m",{"_index":1861,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["m2e",{"_index":521,"title":{},"name":{},"text":{"16":{},"63":{},"82":{},"132":{},"150":{},"200":{}},"component":{}}],["m_companyid",{"_index":4304,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["m_companyid.equals(other.m_companyid",{"_index":4327,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["m_companyid.hashcod",{"_index":4321,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["m_initparam",{"_index":5553,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["m_initparams.get(\"rangefrom",{"_index":5556,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["m_initparams.get(\"rangeto",{"_index":5557,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["m_inner",{"_index":3797,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["m_inner.invoke(context",{"_index":3807,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["m_stringvalu",{"_index":5905,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["m_validityfrom",{"_index":5950,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["m_validityto",{"_index":5951,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["m_webservicecontext",{"_index":5676,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["machin",{"_index":597,"title":{"46-15":{},"113-15":{},"181-15":{}},"name":{},"text":{"17":{},"19":{},"21":{},"24":{},"40":{},"63":{},"83":{},"84":{},"87":{},"89":{},"107":{},"132":{},"151":{},"152":{},"155":{},"157":{},"175":{},"200":{}},"component":{}}],["maco",{"_index":895,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["made",{"_index":145,"title":{},"name":{},"text":{"3":{},"18":{},"26":{},"31":{},"44":{},"50":{},"69":{},"85":{},"97":{},"109":{},"117":{},"137":{},"153":{},"165":{},"179":{},"185":{}},"component":{}}],["mail",{"_index":1950,"title":{},"name":{},"text":{"23":{},"43":{},"44":{},"90":{},"109":{},"110":{},"158":{},"178":{},"179":{}},"component":{}}],["mail.smtp.socketfactory.class",{"_index":4371,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["mailattach",{"_index":4404,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["mailattachment(screenshotresourc",{"_index":4406,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["mailer",{"_index":4376,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["mailmessag",{"_index":4407,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["main",{"_index":862,"title":{},"name":{},"text":{"19":{},"20":{},"22":{},"23":{},"46":{},"50":{},"51":{},"53":{},"59":{},"60":{},"63":{},"84":{},"86":{},"88":{},"90":{},"93":{},"113":{},"117":{},"118":{},"120":{},"127":{},"128":{},"132":{},"152":{},"154":{},"156":{},"158":{},"181":{},"185":{},"186":{},"188":{},"195":{},"196":{},"200":{}},"component":{}}],["main.less",{"_index":4930,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["mainbox",{"_index":1740,"title":{},"name":{},"text":{"23":{},"48":{},"60":{},"90":{},"115":{},"128":{},"158":{},"183":{},"196":{}},"component":{}}],["mainli",{"_index":4188,"title":{},"name":{},"text":{"41":{},"46":{},"48":{},"49":{},"50":{},"52":{},"63":{},"111":{},"113":{},"115":{},"116":{},"117":{},"119":{},"132":{},"176":{},"181":{},"183":{},"184":{},"185":{},"187":{},"200":{}},"component":{}}],["maintain",{"_index":2061,"title":{},"name":{},"text":{"23":{},"52":{},"90":{},"119":{},"158":{},"187":{}},"component":{}}],["mainten",{"_index":1566,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["maintenc",{"_index":4812,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["major",{"_index":85,"title":{},"name":{},"text":{"1":{},"22":{},"67":{},"88":{},"93":{},"124":{},"135":{},"156":{},"193":{}},"component":{}}],["make",{"_index":420,"title":{},"name":{},"text":{"11":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"32":{},"33":{},"35":{},"36":{},"40":{},"43":{},"45":{},"46":{},"48":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"77":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"98":{},"99":{},"102":{},"103":{},"107":{},"110":{},"112":{},"113":{},"115":{},"117":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"126":{},"128":{},"129":{},"132":{},"133":{},"134":{},"145":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"164":{},"166":{},"167":{},"168":{},"170":{},"175":{},"178":{},"180":{},"181":{},"183":{},"185":{},"187":{},"188":{},"189":{},"190":{},"191":{},"193":{},"194":{},"196":{},"197":{},"200":{},"201":{},"202":{}},"component":{}}],["male",{"_index":1838,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["malecod",{"_index":1859,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["malici",{"_index":2817,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{}}],["malwar",{"_index":4041,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["manag",{"_index":139,"title":{"19-9":{},"39-34":{},"40-5":{},"40-18":{},"46-1":{},"66-8":{},"84-9":{},"106-34":{},"107-5":{},"107-18":{},"113-1":{},"134-8":{},"152-9":{},"174-34":{},"175-5":{},"175-18":{},"181-1":{},"202-8":{}},"name":{"39":{},"106":{},"174":{}},"text":{"3":{},"17":{},"19":{},"20":{},"21":{},"23":{},"24":{},"26":{},"29":{},"31":{},"38":{},"39":{},"40":{},"43":{},"46":{},"50":{},"53":{},"57":{},"59":{},"62":{},"63":{},"66":{},"69":{},"83":{},"84":{},"86":{},"87":{},"89":{},"90":{},"92":{},"95":{},"97":{},"105":{},"106":{},"107":{},"110":{},"113":{},"117":{},"120":{},"125":{},"127":{},"130":{},"132":{},"134":{},"137":{},"151":{},"152":{},"154":{},"155":{},"157":{},"158":{},"160":{},"163":{},"165":{},"173":{},"174":{},"175":{},"178":{},"181":{},"185":{},"188":{},"192":{},"195":{},"198":{},"200":{},"202":{}},"component":{}}],["mandatori",{"_index":2103,"title":{},"name":{},"text":{"23":{},"36":{},"39":{},"50":{},"59":{},"63":{},"64":{},"90":{},"103":{},"106":{},"117":{},"127":{},"131":{},"132":{},"158":{},"168":{},"174":{},"185":{},"195":{},"199":{},"200":{}},"component":{}}],["manger",{"_index":3741,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["mani",{"_index":159,"title":{},"name":{},"text":{"3":{},"19":{},"23":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"40":{},"46":{},"53":{},"54":{},"56":{},"59":{},"69":{},"84":{},"90":{},"93":{},"94":{},"95":{},"97":{},"98":{},"107":{},"113":{},"120":{},"121":{},"123":{},"124":{},"127":{},"137":{},"152":{},"158":{},"162":{},"163":{},"165":{},"166":{},"175":{},"181":{},"188":{},"189":{},"191":{},"193":{},"195":{}},"component":{}}],["manner",{"_index":3506,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["manual",{"_index":368,"title":{"43-14":{},"110-14":{},"178-14":{}},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"20":{},"23":{},"24":{},"26":{},"29":{},"41":{},"43":{},"46":{},"48":{},"60":{},"63":{},"73":{},"74":{},"76":{},"78":{},"79":{},"86":{},"89":{},"90":{},"92":{},"93":{},"95":{},"110":{},"111":{},"113":{},"115":{},"124":{},"128":{},"132":{},"141":{},"142":{},"144":{},"146":{},"147":{},"154":{},"157":{},"158":{},"163":{},"176":{},"178":{},"181":{},"183":{},"193":{},"196":{},"200":{}},"component":{}}],["map",{"_index":184,"title":{"4-5":{},"29-28":{},"64-19":{},"71-5":{},"95-28":{},"128-6":{},"128-11":{},"131-19":{},"139-5":{},"163-28":{},"196-6":{},"196-11":{},"199-19":{}},"name":{},"text":{"4":{},"23":{},"26":{},"29":{},"37":{},"38":{},"40":{},"46":{},"52":{},"59":{},"63":{},"64":{},"66":{},"71":{},"90":{},"93":{},"95":{},"104":{},"105":{},"107":{},"113":{},"119":{},"127":{},"128":{},"131":{},"132":{},"134":{},"139":{},"158":{},"163":{},"169":{},"173":{},"175":{},"181":{},"187":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["mapattribute1",{"_index":5861,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mapattribute2",{"_index":5863,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mapent",{"_index":5865,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mapentity.al",{"_index":5873,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mapentity.get(\"mapattribute1",{"_index":5871,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mapentity.put(\"mapattribute1",{"_index":5867,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mapentity.put(\"mapattribute2",{"_index":5868,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mapper",{"_index":5875,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mapper.readvalue(json",{"_index":5876,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mappingnam",{"_index":1554,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["mar",{"_index":3036,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["margin",{"_index":2649,"title":{},"name":{},"text":{"26":{}},"component":{}}],["marhal",{"_index":5730,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mark",{"_index":1435,"title":{},"name":{},"text":{"23":{},"27":{},"39":{},"40":{},"48":{},"50":{},"58":{},"90":{},"106":{},"107":{},"115":{},"117":{},"126":{},"158":{},"174":{},"175":{},"183":{},"185":{},"194":{}},"component":{}}],["marker",{"_index":2909,"title":{},"name":{},"text":{"27":{},"39":{},"48":{},"66":{},"106":{},"115":{},"134":{},"174":{},"183":{},"202":{}},"component":{}}],["marketplac",{"_index":1005,"title":{},"name":{},"text":{"21":{},"24":{},"30":{},"87":{},"89":{},"96":{},"155":{},"157":{},"164":{}},"component":{}}],["markup",{"_index":1114,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["marshal",{"_index":4068,"title":{"64-2":{},"66-6":{},"131-2":{},"134-6":{},"199-2":{},"202-6":{}},"name":{},"text":{"40":{},"64":{},"66":{},"107":{},"131":{},"134":{},"175":{},"199":{},"202":{}},"component":{}}],["master",{"_index":1898,"title":{},"name":{},"text":{"23":{},"26":{},"63":{},"65":{},"90":{},"92":{},"132":{},"133":{},"158":{},"200":{},"201":{}},"component":{}}],["masterrequir",{"_index":5972,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["match",{"_index":289,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"23":{},"26":{},"28":{},"29":{},"39":{},"40":{},"51":{},"64":{},"65":{},"71":{},"74":{},"76":{},"78":{},"90":{},"94":{},"95":{},"106":{},"107":{},"118":{},"131":{},"133":{},"139":{},"142":{},"144":{},"146":{},"158":{},"162":{},"163":{},"174":{},"175":{},"186":{},"199":{},"201":{}},"component":{}}],["materi",{"_index":534,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["matter",{"_index":648,"title":{},"name":{},"text":{"18":{},"85":{},"153":{}},"component":{}}],["matur",{"_index":83,"title":{},"name":{},"text":{"1":{},"67":{},"135":{}},"component":{}}],["maven",{"_index":374,"title":{"37-1":{},"63-8":{},"64-22":{},"104-1":{},"131-22":{},"132-8":{},"169-1":{},"199-22":{},"200-8":{}},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"33":{},"35":{},"40":{},"46":{},"63":{},"64":{},"66":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"83":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"92":{},"95":{},"99":{},"102":{},"107":{},"113":{},"131":{},"132":{},"134":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"151":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"160":{},"163":{},"167":{},"170":{},"175":{},"181":{},"199":{},"200":{},"202":{}},"component":{}}],["maven.compiler.releas",{"_index":2482,"title":{},"name":{},"text":{"26":{}},"component":{}}],["maven.compiler.sourc",{"_index":2480,"title":{},"name":{},"text":{"26":{}},"component":{}}],["maven.compiler.target",{"_index":2481,"title":{},"name":{},"text":{"26":{}},"component":{}}],["maven/web",{"_index":155,"title":{},"name":{},"text":{"3":{},"31":{},"69":{},"97":{},"137":{},"165":{}},"component":{}}],["maven2",{"_index":2484,"title":{},"name":{},"text":{"26":{}},"component":{}}],["maven3",{"_index":2485,"title":{},"name":{},"text":{"26":{}},"component":{}}],["maven_rt_plugin_config",{"_index":2476,"title":{},"name":{},"text":{"26":{},"63":{},"92":{},"132":{},"200":{}},"component":{}}],["max",{"_index":3431,"title":{},"name":{},"text":{"39":{},"40":{},"44":{},"59":{},"60":{},"106":{},"107":{},"109":{},"127":{},"128":{},"174":{},"175":{},"179":{},"195":{},"196":{}},"component":{}}],["maxim",{"_index":3374,"title":{},"name":{},"text":{"38":{},"39":{},"40":{},"105":{},"106":{},"107":{},"173":{},"174":{},"175":{}},"component":{}}],["maximum",{"_index":2873,"title":{},"name":{},"text":{"26":{},"40":{},"44":{},"63":{},"107":{},"109":{},"132":{},"175":{},"179":{},"200":{}},"component":{}}],["maxmessagesperconnect",{"_index":4375,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["maxseg",{"_index":3091,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["mayb",{"_index":659,"title":{},"name":{},"text":{"18":{},"53":{},"60":{},"85":{},"120":{},"128":{},"153":{},"188":{},"196":{}},"component":{}}],["mb",{"_index":2874,"title":{},"name":{},"text":{"26":{}},"component":{}}],["mdc",{"_index":2822,"title":{},"name":{},"text":{"26":{},"38":{},"105":{},"173":{}},"component":{}}],["mean",{"_index":1086,"title":{},"name":{},"text":{"22":{},"26":{},"32":{},"34":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"46":{},"48":{},"51":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"88":{},"93":{},"98":{},"101":{},"105":{},"106":{},"107":{},"108":{},"109":{},"111":{},"113":{},"115":{},"118":{},"120":{},"121":{},"122":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"132":{},"133":{},"134":{},"156":{},"166":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"179":{},"181":{},"183":{},"186":{},"188":{},"189":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"200":{},"201":{},"202":{}},"component":{}}],["meaning",{"_index":4505,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["meantim",{"_index":5984,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["measur",{"_index":3789,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["mechan",{"_index":325,"title":{},"name":{},"text":{"5":{},"23":{},"29":{},"39":{},"40":{},"48":{},"57":{},"61":{},"62":{},"63":{},"64":{},"70":{},"90":{},"93":{},"95":{},"106":{},"107":{},"115":{},"125":{},"129":{},"130":{},"131":{},"132":{},"138":{},"158":{},"163":{},"174":{},"175":{},"183":{},"192":{},"197":{},"198":{},"199":{},"200":{}},"component":{}}],["media",{"_index":3284,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["mediatype.text_plain_type.equals(r.getmediatyp",{"_index":6051,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["medium",{"_index":3918,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["member",{"_index":2150,"title":{"65-3":{},"133-3":{},"201-3":{}},"name":{},"text":{"23":{},"40":{},"46":{},"63":{},"90":{},"93":{},"107":{},"128":{},"132":{},"158":{},"175":{},"196":{},"200":{}},"component":{}}],["memori",{"_index":1399,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"93":{},"107":{},"113":{},"158":{},"175":{},"181":{}},"component":{}}],["mention",{"_index":2005,"title":{},"name":{},"text":{"23":{},"26":{},"34":{},"40":{},"44":{},"60":{},"90":{},"92":{},"93":{},"101":{},"107":{},"109":{},"128":{},"158":{},"172":{},"175":{},"179":{},"196":{}},"component":{}}],["menu",{"_index":202,"title":{"27-9":{},"27-10":{},"27-23":{},"93-12":{}},"name":{},"text":{"4":{},"5":{},"6":{},"16":{},"17":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"32":{},"48":{},"50":{},"52":{},"53":{},"54":{},"60":{},"63":{},"70":{},"71":{},"72":{},"82":{},"83":{},"87":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"98":{},"115":{},"117":{},"119":{},"120":{},"121":{},"127":{},"128":{},"132":{},"138":{},"139":{},"140":{},"150":{},"151":{},"155":{},"157":{},"158":{},"162":{},"163":{},"166":{},"183":{},"185":{},"187":{},"188":{},"189":{},"195":{},"196":{},"200":{}},"component":{}}],["menu.setenabled(fals",{"_index":4894,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["menu.setenabledgranted(fals",{"_index":4895,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["menu.setvisible(fals",{"_index":4896,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["menu_bold",{"_index":2662,"title":{},"name":{},"text":{"26":{}},"component":{}}],["menubar",{"_index":2653,"title":{},"name":{},"text":{"26":{}},"component":{}}],["menubox",{"_index":2652,"title":{},"name":{},"text":{"26":{}},"component":{}}],["menueventmap",{"_index":6273,"title":{},"name":{},"text":{"93":{},"128":{},"196":{}},"component":{}}],["menumodel",{"_index":6271,"title":{},"name":{},"text":{"93":{}},"component":{}}],["menus.filter(this.menu",{"_index":6173,"title":{},"name":{},"text":{"92":{}},"component":{}}],["menus.j",{"_index":6109,"title":{"92-18":{}},"name":{},"text":{"92":{}},"component":{}}],["menutyp",{"_index":6105,"title":{"92-13":{},"93-10":{},"127-4":{},"195-4":{}},"name":{},"text":{"93":{},"127":{},"195":{}},"component":{}}],["merg",{"_index":4532,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["messag",{"_index":619,"title":{"26-41":{},"27-6":{},"27-19":{},"44-2":{},"109-2":{},"179-2":{}},"name":{},"text":{"17":{},"20":{},"22":{},"24":{},"26":{},"27":{},"38":{},"40":{},"41":{},"43":{},"44":{},"48":{},"50":{},"51":{},"58":{},"61":{},"63":{},"66":{},"83":{},"86":{},"88":{},"89":{},"105":{},"107":{},"109":{},"110":{},"111":{},"115":{},"117":{},"118":{},"126":{},"129":{},"132":{},"134":{},"151":{},"154":{},"156":{},"157":{},"173":{},"175":{},"176":{},"178":{},"179":{},"183":{},"185":{},"186":{},"194":{},"197":{},"200":{},"202":{}},"component":{}}],["messagebox",{"_index":1161,"title":{},"name":{},"text":{"22":{},"39":{},"88":{},"106":{},"156":{},"174":{}},"component":{}}],["messageboxes.create().withheader(\"extens",{"_index":4698,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["messageboxes.openok(this.session.desktop",{"_index":1164,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["messagecontext",{"_index":5409,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["messageformatt",{"_index":3353,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["messagenotif",{"_index":5325,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["messagenotificationhandl",{"_index":5326,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["meta",{"_index":3712,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["method",{"_index":1249,"title":{"29-7":{},"41-1":{},"63-49":{},"92-18":{},"95-7":{},"111-1":{},"132-49":{},"163-7":{},"176-1":{},"200-49":{}},"name":{},"text":{"23":{},"26":{},"27":{},"29":{},"33":{},"34":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"47":{},"48":{},"52":{},"53":{},"56":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"90":{},"92":{},"93":{},"95":{},"99":{},"101":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"114":{},"115":{},"119":{},"120":{},"123":{},"124":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"158":{},"160":{},"163":{},"170":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"182":{},"183":{},"187":{},"188":{},"191":{},"193":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["methods.in",{"_index":5210,"title":{},"name":{},"text":{"60":{}},"component":{}}],["method’",{"_index":3677,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["metro",{"_index":4006,"title":{"63-30":{},"132-30":{},"200-30":{}},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["microsoft",{"_index":2489,"title":{},"name":{},"text":{"26":{},"27":{},"45":{},"112":{},"180":{}},"component":{}}],["migrat",{"_index":79,"title":{"26":{},"92":{},"160":{},"26-9":{},"48-12":{},"92-12":{},"93-13":{},"115-12":{},"124-2":{},"183-12":{},"193-2":{}},"name":{"26":{},"92":{},"160":{}},"text":{"1":{},"26":{},"27":{},"48":{},"56":{},"64":{},"67":{},"92":{},"93":{},"115":{},"123":{},"124":{},"131":{},"135":{},"160":{},"161":{},"183":{},"191":{},"193":{},"199":{}},"component":{}}],["migth",{"_index":4997,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["millisecon",{"_index":3924,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["millisecond",{"_index":3912,"title":{},"name":{},"text":{"40":{},"44":{},"63":{},"107":{},"109":{},"132":{},"175":{},"179":{},"200":{}},"component":{}}],["mimemessag",{"_index":4396,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["min",{"_index":4763,"title":{},"name":{},"text":{"51":{},"59":{},"118":{},"127":{},"186":{},"195":{}},"component":{}}],["mind",{"_index":4944,"title":{},"name":{},"text":{"56":{},"58":{},"123":{},"126":{},"191":{},"194":{}},"component":{}}],["minif",{"_index":6259,"title":{"93-16":{}},"name":{},"text":{"93":{}},"component":{}}],["minifi",{"_index":4503,"title":{},"name":{},"text":{"46":{},"51":{},"113":{},"118":{},"181":{},"186":{}},"component":{}}],["minim",{"_index":1962,"title":{"33-2":{},"35-2":{},"36-5":{},"36-6":{},"99-2":{},"102-2":{},"103-5":{},"103-6":{},"167-2":{},"168-5":{},"168-6":{},"170-2":{}},"name":{},"text":{"23":{},"27":{},"36":{},"40":{},"47":{},"59":{},"90":{},"103":{},"107":{},"114":{},"127":{},"158":{},"168":{},"175":{},"182":{},"195":{}},"component":{}}],["minimum",{"_index":2585,"title":{},"name":{},"text":{"26":{},"46":{},"53":{},"92":{},"113":{},"120":{},"181":{},"188":{}},"component":{}}],["minor",{"_index":1388,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["minut",{"_index":778,"title":{},"name":{},"text":{"19":{},"39":{},"40":{},"63":{},"84":{},"106":{},"107":{},"132":{},"152":{},"174":{},"175":{},"200":{}},"component":{}}],["mio",{"_index":5092,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["mirror",{"_index":2419,"title":{},"name":{},"text":{"24":{},"89":{},"157":{}},"component":{}}],["misfir",{"_index":3416,"title":{"39-30":{},"106-30":{},"174-30":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["miss",{"_index":187,"title":{"4-6":{},"23-22":{},"29-29":{},"71-6":{},"90-22":{},"95-29":{},"139-6":{},"158-22":{},"163-29":{}},"name":{},"text":{"4":{},"16":{},"17":{},"19":{},"23":{},"24":{},"28":{},"29":{},"39":{},"63":{},"71":{},"82":{},"83":{},"84":{},"89":{},"90":{},"92":{},"94":{},"95":{},"106":{},"132":{},"139":{},"150":{},"151":{},"152":{},"157":{},"158":{},"162":{},"163":{},"174":{},"200":{}},"component":{}}],["mitig",{"_index":4423,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["mixin",{"_index":4925,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["mixins.less",{"_index":4939,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["mm",{"_index":5963,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["mobil",{"_index":1415,"title":{"53":{},"120":{},"188":{}},"name":{"53":{},"120":{},"188":{}},"text":{"23":{},"45":{},"53":{},"90":{},"112":{},"120":{},"158":{},"180":{},"188":{}},"component":{}}],["mobilecolumn",{"_index":1416,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["mobiledevicetransform",{"_index":4854,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["mobiledevicetransformation.reduce_groupbox_columns_to_on",{"_index":4871,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["mobilefield",{"_index":2007,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["mock",{"_index":3774,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["modal",{"_index":945,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["mode",{"_index":329,"title":{},"name":{},"text":{"5":{},"23":{},"29":{},"40":{},"43":{},"46":{},"53":{},"57":{},"70":{},"90":{},"93":{},"95":{},"107":{},"110":{},"113":{},"120":{},"125":{},"138":{},"158":{},"163":{},"175":{},"178":{},"181":{},"188":{},"192":{}},"component":{}}],["model",{"_index":175,"title":{"39-32":{},"43-11":{},"48-3":{},"60-4":{},"61-15":{},"93-6":{},"106-32":{},"110-11":{},"115-3":{},"128-4":{},"129-15":{},"174-32":{},"178-11":{},"183-3":{},"196-4":{},"197-15":{}},"name":{},"text":{"3":{},"14":{},"18":{},"22":{},"26":{},"29":{},"31":{},"32":{},"39":{},"40":{},"41":{},"43":{},"46":{},"48":{},"52":{},"53":{},"55":{},"56":{},"60":{},"61":{},"64":{},"69":{},"80":{},"85":{},"88":{},"92":{},"93":{},"95":{},"97":{},"98":{},"100":{},"106":{},"107":{},"110":{},"111":{},"113":{},"115":{},"119":{},"120":{},"122":{},"123":{},"128":{},"129":{},"131":{},"137":{},"148":{},"153":{},"156":{},"163":{},"165":{},"166":{},"171":{},"174":{},"175":{},"176":{},"178":{},"181":{},"183":{},"187":{},"188":{},"190":{},"191":{},"196":{},"197":{},"199":{}},"component":{}}],["model.th",{"_index":5196,"title":{},"name":{},"text":{"60":{}},"component":{}}],["modeljob",{"_index":3653,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["modeljobs.ismodeljob(ifuture.current.get",{"_index":3658,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["modeljobs.ismodelthread",{"_index":3657,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["modeljobs.neweventfilterbuild",{"_index":3661,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["modeljobs.newfuturefilterbuild",{"_index":3659,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["modeljobs.newinput(clientruncontexts.copycurr",{"_index":3655,"title":{},"name":{},"text":{"39":{},"61":{},"106":{},"129":{},"174":{},"197":{}},"component":{}}],["modeljobs.schedul",{"_index":3654,"title":{},"name":{},"text":{"39":{},"61":{},"106":{},"129":{},"174":{},"197":{}},"component":{}}],["modeljobs.yield",{"_index":3666,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["models.extend",{"_index":4604,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["models.extend(extendedformmodel",{"_index":4608,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["models.get(desktopmodel",{"_index":1149,"title":{},"name":{},"text":{"22":{}},"component":{}}],["models.get(examplejsformmodel",{"_index":6362,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["models.get(helloformmodel",{"_index":1163,"title":{},"name":{},"text":{"22":{}},"component":{}}],["models.get(personformmodel",{"_index":4454,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["modern",{"_index":913,"title":{},"name":{},"text":{"20":{},"27":{},"32":{},"43":{},"45":{},"46":{},"86":{},"98":{},"110":{},"112":{},"113":{},"154":{},"166":{},"178":{},"180":{},"181":{}},"component":{}}],["modif",{"_index":1235,"title":{},"name":{},"text":{"23":{},"47":{},"48":{},"60":{},"90":{},"114":{},"115":{},"128":{},"158":{},"182":{},"183":{},"196":{}},"component":{}}],["modifi",{"_index":238,"title":{},"name":{},"text":{"4":{},"11":{},"19":{},"23":{},"26":{},"27":{},"29":{},"40":{},"43":{},"44":{},"46":{},"48":{},"52":{},"60":{},"64":{},"71":{},"77":{},"84":{},"90":{},"95":{},"107":{},"109":{},"110":{},"113":{},"115":{},"119":{},"128":{},"131":{},"139":{},"145":{},"152":{},"158":{},"163":{},"175":{},"178":{},"179":{},"181":{},"183":{},"187":{},"196":{},"199":{}},"component":{}}],["modifyhandl",{"_index":2020,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["modul",{"_index":279,"title":{"26-38":{},"46-2":{},"113-2":{},"113-19":{},"181-2":{},"181-19":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"33":{},"35":{},"37":{},"40":{},"46":{},"48":{},"52":{},"55":{},"56":{},"60":{},"63":{},"64":{},"66":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"99":{},"102":{},"104":{},"107":{},"113":{},"115":{},"119":{},"122":{},"123":{},"124":{},"128":{},"131":{},"132":{},"134":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"163":{},"167":{},"169":{},"170":{},"175":{},"181":{},"183":{},"187":{},"190":{},"191":{},"193":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["modular",{"_index":1132,"title":{"63-10":{},"132-10":{},"200-10":{}},"name":{},"text":{"22":{},"63":{},"88":{},"132":{},"156":{},"200":{}},"component":{}}],["module.export",{"_index":1094,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"92":{},"113":{},"156":{},"181":{}},"component":{}}],["module.w",{"_index":4492,"title":{},"name":{},"text":{"46":{}},"component":{}}],["module’",{"_index":5444,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["mom",{"_index":4049,"title":{},"name":{},"text":{"40":{},"64":{},"107":{},"131":{},"175":{},"199":{}},"component":{}}],["moment",{"_index":706,"title":{},"name":{},"text":{"19":{},"26":{},"59":{},"84":{},"127":{},"152":{},"195":{}},"component":{}}],["mon",{"_index":3500,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["monday",{"_index":3494,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["monitor",{"_index":3480,"title":{},"name":{"42":{},"108":{},"177":{}},"text":{"39":{},"41":{},"42":{},"43":{},"44":{},"63":{},"66":{},"106":{},"108":{},"109":{},"110":{},"111":{},"132":{},"134":{},"174":{},"176":{},"177":{},"178":{},"179":{},"200":{},"202":{}},"component":{}}],["monitor’",{"_index":4149,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["month",{"_index":3032,"title":{},"name":{},"text":{"33":{},"35":{},"39":{},"59":{},"63":{},"99":{},"102":{},"106":{},"127":{},"132":{},"167":{},"170":{},"174":{},"195":{},"200":{}},"component":{}}],["monuplechartvaluegroupbean",{"_index":3076,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["more",{"_index":67,"title":{"3-3":{},"23-37":{},"69-3":{},"90-37":{},"93-16":{},"137-3":{},"158-37":{}},"name":{},"text":{"1":{},"3":{},"16":{},"18":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"31":{},"32":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"52":{},"53":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"69":{},"82":{},"84":{},"85":{},"87":{},"88":{},"90":{},"92":{},"93":{},"97":{},"98":{},"105":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"119":{},"120":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"132":{},"133":{},"134":{},"135":{},"137":{},"150":{},"152":{},"153":{},"155":{},"156":{},"158":{},"165":{},"166":{},"173":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"187":{},"188":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"200":{},"201":{},"202":{}},"component":{}}],["more.if",{"_index":5198,"title":{},"name":{},"text":{"60":{}},"component":{}}],["mostli",{"_index":4144,"title":{},"name":{},"text":{"41":{},"58":{},"63":{},"93":{},"111":{},"126":{},"132":{},"176":{},"194":{},"200":{}},"component":{}}],["motiv",{"_index":2993,"title":{"31-1":{},"97-1":{},"165-1":{}},"name":{},"text":{},"component":{}}],["mount",{"_index":1083,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["mount=/:dist",{"_index":1076,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["mous",{"_index":2646,"title":{},"name":{},"text":{"26":{},"53":{},"59":{},"120":{},"127":{},"188":{},"195":{}},"component":{}}],["move",{"_index":767,"title":{"48-11":{},"115-11":{},"183-11":{}},"name":{},"text":{"19":{},"23":{},"26":{},"27":{},"28":{},"29":{},"34":{},"47":{},"48":{},"53":{},"59":{},"84":{},"90":{},"92":{},"93":{},"94":{},"95":{},"101":{},"114":{},"115":{},"120":{},"127":{},"152":{},"158":{},"162":{},"163":{},"172":{},"182":{},"183":{},"188":{},"195":{}},"component":{}}],["movement",{"_index":4570,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["mozilla",{"_index":2922,"title":{},"name":{},"text":{"27":{},"45":{},"112":{},"180":{}},"component":{}}],["mtom",{"_index":5501,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["much",{"_index":2247,"title":{},"name":{},"text":{"23":{},"24":{},"26":{},"40":{},"43":{},"53":{},"60":{},"89":{},"90":{},"93":{},"107":{},"110":{},"120":{},"128":{},"157":{},"158":{},"175":{},"178":{},"188":{},"196":{}},"component":{}}],["mulesoft’",{"_index":886,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["multi",{"_index":441,"title":{},"name":{"54":{},"121":{},"189":{}},"text":{"14":{},"23":{},"29":{},"80":{},"90":{},"95":{},"148":{},"158":{},"163":{}},"component":{}}],["multilingu",{"_index":195,"title":{},"name":{},"text":{"4":{},"71":{},"139":{}},"component":{}}],["multipl",{"_index":2456,"title":{"54":{},"121":{},"189":{},"26-40":{},"39-23":{},"39-24":{},"61-5":{},"106-23":{},"106-24":{},"113-19":{},"129-5":{},"174-23":{},"174-24":{},"181-19":{},"197-5":{}},"name":{},"text":{"26":{},"32":{},"34":{},"39":{},"40":{},"43":{},"46":{},"47":{},"48":{},"51":{},"54":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"92":{},"93":{},"98":{},"101":{},"106":{},"107":{},"110":{},"113":{},"114":{},"115":{},"118":{},"121":{},"123":{},"126":{},"127":{},"128":{},"129":{},"130":{},"132":{},"133":{},"134":{},"166":{},"172":{},"174":{},"175":{},"178":{},"181":{},"182":{},"183":{},"186":{},"189":{},"191":{},"194":{},"195":{},"196":{},"197":{},"198":{},"200":{},"201":{},"202":{}},"component":{}}],["mutual",{"_index":3505,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["mvn",{"_index":775,"title":{},"name":{},"text":{"19":{},"63":{},"84":{},"132":{},"152":{},"200":{}},"component":{}}],["mvnrepository.com",{"_index":2465,"title":{},"name":{},"text":{"26":{},"92":{},"160":{}},"component":{}}],["my.custom.timeout",{"_index":3817,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["my.properti",{"_index":3828,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["my_map_property={\"map",{"_index":3837,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["my_properti",{"_index":3831,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["myapp",{"_index":4948,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["mycodetyp",{"_index":386,"title":{},"name":{},"text":{"7":{},"73":{},"141":{}},"component":{}}],["mycustomdimens",{"_index":4899,"title":{},"name":{},"text":{"54":{},"121":{},"189":{}},"component":{}}],["mycustomnam",{"_index":5760,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["mycustomtimeoutproperti",{"_index":3819,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["myextens",{"_index":4613,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["myfield",{"_index":4867,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["myfield.execchangedvalu",{"_index":4720,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["myfield.interceptchangedvalu",{"_index":4721,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["myform",{"_index":396,"title":{},"name":{},"text":{"8":{},"29":{},"60":{},"74":{},"95":{},"128":{},"142":{},"163":{},"196":{}},"component":{}}],["myform.j",{"_index":5214,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["myformdata",{"_index":400,"title":{},"name":{},"text":{"8":{},"29":{},"74":{},"95":{},"142":{},"163":{}},"component":{}}],["myformmodel",{"_index":5215,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["myformmodel.j",{"_index":5213,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["myformmodel.t",{"_index":6415,"title":{},"name":{},"text":{"128":{},"196":{}},"component":{}}],["myformwidgetmap",{"_index":6414,"title":{},"name":{},"text":{"128":{},"196":{}},"component":{}}],["myfutur",{"_index":3441,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["mygroupbox",{"_index":4844,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["myhold",{"_index":1643,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["mylisten",{"_index":3708,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["mylookupcal",{"_index":416,"title":{},"name":{},"text":{"10":{},"76":{},"144":{}},"component":{}}],["mylookupservic",{"_index":418,"title":{},"name":{},"text":{"10":{},"76":{},"144":{}},"component":{}}],["mynamespac",{"_index":5194,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["mypermiss",{"_index":436,"title":{},"name":{},"text":{"13":{},"79":{},"147":{}},"component":{}}],["myproject.applicationnam",{"_index":3864,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["myproject.applicationname=mi",{"_index":3866,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["myservic",{"_index":403,"title":{},"name":{},"text":{"8":{},"12":{},"29":{},"74":{},"78":{},"95":{},"142":{},"146":{},"163":{}},"component":{}}],["myserviceimpl",{"_index":3759,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["myservicemod",{"_index":3760,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["myspecialvers",{"_index":3761,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["mystringfield",{"_index":5212,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["mytablepag",{"_index":432,"title":{},"name":{},"text":{"12":{},"29":{},"78":{},"95":{},"146":{},"163":{}},"component":{}}],["mytablepagedata",{"_index":433,"title":{},"name":{},"text":{"12":{},"29":{},"78":{},"95":{},"146":{},"163":{}},"component":{}}],["mywidget.j",{"_index":4927,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["mywidget.less",{"_index":4928,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["mzi",{"_index":1206,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["n",{"_index":2529,"title":{},"name":{},"text":{"26":{},"33":{},"35":{},"47":{},"59":{},"99":{},"102":{},"114":{},"127":{},"167":{},"170":{},"182":{},"195":{}},"component":{}}],["name",{"_index":252,"title":{"64-3":{},"64-7":{},"64-8":{},"131-3":{},"131-7":{},"131-8":{},"199-3":{},"199-7":{},"199-8":{}},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"36":{},"37":{},"39":{},"40":{},"42":{},"43":{},"44":{},"46":{},"48":{},"51":{},"52":{},"55":{},"56":{},"57":{},"60":{},"63":{},"64":{},"66":{},"70":{},"71":{},"73":{},"74":{},"76":{},"77":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"103":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"113":{},"115":{},"118":{},"119":{},"122":{},"123":{},"125":{},"128":{},"131":{},"132":{},"134":{},"138":{},"139":{},"141":{},"142":{},"144":{},"145":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"163":{},"168":{},"169":{},"174":{},"175":{},"177":{},"178":{},"179":{},"181":{},"183":{},"186":{},"187":{},"190":{},"191":{},"192":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["name().get",{"_index":5714,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name().set(nam",{"_index":5712,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name.ui",{"_index":4031,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["name.ui.app",{"_index":4030,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["name.ui.app.dev",{"_index":4029,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["name1",{"_index":5777,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name1ex",{"_index":5791,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name1ex().get",{"_index":5796,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name1ex().set(name1ex",{"_index":5794,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name2",{"_index":5781,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name2ex",{"_index":5799,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name2ex().get",{"_index":5804,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name2ex().set(name2ex",{"_index":5802,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["name3",{"_index":5843,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["namecolumn",{"_index":1490,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["nameex",{"_index":5837,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["namefield",{"_index":949,"title":{},"name":{},"text":{"20":{},"22":{},"23":{},"36":{},"48":{},"86":{},"88":{},"90":{},"103":{},"115":{},"154":{},"156":{},"158":{},"168":{},"183":{}},"component":{}}],["namefieldextens",{"_index":4637,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["namefieldextension(namefield",{"_index":4638,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["namespac",{"_index":1128,"title":{"64-5":{},"131-5":{},"199-5":{}},"name":{},"text":{"22":{},"26":{},"40":{},"48":{},"55":{},"60":{},"63":{},"64":{},"88":{},"92":{},"107":{},"115":{},"122":{},"128":{},"131":{},"132":{},"156":{},"175":{},"183":{},"190":{},"196":{},"199":{},"200":{}},"component":{}}],["namespace/vers",{"_index":2620,"title":{},"name":{},"text":{"26":{}},"component":{}}],["namespacevers",{"_index":2622,"title":{},"name":{},"text":{"26":{},"92":{}},"component":{}}],["namespaceversion#unwrap",{"_index":2623,"title":{},"name":{},"text":{"26":{}},"component":{}}],["namewithage={0",{"_index":4978,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["narrow",{"_index":1066,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["nation",{"_index":2982,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["nativ",{"_index":2432,"title":{"26-17":{},"27-16":{}},"name":{},"text":{"26":{},"27":{},"57":{},"125":{},"192":{}},"component":{}}],["nativenotificationdefault",{"_index":2635,"title":{},"name":{},"text":{"26":{}},"component":{}}],["nativenotificationvis",{"_index":2933,"title":{},"name":{},"text":{"27":{}},"component":{}}],["nativeonli",{"_index":2932,"title":{},"name":{},"text":{"27":{}},"component":{}}],["natur",{"_index":4439,"title":{},"name":{},"text":{"45":{},"63":{},"112":{},"132":{},"180":{},"200":{}},"component":{}}],["navig",{"_index":321,"title":{},"name":{},"text":{"5":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"46":{},"70":{},"82":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"95":{},"113":{},"138":{},"150":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"163":{},"181":{}},"component":{}}],["navigationhandlevis",{"_index":941,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["navigationvis",{"_index":942,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["nbase64",{"_index":2511,"title":{},"name":{},"text":{"26":{}},"component":{}}],["necessaray",{"_index":5888,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["necessari",{"_index":520,"title":{},"name":{},"text":{"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"39":{},"40":{},"43":{},"46":{},"48":{},"50":{},"59":{},"60":{},"61":{},"65":{},"66":{},"82":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"106":{},"107":{},"110":{},"113":{},"115":{},"117":{},"127":{},"128":{},"129":{},"133":{},"134":{},"150":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"174":{},"175":{},"178":{},"181":{},"183":{},"185":{},"195":{},"196":{},"197":{},"201":{},"202":{}},"component":{}}],["necessarili",{"_index":3530,"title":{},"name":{},"text":{"39":{},"53":{},"62":{},"65":{},"106":{},"120":{},"130":{},"133":{},"174":{},"188":{},"198":{},"201":{}},"component":{}}],["need",{"_index":312,"title":{},"name":{},"text":{"5":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"32":{},"33":{},"34":{},"35":{},"37":{},"46":{},"48":{},"50":{},"53":{},"55":{},"56":{},"57":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"73":{},"74":{},"76":{},"77":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"98":{},"99":{},"100":{},"101":{},"102":{},"104":{},"113":{},"115":{},"117":{},"120":{},"122":{},"123":{},"124":{},"125":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"138":{},"141":{},"142":{},"144":{},"145":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"166":{},"167":{},"169":{},"170":{},"171":{},"172":{},"181":{},"183":{},"185":{},"188":{},"190":{},"191":{},"192":{},"193":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["neg",{"_index":3881,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["negat",{"_index":3602,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["nest",{"_index":1702,"title":{},"name":{},"text":{"23":{},"42":{},"64":{},"90":{},"108":{},"131":{},"158":{},"177":{},"199":{}},"component":{}}],["netscap",{"_index":3887,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["network",{"_index":4047,"title":{},"name":{},"text":{"40":{},"61":{},"63":{},"107":{},"129":{},"132":{},"175":{},"197":{},"200":{}},"component":{}}],["neutral",{"_index":5395,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["never",{"_index":2577,"title":{},"name":{},"text":{"26":{},"38":{},"39":{},"40":{},"61":{},"64":{},"105":{},"106":{},"107":{},"129":{},"131":{},"173":{},"174":{},"175":{},"197":{},"199":{}},"component":{}}],["nevertheless",{"_index":4446,"title":{},"name":{},"text":{"46":{},"63":{},"113":{},"128":{},"132":{},"181":{},"196":{},"200":{}},"component":{}}],["new",{"_index":77,"title":{"5-2":{},"5-3":{},"5-4":{},"6-2":{},"7-1":{},"8-1":{},"10-1":{},"12-1":{},"13-1":{},"14-1":{},"26-8":{},"26-34":{},"26-37":{},"26-38":{},"27-13":{},"27-22":{},"29-2":{},"29-3":{},"29-4":{},"29-11":{},"29-14":{},"29-17":{},"29-21":{},"29-22":{},"29-23":{},"29-25":{},"33-2":{},"35-2":{},"36-5":{},"70-2":{},"70-3":{},"70-4":{},"72-2":{},"73-1":{},"74-1":{},"76-1":{},"78-1":{},"79-1":{},"80-1":{},"92-8":{},"93-20":{},"93-21":{},"95-2":{},"95-3":{},"95-4":{},"95-11":{},"95-14":{},"95-17":{},"95-21":{},"95-22":{},"95-23":{},"95-25":{},"99-2":{},"102-2":{},"103-5":{},"138-2":{},"138-3":{},"138-4":{},"140-2":{},"141-1":{},"142-1":{},"144-1":{},"146-1":{},"147-1":{},"148-1":{},"160-9":{},"163-2":{},"163-3":{},"163-4":{},"163-11":{},"163-14":{},"163-17":{},"163-21":{},"163-22":{},"163-23":{},"163-25":{},"167-2":{},"168-5":{},"170-2":{}},"name":{},"text":{"1":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"47":{},"48":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"76":{},"77":{},"78":{},"79":{},"80":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"97":{},"98":{},"99":{},"100":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"145":{},"146":{},"147":{},"148":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"161":{},"162":{},"163":{},"165":{},"166":{},"169":{},"170":{},"171":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"181":{},"182":{},"183":{},"187":{},"188":{},"189":{},"190":{},"191":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["new/chang",{"_index":1823,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["newer",{"_index":91,"title":{},"name":{},"text":{"1":{},"26":{},"27":{},"48":{},"56":{},"61":{},"67":{},"115":{},"123":{},"129":{},"135":{},"183":{},"191":{},"197":{}},"component":{}}],["newest",{"_index":1088,"title":{},"name":{},"text":{"22":{},"26":{},"88":{},"92":{},"156":{}},"component":{}}],["newformhandlerextens",{"_index":4701,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["newformhandlerextension(newhandl",{"_index":4703,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["newhandl",{"_index":2021,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["newinvocationcontext",{"_index":5599,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["newli",{"_index":739,"title":{},"name":{},"text":{"19":{},"23":{},"28":{},"60":{},"84":{},"90":{},"94":{},"128":{},"152":{},"158":{},"162":{},"196":{}},"component":{}}],["newlyhidden",{"_index":5178,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["newlyshown",{"_index":5179,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["newmastervalu",{"_index":1889,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["newmenu",{"_index":1813,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["newpersonmenu",{"_index":1828,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["newvalu",{"_index":5262,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["next",{"_index":337,"title":{"16-7":{},"17-5":{},"21-7":{},"22-15":{},"24-10":{},"82-7":{},"83-5":{},"87-7":{},"88-15":{},"89-10":{},"150-7":{},"151-5":{},"155-7":{},"156-15":{},"157-10":{}},"name":{},"text":{"5":{},"14":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"39":{},"40":{},"43":{},"48":{},"52":{},"58":{},"60":{},"63":{},"66":{},"70":{},"80":{},"82":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"95":{},"100":{},"106":{},"107":{},"110":{},"115":{},"119":{},"126":{},"128":{},"132":{},"134":{},"138":{},"148":{},"150":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"163":{},"171":{},"174":{},"175":{},"178":{},"183":{},"187":{},"194":{},"196":{},"200":{},"202":{}},"component":{}}],["next/finish",{"_index":1226,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["nice",{"_index":2812,"title":{},"name":{},"text":{"26":{},"60":{},"128":{},"196":{}},"component":{}}],["nl",{"_index":138,"title":{"4-1":{},"4-2":{},"4-3":{},"4-6":{},"5-5":{},"6-4":{},"11-1":{},"28-5":{},"29-24":{},"29-26":{},"29-29":{},"70-5":{},"71-1":{},"71-2":{},"71-3":{},"71-6":{},"72-4":{},"77-1":{},"94-5":{},"95-24":{},"95-26":{},"95-29":{},"138-5":{},"139-1":{},"139-2":{},"139-3":{},"139-6":{},"140-4":{},"145-1":{},"162-5":{},"163-24":{},"163-26":{},"163-29":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"9":{},"11":{},"14":{},"23":{},"28":{},"29":{},"31":{},"57":{},"69":{},"70":{},"71":{},"72":{},"75":{},"77":{},"80":{},"90":{},"94":{},"95":{},"97":{},"125":{},"137":{},"138":{},"139":{},"140":{},"143":{},"145":{},"148":{},"158":{},"162":{},"163":{},"165":{},"192":{}},"component":{}}],["nl=fr",{"_index":4986,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["nlsfilewatch",{"_index":5007,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["nlslocale.current.get",{"_index":4169,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["no_publ",{"_index":2519,"title":{},"name":{},"text":{"26":{}},"component":{}}],["nocrypt",{"_index":2523,"title":{},"name":{},"text":{"26":{}},"component":{}}],["node",{"_index":501,"title":{"61-5":{},"61-9":{},"93-19":{},"129-5":{},"129-9":{},"197-5":{},"197-9":{}},"name":{},"text":{"16":{},"17":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"40":{},"41":{},"43":{},"46":{},"59":{},"60":{},"61":{},"64":{},"65":{},"82":{},"83":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"107":{},"110":{},"111":{},"113":{},"127":{},"128":{},"129":{},"131":{},"133":{},"150":{},"151":{},"155":{},"156":{},"157":{},"158":{},"175":{},"176":{},"178":{},"181":{},"195":{},"196":{},"197":{},"199":{},"201":{}},"component":{}}],["node.j",{"_index":591,"title":{"21-3":{},"24-3":{},"87-3":{},"89-3":{},"155-3":{},"157-3":{}},"name":{},"text":{"17":{},"21":{},"22":{},"24":{},"46":{},"83":{},"87":{},"88":{},"89":{},"113":{},"151":{},"155":{},"156":{},"157":{},"181":{}},"component":{}}],["node_modul",{"_index":1057,"title":{},"name":{},"text":{"22":{},"23":{},"88":{},"90":{},"156":{},"158":{}},"component":{}}],["node_modules/@eclips",{"_index":1098,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["nodeid",{"_index":6260,"title":{"93-19":{}},"name":{},"text":{"93":{}},"component":{}}],["nodepag",{"_index":430,"title":{},"name":{},"text":{"12":{},"29":{},"78":{},"95":{},"146":{},"163":{}},"component":{}}],["noencodinglabelfield",{"_index":4256,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["nofirstnam",{"_index":2106,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["nohttpresponseexcept",{"_index":3974,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["nolastnam",{"_index":2108,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["non",{"_index":1154,"title":{"61-8":{},"129-8":{},"197-8":{}},"name":{},"text":{"22":{},"40":{},"45":{},"56":{},"57":{},"61":{},"64":{},"66":{},"88":{},"107":{},"112":{},"123":{},"125":{},"129":{},"131":{},"134":{},"156":{},"175":{},"180":{},"191":{},"192":{},"197":{},"199":{},"202":{}},"component":{}}],["none",{"_index":512,"title":{},"name":{},"text":{"16":{},"40":{},"43":{},"82":{},"107":{},"110":{},"150":{},"175":{},"178":{}},"component":{}}],["noon",{"_index":3631,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["normal",{"_index":2157,"title":{},"name":{},"text":{"23":{},"38":{},"39":{},"40":{},"41":{},"44":{},"48":{},"52":{},"53":{},"56":{},"60":{},"90":{},"93":{},"105":{},"106":{},"107":{},"109":{},"111":{},"115":{},"119":{},"120":{},"123":{},"128":{},"158":{},"173":{},"174":{},"175":{},"176":{},"179":{},"183":{},"187":{},"188":{},"191":{},"196":{}},"component":{}}],["north",{"_index":4568,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["nosourc",{"_index":4507,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["notabl",{"_index":2902,"title":{},"name":{},"text":{"27":{}},"component":{}}],["notallowedtyp",{"_index":6170,"title":{},"name":{},"text":{"92":{}},"component":{}}],["notat",{"_index":5273,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["note",{"_index":75,"title":{"27":{},"93":{},"161":{}},"name":{"27":{},"93":{},"161":{}},"text":{"1":{},"19":{},"23":{},"26":{},"27":{},"37":{},"38":{},"39":{},"40":{},"43":{},"46":{},"48":{},"50":{},"51":{},"56":{},"60":{},"62":{},"63":{},"65":{},"66":{},"67":{},"84":{},"90":{},"92":{},"104":{},"105":{},"106":{},"107":{},"110":{},"113":{},"115":{},"117":{},"118":{},"123":{},"124":{},"128":{},"130":{},"132":{},"133":{},"134":{},"135":{},"152":{},"158":{},"169":{},"173":{},"174":{},"175":{},"178":{},"181":{},"183":{},"185":{},"186":{},"191":{},"193":{},"196":{},"198":{},"200":{},"201":{},"202":{}},"component":{}}],["notesbox",{"_index":1776,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["notesbox.not",{"_index":2243,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["notesfield",{"_index":1958,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["notfilt",{"_index":3604,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["noth",{"_index":2775,"title":{},"name":{},"text":{"26":{},"40":{},"53":{},"60":{},"107":{},"120":{},"128":{},"175":{},"188":{},"196":{}},"component":{}}],["notic",{"_index":1002,"title":{},"name":{},"text":{"21":{},"24":{},"46":{},"56":{},"60":{},"87":{},"89":{},"113":{},"123":{},"128":{},"155":{},"157":{},"181":{},"191":{},"196":{}},"component":{}}],["notif",{"_index":2433,"title":{"61":{},"129":{},"197":{},"26-17":{},"27-6":{},"27-16":{},"61-10":{},"61-12":{},"61-13":{},"129-10":{},"129-12":{},"129-13":{},"197-10":{},"197-12":{},"197-13":{}},"name":{"61":{},"129":{},"197":{}},"text":{"26":{},"27":{},"40":{},"41":{},"61":{},"107":{},"111":{},"129":{},"175":{},"176":{},"197":{}},"component":{}}],["notifi",{"_index":3707,"title":{},"name":{},"text":{"40":{},"60":{},"107":{},"128":{},"175":{},"196":{}},"component":{}}],["nov",{"_index":3043,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["now",{"_index":502,"title":{},"name":{},"text":{"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"33":{},"34":{},"35":{},"36":{},"40":{},"43":{},"46":{},"48":{},"55":{},"56":{},"58":{},"59":{},"60":{},"63":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"99":{},"101":{},"102":{},"103":{},"107":{},"110":{},"113":{},"115":{},"122":{},"123":{},"124":{},"126":{},"127":{},"128":{},"132":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"167":{},"168":{},"170":{},"172":{},"175":{},"178":{},"181":{},"183":{},"190":{},"191":{},"193":{},"194":{},"195":{},"196":{},"200":{}},"component":{}}],["nowaday",{"_index":4886,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["npm",{"_index":604,"title":{"22-8":{},"88-8":{},"156-8":{}},"name":{},"text":{"17":{},"18":{},"20":{},"21":{},"22":{},"24":{},"26":{},"33":{},"35":{},"46":{},"83":{},"85":{},"86":{},"87":{},"88":{},"89":{},"92":{},"99":{},"102":{},"113":{},"124":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"160":{},"167":{},"170":{},"181":{},"193":{}},"component":{}}],["npmj",{"_index":684,"title":{},"name":{},"text":{"18":{},"85":{},"153":{}},"component":{}}],["npmrc",{"_index":2603,"title":{},"name":{},"text":{"26":{}},"component":{}}],["npx",{"_index":4549,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["null",{"_index":1576,"title":{},"name":{},"text":{"23":{},"26":{},"34":{},"36":{},"39":{},"40":{},"41":{},"43":{},"47":{},"56":{},"59":{},"62":{},"63":{},"64":{},"65":{},"66":{},"90":{},"92":{},"93":{},"100":{},"101":{},"103":{},"106":{},"107":{},"110":{},"111":{},"114":{},"123":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"158":{},"168":{},"171":{},"172":{},"174":{},"175":{},"176":{},"178":{},"182":{},"191":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["nullauthenticationmethod",{"_index":5507,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["nullexceptiontransl",{"_index":3341,"title":{"38-18":{},"105-18":{},"173-18":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["number",{"_index":863,"title":{"26-30":{},"64-18":{},"131-18":{},"199-18":{}},"name":{},"text":{"19":{},"20":{},"23":{},"26":{},"29":{},"38":{},"39":{},"40":{},"44":{},"58":{},"59":{},"63":{},"64":{},"65":{},"84":{},"86":{},"90":{},"95":{},"105":{},"106":{},"107":{},"109":{},"126":{},"127":{},"131":{},"132":{},"133":{},"152":{},"154":{},"158":{},"163":{},"173":{},"174":{},"175":{},"179":{},"194":{},"195":{},"199":{},"200":{},"201":{}},"component":{}}],["numberfield",{"_index":5010,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["numberformatprovid",{"_index":6265,"title":{"93-25":{}},"name":{},"text":{},"component":{}}],["numberformatprovider#getintegerinst",{"_index":6340,"title":{},"name":{},"text":{"93":{}},"component":{}}],["numer",{"_index":5096,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["nvpair",{"_index":1644,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["nvpair(\"pag",{"_index":1679,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["nvpair(\"result",{"_index":1636,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["obfusc",{"_index":2826,"title":{},"name":{},"text":{"26":{}},"component":{}}],["obj",{"_index":4323,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["obj.getclass",{"_index":4325,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["object",{"_index":972,"title":{"55":{},"64":{},"122":{},"131":{},"190":{},"199":{},"26-31":{},"64-1":{},"64-7":{},"64-12":{},"64-13":{},"64-14":{},"64-15":{},"64-19":{},"64-20":{},"64-21":{},"64-23":{},"64-25":{},"64-26":{},"66-5":{},"131-1":{},"131-7":{},"131-12":{},"131-13":{},"131-14":{},"131-15":{},"131-19":{},"131-20":{},"131-21":{},"131-23":{},"131-25":{},"131-26":{},"134-5":{},"199-1":{},"199-7":{},"199-12":{},"199-13":{},"199-14":{},"199-15":{},"199-19":{},"199-20":{},"199-21":{},"199-23":{},"199-25":{},"199-26":{},"202-5":{}},"name":{"55":{},"64":{},"122":{},"131":{},"190":{},"199":{}},"text":{"20":{},"22":{},"23":{},"26":{},"29":{},"33":{},"35":{},"38":{},"39":{},"40":{},"42":{},"44":{},"46":{},"48":{},"55":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"86":{},"88":{},"90":{},"92":{},"93":{},"95":{},"99":{},"102":{},"105":{},"106":{},"107":{},"108":{},"109":{},"113":{},"115":{},"122":{},"124":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"134":{},"154":{},"156":{},"158":{},"163":{},"167":{},"170":{},"173":{},"174":{},"175":{},"177":{},"179":{},"181":{},"183":{},"190":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["object.assign",{"_index":3022,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["object.assign(window.helloworld",{"_index":1126,"title":{},"name":{},"text":{"22":{}},"component":{}}],["object.assign(window.yournamespac",{"_index":4596,"title":{},"name":{},"text":{"48":{},"92":{},"115":{},"183":{}},"component":{}}],["object.wait",{"_index":4150,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["objectfactori",{"_index":4912,"title":{},"name":{},"text":{"55":{},"122":{},"128":{},"190":{},"196":{}},"component":{}}],["objectfactory.get().registernamespace('yournamespac",{"_index":6128,"title":{},"name":{},"text":{"92":{}},"component":{}}],["objects.equ",{"_index":5237,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["objects.equals(this.acceptedtext",{"_index":5126,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["objecttyp",{"_index":940,"title":{"92-11":{},"92-12":{},"93-9":{}},"name":{},"text":{"20":{},"22":{},"36":{},"48":{},"55":{},"60":{},"86":{},"88":{},"92":{},"93":{},"103":{},"115":{},"122":{},"127":{},"128":{},"154":{},"156":{},"168":{},"183":{},"190":{},"195":{},"196":{}},"component":{}}],["object’",{"_index":3609,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["oblig",{"_index":5346,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["obscur",{"_index":4433,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["observ",{"_index":2563,"title":{},"name":{},"text":{"26":{},"43":{},"47":{},"57":{},"66":{},"110":{},"114":{},"125":{},"134":{},"178":{},"182":{},"192":{},"202":{}},"component":{}}],["obsolet",{"_index":1273,"title":{},"name":{},"text":{"23":{},"26":{},"60":{},"61":{},"90":{},"92":{},"128":{},"129":{},"158":{},"196":{},"197":{}},"component":{}}],["obtain",{"_index":2038,"title":{"26-2":{},"92-2":{},"160-2":{}},"name":{},"text":{"23":{},"26":{},"27":{},"39":{},"40":{},"63":{},"90":{},"92":{},"93":{},"106":{},"107":{},"132":{},"158":{},"161":{},"174":{},"175":{},"200":{}},"component":{}}],["obviou",{"_index":6270,"title":{},"name":{},"text":{"93":{}},"component":{}}],["obvious",{"_index":5222,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["occupi",{"_index":1700,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["occur",{"_index":3344,"title":{},"name":{},"text":{"38":{},"40":{},"48":{},"57":{},"59":{},"63":{},"105":{},"107":{},"115":{},"125":{},"127":{},"132":{},"160":{},"173":{},"175":{},"183":{},"192":{},"195":{},"200":{}},"component":{}}],["occurr",{"_index":6134,"title":{},"name":{},"text":{"92":{}},"component":{}}],["oct",{"_index":3042,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["of(examplestringid",{"_index":6323,"title":{},"name":{},"text":{"93":{}},"component":{}}],["of(str",{"_index":5920,"title":{},"name":{},"text":{"64":{},"93":{},"131":{},"199":{}},"component":{}}],["of(uuid",{"_index":5918,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["offer",{"_index":300,"title":{},"name":{},"text":{"5":{},"23":{},"29":{},"48":{},"64":{},"66":{},"70":{},"90":{},"95":{},"115":{},"131":{},"134":{},"138":{},"158":{},"163":{},"183":{},"199":{},"202":{}},"component":{}}],["offici",{"_index":681,"title":{},"name":{},"text":{"18":{},"19":{},"22":{},"24":{},"26":{},"46":{},"53":{},"84":{},"85":{},"88":{},"89":{},"92":{},"113":{},"120":{},"152":{},"153":{},"156":{},"157":{},"160":{},"181":{},"188":{}},"component":{}}],["offlin",{"_index":662,"title":{},"name":{},"text":{"18":{},"85":{},"153":{}},"component":{}}],["ok",{"_index":974,"title":{},"name":{},"text":{"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"37":{},"50":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"95":{},"104":{},"117":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"169":{},"185":{}},"component":{}}],["okbutton",{"_index":1782,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["okmenu",{"_index":4743,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["ol",{"_index":2697,"title":{},"name":{},"text":{"26":{}},"component":{}}],["old",{"_index":632,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"27":{},"40":{},"44":{},"57":{},"60":{},"64":{},"83":{},"87":{},"89":{},"92":{},"107":{},"109":{},"125":{},"128":{},"131":{},"151":{},"155":{},"157":{},"160":{},"175":{},"179":{},"192":{},"196":{},"199":{}},"component":{}}],["older",{"_index":31,"title":{},"name":{},"text":{"1":{},"20":{},"26":{},"27":{},"34":{},"45":{},"46":{},"67":{},"86":{},"92":{},"93":{},"101":{},"112":{},"113":{},"135":{},"154":{},"161":{},"172":{},"180":{},"181":{}},"component":{}}],["oldurl",{"_index":2226,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["oldvalu",{"_index":5263,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["omit",{"_index":4914,"title":{},"name":{},"text":{"55":{},"60":{},"63":{},"113":{},"122":{},"128":{},"132":{},"181":{},"190":{},"196":{},"200":{}},"component":{}}],["on",{"_index":45,"title":{"23":{},"90":{},"158":{}},"name":{"23":{},"90":{},"158":{}},"text":{"1":{},"4":{},"5":{},"9":{},"16":{},"18":{},"19":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"36":{},"39":{},"40":{},"43":{},"46":{},"48":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"67":{},"70":{},"71":{},"75":{},"82":{},"84":{},"85":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"103":{},"106":{},"107":{},"110":{},"113":{},"115":{},"117":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"135":{},"138":{},"139":{},"143":{},"150":{},"152":{},"153":{},"157":{},"158":{},"162":{},"163":{},"168":{},"174":{},"175":{},"178":{},"181":{},"183":{},"185":{},"187":{},"188":{},"189":{},"190":{},"191":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{}},"component":{}}],["on('mousedown",{"_index":3235,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["onc",{"_index":46,"title":{},"name":{},"text":{"1":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"39":{},"40":{},"42":{},"43":{},"46":{},"50":{},"51":{},"53":{},"56":{},"61":{},"63":{},"67":{},"82":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"106":{},"107":{},"108":{},"110":{},"113":{},"117":{},"118":{},"120":{},"123":{},"128":{},"129":{},"132":{},"135":{},"150":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"174":{},"175":{},"177":{},"178":{},"181":{},"185":{},"186":{},"188":{},"191":{},"196":{},"197":{},"200":{}},"component":{}}],["once.if",{"_index":5183,"title":{},"name":{},"text":{"60":{}},"component":{}}],["once.th",{"_index":5211,"title":{},"name":{},"text":{"60":{}},"component":{}}],["one(\"on",{"_index":5902,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["onlin",{"_index":4804,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["onlyvis",{"_index":6168,"title":{},"name":{},"text":{"92":{}},"component":{}}],["onsingleordoubleclick",{"_index":6180,"title":{},"name":{},"text":{"92":{}},"component":{}}],["onthemechang",{"_index":1276,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["onto",{"_index":5205,"title":{},"name":{},"text":{"60":{},"63":{},"128":{},"132":{},"196":{},"200":{}},"component":{}}],["oomph",{"_index":500,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["opac",{"_index":3132,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["opaqu",{"_index":5075,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["open",{"_index":200,"title":{"100":{},"171":{}},"name":{},"text":{"4":{},"5":{},"11":{},"14":{},"16":{},"19":{},"21":{},"22":{},"23":{},"24":{},"27":{},"28":{},"29":{},"32":{},"40":{},"41":{},"44":{},"46":{},"50":{},"60":{},"61":{},"70":{},"71":{},"77":{},"80":{},"82":{},"84":{},"87":{},"88":{},"89":{},"90":{},"93":{},"94":{},"95":{},"98":{},"100":{},"107":{},"109":{},"111":{},"113":{},"117":{},"128":{},"129":{},"138":{},"139":{},"145":{},"148":{},"150":{},"152":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"166":{},"171":{},"175":{},"176":{},"179":{},"181":{},"185":{},"196":{},"197":{}},"component":{}}],["openssl",{"_index":2505,"title":{},"name":{},"text":{"26":{}},"component":{}}],["oper",{"_index":857,"title":{},"name":{},"text":{"19":{},"23":{},"26":{},"28":{},"38":{},"39":{},"40":{},"44":{},"45":{},"48":{},"63":{},"65":{},"66":{},"84":{},"90":{},"94":{},"105":{},"106":{},"107":{},"109":{},"112":{},"115":{},"132":{},"133":{},"134":{},"152":{},"158":{},"162":{},"173":{},"174":{},"175":{},"179":{},"180":{},"183":{},"200":{},"201":{},"202":{}},"component":{}}],["opera",{"_index":2926,"title":{},"name":{},"text":{"27":{},"45":{},"112":{},"180":{}},"component":{}}],["operationcomplet",{"_index":3618,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["operationcompleted.setblocking(fals",{"_index":3622,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["operationcompleted.waitfor",{"_index":3624,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["opportun",{"_index":3504,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["opt",{"_index":3758,"title":{},"name":{},"text":{"40":{},"59":{},"107":{},"127":{},"175":{},"195":{}},"component":{}}],["optim",{"_index":1964,"title":{"53-11":{},"120-11":{},"188-11":{}},"name":{},"text":{"23":{},"46":{},"90":{},"113":{},"158":{},"181":{}},"component":{}}],["option",{"_index":409,"title":{"43-2":{},"92-18":{},"110-2":{},"178-2":{}},"name":{},"text":{"9":{},"19":{},"20":{},"23":{},"26":{},"29":{},"35":{},"38":{},"39":{},"40":{},"43":{},"46":{},"56":{},"59":{},"61":{},"63":{},"64":{},"66":{},"75":{},"84":{},"86":{},"90":{},"92":{},"93":{},"95":{},"102":{},"105":{},"106":{},"107":{},"110":{},"113":{},"123":{},"127":{},"129":{},"131":{},"132":{},"134":{},"143":{},"152":{},"154":{},"158":{},"163":{},"167":{},"173":{},"174":{},"175":{},"178":{},"181":{},"191":{},"195":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["options.autocolor",{"_index":5072,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.bubble.minbubbles",{"_index":5107,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.bubble.sizeoflargestbubbl",{"_index":5105,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.check",{"_index":5081,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.click",{"_index":5080,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.colorschem",{"_index":5073,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.fulfillment.startvalu",{"_index":5109,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.handleres",{"_index":5088,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.maxseg",{"_index":5076,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.numberformatt",{"_index":5090,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.othersegmentclick",{"_index":5082,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.plugins.legend.click",{"_index":5084,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.plugins.tooltip.cssclass",{"_index":5104,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.reformatlabel",{"_index":5093,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.salesfunnel.calcconversionr",{"_index":5112,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.salesfunnel.norm",{"_index":5111,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.speedo.greenareaposit",{"_index":5114,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.transpar",{"_index":5074,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.venn.numberofcircl",{"_index":5116,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.xlabelmap",{"_index":5085,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["options.ylabelmap",{"_index":5086,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["optionsform.class",{"_index":1314,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["optionsmenu",{"_index":1274,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["optlist",{"_index":5852,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["oracl",{"_index":5425,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["oracle.jdbc.oracledriv",{"_index":4100,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["orang",{"_index":2808,"title":{},"name":{},"text":{"26":{},"34":{},"101":{},"172":{}},"component":{}}],["orchestr",{"_index":2041,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order",{"_index":406,"title":{"40-13":{},"107-13":{},"175-13":{}},"name":{},"text":{"9":{},"17":{},"22":{},"23":{},"24":{},"27":{},"32":{},"39":{},"40":{},"41":{},"43":{},"44":{},"46":{},"48":{},"51":{},"52":{},"53":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"75":{},"83":{},"88":{},"89":{},"90":{},"98":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"115":{},"118":{},"119":{},"120":{},"122":{},"123":{},"124":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"143":{},"151":{},"156":{},"157":{},"158":{},"166":{},"174":{},"175":{},"176":{},"178":{},"179":{},"181":{},"183":{},"186":{},"187":{},"188":{},"190":{},"191":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["order(1",{"_index":1285,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(10",{"_index":1298,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(1000",{"_index":1853,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(2",{"_index":1292,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(20",{"_index":1306,"title":{},"name":{},"text":{"23":{},"53":{},"90":{},"120":{},"158":{},"188":{}},"component":{}}],["order(2000",{"_index":1863,"title":{},"name":{},"text":{"23":{},"48":{},"90":{},"115":{},"158":{},"183":{}},"component":{}}],["order(30",{"_index":1315,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(3000",{"_index":4665,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["order(40",{"_index":1784,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(5",{"_index":1452,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(50",{"_index":1922,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(6",{"_index":1461,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(60",{"_index":1931,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["order(9",{"_index":2367,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["orfilt",{"_index":3601,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["org.apache.cxf",{"_index":5414,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.apache.cxf.transport.servlet.cxfservlet",{"_index":5421,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.apache.derbi",{"_index":1507,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.codehaus.mojo:properti",{"_index":6119,"title":{},"name":{},"text":{"92":{}},"component":{}}],["org.eclipse.contacts.shar",{"_index":254,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["org.eclipse.jdt.apt.aptenabled=tru",{"_index":5478,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.jdt.apt.gensrcdir=target/gener",{"_index":5686,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.jdt.apt.processoroptions/consolelog=tru",{"_index":5688,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.jdt.apt.reconcileenabled=tru",{"_index":5689,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.jdt.core.compiler.processannotations=en",{"_index":5477,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout",{"_index":1225,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.app",{"_index":443,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["org.eclipse.scout.apps.helloscout.server.war",{"_index":780,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["org.eclipse.scout.apps.helloscout.ui.html.war",{"_index":782,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["org.eclipse.scout.apps.helloworld.client.helloworld",{"_index":388,"title":{},"name":{},"text":{"8":{},"12":{},"14":{},"29":{},"74":{},"78":{},"80":{},"95":{},"142":{},"146":{},"148":{},"163":{}},"component":{}}],["org.eclipse.scout.apps.helloworld.server.helloworld",{"_index":404,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"14":{},"29":{},"74":{},"76":{},"78":{},"80":{},"95":{},"142":{},"144":{},"146":{},"148":{},"163":{}},"component":{}}],["org.eclipse.scout.apps.helloworld.shared.helloworld",{"_index":365,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"29":{},"73":{},"74":{},"76":{},"78":{},"79":{},"95":{},"141":{},"142":{},"144":{},"146":{},"147":{},"163":{}},"component":{}}],["org.eclipse.scout.contact",{"_index":1502,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.cli",{"_index":1337,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.client.common",{"_index":1342,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.client.contact",{"_index":1236,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.client.helloworld",{"_index":1228,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.client.organ",{"_index":1341,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.client.person",{"_index":1339,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.client.set",{"_index":1229,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.client.work",{"_index":1240,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.serv",{"_index":1504,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.server.helloworld",{"_index":1231,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.server.secur",{"_index":2011,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.server.sql",{"_index":1515,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.shared.common",{"_index":2119,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.shared.helloworld",{"_index":1233,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.shared.organ",{"_index":2336,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.contacts.shared.person",{"_index":1841,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.docs.snippet",{"_index":5753,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["org.eclipse.scout.docs.snippets.jaxwssnippet.pingwebserviceporttyp",{"_index":5548,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.docs.snippets.person.personformmainboxextens",{"_index":4677,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["org.eclipse.scout.docs.snippets.rest.restrequestcancellationservletfilt",{"_index":6096,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["org.eclipse.scout.docs.ws.p",{"_index":5515,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.docs.ws.ping.pingwebserviceentrypoint_authhandl",{"_index":5541,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.docs.ws.ping.pingwebserviceentrypoint_correlationidhandl",{"_index":5543,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.docs.ws.ping.pingwebserviceentrypoint_ipaddressfilt",{"_index":5542,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.docs.ws.ping.pingwebserviceentrypoint_loghandl",{"_index":5540,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.docs.ws.ping2",{"_index":5578,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.docs.ws.pingwebservice.pingwebserviceporttyp",{"_index":5673,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html",{"_index":3205,"title":{},"name":{},"text":{"36":{},"37":{},"103":{},"104":{},"168":{},"169":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html.app.dev",{"_index":3285,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html.app.dev/[org.eclipse.scout.helloj",{"_index":3309,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html.app.dev/src/main/webapp/web",{"_index":3287,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html.app.war",{"_index":3286,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html.app.war/src/main/webapp/web",{"_index":3289,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html.app/src/main/resources/webcont",{"_index":3274,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html.helloworld",{"_index":3295,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html/pom.xml",{"_index":3277,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.hellojs.ui.html/src/main/java/org/eclipse/scout/hellojs/ui/html/helloworld/serverstateservice.java",{"_index":3294,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.helloworld.shar",{"_index":2983,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["org.eclipse.scout.jaxws.apt",{"_index":5440,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.jaxws.apt.jaxwsannotationprocessor",{"_index":5670,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.scout.rt",{"_index":1505,"title":{},"name":{},"text":{"23":{},"26":{},"33":{},"35":{},"37":{},"66":{},"90":{},"92":{},"99":{},"102":{},"104":{},"134":{},"158":{},"160":{},"167":{},"169":{},"170":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.chart.cli",{"_index":3018,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["org.eclipse.scout.rt.chart.shar",{"_index":3019,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["org.eclipse.scout.rt.chart.ui.html",{"_index":3020,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["org.eclipse.scout.rt.client.ui.desktop.bench.layout.flexboxlayoutdata",{"_index":4573,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["org.eclipse.scout.rt.client.ui.form.js.abstractjsform",{"_index":6345,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["org.eclipse.scout.rt.datamodel.cli",{"_index":2857,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.scout.rt.datamodel.serv",{"_index":2859,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.scout.rt.datamodel.shar",{"_index":2862,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.scout.rt.datamodel.ui.html",{"_index":2863,"title":{},"name":{},"text":{"26":{}},"component":{}}],["org.eclipse.scout.rt.dataobject",{"_index":3846,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.dataobject.dataobjectinventori",{"_index":5889,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["org.eclipse.scout.rt.dataobject.doentity.equals(object",{"_index":5839,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["org.eclipse.scout.rt.dataobject.donode.equals(object",{"_index":5840,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["org.eclipse.scout.rt.dataobject.enumeration.enumresolv",{"_index":5899,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["org.eclipse.scout.rt.dataobject.enumeration.ienum",{"_index":5896,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["org.eclipse.scout.rt.dataobject.id.iid",{"_index":5910,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["org.eclipse.scout.rt.dataobject.id.nodeid",{"_index":6302,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.dataobject.id.nodeid.curr",{"_index":6298,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.jackson",{"_index":2736,"title":{},"name":{},"text":{"26":{},"64":{},"131":{},"199":{}},"component":{}}],["org.eclipse.scout.rt.jackson.dataobject.jacksondataobjectmapp",{"_index":3848,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.mail.charsetsafemimemessag",{"_index":4397,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["org.eclipse.scout.rt.mail.mailattach",{"_index":4394,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["org.eclipse.scout.rt.mail.mailhelp",{"_index":4395,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["org.eclipse.scout.rt.mail.mailmessag",{"_index":4387,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["org.eclipse.scout.rt.mail.mailparticip",{"_index":4391,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["org.eclipse.scout.rt.mail.smtp.smtphelp",{"_index":4352,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["org.eclipse.scout.rt.mail.smtp.smtpserverconfig",{"_index":4354,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["org.eclipse.scout.rt.mom.api.imomimplementor",{"_index":4059,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.mom.api.marshaller.imarshal",{"_index":4071,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.@applicationscop",{"_index":3748,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.@bean",{"_index":3738,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.@beaninvocationhint",{"_index":3788,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.@createimmedi",{"_index":3751,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.@ignorebean",{"_index":3742,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.@ord",{"_index":3765,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.@replac",{"_index":3766,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.bean",{"_index":3753,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.config.abstractlongconfigproperti",{"_index":3816,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.config.abstractmapconfigproperti",{"_index":3832,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.config.configpropertyvalid",{"_index":3869,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.config.iconfigproperti",{"_index":3815,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.config.iconfigurationvalid",{"_index":3867,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.config.ijsonpropertyread",{"_index":3845,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.config.platformconfigproperties.applicationnameproperti",{"_index":3860,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.config.propertieshelp",{"_index":3826,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.context.nodeidentifi",{"_index":6304,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.platform.context.nodeidentifier.get",{"_index":6299,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.platform.dataobject.idataobjectmapp",{"_index":3847,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.exception.processingexcept",{"_index":6435,"title":{},"name":{},"text":{"160":{}},"component":{}}],["org.eclipse.scout.rt.platform.exception.remotesystemunavailableexcept",{"_index":6434,"title":{},"name":{},"text":{"160":{}},"component":{}}],["org.eclipse.scout.rt.platform.html.html",{"_index":4259,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["org.eclipse.scout.rt.platform.ibeandecorationfactori",{"_index":3785,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.ignorebean",{"_index":3858,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.iplatform",{"_index":3699,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.iplatform.st",{"_index":3703,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.iplatformlisten",{"_index":3706,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.nls.itextpostprocessor",{"_index":2934,"title":{},"name":{},"text":{"27":{}},"component":{}}],["org.eclipse.scout.rt.platform.platform",{"_index":3700,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.replac",{"_index":3859,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.security.configfilecredentialverifi",{"_index":3892,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.security.configfilecredentialverifier.main",{"_index":3906,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.security.securityutil",{"_index":2502,"title":{},"name":{},"text":{"26":{},"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.platform.status.istatu",{"_index":3300,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.rt.platform.status.statu",{"_index":2831,"title":{},"name":{},"text":{"26":{},"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.rt.platform.util.decimal$defaultdecimalsupportprovid",{"_index":4141,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.rest",{"_index":3278,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.rest.client.proxy.abstractentityrestclientexceptiontransform",{"_index":6027,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.rest.client.restclientproperti",{"_index":6054,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.rest.client.restclientproperties.proxy_uri",{"_index":6056,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.rest.client.restclientproperties.use_scout_apache_connector",{"_index":6062,"title":{},"name":{},"text":{"66":{}},"component":{}}],["org.eclipse.scout.rt.rest.csrf.anticsrfhelp",{"_index":5983,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.rest.doc.apidocdescript",{"_index":2949,"title":{},"name":{},"text":{"27":{}},"component":{}}],["org.eclipse.scout.rt.rest.irestresourc",{"_index":3301,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["org.eclipse.scout.rt.rest.jackson",{"_index":6007,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.rest.restappl",{"_index":3293,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.server.commons.healthcheck.abstracthealthchecker.execcheckhealth(healthcheckcategoryid",{"_index":6339,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.server.commons.healthcheck.abstracthealthcheckservlet",{"_index":6334,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.server.commons.healthcheck.ihealthchecker.acceptcategory(healthcheckcategoryid",{"_index":6336,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.server.commons.healthcheck.ihealthchecker.checkhealth(runcontext",{"_index":6338,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.server.commons.servlet.contentsecuritypolici",{"_index":3939,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.server.context.httpserverruncontextfilt",{"_index":6006,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.server.jaxws.implementor.jaxwsimplementorspecif",{"_index":4005,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.server.jaxws.provider.auth.method.basicauthenticationmethod",{"_index":4014,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.server.jaxws.provider.handler.handlerdeleg",{"_index":4018,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.server.jdbc",{"_index":1506,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["org.eclipse.scout.rt.shared.@tunneltoserv",{"_index":3743,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.shared.extension.iextensibleobject",{"_index":4631,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["org.eclipse.scout.rt.shared.http.apachehttptransportfactori",{"_index":3984,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.shared.http.ihttptransportfactori",{"_index":3983,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt.shared.http.proxy.configurableproxyselector",{"_index":6059,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["org.eclipse.scout.rt.shared.inod",{"_index":6305,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.shared.inode#id",{"_index":6301,"title":{},"name":{},"text":{"93":{}},"component":{}}],["org.eclipse.scout.rt.shared.notification.inotificationhandl",{"_index":5323,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["org.eclipse.scout.rt:org.eclipse.scout.rt.dataobject",{"_index":3849,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.scout.rt:org.eclipse.scout.rt.jackson",{"_index":3850,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["org.eclipse.ws.common",{"_index":5466,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.eclipse.ws.yourfirstwebservic",{"_index":5463,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org.glassfish.jersey.contain",{"_index":3279,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["org.glassfish.jersey.inject",{"_index":3281,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["org.glassfish.jersey.media",{"_index":3283,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["org.glassfish.jersey.servlet.servletcontain",{"_index":3291,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["org.jboss.jandex:jandex",{"_index":6122,"title":{},"name":{},"text":{"92":{}},"component":{}}],["org.jboss:jandex",{"_index":6120,"title":{},"name":{},"text":{"92":{}},"component":{}}],["org.kuali.maven.plugins:properti",{"_index":6118,"title":{},"name":{},"text":{"92":{}},"component":{}}],["org.scout.hello",{"_index":4772,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["org.scout.hello.cli",{"_index":4773,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["org.springframework",{"_index":5415,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["org/eclipse/scout/contacts/shar",{"_index":255,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["org/scout/hello/client/icon",{"_index":4774,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["organ",{"_index":535,"title":{"23-9":{},"23-23":{},"23-41":{},"23-42":{},"23-44":{},"29-5":{},"90-9":{},"90-23":{},"90-41":{},"90-42":{},"90-44":{},"95-5":{},"158-9":{},"158-23":{},"158-41":{},"158-42":{},"158-44":{},"163-5":{}},"name":{},"text":{"16":{},"23":{},"29":{},"62":{},"63":{},"82":{},"90":{},"95":{},"130":{},"132":{},"150":{},"158":{},"163":{},"198":{},"200":{}},"component":{}}],["organis",{"_index":853,"title":{"62-2":{},"130-2":{},"198-2":{}},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["organization_create_t",{"_index":1573,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organization_fk",{"_index":1595,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organization_id",{"_index":1574,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organization_lookup",{"_index":2354,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organization_page_data_select_into",{"_index":1669,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organization_page_select",{"_index":1668,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organization_pk",{"_index":1578,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationcolumn",{"_index":1419,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationfield",{"_index":1947,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationform",{"_index":2249,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationformdata",{"_index":2312,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationid",{"_index":1488,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationidcolumn",{"_index":1489,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationlookupcal",{"_index":2339,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationlookupcall.class",{"_index":2363,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationlookupservic",{"_index":2342,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationnod",{"_index":2395,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationnodepag",{"_index":2373,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationnodetablepag",{"_index":2396,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationservic",{"_index":1655,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["organizationtablepag",{"_index":580,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["organizationtablepagedata",{"_index":1654,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["orig",{"_index":1171,"title":{},"name":{},"text":{"22":{},"23":{},"88":{},"90":{},"156":{},"158":{}},"component":{}}],["origin",{"_index":2117,"title":{},"name":{},"text":{"23":{},"26":{},"27":{},"39":{},"40":{},"43":{},"48":{},"60":{},"90":{},"106":{},"107":{},"110":{},"115":{},"128":{},"158":{},"174":{},"175":{},"178":{},"183":{},"196":{}},"component":{}}],["os",{"_index":840,"title":{},"name":{},"text":{"19":{},"53":{},"84":{},"120":{},"152":{},"188":{}},"component":{}}],["other",{"_index":3701,"title":{},"name":{},"text":{"40":{},"48":{},"59":{},"60":{},"62":{},"63":{},"107":{},"115":{},"124":{},"127":{},"128":{},"130":{},"132":{},"175":{},"183":{},"193":{},"195":{},"196":{},"198":{},"200":{}},"component":{}}],["other.m_companyid",{"_index":4326,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["otherconfig",{"_index":6387,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["otherconfig.extern",{"_index":6390,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["otherwis",{"_index":1708,"title":{},"name":{},"text":{"23":{},"26":{},"28":{},"38":{},"39":{},"40":{},"41":{},"46":{},"48":{},"50":{},"56":{},"63":{},"90":{},"92":{},"94":{},"105":{},"106":{},"107":{},"111":{},"113":{},"115":{},"117":{},"123":{},"132":{},"158":{},"162":{},"173":{},"174":{},"175":{},"176":{},"181":{},"183":{},"185":{},"191":{},"200":{}},"component":{}}],["out",{"_index":89,"title":{},"name":{},"text":{"1":{},"18":{},"20":{},"22":{},"23":{},"27":{},"30":{},"32":{},"40":{},"46":{},"47":{},"59":{},"65":{},"67":{},"85":{},"86":{},"88":{},"90":{},"93":{},"96":{},"98":{},"107":{},"113":{},"114":{},"127":{},"133":{},"135":{},"153":{},"154":{},"156":{},"158":{},"161":{},"164":{},"166":{},"175":{},"181":{},"182":{},"195":{},"201":{}},"component":{}}],["outcom",{"_index":5988,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["outdir",{"_index":6376,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["outer",{"_index":4708,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["outform",{"_index":2517,"title":{},"name":{},"text":{"26":{}},"component":{}}],["outgo",{"_index":5630,"title":{},"name":{},"text":{"63":{},"66":{},"132":{},"134":{},"200":{},"202":{}},"component":{}}],["outlin",{"_index":577,"title":{"23-14":{},"90-14":{},"158-14":{}},"name":{},"text":{"16":{},"22":{},"23":{},"26":{},"41":{},"82":{},"88":{},"90":{},"111":{},"150":{},"156":{},"158":{},"176":{}},"component":{}}],["output",{"_index":1009,"title":{"43-8":{},"110-8":{},"178-8":{}},"name":{},"text":{"21":{},"24":{},"26":{},"43":{},"46":{},"51":{},"58":{},"87":{},"89":{},"100":{},"110":{},"113":{},"118":{},"126":{},"155":{},"157":{},"171":{},"178":{},"181":{},"186":{},"194":{}},"component":{}}],["outputdata",{"_index":6355,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["outsid",{"_index":2745,"title":{},"name":{},"text":{"26":{},"92":{}},"component":{}}],["over",{"_index":1520,"title":{},"name":{},"text":{"23":{},"39":{},"43":{},"47":{},"53":{},"59":{},"60":{},"63":{},"90":{},"100":{},"106":{},"110":{},"114":{},"120":{},"127":{},"128":{},"132":{},"158":{},"171":{},"174":{},"178":{},"182":{},"188":{},"195":{},"196":{},"200":{}},"component":{}}],["overcom",{"_index":4788,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["overflow",{"_index":1034,"title":{},"name":{},"text":{"21":{},"22":{},"24":{},"40":{},"87":{},"88":{},"89":{},"107":{},"155":{},"156":{},"157":{},"175":{}},"component":{}}],["overhead",{"_index":4424,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["overlay",{"_index":4729,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["overload",{"_index":3583,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["overrid",{"_index":571,"title":{},"name":{},"text":{"16":{},"23":{},"26":{},"27":{},"33":{},"34":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"52":{},"53":{},"55":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"82":{},"90":{},"99":{},"100":{},"101":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"119":{},"120":{},"122":{},"123":{},"125":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"150":{},"158":{},"170":{},"171":{},"172":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"187":{},"188":{},"190":{},"191":{},"192":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["overridden",{"_index":3812,"title":{},"name":{},"text":{"40":{},"59":{},"63":{},"64":{},"107":{},"127":{},"131":{},"132":{},"175":{},"195":{},"199":{},"200":{}},"component":{}}],["overview",{"_index":6,"title":{"1":{},"67":{},"135":{},"23-2":{},"29-9":{},"48-6":{},"65-7":{},"90-2":{},"95-9":{},"115-6":{},"133-7":{},"158-2":{},"163-9":{},"183-6":{},"201-7":{}},"name":{},"text":{"16":{},"29":{},"47":{},"63":{},"82":{},"95":{},"114":{},"132":{},"150":{},"163":{},"182":{},"200":{}},"component":{}}],["overwrit",{"_index":3671,"title":{},"name":{},"text":{"39":{},"48":{},"57":{},"63":{},"106":{},"115":{},"125":{},"132":{},"174":{},"183":{},"192":{},"200":{}},"component":{}}],["overwritecod",{"_index":5364,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["overwritten",{"_index":4165,"title":{},"name":{},"text":{"41":{},"63":{},"111":{},"132":{},"176":{},"200":{}},"component":{}}],["owasp",{"_index":4239,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["owner",{"_index":3614,"title":{"60-11":{},"128-13":{},"196-13":{}},"name":{},"text":{"39":{},"48":{},"60":{},"106":{},"115":{},"128":{},"174":{},"183":{},"196":{}},"component":{}}],["ownerbox",{"_index":4656,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["ownerform",{"_index":4692,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["ownership",{"_index":3611,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["p",{"_index":4269,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["p).getcompanyid",{"_index":4315,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["p.getclass",{"_index":4311,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["p2",{"_index":2470,"title":{},"name":{},"text":{"26":{},"92":{},"160":{}},"component":{}}],["pack",{"_index":4530,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["packag",{"_index":126,"title":{"23-10":{},"29-4":{},"29-8":{},"90-10":{},"95-4":{},"95-8":{},"158-10":{},"163-4":{},"163-8":{}},"name":{},"text":{"3":{},"4":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"37":{},"40":{},"46":{},"62":{},"63":{},"69":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"94":{},"95":{},"100":{},"104":{},"107":{},"113":{},"124":{},"130":{},"132":{},"137":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"162":{},"163":{},"169":{},"171":{},"175":{},"181":{},"193":{},"198":{},"200":{}},"component":{}}],["package.json",{"_index":933,"title":{},"name":{},"text":{"20":{},"22":{},"26":{},"33":{},"35":{},"46":{},"86":{},"88":{},"92":{},"99":{},"102":{},"113":{},"124":{},"154":{},"156":{},"160":{},"167":{},"170":{},"181":{},"193":{}},"component":{}}],["packagenam",{"_index":5467,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["packages=tru",{"_index":2606,"title":{},"name":{},"text":{"26":{}},"component":{}}],["pad",{"_index":1157,"title":{},"name":{},"text":{"22":{},"26":{},"53":{},"88":{},"120":{},"156":{},"188":{}},"component":{}}],["page",{"_index":17,"title":{"12-1":{},"23-9":{},"23-12":{},"23-13":{},"23-14":{},"23-15":{},"23-44":{},"26-27":{},"29-14":{},"78-1":{},"90-9":{},"90-12":{},"90-13":{},"90-14":{},"90-15":{},"90-44":{},"95-14":{},"146-1":{},"158-9":{},"158-12":{},"158-13":{},"158-14":{},"158-15":{},"158-44":{},"163-14":{}},"name":{},"text":{"1":{},"6":{},"12":{},"14":{},"16":{},"19":{},"20":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"37":{},"38":{},"43":{},"52":{},"53":{},"56":{},"61":{},"63":{},"67":{},"72":{},"78":{},"80":{},"82":{},"84":{},"86":{},"87":{},"89":{},"90":{},"92":{},"94":{},"95":{},"104":{},"105":{},"110":{},"119":{},"120":{},"123":{},"129":{},"132":{},"135":{},"140":{},"146":{},"148":{},"150":{},"152":{},"154":{},"155":{},"157":{},"158":{},"162":{},"163":{},"169":{},"173":{},"178":{},"187":{},"188":{},"191":{},"197":{},"200":{}},"component":{}}],["page.c",{"_index":1672,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["page.countri",{"_index":1673,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["page.detailform",{"_index":2739,"title":{},"name":{},"text":{"26":{}},"component":{}}],["page.detailt",{"_index":2740,"title":{},"name":{},"text":{"26":{}},"component":{}}],["page.homepag",{"_index":1674,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["page.nam",{"_index":1671,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["page.organizationid",{"_index":1670,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pagedata",{"_index":1665,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pagedata(organizationtablepagedata.class",{"_index":1475,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pagedata(persontablepagedata.class",{"_index":1369,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pagelist",{"_index":575,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["pagelist.add(new",{"_index":578,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["pagelist.add(persontablepag",{"_index":2404,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["page’",{"_index":2393,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pair",{"_index":2499,"title":{},"name":{},"text":{"26":{},"38":{},"39":{},"40":{},"64":{},"105":{},"106":{},"107":{},"131":{},"173":{},"174":{},"175":{},"199":{}},"component":{}}],["palett",{"_index":911,"title":{},"name":{},"text":{"20":{},"34":{},"56":{},"86":{},"101":{},"123":{},"154":{},"172":{},"191":{}},"component":{}}],["paragraph",{"_index":3473,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["parallel",{"_index":2600,"title":{},"name":{},"text":{"26":{},"39":{},"44":{},"106":{},"109":{},"174":{},"179":{}},"component":{}}],["param",{"_index":5533,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["paramet",{"_index":342,"title":{"92-18":{}},"name":{},"text":{"5":{},"6":{},"11":{},"19":{},"23":{},"28":{},"29":{},"38":{},"39":{},"40":{},"44":{},"46":{},"48":{},"56":{},"57":{},"60":{},"62":{},"63":{},"64":{},"65":{},"70":{},"72":{},"77":{},"84":{},"90":{},"92":{},"93":{},"94":{},"95":{},"105":{},"106":{},"107":{},"109":{},"113":{},"115":{},"123":{},"125":{},"128":{},"130":{},"131":{},"132":{},"133":{},"138":{},"140":{},"145":{},"152":{},"158":{},"162":{},"163":{},"173":{},"174":{},"175":{},"179":{},"181":{},"183":{},"191":{},"192":{},"196":{},"198":{},"199":{},"200":{},"201":{}},"component":{}}],["parameter",{"_index":5532,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["parameterstyle.bar",{"_index":5662,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["parent",{"_index":327,"title":{"60-11":{},"128-13":{},"196-13":{}},"name":{},"text":{"5":{},"14":{},"23":{},"26":{},"27":{},"29":{},"35":{},"42":{},"54":{},"59":{},"60":{},"62":{},"63":{},"65":{},"70":{},"80":{},"90":{},"92":{},"93":{},"95":{},"102":{},"108":{},"121":{},"127":{},"128":{},"130":{},"132":{},"133":{},"138":{},"148":{},"158":{},"160":{},"163":{},"167":{},"177":{},"189":{},"195":{},"196":{},"198":{},"200":{},"201":{}},"component":{}}],["parent.$contain",{"_index":5289,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["parent.th",{"_index":5201,"title":{},"name":{},"text":{"60":{}},"component":{}}],["parent.to",{"_index":5200,"title":{},"name":{},"text":{"60":{}},"component":{}}],["parent/child",{"_index":5298,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["parentid",{"_index":2940,"title":{},"name":{},"text":{"27":{}},"component":{}}],["parentkey",{"_index":5062,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["parent’",{"_index":5294,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["pars",{"_index":3843,"title":{},"name":{},"text":{"40":{},"58":{},"107":{},"126":{},"175":{},"194":{}},"component":{}}],["parser",{"_index":2594,"title":{"51":{},"118":{},"186":{},"58-1":{},"58-2":{},"126-1":{},"126-2":{},"194-1":{},"194-2":{}},"name":{"51":{},"118":{},"186":{}},"text":{"26":{},"46":{},"51":{},"56":{},"58":{},"92":{},"118":{},"123":{},"126":{},"186":{},"191":{},"194":{}},"component":{}}],["parser(displaytext",{"_index":5035,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["parseropt",{"_index":2597,"title":{},"name":{},"text":{"26":{},"46":{}},"component":{}}],["parsevalu",{"_index":5013,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["part",{"_index":92,"title":{},"name":{},"text":{"1":{},"2":{},"16":{},"19":{},"20":{},"22":{},"23":{},"24":{},"26":{},"32":{},"33":{},"35":{},"40":{},"43":{},"46":{},"47":{},"48":{},"49":{},"53":{},"56":{},"60":{},"63":{},"64":{},"65":{},"67":{},"68":{},"82":{},"84":{},"86":{},"88":{},"89":{},"90":{},"92":{},"98":{},"99":{},"102":{},"107":{},"110":{},"113":{},"114":{},"115":{},"116":{},"120":{},"123":{},"128":{},"131":{},"132":{},"133":{},"135":{},"136":{},"150":{},"152":{},"154":{},"156":{},"157":{},"158":{},"160":{},"161":{},"166":{},"167":{},"170":{},"175":{},"178":{},"181":{},"182":{},"183":{},"184":{},"188":{},"191":{},"196":{},"199":{},"200":{},"201":{}},"component":{}}],["parti",{"_index":1000,"title":{"26-8":{},"26-10":{},"26-11":{},"27-13":{},"92-8":{},"92-9":{}},"name":{},"text":{"21":{},"24":{},"26":{},"43":{},"46":{},"48":{},"87":{},"89":{},"110":{},"113":{},"115":{},"124":{},"155":{},"157":{},"178":{},"181":{},"183":{},"193":{}},"component":{}}],["partial",{"_index":4036,"title":{},"name":{},"text":{"40":{},"43":{},"107":{},"110":{},"175":{},"178":{}},"component":{}}],["particip",{"_index":3705,"title":{},"name":{},"text":{"40":{},"44":{},"63":{},"107":{},"109":{},"132":{},"175":{},"179":{},"200":{}},"component":{}}],["particular",{"_index":1119,"title":{},"name":{},"text":{"22":{},"39":{},"40":{},"41":{},"50":{},"57":{},"88":{},"93":{},"106":{},"107":{},"111":{},"117":{},"125":{},"156":{},"174":{},"175":{},"176":{},"185":{},"192":{}},"component":{}}],["partit",{"_index":5365,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["partnam",{"_index":5667,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pass",{"_index":1129,"title":{},"name":{},"text":{"22":{},"23":{},"26":{},"33":{},"35":{},"39":{},"40":{},"46":{},"55":{},"56":{},"59":{},"60":{},"65":{},"66":{},"88":{},"90":{},"99":{},"102":{},"106":{},"107":{},"113":{},"122":{},"123":{},"127":{},"128":{},"133":{},"134":{},"156":{},"158":{},"167":{},"170":{},"174":{},"175":{},"181":{},"190":{},"191":{},"195":{},"196":{},"201":{},"202":{}},"component":{}}],["password",{"_index":795,"title":{},"name":{},"text":{"19":{},"40":{},"44":{},"63":{},"84":{},"107":{},"109":{},"132":{},"152":{},"175":{},"179":{},"200":{}},"component":{}}],["password’",{"_index":5696,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["past",{"_index":10,"title":{},"name":{},"text":{"1":{},"11":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"77":{},"86":{},"90":{},"95":{},"103":{},"145":{},"154":{},"158":{},"163":{},"168":{}},"component":{}}],["patch",{"_index":5986,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["path",{"_index":256,"title":{},"name":{},"text":{"4":{},"14":{},"16":{},"17":{},"19":{},"21":{},"22":{},"24":{},"29":{},"37":{},"40":{},"51":{},"52":{},"63":{},"66":{},"71":{},"80":{},"82":{},"83":{},"84":{},"87":{},"88":{},"89":{},"95":{},"104":{},"107":{},"118":{},"119":{},"132":{},"134":{},"139":{},"148":{},"150":{},"151":{},"152":{},"155":{},"156":{},"157":{},"163":{},"169":{},"175":{},"186":{},"187":{},"200":{},"202":{}},"component":{}}],["path(\"/{id",{"_index":6036,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["path(\"cancel",{"_index":6065,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["path(\"exampl",{"_index":5991,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["path(\"serverstatu",{"_index":3302,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["path(\"{id",{"_index":5993,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["path(\"{requestid",{"_index":6067,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["path=auto",{"_index":2609,"title":{},"name":{},"text":{"26":{}},"component":{}}],["pathinfo",{"_index":3945,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["pattern",{"_index":246,"title":{},"name":{},"text":{"4":{},"23":{},"29":{},"40":{},"48":{},"58":{},"60":{},"63":{},"64":{},"65":{},"71":{},"90":{},"95":{},"107":{},"115":{},"126":{},"128":{},"131":{},"132":{},"133":{},"139":{},"158":{},"163":{},"175":{},"183":{},"194":{},"196":{},"199":{},"200":{},"201":{}},"component":{}}],["pattern.matches(email_pattern",{"_index":2080,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["paulu",{"_index":846,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["payload",{"_index":5576,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["peer",{"_index":4050,"title":{},"name":{},"text":{"40":{},"107":{},"113":{},"175":{},"181":{}},"component":{}}],["pem",{"_index":2518,"title":{},"name":{},"text":{"26":{}},"component":{}}],["pencil",{"_index":4941,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["pend",{"_index":3525,"title":{},"name":{},"text":{"39":{},"40":{},"61":{},"106":{},"107":{},"129":{},"174":{},"175":{},"197":{}},"component":{}}],["per",{"_index":245,"title":{},"name":{},"text":{"4":{},"23":{},"29":{},"33":{},"35":{},"39":{},"40":{},"44":{},"61":{},"63":{},"71":{},"90":{},"95":{},"99":{},"102":{},"106":{},"107":{},"109":{},"129":{},"132":{},"139":{},"158":{},"163":{},"167":{},"170":{},"174":{},"175":{},"179":{},"197":{},"200":{}},"component":{}}],["percentag",{"_index":4520,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["perform",{"_index":871,"title":{},"name":{},"text":{"19":{},"21":{},"23":{},"26":{},"39":{},"40":{},"43":{},"46":{},"50":{},"53":{},"55":{},"63":{},"66":{},"84":{},"87":{},"90":{},"92":{},"106":{},"107":{},"110":{},"113":{},"117":{},"120":{},"122":{},"132":{},"134":{},"152":{},"155":{},"158":{},"174":{},"175":{},"178":{},"181":{},"185":{},"188":{},"190":{},"200":{},"202":{}},"component":{}}],["period",{"_index":3829,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["permiss",{"_index":357,"title":{"13-1":{},"79-1":{},"147-1":{}},"name":{},"text":{"6":{},"8":{},"13":{},"23":{},"28":{},"29":{},"43":{},"61":{},"72":{},"74":{},"79":{},"90":{},"94":{},"95":{},"110":{},"129":{},"140":{},"142":{},"147":{},"158":{},"162":{},"163":{},"178":{},"197":{}},"component":{}}],["permission.implies(permiss",{"_index":4270,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["permissioncollection.implies(permiss",{"_index":4268,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["permissionlevel",{"_index":4272,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["permissionlevel.al",{"_index":4299,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["permissionlevel.level_al",{"_index":4296,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["permissionlevel.level_non",{"_index":4293,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["permissionlevel.non",{"_index":4274,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["permissionlevel.register(level_own",{"_index":4297,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["permit",{"_index":3503,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["persist",{"_index":1196,"title":{},"name":{},"text":{"23":{},"32":{},"38":{},"40":{},"64":{},"90":{},"98":{},"105":{},"107":{},"131":{},"158":{},"166":{},"173":{},"175":{},"199":{}},"component":{}}],["person",{"_index":562,"title":{"23-9":{},"23-12":{},"23-14":{},"23-23":{},"23-25":{},"23-26":{},"23-30":{},"23-41":{},"23-43":{},"23-44":{},"90-9":{},"90-12":{},"90-14":{},"90-23":{},"90-25":{},"90-26":{},"90-30":{},"90-41":{},"90-43":{},"90-44":{},"158-9":{},"158-12":{},"158-14":{},"158-23":{},"158-25":{},"158-26":{},"158-30":{},"158-41":{},"158-43":{},"158-44":{}},"name":{},"text":{"16":{},"21":{},"23":{},"24":{},"38":{},"82":{},"87":{},"89":{},"90":{},"105":{},"150":{},"155":{},"157":{},"158":{},"173":{}},"component":{}}],["person'",{"_index":1726,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["person.png",{"_index":4776,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["person.svg",{"_index":5059,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["person_create_t",{"_index":1585,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["person_id",{"_index":1586,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["person_pk",{"_index":1587,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["person_select",{"_index":2151,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["person_upd",{"_index":2155,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["personform",{"_index":587,"title":{},"name":{},"text":{"16":{},"23":{},"46":{},"48":{},"82":{},"90":{},"113":{},"115":{},"150":{},"158":{},"181":{},"183":{}},"component":{}}],["personform().startnew",{"_index":1835,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["personformdata",{"_index":1731,"title":{},"name":{},"text":{"23":{},"48":{},"90":{},"115":{},"158":{},"183":{}},"component":{}}],["personformdata.class",{"_index":1723,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["personformextens",{"_index":4689,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["personformextension(personform",{"_index":4691,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["personformlisten",{"_index":1806,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["personformmainboxextens",{"_index":4654,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["personformmainboxextension(mainbox",{"_index":4655,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["personformmainboxextensiondata",{"_index":4678,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["personformmodel",{"_index":4453,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["personid",{"_index":1404,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["personidcolumn",{"_index":1406,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["personservic",{"_index":1667,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["persont",{"_index":1472,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["persontablechangednotif",{"_index":5315,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["persontablepag",{"_index":579,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["persontablepage.setorganizationid(getorganizationid",{"_index":2403,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["persontablepagedata",{"_index":1683,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["person’",{"_index":1716,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["perspect",{"_index":608,"title":{},"name":{},"text":{"17":{},"23":{},"24":{},"83":{},"89":{},"90":{},"151":{},"157":{},"158":{}},"component":{}}],["phase",{"_index":1599,"title":{},"name":{},"text":{"23":{},"60":{},"90":{},"128":{},"158":{},"196":{}},"component":{}}],["phone",{"_index":1413,"title":{},"name":{},"text":{"23":{},"52":{},"53":{},"61":{},"90":{},"119":{},"120":{},"129":{},"158":{},"187":{},"188":{},"197":{}},"component":{}}],["phone_work",{"_index":1593,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["phonecolumn",{"_index":1414,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["phonefield",{"_index":2006,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["phoneworkfield",{"_index":1948,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pick",{"_index":801,"title":{},"name":{},"text":{"19":{},"59":{},"84":{},"127":{},"152":{},"195":{}},"component":{}}],["pictur",{"_index":1189,"title":{"23-36":{},"90-36":{},"158-36":{}},"name":{},"text":{"23":{},"61":{},"90":{},"129":{},"158":{},"197":{}},"component":{}}],["picture.url",{"_index":2154,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["picture_url",{"_index":1590,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["picturefield",{"_index":1884,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pictureurl",{"_index":2153,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pictureurlfield",{"_index":1877,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pictureurlfield.class",{"_index":1887,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pictureurlform",{"_index":2168,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["pie",{"_index":3090,"title":{},"name":{},"text":{"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["piec",{"_index":1499,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["piggyback",{"_index":4184,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["pin",{"_index":4211,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["ping",{"_index":5486,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["ping(@webparam(nam",{"_index":5668,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["ping(fin",{"_index":5677,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["ping(str",{"_index":5571,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingrequest",{"_index":5669,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingrespons",{"_index":5666,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingresult",{"_index":5613,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebservic",{"_index":5516,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebservice.wsdl",{"_index":5378,"title":{"63-42":{},"132-42":{},"200-42":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebservicecli",{"_index":5583,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceclient1",{"_index":5585,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceclient2",{"_index":5624,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceclient3",{"_index":5631,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceentrypoint",{"_index":5514,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceentrypoint.java",{"_index":5537,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceentrypoint_handl",{"_index":5538,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceentrypointdefinit",{"_index":5489,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceport",{"_index":5517,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceporttyp",{"_index":5545,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceporttype.class",{"_index":5488,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceporttype.java",{"_index":5379,"title":{"63-43":{},"132-43":{},"200-43":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceporttypebean",{"_index":5685,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceporttypebean.java",{"_index":5381,"title":{"63-45":{},"132-45":{},"200-45":{}},"name":{},"text":{},"component":{}}],["pingwebserviceporttypeentrypoint",{"_index":5674,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pingwebserviceporttypeentrypoint.java",{"_index":5380,"title":{"63-44":{},"132-44":{},"200-44":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pixel",{"_index":4587,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["pkcs8",{"_index":2521,"title":{},"name":{},"text":{"26":{}},"component":{}}],["place",{"_index":726,"title":{},"name":{},"text":{"19":{},"20":{},"22":{},"23":{},"29":{},"33":{},"34":{},"35":{},"39":{},"46":{},"52":{},"56":{},"63":{},"66":{},"84":{},"86":{},"88":{},"90":{},"95":{},"99":{},"101":{},"102":{},"106":{},"113":{},"119":{},"123":{},"132":{},"134":{},"152":{},"154":{},"156":{},"158":{},"163":{},"167":{},"170":{},"172":{},"174":{},"181":{},"187":{},"191":{},"200":{},"202":{}},"component":{}}],["placehold",{"_index":267,"title":{},"name":{},"text":{"4":{},"29":{},"57":{},"71":{},"95":{},"125":{},"139":{},"163":{},"192":{}},"component":{}}],["plain",{"_index":980,"title":{},"name":{},"text":{"20":{},"23":{},"32":{},"40":{},"53":{},"59":{},"64":{},"86":{},"90":{},"98":{},"107":{},"120":{},"127":{},"131":{},"154":{},"158":{},"166":{},"175":{},"188":{},"195":{},"199":{}},"component":{}}],["plaintext",{"_index":3909,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["plan",{"_index":661,"title":{},"name":{},"text":{"18":{},"23":{},"26":{},"27":{},"39":{},"46":{},"85":{},"90":{},"93":{},"106":{},"113":{},"153":{},"158":{},"174":{},"181":{}},"component":{}}],["planner",{"_index":6279,"title":{},"name":{},"text":{"93":{},"195":{}},"component":{}}],["planner.menutypes.emptyspac",{"_index":6438,"title":{},"name":{},"text":{"195":{}},"component":{}}],["platform",{"_index":93,"title":{"40":{},"107":{},"175":{},"19-7":{},"39-31":{},"40-2":{},"84-7":{},"106-31":{},"107-2":{},"152-7":{},"174-31":{},"175-2":{}},"name":{"40":{},"107":{},"175":{}},"text":{"1":{},"16":{},"17":{},"19":{},"21":{},"23":{},"24":{},"38":{},"39":{},"40":{},"63":{},"64":{},"66":{},"67":{},"82":{},"83":{},"84":{},"87":{},"89":{},"90":{},"105":{},"106":{},"107":{},"131":{},"132":{},"134":{},"135":{},"150":{},"151":{},"152":{},"155":{},"157":{},"158":{},"173":{},"174":{},"175":{},"199":{},"200":{},"202":{}},"component":{}}],["platformerror",{"_index":3334,"title":{"38-9":{},"105-9":{},"173-9":{}},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["platformexcept",{"_index":3330,"title":{"38-3":{},"105-3":{},"173-3":{}},"name":{},"text":{"38":{},"39":{},"105":{},"106":{},"173":{},"174":{}},"component":{}}],["platformexception(\"fail",{"_index":3356,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["platformexceptiontransl",{"_index":3340,"title":{"38-17":{},"105-17":{},"173-17":{}},"name":{},"text":{},"component":{}}],["plattform",{"_index":832,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["play",{"_index":556,"title":{},"name":{},"text":{"16":{},"23":{},"27":{},"36":{},"82":{},"90":{},"93":{},"103":{},"150":{},"158":{},"161":{},"168":{}},"component":{}}],["pleas",{"_index":13,"title":{},"name":{},"text":{"1":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"83":{},"85":{},"87":{},"88":{},"89":{},"92":{},"93":{},"96":{},"106":{},"107":{},"110":{},"113":{},"115":{},"117":{},"120":{},"127":{},"135":{},"151":{},"153":{},"155":{},"156":{},"157":{},"160":{},"164":{},"174":{},"175":{},"178":{},"181":{},"183":{},"185":{},"188":{},"195":{}},"component":{}}],["plu",{"_index":3686,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["plug",{"_index":2966,"title":{},"name":{},"text":{"28":{},"38":{},"39":{},"57":{},"94":{},"105":{},"106":{},"125":{},"162":{},"173":{},"174":{},"192":{}},"component":{}}],["plugin",{"_index":69,"title":{},"name":{},"text":{"1":{},"17":{},"18":{},"21":{},"23":{},"24":{},"26":{},"29":{},"30":{},"31":{},"35":{},"46":{},"63":{},"67":{},"83":{},"85":{},"87":{},"89":{},"90":{},"92":{},"95":{},"96":{},"97":{},"102":{},"113":{},"132":{},"135":{},"151":{},"153":{},"155":{},"157":{},"158":{},"160":{},"163":{},"164":{},"165":{},"167":{},"181":{},"200":{}},"component":{}}],["plugin/documentation/v2.4/example_xjc_basic.html",{"_index":5474,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["png",{"_index":4768,"title":{},"name":{},"text":{"52":{},"60":{},"119":{},"128":{},"187":{},"196":{}},"component":{}}],["pnpm",{"_index":589,"title":{"17-3":{},"21-4":{},"24-4":{},"83-3":{},"87-4":{},"89-4":{},"151-3":{},"155-4":{},"157-4":{}},"name":{},"text":{"17":{},"20":{},"21":{},"24":{},"26":{},"83":{},"86":{},"87":{},"89":{},"92":{},"151":{},"154":{},"155":{},"157":{}},"component":{}}],["pnpm@7.16.0",{"_index":6099,"title":{},"name":{},"text":{"83":{},"87":{},"89":{},"151":{},"155":{},"157":{}},"component":{}}],["point",{"_index":702,"title":{"22-12":{},"26-30":{},"63-21":{},"63-22":{},"63-23":{},"63-25":{},"88-12":{},"132-21":{},"132-22":{},"132-23":{},"132-25":{},"156-12":{},"200-21":{},"200-22":{},"200-23":{},"200-25":{}},"name":{},"text":{"19":{},"22":{},"23":{},"26":{},"28":{},"38":{},"39":{},"40":{},"43":{},"46":{},"48":{},"51":{},"56":{},"60":{},"63":{},"64":{},"84":{},"88":{},"90":{},"93":{},"94":{},"105":{},"106":{},"107":{},"110":{},"113":{},"115":{},"118":{},"123":{},"128":{},"131":{},"132":{},"152":{},"156":{},"158":{},"162":{},"173":{},"174":{},"175":{},"178":{},"181":{},"183":{},"186":{},"191":{},"196":{},"199":{},"200":{}},"component":{}}],["pointer",{"_index":1474,"title":{},"name":{},"text":{"23":{},"36":{},"90":{},"103":{},"158":{},"168":{}},"component":{}}],["pojo",{"_index":5773,"title":{},"name":{},"text":{"64":{},"66":{},"131":{},"134":{},"199":{},"202":{}},"component":{}}],["polar",{"_index":5079,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["polici",{"_index":1902,"title":{"43-4":{},"110-4":{},"178-4":{}},"name":{},"text":{"23":{},"39":{},"40":{},"43":{},"61":{},"90":{},"106":{},"107":{},"110":{},"129":{},"158":{},"174":{},"175":{},"178":{},"197":{}},"component":{}}],["policy.com",{"_index":4337,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["poll",{"_index":4125,"title":{},"name":{},"text":{"40":{},"61":{},"107":{},"129":{},"175":{},"197":{}},"component":{}}],["pollut",{"_index":6194,"title":{},"name":{},"text":{"92":{}},"component":{}}],["polyfil",{"_index":4432,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["polymorph",{"_index":5701,"title":{"64-13":{},"131-13":{},"199-13":{}},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["pom",{"_index":1500,"title":{},"name":{},"text":{"23":{},"26":{},"63":{},"90":{},"92":{},"132":{},"158":{},"160":{},"200":{}},"component":{}}],["pom.xml",{"_index":457,"title":{"63-8":{},"132-8":{},"200-8":{}},"name":{},"text":{"14":{},"21":{},"23":{},"24":{},"26":{},"29":{},"40":{},"63":{},"66":{},"80":{},"87":{},"89":{},"90":{},"92":{},"95":{},"107":{},"132":{},"134":{},"148":{},"155":{},"157":{},"158":{},"163":{},"175":{},"200":{},"202":{}},"component":{}}],["pool",{"_index":3430,"title":{"44-4":{},"109-4":{},"179-4":{}},"name":{},"text":{"39":{},"40":{},"44":{},"106":{},"107":{},"109":{},"174":{},"175":{},"179":{}},"component":{}}],["poolsiz",{"_index":4373,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["poor",{"_index":675,"title":{},"name":{},"text":{"18":{},"85":{},"153":{}},"component":{}}],["popul",{"_index":1331,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["popular",{"_index":691,"title":{},"name":{},"text":{"18":{},"20":{},"29":{},"66":{},"85":{},"86":{},"95":{},"134":{},"153":{},"154":{},"163":{},"202":{}},"component":{}}],["popup",{"_index":2892,"title":{"27-12":{}},"name":{},"text":{"27":{},"50":{},"60":{},"117":{},"128":{},"185":{},"196":{}},"component":{}}],["port",{"_index":719,"title":{"63-27":{},"132-27":{},"200-27":{}},"name":{},"text":{"19":{},"40":{},"43":{},"44":{},"63":{},"84":{},"107":{},"109":{},"110":{},"132":{},"152":{},"175":{},"178":{},"179":{},"200":{}},"component":{}}],["port.ping(\"hello",{"_index":5598,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["port]/api/serverstatu",{"_index":3311,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["portabl",{"_index":4832,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["portnam",{"_index":5497,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["port’",{"_index":5611,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["pose",{"_index":2819,"title":{},"name":{},"text":{"26":{}},"component":{}}],["posit",{"_index":282,"title":{},"name":{},"text":{"4":{},"5":{},"23":{},"29":{},"36":{},"40":{},"48":{},"63":{},"70":{},"71":{},"90":{},"95":{},"103":{},"107":{},"115":{},"132":{},"138":{},"139":{},"158":{},"163":{},"168":{},"175":{},"183":{},"200":{}},"component":{}}],["positionfield",{"_index":1946,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["possess",{"_index":878,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["possibilit",{"_index":4629,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["possibl",{"_index":236,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"23":{},"26":{},"27":{},"28":{},"29":{},"32":{},"34":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"53":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"71":{},"75":{},"90":{},"92":{},"93":{},"94":{},"95":{},"98":{},"101":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"120":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"138":{},"139":{},"143":{},"158":{},"162":{},"163":{},"166":{},"172":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"188":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["post",{"_index":1110,"title":{"27-17":{},"27-19":{}},"name":{},"text":{"22":{},"40":{},"66":{},"88":{},"107":{},"134":{},"156":{},"175":{},"202":{}},"component":{}}],["post(entity.json(ent",{"_index":6042,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["postconstruct",{"_index":1605,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["postdepend",{"_index":2613,"title":{},"name":{},"text":{"26":{}},"component":{}}],["postload",{"_index":4736,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["postmessage(data",{"_index":2936,"title":{},"name":{},"text":{"27":{}},"component":{}}],["potenti",{"_index":3349,"title":{},"name":{},"text":{"38":{},"40":{},"43":{},"63":{},"105":{},"107":{},"110":{},"132":{},"173":{},"175":{},"178":{},"200":{}},"component":{}}],["power",{"_index":660,"title":{},"name":{},"text":{"18":{},"23":{},"39":{},"85":{},"90":{},"106":{},"153":{},"158":{},"174":{}},"component":{}}],["practic",{"_index":62,"title":{"53-13":{},"120-13":{},"188-13":{}},"name":{},"text":{"1":{},"22":{},"23":{},"40":{},"52":{},"60":{},"62":{},"63":{},"67":{},"88":{},"90":{},"107":{},"119":{},"128":{},"130":{},"132":{},"135":{},"156":{},"158":{},"175":{},"187":{},"196":{},"198":{},"200":{}},"component":{}}],["practis",{"_index":6197,"title":{},"name":{},"text":{"92":{}},"component":{}}],["pre",{"_index":612,"title":{},"name":{},"text":{"17":{},"19":{},"23":{},"24":{},"26":{},"40":{},"48":{},"83":{},"84":{},"89":{},"90":{},"92":{},"107":{},"115":{},"151":{},"152":{},"157":{},"158":{},"160":{},"175":{},"183":{}},"component":{}}],["prebuild",{"_index":6372,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["prebuilt",{"_index":685,"title":{},"name":{},"text":{"18":{},"20":{},"85":{},"86":{},"93":{},"153":{},"154":{}},"component":{}}],["preced",{"_index":3842,"title":{},"name":{},"text":{"40":{},"60":{},"107":{},"175":{}},"component":{}}],["precis",{"_index":2774,"title":{},"name":{},"text":{"26":{}},"component":{}}],["precondit",{"_index":2957,"title":{"28-1":{},"94-1":{},"162-1":{}},"name":{},"text":{"43":{},"110":{},"128":{},"178":{},"196":{}},"component":{}}],["predefin",{"_index":811,"title":{},"name":{},"text":{"19":{},"29":{},"40":{},"46":{},"53":{},"60":{},"84":{},"95":{},"107":{},"113":{},"120":{},"124":{},"128":{},"152":{},"163":{},"175":{},"181":{},"188":{},"193":{},"196":{}},"component":{}}],["predepend",{"_index":2611,"title":{},"name":{},"text":{"26":{}},"component":{}}],["predic",{"_index":2801,"title":{},"name":{},"text":{"26":{},"39":{},"106":{},"174":{}},"component":{}}],["preemptiv",{"_index":3992,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["prefenc",{"_index":4819,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["prefer",{"_index":638,"title":{},"name":{},"text":{"18":{},"19":{},"24":{},"26":{},"40":{},"43":{},"53":{},"84":{},"85":{},"89":{},"92":{},"107":{},"110":{},"120":{},"152":{},"153":{},"157":{},"175":{},"178":{},"188":{}},"component":{}}],["prefil",{"_index":2233,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["prefix",{"_index":1084,"title":{},"name":{},"text":{"22":{},"23":{},"40":{},"45":{},"56":{},"64":{},"88":{},"90":{},"107":{},"112":{},"123":{},"131":{},"156":{},"158":{},"175":{},"180":{},"191":{},"199":{}},"component":{}}],["prematur",{"_index":3598,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["prepackag",{"_index":2984,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["prepar",{"_index":901,"title":{"20-2":{},"86-2":{},"154-2":{}},"name":{},"text":{"21":{},"23":{},"24":{},"44":{},"48":{},"60":{},"63":{},"66":{},"87":{},"89":{},"90":{},"109":{},"115":{},"128":{},"132":{},"134":{},"155":{},"157":{},"158":{},"179":{},"183":{},"196":{},"200":{},"202":{}},"component":{}}],["preparecr",{"_index":2324,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["preparelookup",{"_index":5959,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["prepend",{"_index":2608,"title":{},"name":{},"text":{"26":{}},"component":{}}],["preprocessor",{"_index":4443,"title":{"46-7":{},"113-7":{},"181-7":{}},"name":{},"text":{"46":{},"56":{},"113":{},"123":{},"181":{},"191":{}},"component":{}}],["prerequisit",{"_index":588,"title":{"17-2":{},"21-2":{},"22-2":{},"24-2":{},"33-1":{},"35-1":{},"83-2":{},"87-2":{},"88-2":{},"89-2":{},"99-1":{},"102-1":{},"151-2":{},"155-2":{},"156-2":{},"157-2":{},"167-1":{},"170-1":{}},"name":{},"text":{"17":{},"21":{},"24":{},"63":{},"83":{},"87":{},"89":{},"132":{},"151":{},"155":{},"157":{},"200":{}},"component":{}}],["prescrib",{"_index":5431,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["presenc",{"_index":5434,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["present",{"_index":423,"title":{},"name":{},"text":{"11":{},"14":{},"17":{},"21":{},"23":{},"24":{},"26":{},"29":{},"32":{},"40":{},"48":{},"62":{},"63":{},"77":{},"80":{},"83":{},"87":{},"89":{},"90":{},"92":{},"95":{},"98":{},"107":{},"115":{},"127":{},"130":{},"132":{},"145":{},"148":{},"151":{},"155":{},"157":{},"158":{},"163":{},"166":{},"175":{},"183":{},"195":{},"198":{},"200":{}},"component":{}}],["preserv",{"_index":2726,"title":{},"name":{},"text":{"26":{},"36":{},"60":{},"63":{},"103":{},"113":{},"128":{},"132":{},"168":{},"181":{},"196":{},"200":{}},"component":{}}],["preset",{"_index":4524,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["press",{"_index":232,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"17":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"46":{},"48":{},"50":{},"53":{},"63":{},"70":{},"71":{},"72":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"83":{},"87":{},"88":{},"89":{},"90":{},"94":{},"95":{},"113":{},"115":{},"117":{},"120":{},"132":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"151":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"181":{},"183":{},"185":{},"188":{},"200":{}},"component":{}}],["prevent",{"_index":2085,"title":{},"name":{},"text":{"23":{},"26":{},"27":{},"32":{},"39":{},"43":{},"44":{},"66":{},"90":{},"98":{},"106":{},"109":{},"110":{},"134":{},"158":{},"166":{},"174":{},"178":{},"179":{},"202":{}},"component":{}}],["preview",{"_index":4827,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["previou",{"_index":1216,"title":{},"name":{},"text":{"23":{},"26":{},"39":{},"58":{},"60":{},"63":{},"90":{},"93":{},"106":{},"126":{},"128":{},"132":{},"158":{},"174":{},"194":{},"196":{},"200":{}},"component":{}}],["previous",{"_index":1523,"title":{},"name":{},"text":{"23":{},"26":{},"60":{},"90":{},"128":{},"158":{},"196":{}},"component":{}}],["price",{"_index":5099,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["primari",{"_index":1425,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["primarili",{"_index":5400,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["prime",{"_index":4319,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["prime256v1",{"_index":2508,"title":{},"name":{},"text":{"26":{}},"component":{}}],["princip",{"_index":5510,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["principalproduc",{"_index":5509,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["principl",{"_index":2825,"title":{},"name":{},"text":{"26":{},"27":{},"43":{},"110":{},"178":{}},"component":{}}],["print",{"_index":2503,"title":{},"name":{},"text":{"26":{},"39":{},"46":{},"60":{},"106":{},"113":{},"128":{},"174":{},"181":{},"196":{}},"component":{}}],["printf",{"_index":2509,"title":{},"name":{},"text":{"26":{}},"component":{}}],["prior",{"_index":4760,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["prioriti",{"_index":4119,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["privaci",{"_index":1001,"title":{},"name":{},"text":{"21":{},"24":{},"87":{},"89":{},"155":{},"157":{}},"component":{}}],["privat",{"_index":1352,"title":{},"name":{},"text":{"23":{},"26":{},"34":{},"40":{},"43":{},"48":{},"52":{},"63":{},"64":{},"65":{},"90":{},"93":{},"101":{},"107":{},"110":{},"115":{},"119":{},"131":{},"132":{},"133":{},"158":{},"172":{},"175":{},"178":{},"183":{},"187":{},"199":{},"200":{},"201":{}},"component":{}}],["private_key",{"_index":2515,"title":{},"name":{},"text":{"26":{}},"component":{}}],["private_key=$(openssl",{"_index":2506,"title":{},"name":{},"text":{"26":{}},"component":{}}],["privatekey",{"_index":2513,"title":{},"name":{},"text":{"26":{}},"component":{}}],["probabl",{"_index":1173,"title":{},"name":{},"text":{"22":{},"24":{},"26":{},"40":{},"44":{},"46":{},"50":{},"56":{},"58":{},"88":{},"89":{},"92":{},"107":{},"109":{},"113":{},"117":{},"123":{},"126":{},"156":{},"157":{},"175":{},"179":{},"181":{},"185":{},"191":{},"194":{}},"component":{}}],["problem",{"_index":3381,"title":{},"name":{},"text":{"38":{},"39":{},"48":{},"56":{},"63":{},"92":{},"105":{},"106":{},"115":{},"123":{},"132":{},"173":{},"174":{},"183":{},"191":{},"200":{}},"component":{}}],["proce",{"_index":508,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["procedur",{"_index":986,"title":{"28":{},"94":{},"162":{}},"name":{},"text":{"20":{},"46":{},"63":{},"86":{},"113":{},"132":{},"154":{},"181":{},"200":{}},"component":{}}],["process",{"_index":643,"title":{"63-14":{},"63-15":{},"132-14":{},"132-15":{},"200-14":{},"200-15":{}},"name":{},"text":{"18":{},"20":{},"21":{},"22":{},"23":{},"24":{},"29":{},"32":{},"38":{},"40":{},"41":{},"51":{},"58":{},"59":{},"61":{},"63":{},"65":{},"66":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"93":{},"95":{},"98":{},"105":{},"107":{},"111":{},"118":{},"124":{},"126":{},"127":{},"129":{},"132":{},"133":{},"134":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"166":{},"173":{},"175":{},"176":{},"186":{},"193":{},"194":{},"195":{},"197":{},"200":{},"201":{},"202":{}},"component":{}}],["process.env",{"_index":4528,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["processbutton",{"_index":953,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["processingexcept",{"_index":3331,"title":{"38-4":{},"105-4":{},"173-4":{}},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["processor",{"_index":2893,"title":{"27-17":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["prod",{"_index":4444,"title":{"46-15":{},"113-15":{},"181-15":{}},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["produc",{"_index":770,"title":{},"name":{},"text":{"19":{},"40":{},"46":{},"63":{},"66":{},"84":{},"107":{},"113":{},"132":{},"134":{},"152":{},"175":{},"181":{},"200":{},"202":{}},"component":{}}],["produces(mediatype.application_json",{"_index":3305,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["product",{"_index":124,"title":{"3-2":{},"69-2":{},"137-2":{}},"name":{},"text":{"3":{},"19":{},"23":{},"31":{},"46":{},"69":{},"84":{},"90":{},"93":{},"97":{},"113":{},"137":{},"152":{},"158":{},"165":{},"181":{}},"component":{}}],["profil",{"_index":1323,"title":{},"name":{},"text":{"23":{},"40":{},"46":{},"63":{},"90":{},"107":{},"113":{},"132":{},"158":{},"175":{},"181":{},"200":{}},"component":{}}],["profilerdecorationfactori",{"_index":3790,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["profit",{"_index":3484,"title":{},"name":{},"text":{"39":{},"46":{},"63":{},"106":{},"113":{},"132":{},"174":{},"181":{},"200":{}},"component":{}}],["program",{"_index":613,"title":{},"name":{},"text":{"17":{},"18":{},"19":{},"21":{},"24":{},"26":{},"63":{},"64":{},"83":{},"84":{},"85":{},"87":{},"89":{},"131":{},"132":{},"151":{},"152":{},"153":{},"155":{},"157":{},"199":{},"200":{}},"component":{}}],["programm",{"_index":1244,"title":{},"name":{},"text":{"23":{},"34":{},"90":{},"101":{},"158":{},"172":{}},"component":{}}],["programmat",{"_index":5018,"title":{},"name":{},"text":{"58":{},"60":{},"126":{},"128":{},"194":{},"196":{}},"component":{}}],["progress",{"_index":531,"title":{},"name":{},"text":{"16":{},"46":{},"82":{},"113":{},"150":{},"181":{}},"component":{}}],["project",{"_index":131,"title":{"6-2":{},"14-1":{},"17-4":{},"21-6":{},"23-3":{},"24-7":{},"29-11":{},"72-2":{},"80-1":{},"83-4":{},"87-6":{},"89-7":{},"90-3":{},"95-11":{},"124-1":{},"140-2":{},"148-1":{},"151-4":{},"155-6":{},"157-7":{},"158-3":{},"163-11":{},"193-1":{}},"name":{},"text":{"3":{},"4":{},"6":{},"14":{},"16":{},"17":{},"18":{},"19":{},"21":{},"23":{},"24":{},"26":{},"28":{},"29":{},"31":{},"32":{},"40":{},"46":{},"52":{},"56":{},"57":{},"63":{},"64":{},"66":{},"69":{},"71":{},"72":{},"80":{},"82":{},"83":{},"84":{},"85":{},"87":{},"89":{},"90":{},"93":{},"94":{},"95":{},"97":{},"98":{},"107":{},"113":{},"119":{},"123":{},"124":{},"125":{},"131":{},"132":{},"134":{},"137":{},"139":{},"140":{},"148":{},"150":{},"151":{},"152":{},"153":{},"155":{},"157":{},"158":{},"162":{},"163":{},"165":{},"166":{},"175":{},"181":{},"187":{},"191":{},"192":{},"193":{},"199":{},"200":{},"202":{}},"component":{}}],["project’",{"_index":456,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["promin",{"_index":1190,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["prone",{"_index":162,"title":{},"name":{},"text":{"3":{},"31":{},"69":{},"97":{},"137":{},"165":{}},"component":{}}],["propag",{"_index":3472,"title":{"63-27":{},"63-28":{},"63-36":{},"63-38":{},"132-27":{},"132-28":{},"132-36":{},"132-38":{},"200-27":{},"200-28":{},"200-36":{},"200-38":{}},"name":{},"text":{"39":{},"41":{},"42":{},"54":{},"63":{},"106":{},"108":{},"111":{},"121":{},"132":{},"174":{},"176":{},"177":{},"189":{},"200":{}},"component":{}}],["proper",{"_index":82,"title":{},"name":{},"text":{"1":{},"19":{},"41":{},"67":{},"84":{},"111":{},"135":{},"152":{},"176":{}},"component":{}}],["properli",{"_index":712,"title":{},"name":{},"text":{"19":{},"22":{},"28":{},"40":{},"46":{},"50":{},"53":{},"84":{},"88":{},"94":{},"107":{},"113":{},"117":{},"120":{},"152":{},"156":{},"162":{},"175":{},"181":{},"185":{},"188":{}},"component":{}}],["properti",{"_index":185,"title":{"4-5":{},"23-19":{},"29-28":{},"40-19":{},"40-22":{},"41-2":{},"41-3":{},"41-4":{},"43-11":{},"57-1":{},"57-3":{},"60-6":{},"60-7":{},"60-9":{},"65-8":{},"66-10":{},"71-5":{},"90-19":{},"92-27":{},"95-28":{},"107-19":{},"107-22":{},"110-11":{},"111-2":{},"111-3":{},"111-4":{},"125-1":{},"125-3":{},"128-7":{},"128-8":{},"128-10":{},"133-8":{},"134-10":{},"139-5":{},"158-19":{},"163-28":{},"175-19":{},"175-22":{},"176-2":{},"176-3":{},"176-4":{},"178-11":{},"192-1":{},"192-3":{},"196-7":{},"196-8":{},"196-10":{},"201-8":{},"202-10":{}},"name":{},"text":{"4":{},"5":{},"9":{},"19":{},"22":{},"23":{},"26":{},"27":{},"29":{},"34":{},"36":{},"39":{},"40":{},"41":{},"43":{},"44":{},"46":{},"47":{},"48":{},"50":{},"51":{},"52":{},"56":{},"57":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"71":{},"75":{},"84":{},"88":{},"90":{},"92":{},"93":{},"95":{},"100":{},"101":{},"103":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"117":{},"118":{},"119":{},"123":{},"124":{},"125":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"138":{},"139":{},"143":{},"152":{},"156":{},"158":{},"163":{},"168":{},"171":{},"172":{},"174":{},"175":{},"176":{},"178":{},"179":{},"181":{},"182":{},"183":{},"185":{},"186":{},"187":{},"191":{},"192":{},"193":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["property(restclientproperties.follow_redirect",{"_index":6035,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["propertychang",{"_index":2746,"title":{},"name":{},"text":{"26":{},"60":{},"128":{},"196":{}},"component":{}}],["propertychange:propertynam",{"_index":5274,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["propertymap",{"_index":4170,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["propertymap.current.get",{"_index":4171,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["propos",{"_index":301,"title":{},"name":{},"text":{"5":{},"11":{},"15":{},"19":{},"23":{},"28":{},"29":{},"34":{},"46":{},"59":{},"60":{},"65":{},"70":{},"77":{},"81":{},"84":{},"90":{},"94":{},"95":{},"101":{},"127":{},"128":{},"133":{},"138":{},"145":{},"149":{},"152":{},"158":{},"162":{},"163":{},"172":{},"195":{},"196":{},"201":{}},"component":{}}],["proposalchoos",{"_index":6163,"title":{},"name":{},"text":{"92":{}},"component":{}}],["proposalchooser.model",{"_index":6108,"title":{"92-17":{}},"name":{},"text":{},"component":{}}],["proprietari",{"_index":5408,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["protect",{"_index":572,"title":{"43-3":{},"110-3":{},"178-3":{}},"name":{},"text":{"16":{},"19":{},"23":{},"26":{},"33":{},"34":{},"40":{},"43":{},"52":{},"53":{},"57":{},"62":{},"63":{},"64":{},"65":{},"66":{},"82":{},"84":{},"90":{},"99":{},"100":{},"101":{},"107":{},"110":{},"119":{},"120":{},"125":{},"130":{},"131":{},"132":{},"133":{},"134":{},"150":{},"152":{},"158":{},"170":{},"171":{},"172":{},"175":{},"178":{},"187":{},"188":{},"192":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["protocol",{"_index":4362,"title":{},"name":{},"text":{"44":{},"63":{},"66":{},"109":{},"132":{},"134":{},"179":{},"200":{},"202":{}},"component":{}}],["prototyp",{"_index":2788,"title":{},"name":{},"text":{"26":{},"48":{},"115":{},"183":{}},"component":{}}],["proven",{"_index":3639,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["provid",{"_index":128,"title":{"37-3":{},"57-2":{},"63-20":{},"63-37":{},"66-2":{},"104-3":{},"125-2":{},"132-20":{},"132-37":{},"134-2":{},"169-3":{},"192-2":{},"200-20":{},"200-37":{},"202-2":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"11":{},"14":{},"16":{},"19":{},"22":{},"23":{},"25":{},"26":{},"27":{},"29":{},"31":{},"32":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"46":{},"48":{},"49":{},"51":{},"53":{},"56":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"69":{},"70":{},"71":{},"72":{},"77":{},"80":{},"82":{},"84":{},"88":{},"90":{},"91":{},"92":{},"93":{},"95":{},"97":{},"98":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"115":{},"116":{},"118":{},"120":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"137":{},"138":{},"139":{},"140":{},"145":{},"148":{},"150":{},"152":{},"156":{},"158":{},"159":{},"160":{},"163":{},"165":{},"166":{},"169":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"181":{},"183":{},"184":{},"186":{},"188":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["proxi",{"_index":1660,"title":{"66-11":{},"134-11":{},"202-11":{}},"name":{},"text":{"23":{},"40":{},"43":{},"61":{},"63":{},"66":{},"90":{},"107":{},"110":{},"129":{},"132":{},"134":{},"158":{},"175":{},"178":{},"197":{},"200":{},"202":{}},"component":{}}],["proxy_password",{"_index":6058,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["proxy_us",{"_index":6057,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["prview",{"_index":2980,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["public",{"_index":569,"title":{},"name":{},"text":{"16":{},"18":{},"23":{},"26":{},"27":{},"29":{},"33":{},"34":{},"37":{},"39":{},"40":{},"43":{},"48":{},"52":{},"53":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"82":{},"85":{},"90":{},"93":{},"95":{},"99":{},"100":{},"101":{},"104":{},"106":{},"107":{},"110":{},"115":{},"119":{},"120":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"150":{},"153":{},"158":{},"163":{},"169":{},"170":{},"171":{},"172":{},"174":{},"175":{},"178":{},"183":{},"187":{},"188":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["publickey",{"_index":2527,"title":{},"name":{},"text":{"26":{}},"component":{}}],["publish",{"_index":682,"title":{"61-6":{},"129-6":{},"197-6":{}},"name":{},"text":{"18":{},"20":{},"26":{},"32":{},"40":{},"41":{},"46":{},"61":{},"63":{},"85":{},"86":{},"98":{},"107":{},"111":{},"113":{},"129":{},"132":{},"153":{},"154":{},"166":{},"175":{},"176":{},"181":{},"197":{},"200":{}},"component":{}}],["publishconfig",{"_index":6375,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["pubout",{"_index":2528,"title":{},"name":{},"text":{"26":{}},"component":{}}],["pure",{"_index":4924,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["purpos",{"_index":707,"title":{},"name":{},"text":{"19":{},"26":{},"32":{},"39":{},"40":{},"43":{},"46":{},"50":{},"51":{},"53":{},"58":{},"63":{},"84":{},"92":{},"93":{},"98":{},"106":{},"107":{},"110":{},"113":{},"117":{},"118":{},"120":{},"126":{},"132":{},"152":{},"166":{},"174":{},"175":{},"178":{},"181":{},"185":{},"186":{},"188":{},"194":{},"200":{}},"component":{}}],["push",{"_index":5303,"title":{"61-3":{},"129-3":{},"197-3":{}},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["put",{"_index":971,"title":{},"name":{},"text":{"20":{},"22":{},"32":{},"46":{},"48":{},"56":{},"60":{},"63":{},"66":{},"86":{},"88":{},"98":{},"113":{},"115":{},"123":{},"128":{},"132":{},"134":{},"154":{},"156":{},"166":{},"181":{},"183":{},"191":{},"196":{},"200":{},"202":{}},"component":{}}],["put(\"attr1",{"_index":5880,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["put(\"attr2",{"_index":5881,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["put(entity.json",{"_index":6077,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["putlist(\"listattr",{"_index":5882,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["px",{"_index":2632,"title":{},"name":{},"text":{"26":{}},"component":{}}],["qualifi",{"_index":3982,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["qualiti",{"_index":125,"title":{"3-2":{},"69-2":{},"137-2":{}},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["quartz",{"_index":3419,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["queri",{"_index":3482,"title":{},"name":{},"text":{"39":{},"40":{},"41":{},"42":{},"46":{},"65":{},"93":{},"106":{},"107":{},"108":{},"111":{},"113":{},"133":{},"174":{},"175":{},"176":{},"177":{},"181":{},"201":{}},"component":{}}],["querybi",{"_index":5052,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["queryby=key",{"_index":5055,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["queryby=rec",{"_index":5058,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["queryby=text",{"_index":5054,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["querytyp",{"_index":3794,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["question",{"_index":1498,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["queue",{"_index":3629,"title":{},"name":{},"text":{"39":{},"40":{},"61":{},"106":{},"107":{},"129":{},"174":{},"175":{},"197":{}},"component":{}}],["quick",{"_index":561,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"92":{},"150":{},"158":{}},"component":{}}],["quickaccessmenu",{"_index":1266,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["quickli",{"_index":326,"title":{},"name":{},"text":{"5":{},"23":{},"29":{},"70":{},"90":{},"95":{},"138":{},"158":{},"163":{}},"component":{}}],["quit",{"_index":87,"title":{},"name":{},"text":{"1":{},"32":{},"50":{},"59":{},"67":{},"98":{},"117":{},"127":{},"135":{},"166":{},"185":{},"195":{}},"component":{}}],["r",{"_index":6049,"title":{},"name":{},"text":{"66":{},"92":{},"134":{},"202":{}},"component":{}}],["r.hasent",{"_index":6050,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["r.readentity(string.class",{"_index":6052,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["radar",{"_index":2559,"title":{},"name":{},"text":{"26":{},"59":{},"127":{},"195":{}},"component":{}}],["radial",{"_index":5077,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["radio",{"_index":1837,"title":{},"name":{},"text":{"23":{},"29":{},"90":{},"95":{},"158":{},"163":{}},"component":{}}],["rainbow",{"_index":4950,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["rainbow.css",{"_index":4951,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["rainbow.less",{"_index":4972,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["rais",{"_index":2915,"title":{},"name":{},"text":{"27":{}},"component":{}}],["random",{"_index":6300,"title":{},"name":{},"text":{"93":{}},"component":{}}],["rang",{"_index":2618,"title":{},"name":{},"text":{"26":{},"63":{},"93":{},"132":{},"200":{}},"component":{}}],["rangeform",{"_index":5555,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["rangefrom",{"_index":5523,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["rangeselectionallow",{"_index":6332,"title":{},"name":{},"text":{"93":{}},"component":{}}],["rangeto",{"_index":5525,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["rank",{"_index":4990,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["rare",{"_index":3665,"title":{},"name":{},"text":{"39":{},"63":{},"92":{},"106":{},"132":{},"174":{},"200":{}},"component":{}}],["rate",{"_index":3488,"title":{},"name":{},"text":{"39":{},"59":{},"106":{},"127":{},"174":{},"195":{}},"component":{}}],["raw",{"_index":2443,"title":{"26-30":{}},"name":{},"text":{"26":{},"39":{},"52":{},"64":{},"106":{},"119":{},"131":{},"174":{},"187":{},"199":{}},"component":{}}],["rawdoentitydeserializertyperesolv",{"_index":2764,"title":{},"name":{},"text":{"26":{}},"component":{}}],["rawdoentitydeserializertypestrategi",{"_index":2765,"title":{},"name":{},"text":{"26":{}},"component":{}}],["rawtyp",{"_index":6319,"title":{},"name":{},"text":{"93":{}},"component":{}}],["rawvalu",{"_index":2079,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["re",{"_index":1046,"title":{"93-3":{}},"name":{},"text":{"22":{},"23":{},"38":{},"39":{},"43":{},"46":{},"88":{},"90":{},"105":{},"106":{},"110":{},"113":{},"128":{},"156":{},"158":{},"173":{},"174":{},"178":{},"181":{},"196":{}},"component":{}}],["re)start",{"_index":1492,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["reach",{"_index":3627,"title":{},"name":{},"text":{"39":{},"40":{},"44":{},"61":{},"106":{},"107":{},"109":{},"129":{},"174":{},"175":{},"179":{},"197":{}},"component":{}}],["react",{"_index":4231,"title":{},"name":{},"text":{"43":{},"53":{},"61":{},"66":{},"93":{},"110":{},"120":{},"129":{},"134":{},"178":{},"188":{},"197":{},"202":{}},"component":{}}],["read",{"_index":33,"title":{},"name":{},"text":{"1":{},"8":{},"16":{},"19":{},"21":{},"22":{},"24":{},"29":{},"34":{},"36":{},"39":{},"40":{},"44":{},"48":{},"51":{},"57":{},"60":{},"63":{},"66":{},"67":{},"74":{},"82":{},"84":{},"87":{},"88":{},"89":{},"93":{},"95":{},"101":{},"103":{},"106":{},"107":{},"109":{},"115":{},"118":{},"125":{},"128":{},"132":{},"134":{},"135":{},"142":{},"150":{},"152":{},"155":{},"156":{},"157":{},"163":{},"168":{},"172":{},"174":{},"175":{},"179":{},"183":{},"186":{},"192":{},"196":{},"200":{},"202":{}},"component":{}}],["readabl",{"_index":2878,"title":{},"name":{},"text":{"26":{},"27":{},"39":{},"41":{},"106":{},"111":{},"174":{},"176":{}},"component":{}}],["readcompanypermiss",{"_index":4278,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["readfromsource(str",{"_index":3862,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["readi",{"_index":542,"title":{},"name":{},"text":{"16":{},"17":{},"19":{},"21":{},"23":{},"24":{},"28":{},"29":{},"40":{},"63":{},"82":{},"83":{},"84":{},"87":{},"89":{},"90":{},"94":{},"95":{},"107":{},"132":{},"150":{},"151":{},"152":{},"155":{},"157":{},"158":{},"162":{},"163":{},"175":{},"200":{}},"component":{}}],["readm",{"_index":3203,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["readmypermiss",{"_index":398,"title":{},"name":{},"text":{"8":{},"29":{},"74":{},"95":{},"142":{},"163":{}},"component":{}}],["readorganizationpermiss",{"_index":2319,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["readpersonpermiss",{"_index":2051,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["readvalue(str",{"_index":5732,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["real",{"_index":1965,"title":{},"name":{},"text":{"23":{},"40":{},"46":{},"66":{},"90":{},"107":{},"113":{},"134":{},"158":{},"175":{},"181":{},"202":{}},"component":{}}],["realiz",{"_index":1960,"title":{},"name":{},"text":{"23":{},"57":{},"62":{},"90":{},"125":{},"130":{},"158":{},"192":{},"198":{}},"component":{}}],["realli",{"_index":666,"title":{},"name":{},"text":{"18":{},"19":{},"48":{},"59":{},"60":{},"84":{},"85":{},"115":{},"127":{},"128":{},"152":{},"153":{},"183":{},"195":{},"196":{}},"component":{}}],["realm",{"_index":4013,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["reason",{"_index":1901,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"43":{},"45":{},"59":{},"60":{},"63":{},"64":{},"90":{},"106":{},"107":{},"110":{},"112":{},"127":{},"128":{},"131":{},"132":{},"158":{},"174":{},"175":{},"178":{},"180":{},"195":{},"196":{},"199":{},"200":{}},"component":{}}],["rebuildstrategi",{"_index":3987,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["rebuilt",{"_index":3986,"title":{},"name":{},"text":{"40":{},"46":{},"107":{},"113":{},"175":{},"181":{}},"component":{}}],["rec",{"_index":5056,"title":{},"name":{},"text":{"59":{},"65":{},"127":{},"133":{},"195":{},"201":{}},"component":{}}],["receiv",{"_index":1344,"title":{},"name":{},"text":{"23":{},"40":{},"43":{},"52":{},"61":{},"63":{},"90":{},"107":{},"110":{},"119":{},"129":{},"132":{},"158":{},"175":{},"178":{},"187":{},"197":{},"200":{}},"component":{}}],["receiver@example.com",{"_index":4420,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["recent",{"_index":16,"title":{},"name":{},"text":{"1":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"110":{},"178":{}},"component":{}}],["recipi",{"_index":4389,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["recipient,\\n\\npleas",{"_index":4414,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["recogn",{"_index":4449,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"134":{},"181":{},"202":{}},"component":{}}],["recommend",{"_index":668,"title":{},"name":{},"text":{"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"39":{},"40":{},"43":{},"46":{},"48":{},"56":{},"60":{},"63":{},"64":{},"66":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"106":{},"107":{},"110":{},"113":{},"115":{},"122":{},"123":{},"124":{},"128":{},"131":{},"132":{},"134":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"174":{},"175":{},"178":{},"181":{},"183":{},"190":{},"191":{},"193":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["recomput",{"_index":2102,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["record",{"_index":5914,"title":{},"name":{},"text":{"64":{},"65":{},"131":{},"133":{},"199":{},"201":{}},"component":{}}],["recur",{"_index":3426,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["red",{"_index":791,"title":{},"name":{},"text":{"19":{},"23":{},"26":{},"34":{},"56":{},"84":{},"90":{},"93":{},"101":{},"123":{},"124":{},"152":{},"158":{},"172":{},"191":{},"193":{}},"component":{}}],["redefin",{"_index":4936,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["redirect",{"_index":3865,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["reduc",{"_index":1706,"title":{},"name":{},"text":{"23":{},"27":{},"39":{},"40":{},"43":{},"46":{},"53":{},"61":{},"90":{},"93":{},"106":{},"107":{},"110":{},"113":{},"120":{},"129":{},"158":{},"174":{},"175":{},"178":{},"181":{},"188":{},"197":{}},"component":{}}],["reexport",{"_index":4455,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["refactor",{"_index":2062,"title":{},"name":{},"text":{"23":{},"29":{},"90":{},"92":{},"95":{},"158":{},"163":{}},"component":{}}],["refer",{"_index":9,"title":{"59":{},"127":{},"195":{},"92-11":{},"93-9":{}},"name":{"59":{},"127":{},"195":{}},"text":{"1":{},"4":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"71":{},"83":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"103":{},"106":{},"107":{},"110":{},"115":{},"119":{},"121":{},"122":{},"125":{},"127":{},"128":{},"131":{},"132":{},"133":{},"134":{},"139":{},"151":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"163":{},"168":{},"174":{},"175":{},"178":{},"183":{},"187":{},"189":{},"190":{},"192":{},"195":{},"196":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["referenc",{"_index":987,"title":{},"name":{},"text":{"20":{},"38":{},"46":{},"51":{},"63":{},"64":{},"86":{},"105":{},"113":{},"118":{},"131":{},"132":{},"154":{},"173":{},"181":{},"186":{},"199":{},"200":{}},"component":{}}],["referenti",{"_index":2365,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["reflect",{"_index":1822,"title":{},"name":{},"text":{"23":{},"28":{},"29":{},"43":{},"53":{},"60":{},"61":{},"90":{},"94":{},"95":{},"110":{},"120":{},"128":{},"129":{},"158":{},"162":{},"163":{},"178":{},"188":{},"196":{},"197":{}},"component":{}}],["reflected.if",{"_index":5186,"title":{},"name":{},"text":{"60":{}},"component":{}}],["reformat",{"_index":5094,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["refresh",{"_index":212,"title":{},"name":{},"text":{"4":{},"19":{},"23":{},"29":{},"63":{},"71":{},"84":{},"90":{},"95":{},"132":{},"139":{},"152":{},"158":{},"163":{},"200":{}},"component":{}}],["regard",{"_index":667,"title":{},"name":{},"text":{"18":{},"23":{},"39":{},"46":{},"56":{},"85":{},"90":{},"106":{},"113":{},"123":{},"153":{},"158":{},"174":{},"181":{},"191":{}},"component":{}}],["regardless",{"_index":3641,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["regener",{"_index":2498,"title":{},"name":{},"text":{"26":{},"63":{},"132":{},"200":{}},"component":{}}],["regex",{"_index":3944,"title":{},"name":{},"text":{"40":{},"92":{},"107":{},"175":{}},"component":{}}],["regexp_for_uri=proxy_host:proxy_port",{"_index":3968,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["regist",{"_index":242,"title":{},"name":{},"text":{"4":{},"22":{},"23":{},"29":{},"37":{},"39":{},"40":{},"41":{},"42":{},"43":{},"48":{},"53":{},"55":{},"56":{},"59":{},"61":{},"63":{},"64":{},"66":{},"71":{},"88":{},"90":{},"95":{},"104":{},"106":{},"107":{},"108":{},"110":{},"111":{},"115":{},"120":{},"122":{},"123":{},"127":{},"129":{},"131":{},"132":{},"134":{},"139":{},"156":{},"158":{},"163":{},"169":{},"174":{},"175":{},"176":{},"177":{},"178":{},"183":{},"188":{},"190":{},"191":{},"195":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["register",{"_index":4645,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["registerbeanslisten",{"_index":3731,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["registernamespac",{"_index":6104,"title":{"92-10":{}},"name":{},"text":{"92":{}},"component":{}}],["registerrequestfilters(clientbuild",{"_index":6078,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["registr",{"_index":3594,"title":{"40-6":{},"63-29":{},"66-3":{},"107-6":{},"132-29":{},"134-3":{},"175-6":{},"200-29":{},"202-3":{}},"name":{},"text":{"39":{},"40":{},"42":{},"48":{},"55":{},"63":{},"66":{},"106":{},"107":{},"108":{},"115":{},"122":{},"132":{},"134":{},"174":{},"175":{},"177":{},"183":{},"190":{},"200":{},"202":{}},"component":{}}],["registri",{"_index":3727,"title":{},"name":{},"text":{"40":{},"46":{},"48":{},"66":{},"107":{},"113":{},"115":{},"134":{},"175":{},"181":{},"183":{},"202":{}},"component":{}}],["regular",{"_index":2083,"title":{},"name":{},"text":{"23":{},"26":{},"44":{},"46":{},"51":{},"52":{},"53":{},"59":{},"60":{},"61":{},"90":{},"109":{},"113":{},"118":{},"119":{},"120":{},"127":{},"128":{},"129":{},"158":{},"179":{},"181":{},"186":{},"187":{},"188":{},"195":{},"196":{},"197":{}},"component":{}}],["regularli",{"_index":3563,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["reject",{"_index":3511,"title":{},"name":{},"text":{"39":{},"40":{},"63":{},"106":{},"107":{},"132":{},"174":{},"175":{},"200":{}},"component":{}}],["rel",{"_index":5453,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["relat",{"_index":21,"title":{"26-38":{}},"name":{},"text":{"1":{},"8":{},"12":{},"23":{},"26":{},"27":{},"29":{},"33":{},"35":{},"39":{},"41":{},"50":{},"56":{},"59":{},"67":{},"74":{},"78":{},"90":{},"95":{},"99":{},"102":{},"106":{},"111":{},"117":{},"123":{},"127":{},"135":{},"142":{},"146":{},"158":{},"163":{},"167":{},"170":{},"174":{},"176":{},"185":{},"191":{},"195":{}},"component":{}}],["relationship",{"_index":1221,"title":{},"name":{},"text":{"23":{},"90":{},"93":{},"124":{},"158":{},"193":{}},"component":{}}],["releas",{"_index":12,"title":{"27":{},"93":{},"161":{},"26-13":{},"27-1":{},"93-1":{},"161-1":{}},"name":{"27":{},"93":{},"161":{}},"text":{"1":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"92":{},"93":{},"106":{},"132":{},"134":{},"135":{},"160":{},"161":{},"174":{},"200":{},"202":{}},"component":{}}],["releases/22.0",{"_index":1042,"title":{},"name":{},"text":{"22":{}},"component":{}}],["releases/23.1",{"_index":6101,"title":{},"name":{},"text":{"88":{}},"component":{}}],["releases/23.2",{"_index":6420,"title":{},"name":{},"text":{"156":{}},"component":{}}],["releng",{"_index":2601,"title":{},"name":{},"text":{"26":{}},"component":{}}],["relev",{"_index":1528,"title":{},"name":{},"text":{"23":{},"26":{},"40":{},"46":{},"61":{},"90":{},"92":{},"107":{},"113":{},"129":{},"158":{},"160":{},"175":{},"181":{},"197":{}},"component":{}}],["relevanttextforfilt",{"_index":5120,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["reli",{"_index":1522,"title":{},"name":{},"text":{"23":{},"26":{},"27":{},"34":{},"46":{},"48":{},"57":{},"64":{},"90":{},"92":{},"93":{},"101":{},"113":{},"115":{},"125":{},"131":{},"158":{},"172":{},"181":{},"183":{},"192":{},"199":{}},"component":{}}],["reliabl",{"_index":3834,"title":{},"name":{},"text":{"40":{},"61":{},"63":{},"107":{},"129":{},"132":{},"175":{},"197":{},"200":{}},"component":{}}],["reload",{"_index":213,"title":{},"name":{},"text":{"4":{},"22":{},"23":{},"29":{},"36":{},"46":{},"56":{},"61":{},"71":{},"88":{},"90":{},"95":{},"103":{},"113":{},"123":{},"129":{},"139":{},"156":{},"158":{},"163":{},"168":{},"181":{},"191":{},"197":{}},"component":{}}],["reloadcodetyp",{"_index":5336,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["reloadedcod",{"_index":5334,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["reloadpag",{"_index":1827,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["remain",{"_index":1195,"title":{},"name":{},"text":{"23":{},"26":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["rememb",{"_index":1534,"title":{},"name":{},"text":{"23":{},"46":{},"53":{},"60":{},"90":{},"120":{},"128":{},"158":{},"188":{},"196":{}},"component":{}}],["remot",{"_index":4131,"title":{},"name":{},"text":{"40":{},"65":{},"107":{},"133":{},"175":{},"201":{}},"component":{}}],["remoteapp",{"_index":4621,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["remotefileservic",{"_index":4078,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["remotehealthcheck",{"_index":3953,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["remotelookupcall(.j",{"_index":5935,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["remov",{"_index":240,"title":{"23-5":{},"26-14":{},"26-16":{},"26-33":{},"26-40":{},"27-18":{},"90-5":{},"92-27":{},"158-5":{}},"name":{},"text":{"4":{},"19":{},"23":{},"26":{},"29":{},"34":{},"36":{},"39":{},"40":{},"43":{},"51":{},"59":{},"60":{},"61":{},"63":{},"64":{},"71":{},"84":{},"90":{},"92":{},"93":{},"95":{},"101":{},"103":{},"106":{},"107":{},"110":{},"118":{},"127":{},"128":{},"129":{},"131":{},"132":{},"139":{},"152":{},"158":{},"163":{},"168":{},"172":{},"174":{},"175":{},"178":{},"186":{},"195":{},"196":{},"197":{},"199":{},"200":{}},"component":{}}],["removefilt",{"_index":2845,"title":{},"name":{},"text":{"26":{}},"component":{}}],["removefilter(filt",{"_index":2838,"title":{},"name":{},"text":{"26":{},"59":{},"127":{},"195":{}},"component":{}}],["removefilterbykey(filt",{"_index":2849,"title":{},"name":{},"text":{"26":{}},"component":{}}],["removethi",{"_index":6174,"title":{},"name":{},"text":{"92":{}},"component":{}}],["removetilefilter(filt",{"_index":2841,"title":{},"name":{},"text":{"26":{}},"component":{}}],["renam",{"_index":1234,"title":{"29-6":{},"29-8":{},"64-14":{},"92-15":{},"92-16":{},"92-17":{},"92-26":{},"95-6":{},"95-8":{},"131-14":{},"163-6":{},"163-8":{},"199-14":{}},"name":{},"text":{"23":{},"26":{},"29":{},"64":{},"90":{},"92":{},"95":{},"131":{},"158":{},"163":{},"199":{}},"component":{}}],["render",{"_index":2531,"title":{},"name":{},"text":{"26":{},"32":{},"33":{},"35":{},"36":{},"43":{},"59":{},"60":{},"98":{},"99":{},"102":{},"103":{},"110":{},"127":{},"128":{},"166":{},"167":{},"168":{},"170":{},"178":{},"195":{},"196":{}},"component":{}}],["rendered.thi",{"_index":5182,"title":{},"name":{},"text":{"60":{}},"component":{}}],["rendering/remov",{"_index":5301,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["repeat",{"_index":803,"title":{},"name":{},"text":{"19":{},"23":{},"39":{},"40":{},"84":{},"90":{},"106":{},"107":{},"152":{},"158":{},"174":{},"175":{}},"component":{}}],["repeatedli",{"_index":3470,"title":{},"name":{},"text":{"39":{},"61":{},"106":{},"129":{},"174":{},"197":{}},"component":{}}],["repeatforev",{"_index":3682,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["repetit",{"_index":160,"title":{},"name":{},"text":{"3":{},"31":{},"39":{},"69":{},"97":{},"106":{},"137":{},"165":{},"174":{}},"component":{}}],["replac",{"_index":1028,"title":{"40-14":{},"107-14":{},"175-14":{}},"name":{},"text":{"21":{},"23":{},"24":{},"26":{},"38":{},"39":{},"40":{},"41":{},"48":{},"51":{},"53":{},"55":{},"58":{},"60":{},"64":{},"87":{},"89":{},"90":{},"92":{},"105":{},"106":{},"107":{},"111":{},"113":{},"115":{},"118":{},"120":{},"122":{},"126":{},"128":{},"131":{},"155":{},"157":{},"158":{},"173":{},"174":{},"175":{},"176":{},"181":{},"183":{},"186":{},"188":{},"190":{},"194":{},"196":{},"199":{}},"component":{}}],["repli",{"_index":4073,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["replyto",{"_index":4393,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["repo",{"_index":3200,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["report",{"_index":280,"title":{"46-9":{},"113-9":{},"181-9":{}},"name":{},"text":{"4":{},"19":{},"29":{},"39":{},"43":{},"46":{},"71":{},"84":{},"95":{},"106":{},"110":{},"113":{},"139":{},"152":{},"163":{},"174":{},"178":{},"181":{}},"component":{}}],["repositori",{"_index":515,"title":{},"name":{},"text":{"16":{},"18":{},"22":{},"23":{},"26":{},"27":{},"36":{},"82":{},"85":{},"88":{},"90":{},"92":{},"93":{},"103":{},"150":{},"153":{},"156":{},"158":{},"160":{},"161":{},"168":{}},"component":{}}],["repres",{"_index":297,"title":{},"name":{},"text":{"5":{},"19":{},"23":{},"26":{},"29":{},"32":{},"36":{},"38":{},"39":{},"58":{},"60":{},"62":{},"63":{},"64":{},"66":{},"70":{},"84":{},"90":{},"95":{},"98":{},"103":{},"105":{},"106":{},"126":{},"128":{},"130":{},"131":{},"132":{},"134":{},"138":{},"152":{},"158":{},"163":{},"166":{},"168":{},"173":{},"174":{},"194":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["represent",{"_index":2624,"title":{},"name":{},"text":{"26":{},"64":{},"66":{},"92":{},"131":{},"134":{},"199":{},"202":{}},"component":{}}],["reprogram",{"_index":1526,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["request",{"_index":525,"title":{"63-34":{},"63-35":{},"66-14":{},"132-34":{},"132-35":{},"134-14":{},"200-34":{},"200-35":{},"202-14":{}},"name":{},"text":{"16":{},"29":{},"37":{},"39":{},"40":{},"41":{},"42":{},"43":{},"46":{},"48":{},"52":{},"56":{},"59":{},"61":{},"63":{},"66":{},"82":{},"95":{},"104":{},"106":{},"107":{},"108":{},"110":{},"111":{},"113":{},"115":{},"119":{},"123":{},"127":{},"129":{},"132":{},"134":{},"150":{},"163":{},"169":{},"174":{},"175":{},"176":{},"177":{},"178":{},"181":{},"183":{},"187":{},"191":{},"195":{},"197":{},"200":{},"202":{}},"component":{}}],["requestid",{"_index":6069,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["request’",{"_index":4190,"title":{},"name":{},"text":{"41":{},"63":{},"111":{},"132":{},"176":{},"200":{}},"component":{}}],["requir",{"_index":157,"title":{"26-8":{},"27-13":{},"92-8":{}},"name":{},"text":{"3":{},"4":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"31":{},"32":{},"34":{},"36":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"48":{},"51":{},"52":{},"56":{},"59":{},"60":{},"63":{},"64":{},"66":{},"69":{},"71":{},"83":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"101":{},"103":{},"105":{},"106":{},"107":{},"109":{},"110":{},"112":{},"113":{},"115":{},"118":{},"119":{},"123":{},"124":{},"127":{},"128":{},"131":{},"132":{},"134":{},"137":{},"139":{},"151":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"163":{},"165":{},"166":{},"168":{},"172":{},"173":{},"174":{},"175":{},"178":{},"179":{},"180":{},"181":{},"183":{},"186":{},"187":{},"191":{},"193":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["require('./webpack.config.other.js')(env",{"_index":6384,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["require('@eclips",{"_index":1092,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["require.context",{"_index":4481,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["requireconfigfil",{"_index":2598,"title":{},"name":{},"text":{"26":{},"46":{}},"component":{}}],["rerend",{"_index":5071,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["rerun",{"_index":4515,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["res/index.html",{"_index":1118,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["resdir",{"_index":4464,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["resdirarray",{"_index":4521,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["reset",{"_index":228,"title":{},"name":{},"text":{"4":{},"29":{},"36":{},"40":{},"50":{},"63":{},"71":{},"95":{},"103":{},"107":{},"117":{},"132":{},"139":{},"163":{},"168":{},"175":{},"185":{},"200":{}},"component":{}}],["resetmenu",{"_index":4746,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["resiz",{"_index":5089,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["resolut",{"_index":2630,"title":{"40-19":{},"107-19":{},"175-19":{}},"name":{},"text":{"26":{}},"component":{}}],["resolv",{"_index":615,"title":{},"name":{},"text":{"17":{},"20":{},"23":{},"24":{},"29":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"83":{},"86":{},"89":{},"90":{},"92":{},"95":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"151":{},"154":{},"157":{},"158":{},"163":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["resolve(str",{"_index":5907,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["resolvetemplate(\"id",{"_index":6037,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["resolvetemplate(\"requestid",{"_index":6076,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["resolveuserid(httpservletrequest",{"_index":6094,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["resourc",{"_index":688,"title":{"22-10":{},"46-5":{},"63-18":{},"66-1":{},"66-2":{},"66-3":{},"66-13":{},"88-10":{},"113-5":{},"132-18":{},"134-1":{},"134-2":{},"134-3":{},"134-13":{},"156-10":{},"181-5":{},"200-18":{},"202-1":{},"202-2":{},"202-3":{},"202-13":{}},"name":{},"text":{"18":{},"19":{},"20":{},"22":{},"23":{},"27":{},"40":{},"43":{},"46":{},"52":{},"57":{},"60":{},"63":{},"66":{},"84":{},"85":{},"86":{},"88":{},"90":{},"107":{},"110":{},"113":{},"119":{},"125":{},"128":{},"132":{},"134":{},"152":{},"153":{},"154":{},"156":{},"158":{},"175":{},"178":{},"181":{},"187":{},"192":{},"196":{},"200":{},"202":{}},"component":{}}],["resource_path",{"_index":6030,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["resources.texts.text",{"_index":4993,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["resources/texts/texts.properti",{"_index":4994,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["resources/texts/texts_de.properti",{"_index":4996,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["resources/texts/texts_fr.properti",{"_index":4995,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["resource’",{"_index":6009,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["resp",{"_index":4456,"title":{},"name":{},"text":{"46":{},"50":{},"59":{},"60":{},"64":{},"113":{},"117":{},"127":{},"128":{},"131":{},"181":{},"185":{},"195":{},"196":{},"199":{}},"component":{}}],["respect",{"_index":1109,"title":{},"name":{},"text":{"22":{},"23":{},"38":{},"39":{},"41":{},"57":{},"60":{},"63":{},"88":{},"90":{},"105":{},"106":{},"111":{},"125":{},"127":{},"128":{},"132":{},"156":{},"158":{},"173":{},"174":{},"176":{},"192":{},"195":{},"196":{},"200":{}},"component":{}}],["respons",{"_index":773,"title":{"43-1":{},"53-1":{},"110-1":{},"120-1":{},"178-1":{},"188-1":{}},"name":{},"text":{"19":{},"22":{},"23":{},"32":{},"40":{},"41":{},"43":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"63":{},"66":{},"84":{},"88":{},"90":{},"98":{},"107":{},"110":{},"111":{},"120":{},"122":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"132":{},"134":{},"152":{},"156":{},"158":{},"166":{},"175":{},"176":{},"178":{},"188":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"200":{},"202":{}},"component":{}}],["response.clos",{"_index":6045,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["response.hasent",{"_index":6022,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["response.readentity(errorresponse.class).geterror",{"_index":6024,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["rest",{"_index":656,"title":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{},"27-20":{},"27-21":{},"37-2":{},"37-3":{},"66-1":{},"66-2":{},"66-3":{},"66-4":{},"66-9":{},"66-10":{},"66-11":{},"66-12":{},"92-27":{},"104-2":{},"104-3":{},"134-1":{},"134-2":{},"134-3":{},"134-4":{},"134-9":{},"134-10":{},"134-11":{},"134-12":{},"160-10":{},"169-2":{},"169-3":{},"202-1":{},"202-2":{},"202-3":{},"202-4":{},"202-9":{},"202-10":{},"202-11":{},"202-12":{}},"name":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"text":{"18":{},"21":{},"22":{},"27":{},"37":{},"59":{},"64":{},"65":{},"66":{},"85":{},"87":{},"88":{},"92":{},"93":{},"104":{},"127":{},"131":{},"133":{},"134":{},"153":{},"155":{},"156":{},"160":{},"169":{},"195":{},"199":{},"201":{},"202":{}},"component":{}}],["restappl",{"_index":5995,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["restart",{"_index":524,"title":{},"name":{},"text":{"16":{},"17":{},"19":{},"21":{},"23":{},"24":{},"29":{},"57":{},"82":{},"83":{},"84":{},"87":{},"89":{},"90":{},"95":{},"125":{},"150":{},"151":{},"152":{},"155":{},"157":{},"158":{},"163":{},"192":{}},"component":{}}],["restor",{"_index":2830,"title":{},"name":{},"text":{"26":{}},"component":{}}],["restoreselect",{"_index":6179,"title":{},"name":{},"text":{"92":{}},"component":{}}],["restrequestcancellationclientrequestfilt",{"_index":6084,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["restrequestcancellationclientrequestfilter(this::cancelrequest",{"_index":6081,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["restrequestcancellationfilt",{"_index":6095,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["restrequestcancellationservletfilt",{"_index":6092,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["restrict",{"_index":2376,"title":{},"name":{},"text":{"23":{},"40":{},"46":{},"65":{},"90":{},"107":{},"113":{},"133":{},"158":{},"175":{},"181":{},"201":{}},"component":{}}],["result",{"_index":170,"title":{"16-3":{},"82-3":{},"150-3":{}},"name":{},"text":{"3":{},"4":{},"19":{},"20":{},"22":{},"23":{},"29":{},"31":{},"36":{},"38":{},"39":{},"40":{},"41":{},"43":{},"46":{},"59":{},"60":{},"63":{},"64":{},"65":{},"66":{},"69":{},"71":{},"84":{},"86":{},"88":{},"90":{},"92":{},"93":{},"95":{},"97":{},"103":{},"105":{},"106":{},"107":{},"110":{},"111":{},"113":{},"127":{},"128":{},"131":{},"132":{},"133":{},"134":{},"137":{},"139":{},"152":{},"154":{},"156":{},"158":{},"163":{},"165":{},"168":{},"173":{},"174":{},"175":{},"176":{},"178":{},"181":{},"195":{},"196":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["result.sever",{"_index":3324,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["results.ther",{"_index":4486,"title":{},"name":{},"text":{"46":{}},"component":{}}],["results.xml",{"_index":6370,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["results.xml.sinc",{"_index":4487,"title":{},"name":{},"text":{"46":{}},"component":{}}],["retain",{"_index":3999,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["retri",{"_index":3328,"title":{},"name":{},"text":{"37":{},"40":{},"104":{},"107":{},"169":{},"175":{}},"component":{}}],["retriev",{"_index":1420,"title":{"40-12":{},"107-12":{},"175-12":{}},"name":{},"text":{"23":{},"38":{},"40":{},"48":{},"57":{},"65":{},"66":{},"90":{},"93":{},"105":{},"107":{},"115":{},"125":{},"133":{},"134":{},"158":{},"173":{},"175":{},"183":{},"192":{},"201":{},"202":{}},"component":{}}],["return",{"_index":582,"title":{"93-8":{}},"name":{},"text":{"16":{},"20":{},"22":{},"23":{},"26":{},"27":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"46":{},"48":{},"52":{},"53":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"82":{},"86":{},"88":{},"90":{},"92":{},"93":{},"100":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"115":{},"119":{},"120":{},"122":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"150":{},"154":{},"156":{},"158":{},"160":{},"169":{},"171":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"181":{},"183":{},"187":{},"188":{},"190":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["reus",{"_index":1136,"title":{},"name":{},"text":{"22":{},"23":{},"44":{},"48":{},"58":{},"88":{},"90":{},"109":{},"115":{},"126":{},"156":{},"158":{},"179":{},"183":{},"194":{}},"component":{}}],["reusabl",{"_index":3613,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["reveal",{"_index":4238,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["revers",{"_index":4248,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["review",{"_index":1223,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["revis",{"_index":5908,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["rework",{"_index":2888,"title":{"27-4":{}},"name":{},"text":{"27":{}},"component":{}}],["rewriteindeximport",{"_index":6386,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["rfc",{"_index":3884,"title":{},"name":{},"text":{"40":{},"43":{},"107":{},"110":{},"175":{},"178":{}},"component":{}}],["ri",{"_index":5396,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["rid",{"_index":1248,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["right",{"_index":44,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"19":{},"21":{},"23":{},"24":{},"26":{},"27":{},"29":{},"40":{},"46":{},"53":{},"58":{},"59":{},"60":{},"63":{},"70":{},"71":{},"84":{},"87":{},"89":{},"90":{},"95":{},"107":{},"113":{},"120":{},"126":{},"127":{},"128":{},"132":{},"135":{},"138":{},"139":{},"152":{},"155":{},"157":{},"158":{},"163":{},"175":{},"181":{},"188":{},"194":{},"195":{},"196":{},"200":{}},"component":{}}],["risk",{"_index":2820,"title":{},"name":{},"text":{"26":{},"43":{},"110":{},"178":{}},"component":{}}],["robust",{"_index":147,"title":{},"name":{},"text":{"3":{},"26":{},"31":{},"69":{},"97":{},"137":{},"165":{}},"component":{}}],["role",{"_index":865,"title":{},"name":{},"text":{"19":{},"23":{},"43":{},"84":{},"90":{},"110":{},"152":{},"158":{},"178":{}},"component":{}}],["roll",{"_index":4174,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["root",{"_index":1011,"title":{},"name":{},"text":{"21":{},"22":{},"23":{},"24":{},"26":{},"40":{},"50":{},"51":{},"60":{},"62":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"107":{},"117":{},"118":{},"128":{},"130":{},"155":{},"156":{},"157":{},"158":{},"175":{},"185":{},"186":{},"196":{},"198":{}},"component":{}}],["rootgroupbox",{"_index":946,"title":{},"name":{},"text":{"20":{},"22":{},"36":{},"48":{},"60":{},"86":{},"88":{},"93":{},"103":{},"115":{},"128":{},"154":{},"156":{},"168":{},"183":{},"196":{}},"component":{}}],["rotat",{"_index":3273,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["rotate_left_bold",{"_index":2668,"title":{},"name":{},"text":{"26":{}},"component":{}}],["rotate_right_bold",{"_index":2670,"title":{},"name":{},"text":{"26":{}},"component":{}}],["rotatey",{"_index":3269,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["rough",{"_index":153,"title":{},"name":{},"text":{"3":{},"31":{},"69":{},"97":{},"137":{},"165":{}},"component":{}}],["round",{"_index":1650,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["roundtrip",{"_index":1658,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["rout",{"_index":2335,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["row",{"_index":217,"title":{"34":{},"101":{},"172":{}},"name":{},"text":{"4":{},"16":{},"23":{},"27":{},"29":{},"34":{},"39":{},"53":{},"59":{},"60":{},"65":{},"71":{},"82":{},"90":{},"95":{},"101":{},"106":{},"120":{},"127":{},"128":{},"133":{},"139":{},"150":{},"158":{},"163":{},"172":{},"174":{},"188":{},"195":{},"196":{},"201":{}},"component":{}}],["row.extern",{"_index":3161,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["row.priv",{"_index":3159,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["row.publ",{"_index":3157,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["row/tre",{"_index":2655,"title":{},"name":{},"text":{"26":{}},"component":{}}],["rows.add(new",{"_index":1360,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["rows.get(0).gettext",{"_index":5979,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["rows.isempti",{"_index":5978,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["rs",{"_index":3275,"title":{},"name":{},"text":{"37":{},"66":{},"104":{},"134":{},"169":{},"202":{}},"component":{}}],["rsa",{"_index":731,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["rt",{"_index":5413,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["rt:2.3.5",{"_index":4009,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["rule",{"_index":511,"title":{"26-21":{}},"name":{},"text":{"16":{},"23":{},"26":{},"40":{},"46":{},"53":{},"56":{},"58":{},"82":{},"90":{},"107":{},"113":{},"120":{},"123":{},"124":{},"126":{},"150":{},"158":{},"175":{},"181":{},"188":{},"191":{},"193":{},"194":{}},"component":{}}],["ruleset",{"_index":4546,"title":{},"name":{},"text":{"46":{}},"component":{}}],["run",{"_index":164,"title":{"16-4":{},"22-5":{},"37-4":{},"63-4":{},"63-5":{},"82-4":{},"88-5":{},"104-4":{},"132-4":{},"132-5":{},"150-4":{},"156-5":{},"169-4":{},"200-4":{},"200-5":{}},"name":{"41":{},"42":{},"108":{},"111":{},"176":{},"177":{}},"text":{"3":{},"14":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"29":{},"31":{},"32":{},"33":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"46":{},"53":{},"56":{},"61":{},"63":{},"65":{},"66":{},"69":{},"80":{},"82":{},"83":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"99":{},"102":{},"104":{},"105":{},"106":{},"107":{},"110":{},"111":{},"113":{},"120":{},"123":{},"129":{},"132":{},"133":{},"134":{},"137":{},"148":{},"150":{},"151":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"163":{},"165":{},"166":{},"167":{},"169":{},"170":{},"173":{},"174":{},"175":{},"176":{},"178":{},"181":{},"188":{},"191":{},"197":{},"200":{},"201":{},"202":{}},"component":{}}],["runcontext",{"_index":1613,"title":{"41":{},"111":{},"176":{},"41-1":{},"41-2":{},"66-7":{},"111-1":{},"111-2":{},"134-7":{},"176-1":{},"176-2":{},"202-7":{}},"name":{},"text":{"23":{},"38":{},"39":{},"41":{},"42":{},"63":{},"66":{},"90":{},"105":{},"106":{},"108":{},"111":{},"132":{},"134":{},"158":{},"173":{},"174":{},"176":{},"177":{},"200":{},"202":{}},"component":{}}],["runcontextproduc",{"_index":5512,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["runcontexts.copycurr",{"_index":4164,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["runcontexts.empti",{"_index":4157,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["runderbycommand(mappingnam",{"_index":1555,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["runmonitor",{"_index":3479,"title":{"42":{},"108":{},"177":{}},"name":{},"text":{"39":{},"41":{},"42":{},"66":{},"106":{},"108":{},"111":{},"134":{},"174":{},"176":{},"177":{},"202":{}},"component":{}}],["runmonitor.current.get",{"_index":4167,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["runmonitor.current.get().iscancel",{"_index":3483,"title":{},"name":{},"text":{"39":{},"41":{},"42":{},"106":{},"108":{},"111":{},"174":{},"176":{},"177":{}},"component":{}}],["runnabl",{"_index":1607,"title":{},"name":{},"text":{"23":{},"38":{},"39":{},"41":{},"90":{},"105":{},"106":{},"111":{},"158":{},"173":{},"174":{},"176":{}},"component":{}}],["runnable’",{"_index":3437,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["runner",{"_index":4471,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["runner.github.io/4.0/config/configur",{"_index":4534,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["runtim",{"_index":177,"title":{"26-3":{},"26-4":{},"38-2":{},"38-8":{},"56-6":{},"92-3":{},"92-4":{},"105-2":{},"105-8":{},"123-6":{},"160-3":{},"160-4":{},"173-2":{},"173-8":{},"191-6":{}},"name":{},"text":{"3":{},"19":{},"22":{},"26":{},"31":{},"38":{},"40":{},"46":{},"51":{},"52":{},"62":{},"63":{},"64":{},"69":{},"84":{},"88":{},"92":{},"97":{},"105":{},"107":{},"113":{},"118":{},"119":{},"130":{},"131":{},"132":{},"137":{},"152":{},"156":{},"160":{},"165":{},"173":{},"175":{},"181":{},"186":{},"187":{},"198":{},"199":{},"200":{}},"component":{}}],["runtimeexcept",{"_index":1619,"title":{},"name":{},"text":{"23":{},"38":{},"39":{},"63":{},"66":{},"90":{},"105":{},"106":{},"132":{},"134":{},"158":{},"173":{},"174":{},"200":{},"202":{}},"component":{}}],["runwithruncontext",{"_index":5551,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["s",{"_index":4572,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["s3cret",{"_index":877,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["safari",{"_index":2929,"title":{},"name":{},"text":{"27":{},"45":{},"112":{},"180":{}},"component":{}}],["safe",{"_index":2787,"title":{},"name":{},"text":{"26":{},"43":{},"64":{},"110":{},"131":{},"178":{},"199":{}},"component":{}}],["safeti",{"_index":5610,"title":{},"name":{},"text":{"63":{},"92":{},"132":{},"200":{}},"component":{}}],["sake",{"_index":628,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"83":{},"87":{},"89":{},"151":{},"155":{},"157":{}},"component":{}}],["salari",{"_index":4651,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["salaryfield",{"_index":4663,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["salesfunnel",{"_index":5110,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["salt",{"_index":3898,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["same",{"_index":250,"title":{},"name":{},"text":{"4":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"34":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{},"47":{},"48":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"62":{},"63":{},"64":{},"66":{},"71":{},"82":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"93":{},"94":{},"95":{},"100":{},"101":{},"105":{},"106":{},"107":{},"109":{},"110":{},"113":{},"114":{},"115":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"125":{},"126":{},"128":{},"130":{},"131":{},"132":{},"134":{},"139":{},"150":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"171":{},"172":{},"173":{},"174":{},"175":{},"178":{},"179":{},"181":{},"182":{},"183":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"194":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["sameorigin",{"_index":4216,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["sameproperti",{"_index":6188,"title":{},"name":{},"text":{"92":{}},"component":{}}],["sampl",{"_index":1194,"title":{},"name":{},"text":{"23":{},"40":{},"56":{},"63":{},"90":{},"107":{},"123":{},"132":{},"158":{},"175":{},"191":{},"200":{}},"component":{}}],["sandbox",{"_index":4227,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["satisfi",{"_index":2104,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["save",{"_index":1277,"title":{},"name":{},"text":{"23":{},"27":{},"46":{},"50":{},"90":{},"100":{},"113":{},"117":{},"158":{},"171":{},"181":{},"185":{}},"component":{}}],["savemenu",{"_index":4745,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["say",{"_index":5043,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["scalabl",{"_index":4786,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["scalar",{"_index":5911,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["scale",{"_index":3001,"title":{},"name":{},"text":{"32":{},"33":{},"35":{},"59":{},"93":{},"98":{},"99":{},"102":{},"127":{},"166":{},"167":{},"170":{},"195":{}},"component":{}}],["scale._labelsizes.widest.width",{"_index":2570,"title":{},"name":{},"text":{"26":{}},"component":{}}],["scale._tick",{"_index":2571,"title":{},"name":{},"text":{"26":{}},"component":{}}],["scale.longestlabelwidth",{"_index":2569,"title":{},"name":{},"text":{"26":{}},"component":{}}],["scale.tick",{"_index":2572,"title":{},"name":{},"text":{"26":{}},"component":{}}],["scan",{"_index":3721,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scanner",{"_index":4042,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scenario",{"_index":1647,"title":{},"name":{},"text":{"23":{},"43":{},"61":{},"66":{},"90":{},"110":{},"129":{},"134":{},"158":{},"178":{},"197":{},"202":{}},"component":{}}],["schedul",{"_index":3400,"title":{"39-3":{},"39-35":{},"106-3":{},"106-35":{},"174-3":{},"174-35":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["schedule(cal",{"_index":3443,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["schedule(irunn",{"_index":3442,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["scheduler.org",{"_index":3486,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["schedule’",{"_index":3643,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["schema",{"_index":2327,"title":{"63-13":{},"132-13":{},"200-13":{}},"name":{},"text":{"23":{},"40":{},"63":{},"90":{},"107":{},"132":{},"158":{},"175":{},"200":{}},"component":{}}],["scheme",{"_index":3093,"title":{},"name":{},"text":{"33":{},"35":{},"43":{},"59":{},"99":{},"102":{},"110":{},"127":{},"167":{},"170":{},"178":{},"195":{}},"component":{}}],["scm",{"_index":1168,"title":{},"name":{},"text":{"22":{},"52":{},"88":{},"119":{},"156":{},"187":{}},"component":{}}],["scoop",{"_index":3013,"title":{},"name":{},"text":{"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["scope",{"_index":274,"title":{"40-8":{},"107-8":{},"175-8":{}},"name":{},"text":{"4":{},"29":{},"39":{},"40":{},"41":{},"46":{},"48":{},"63":{},"64":{},"66":{},"71":{},"93":{},"95":{},"106":{},"107":{},"111":{},"113":{},"115":{},"131":{},"132":{},"134":{},"139":{},"163":{},"174":{},"175":{},"176":{},"181":{},"183":{},"199":{},"200":{},"202":{}},"component":{}}],["scope.appl",{"_index":5566,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["scott",{"_index":813,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["scott:*;jack:;john",{"_index":5700,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["scott:salt.password",{"_index":5697,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["scout",{"_index":11,"title":{"2":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"54":{},"68":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"100":{},"121":{},"136":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"171":{},"189":{},"3-1":{},"6-1":{},"6-3":{},"14-1":{},"16-1":{},"16-2":{},"17-4":{},"19-3":{},"23-19":{},"24-7":{},"26-3":{},"26-4":{},"26-5":{},"26-27":{},"26-28":{},"27-24":{},"27-25":{},"29-9":{},"29-10":{},"29-20":{},"29-24":{},"29-30":{},"29-31":{},"29-32":{},"32-1":{},"32-2":{},"37-5":{},"38-1":{},"38-2":{},"38-8":{},"40-22":{},"48-1":{},"48-5":{},"61-15":{},"65-1":{},"65-2":{},"69-1":{},"72-1":{},"72-3":{},"80-1":{},"82-1":{},"82-2":{},"83-4":{},"84-3":{},"89-7":{},"90-19":{},"92-3":{},"92-4":{},"92-5":{},"92-11":{},"92-13":{},"92-14":{},"92-16":{},"92-19":{},"92-21":{},"92-27":{},"93-4":{},"95-9":{},"95-10":{},"95-20":{},"95-24":{},"95-30":{},"95-31":{},"95-32":{},"98-1":{},"98-2":{},"104-5":{},"105-1":{},"105-2":{},"105-8":{},"107-22":{},"115-1":{},"115-5":{},"129-15":{},"133-1":{},"133-2":{},"137-1":{},"140-1":{},"140-3":{},"148-1":{},"150-1":{},"150-2":{},"151-4":{},"152-3":{},"157-7":{},"158-19":{},"160-3":{},"160-4":{},"160-5":{},"163-9":{},"163-10":{},"163-20":{},"163-24":{},"163-30":{},"163-31":{},"163-32":{},"166-1":{},"166-2":{},"169-5":{},"173-1":{},"173-2":{},"173-8":{},"175-22":{},"183-1":{},"183-5":{},"197-15":{},"201-1":{},"201-2":{}},"name":{"28":{},"94":{},"162":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"112":{},"113":{},"115":{},"118":{},"119":{},"120":{},"122":{},"123":{},"124":{},"125":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"180":{},"181":{},"183":{},"186":{},"187":{},"188":{},"190":{},"191":{},"192":{},"193":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}}}],["scout.addobjectfactori",{"_index":961,"title":{},"name":{},"text":{"20":{},"22":{},"48":{},"55":{},"86":{},"88":{},"115":{},"122":{},"154":{},"156":{},"183":{},"190":{}},"component":{}}],["scout.app#_initvers",{"_index":4765,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["scout.app().init",{"_index":962,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["scout.application.nam",{"_index":3870,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.application.vers",{"_index":3872,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.auth.anonymousen",{"_index":3874,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.auth.cookieen",{"_index":3876,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.auth.cookiemaxag",{"_index":3878,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.auth.cookienam",{"_index":3882,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.auth.cookiesessionvalidatesecur",{"_index":3889,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.auth.cookiesessionvalidatesecure=fals",{"_index":755,"title":{},"name":{},"text":{"19":{},"43":{},"84":{},"110":{},"152":{},"178":{}},"component":{}}],["scout.auth.credenti",{"_index":3891,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["scout.auth.credentialsplaintext",{"_index":3907,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["scout.auth.privatekey",{"_index":2500,"title":{},"name":{},"text":{"26":{},"40":{},"107":{},"175":{}},"component":{}}],["scout.auth.publickey",{"_index":2501,"title":{},"name":{},"text":{"26":{},"40":{},"107":{},"175":{}},"component":{}}],["scout.auth.tokenttl",{"_index":3911,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.backendurl",{"_index":760,"title":{},"name":{},"text":{"19":{},"40":{},"84":{},"107":{},"152":{},"175":{}},"component":{}}],["scout.bookmark",{"_index":5754,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["scout.chart",{"_index":3130,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["scout.client.jobcompletiondelayonsessionshutdown",{"_index":3915,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.client.memorypolici",{"_index":3916,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.client.notificationsubject",{"_index":3919,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.client.testingsessionttl",{"_index":3920,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.client.userarea",{"_index":3921,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.clientnotification.chunks",{"_index":3922,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.clientnotification.maxnotificationblockingtimeout",{"_index":3923,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.clientnotification.nodequeuecapac",{"_index":3925,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.clientnotification.notificationqueueexpiretim",{"_index":3928,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.clustersync.us",{"_index":3931,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.creat",{"_index":4911,"title":{},"name":{},"text":{"55":{},"60":{},"92":{},"122":{},"128":{},"190":{},"196":{}},"component":{}}],["scout.create('ajaxcal",{"_index":3318,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["scout.create('button",{"_index":5251,"title":{},"name":{},"text":{"60":{},"93":{}},"component":{}}],["scout.create('chart",{"_index":3164,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["scout.create('customtilefilt",{"_index":5135,"title":{},"name":{},"text":{"59":{}},"component":{}}],["scout.create('example.myform",{"_index":5218,"title":{},"name":{},"text":{"60":{}},"component":{}}],["scout.create('form",{"_index":5216,"title":{},"name":{},"text":{"60":{}},"component":{}}],["scout.create('groupbox",{"_index":5244,"title":{},"name":{},"text":{"60":{}},"component":{}}],["scout.create('mynamespace.stringfield",{"_index":5195,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["scout.create('scout.t",{"_index":4913,"title":{},"name":{},"text":{"55":{},"122":{},"190":{}},"component":{}}],["scout.create('stringfield",{"_index":5193,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["scout.create('t",{"_index":4726,"title":{},"name":{},"text":{"49":{},"55":{},"122":{},"190":{}},"component":{}}],["scout.create('yournamespace.specialstringfield",{"_index":4594,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["scout.create(button",{"_index":6278,"title":{},"name":{},"text":{"93":{},"128":{},"196":{}},"component":{}}],["scout.create(customtilefilt",{"_index":6402,"title":{},"name":{},"text":{"127":{},"195":{}},"component":{}}],["scout.create(form",{"_index":6412,"title":{},"name":{},"text":{"128":{},"196":{}},"component":{}}],["scout.create(groupbox",{"_index":6418,"title":{},"name":{},"text":{"128":{},"196":{}},"component":{}}],["scout.create(myform",{"_index":6413,"title":{},"name":{},"text":{"128":{},"196":{}},"component":{}}],["scout.create(objecttyp",{"_index":6276,"title":{},"name":{},"text":{"93":{}},"component":{}}],["scout.create(stringfield",{"_index":6410,"title":{},"name":{},"text":{"128":{},"196":{}},"component":{}}],["scout.create(t",{"_index":6394,"title":{},"name":{},"text":{"116":{},"122":{},"184":{},"190":{}},"component":{}}],["scout.create.best",{"_index":5192,"title":{},"name":{},"text":{"60":{}},"component":{}}],["scout.create\\($2",{"_index":6137,"title":{},"name":{},"text":{"92":{}},"component":{}}],["scout.createtunneltoserverbean",{"_index":3934,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.cspdirect",{"_index":3936,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.cspdirective[img",{"_index":1903,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["scout.cspen",{"_index":3942,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.cspexclus",{"_index":3943,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.desktop",{"_index":937,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["scout.dev.texts.filewatcherenabled=fals",{"_index":5008,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["scout.devmod",{"_index":3947,"title":{},"name":{},"text":{"40":{},"46":{},"107":{},"113":{},"175":{},"181":{}},"component":{}}],["scout.devmode=fals",{"_index":4509,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["scout.devmode=tru",{"_index":4504,"title":{},"name":{},"text":{"46":{},"57":{},"113":{},"125":{},"181":{},"192":{}},"component":{}}],["scout.diagnostics.httpsessionidlogmod",{"_index":2829,"title":{},"name":{},"text":{"26":{}},"component":{}}],["scout.externalbaseurl",{"_index":3948,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.groupbox.borderdecoration.empti",{"_index":948,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["scout.groupboxresponsivehandl",{"_index":4836,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["scout.healthcheckremoteurl",{"_index":3952,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.connectionttl",{"_index":3954,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.ignoreproxypattern",{"_index":3956,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.ignoreproxypatterns[0]=https?://localhost(?::\\d",{"_index":3959,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.ignoreproxypatterns[1",{"_index":3960,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.keepal",{"_index":3961,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.maxconnectionsperrout",{"_index":3964,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.maxconnectionstot",{"_index":3965,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.proxypattern",{"_index":3967,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.proxypatterns[0]=.*\\.example.com(:\\d+)?=127.0.0.1:8888",{"_index":6061,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["scout.http.proxypatterns[0]=.\\.example.com(:\\d+)?=127.0.0.1:8888",{"_index":3969,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.proxypatterns[1]=.\\.example.org(:\\d+)?=proxy.company.com",{"_index":3970,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.redirectpost",{"_index":3971,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.retryonnohttpresponseexcept",{"_index":3973,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.retryonsocketexceptionbyconnectionreset",{"_index":3979,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.http.transportfactori",{"_index":3981,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jandex.rebuild",{"_index":3985,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jaxws.consumer.connecttimeout",{"_index":3988,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["scout.jaxws.consumer.portcache.corepools",{"_index":3991,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["scout.jaxws.consumer.portcache.en",{"_index":3994,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["scout.jaxws.consumer.portcache.ttl",{"_index":3998,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["scout.jaxws.consumer.portpoolen",{"_index":4001,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jaxws.consumer.readtimeout",{"_index":4003,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["scout.jaxws.implementor",{"_index":4004,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["scout.jaxws.implementor=org.eclipse.scout.rt.server.jaxws.implementor.jaxwscxfspecif",{"_index":5403,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["scout.jaxws.loghandlerdebug",{"_index":4010,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jaxws.provider.authentication.basicrealm",{"_index":4012,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jaxws.provider.user.authent",{"_index":4015,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jaxws.provider.user.handl",{"_index":4017,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["scout.jetty.port",{"_index":4019,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jobmanag",{"_index":3667,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["scout.jobmanager.allowcorethreadtimeout",{"_index":4021,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jobmanager.corepools",{"_index":4025,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jobmanager.keepalivetim",{"_index":4023,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jobmanager.maximumpools",{"_index":4026,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.jobmanager.prestartcorethread",{"_index":4027,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.loadwebresourcesfromfilesystem",{"_index":4028,"title":{},"name":{},"text":{"40":{},"46":{},"107":{},"113":{},"175":{},"181":{}},"component":{}}],["scout.mail.bouncedetector.heuristic.cont",{"_index":4032,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mail.bouncedetector.heuristic.senderprefix",{"_index":4037,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mail.bouncedetector.heuristic.subject",{"_index":4039,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.malwarescanner.path",{"_index":4040,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.messageboxes.openok(this.session.desktop",{"_index":960,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["scout.mom.cluster.destination.clusternotificationtop",{"_index":4044,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.cluster.environ",{"_index":4046,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.cluster.environment[connectionfactorynames]=clustermom",{"_index":4055,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.cluster.environment[java.naming.factory.initial]=org.apache.activemq.jndi.activemqinitialcontextfactori",{"_index":4053,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.cluster.environment[java.naming.provider.url]=failover:(peer://mom/cluster?persistent=fals",{"_index":4054,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.cluster.environment[scout.mom.connectionfactory.name]=clustermom",{"_index":4052,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.cluster.environment[scout.mom.name]=scout",{"_index":4051,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.cluster.implementor",{"_index":4056,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.cluster.implementor=org.eclipse.scout.rt.mom.jms.jmsmomimplementor",{"_index":4058,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.failover.connectionretrycount",{"_index":4060,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.failover.connectionretryintervalmilli",{"_index":4062,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.failover.sessionretryintervalmilli",{"_index":4065,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.marshal",{"_index":4067,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.requestreply.cancel",{"_index":4074,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.requestreply.cancellationtop",{"_index":4072,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.mom.requestreply.en",{"_index":4075,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.nodeid",{"_index":4076,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.remotefilerootpath",{"_index":4077,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.responsivemanag",{"_index":4837,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["scout.responsivemanager.setactive(fals",{"_index":4838,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["scout.rest.usescoutapacheconnector",{"_index":6114,"title":{"92-27":{}},"name":{},"text":{"92":{}},"component":{}}],["scout.rest.usescoutapacheconnector=tru",{"_index":6063,"title":{},"name":{},"text":{"66":{}},"component":{}}],["scout.serversessionttl",{"_index":4079,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.servicetunnel.compress",{"_index":4080,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.servicetunnel.maxconnectionsperrout",{"_index":4082,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.servicetunnel.maxconnectionstot",{"_index":4084,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.servicetunnel.targeturl",{"_index":3935,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.smtp.connectiontimeout",{"_index":4086,"title":{},"name":{},"text":{"40":{},"44":{},"107":{},"109":{},"175":{},"179":{}},"component":{}}],["scout.smtp.debugreceiveremail",{"_index":4087,"title":{},"name":{},"text":{"40":{},"44":{},"107":{},"109":{},"175":{},"179":{}},"component":{}}],["scout.smtp.pool.maxconnectionlifetim",{"_index":4089,"title":{},"name":{},"text":{"40":{},"44":{},"107":{},"109":{},"175":{},"179":{}},"component":{}}],["scout.smtp.pool.maxidletim",{"_index":4091,"title":{},"name":{},"text":{"40":{},"44":{},"107":{},"109":{},"175":{},"179":{}},"component":{}}],["scout.smtp.pool.waitforconnectiontimeout",{"_index":4092,"title":{},"name":{},"text":{"40":{},"44":{},"107":{},"109":{},"175":{},"179":{}},"component":{}}],["scout.smtp.readtimeout",{"_index":4095,"title":{},"name":{},"text":{"40":{},"44":{},"107":{},"109":{},"175":{},"179":{}},"component":{}}],["scout.sql.directjdbcconnect",{"_index":4096,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jdbc.drivernam",{"_index":4098,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jdbc.mappingnam",{"_index":4101,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jdbc.pool.connectionbusytimeout",{"_index":4103,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jdbc.pool.connectionidletimeout",{"_index":4104,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jdbc.pool.s",{"_index":4105,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jdbc.properti",{"_index":4106,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jdbc.statementcaches",{"_index":4108,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jndi.initialcontextfactori",{"_index":4109,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jndi.nam",{"_index":4110,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jndi.providerurl",{"_index":4111,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.jndi.urlpkgprefix",{"_index":4113,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.password",{"_index":4114,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.transactionmemberid",{"_index":4115,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.sql.usernam",{"_index":4116,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.texts#readfromdom",{"_index":4759,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["scout.texts.showkey",{"_index":4117,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.tiles.dataloadqueuetimeoutsecond",{"_index":4121,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.tiles.maxconcurrentdataloadthread",{"_index":4122,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.trustedcertif",{"_index":4123,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.ui.backgroundpollingmaxwaittim",{"_index":4124,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.ui.local",{"_index":4127,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.ui.maxuseridletim",{"_index":4126,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.ui.modeljobtimeout",{"_index":4133,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.ui.sessionstore.housekeepingdelay",{"_index":4134,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.ui.them",{"_index":4136,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.ui.theme=rainbow",{"_index":4952,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["scout.urlhints.en",{"_index":4137,"title":{},"name":{},"text":{"40":{},"46":{},"107":{},"113":{},"175":{},"181":{}},"component":{}}],["scout.util.defaultdecimalsupportprovid",{"_index":4139,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout.widget#resolveconst",{"_index":5227,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["scout.xml",{"_index":3696,"title":{"40-4":{},"107-4":{},"175-4":{}},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["scout/chart",{"_index":985,"title":{},"name":{},"text":{"20":{},"26":{},"33":{},"35":{},"86":{},"99":{},"102":{},"154":{},"167":{},"170":{}},"component":{}}],["scout/chart/src/index",{"_index":3028,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["scout/cli",{"_index":1078,"title":{},"name":{},"text":{"22":{},"26":{},"46":{},"88":{},"92":{},"113":{},"156":{},"160":{},"181":{}},"component":{}}],["scout/cli/scripts/karma",{"_index":4475,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["scout/cli/scripts/webpack",{"_index":1093,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["scout/cor",{"_index":934,"title":{},"name":{},"text":{"20":{},"22":{},"26":{},"36":{},"46":{},"48":{},"55":{},"56":{},"58":{},"59":{},"60":{},"86":{},"88":{},"92":{},"93":{},"100":{},"103":{},"113":{},"115":{},"122":{},"123":{},"126":{},"127":{},"128":{},"154":{},"156":{},"160":{},"168":{},"171":{},"181":{},"183":{},"190":{},"191":{},"194":{},"195":{},"196":{}},"component":{}}],["scout/core/dist",{"_index":924,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["scout/core/dist/locales.json",{"_index":1100,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["scout/core/dist/texts.json",{"_index":1101,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["scout/core/r",{"_index":1099,"title":{},"name":{},"text":{"22":{},"46":{},"88":{},"113":{},"156":{},"181":{}},"component":{}}],["scout/core/src",{"_index":6199,"title":{},"name":{},"text":{"92":{}},"component":{}}],["scout/core/src/form/fields/button/button.j",{"_index":6144,"title":{},"name":{},"text":{"92":{}},"component":{}}],["scout/core/src/index",{"_index":1133,"title":{},"name":{},"text":{"22":{},"56":{},"88":{},"123":{},"156":{},"191":{}},"component":{}}],["scout/core/src/table/t",{"_index":6198,"title":{},"name":{},"text":{"92":{}},"component":{}}],["scout/core/src/test",{"_index":6200,"title":{},"name":{},"text":{"92":{}},"component":{}}],["scout/core/src/testing/index",{"_index":4480,"title":{},"name":{},"text":{"46":{}},"component":{}}],["scout/core/test",{"_index":6201,"title":{},"name":{},"text":{"92":{},"113":{},"181":{}},"component":{}}],["scout/core?path=dist",{"_index":695,"title":{},"name":{},"text":{"18":{},"26":{},"85":{},"92":{},"153":{},"160":{}},"component":{}}],["scout/core@{nod",{"_index":966,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["scout/eslint",{"_index":4450,"title":{},"name":{},"text":{"46":{},"93":{},"113":{},"181":{}},"component":{}}],["scout/karma",{"_index":4451,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["scout/migr",{"_index":6132,"title":{},"name":{},"text":{"92":{},"93":{},"124":{},"193":{}},"component":{}}],["scout/releng",{"_index":2467,"title":{},"name":{},"text":{"26":{},"92":{},"160":{}},"component":{}}],["scout/scout.rt/commit/91f8465564e718702920a28edbb559041cfeb752",{"_index":2867,"title":{},"name":{},"text":{"26":{}},"component":{}}],["scout/scout.rt/tree/releases/22.0/org.eclipse.scout.rt.ui.html/src/icon",{"_index":2659,"title":{},"name":{},"text":{"26":{}},"component":{}}],["scout/styl",{"_index":4934,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["scout/tsconfig",{"_index":6287,"title":{},"name":{},"text":{"93":{},"124":{},"193":{}},"component":{}}],["scout:bas",{"_index":4748,"title":{"51-1":{},"118-1":{},"186-1":{}},"name":{},"text":{},"component":{}}],["scout:includ",{"_index":4749,"title":{"51-2":{},"118-2":{},"186-2":{}},"name":{},"text":{},"component":{}}],["scout:messag",{"_index":4750,"title":{"51-3":{},"118-3":{},"186-3":{}},"name":{},"text":{},"component":{}}],["scout:script",{"_index":4751,"title":{"51-4":{},"51-5":{},"118-4":{},"118-5":{},"186-4":{},"186-5":{}},"name":{},"text":{},"component":{}}],["scout:stylesheet",{"_index":4752,"title":{"51-6":{},"51-7":{},"118-6":{},"118-7":{},"186-6":{},"186-7":{}},"name":{},"text":{},"component":{}}],["scout:vers",{"_index":4753,"title":{"51-8":{},"118-8":{},"186-8":{}},"name":{},"text":{},"component":{}}],["scout_user_guid",{"_index":110,"title":{},"name":{"2":{},"68":{},"136":{}},"text":{},"component":{}}],["scout`",{"_index":4468,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["scoutapacheconnector",{"_index":6255,"title":{},"name":{},"text":{"92":{}},"component":{}}],["scoutdesktop",{"_index":1147,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["scoutdocpermissionlevel",{"_index":4291,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["scoutdocpermissionlevels.al",{"_index":4317,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["scoutdocpermissionlevels.own",{"_index":4290,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["scoutfieldstatu",{"_index":2452,"title":{"26-36":{}},"name":{},"text":{"26":{}},"component":{}}],["scouticon",{"_index":4821,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["scouticons.ttf",{"_index":5276,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["scouticons.woff",{"_index":4465,"title":{},"name":{},"text":{"46":{},"52":{},"113":{},"119":{},"181":{},"187":{}},"component":{}}],["scoutinfoform",{"_index":2642,"title":{},"name":{},"text":{"26":{}},"component":{}}],["scoutj",{"_index":2453,"title":{"26-37":{}},"name":{},"text":{"35":{},"36":{},"102":{},"103":{},"167":{},"168":{}},"component":{}}],["scoutrequestid",{"_index":6085,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["scout’",{"_index":1107,"title":{},"name":{},"text":{"22":{},"23":{},"24":{},"29":{},"46":{},"51":{},"60":{},"63":{},"66":{},"88":{},"89":{},"90":{},"93":{},"95":{},"113":{},"118":{},"128":{},"132":{},"134":{},"156":{},"157":{},"158":{},"163":{},"181":{},"186":{},"196":{},"200":{},"202":{}},"component":{}}],["scratch",{"_index":355,"title":{},"name":{},"text":{"6":{},"14":{},"29":{},"72":{},"80":{},"95":{},"140":{},"148":{},"163":{}},"component":{}}],["screen",{"_index":553,"title":{},"name":{},"text":{"16":{},"21":{},"23":{},"24":{},"45":{},"53":{},"60":{},"82":{},"87":{},"89":{},"90":{},"112":{},"120":{},"128":{},"150":{},"155":{},"157":{},"158":{},"180":{},"188":{},"196":{}},"component":{}}],["screenshot",{"_index":203,"title":{},"name":{},"text":{"4":{},"16":{},"23":{},"28":{},"29":{},"56":{},"71":{},"82":{},"90":{},"94":{},"95":{},"123":{},"139":{},"150":{},"158":{},"162":{},"163":{},"191":{}},"component":{}}],["screenshot!\\n\\nregards,\\nsend",{"_index":4415,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["screenshotattach",{"_index":4405,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["screenshotresourc",{"_index":4399,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["script",{"_index":686,"title":{"46-15":{},"113-15":{},"181-15":{}},"name":{},"text":{"18":{},"19":{},"20":{},"22":{},"26":{},"43":{},"46":{},"51":{},"84":{},"85":{},"86":{},"88":{},"92":{},"110":{},"113":{},"118":{},"152":{},"153":{},"154":{},"156":{},"178":{},"181":{},"186":{}},"component":{}}],["scroll",{"_index":2889,"title":{"27-5":{}},"name":{},"text":{"27":{},"53":{},"120":{},"188":{}},"component":{}}],["scrollabl",{"_index":2906,"title":{},"name":{},"text":{"27":{}},"component":{}}],["sdk",{"_index":72,"title":{"28":{},"29":{},"30":{},"31":{},"94":{},"95":{},"96":{},"97":{},"162":{},"163":{},"164":{},"165":{},"26-5":{},"29-9":{},"29-30":{},"62-9":{},"92-5":{},"95-9":{},"95-30":{},"130-9":{},"160-5":{},"163-9":{},"163-30":{},"198-9":{}},"name":{"3":{},"28":{},"29":{},"30":{},"31":{},"69":{},"94":{},"95":{},"96":{},"97":{},"137":{},"162":{},"163":{},"164":{},"165":{}},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"17":{},"23":{},"24":{},"26":{},"28":{},"29":{},"30":{},"31":{},"48":{},"57":{},"62":{},"67":{},"69":{},"70":{},"72":{},"73":{},"74":{},"76":{},"78":{},"79":{},"83":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"115":{},"124":{},"125":{},"128":{},"130":{},"135":{},"137":{},"138":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"151":{},"157":{},"158":{},"160":{},"162":{},"163":{},"164":{},"165":{},"183":{},"192":{},"193":{},"196":{},"198":{}},"component":{}}],["sdk_editor_java",{"_index":294,"title":{},"name":{"5":{},"70":{},"138":{}},"text":{},"component":{}}],["sdk_editor_nl",{"_index":189,"title":{},"name":{"4":{},"71":{},"139":{}},"text":{},"component":{}}],["sdk_wizard",{"_index":349,"title":{},"name":{"6":{},"72":{},"140":{}},"text":{},"component":{}}],["sdk_wizard_cod",{"_index":362,"title":{},"name":{"7":{},"73":{},"141":{}},"text":{},"component":{}}],["sdk_wizard_form",{"_index":387,"title":{},"name":{"8":{},"74":{},"142":{}},"text":{},"component":{}}],["sdk_wizard_languag",{"_index":405,"title":{},"name":{"9":{},"75":{},"143":{}},"text":{},"component":{}}],["sdk_wizard_lookupcal",{"_index":413,"title":{},"name":{"10":{},"76":{},"144":{}},"text":{},"component":{}}],["sdk_wizard_nl",{"_index":419,"title":{},"name":{"11":{},"77":{},"145":{}},"text":{},"component":{}}],["sdk_wizard_pag",{"_index":427,"title":{},"name":{"12":{},"78":{},"146":{}},"text":{},"component":{}}],["sdk_wizard_permiss",{"_index":434,"title":{},"name":{"13":{},"79":{},"147":{}},"text":{},"component":{}}],["sdk_wizard_project",{"_index":437,"title":{},"name":{"14":{},"80":{},"148":{}},"text":{},"component":{}}],["sdkcommand",{"_index":1724,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sdkcommand.cr",{"_index":1725,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["se",{"_index":5397,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["seal",{"_index":3509,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["search",{"_index":197,"title":{},"name":{},"text":{"4":{},"14":{},"17":{},"21":{},"23":{},"24":{},"29":{},"40":{},"55":{},"59":{},"65":{},"71":{},"80":{},"83":{},"87":{},"89":{},"90":{},"95":{},"107":{},"122":{},"127":{},"133":{},"139":{},"148":{},"151":{},"155":{},"157":{},"158":{},"163":{},"175":{},"190":{},"195":{},"201":{}},"component":{}}],["searchoutline.class",{"_index":1261,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["searchoutlineviewbutton",{"_index":1267,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["second",{"_index":117,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"19":{},"21":{},"23":{},"24":{},"29":{},"39":{},"40":{},"43":{},"44":{},"46":{},"60":{},"63":{},"68":{},"71":{},"73":{},"84":{},"87":{},"89":{},"90":{},"93":{},"95":{},"106":{},"107":{},"109":{},"110":{},"113":{},"128":{},"132":{},"136":{},"139":{},"141":{},"152":{},"155":{},"157":{},"158":{},"163":{},"174":{},"175":{},"178":{},"179":{},"181":{},"196":{},"200":{}},"component":{}}],["section",{"_index":363,"title":{},"name":{},"text":{"7":{},"10":{},"13":{},"14":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"29":{},"39":{},"40":{},"43":{},"44":{},"48":{},"51":{},"63":{},"66":{},"73":{},"76":{},"79":{},"80":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"93":{},"95":{},"106":{},"107":{},"109":{},"110":{},"115":{},"118":{},"132":{},"134":{},"141":{},"144":{},"147":{},"148":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"163":{},"174":{},"175":{},"178":{},"179":{},"183":{},"186":{},"200":{},"202":{}},"component":{}}],["secur",{"_index":698,"title":{"43":{},"110":{},"178":{},"19-1":{},"43-4":{},"43-7":{},"43-8":{},"84-1":{},"110-4":{},"110-7":{},"110-8":{},"152-1":{},"178-4":{},"178-7":{},"178-8":{}},"name":{"43":{},"110":{},"178":{}},"text":{"19":{},"23":{},"26":{},"40":{},"43":{},"61":{},"63":{},"84":{},"90":{},"107":{},"110":{},"124":{},"129":{},"132":{},"152":{},"158":{},"175":{},"178":{},"193":{},"197":{},"200":{}},"component":{}}],["see",{"_index":32,"title":{},"name":{},"text":{"1":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"38":{},"39":{},"40":{},"41":{},"46":{},"47":{},"48":{},"52":{},"53":{},"56":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"80":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"105":{},"106":{},"107":{},"111":{},"113":{},"114":{},"115":{},"119":{},"120":{},"123":{},"124":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"148":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"161":{},"162":{},"163":{},"164":{},"173":{},"174":{},"175":{},"176":{},"181":{},"182":{},"183":{},"187":{},"188":{},"191":{},"193":{},"194":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["seen",{"_index":2057,"title":{},"name":{},"text":{"23":{},"40":{},"43":{},"55":{},"60":{},"62":{},"90":{},"107":{},"110":{},"122":{},"128":{},"130":{},"158":{},"175":{},"178":{},"190":{},"196":{},"198":{}},"component":{}}],["segment",{"_index":3092,"title":{},"name":{},"text":{"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["select",{"_index":199,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"19":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"34":{},"39":{},"47":{},"52":{},"58":{},"60":{},"62":{},"63":{},"70":{},"71":{},"72":{},"73":{},"74":{},"76":{},"77":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"87":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"101":{},"106":{},"114":{},"119":{},"126":{},"127":{},"128":{},"130":{},"132":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"145":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"155":{},"157":{},"158":{},"162":{},"163":{},"172":{},"174":{},"182":{},"187":{},"194":{},"195":{},"196":{},"198":{},"200":{}},"component":{}}],["select_table_nam",{"_index":1570,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["selectedrang",{"_index":6333,"title":{},"name":{},"text":{"93":{}},"component":{}}],["selection.j",{"_index":4824,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["selection.json",{"_index":2660,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["selector",{"_index":28,"title":{},"name":{},"text":{"1":{},"56":{},"66":{},"67":{},"123":{},"135":{},"191":{}},"component":{}}],["self",{"_index":699,"title":{"19-2":{},"84-2":{},"152-2":{}},"name":{},"text":{"19":{},"40":{},"48":{},"84":{},"92":{},"107":{},"115":{},"152":{},"175":{},"183":{}},"component":{}}],["semant",{"_index":4145,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["semaphor",{"_index":3502,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["semicolon",{"_index":3893,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["send",{"_index":639,"title":{"44-2":{},"109-2":{},"179-2":{}},"name":{},"text":{"18":{},"23":{},"27":{},"40":{},"44":{},"61":{},"63":{},"66":{},"85":{},"90":{},"107":{},"109":{},"129":{},"132":{},"134":{},"153":{},"158":{},"175":{},"179":{},"197":{},"200":{},"202":{}},"component":{}}],["sender",{"_index":4038,"title":{},"name":{},"text":{"40":{},"44":{},"107":{},"109":{},"175":{},"179":{}},"component":{}}],["sendmessag",{"_index":4386,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["sens",{"_index":4246,"title":{},"name":{},"text":{"43":{},"46":{},"48":{},"53":{},"58":{},"61":{},"63":{},"110":{},"113":{},"115":{},"120":{},"126":{},"129":{},"132":{},"178":{},"181":{},"183":{},"188":{},"194":{},"197":{},"200":{}},"component":{}}],["sensit",{"_index":3897,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["sent",{"_index":2039,"title":{},"name":{},"text":{"23":{},"24":{},"26":{},"27":{},"40":{},"41":{},"44":{},"53":{},"60":{},"65":{},"66":{},"89":{},"90":{},"107":{},"109":{},"111":{},"120":{},"128":{},"133":{},"134":{},"157":{},"158":{},"175":{},"176":{},"179":{},"188":{},"196":{},"201":{},"202":{}},"component":{}}],["separ",{"_index":627,"title":{},"name":{},"text":{"17":{},"21":{},"22":{},"23":{},"24":{},"26":{},"32":{},"40":{},"44":{},"46":{},"47":{},"48":{},"50":{},"58":{},"60":{},"63":{},"64":{},"83":{},"87":{},"88":{},"89":{},"90":{},"93":{},"98":{},"107":{},"109":{},"113":{},"114":{},"115":{},"117":{},"124":{},"126":{},"128":{},"131":{},"132":{},"151":{},"155":{},"156":{},"157":{},"158":{},"166":{},"175":{},"179":{},"181":{},"182":{},"183":{},"185":{},"193":{},"194":{},"196":{},"199":{},"200":{}},"component":{}}],["sept",{"_index":3041,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["sequenc",{"_index":547,"title":{},"name":{},"text":{"16":{},"23":{},"39":{},"82":{},"90":{},"106":{},"150":{},"158":{},"174":{}},"component":{}}],["serial",{"_index":2625,"title":{"64-24":{},"131-24":{},"199-24":{}},"name":{},"text":{"26":{},"39":{},"64":{},"92":{},"93":{},"106":{},"131":{},"174":{},"199":{}},"component":{}}],["serializ",{"_index":5308,"title":{},"name":{},"text":{"61":{},"62":{},"129":{},"130":{},"197":{},"198":{}},"component":{}}],["serialversionuid",{"_index":1354,"title":{},"name":{},"text":{"23":{},"43":{},"48":{},"64":{},"65":{},"90":{},"93":{},"110":{},"115":{},"131":{},"133":{},"158":{},"178":{},"183":{},"199":{},"201":{}},"component":{}}],["seriou",{"_index":58,"title":{},"name":{},"text":{"1":{},"38":{},"67":{},"105":{},"135":{},"173":{}},"component":{}}],["serv",{"_index":690,"title":{},"name":{},"text":{"18":{},"20":{},"21":{},"22":{},"23":{},"38":{},"85":{},"86":{},"87":{},"88":{},"90":{},"105":{},"153":{},"154":{},"155":{},"156":{},"158":{},"173":{}},"component":{}}],["server",{"_index":354,"title":{"61-5":{},"129-5":{},"197-5":{}},"name":{},"text":{"6":{},"8":{},"10":{},"12":{},"14":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"32":{},"37":{},"38":{},"40":{},"41":{},"43":{},"44":{},"46":{},"48":{},"51":{},"53":{},"56":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"72":{},"74":{},"76":{},"78":{},"80":{},"82":{},"83":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"93":{},"95":{},"98":{},"104":{},"105":{},"107":{},"109":{},"110":{},"111":{},"113":{},"115":{},"118":{},"120":{},"123":{},"125":{},"128":{},"129":{},"130":{},"132":{},"133":{},"134":{},"140":{},"142":{},"144":{},"146":{},"148":{},"150":{},"151":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"163":{},"166":{},"169":{},"173":{},"175":{},"176":{},"178":{},"179":{},"181":{},"183":{},"186":{},"188":{},"191":{},"192":{},"196":{},"197":{},"198":{},"200":{},"201":{},"202":{}},"component":{}}],["server.launch",{"_index":475,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["server.xml",{"_index":721,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["server:start",{"_index":4495,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["server:stop",{"_index":4497,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["serveraccesscontrolservic",{"_index":2014,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["serveraccesscontrolservice.java",{"_index":2012,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["serverruncontext",{"_index":3364,"title":{"41-3":{},"111-3":{},"176-3":{}},"name":{},"text":{"38":{},"41":{},"105":{},"111":{},"173":{},"176":{}},"component":{}}],["serverruncontextproduc",{"_index":5513,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["serverst",{"_index":3276,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["serverstateservic",{"_index":3303,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["server’",{"_index":1510,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["servic",{"_index":243,"title":{"37":{},"104":{},"169":{},"23-20":{},"23-21":{},"23-30":{},"37-3":{},"37-4":{},"37-5":{},"57-2":{},"65-5":{},"90-20":{},"90-21":{},"90-30":{},"104-3":{},"104-4":{},"104-5":{},"125-2":{},"133-5":{},"158-20":{},"158-21":{},"158-30":{},"169-3":{},"169-4":{},"169-5":{},"192-2":{},"201-5":{}},"name":{"37":{},"104":{},"169":{}},"text":{"4":{},"6":{},"8":{},"10":{},"12":{},"19":{},"22":{},"23":{},"26":{},"28":{},"29":{},"32":{},"37":{},"38":{},"40":{},"41":{},"43":{},"48":{},"57":{},"59":{},"61":{},"63":{},"65":{},"66":{},"71":{},"72":{},"74":{},"76":{},"78":{},"84":{},"88":{},"90":{},"92":{},"94":{},"95":{},"98":{},"104":{},"105":{},"107":{},"110":{},"111":{},"115":{},"125":{},"127":{},"129":{},"132":{},"133":{},"134":{},"139":{},"140":{},"142":{},"144":{},"146":{},"152":{},"156":{},"158":{},"160":{},"162":{},"163":{},"166":{},"169":{},"173":{},"175":{},"176":{},"178":{},"183":{},"192":{},"195":{},"197":{},"200":{},"201":{},"202":{}},"component":{}}],["service.create(formdata",{"_index":2033,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["service.load(formdata",{"_index":2029,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["service.store(formdata",{"_index":2032,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["serviceaccesscontrolservic",{"_index":2013,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["servicenam",{"_index":5495,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["servicetunnelservlet",{"_index":4085,"title":{},"name":{},"text":{"40":{},"41":{},"107":{},"111":{},"175":{},"176":{}},"component":{}}],["service’",{"_index":5491,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["servlet",{"_index":481,"title":{"37-2":{},"63-4":{},"63-9":{},"66-15":{},"104-2":{},"132-4":{},"132-9":{},"134-15":{},"169-2":{},"200-4":{},"200-9":{},"202-15":{}},"name":{},"text":{"14":{},"19":{},"29":{},"32":{},"37":{},"40":{},"43":{},"63":{},"66":{},"80":{},"84":{},"93":{},"95":{},"98":{},"104":{},"107":{},"110":{},"132":{},"134":{},"148":{},"152":{},"163":{},"166":{},"169":{},"175":{},"178":{},"200":{},"202":{}},"component":{}}],["session",{"_index":2451,"title":{"26-35":{},"43-5":{},"110-5":{},"178-5":{}},"name":{},"text":{"26":{},"39":{},"40":{},"41":{},"43":{},"44":{},"47":{},"51":{},"56":{},"61":{},"63":{},"66":{},"106":{},"107":{},"109":{},"110":{},"111":{},"114":{},"118":{},"123":{},"129":{},"132":{},"134":{},"174":{},"175":{},"176":{},"178":{},"179":{},"182":{},"186":{},"191":{},"197":{},"200":{},"202":{}},"component":{}}],["session.that",{"_index":3648,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["sessionfuturefilter(isession.current.get",{"_index":3543,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["sessionjobeventfilter(isession.current.get",{"_index":3555,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["session’",{"_index":3650,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["set",{"_index":331,"title":{"19-1":{},"23-3":{},"28-7":{},"28-8":{},"84-1":{},"90-3":{},"94-7":{},"94-8":{},"152-1":{},"158-3":{},"162-7":{},"162-8":{}},"name":{},"text":{"5":{},"6":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"33":{},"34":{},"35":{},"39":{},"40":{},"41":{},"43":{},"44":{},"46":{},"47":{},"48":{},"50":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"72":{},"82":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"93":{},"94":{},"95":{},"99":{},"100":{},"101":{},"102":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"117":{},"118":{},"119":{},"120":{},"121":{},"123":{},"125":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"138":{},"140":{},"150":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"167":{},"170":{},"171":{},"172":{},"174":{},"175":{},"176":{},"178":{},"179":{},"181":{},"182":{},"183":{},"185":{},"186":{},"187":{},"188":{},"189":{},"191":{},"192":{},"194":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["set/overwrit",{"_index":5600,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["setacceptedtext(acceptedtext",{"_index":5123,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["setbackgroundcolor(bgcolor",{"_index":3149,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["setcont",{"_index":6149,"title":{},"name":{},"text":{"92":{}},"component":{}}],["setelements(el",{"_index":5156,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["seterrorstatu",{"_index":4724,"title":{},"name":{},"text":{"49":{},"116":{},"184":{}},"component":{}}],["setfilteraccepted(filteraccept",{"_index":5175,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["setfilters(filt",{"_index":2839,"title":{},"name":{},"text":{"26":{},"59":{},"127":{},"195":{}},"component":{}}],["setflipped(flip",{"_index":3253,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["setimageurl(this.url",{"_index":2134,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["setimageurl(url",{"_index":1897,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["setinterval(str",{"_index":4223,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["setlabel",{"_index":4723,"title":{},"name":{},"text":{"49":{},"116":{},"184":{}},"component":{}}],["setorganizationid(str",{"_index":2250,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["setpar",{"_index":5300,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["setpersonid(str",{"_index":1728,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["setproperty(propertynam",{"_index":5236,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["setter",{"_index":1713,"title":{},"name":{},"text":{"23":{},"26":{},"41":{},"58":{},"60":{},"64":{},"65":{},"90":{},"92":{},"111":{},"126":{},"128":{},"131":{},"133":{},"158":{},"176":{},"194":{},"196":{},"199":{},"201":{}},"component":{}}],["settextfilterenabled(textfilteren",{"_index":5158,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["settilefilters(filt",{"_index":2842,"title":{},"name":{},"text":{"26":{}},"component":{}}],["settimeout(str",{"_index":4222,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["settingoutlineviewbutton",{"_index":1262,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["settings/org.eclipse.jdt.apt.core.pref",{"_index":5383,"title":{"63-47":{},"132-47":{},"200-47":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["settings/org.eclipse.jdt.core.pref",{"_index":5382,"title":{"63-46":{},"132-46":{},"200-46":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["settingsoutline.class",{"_index":1258,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["setup",{"_index":496,"title":{"16-3":{},"23-21":{},"36-1":{},"56-1":{},"82-3":{},"90-21":{},"103-1":{},"123-1":{},"124-1":{},"150-3":{},"158-21":{},"168-1":{},"191-1":{},"193-1":{}},"name":{},"text":{"16":{},"18":{},"19":{},"21":{},"23":{},"24":{},"29":{},"32":{},"46":{},"57":{},"66":{},"82":{},"84":{},"85":{},"87":{},"89":{},"90":{},"95":{},"98":{},"113":{},"124":{},"125":{},"134":{},"150":{},"152":{},"153":{},"155":{},"157":{},"158":{},"163":{},"166":{},"181":{},"192":{},"193":{},"202":{}},"component":{}}],["setup.[9",{"_index":848,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["seturl(form.geturlfield().getvalu",{"_index":2231,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["seturl(str",{"_index":2131,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["setvalid",{"_index":5044,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["setvalidityfrom(d",{"_index":5954,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["setvalidityto(d",{"_index":5957,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["setvalu",{"_index":5019,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["setvalue(\"...bold",{"_index":4254,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["setvalue(html.fragment(html.icon(icons.info",{"_index":2203,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["setvis",{"_index":4885,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["setvisiblegr",{"_index":4884,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["setvisiblegranted(fals",{"_index":4869,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["setwidget",{"_index":6148,"title":{},"name":{},"text":{"92":{}},"component":{}}],["seventh",{"_index":2413,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sever",{"_index":637,"title":{"27-7":{}},"name":{},"text":{"18":{},"20":{},"23":{},"26":{},"29":{},"37":{},"38":{},"40":{},"43":{},"46":{},"48":{},"51":{},"53":{},"54":{},"56":{},"59":{},"60":{},"61":{},"64":{},"65":{},"85":{},"86":{},"90":{},"92":{},"93":{},"95":{},"104":{},"105":{},"107":{},"110":{},"113":{},"115":{},"118":{},"120":{},"121":{},"123":{},"127":{},"128":{},"129":{},"131":{},"133":{},"153":{},"154":{},"158":{},"163":{},"169":{},"173":{},"175":{},"178":{},"181":{},"183":{},"186":{},"188":{},"189":{},"191":{},"195":{},"196":{},"197":{},"199":{},"201":{}},"component":{}}],["sha",{"_index":3900,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["shadow",{"_index":2890,"title":{"27-5":{}},"name":{},"text":{"27":{}},"component":{}}],["shake",{"_index":6277,"title":{},"name":{},"text":{"93":{}},"component":{}}],["share",{"_index":198,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"13":{},"23":{},"26":{},"29":{},"33":{},"40":{},"41":{},"44":{},"52":{},"54":{},"57":{},"59":{},"61":{},"63":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"90":{},"95":{},"99":{},"107":{},"109":{},"111":{},"119":{},"121":{},"125":{},"127":{},"129":{},"132":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"158":{},"163":{},"170":{},"175":{},"176":{},"179":{},"187":{},"189":{},"192":{},"195":{},"197":{},"200":{}},"component":{}}],["shared/resources/texts/*.properti",{"_index":4980,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["shared/resources/texts/texts.properti",{"_index":4981,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["shared/resources/texts/texts_fr.properti",{"_index":4982,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["shared/src/main/resources//texts/texts.properti",{"_index":247,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["sheet",{"_index":3011,"title":{},"name":{},"text":{"33":{},"35":{},"36":{},"99":{},"102":{},"103":{},"167":{},"168":{},"170":{}},"component":{}}],["shell",{"_index":2504,"title":{},"name":{},"text":{"26":{},"40":{},"107":{},"175":{}},"component":{}}],["shift",{"_index":6136,"title":{},"name":{},"text":{"92":{}},"component":{}}],["shift+f6",{"_index":1242,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["ship",{"_index":4770,"title":{},"name":{},"text":{"52":{},"60":{},"63":{},"93":{},"119":{},"128":{},"132":{},"187":{},"196":{},"200":{}},"component":{}}],["shop",{"_index":3016,"title":{},"name":{},"text":{"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["short",{"_index":2330,"title":{},"name":{},"text":{"23":{},"26":{},"29":{},"90":{},"95":{},"158":{},"163":{}},"component":{}}],["shortcut",{"_index":1159,"title":{},"name":{},"text":{"22":{},"29":{},"46":{},"60":{},"88":{},"95":{},"113":{},"128":{},"156":{},"163":{},"181":{},"196":{}},"component":{}}],["shorter",{"_index":3454,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["shortest",{"_index":1219,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["shot",{"_index":3428,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["shouldn’t",{"_index":3366,"title":{},"name":{},"text":{"38":{},"56":{},"105":{},"123":{},"173":{},"191":{}},"component":{}}],["show",{"_index":114,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"16":{},"17":{},"19":{},"20":{},"22":{},"23":{},"24":{},"26":{},"29":{},"33":{},"35":{},"36":{},"37":{},"38":{},"44":{},"46":{},"48":{},"50":{},"52":{},"56":{},"58":{},"60":{},"63":{},"68":{},"70":{},"71":{},"82":{},"83":{},"84":{},"86":{},"88":{},"89":{},"90":{},"93":{},"95":{},"99":{},"102":{},"103":{},"104":{},"105":{},"109":{},"113":{},"115":{},"117":{},"119":{},"123":{},"126":{},"128":{},"132":{},"136":{},"138":{},"139":{},"150":{},"151":{},"152":{},"154":{},"156":{},"157":{},"158":{},"163":{},"167":{},"168":{},"169":{},"170":{},"173":{},"179":{},"181":{},"183":{},"185":{},"187":{},"191":{},"194":{},"196":{},"200":{}},"component":{}}],["show/edit",{"_index":586,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["shown",{"_index":206,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"19":{},"21":{},"23":{},"24":{},"26":{},"27":{},"29":{},"34":{},"40":{},"43":{},"50":{},"58":{},"61":{},"70":{},"71":{},"72":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"87":{},"89":{},"90":{},"92":{},"95":{},"101":{},"107":{},"110":{},"117":{},"126":{},"129":{},"138":{},"139":{},"140":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"155":{},"157":{},"158":{},"163":{},"172":{},"175":{},"178":{},"185":{},"194":{},"197":{}},"component":{}}],["shrink",{"_index":2310,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["shrinkabl",{"_index":4589,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["shut",{"_index":3674,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["shutdown",{"_index":3524,"title":{},"name":{},"text":{"39":{},"40":{},"106":{},"107":{},"174":{},"175":{}},"component":{}}],["shutdown.if",{"_index":3644,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["shutdownexecutor",{"_index":3673,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["sibl",{"_index":5299,"title":{},"name":{},"text":{"60":{},"63":{},"128":{},"132":{},"196":{},"200":{}},"component":{}}],["side",{"_index":347,"title":{},"name":{},"text":{"5":{},"16":{},"19":{},"21":{},"23":{},"24":{},"29":{},"36":{},"38":{},"39":{},"40":{},"41":{},"43":{},"46":{},"51":{},"52":{},"53":{},"58":{},"61":{},"65":{},"66":{},"70":{},"82":{},"84":{},"87":{},"89":{},"90":{},"95":{},"103":{},"105":{},"106":{},"107":{},"110":{},"111":{},"113":{},"118":{},"119":{},"120":{},"126":{},"129":{},"133":{},"134":{},"138":{},"150":{},"152":{},"155":{},"157":{},"158":{},"163":{},"168":{},"173":{},"174":{},"175":{},"176":{},"178":{},"181":{},"186":{},"187":{},"188":{},"194":{},"197":{},"201":{},"202":{}},"component":{}}],["sign",{"_index":620,"title":{"19-2":{},"84-2":{},"152-2":{}},"name":{},"text":{"17":{},"19":{},"24":{},"40":{},"83":{},"84":{},"89":{},"107":{},"151":{},"152":{},"157":{},"175":{}},"component":{}}],["signal",{"_index":3567,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["signatur",{"_index":2410,"title":{"64-6":{},"131-6":{},"199-6":{}},"name":{},"text":{"23":{},"26":{},"40":{},"48":{},"64":{},"90":{},"93":{},"107":{},"115":{},"124":{},"131":{},"158":{},"175":{},"183":{},"193":{},"199":{}},"component":{}}],["significantli",{"_index":2956,"title":{},"name":{},"text":{"27":{}},"component":{}}],["similar",{"_index":1137,"title":{},"name":{},"text":{"22":{},"23":{},"26":{},"39":{},"46":{},"63":{},"88":{},"90":{},"106":{},"113":{},"132":{},"156":{},"158":{},"174":{},"181":{},"200":{}},"component":{}}],["simpl",{"_index":1186,"title":{"23-33":{},"23-36":{},"90-33":{},"90-36":{},"158-33":{},"158-36":{}},"name":{},"text":{"23":{},"26":{},"32":{},"38":{},"39":{},"40":{},"43":{},"48":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"90":{},"98":{},"100":{},"105":{},"106":{},"107":{},"110":{},"115":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"158":{},"166":{},"171":{},"173":{},"174":{},"175":{},"178":{},"183":{},"194":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{}},"component":{}}],["simplebeandecorationfactori",{"_index":3791,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["simpledateformat",{"_index":5766,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["simpleprincipal(\"john",{"_index":4155,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["simpleprincipalproduc",{"_index":5511,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["simpler",{"_index":146,"title":{},"name":{},"text":{"3":{},"31":{},"69":{},"97":{},"137":{},"165":{}},"component":{}}],["simpleschedulebuild",{"_index":3634,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["simplest",{"_index":768,"title":{},"name":{},"text":{"19":{},"23":{},"29":{},"56":{},"63":{},"84":{},"90":{},"95":{},"123":{},"132":{},"152":{},"158":{},"163":{},"191":{},"200":{}},"component":{}}],["simpli",{"_index":879,"title":{},"name":{},"text":{"19":{},"22":{},"23":{},"24":{},"39":{},"45":{},"48":{},"52":{},"53":{},"55":{},"59":{},"63":{},"84":{},"88":{},"89":{},"90":{},"106":{},"112":{},"115":{},"119":{},"120":{},"122":{},"127":{},"132":{},"152":{},"156":{},"157":{},"158":{},"174":{},"180":{},"183":{},"187":{},"188":{},"190":{},"195":{},"200":{}},"component":{}}],["simplic",{"_index":2009,"title":{},"name":{},"text":{"23":{},"32":{},"90":{},"98":{},"158":{},"166":{}},"component":{}}],["simplifi",{"_index":908,"title":{},"name":{},"text":{"20":{},"23":{},"26":{},"32":{},"39":{},"52":{},"61":{},"63":{},"64":{},"86":{},"90":{},"98":{},"106":{},"119":{},"129":{},"131":{},"132":{},"154":{},"158":{},"166":{},"174":{},"187":{},"197":{},"199":{},"200":{}},"component":{}}],["simultan",{"_index":1207,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["singl",{"_index":1471,"title":{"39-21":{},"39-22":{},"106-21":{},"106-22":{},"113-19":{},"174-21":{},"174-22":{},"181-19":{}},"name":{},"text":{"23":{},"26":{},"32":{},"37":{},"38":{},"39":{},"40":{},"44":{},"47":{},"48":{},"52":{},"56":{},"59":{},"61":{},"63":{},"64":{},"65":{},"66":{},"90":{},"92":{},"98":{},"104":{},"105":{},"106":{},"107":{},"109":{},"113":{},"114":{},"115":{},"119":{},"123":{},"127":{},"129":{},"131":{},"132":{},"133":{},"134":{},"158":{},"166":{},"169":{},"173":{},"174":{},"175":{},"179":{},"181":{},"182":{},"183":{},"187":{},"191":{},"195":{},"197":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["singleattribut",{"_index":5808,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["singleattribute().get",{"_index":5818,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["singleattribute().set(singleattribut",{"_index":5816,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["singleton",{"_index":3427,"title":{},"name":{},"text":{"39":{},"40":{},"66":{},"106":{},"107":{},"134":{},"174":{},"175":{},"202":{}},"component":{}}],["site",{"_index":595,"title":{},"name":{},"text":{"17":{},"19":{},"20":{},"21":{},"24":{},"26":{},"29":{},"43":{},"83":{},"84":{},"86":{},"87":{},"89":{},"92":{},"95":{},"110":{},"151":{},"152":{},"154":{},"155":{},"157":{},"160":{},"163":{},"178":{}},"component":{}}],["site.[6",{"_index":831,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["site_script",{"_index":4335,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["situat",{"_index":3582,"title":{},"name":{},"text":{"39":{},"40":{},"106":{},"107":{},"174":{},"175":{}},"component":{}}],["sixth",{"_index":2325,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["size",{"_index":1705,"title":{"26-41":{}},"name":{},"text":{"23":{},"26":{},"39":{},"40":{},"44":{},"45":{},"47":{},"52":{},"53":{},"56":{},"59":{},"64":{},"90":{},"106":{},"107":{},"109":{},"112":{},"114":{},"119":{},"120":{},"123":{},"127":{},"131":{},"158":{},"174":{},"175":{},"179":{},"180":{},"182":{},"187":{},"188":{},"191":{},"195":{},"199":{}},"component":{}}],["sizes.less",{"_index":4940,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["sketch",{"_index":1691,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["skip",{"_index":711,"title":{},"name":{},"text":{"19":{},"23":{},"29":{},"40":{},"43":{},"84":{},"90":{},"95":{},"107":{},"110":{},"152":{},"158":{},"163":{},"175":{},"178":{}},"component":{}}],["slf4j",{"_index":1638,"title":{},"name":{},"text":{"23":{},"38":{},"90":{},"105":{},"158":{},"173":{}},"component":{}}],["slightli",{"_index":710,"title":{},"name":{},"text":{"19":{},"23":{},"56":{},"84":{},"90":{},"123":{},"152":{},"158":{},"160":{},"191":{}},"component":{}}],["slow",{"_index":3723,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["small",{"_index":527,"title":{"28-7":{},"94-7":{},"162-7":{}},"name":{},"text":{"16":{},"23":{},"25":{},"26":{},"32":{},"40":{},"46":{},"53":{},"56":{},"59":{},"67":{},"82":{},"90":{},"91":{},"98":{},"107":{},"113":{},"120":{},"123":{},"127":{},"150":{},"158":{},"159":{},"166":{},"175":{},"181":{},"188":{},"191":{},"195":{}},"component":{}}],["smaller",{"_index":1071,"title":{},"name":{},"text":{"22":{},"26":{},"53":{},"59":{},"88":{},"120":{},"127":{},"156":{},"188":{},"195":{}},"component":{}}],["smallest",{"_index":5854,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["smart",{"_index":1411,"title":{"59-1":{},"127-1":{},"195-1":{}},"name":{"34":{},"101":{},"172":{}},"text":{"23":{},"27":{},"53":{},"59":{},"60":{},"65":{},"90":{},"120":{},"127":{},"128":{},"133":{},"158":{},"188":{},"195":{},"196":{},"201":{}},"component":{}}],["smartcolumn",{"_index":5340,"title":{"62-5":{},"130-5":{},"198-5":{}},"name":{},"text":{"62":{},"65":{},"130":{},"133":{},"198":{},"201":{}},"component":{}}],["smartfield",{"_index":2331,"title":{"34":{},"101":{},"172":{},"62-5":{},"130-5":{},"198-5":{}},"name":{},"text":{"23":{},"34":{},"58":{},"59":{},"62":{},"65":{},"90":{},"101":{},"126":{},"127":{},"130":{},"133":{},"158":{},"172":{},"194":{},"195":{},"198":{},"201":{}},"component":{}}],["smartphon",{"_index":4833,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["smtp",{"_index":4093,"title":{},"name":{"44":{},"109":{},"179":{}},"text":{"40":{},"44":{},"107":{},"109":{},"175":{},"179":{}},"component":{}}],["smtpconnectionpool",{"_index":4351,"title":{"44-5":{},"109-5":{},"179-5":{}},"name":{},"text":{},"component":{}}],["smtphelper",{"_index":4350,"title":{"44":{},"109":{},"179":{},"44-3":{},"109-3":{},"179-3":{}},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["smtpserverconfig",{"_index":4349,"title":{"44-1":{},"109-1":{},"179-1":{}},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["smtpserverconfig.equ",{"_index":4426,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["snapshot",{"_index":1503,"title":{},"name":{},"text":{"23":{},"26":{},"41":{},"63":{},"90":{},"111":{},"132":{},"158":{},"176":{},"200":{}},"component":{}}],["snippet",{"_index":538,"title":{},"name":{},"text":{"16":{},"23":{},"39":{},"46":{},"64":{},"66":{},"82":{},"90":{},"100":{},"106":{},"113":{},"131":{},"134":{},"150":{},"158":{},"171":{},"174":{},"181":{},"199":{},"202":{}},"component":{}}],["soap",{"_index":4011,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["soapbinding(parameterstyl",{"_index":5661,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["soaphandl",{"_index":5552,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["socket",{"_index":3976,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["socketexcept",{"_index":3980,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["softwar",{"_index":704,"title":{},"name":{},"text":{"19":{},"29":{},"40":{},"84":{},"95":{},"107":{},"152":{},"163":{},"175":{}},"component":{}}],["software.com/contact",{"_index":2896,"title":{},"name":{},"text":{"27":{},"93":{},"161":{}},"component":{}}],["software.com/jswidget",{"_index":2898,"title":{},"name":{},"text":{"27":{},"93":{},"161":{}},"component":{}}],["software.com/widget",{"_index":2897,"title":{},"name":{},"text":{"27":{},"93":{},"161":{}},"component":{}}],["software/helloscout.git",{"_index":3202,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["software/org.eclipse.scout.docs.git",{"_index":1200,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sold",{"_index":3012,"title":{},"name":{},"text":{"33":{},"35":{},"59":{},"99":{},"102":{},"127":{},"167":{},"170":{},"195":{}},"component":{}}],["sole",{"_index":5476,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["solid",{"_index":149,"title":{},"name":{},"text":{"3":{},"31":{},"39":{},"69":{},"97":{},"106":{},"137":{},"165":{},"174":{}},"component":{}}],["solut",{"_index":3008,"title":{},"name":{},"text":{"32":{},"43":{},"98":{},"110":{},"166":{},"178":{}},"component":{}}],["solv",{"_index":2994,"title":{},"name":{},"text":{"32":{},"64":{},"98":{},"131":{},"166":{},"199":{}},"component":{}}],["somehow",{"_index":6133,"title":{},"name":{},"text":{"92":{}},"component":{}}],["someth",{"_index":3387,"title":{},"name":{},"text":{"38":{},"39":{},"56":{},"59":{},"60":{},"61":{},"105":{},"106":{},"123":{},"127":{},"128":{},"129":{},"173":{},"174":{},"191":{},"195":{},"196":{},"197":{}},"component":{}}],["sometim",{"_index":3565,"title":{},"name":{},"text":{"39":{},"40":{},"43":{},"53":{},"61":{},"63":{},"92":{},"106":{},"107":{},"110":{},"120":{},"129":{},"132":{},"174":{},"175":{},"178":{},"188":{},"197":{},"200":{}},"component":{}}],["somewher",{"_index":1032,"title":{},"name":{},"text":{"21":{},"22":{},"24":{},"87":{},"88":{},"89":{},"155":{},"156":{},"157":{}},"component":{}}],["soon",{"_index":634,"title":{},"name":{},"text":{"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"28":{},"40":{},"44":{},"46":{},"48":{},"60":{},"61":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"94":{},"107":{},"109":{},"113":{},"115":{},"128":{},"129":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"162":{},"175":{},"179":{},"181":{},"183":{},"196":{},"197":{}},"component":{}}],["sort",{"_index":1363,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["sourc",{"_index":121,"title":{"22-11":{},"88-11":{},"156-11":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"27":{},"29":{},"40":{},"43":{},"46":{},"52":{},"60":{},"63":{},"65":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"93":{},"95":{},"107":{},"110":{},"113":{},"119":{},"128":{},"132":{},"133":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"161":{},"163":{},"175":{},"178":{},"181":{},"187":{},"196":{},"200":{},"201":{}},"component":{}}],["source/main/resourc",{"_index":487,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["sourcemap",{"_index":931,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["sources/annot",{"_index":5687,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["sources/wsimport",{"_index":5439,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["south",{"_index":4569,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["sown",{"_index":614,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"83":{},"87":{},"89":{},"151":{},"155":{},"157":{}},"component":{}}],["space",{"_index":345,"title":{},"name":{},"text":{"5":{},"23":{},"29":{},"44":{},"53":{},"60":{},"70":{},"90":{},"95":{},"109":{},"120":{},"128":{},"138":{},"158":{},"163":{},"179":{},"188":{},"196":{}},"component":{}}],["span",{"_index":1951,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["speak",{"_index":4612,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["spec",{"_index":4478,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["spec.j",{"_index":6369,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["spec.js.thi",{"_index":4484,"title":{},"name":{},"text":{"46":{}},"component":{}}],["special",{"_index":1343,"title":{},"name":{},"text":{"23":{},"32":{},"40":{},"41":{},"46":{},"48":{},"49":{},"59":{},"60":{},"63":{},"90":{},"98":{},"107":{},"111":{},"113":{},"115":{},"116":{},"127":{},"128":{},"132":{},"158":{},"166":{},"175":{},"176":{},"181":{},"183":{},"184":{},"195":{},"196":{},"200":{}},"component":{}}],["specialfield",{"_index":4598,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["specialstringfield",{"_index":4593,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["specialstringfield.j",{"_index":4592,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["specif",{"_index":65,"title":{"19-7":{},"53-10":{},"84-7":{},"120-10":{},"152-7":{},"188-10":{}},"name":{},"text":{"1":{},"3":{},"5":{},"19":{},"22":{},"23":{},"25":{},"26":{},"29":{},"32":{},"34":{},"39":{},"40":{},"43":{},"45":{},"46":{},"48":{},"53":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"70":{},"84":{},"88":{},"90":{},"91":{},"92":{},"93":{},"95":{},"98":{},"101":{},"106":{},"107":{},"110":{},"112":{},"113":{},"115":{},"120":{},"123":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"152":{},"156":{},"158":{},"159":{},"163":{},"166":{},"172":{},"174":{},"175":{},"178":{},"180":{},"181":{},"183":{},"188":{},"191":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["specifi",{"_index":371,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"38":{},"39":{},"40":{},"44":{},"45":{},"46":{},"48":{},"52":{},"58":{},"60":{},"63":{},"64":{},"66":{},"73":{},"74":{},"75":{},"76":{},"78":{},"79":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"105":{},"106":{},"107":{},"109":{},"112":{},"113":{},"115":{},"119":{},"126":{},"127":{},"128":{},"131":{},"132":{},"134":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"155":{},"156":{},"157":{},"158":{},"163":{},"173":{},"174":{},"175":{},"179":{},"180":{},"181":{},"183":{},"187":{},"194":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["specifiy",{"_index":5228,"title":{},"name":{},"text":{"60":{}},"component":{}}],["speed",{"_index":3993,"title":{},"name":{},"text":{"40":{},"45":{},"63":{},"93":{},"107":{},"112":{},"124":{},"132":{},"175":{},"180":{},"193":{},"200":{}},"component":{}}],["speedo",{"_index":5113,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["spinner",{"_index":2681,"title":{},"name":{},"text":{"26":{}},"component":{}}],["splice",{"_index":2581,"title":{},"name":{},"text":{"26":{}},"component":{}}],["split",{"_index":4567,"title":{},"name":{},"text":{"47":{},"48":{},"114":{},"115":{},"182":{},"183":{}},"component":{}}],["splitchunk",{"_index":4764,"title":{},"name":{},"text":{"51":{},"118":{},"186":{}},"component":{}}],["splitchunksplugin",{"_index":4457,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["splitter",{"_index":4566,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["spring",{"_index":5416,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["sql",{"_index":1181,"title":{"23-20":{},"90-20":{},"158-20":{}},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["sql.append(sqls.person_page_data_select_into",{"_index":2387,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.append(string.format(\"wher",{"_index":2384,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.insert(mysqlcommand",{"_index":1641,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.insert(sqls.organization_create_t",{"_index":1622,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.insert(sqls.organization_insert",{"_index":2317,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.insert(sqls.organization_insert_sampl",{"_index":1625,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.insert(sqls.person_create_t",{"_index":1629,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.insert(sqls.person_insert",{"_index":2048,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.insert(sqls.person_insert_sampl",{"_index":1630,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.insertinto(mysqlcommand",{"_index":1642,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.selectinto(sql",{"_index":1678,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.selectinto(sql.tostr",{"_index":2388,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.selectinto(sqls.organization_select",{"_index":2320,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.selectinto(sqls.person_select",{"_index":2052,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.selectinto(sqls.select_table_nam",{"_index":1635,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.update(sqls.organization_upd",{"_index":2323,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sql.update(sqls.person_upd",{"_index":2055,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqlexcept",{"_index":1557,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.organization_lookup",{"_index":2352,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.organization_page_data_select_into",{"_index":1677,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.organization_page_select",{"_index":1676,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.organization_values_01",{"_index":1626,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.organization_values_02",{"_index":1627,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.person_create_t",{"_index":2328,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.person_page_data_select_into",{"_index":1686,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.person_page_select",{"_index":1685,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.person_values_01",{"_index":1631,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["sqls.person_values_02",{"_index":1632,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["squar",{"_index":2245,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["src",{"_index":1047,"title":{},"name":{},"text":{"22":{},"52":{},"88":{},"119":{},"156":{},"187":{}},"component":{}}],["src/generated/java",{"_index":401,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"14":{},"23":{},"29":{},"74":{},"76":{},"78":{},"80":{},"90":{},"95":{},"142":{},"144":{},"146":{},"148":{},"158":{},"163":{}},"component":{}}],["src/greeting/desktop.j",{"_index":1146,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["src/greeting/desktopmodel.j",{"_index":1140,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["src/greeting/helloform.j",{"_index":1160,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["src/greeting/helloformmodel.j",{"_index":1151,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["src/helloworld.j",{"_index":1105,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["src/helloworld.less",{"_index":1106,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["src/main/j",{"_index":4931,"title":{},"name":{},"text":{"56":{},"113":{},"123":{},"181":{},"191":{}},"component":{}}],["src/main/java",{"_index":375,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"23":{},"29":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"90":{},"95":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"158":{},"163":{}},"component":{}}],["src/main/js/flipcard/flipcardfield.j",{"_index":3206,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["src/main/js/flipcard/flipcardfield.less",{"_index":3207,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["src/main/js/fold",{"_index":6388,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["src/main/js/index",{"_index":4953,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["src/main/js/index.j",{"_index":4458,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["src/main/js/index.t",{"_index":6377,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["src/main/js/login.j",{"_index":4968,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["src/main/js/logout.j",{"_index":4970,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["src/main/js/myapp",{"_index":4971,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["src/main/js/myapp.j",{"_index":4967,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["src/main/js/them",{"_index":4460,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["src/main/js/theme.less",{"_index":4459,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["src/main/resourc",{"_index":468,"title":{},"name":{},"text":{"14":{},"23":{},"29":{},"52":{},"80":{},"90":{},"95":{},"119":{},"148":{},"158":{},"163":{},"187":{}},"component":{}}],["src/main/resources/web",{"_index":5436,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["src/main/resources/webcont",{"_index":4463,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["src/main/webapp",{"_index":492,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["src/test/java",{"_index":459,"title":{},"name":{},"text":{"14":{},"23":{},"29":{},"80":{},"90":{},"95":{},"148":{},"158":{},"163":{}},"component":{}}],["src/test/js/test",{"_index":4477,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["src]='self",{"_index":1904,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["src]=self",{"_index":3940,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["ss]pec\\.j",{"_index":4482,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["ssl",{"_index":714,"title":{},"name":{},"text":{"19":{},"44":{},"63":{},"84":{},"109":{},"132":{},"152":{},"179":{},"200":{}},"component":{}}],["ssl/tl",{"_index":715,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["sslprotocol",{"_index":4365,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["sso.user.id",{"_index":3888,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["stabil",{"_index":2770,"title":{},"name":{},"text":{"26":{}},"component":{}}],["stabl",{"_index":5736,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["stack",{"_index":55,"title":{"21":{},"46":{},"87":{},"113":{},"155":{},"181":{}},"name":{"46":{},"113":{},"181":{}},"text":{"1":{},"18":{},"21":{},"22":{},"24":{},"46":{},"47":{},"53":{},"67":{},"85":{},"87":{},"88":{},"89":{},"113":{},"114":{},"120":{},"124":{},"135":{},"153":{},"155":{},"156":{},"157":{},"181":{},"182":{},"188":{},"193":{}},"component":{}}],["stack.adoc#author",{"_index":6397,"title":{},"name":{},"text":{"124":{},"193":{}},"component":{}}],["stack.adoc#eslint",{"_index":6398,"title":{},"name":{},"text":{"124":{},"193":{}},"component":{}}],["stacktrace.j",{"_index":932,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["stage",{"_index":1330,"title":{},"name":{},"text":{"23":{},"90":{},"93":{},"124":{},"158":{},"193":{}},"component":{}}],["stale",{"_index":3975,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["stand",{"_index":4725,"title":{},"name":{},"text":{"49":{},"116":{},"184":{}},"component":{}}],["standard",{"_index":295,"title":{},"name":{},"text":{"5":{},"23":{},"40":{},"43":{},"56":{},"66":{},"70":{},"90":{},"107":{},"110":{},"123":{},"134":{},"138":{},"158":{},"175":{},"178":{},"191":{},"202":{}},"component":{}}],["start",{"_index":0,"title":{"18":{},"85":{},"153":{},"1-1":{},"15-1":{},"16-5":{},"29-2":{},"67-1":{},"81-1":{},"82-5":{},"95-2":{},"135-1":{},"149-1":{},"150-5":{},"163-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"31":{},"36":{},"37":{},"39":{},"40":{},"41":{},"46":{},"47":{},"48":{},"52":{},"56":{},"57":{},"59":{},"60":{},"61":{},"63":{},"65":{},"67":{},"68":{},"69":{},"70":{},"72":{},"73":{},"74":{},"75":{},"76":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"100":{},"103":{},"104":{},"106":{},"107":{},"111":{},"113":{},"114":{},"115":{},"119":{},"123":{},"124":{},"125":{},"127":{},"128":{},"129":{},"132":{},"133":{},"135":{},"136":{},"137":{},"138":{},"140":{},"141":{},"142":{},"143":{},"144":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"163":{},"165":{},"168":{},"169":{},"171":{},"174":{},"175":{},"176":{},"181":{},"182":{},"183":{},"187":{},"191":{},"192":{},"193":{},"195":{},"196":{},"197":{},"200":{},"201":{}},"component":{}}],["startinternal(new",{"_index":2171,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["startmodifi",{"_index":2170,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["starttl",{"_index":4364,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["startup",{"_index":546,"title":{},"name":{},"text":{"16":{},"23":{},"40":{},"63":{},"66":{},"82":{},"90":{},"107":{},"132":{},"134":{},"150":{},"158":{},"175":{},"200":{},"202":{}},"component":{}}],["stat",{"_index":4523,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["state",{"_index":1326,"title":{"39-14":{},"39-20":{},"39-21":{},"39-22":{},"39-23":{},"39-24":{},"63-27":{},"63-36":{},"106-14":{},"106-20":{},"106-21":{},"106-22":{},"106-23":{},"106-24":{},"132-27":{},"132-36":{},"174-14":{},"174-20":{},"174-21":{},"174-22":{},"174-23":{},"174-24":{},"200-27":{},"200-36":{}},"name":{},"text":{"23":{},"26":{},"27":{},"36":{},"37":{},"39":{},"40":{},"41":{},"44":{},"50":{},"53":{},"54":{},"56":{},"60":{},"61":{},"63":{},"64":{},"66":{},"90":{},"103":{},"104":{},"106":{},"107":{},"109":{},"111":{},"117":{},"120":{},"121":{},"123":{},"128":{},"129":{},"131":{},"132":{},"134":{},"158":{},"168":{},"169":{},"174":{},"175":{},"176":{},"179":{},"185":{},"188":{},"189":{},"191":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["state.beanmanagerprepar",{"_index":3732,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["state.platformstart",{"_index":3711,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["statechanged(platformev",{"_index":3709,"title":{},"name":{},"text":{"40":{},"53":{},"107":{},"120":{},"175":{},"188":{}},"component":{}}],["stateless",{"_index":3009,"title":{},"name":{},"text":{"32":{},"66":{},"98":{},"134":{},"166":{},"202":{}},"component":{}}],["statement",{"_index":1182,"title":{"23-20":{},"90-20":{},"158-20":{}},"name":{},"text":{"23":{},"28":{},"40":{},"60":{},"90":{},"92":{},"93":{},"94":{},"107":{},"128":{},"158":{},"162":{},"175":{},"196":{}},"component":{}}],["static",{"_index":1036,"title":{"22-10":{},"46-5":{},"62-7":{},"88-10":{},"113-5":{},"130-7":{},"156-10":{},"181-5":{},"198-7":{}},"name":{},"text":{"22":{},"23":{},"26":{},"39":{},"40":{},"43":{},"46":{},"48":{},"52":{},"53":{},"62":{},"63":{},"64":{},"65":{},"66":{},"88":{},"90":{},"92":{},"93":{},"106":{},"107":{},"110":{},"113":{},"115":{},"119":{},"120":{},"130":{},"131":{},"132":{},"133":{},"134":{},"156":{},"158":{},"174":{},"175":{},"178":{},"181":{},"183":{},"187":{},"188":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["staticlookupcall(.j",{"_index":5934,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["statu",{"_index":529,"title":{},"name":{},"text":{"16":{},"23":{},"26":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"53":{},"58":{},"63":{},"64":{},"66":{},"82":{},"90":{},"103":{},"104":{},"105":{},"106":{},"108":{},"111":{},"120":{},"126":{},"131":{},"132":{},"134":{},"150":{},"158":{},"168":{},"169":{},"173":{},"174":{},"176":{},"177":{},"188":{},"194":{},"199":{},"200":{},"202":{}},"component":{}}],["status(istatus.ok",{"_index":3307,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["stay",{"_index":2530,"title":{},"name":{},"text":{"26":{},"40":{},"92":{},"107":{},"175":{}},"component":{}}],["step",{"_index":351,"title":{},"name":{},"text":{"6":{},"16":{},"19":{},"21":{},"23":{},"24":{},"26":{},"28":{},"29":{},"43":{},"46":{},"52":{},"60":{},"63":{},"66":{},"72":{},"82":{},"84":{},"87":{},"89":{},"90":{},"92":{},"94":{},"95":{},"110":{},"113":{},"119":{},"128":{},"132":{},"134":{},"140":{},"150":{},"152":{},"155":{},"157":{},"158":{},"162":{},"163":{},"178":{},"181":{},"187":{},"196":{},"200":{},"202":{}},"component":{}}],["still",{"_index":645,"title":{},"name":{},"text":{"18":{},"20":{},"26":{},"27":{},"39":{},"40":{},"46":{},"53":{},"56":{},"60":{},"63":{},"66":{},"85":{},"86":{},"92":{},"93":{},"106":{},"107":{},"113":{},"120":{},"123":{},"124":{},"128":{},"132":{},"134":{},"153":{},"154":{},"174":{},"175":{},"181":{},"188":{},"191":{},"193":{},"196":{},"200":{},"202":{}},"component":{}}],["stop",{"_index":859,"title":{"39-31":{},"106-31":{},"174-31":{}},"name":{},"text":{"19":{},"39":{},"40":{},"46":{},"60":{},"61":{},"84":{},"106":{},"107":{},"113":{},"128":{},"129":{},"152":{},"174":{},"175":{},"181":{},"196":{},"197":{}},"component":{}}],["store",{"_index":722,"title":{},"name":{},"text":{"19":{},"21":{},"23":{},"26":{},"40":{},"44":{},"46":{},"47":{},"52":{},"53":{},"57":{},"58":{},"59":{},"62":{},"64":{},"84":{},"87":{},"90":{},"107":{},"109":{},"113":{},"114":{},"119":{},"120":{},"125":{},"126":{},"127":{},"130":{},"131":{},"152":{},"155":{},"158":{},"175":{},"179":{},"181":{},"182":{},"187":{},"188":{},"192":{},"194":{},"195":{},"198":{},"199":{}},"component":{}}],["store(formdata",{"_index":2049,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["store(organizationformdata",{"_index":2321,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["store(personformdata",{"_index":2053,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stored/clos",{"_index":2112,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["storepass",{"_index":736,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["straight",{"_index":4591,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["straightforward",{"_index":906,"title":{},"name":{},"text":{"20":{},"23":{},"86":{},"90":{},"154":{},"158":{}},"component":{}}],["stranger",{"_index":959,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["strategi",{"_index":5118,"title":{},"name":{},"text":{"59":{},"64":{},"66":{},"127":{},"131":{},"134":{},"195":{},"199":{},"202":{}},"component":{}}],["strawberri",{"_index":3061,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["strawberry.getvalues().add(new",{"_index":3087,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["strawberry.setcolorhexvalue(\"#f89fa1",{"_index":3101,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["strawberry.setgroupname(\"strawberri",{"_index":3086,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["stream",{"_index":504,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["stream.of(\"jan",{"_index":3071,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["stream.takewhile(pred",{"_index":2802,"title":{},"name":{},"text":{"26":{}},"component":{}}],["streamutil",{"_index":2793,"title":{},"name":{},"text":{"26":{}},"component":{}}],["streamutility.iterate(initialel",{"_index":2803,"title":{},"name":{},"text":{"26":{}},"component":{}}],["streamutility.java",{"_index":2449,"title":{"26-33":{}},"name":{},"text":{},"component":{}}],["streamutility.not(p",{"_index":2798,"title":{},"name":{},"text":{"26":{}},"component":{}}],["streamutility.takewhile(stream",{"_index":2800,"title":{},"name":{},"text":{"26":{}},"component":{}}],["street",{"_index":1581,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["streetfield",{"_index":1975,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["strict",{"_index":2870,"title":{},"name":{},"text":{"26":{},"43":{},"110":{},"178":{}},"component":{}}],["strict=tru",{"_index":2607,"title":{},"name":{},"text":{"26":{}},"component":{}}],["strikethrough",{"_index":2693,"title":{},"name":{},"text":{"26":{}},"component":{}}],["string",{"_index":341,"title":{},"name":{},"text":{"5":{},"6":{},"11":{},"16":{},"19":{},"22":{},"23":{},"26":{},"29":{},"34":{},"39":{},"40":{},"43":{},"48":{},"51":{},"52":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"70":{},"72":{},"77":{},"82":{},"84":{},"88":{},"90":{},"92":{},"93":{},"95":{},"100":{},"101":{},"106":{},"107":{},"110":{},"115":{},"118":{},"119":{},"122":{},"125":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"138":{},"140":{},"145":{},"150":{},"152":{},"156":{},"158":{},"163":{},"171":{},"172":{},"174":{},"175":{},"178":{},"183":{},"186":{},"187":{},"190":{},"192":{},"194":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["string.class",{"_index":5842,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["stringarrayhold",{"_index":1634,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringbuild",{"_index":2381,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringbuilder(sqls.person_page_select",{"_index":2382,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringfield",{"_index":950,"title":{"48-8":{},"115-8":{},"183-8":{}},"name":{},"text":{"20":{},"22":{},"28":{},"48":{},"49":{},"58":{},"60":{},"86":{},"88":{},"94":{},"100":{},"115":{},"116":{},"126":{},"128":{},"154":{},"156":{},"162":{},"171":{},"183":{},"184":{},"194":{},"196":{}},"component":{}}],["stringfield.less",{"_index":4929,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["stringfieldmodel",{"_index":6411,"title":{},"name":{},"text":{"128":{},"196":{}},"component":{}}],["strings.empty(filtertext",{"_index":5131,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["strings.empty(this.acceptedtext",{"_index":5128,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["strings.j",{"_index":2447,"title":{"26-32":{}},"name":{},"text":{},"component":{}}],["strings.lowercasefirstletter(",{"_index":2784,"title":{},"name":{},"text":{"26":{}},"component":{}}],["strings.tolowercase(tile.relevanttextforfilt",{"_index":5130,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["strings.tolowercasefirstletter(",{"_index":2785,"title":{},"name":{},"text":{"26":{}},"component":{}}],["strings.touppercasefirstletter(",{"_index":2783,"title":{},"name":{},"text":{"26":{}},"component":{}}],["strings.uppercasefirstletter(",{"_index":2782,"title":{},"name":{},"text":{"26":{}},"component":{}}],["stringutility.hastext(getcityfield().getvalu",{"_index":2099,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringutility.hastext(getstreetfield().getvalu",{"_index":2097,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringutility.hastext(oldurl",{"_index":2227,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringutility.hastext(organizationid",{"_index":2383,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringutility.htmlencode(str",{"_index":4261,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["stringutility.isnullorempty(c1",{"_index":6320,"title":{},"name":{},"text":{"93":{}},"component":{}}],["stringutility.isnullorempty(formdata.getorganizationid",{"_index":2315,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringutility.isnullorempty(formdata.getpersonid",{"_index":2046,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringutility.isnullorempty(getfirstnamefield().getvalu",{"_index":2107,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringutility.isnullorempty(getlastnamefield().getvalu",{"_index":2109,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringutility.isnullorempty(id",{"_index":6223,"title":{},"name":{},"text":{"92":{}},"component":{}}],["stringutility.join",{"_index":2035,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["stringvalu",{"_index":5897,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["stripcommentsfromjson",{"_index":6186,"title":{},"name":{},"text":{"92":{}},"component":{}}],["stroke",{"_index":338,"title":{},"name":{},"text":{"5":{},"29":{},"33":{},"35":{},"70":{},"95":{},"99":{},"102":{},"138":{},"163":{},"167":{},"170":{}},"component":{}}],["strongli",{"_index":708,"title":{},"name":{},"text":{"19":{},"27":{},"43":{},"66":{},"84":{},"110":{},"134":{},"152":{},"178":{},"202":{}},"component":{}}],["structur",{"_index":869,"title":{"62-8":{},"64-20":{},"130-8":{},"131-20":{},"198-8":{},"199-20":{}},"name":{},"text":{"19":{},"22":{},"23":{},"26":{},"29":{},"46":{},"50":{},"59":{},"60":{},"62":{},"64":{},"84":{},"88":{},"90":{},"95":{},"113":{},"117":{},"127":{},"128":{},"130":{},"131":{},"152":{},"156":{},"158":{},"163":{},"181":{},"185":{},"195":{},"196":{},"198":{},"199":{}},"component":{}}],["stub",{"_index":1656,"title":{"63-11":{},"63-12":{},"63-16":{},"63-17":{},"132-11":{},"132-12":{},"132-16":{},"132-17":{},"200-11":{},"200-12":{},"200-16":{},"200-17":{}},"name":{},"text":{"23":{},"29":{},"63":{},"90":{},"95":{},"132":{},"158":{},"163":{},"200":{}},"component":{}}],["stub(",{"_index":5481,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["stuck",{"_index":1031,"title":{},"name":{},"text":{"21":{},"22":{},"24":{},"26":{},"87":{},"88":{},"89":{},"155":{},"156":{},"157":{}},"component":{}}],["studio",{"_index":680,"title":{},"name":{},"text":{"18":{},"85":{},"153":{}},"component":{}}],["stuff",{"_index":5949,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["style",{"_index":1134,"title":{"34":{},"56":{},"101":{},"123":{},"172":{},"191":{},"26-19":{},"26-34":{},"43-13":{},"110-13":{},"178-13":{}},"name":{"56":{},"123":{},"191":{}},"text":{"22":{},"26":{},"27":{},"32":{},"34":{},"36":{},"43":{},"46":{},"51":{},"53":{},"56":{},"59":{},"64":{},"88":{},"92":{},"98":{},"101":{},"103":{},"110":{},"113":{},"118":{},"120":{},"123":{},"127":{},"131":{},"156":{},"166":{},"168":{},"172":{},"178":{},"181":{},"186":{},"188":{},"191":{},"195":{},"199":{}},"component":{}}],["style/color",{"_index":4932,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["style/s",{"_index":4960,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["stylesheet",{"_index":687,"title":{},"name":{},"text":{"18":{},"20":{},"43":{},"52":{},"56":{},"85":{},"86":{},"110":{},"119":{},"123":{},"153":{},"154":{},"178":{},"187":{},"191":{}},"component":{}}],["sub",{"_index":2040,"title":{"48-2":{},"115-2":{},"183-2":{}},"name":{},"text":{"23":{},"46":{},"48":{},"64":{},"65":{},"66":{},"90":{},"93":{},"113":{},"115":{},"131":{},"133":{},"134":{},"158":{},"181":{},"183":{},"199":{},"201":{},"202":{}},"component":{}}],["subclass",{"_index":428,"title":{"64-14":{},"131-14":{},"199-14":{}},"name":{},"text":{"12":{},"29":{},"38":{},"40":{},"48":{},"64":{},"78":{},"92":{},"95":{},"105":{},"107":{},"115":{},"131":{},"146":{},"163":{},"173":{},"175":{},"183":{},"199":{}},"component":{}}],["subdirectori",{"_index":805,"title":{},"name":{},"text":{"19":{},"28":{},"84":{},"94":{},"152":{},"162":{}},"component":{}}],["subfold",{"_index":1074,"title":{},"name":{},"text":{"22":{},"23":{},"88":{},"90":{},"156":{},"158":{}},"component":{}}],["subject",{"_index":2423,"title":{},"name":{},"text":{"25":{},"39":{},"40":{},"41":{},"44":{},"63":{},"66":{},"67":{},"91":{},"93":{},"106":{},"107":{},"109":{},"111":{},"132":{},"134":{},"159":{},"174":{},"175":{},"176":{},"179":{},"200":{},"202":{}},"component":{}}],["subject.getprincipals().add(new",{"_index":4154,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["subject.getsubject(accesscontroller.getcontext",{"_index":3391,"title":{},"name":{},"text":{"38":{},"41":{},"105":{},"111":{},"173":{},"176":{}},"component":{}}],["subject.setreadonli",{"_index":4156,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["subjectapplink",{"_index":6327,"title":{},"name":{},"text":{"93":{}},"component":{}}],["subjecticonid",{"_index":6325,"title":{},"name":{},"text":{"93":{}},"component":{}}],["subjectlabel",{"_index":6326,"title":{},"name":{},"text":{"93":{}},"component":{}}],["submit",{"_index":3564,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["submitt",{"_index":3434,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["subpackag",{"_index":2979,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["subscrib",{"_index":3410,"title":{"39-18":{},"106-18":{},"174-18":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["subsequ",{"_index":3628,"title":{},"name":{},"text":{"39":{},"40":{},"63":{},"106":{},"107":{},"132":{},"174":{},"175":{},"200":{}},"component":{}}],["subset",{"_index":2377,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["substanti",{"_index":1333,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["substitut",{"_index":3354,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["substr",{"_index":2353,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["subtitl",{"_index":4562,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["subtyp",{"_index":5324,"title":{},"name":{},"text":{"61":{},"129":{},"197":{}},"component":{}}],["success",{"_index":777,"title":{},"name":{},"text":{"19":{},"37":{},"41":{},"66":{},"84":{},"104":{},"111":{},"134":{},"152":{},"169":{},"176":{},"202":{}},"component":{}}],["successfulli",{"_index":606,"title":{},"name":{},"text":{"17":{},"21":{},"22":{},"23":{},"24":{},"26":{},"83":{},"87":{},"88":{},"89":{},"90":{},"151":{},"155":{},"156":{},"157":{},"158":{}},"component":{}}],["such",{"_index":268,"title":{},"name":{},"text":{"4":{},"6":{},"14":{},"18":{},"19":{},"20":{},"23":{},"24":{},"26":{},"29":{},"32":{},"39":{},"40":{},"41":{},"43":{},"46":{},"48":{},"53":{},"55":{},"57":{},"60":{},"63":{},"64":{},"65":{},"66":{},"71":{},"72":{},"80":{},"84":{},"85":{},"86":{},"89":{},"90":{},"95":{},"98":{},"106":{},"107":{},"110":{},"111":{},"113":{},"115":{},"120":{},"122":{},"125":{},"128":{},"131":{},"132":{},"133":{},"134":{},"139":{},"140":{},"148":{},"152":{},"153":{},"154":{},"157":{},"158":{},"163":{},"166":{},"174":{},"175":{},"176":{},"178":{},"181":{},"183":{},"188":{},"190":{},"192":{},"196":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["suddenli",{"_index":2772,"title":{},"name":{},"text":{"26":{}},"component":{}}],["suffici",{"_index":152,"title":{},"name":{},"text":{"3":{},"26":{},"31":{},"39":{},"40":{},"53":{},"60":{},"62":{},"63":{},"69":{},"97":{},"106":{},"107":{},"120":{},"128":{},"130":{},"132":{},"137":{},"165":{},"174":{},"175":{},"188":{},"196":{},"198":{},"200":{}},"component":{}}],["suffix",{"_index":379,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"22":{},"29":{},"51":{},"63":{},"64":{},"73":{},"74":{},"76":{},"78":{},"79":{},"88":{},"93":{},"95":{},"118":{},"128":{},"131":{},"132":{},"141":{},"142":{},"144":{},"146":{},"147":{},"156":{},"163":{},"186":{},"196":{},"199":{},"200":{}},"component":{}}],["suggest",{"_index":2418,"title":{},"name":{},"text":{"24":{},"26":{},"46":{},"60":{},"89":{},"93":{},"113":{},"124":{},"128":{},"157":{},"181":{},"193":{},"196":{}},"component":{}}],["suitabl",{"_index":2880,"title":{},"name":{},"text":{"26":{},"62":{},"130":{},"198":{}},"component":{}}],["summar",{"_index":1332,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["summari",{"_index":902,"title":{"20-5":{},"53-6":{},"86-5":{},"120-6":{},"154-5":{},"188-6":{}},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["super",{"_index":380,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"20":{},"22":{},"23":{},"26":{},"28":{},"29":{},"36":{},"40":{},"48":{},"59":{},"60":{},"64":{},"73":{},"74":{},"76":{},"78":{},"79":{},"86":{},"90":{},"94":{},"95":{},"100":{},"103":{},"107":{},"115":{},"127":{},"128":{},"131":{},"141":{},"142":{},"144":{},"146":{},"147":{},"154":{},"158":{},"162":{},"163":{},"168":{},"171":{},"175":{},"183":{},"195":{},"196":{},"199":{}},"component":{}}],["super(\"scoutdoc.createcompani",{"_index":4285,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["super(\"scoutdoc.readcompani",{"_index":4280,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["super(\"scoutdoc.updatecompani",{"_index":4308,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["super(c1",{"_index":6318,"title":{},"name":{},"text":{"93":{}},"component":{}}],["super(id",{"_index":5923,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["super(own",{"_index":4639,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["super(ownerbox",{"_index":4657,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["super(ownerform",{"_index":4693,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["super._init(model",{"_index":955,"title":{},"name":{},"text":{"20":{},"22":{},"48":{},"59":{},"86":{},"88":{},"100":{},"115":{},"127":{},"154":{},"156":{},"171":{},"183":{},"195":{}},"component":{}}],["super._jsonmodel",{"_index":4607,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["super._remov",{"_index":3250,"title":{},"name":{},"text":{"36":{},"59":{},"103":{},"127":{},"168":{},"195":{}},"component":{}}],["super._renderproperti",{"_index":3241,"title":{},"name":{},"text":{"36":{},"59":{},"103":{},"127":{},"168":{},"195":{}},"component":{}}],["super.configureclientbuilder(clientbuild",{"_index":6016,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["super.equals(obj",{"_index":4324,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["super.getconfiguredbodylayoutconfig",{"_index":4877,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["super.getconfigurednativenotificationdefault",{"_index":2637,"title":{},"name":{},"text":{"26":{}},"component":{}}],["super.hashcod",{"_index":4320,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["super.inittransformationconfig",{"_index":4858,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["super.registerrequestfilters(clientbuild",{"_index":6079,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["superclass",{"_index":2973,"title":{},"name":{},"text":{"29":{},"64":{},"95":{},"131":{},"163":{},"199":{}},"component":{}}],["superusersubjectproperti",{"_index":1544,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["suppli",{"_index":3835,"title":{},"name":{},"text":{"40":{},"56":{},"93":{},"107":{},"123":{},"175":{},"191":{}},"component":{}}],["support",{"_index":178,"title":{"45":{},"53":{},"54":{},"112":{},"120":{},"121":{},"124":{},"180":{},"188":{},"189":{},"193":{},"5-5":{},"26-14":{},"26-17":{},"26-40":{},"27-9":{},"27-16":{},"27-18":{},"27-19":{},"27-20":{},"27-21":{},"66-12":{},"70-5":{},"93-5":{},"93-12":{},"134-12":{},"138-5":{},"202-12":{}},"name":{"45":{},"112":{},"180":{}},"text":{"3":{},"5":{},"6":{},"18":{},"19":{},"21":{},"23":{},"24":{},"26":{},"27":{},"29":{},"31":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"59":{},"60":{},"63":{},"64":{},"66":{},"69":{},"70":{},"72":{},"84":{},"85":{},"87":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"118":{},"119":{},"120":{},"121":{},"123":{},"125":{},"127":{},"128":{},"131":{},"132":{},"134":{},"137":{},"138":{},"140":{},"152":{},"153":{},"155":{},"157":{},"158":{},"160":{},"163":{},"165":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"186":{},"187":{},"188":{},"189":{},"191":{},"192":{},"195":{},"196":{},"199":{},"200":{},"202":{}},"component":{}}],["suppos",{"_index":2651,"title":{},"name":{},"text":{"26":{},"56":{},"123":{},"191":{}},"component":{}}],["suppress",{"_index":283,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["suppresseventifdis",{"_index":6175,"title":{},"name":{},"text":{"92":{}},"component":{}}],["suppresswarnings(\"unus",{"_index":4377,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["sure",{"_index":421,"title":{},"name":{},"text":{"11":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"30":{},"36":{},"46":{},"48":{},"52":{},"53":{},"55":{},"56":{},"58":{},"60":{},"61":{},"66":{},"77":{},"82":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"103":{},"113":{},"115":{},"119":{},"120":{},"122":{},"123":{},"126":{},"128":{},"129":{},"134":{},"145":{},"150":{},"151":{},"152":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"164":{},"168":{},"181":{},"183":{},"187":{},"188":{},"190":{},"191":{},"194":{},"196":{},"197":{},"202":{}},"component":{}}],["surefir",{"_index":2416,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["svg",{"_index":2633,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["swallow",{"_index":3518,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["switch",{"_index":794,"title":{},"name":{},"text":{"19":{},"21":{},"23":{},"24":{},"28":{},"53":{},"56":{},"59":{},"64":{},"84":{},"87":{},"89":{},"90":{},"94":{},"120":{},"123":{},"127":{},"131":{},"152":{},"155":{},"157":{},"158":{},"162":{},"188":{},"191":{},"195":{},"199":{}},"component":{}}],["symbol",{"_index":1017,"title":{},"name":{},"text":{"21":{},"24":{},"87":{},"89":{},"155":{},"157":{}},"component":{}}],["sync",{"_index":3933,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["synchron",{"_index":2997,"title":{},"name":{},"text":{"32":{},"39":{},"61":{},"64":{},"98":{},"106":{},"129":{},"131":{},"166":{},"174":{},"197":{},"199":{}},"component":{}}],["syntax",{"_index":1569,"title":{},"name":{},"text":{"23":{},"46":{},"90":{},"113":{},"128":{},"158":{},"181":{},"196":{}},"component":{}}],["sys.syst",{"_index":1572,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["system",{"_index":842,"title":{},"name":{},"text":{"19":{},"26":{},"39":{},"40":{},"43":{},"45":{},"46":{},"47":{},"52":{},"56":{},"84":{},"106":{},"107":{},"110":{},"112":{},"113":{},"114":{},"119":{},"123":{},"152":{},"174":{},"175":{},"178":{},"180":{},"181":{},"182":{},"187":{},"191":{}},"component":{}}],["system.err.println(t",{"_index":3469,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["system.out.println(\"attribut",{"_index":5892,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["system.out.println(\"job",{"_index":3576,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["system.out.println(\"seg",{"_index":3119,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["system.out.println(nlslocale.current.get",{"_index":4160,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["system.out.println(subject.getsubject(accesscontroller.getcontext",{"_index":4162,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["t",{"_index":3468,"title":{},"name":{},"text":{"39":{},"61":{},"64":{},"106":{},"129":{},"131":{},"174":{},"197":{},"199":{}},"component":{}}],["tab",{"_index":322,"title":{},"name":{},"text":{"5":{},"11":{},"22":{},"23":{},"26":{},"28":{},"29":{},"47":{},"50":{},"70":{},"77":{},"88":{},"90":{},"94":{},"95":{},"114":{},"117":{},"138":{},"145":{},"156":{},"158":{},"162":{},"163":{},"182":{},"185":{}},"component":{}}],["tabbox",{"_index":6280,"title":{},"name":{},"text":{"93":{}},"component":{}}],["tabl",{"_index":227,"title":{"5-3":{},"23-13":{},"23-43":{},"27-24":{},"29-22":{},"53-7":{},"70-3":{},"90-13":{},"90-43":{},"92-20":{},"95-22":{},"120-7":{},"138-3":{},"158-13":{},"158-43":{},"163-22":{},"188-7":{}},"name":{},"text":{"4":{},"5":{},"16":{},"23":{},"26":{},"27":{},"28":{},"29":{},"32":{},"33":{},"34":{},"35":{},"40":{},"43":{},"48":{},"49":{},"53":{},"55":{},"57":{},"59":{},"60":{},"63":{},"66":{},"70":{},"71":{},"82":{},"90":{},"92":{},"93":{},"94":{},"95":{},"98":{},"99":{},"101":{},"102":{},"107":{},"110":{},"115":{},"116":{},"120":{},"122":{},"125":{},"127":{},"128":{},"132":{},"134":{},"138":{},"139":{},"150":{},"158":{},"162":{},"163":{},"166":{},"167":{},"170":{},"172":{},"175":{},"178":{},"183":{},"184":{},"188":{},"190":{},"192":{},"195":{},"196":{},"200":{},"202":{}},"component":{}}],["table.init(model",{"_index":4916,"title":{},"name":{},"text":{"55":{},"122":{},"190":{}},"component":{}}],["table.j",{"_index":2832,"title":{},"name":{},"text":{"26":{},"27":{},"59":{},"127":{},"195":{}},"component":{}}],["table.menutypes.emptyspac",{"_index":6439,"title":{},"name":{},"text":{"195":{}},"component":{}}],["table.menutypes.singleselect",{"_index":6283,"title":{},"name":{},"text":{"93":{}},"component":{}}],["table.removefilter(filt",{"_index":2848,"title":{},"name":{},"text":{"26":{}},"component":{}}],["table.singleselect",{"_index":6282,"title":{},"name":{},"text":{"93":{}},"component":{}}],["table.th",{"_index":5185,"title":{},"name":{},"text":{"60":{}},"component":{}}],["table/tre",{"_index":2910,"title":{},"name":{},"text":{"27":{}},"component":{}}],["tabledata",{"_index":4649,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["tablefield",{"_index":334,"title":{},"name":{},"text":{"5":{},"28":{},"29":{},"49":{},"70":{},"94":{},"95":{},"116":{},"138":{},"162":{},"163":{},"184":{}},"component":{}}],["tablefilt",{"_index":6184,"title":{},"name":{},"text":{"92":{}},"component":{}}],["tablefilter.j",{"_index":6183,"title":{},"name":{},"text":{"92":{}},"component":{}}],["tablemenutype.emptyspac",{"_index":1817,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["tablemenutype.singleselect",{"_index":1818,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["tablepag",{"_index":336,"title":{},"name":{},"text":{"5":{},"12":{},"29":{},"70":{},"78":{},"95":{},"138":{},"146":{},"163":{}},"component":{}}],["tablepagedata",{"_index":4648,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["tablet",{"_index":4831,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["tabular",{"_index":1210,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["tag",{"_index":2755,"title":{},"name":{},"text":{"26":{},"40":{},"43":{},"46":{},"51":{},"60":{},"107":{},"110":{},"113":{},"118":{},"128":{},"175":{},"178":{},"181":{},"186":{},"196":{}},"component":{}}],["tagclick",{"_index":2757,"title":{},"name":{},"text":{"26":{}},"component":{}}],["tagfield",{"_index":2438,"title":{"26-28":{}},"name":{},"text":{},"component":{}}],["tagfield.tagbar.setclickable(tru",{"_index":2759,"title":{},"name":{},"text":{"26":{}},"component":{}}],["tailor",{"_index":2985,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["take",{"_index":273,"title":{},"name":{},"text":{"4":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"29":{},"40":{},"41":{},"44":{},"46":{},"50":{},"53":{},"56":{},"58":{},"60":{},"63":{},"65":{},"66":{},"71":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"93":{},"95":{},"107":{},"109":{},"111":{},"113":{},"117":{},"120":{},"123":{},"126":{},"128":{},"132":{},"133":{},"134":{},"139":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"175":{},"176":{},"179":{},"181":{},"185":{},"188":{},"191":{},"194":{},"196":{},"200":{},"201":{},"202":{}},"component":{}}],["taken",{"_index":167,"title":{},"name":{},"text":{"3":{},"31":{},"39":{},"57":{},"66":{},"69":{},"97":{},"106":{},"125":{},"134":{},"137":{},"165":{},"174":{},"192":{},"202":{}},"component":{}}],["takewhil",{"_index":2795,"title":{},"name":{},"text":{"26":{}},"component":{}}],["tar.gz",{"_index":843,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["target",{"_index":453,"title":{},"name":{},"text":{"14":{},"16":{},"19":{},"20":{},"22":{},"23":{},"26":{},"29":{},"42":{},"46":{},"48":{},"58":{},"63":{},"64":{},"66":{},"80":{},"82":{},"84":{},"86":{},"88":{},"90":{},"95":{},"108":{},"113":{},"115":{},"126":{},"131":{},"132":{},"134":{},"148":{},"150":{},"152":{},"154":{},"156":{},"158":{},"163":{},"177":{},"181":{},"183":{},"194":{},"199":{},"200":{},"202":{}},"component":{}}],["target.request",{"_index":6038,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["target.request().delet",{"_index":6044,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["target/class",{"_index":4544,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["target/dist",{"_index":4502,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["target/dist/d.ts/index.d.t",{"_index":6381,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["target/dist/dev/oth",{"_index":6392,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["target/dist/dev/your",{"_index":6379,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["target/gener",{"_index":5438,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["target\\jaxws\\wsartifact",{"_index":5482,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["targetnamespac",{"_index":5546,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["targetorigin",{"_index":2937,"title":{},"name":{},"text":{"27":{}},"component":{}}],["task",{"_index":163,"title":{},"name":{},"text":{"3":{},"19":{},"20":{},"21":{},"23":{},"24":{},"29":{},"31":{},"32":{},"39":{},"40":{},"61":{},"69":{},"84":{},"86":{},"87":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"106":{},"107":{},"129":{},"137":{},"152":{},"154":{},"155":{},"157":{},"158":{},"163":{},"165":{},"166":{},"174":{},"175":{},"197":{}},"component":{}}],["tcp",{"_index":4359,"title":{},"name":{},"text":{"44":{},"66":{},"109":{},"134":{},"179":{},"202":{}},"component":{}}],["technic",{"_index":73,"title":{"32":{},"98":{},"166":{}},"name":{"32":{},"98":{},"166":{}},"text":{"1":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"40":{},"56":{},"63":{},"64":{},"67":{},"87":{},"88":{},"89":{},"90":{},"91":{},"107":{},"123":{},"124":{},"131":{},"132":{},"135":{},"155":{},"156":{},"157":{},"158":{},"159":{},"175":{},"191":{},"193":{},"199":{},"200":{}},"component":{}}],["technolog",{"_index":156,"title":{"61-3":{},"129-3":{},"197-3":{}},"name":{},"text":{"3":{},"31":{},"45":{},"69":{},"97":{},"112":{},"137":{},"165":{},"180":{}},"component":{}}],["tediou",{"_index":2977,"title":{},"name":{},"text":{"29":{},"92":{},"93":{},"95":{},"163":{}},"component":{}}],["tell",{"_index":3444,"title":{},"name":{},"text":{"39":{},"46":{},"106":{},"113":{},"174":{},"181":{}},"component":{}}],["temp",{"_index":4043,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["templat",{"_index":319,"title":{"23-32":{},"23-35":{},"23-37":{},"90-32":{},"90-35":{},"90-37":{},"158-32":{},"158-35":{},"158-37":{}},"name":{},"text":{"5":{},"23":{},"28":{},"29":{},"48":{},"70":{},"90":{},"94":{},"95":{},"115":{},"138":{},"158":{},"162":{},"163":{},"183":{}},"component":{}}],["temporarili",{"_index":3663,"title":{"61-13":{},"129-13":{},"197-13":{}},"name":{},"text":{"39":{},"60":{},"106":{},"128":{},"174":{},"196":{}},"component":{}}],["term",{"_index":2991,"title":{},"name":{},"text":{"29":{},"40":{},"52":{},"63":{},"95":{},"107":{},"119":{},"132":{},"163":{},"175":{},"187":{},"200":{}},"component":{}}],["termin",{"_index":1055,"title":{},"name":{},"text":{"22":{},"39":{},"40":{},"66":{},"88":{},"106":{},"107":{},"134":{},"156":{},"174":{},"175":{},"202":{}},"component":{}}],["test",{"_index":458,"title":{"28":{},"94":{},"162":{},"28-3":{},"28-4":{},"28-5":{},"28-6":{},"28-7":{},"28-8":{},"37-4":{},"46-13":{},"46-15":{},"64-6":{},"64-27":{},"92-21":{},"94-3":{},"94-4":{},"94-5":{},"94-6":{},"94-7":{},"94-8":{},"104-4":{},"113-13":{},"113-15":{},"131-6":{},"131-27":{},"162-3":{},"162-4":{},"162-5":{},"162-6":{},"162-7":{},"162-8":{},"169-4":{},"181-13":{},"181-15":{},"199-6":{},"199-27":{}},"name":{"28":{},"94":{},"162":{}},"text":{"14":{},"19":{},"22":{},"23":{},"28":{},"29":{},"32":{},"39":{},"40":{},"44":{},"46":{},"52":{},"63":{},"64":{},"80":{},"84":{},"88":{},"90":{},"92":{},"94":{},"95":{},"98":{},"106":{},"107":{},"109":{},"113":{},"119":{},"131":{},"132":{},"148":{},"152":{},"156":{},"158":{},"162":{},"163":{},"166":{},"174":{},"175":{},"179":{},"181":{},"187":{},"199":{},"200":{}},"component":{}}],["test\").withbody(\"a",{"_index":4699,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["test\").withbody(\"if",{"_index":4706,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["test(ifutur",{"_index":3533,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["test(jobev",{"_index":3550,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["test:ci",{"_index":4498,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["testdataobjectmigr",{"_index":6247,"title":{},"name":{},"text":{"92":{}},"component":{}}],["testdataobjectmigrationinventori",{"_index":6245,"title":{},"name":{},"text":{"92":{}},"component":{}}],["testdostructuremigr",{"_index":6246,"title":{},"name":{},"text":{"92":{}},"component":{}}],["testdostructuremigrationinventori",{"_index":6244,"title":{},"name":{},"text":{"92":{}},"component":{}}],["testdostructuremigrationinventory#testdostructuremigrationinventory(list",{"_index":6253,"title":{},"name":{},"text":{"92":{}},"component":{}}],["testmethod",{"_index":4697,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["testserver:start",{"_index":4494,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["testserver:stop",{"_index":4496,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["text",{"_index":141,"title":{"57":{},"125":{},"192":{},"27-17":{},"29-25":{},"57-1":{},"57-2":{},"95-25":{},"125-1":{},"125-2":{},"163-25":{},"192-1":{},"192-2":{}},"name":{"57":{},"125":{},"192":{}},"text":{"3":{},"4":{},"5":{},"6":{},"9":{},"11":{},"20":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"31":{},"35":{},"40":{},"43":{},"51":{},"52":{},"53":{},"56":{},"57":{},"58":{},"59":{},"62":{},"65":{},"69":{},"70":{},"71":{},"72":{},"75":{},"77":{},"86":{},"88":{},"89":{},"90":{},"93":{},"95":{},"97":{},"102":{},"107":{},"110":{},"118":{},"119":{},"120":{},"123":{},"125":{},"126":{},"127":{},"130":{},"133":{},"137":{},"138":{},"139":{},"140":{},"143":{},"145":{},"154":{},"156":{},"157":{},"158":{},"163":{},"165":{},"167":{},"175":{},"178":{},"186":{},"187":{},"188":{},"191":{},"192":{},"194":{},"195":{},"198":{},"201":{}},"component":{}}],["textfilteren",{"_index":2853,"title":{},"name":{},"text":{"26":{},"27":{},"59":{},"127":{},"195":{}},"component":{}}],["textkeytextproviderservic",{"_index":4118,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["textproviderservic",{"_index":277,"title":{},"name":{},"text":{"4":{},"27":{},"29":{},"57":{},"71":{},"95":{},"125":{},"139":{},"163":{},"192":{}},"component":{}}],["texts.get",{"_index":343,"title":{},"name":{},"text":{"5":{},"6":{},"11":{},"23":{},"28":{},"29":{},"40":{},"70":{},"72":{},"77":{},"90":{},"94":{},"95":{},"107":{},"138":{},"140":{},"145":{},"158":{},"162":{},"163":{},"175":{}},"component":{}}],["texts.get(\"c",{"_index":1993,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"contact",{"_index":583,"title":{},"name":{},"text":{"16":{},"23":{},"82":{},"90":{},"150":{},"158":{}},"component":{}}],["texts.get(\"contactinfo",{"_index":2278,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"countri",{"_index":1458,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"dateofbirth",{"_index":1930,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"edit",{"_index":1802,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"editurl",{"_index":2222,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"email",{"_index":2075,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"femal",{"_index":1871,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"firstnam",{"_index":1445,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"gend",{"_index":1939,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"homepag",{"_index":2267,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"key",{"_index":207,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["texts.get(\"lastnam",{"_index":1921,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"loc",{"_index":1985,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"mal",{"_index":1862,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"nam",{"_index":2259,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"namewithag",{"_index":4977,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["texts.get(\"new",{"_index":1814,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"newpersonmenu",{"_index":1834,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"not",{"_index":1952,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"opt",{"_index":1312,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"organ",{"_index":1481,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"own",{"_index":4298,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["texts.get(\"person",{"_index":1375,"title":{},"name":{},"text":{"23":{},"57":{},"90":{},"125":{},"158":{},"192":{}},"component":{}}],["texts.get(\"phon",{"_index":1467,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"pictureurl",{"_index":2169,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"pleasenot",{"_index":2205,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"quickaccess",{"_index":1305,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"securityurlrestrictedmsg\")).tohtml",{"_index":2206,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"street",{"_index":1976,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["texts.get(\"youarenotallowedtoregisterthisdata",{"_index":4287,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["texts.json",{"_index":973,"title":{},"name":{},"text":{"20":{},"22":{},"40":{},"86":{},"88":{},"107":{},"154":{},"156":{},"175":{}},"component":{}}],["texts.nl",{"_index":464,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["texts.properti",{"_index":259,"title":{},"name":{},"text":{"4":{},"29":{},"57":{},"71":{},"95":{},"125":{},"139":{},"163":{},"192":{}},"component":{}}],["texts_de.properti",{"_index":260,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["texts_fr.properti",{"_index":4987,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["texts_fr_b",{"_index":262,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["textsurl",{"_index":964,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["thank",{"_index":143,"title":{},"name":{},"text":{"3":{},"18":{},"20":{},"31":{},"69":{},"85":{},"86":{},"97":{},"137":{},"153":{},"154":{},"165":{}},"component":{}}],["that’",{"_index":979,"title":{},"name":{},"text":{"20":{},"34":{},"46":{},"56":{},"86":{},"101":{},"123":{},"154":{},"172":{},"191":{}},"component":{}}],["their",{"_index":6143,"title":{},"name":{},"text":{"92":{}},"component":{}}],["them.aft",{"_index":5190,"title":{},"name":{},"text":{"60":{}},"component":{}}],["theme",{"_index":982,"title":{"56-5":{},"123-5":{},"191-5":{}},"name":{},"text":{"20":{},"22":{},"33":{},"35":{},"40":{},"46":{},"56":{},"86":{},"88":{},"99":{},"102":{},"107":{},"113":{},"123":{},"154":{},"156":{},"167":{},"170":{},"175":{},"181":{},"191":{}},"component":{}}],["theme.css",{"_index":927,"title":{},"name":{},"text":{"20":{},"22":{},"46":{},"52":{},"56":{},"86":{},"88":{},"113":{},"119":{},"123":{},"154":{},"156":{},"181":{},"187":{},"191":{}},"component":{}}],["theme.less",{"_index":3026,"title":{},"name":{},"text":{"33":{},"35":{},"56":{},"99":{},"102":{},"123":{},"167":{},"170":{},"191":{}},"component":{}}],["themselv",{"_index":3784,"title":{},"name":{},"text":{"40":{},"43":{},"107":{},"110":{},"175":{},"178":{}},"component":{}}],["therebi",{"_index":3623,"title":{},"name":{},"text":{"39":{},"41":{},"63":{},"106":{},"111":{},"132":{},"174":{},"176":{},"200":{}},"component":{}}],["therefor",{"_index":603,"title":{},"name":{},"text":{"17":{},"21":{},"23":{},"24":{},"26":{},"33":{},"35":{},"38":{},"40":{},"43":{},"46":{},"48":{},"59":{},"60":{},"62":{},"63":{},"64":{},"66":{},"83":{},"87":{},"89":{},"90":{},"93":{},"99":{},"102":{},"105":{},"107":{},"110":{},"113":{},"115":{},"124":{},"127":{},"128":{},"130":{},"131":{},"132":{},"134":{},"151":{},"155":{},"157":{},"158":{},"167":{},"170":{},"173":{},"175":{},"178":{},"181":{},"183":{},"193":{},"195":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["thereof",{"_index":3383,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["thereto",{"_index":5480,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["there’",{"_index":3833,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["thick",{"_index":4787,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["thin",{"_index":5391,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["thing",{"_index":1130,"title":{},"name":{},"text":{"22":{},"23":{},"46":{},"48":{},"56":{},"58":{},"60":{},"88":{},"90":{},"113":{},"115":{},"123":{},"126":{},"128":{},"156":{},"158":{},"181":{},"183":{},"191":{},"194":{},"196":{}},"component":{}}],["think",{"_index":652,"title":{},"name":{},"text":{"18":{},"43":{},"60":{},"85":{},"110":{},"128":{},"153":{},"178":{},"196":{}},"component":{}}],["third",{"_index":743,"title":{},"name":{},"text":{"19":{},"21":{},"23":{},"24":{},"26":{},"43":{},"46":{},"48":{},"54":{},"63":{},"84":{},"87":{},"89":{},"90":{},"110":{},"113":{},"115":{},"121":{},"124":{},"132":{},"152":{},"155":{},"157":{},"158":{},"178":{},"181":{},"183":{},"189":{},"193":{},"200":{}},"component":{}}],["thirdparti",{"_index":5886,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["this(nul",{"_index":4305,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["this.$back",{"_index":3230,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.$back.append",{"_index":3248,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.$card",{"_index":3228,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.$card.appenddiv('back",{"_index":3238,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.$card.appenddiv('front",{"_index":3237,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.$card.toggleclass('flip",{"_index":3256,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.$contain",{"_index":5149,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.$field",{"_index":3239,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.$front",{"_index":3229,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.$front.append",{"_index":3246,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.$parent.appenddiv",{"_index":5150,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.$parent.appenddiv('cont",{"_index":3217,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this._createfiltersupport",{"_index":5143,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this._oncardmousedown.bind(thi",{"_index":3236,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this._renderbackimag",{"_index":3243,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this._renderflip",{"_index":3244,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this._renderfrontimag",{"_index":3242,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this._rendertextfilteren",{"_index":5154,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.acceptedtext",{"_index":5122,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.addcontainer(this.$par",{"_index":3214,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.addfield($field",{"_index":3218,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.addlabel",{"_index":3215,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.addmandatoryind",{"_index":3219,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.addstatu",{"_index":3220,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.ajaxcal",{"_index":3317,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["this.ajaxcall.cal",{"_index":3321,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["this.ajaxcall.retryinterv",{"_index":3320,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["this.backimag",{"_index":3233,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.data",{"_index":6365,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["this.data.exampleid",{"_index":6366,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["this.el",{"_index":5139,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.examplefield",{"_index":6360,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["this.examplefield.setvalue(this.data.exampl",{"_index":6367,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["this.examplefield.valu",{"_index":6368,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["this.exampleid",{"_index":6359,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["this.extend(stringfield.prototyp",{"_index":4614,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["this.extended.setproperty('bar",{"_index":4617,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["this.filt",{"_index":5140,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.filteraccept",{"_index":5174,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.filteredelementsdirti",{"_index":5144,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.filtersupport",{"_index":5142,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.filtersupport.addfilter(filt",{"_index":5168,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.filtersupport.filt",{"_index":5171,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.filtersupport.remov",{"_index":5155,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.filtersupport.removefilter(filt",{"_index":5169,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.filtersupport.renderfilterfield",{"_index":5161,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.filtersupport.setfilters(filt",{"_index":5170,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.flip",{"_index":3231,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.frontimag",{"_index":3232,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.htmlcomp",{"_index":5151,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.m_validityfrom",{"_index":5955,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["this.m_validityto",{"_index":5958,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["this.next(model",{"_index":4615,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["this.organizationid",{"_index":2251,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["this.personid",{"_index":1729,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["this.sess",{"_index":5153,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.setelements(this.el",{"_index":5145,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.setfilters(this.filt",{"_index":5146,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.setflipped(!this.flip",{"_index":3252,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.setproperty('el",{"_index":5157,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.setproperty('flip",{"_index":3254,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["this.setproperty('textfilteren",{"_index":5159,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.text",{"_index":5173,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.textfilteren",{"_index":5141,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["this.trigger('click",{"_index":5259,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["this.url",{"_index":2132,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["this.widget('examplefield",{"_index":6364,"title":{},"name":{},"text":{"100":{},"171":{}},"component":{}}],["this.widget('greetbutton').on('click",{"_index":956,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["this.widget('id",{"_index":6274,"title":{},"name":{},"text":{"93":{}},"component":{}}],["this.widget('namefield').valu",{"_index":958,"title":{},"name":{},"text":{"20":{},"22":{},"86":{},"88":{},"154":{},"156":{}},"component":{}}],["this.widget('specialfield').setlabel('new",{"_index":4603,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["this.widget('yourid",{"_index":6275,"title":{},"name":{},"text":{"93":{},"128":{},"196":{}},"component":{}}],["this.widgetmap",{"_index":6417,"title":{},"name":{},"text":{"128":{},"196":{}},"component":{}}],["this::transformcustomexcept",{"_index":6047,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["thiskey",{"_index":5974,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["those",{"_index":230,"title":{},"name":{},"text":{"4":{},"5":{},"23":{},"26":{},"29":{},"38":{},"39":{},"40":{},"41":{},"43":{},"48":{},"53":{},"63":{},"70":{},"71":{},"90":{},"95":{},"105":{},"106":{},"107":{},"110":{},"111":{},"115":{},"120":{},"127":{},"132":{},"138":{},"139":{},"158":{},"163":{},"173":{},"174":{},"175":{},"176":{},"178":{},"183":{},"188":{},"195":{},"200":{}},"component":{}}],["though",{"_index":669,"title":{},"name":{},"text":{"18":{},"48":{},"52":{},"53":{},"54":{},"58":{},"60":{},"85":{},"92":{},"115":{},"119":{},"120":{},"121":{},"126":{},"128":{},"153":{},"183":{},"187":{},"188":{},"189":{},"194":{},"196":{}},"component":{}}],["thread",{"_index":2995,"title":{},"name":{},"text":{"32":{},"38":{},"39":{},"40":{},"41":{},"44":{},"61":{},"63":{},"98":{},"105":{},"106":{},"107":{},"109":{},"111":{},"129":{},"132":{},"166":{},"173":{},"174":{},"175":{},"176":{},"179":{},"197":{},"200":{}},"component":{}}],["thread.at",{"_index":3652,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["threadinterruptederror",{"_index":3335,"title":{"38-10":{},"105-10":{},"173-10":{}},"name":{},"text":{"38":{},"39":{},"105":{},"106":{},"173":{},"174":{}},"component":{}}],["threadloc",{"_index":3440,"title":{},"name":{},"text":{"39":{},"41":{},"106":{},"111":{},"174":{},"176":{}},"component":{}}],["threadpoolexecutor",{"_index":3669,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["thread’",{"_index":3371,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["three",{"_index":536,"title":{},"name":{},"text":{"16":{},"23":{},"33":{},"35":{},"39":{},"46":{},"48":{},"53":{},"63":{},"64":{},"66":{},"82":{},"90":{},"99":{},"102":{},"106":{},"113":{},"115":{},"120":{},"131":{},"132":{},"134":{},"150":{},"158":{},"167":{},"170":{},"174":{},"181":{},"183":{},"188":{},"199":{},"200":{},"202":{}},"component":{}}],["three(\"thre",{"_index":5904,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["through",{"_index":111,"title":{},"name":{},"text":{"2":{},"4":{},"15":{},"16":{},"18":{},"21":{},"23":{},"24":{},"29":{},"40":{},"43":{},"48":{},"51":{},"52":{},"66":{},"68":{},"71":{},"81":{},"82":{},"85":{},"87":{},"89":{},"90":{},"95":{},"107":{},"110":{},"115":{},"118":{},"119":{},"134":{},"136":{},"139":{},"149":{},"150":{},"153":{},"155":{},"157":{},"158":{},"163":{},"175":{},"178":{},"183":{},"186":{},"187":{},"202":{}},"component":{}}],["throughout",{"_index":4673,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["throw",{"_index":1559,"title":{},"name":{},"text":{"23":{},"38":{},"39":{},"40":{},"43":{},"58":{},"63":{},"64":{},"66":{},"90":{},"105":{},"106":{},"107":{},"110":{},"126":{},"131":{},"132":{},"134":{},"158":{},"173":{},"174":{},"175":{},"178":{},"194":{},"199":{},"200":{},"202":{}},"component":{}}],["throwabl",{"_index":3329,"title":{"38-1":{},"105-1":{},"173-1":{}},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["thrown",{"_index":2089,"title":{},"name":{},"text":{"23":{},"38":{},"39":{},"41":{},"43":{},"90":{},"105":{},"106":{},"110":{},"111":{},"158":{},"173":{},"174":{},"176":{},"178":{}},"component":{}}],["thu",{"_index":4370,"title":{},"name":{},"text":{"44":{},"51":{},"52":{},"66":{},"109":{},"118":{},"119":{},"134":{},"179":{},"186":{},"187":{},"202":{}},"component":{}}],["thursday",{"_index":3497,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["ti",{"_index":6089,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["tick",{"_index":391,"title":{},"name":{},"text":{"8":{},"29":{},"74":{},"95":{},"142":{},"163":{}},"component":{}}],["tier",{"_index":655,"title":{},"name":{},"text":{"18":{},"19":{},"32":{},"84":{},"85":{},"98":{},"152":{},"153":{},"166":{}},"component":{}}],["tiger",{"_index":814,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["tile",{"_index":3003,"title":{},"name":{},"text":{"32":{},"40":{},"56":{},"59":{},"98":{},"107":{},"123":{},"127":{},"166":{},"175":{},"191":{},"195":{}},"component":{}}],["tileaccordion.j",{"_index":2835,"title":{},"name":{},"text":{"26":{},"27":{},"59":{},"127":{},"195":{}},"component":{}}],["tilefilt",{"_index":2843,"title":{},"name":{},"text":{"26":{}},"component":{}}],["tilegrid",{"_index":5133,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["tilegrid.createtextfilt",{"_index":5134,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["tilegrid.j",{"_index":2834,"title":{},"name":{},"text":{"26":{},"27":{},"59":{},"127":{},"195":{}},"component":{}}],["tilegrid.menutypes.emptyspac",{"_index":6440,"title":{},"name":{},"text":{"195":{}},"component":{}}],["tilegrid.updatetextfiltertext",{"_index":5136,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["time",{"_index":623,"title":{"160-9":{}},"name":{},"text":{"17":{},"18":{},"21":{},"23":{},"24":{},"26":{},"27":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"44":{},"46":{},"48":{},"51":{},"55":{},"56":{},"58":{},"59":{},"60":{},"63":{},"64":{},"83":{},"85":{},"87":{},"89":{},"90":{},"93":{},"99":{},"101":{},"102":{},"104":{},"105":{},"106":{},"107":{},"109":{},"113":{},"115":{},"118":{},"122":{},"123":{},"126":{},"127":{},"128":{},"131":{},"132":{},"151":{},"153":{},"155":{},"157":{},"158":{},"167":{},"169":{},"170":{},"172":{},"173":{},"174":{},"175":{},"179":{},"181":{},"183":{},"186":{},"190":{},"191":{},"194":{},"195":{},"196":{},"199":{},"200":{}},"component":{}}],["timedouterror",{"_index":3337,"title":{"38-12":{},"105-12":{},"173-12":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["timeout",{"_index":3316,"title":{},"name":{},"text":{"37":{},"39":{},"40":{},"44":{},"61":{},"63":{},"104":{},"106":{},"107":{},"109":{},"129":{},"132":{},"160":{},"169":{},"174":{},"175":{},"179":{},"197":{},"200":{}},"component":{}}],["timernam",{"_index":3804,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["timeunit.day",{"_index":3491,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["timeunit.minut",{"_index":3606,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["timeunit.second",{"_index":3463,"title":{},"name":{},"text":{"39":{},"63":{},"106":{},"132":{},"174":{},"200":{}},"component":{}}],["timezon",{"_index":5647,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["tini",{"_index":5048,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["tipp",{"_index":4883,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["titl",{"_index":448,"title":{},"name":{},"text":{"14":{},"17":{},"21":{},"22":{},"23":{},"24":{},"26":{},"29":{},"35":{},"47":{},"53":{},"56":{},"60":{},"80":{},"83":{},"87":{},"88":{},"89":{},"90":{},"95":{},"102":{},"114":{},"120":{},"123":{},"128":{},"148":{},"151":{},"155":{},"156":{},"157":{},"158":{},"163":{},"167":{},"182":{},"188":{},"191":{},"196":{}},"component":{}}],["tl",{"_index":819,"title":{},"name":{},"text":{"19":{},"63":{},"84":{},"132":{},"152":{},"200":{}},"component":{}}],["tlsv1.1",{"_index":4367,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["tlsv1.2",{"_index":4368,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["to",{"_index":64,"title":{"25":{},"91":{},"159":{}},"name":{"25":{},"91":{},"159":{}},"text":{"1":{},"67":{},"135":{}},"component":{}}],["today",{"_index":4431,"title":{},"name":{},"text":{"45":{},"112":{},"180":{}},"component":{}}],["todo",{"_index":3323,"title":{},"name":{},"text":{"37":{},"104":{},"169":{}},"component":{}}],["tofilt",{"_index":3544,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["togeth",{"_index":2737,"title":{},"name":{},"text":{"26":{},"40":{},"43":{},"46":{},"48":{},"61":{},"62":{},"66":{},"92":{},"107":{},"110":{},"113":{},"115":{},"129":{},"130":{},"134":{},"175":{},"178":{},"181":{},"183":{},"197":{},"198":{},"202":{}},"component":{}}],["toggl",{"_index":1144,"title":{"27-9":{}},"name":{},"text":{"22":{},"27":{},"36":{},"60":{},"88":{},"103":{},"128":{},"156":{},"168":{},"196":{}},"component":{}}],["toggleabl",{"_index":2911,"title":{},"name":{},"text":{"27":{}},"component":{}}],["tohaveclonedwidgetproperti",{"_index":6192,"title":{},"name":{},"text":{"92":{}},"component":{}}],["token",{"_index":2152,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["tolowercase(",{"_index":2790,"title":{},"name":{},"text":{"26":{}},"component":{}}],["tomcat",{"_index":52,"title":{"19":{},"84":{},"152":{},"19-5":{},"19-6":{},"19-9":{},"84-5":{},"84-6":{},"84-9":{},"152-5":{},"152-6":{},"152-9":{}},"name":{"19":{},"84":{},"152":{}},"text":{"1":{},"19":{},"32":{},"40":{},"63":{},"67":{},"84":{},"98":{},"107":{},"132":{},"135":{},"152":{},"166":{},"175":{},"200":{}},"component":{}}],["tomcat_localhost",{"_index":725,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["tomcat_localhost.d",{"_index":744,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["tomcat_localhost.jk",{"_index":727,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["tomcats’",{"_index":875,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["tomcat’",{"_index":720,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["tool",{"_index":118,"title":{"3-1":{},"26-5":{},"29-1":{},"29-24":{},"31-1":{},"52-4":{},"63-14":{},"63-15":{},"69-1":{},"92-5":{},"93-13":{},"95-1":{},"95-24":{},"97-1":{},"119-4":{},"132-14":{},"132-15":{},"137-1":{},"160-5":{},"163-1":{},"163-24":{},"165-1":{},"187-4":{},"200-14":{},"200-15":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"16":{},"20":{},"21":{},"23":{},"24":{},"29":{},"31":{},"32":{},"39":{},"46":{},"52":{},"63":{},"68":{},"69":{},"70":{},"71":{},"72":{},"82":{},"86":{},"87":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"106":{},"113":{},"119":{},"124":{},"132":{},"136":{},"137":{},"138":{},"139":{},"140":{},"150":{},"154":{},"155":{},"157":{},"158":{},"163":{},"165":{},"166":{},"174":{},"181":{},"187":{},"193":{},"200":{}},"component":{}}],["tooltip",{"_index":2450,"title":{"26-34":{},"93-21":{}},"name":{},"text":{"26":{},"27":{},"33":{},"35":{},"53":{},"59":{},"60":{},"65":{},"93":{},"99":{},"102":{},"120":{},"127":{},"128":{},"133":{},"167":{},"170":{},"188":{},"195":{},"196":{},"201":{}},"component":{}}],["tooltipsupportoptions.$par",{"_index":6196,"title":{},"name":{},"text":{"92":{}},"component":{}}],["tooltiptext",{"_index":3139,"title":{},"name":{},"text":{"34":{},"59":{},"101":{},"127":{},"172":{},"195":{}},"component":{}}],["top",{"_index":210,"title":{},"name":{},"text":{"4":{},"16":{},"20":{},"21":{},"23":{},"24":{},"26":{},"29":{},"42":{},"46":{},"47":{},"48":{},"53":{},"56":{},"59":{},"60":{},"63":{},"64":{},"71":{},"82":{},"86":{},"87":{},"89":{},"90":{},"93":{},"95":{},"108":{},"113":{},"114":{},"115":{},"120":{},"123":{},"127":{},"128":{},"131":{},"132":{},"139":{},"150":{},"154":{},"155":{},"157":{},"158":{},"163":{},"177":{},"181":{},"182":{},"183":{},"188":{},"191":{},"195":{},"196":{},"199":{},"200":{}},"component":{}}],["topic",{"_index":66,"title":{},"name":{},"text":{"1":{},"19":{},"23":{},"27":{},"32":{},"40":{},"84":{},"90":{},"98":{},"107":{},"135":{},"152":{},"158":{},"166":{},"175":{}},"component":{}}],["topk8",{"_index":2522,"title":{},"name":{},"text":{"26":{}},"component":{}}],["total",{"_index":3508,"title":{},"name":{},"text":{"39":{},"40":{},"54":{},"106":{},"107":{},"121":{},"174":{},"175":{},"189":{}},"component":{}}],["touch",{"_index":4742,"title":{"53-1":{},"120-1":{},"188-1":{}},"name":{},"text":{"50":{},"53":{},"59":{},"117":{},"120":{},"127":{},"185":{},"188":{},"195":{}},"component":{}}],["touppercase(",{"_index":2789,"title":{},"name":{},"text":{"26":{}},"component":{}}],["toward",{"_index":5181,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["trace",{"_index":4506,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["transact",{"_index":3365,"title":{"61-8":{},"129-8":{},"197-8":{}},"name":{},"text":{"38":{},"40":{},"41":{},"61":{},"63":{},"66":{},"105":{},"107":{},"111":{},"129":{},"132":{},"134":{},"173":{},"175":{},"176":{},"197":{},"200":{},"202":{}},"component":{}}],["transactionrequiredexcept",{"_index":3333,"title":{"38-7":{},"105-7":{},"173-7":{}},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["transactionscop",{"_index":4173,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["transactionscope.mandatori",{"_index":4177,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["transactionscope.requir",{"_index":4176,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["transactionscope.requires_new",{"_index":4175,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["transfer",{"_index":1663,"title":{},"name":{},"text":{"23":{},"47":{},"61":{},"64":{},"90":{},"114":{},"129":{},"131":{},"158":{},"182":{},"197":{},"199":{}},"component":{}}],["transform",{"_index":1075,"title":{"53-4":{},"53-8":{},"53-9":{},"120-4":{},"120-8":{},"120-9":{},"188-4":{},"188-8":{},"188-9":{}},"name":{},"text":{"22":{},"23":{},"36":{},"53":{},"59":{},"66":{},"88":{},"90":{},"103":{},"120":{},"127":{},"134":{},"156":{},"158":{},"160":{},"168":{},"188":{},"195":{},"202":{}},"component":{}}],["transformcustomexception(runtimeexcept",{"_index":6048,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["transformexception(runtimeexcept",{"_index":6021,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["transit",{"_index":1058,"title":{},"name":{},"text":{"22":{},"27":{},"36":{},"39":{},"40":{},"88":{},"103":{},"106":{},"107":{},"156":{},"168":{},"174":{},"175":{}},"component":{}}],["translat",{"_index":140,"title":{"29-25":{},"38-14":{},"95-25":{},"105-14":{},"163-25":{},"173-14":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"9":{},"11":{},"23":{},"26":{},"27":{},"29":{},"31":{},"38":{},"39":{},"40":{},"57":{},"69":{},"70":{},"71":{},"72":{},"75":{},"77":{},"90":{},"95":{},"97":{},"105":{},"106":{},"107":{},"125":{},"137":{},"138":{},"139":{},"140":{},"143":{},"145":{},"158":{},"163":{},"165":{},"173":{},"174":{},"175":{},"192":{}},"component":{}}],["transmiss",{"_index":4243,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["transmit",{"_index":4244,"title":{},"name":{},"text":{"43":{},"63":{},"110":{},"132":{},"178":{},"200":{}},"component":{}}],["transpar",{"_index":4810,"title":{},"name":{},"text":{"52":{},"59":{},"66":{},"119":{},"127":{},"134":{},"187":{},"195":{},"202":{}},"component":{}}],["transpil",{"_index":1061,"title":{"46-6":{},"113-6":{},"181-6":{}},"name":{},"text":{"22":{},"46":{},"88":{},"93":{},"113":{},"124":{},"156":{},"181":{},"193":{}},"component":{}}],["transport",{"_index":3361,"title":{},"name":{},"text":{"38":{},"40":{},"43":{},"63":{},"66":{},"105":{},"107":{},"110":{},"132":{},"134":{},"173":{},"175":{},"178":{},"200":{},"202":{}},"component":{}}],["treat",{"_index":6405,"title":{},"name":{},"text":{"127":{},"195":{}},"component":{}}],["tree",{"_index":1204,"title":{},"name":{},"text":{"23":{},"26":{},"27":{},"29":{},"32":{},"60":{},"62":{},"64":{},"65":{},"90":{},"93":{},"95":{},"98":{},"128":{},"130":{},"131":{},"133":{},"158":{},"163":{},"166":{},"195":{},"196":{},"198":{},"199":{},"201":{}},"component":{}}],["tree.addfilter(filt",{"_index":2846,"title":{},"name":{},"text":{"26":{}},"component":{}}],["tree.filt",{"_index":2847,"title":{},"name":{},"text":{"26":{}},"component":{}}],["tree.j",{"_index":2833,"title":{},"name":{},"text":{"26":{},"27":{},"59":{},"127":{},"195":{}},"component":{}}],["tree.menutypes.emptyspac",{"_index":6441,"title":{},"name":{},"text":{"195":{}},"component":{}}],["tree/tabl",{"_index":2654,"title":{},"name":{},"text":{"26":{}},"component":{}}],["treebox",{"_index":2950,"title":{},"name":{},"text":{"27":{},"62":{},"130":{},"198":{}},"component":{}}],["treefield",{"_index":2954,"title":{},"name":{},"text":{"27":{}},"component":{}}],["tri",{"_index":376,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"18":{},"20":{},"22":{},"23":{},"29":{},"38":{},"40":{},"44":{},"56":{},"59":{},"63":{},"73":{},"74":{},"76":{},"78":{},"79":{},"85":{},"86":{},"88":{},"90":{},"92":{},"93":{},"95":{},"105":{},"107":{},"109":{},"123":{},"124":{},"127":{},"132":{},"141":{},"142":{},"144":{},"146":{},"147":{},"153":{},"154":{},"156":{},"158":{},"163":{},"173":{},"175":{},"179":{},"191":{},"193":{},"195":{},"200":{}},"component":{}}],["trial",{"_index":678,"title":{},"name":{},"text":{"18":{},"21":{},"24":{},"85":{},"87":{},"89":{},"153":{},"155":{},"157":{}},"component":{}}],["triangl",{"_index":1016,"title":{},"name":{},"text":{"21":{},"24":{},"87":{},"89":{},"155":{},"157":{}},"component":{}}],["trick",{"_index":6138,"title":{},"name":{},"text":{"92":{}},"component":{}}],["trigger",{"_index":308,"title":{},"name":{},"text":{"5":{},"16":{},"23":{},"26":{},"29":{},"33":{},"35":{},"39":{},"41":{},"53":{},"60":{},"61":{},"62":{},"63":{},"70":{},"82":{},"90":{},"93":{},"95":{},"99":{},"102":{},"106":{},"111":{},"120":{},"128":{},"129":{},"130":{},"132":{},"138":{},"150":{},"158":{},"163":{},"167":{},"170":{},"174":{},"176":{},"188":{},"196":{},"197":{},"198":{},"200":{}},"component":{}}],["trigger('click",{"_index":5260,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["trigger’",{"_index":3521,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["trim(",{"_index":2792,"title":{},"name":{},"text":{"26":{}},"component":{}}],["trim().tolowercas",{"_index":5125,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["trip",{"_index":1651,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["tristat",{"_index":4845,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["tristate.fals",{"_index":4847,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["troubl",{"_index":4828,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["true",{"_index":764,"title":{},"name":{},"text":{"19":{},"23":{},"26":{},"33":{},"35":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{},"48":{},"53":{},"54":{},"59":{},"60":{},"63":{},"84":{},"90":{},"92":{},"93":{},"99":{},"102":{},"105":{},"106":{},"107":{},"109":{},"110":{},"113":{},"115":{},"120":{},"121":{},"127":{},"128":{},"132":{},"152":{},"158":{},"167":{},"170":{},"173":{},"174":{},"175":{},"178":{},"179":{},"181":{},"183":{},"188":{},"189":{},"195":{},"196":{},"200":{}},"component":{}}],["truetyp",{"_index":4825,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["truncat",{"_index":2827,"title":{},"name":{},"text":{"26":{},"63":{},"132":{},"200":{}},"component":{}}],["trust",{"_index":810,"title":{},"name":{},"text":{"19":{},"40":{},"84":{},"107":{},"152":{},"175":{}},"component":{}}],["trustcacert",{"_index":749,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["trustedmessageorigin",{"_index":2939,"title":{},"name":{},"text":{"27":{}},"component":{}}],["trustworthi",{"_index":3910,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["ts",{"_index":6293,"title":{},"name":{},"text":{"93":{},"124":{},"193":{}},"component":{}}],["tsconfig.json",{"_index":6286,"title":{},"name":{},"text":{"93":{},"113":{},"124":{},"181":{},"193":{}},"component":{}}],["ttf",{"_index":4822,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["ttl",{"_index":3913,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["tuesday",{"_index":3495,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["tuningutility.starttim",{"_index":3806,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["tuningutility.stoptimer(timernam",{"_index":3810,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["tunnel",{"_index":3745,"title":{},"name":{},"text":{"40":{},"66":{},"107":{},"134":{},"175":{},"202":{}},"component":{}}],["tunneltoserv",{"_index":2379,"title":{"40-7":{},"107-7":{},"175-7":{}},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["tupl",{"_index":3905,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["turn",{"_index":2156,"title":{},"name":{},"text":{"23":{},"26":{},"27":{},"53":{},"59":{},"63":{},"90":{},"93":{},"120":{},"124":{},"127":{},"132":{},"158":{},"188":{},"193":{},"195":{},"200":{}},"component":{}}],["tutori",{"_index":43,"title":{"23":{},"90":{},"158":{},"17-1":{},"23-2":{},"83-1":{},"90-2":{},"151-1":{},"158-2":{}},"name":{"15":{},"23":{},"81":{},"90":{},"149":{},"158":{}},"text":{"1":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"29":{},"67":{},"81":{},"82":{},"83":{},"84":{},"85":{},"87":{},"88":{},"89":{},"90":{},"95":{},"135":{},"149":{},"150":{},"151":{},"152":{},"153":{},"155":{},"156":{},"157":{},"158":{},"163":{}},"component":{}}],["tutorial.[10",{"_index":850,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["tutorial_existingdemo",{"_index":499,"title":{},"name":{"16":{},"82":{},"150":{}},"text":{},"component":{}}],["tutorial_helloworld",{"_index":590,"title":{},"name":{"17":{},"83":{},"151":{}},"text":{},"component":{}}],["twice",{"_index":1437,"title":{},"name":{},"text":{"23":{},"66":{},"90":{},"134":{},"158":{},"202":{}},"component":{}}],["two",{"_index":360,"title":{},"name":{},"text":{"6":{},"16":{},"17":{},"19":{},"22":{},"23":{},"24":{},"26":{},"29":{},"36":{},"39":{},"40":{},"41":{},"46":{},"48":{},"50":{},"53":{},"56":{},"59":{},"60":{},"62":{},"63":{},"64":{},"66":{},"72":{},"82":{},"83":{},"84":{},"88":{},"89":{},"90":{},"92":{},"95":{},"103":{},"106":{},"107":{},"111":{},"113":{},"115":{},"117":{},"120":{},"123":{},"127":{},"128":{},"130":{},"131":{},"132":{},"134":{},"140":{},"150":{},"151":{},"152":{},"156":{},"157":{},"158":{},"163":{},"168":{},"174":{},"175":{},"176":{},"181":{},"183":{},"185":{},"188":{},"191":{},"195":{},"196":{},"198":{},"199":{},"200":{},"202":{}},"component":{}}],["two(\"two",{"_index":5903,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["type",{"_index":310,"title":{"62":{},"130":{},"198":{},"23-28":{},"26-15":{},"62-3":{},"63-27":{},"64-3":{},"64-4":{},"64-26":{},"65-4":{},"90-28":{},"92-25":{},"93-6":{},"93-7":{},"93-8":{},"93-12":{},"93-19":{},"130-3":{},"131-3":{},"131-4":{},"131-26":{},"132-27":{},"133-4":{},"158-28":{},"198-3":{},"199-3":{},"199-4":{},"199-26":{},"200-27":{},"201-4":{}},"name":{"7":{},"62":{},"73":{},"130":{},"141":{},"198":{}},"text":{"5":{},"6":{},"7":{},"14":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"33":{},"35":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"46":{},"48":{},"53":{},"54":{},"55":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"70":{},"72":{},"73":{},"80":{},"83":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"99":{},"100":{},"102":{},"104":{},"105":{},"106":{},"107":{},"108":{},"110":{},"113":{},"115":{},"120":{},"121":{},"122":{},"124":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"138":{},"140":{},"141":{},"148":{},"151":{},"152":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"167":{},"169":{},"170":{},"171":{},"173":{},"174":{},"175":{},"177":{},"178":{},"181":{},"183":{},"188":{},"189":{},"190":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{}},"component":{}}],["type=lookupbykey",{"_index":5067,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["type=lookupbyrec",{"_index":5068,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["type=lookupbytext",{"_index":5066,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["typenam",{"_index":2445,"title":{"26-31":{}},"name":{},"text":{"26":{},"64":{},"131":{},"199":{}},"component":{}}],["typename(\"exampleentity1",{"_index":5789,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["typename(\"exampleentity2",{"_index":5797,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["typename(\"exampleentityex",{"_index":5833,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["typename(\"examplelookuprow",{"_index":2944,"title":{},"name":{},"text":{"27":{}},"component":{}}],["typename(\"examplemapent",{"_index":5859,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["typename(\"lorem.exampleent",{"_index":5706,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["typescript",{"_index":6146,"title":{"124":{},"193":{},"93-5":{},"93-17":{},"93-18":{},"124-1":{},"124-2":{},"193-1":{},"193-2":{}},"name":{"124":{},"193":{}},"text":{"92":{},"93":{},"98":{},"113":{},"124":{},"128":{},"181":{},"193":{},"196":{}},"component":{}}],["typevers",{"_index":2430,"title":{"26-15":{}},"name":{},"text":{"26":{},"64":{},"131":{},"199":{}},"component":{}}],["typeversion(lorem_1_2_0.class",{"_index":5707,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["typeversion`annot",{"_index":5740,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["typic",{"_index":558,"title":{},"name":{},"text":{"16":{},"19":{},"20":{},"22":{},"23":{},"26":{},"32":{},"38":{},"39":{},"40":{},"41":{},"43":{},"46":{},"49":{},"50":{},"55":{},"57":{},"58":{},"60":{},"61":{},"63":{},"65":{},"66":{},"82":{},"84":{},"86":{},"88":{},"90":{},"93":{},"98":{},"105":{},"106":{},"107":{},"110":{},"111":{},"113":{},"116":{},"117":{},"122":{},"125":{},"126":{},"128":{},"129":{},"132":{},"133":{},"134":{},"150":{},"152":{},"154":{},"156":{},"158":{},"166":{},"173":{},"174":{},"175":{},"176":{},"178":{},"181":{},"184":{},"185":{},"190":{},"192":{},"194":{},"196":{},"197":{},"200":{},"201":{},"202":{}},"component":{}}],["u+e000",{"_index":4813,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["u+f8ff",{"_index":4814,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["u00df",{"_index":5002,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["u00e0",{"_index":5000,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["u00e7",{"_index":5001,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["ubuntu",{"_index":849,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["ue023",{"_index":2673,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue024",{"_index":2676,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue040",{"_index":2680,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue044",{"_index":2682,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue051",{"_index":2688,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue052",{"_index":2690,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue053",{"_index":2692,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue054",{"_index":2694,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue055",{"_index":2696,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue056",{"_index":2698,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue057",{"_index":2700,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue058",{"_index":2702,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue059",{"_index":2674,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ue109",{"_index":5281,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["uf095",{"_index":4784,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["uf0c9",{"_index":2663,"title":{},"name":{},"text":{"26":{}},"component":{}}],["uf0ca",{"_index":2665,"title":{},"name":{},"text":{"26":{}},"component":{}}],["uf0cb",{"_index":2667,"title":{},"name":{},"text":{"26":{}},"component":{}}],["uf100",{"_index":2684,"title":{},"name":{},"text":{"26":{}},"component":{}}],["uf101",{"_index":2685,"title":{},"name":{},"text":{"26":{}},"component":{}}],["uf102",{"_index":2686,"title":{},"name":{},"text":{"26":{}},"component":{}}],["uf103",{"_index":2687,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ugli",{"_index":266,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["uhhhh",{"_index":5004,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["ui",{"_index":484,"title":{"27-3":{},"43-13":{},"110-13":{},"178-13":{}},"name":{},"text":{"14":{},"18":{},"23":{},"26":{},"29":{},"32":{},"37":{},"40":{},"41":{},"43":{},"45":{},"46":{},"47":{},"51":{},"53":{},"56":{},"60":{},"61":{},"65":{},"80":{},"85":{},"90":{},"95":{},"98":{},"104":{},"107":{},"110":{},"111":{},"112":{},"113":{},"114":{},"118":{},"120":{},"123":{},"128":{},"129":{},"133":{},"148":{},"153":{},"158":{},"163":{},"166":{},"169":{},"175":{},"176":{},"178":{},"180":{},"181":{},"182":{},"186":{},"188":{},"191":{},"196":{},"197":{},"201":{}},"component":{}}],["ui.browserinternetexplor",{"_index":2496,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ui.filesizelimit",{"_index":2884,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ui.html",{"_index":3017,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["ui.launch",{"_index":493,"title":{},"name":{},"text":{"14":{},"29":{},"37":{},"80":{},"95":{},"104":{},"148":{},"163":{},"169":{}},"component":{}}],["uiservlet",{"_index":4232,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["uiservletfilt",{"_index":485,"title":{},"name":{},"text":{"14":{},"29":{},"80":{},"95":{},"148":{},"163":{}},"component":{}}],["uithemehelp",{"_index":4974,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["ul",{"_index":2695,"title":{},"name":{},"text":{"26":{}},"component":{}}],["ultim",{"_index":677,"title":{},"name":{},"text":{"18":{},"21":{},"24":{},"85":{},"87":{},"89":{},"153":{},"155":{},"157":{}},"component":{}}],["un",{"_index":1365,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["unauthor",{"_index":4242,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["unavail",{"_index":6432,"title":{},"name":{},"text":{"160":{}},"component":{}}],["unblock",{"_index":3620,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["unbound",{"_index":3630,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["uncaught",{"_index":3413,"title":{"39-25":{},"106-25":{},"174-25":{}},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["unchang",{"_index":2809,"title":{},"name":{},"text":{"26":{}},"component":{}}],["uncheck",{"_index":451,"title":{},"name":{},"text":{"14":{},"29":{},"38":{},"80":{},"95":{},"105":{},"148":{},"163":{},"173":{}},"component":{}}],["uncom",{"_index":737,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["uncommit",{"_index":6141,"title":{},"name":{},"text":{"92":{}},"component":{}}],["undeclaredthrowableexcept",{"_index":3378,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["undefin",{"_index":2059,"title":{},"name":{},"text":{"23":{},"40":{},"90":{},"107":{},"158":{},"175":{}},"component":{}}],["under",{"_index":95,"title":{},"name":{},"text":{"1":{},"16":{},"23":{},"26":{},"37":{},"40":{},"46":{},"67":{},"82":{},"90":{},"93":{},"104":{},"107":{},"113":{},"128":{},"135":{},"150":{},"158":{},"169":{},"175":{},"181":{},"196":{}},"component":{}}],["underli",{"_index":154,"title":{},"name":{},"text":{"3":{},"31":{},"66":{},"69":{},"97":{},"134":{},"137":{},"165":{},"202":{}},"component":{}}],["underlin",{"_index":2691,"title":{},"name":{},"text":{"26":{}},"component":{}}],["unders",{"_index":4000,"title":{},"name":{},"text":{"40":{},"63":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["underscor",{"_index":3830,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["understand",{"_index":150,"title":{"22-6":{},"88-6":{},"156-6":{}},"name":{},"text":{"3":{},"19":{},"31":{},"32":{},"56":{},"60":{},"63":{},"69":{},"84":{},"93":{},"97":{},"98":{},"123":{},"124":{},"128":{},"132":{},"137":{},"152":{},"165":{},"166":{},"191":{},"193":{},"196":{},"200":{}},"component":{}}],["understood",{"_index":3579,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["undertak",{"_index":2978,"title":{},"name":{},"text":{"29":{},"95":{},"163":{}},"component":{}}],["unencrypt",{"_index":4245,"title":{},"name":{},"text":{"43":{},"63":{},"110":{},"132":{},"178":{},"200":{}},"component":{}}],["unexpect",{"_index":4975,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["unfortun",{"_index":676,"title":{},"name":{},"text":{"18":{},"43":{},"63":{},"85":{},"92":{},"110":{},"132":{},"153":{},"178":{},"200":{}},"component":{}}],["unhandl",{"_index":3458,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["unicod",{"_index":4811,"title":{},"name":{},"text":{"52":{},"57":{},"119":{},"125":{},"187":{},"192":{}},"component":{}}],["uniform",{"_index":4728,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["uniqu",{"_index":1394,"title":{},"name":{},"text":{"23":{},"26":{},"41":{},"48":{},"56":{},"59":{},"63":{},"64":{},"90":{},"111":{},"115":{},"123":{},"127":{},"131":{},"132":{},"158":{},"176":{},"183":{},"191":{},"195":{},"199":{},"200":{}},"component":{}}],["unit",{"_index":2881,"title":{"64-27":{},"131-27":{},"199-27":{}},"name":{},"text":{"26":{},"29":{},"46":{},"64":{},"95":{},"113":{},"131":{},"163":{},"181":{},"199":{}},"component":{}}],["unix",{"_index":544,"title":{},"name":{},"text":{"16":{},"19":{},"39":{},"46":{},"82":{},"84":{},"106":{},"113":{},"150":{},"152":{},"174":{},"181":{}},"component":{}}],["unknown",{"_index":3871,"title":{"64-20":{},"131-20":{},"199-20":{}},"name":{},"text":{"40":{},"64":{},"107":{},"131":{},"175":{},"199":{}},"component":{}}],["unless",{"_index":1089,"title":{},"name":{},"text":{"22":{},"39":{},"46":{},"50":{},"53":{},"58":{},"60":{},"88":{},"92":{},"106":{},"113":{},"117":{},"120":{},"124":{},"126":{},"128":{},"156":{},"174":{},"181":{},"185":{},"188":{},"193":{},"194":{},"196":{}},"component":{}}],["unlik",{"_index":3369,"title":{},"name":{},"text":{"38":{},"43":{},"63":{},"105":{},"110":{},"132":{},"173":{},"178":{},"200":{}},"component":{}}],["unlimit",{"_index":3746,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["unnecessari",{"_index":1177,"title":{"23-5":{},"90-5":{},"158-5":{}},"name":{},"text":{"23":{},"40":{},"51":{},"90":{},"107":{},"118":{},"158":{},"175":{},"186":{}},"component":{}}],["unnecessarili",{"_index":3722,"title":{},"name":{},"text":{"40":{},"66":{},"107":{},"134":{},"175":{},"202":{}},"component":{}}],["unpack",{"_index":804,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["unpkg",{"_index":923,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["unregist",{"_index":3729,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["unresolv",{"_index":6140,"title":{},"name":{},"text":{"92":{}},"component":{}}],["unsaf",{"_index":4220,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["unsav",{"_index":4740,"title":{},"name":{},"text":{"50":{},"117":{},"185":{}},"component":{}}],["unselect",{"_index":6142,"title":{},"name":{},"text":{"92":{}},"component":{}}],["unset",{"_index":5608,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["unsuccess",{"_index":6008,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["unsupport",{"_index":2493,"title":{},"name":{},"text":{"26":{}},"component":{}}],["until",{"_index":997,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"26":{},"27":{},"39":{},"40":{},"41":{},"43":{},"44":{},"61":{},"63":{},"66":{},"87":{},"89":{},"90":{},"93":{},"106":{},"107":{},"109":{},"110":{},"111":{},"129":{},"132":{},"134":{},"155":{},"157":{},"158":{},"174":{},"175":{},"176":{},"178":{},"179":{},"197":{},"200":{},"202":{}},"component":{}}],["untouch",{"_index":4739,"title":{},"name":{},"text":{"50":{},"92":{},"117":{},"185":{}},"component":{}}],["unus",{"_index":3024,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["unwant",{"_index":4855,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["unwrap",{"_index":3376,"title":{},"name":{},"text":{"38":{},"92":{},"105":{},"173":{}},"component":{}}],["up",{"_index":798,"title":{"23-3":{},"27-3":{},"37-4":{},"90-3":{},"92-22":{},"104-4":{},"158-3":{},"169-4":{}},"name":{},"text":{"19":{},"21":{},"23":{},"24":{},"26":{},"27":{},"29":{},"37":{},"38":{},"40":{},"42":{},"44":{},"46":{},"53":{},"56":{},"60":{},"61":{},"63":{},"64":{},"66":{},"84":{},"87":{},"89":{},"90":{},"92":{},"93":{},"95":{},"104":{},"105":{},"107":{},"108":{},"109":{},"113":{},"120":{},"123":{},"124":{},"128":{},"129":{},"131":{},"132":{},"134":{},"152":{},"155":{},"157":{},"158":{},"163":{},"169":{},"173":{},"175":{},"177":{},"179":{},"181":{},"188":{},"191":{},"193":{},"196":{},"197":{},"199":{},"200":{},"202":{}},"component":{}}],["upcom",{"_index":2856,"title":{},"name":{},"text":{"26":{},"160":{},"161":{}},"component":{}}],["updat",{"_index":394,"title":{"19-3":{},"26-10":{},"26-11":{},"28-4":{},"61-15":{},"84-3":{},"92-9":{},"94-4":{},"129-15":{},"152-3":{},"162-4":{},"197-15":{}},"name":{},"text":{"8":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"46":{},"52":{},"59":{},"60":{},"61":{},"63":{},"66":{},"74":{},"84":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"113":{},"119":{},"124":{},"127":{},"128":{},"129":{},"132":{},"134":{},"142":{},"152":{},"155":{},"156":{},"157":{},"158":{},"160":{},"162":{},"163":{},"181":{},"187":{},"193":{},"195":{},"196":{},"197":{},"200":{},"202":{}},"component":{}}],["update/replac",{"_index":5985,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["updatecompanypermiss",{"_index":4302,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["updatecompanypermission(companyid",{"_index":4328,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["updatecompanypermission(uuid",{"_index":4306,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["updateexampleentity(str",{"_index":6041,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["updatefieldbackgroundcolor",{"_index":3143,"title":{},"name":{},"text":{"34":{},"101":{},"172":{}},"component":{}}],["updatefilteredelements(result",{"_index":5172,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["updateimag",{"_index":2133,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["updateimage((str",{"_index":1890,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["updateimage(str",{"_index":1896,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["updatemypermiss",{"_index":399,"title":{},"name":{},"text":{"8":{},"29":{},"74":{},"95":{},"142":{},"163":{}},"component":{}}],["updateorganizationpermiss",{"_index":2322,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["updatepersonpermiss",{"_index":2054,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["upgrad",{"_index":3,"title":{"1-3":{},"67-3":{},"135-3":{}},"name":{},"text":{"1":{},"26":{},"27":{},"67":{},"93":{},"135":{},"161":{}},"component":{}}],["upload",{"_index":2459,"title":{"26-41":{}},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["upload.wikimedia.org",{"_index":1907,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["upon",{"_index":3355,"title":{},"name":{},"text":{"38":{},"39":{},"40":{},"41":{},"42":{},"61":{},"63":{},"105":{},"106":{},"107":{},"108":{},"111":{},"129":{},"132":{},"173":{},"174":{},"175":{},"176":{},"177":{},"197":{},"200":{}},"component":{}}],["upper",{"_index":1692,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["upper(:text",{"_index":2356,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["upper(nam",{"_index":2355,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["upper(tablenam",{"_index":1571,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["uppercas",{"_index":2786,"title":{},"name":{},"text":{"26":{},"40":{},"107":{},"175":{}},"component":{}}],["uppercasefirstlett",{"_index":2778,"title":{},"name":{},"text":{"26":{}},"component":{}}],["uri",{"_index":3958,"title":{},"name":{},"text":{"40":{},"66":{},"107":{},"134":{},"175":{},"202":{}},"component":{}}],["url",{"_index":551,"title":{"23-36":{},"90-36":{},"158-36":{}},"name":{},"text":{"16":{},"22":{},"23":{},"37":{},"40":{},"46":{},"52":{},"60":{},"63":{},"66":{},"82":{},"88":{},"90":{},"104":{},"107":{},"113":{},"119":{},"128":{},"132":{},"134":{},"150":{},"156":{},"158":{},"169":{},"175":{},"181":{},"187":{},"196":{},"200":{},"202":{}},"component":{}}],["url('fonts/awesomeicons.woff",{"_index":4798,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["urlbox",{"_index":2188,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["urlfield",{"_index":2172,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["urlhint",{"_index":4138,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["us",{"_index":27,"title":{"37":{},"104":{},"169":{},"16-6":{},"23-43":{},"33-6":{},"35-6":{},"37-5":{},"43-15":{},"52-2":{},"57-3":{},"60-4":{},"62-4":{},"82-6":{},"90-43":{},"99-6":{},"102-6":{},"104-5":{},"110-15":{},"119-2":{},"125-3":{},"128-4":{},"130-4":{},"150-6":{},"158-43":{},"167-6":{},"169-5":{},"170-6":{},"178-15":{},"187-2":{},"192-3":{},"196-4":{},"198-4":{}},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"32":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"160":{},"161":{},"162":{},"163":{},"166":{},"167":{},"168":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["us,d",{"_index":4129,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["us/docs/web/api/eventsourc",{"_index":4342,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["us/docs/web/css/specif",{"_index":4945,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["us/docs/web/html/element/applet",{"_index":4346,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["us/docs/web/html/element/audio",{"_index":4347,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["us/docs/web/html/element/emb",{"_index":4345,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["us/docs/web/html/element/object",{"_index":4344,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["us/docs/web/html/element/video",{"_index":4348,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["us/docs/web/http/x",{"_index":4331,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["usabl",{"_index":2392,"title":{},"name":{},"text":{"23":{},"27":{},"90":{},"158":{}},"component":{}}],["usag",{"_index":215,"title":{},"name":{},"text":{"4":{},"19":{},"20":{},"23":{},"26":{},"29":{},"38":{},"39":{},"43":{},"44":{},"46":{},"52":{},"53":{},"61":{},"71":{},"84":{},"86":{},"90":{},"92":{},"93":{},"95":{},"105":{},"106":{},"109":{},"110":{},"113":{},"119":{},"120":{},"124":{},"128":{},"129":{},"139":{},"152":{},"154":{},"158":{},"160":{},"163":{},"173":{},"174":{},"178":{},"179":{},"181":{},"187":{},"188":{},"193":{},"196":{},"197":{}},"component":{}}],["useauthent",{"_index":4360,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["used.th",{"_index":5199,"title":{},"name":{},"text":{"60":{}},"component":{}}],["user",{"_index":109,"title":{"2":{},"68":{},"136":{},"53-12":{},"120-12":{},"188-12":{}},"name":{},"text":{"4":{},"9":{},"11":{},"14":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"32":{},"34":{},"38":{},"40":{},"43":{},"46":{},"50":{},"51":{},"53":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"65":{},"66":{},"71":{},"75":{},"77":{},"80":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"93":{},"95":{},"98":{},"101":{},"105":{},"107":{},"110":{},"113":{},"117":{},"118":{},"120":{},"123":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"132":{},"133":{},"134":{},"139":{},"143":{},"145":{},"148":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"166":{},"172":{},"173":{},"175":{},"178":{},"181":{},"185":{},"186":{},"188":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"200":{},"201":{},"202":{}},"component":{}}],["userag",{"_index":4879,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["useragent.get",{"_index":4881,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["useragentutil",{"_index":4882,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["useragentutility.ismobiledevic",{"_index":4868,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["useragentutility.istouchdevic",{"_index":4889,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["userform.class",{"_index":1324,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["userid",{"_index":2018,"title":{},"name":{},"text":{"23":{},"66":{},"90":{},"134":{},"158":{},"202":{}},"component":{}}],["usermenu",{"_index":1275,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["usernam",{"_index":1205,"title":{},"name":{},"text":{"23":{},"40":{},"44":{},"63":{},"90":{},"107":{},"109":{},"132":{},"158":{},"175":{},"179":{},"200":{}},"component":{}}],["username1:base64encodedsalt.base64encodedpasswordhash;username2:base64encodedsalt.base64encodedpasswordhash",{"_index":3904,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["usernametoken",{"_index":5693,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["userprofilemenu",{"_index":1263,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["users.xml",{"_index":799,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["user’",{"_index":4146,"title":{},"name":{},"text":{"41":{},"63":{},"111":{},"132":{},"176":{},"200":{}},"component":{}}],["usesmtp",{"_index":4361,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["usestarttl",{"_index":4363,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["usual",{"_index":3000,"title":{},"name":{},"text":{"32":{},"38":{},"40":{},"43":{},"45":{},"48":{},"62":{},"66":{},"93":{},"98":{},"105":{},"107":{},"110":{},"112":{},"115":{},"130":{},"134":{},"166":{},"173":{},"175":{},"178":{},"180":{},"183":{},"198":{},"202":{}},"component":{}}],["utc",{"_index":5635,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["utcdateadapt",{"_index":5636,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["utcdatetimeadapt",{"_index":5641,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["utctimeadapt",{"_index":5642,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["utf",{"_index":3903,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["util",{"_index":2448,"title":{"26-32":{},"160-8":{}},"name":{},"text":{"26":{},"32":{},"43":{},"46":{},"64":{},"98":{},"110":{},"113":{},"131":{},"166":{},"178":{},"181":{},"199":{}},"component":{}}],["uuid",{"_index":4303,"title":{},"name":{},"text":{"43":{},"64":{},"66":{},"93":{},"110":{},"131":{},"134":{},"178":{},"199":{},"202":{}},"component":{}}],["uuid.randomuuid().tostr",{"_index":5564,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["v",{"_index":601,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"26":{},"83":{},"87":{},"89":{},"151":{},"155":{},"157":{}},"component":{}}],["v16.13.0",{"_index":602,"title":{},"name":{},"text":{"17":{},"21":{},"24":{}},"component":{}}],["v18.12.1",{"_index":6098,"title":{},"name":{},"text":{"83":{},"87":{},"89":{},"151":{},"155":{},"157":{}},"component":{}}],["valid",{"_index":1112,"title":{"23-32":{},"23-33":{},"23-34":{},"40-21":{},"43-5":{},"58-1":{},"58-3":{},"90-32":{},"90-33":{},"90-34":{},"107-21":{},"110-5":{},"126-1":{},"126-3":{},"158-32":{},"158-33":{},"158-34":{},"175-21":{},"178-5":{},"194-1":{},"194-3":{}},"name":{},"text":{"22":{},"23":{},"27":{},"32":{},"40":{},"43":{},"50":{},"58":{},"63":{},"66":{},"88":{},"90":{},"98":{},"107":{},"110":{},"117":{},"126":{},"132":{},"134":{},"156":{},"158":{},"166":{},"175":{},"178":{},"185":{},"194":{},"200":{},"202":{}},"component":{}}],["validateaddressfield",{"_index":2095,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["validatevalu",{"_index":5014,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["validityfrom",{"_index":5941,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["validityto",{"_index":5942,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["valu",{"_index":205,"title":{"58":{},"126":{},"194":{},"7-2":{},"8-2":{},"10-2":{},"12-2":{},"13-2":{},"14-2":{},"29-12":{},"29-15":{},"29-18":{},"64-18":{},"73-2":{},"74-2":{},"76-2":{},"78-2":{},"79-2":{},"80-2":{},"93-8":{},"95-12":{},"95-15":{},"95-18":{},"131-18":{},"141-2":{},"142-2":{},"144-2":{},"146-2":{},"147-2":{},"148-2":{},"163-12":{},"163-15":{},"163-18":{},"199-18":{}},"name":{"58":{},"126":{},"194":{}},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"17":{},"21":{},"23":{},"24":{},"26":{},"29":{},"33":{},"35":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"47":{},"48":{},"50":{},"53":{},"54":{},"56":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"71":{},"73":{},"74":{},"76":{},"78":{},"79":{},"80":{},"83":{},"87":{},"89":{},"90":{},"92":{},"93":{},"95":{},"99":{},"102":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"114":{},"115":{},"117":{},"120":{},"121":{},"123":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"139":{},"141":{},"142":{},"144":{},"146":{},"147":{},"148":{},"151":{},"155":{},"157":{},"158":{},"163":{},"167":{},"170":{},"173":{},"174":{},"175":{},"176":{},"178":{},"179":{},"182":{},"183":{},"185":{},"188":{},"189":{},"191":{},"194":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["value.gettyp",{"_index":5893,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["valuefield",{"_index":6257,"title":{"93-12":{},"127-5":{},"195-5":{}},"name":{},"text":{"93":{},"127":{},"195":{}},"component":{}}],["valuefield.menutypes.notnul",{"_index":6404,"title":{},"name":{},"text":{"127":{},"195":{}},"component":{}}],["valuefield.menutypes.nul",{"_index":6403,"title":{},"name":{},"text":{"127":{},"195":{}},"component":{}}],["valueformat",{"_index":5761,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["valueformat(pattern",{"_index":5762,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["values().get",{"_index":5719,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["values().updateall(valu",{"_index":5716,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["values/label",{"_index":4251,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["values1",{"_index":5779,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["values2",{"_index":5783,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["values3",{"_index":5846,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["values4",{"_index":5848,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["values5",{"_index":5850,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["vanilla",{"_index":3045,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["vanilla.getvalues().add(new",{"_index":3080,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["vanilla.setcolorhexvalue(\"#fdf2d1",{"_index":3099,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["vanilla.setgroupname(\"vanilla",{"_index":3077,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["var",{"_index":3216,"title":{},"name":{},"text":{"36":{},"37":{},"55":{},"58":{},"60":{},"103":{},"104":{},"122":{},"126":{},"128":{},"168":{},"169":{},"190":{},"194":{},"196":{}},"component":{}}],["vararg",{"_index":3352,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["varchar(1",{"_index":1592,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["varchar(1024",{"_index":1584,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["varchar(2",{"_index":1582,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["varchar(20",{"_index":1583,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["varchar(512",{"_index":1580,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["varchar(64",{"_index":1575,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["variabl",{"_index":506,"title":{"26-20":{}},"name":{},"text":{"16":{},"20":{},"26":{},"38":{},"40":{},"46":{},"56":{},"61":{},"64":{},"82":{},"86":{},"92":{},"105":{},"107":{},"113":{},"123":{},"129":{},"131":{},"150":{},"154":{},"173":{},"175":{},"181":{},"191":{},"197":{},"199":{}},"component":{}}],["variant",{"_index":545,"title":{},"name":{},"text":{"16":{},"26":{},"82":{},"150":{}},"component":{}}],["varieti",{"_index":2721,"title":{},"name":{},"text":{"26":{}},"component":{}}],["variou",{"_index":70,"title":{"92-22":{}},"name":{},"text":{"1":{},"5":{},"6":{},"19":{},"23":{},"25":{},"26":{},"27":{},"29":{},"38":{},"39":{},"44":{},"46":{},"50":{},"52":{},"56":{},"63":{},"67":{},"70":{},"72":{},"84":{},"90":{},"91":{},"95":{},"105":{},"106":{},"109":{},"113":{},"117":{},"119":{},"123":{},"132":{},"135":{},"138":{},"140":{},"152":{},"158":{},"159":{},"163":{},"173":{},"174":{},"179":{},"181":{},"185":{},"187":{},"191":{},"200":{}},"component":{}}],["vaue",{"_index":5017,"title":{},"name":{},"text":{"58":{},"126":{},"194":{}},"component":{}}],["vendor",{"_index":3886,"title":{},"name":{},"text":{"40":{},"45":{},"63":{},"107":{},"112":{},"132":{},"175":{},"180":{},"200":{}},"component":{}}],["venn",{"_index":5115,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["veri",{"_index":674,"title":{},"name":{},"text":{"18":{},"23":{},"25":{},"38":{},"39":{},"43":{},"46":{},"48":{},"52":{},"57":{},"59":{},"60":{},"62":{},"63":{},"67":{},"85":{},"90":{},"91":{},"105":{},"106":{},"110":{},"113":{},"115":{},"119":{},"125":{},"127":{},"128":{},"130":{},"132":{},"153":{},"158":{},"159":{},"173":{},"174":{},"178":{},"181":{},"183":{},"187":{},"192":{},"195":{},"196":{},"198":{},"200":{}},"component":{}}],["verif",{"_index":2082,"title":{},"name":{},"text":{"23":{},"63":{},"90":{},"132":{},"158":{},"200":{}},"component":{}}],["verifi",{"_index":598,"title":{"19-1":{},"28-2":{},"29-33":{},"63-53":{},"84-1":{},"94-2":{},"95-33":{},"132-53":{},"152-1":{},"162-2":{},"163-33":{},"200-53":{}},"name":{},"text":{"17":{},"19":{},"21":{},"23":{},"24":{},"26":{},"28":{},"29":{},"63":{},"83":{},"84":{},"87":{},"89":{},"90":{},"92":{},"94":{},"95":{},"132":{},"151":{},"152":{},"155":{},"157":{},"158":{},"162":{},"163":{},"200":{}},"component":{}}],["versa",{"_index":4205,"title":{},"name":{},"text":{"42":{},"63":{},"108":{},"132":{},"177":{},"200":{}},"component":{}}],["version",{"_index":4,"title":{"1-3":{},"1-4":{},"26-2":{},"28-2":{},"63-3":{},"63-18":{},"64-4":{},"67-3":{},"67-4":{},"92-2":{},"94-2":{},"131-4":{},"132-3":{},"132-18":{},"135-3":{},"135-4":{},"160-2":{},"162-2":{},"199-4":{},"200-3":{},"200-18":{}},"name":{},"text":{"1":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"82":{},"84":{},"88":{},"90":{},"92":{},"93":{},"94":{},"101":{},"106":{},"107":{},"112":{},"113":{},"115":{},"118":{},"123":{},"128":{},"131":{},"132":{},"135":{},"150":{},"152":{},"156":{},"158":{},"160":{},"161":{},"162":{},"172":{},"174":{},"175":{},"180":{},"181":{},"183":{},"186":{},"191":{},"196":{},"199":{},"200":{}},"component":{}}],["version:releas",{"_index":2616,"title":{},"name":{},"text":{"26":{}},"component":{}}],["version:release:depend",{"_index":2615,"title":{},"name":{},"text":{"26":{}},"component":{}}],["version:snapshot",{"_index":2614,"title":{},"name":{},"text":{"26":{}},"component":{}}],["version:snapshot:depend",{"_index":2612,"title":{},"name":{},"text":{"26":{}},"component":{}}],["version}/dist/locales.json",{"_index":969,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["version}/dist/texts.json",{"_index":967,"title":{},"name":{},"text":{"20":{},"86":{},"154":{}},"component":{}}],["vertic",{"_index":2311,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["vertical_dot",{"_index":2679,"title":{},"name":{},"text":{"26":{}},"component":{}}],["verónica",{"_index":1208,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["veto",{"_index":3360,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["vetoexcept",{"_index":2088,"title":{"38-5":{},"105-5":{},"173-5":{}},"name":{},"text":{"23":{},"38":{},"90":{},"105":{},"158":{},"173":{}},"component":{}}],["vetoexception(error.getmessag",{"_index":6025,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["vetoexception(messag",{"_index":6053,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["vetoexception(texts.get(\"bademailaddress",{"_index":2081,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["vetoexception(texts.get(\"insufficientprivileg",{"_index":2045,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["vetoexception(texts.get(\"missingnam",{"_index":2111,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["via",{"_index":550,"title":{"63-12":{},"63-13":{},"132-12":{},"132-13":{},"200-12":{},"200-13":{}},"name":{},"text":{"16":{},"18":{},"23":{},"26":{},"27":{},"29":{},"33":{},"34":{},"35":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"48":{},"52":{},"56":{},"59":{},"60":{},"61":{},"63":{},"65":{},"82":{},"85":{},"90":{},"95":{},"99":{},"100":{},"101":{},"102":{},"105":{},"106":{},"107":{},"108":{},"109":{},"111":{},"115":{},"119":{},"123":{},"127":{},"128":{},"129":{},"132":{},"133":{},"150":{},"153":{},"158":{},"163":{},"167":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"179":{},"183":{},"187":{},"191":{},"195":{},"196":{},"197":{},"200":{},"201":{}},"component":{}}],["vice",{"_index":4204,"title":{},"name":{},"text":{"42":{},"63":{},"108":{},"132":{},"177":{},"200":{}},"component":{}}],["view",{"_index":272,"title":{"27-11":{}},"name":{},"text":{"4":{},"16":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"40":{},"43":{},"47":{},"48":{},"50":{},"52":{},"56":{},"71":{},"82":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"95":{},"107":{},"110":{},"114":{},"115":{},"117":{},"119":{},"123":{},"139":{},"150":{},"154":{},"155":{},"156":{},"157":{},"158":{},"163":{},"175":{},"178":{},"182":{},"183":{},"185":{},"187":{},"191":{}},"component":{}}],["viewport",{"_index":1117,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["violat",{"_index":2087,"title":{},"name":{},"text":{"23":{},"43":{},"66":{},"90":{},"110":{},"134":{},"158":{},"178":{},"202":{}},"component":{}}],["virtual",{"_index":5656,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["visibl",{"_index":975,"title":{},"name":{},"text":{"20":{},"23":{},"27":{},"36":{},"40":{},"47":{},"53":{},"54":{},"60":{},"61":{},"63":{},"66":{},"86":{},"90":{},"103":{},"107":{},"114":{},"120":{},"121":{},"127":{},"128":{},"129":{},"132":{},"134":{},"154":{},"158":{},"168":{},"175":{},"182":{},"188":{},"189":{},"195":{},"196":{},"197":{},"200":{},"202":{}},"component":{}}],["visibleifnullmenu",{"_index":6407,"title":{},"name":{},"text":{"127":{},"195":{}},"component":{}}],["visit",{"_index":594,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"46":{},"83":{},"87":{},"89":{},"113":{},"124":{},"151":{},"155":{},"157":{},"181":{},"193":{}},"component":{}}],["visual",{"_index":679,"title":{},"name":{},"text":{"18":{},"27":{},"33":{},"35":{},"38":{},"48":{},"59":{},"85":{},"99":{},"102":{},"105":{},"115":{},"127":{},"153":{},"167":{},"170":{},"173":{},"183":{},"195":{}},"component":{}}],["vm",{"_index":2964,"title":{},"name":{},"text":{"28":{},"94":{},"162":{}},"component":{}}],["vmarg",{"_index":4983,"title":{},"name":{},"text":{"57":{},"125":{},"192":{}},"component":{}}],["vogel",{"_index":852,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["void",{"_index":573,"title":{},"name":{},"text":{"16":{},"23":{},"33":{},"34":{},"39":{},"40":{},"43":{},"48":{},"53":{},"61":{},"63":{},"65":{},"66":{},"82":{},"90":{},"99":{},"101":{},"106":{},"107":{},"110":{},"115":{},"120":{},"129":{},"132":{},"133":{},"134":{},"150":{},"158":{},"170":{},"172":{},"174":{},"175":{},"178":{},"183":{},"188":{},"197":{},"200":{},"201":{},"202":{}},"component":{}}],["vorlage:priv",{"_index":4829,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["vs",{"_index":5305,"title":{"61-8":{},"129-8":{},"197-8":{}},"name":{},"text":{},"component":{}}],["vulner",{"_index":4250,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["w0",{"_index":2526,"title":{},"name":{},"text":{"26":{}},"component":{}}],["w3c",{"_index":1113,"title":{},"name":{},"text":{"22":{},"88":{},"156":{}},"component":{}}],["wait",{"_index":1010,"title":{},"name":{},"text":{"21":{},"23":{},"24":{},"26":{},"38":{},"39":{},"40":{},"41":{},"44":{},"61":{},"63":{},"87":{},"89":{},"90":{},"105":{},"106":{},"107":{},"109":{},"111":{},"129":{},"132":{},"155":{},"157":{},"158":{},"173":{},"174":{},"175":{},"176":{},"179":{},"197":{},"200":{}},"component":{}}],["wait/notifi",{"_index":3610,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["waitfor",{"_index":2234,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["waiting_for_blocking_condit",{"_index":3528,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["waiting_for_permit",{"_index":3527,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["walk",{"_index":1209,"title":{},"name":{},"text":{"23":{},"29":{},"90":{},"95":{},"158":{},"163":{}},"component":{}}],["want",{"_index":57,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"33":{},"35":{},"36":{},"40":{},"43":{},"44":{},"46":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"65":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"88":{},"89":{},"90":{},"93":{},"95":{},"99":{},"102":{},"103":{},"107":{},"109":{},"110":{},"113":{},"115":{},"116":{},"117":{},"119":{},"120":{},"122":{},"123":{},"125":{},"126":{},"127":{},"128":{},"130":{},"132":{},"133":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"156":{},"157":{},"158":{},"161":{},"163":{},"167":{},"168":{},"170":{},"175":{},"178":{},"179":{},"181":{},"183":{},"184":{},"185":{},"187":{},"188":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"198":{},"200":{},"201":{}},"component":{}}],["war",{"_index":478,"title":{"19-4":{},"84-4":{},"152-4":{}},"name":{},"text":{"14":{},"19":{},"29":{},"32":{},"80":{},"84":{},"95":{},"98":{},"148":{},"152":{},"163":{},"166":{}},"component":{}}],["warn",{"_index":1246,"title":{},"name":{},"text":{"23":{},"26":{},"40":{},"43":{},"90":{},"92":{},"107":{},"110":{},"158":{},"175":{},"178":{}},"component":{}}],["wast",{"_index":4893,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["watch",{"_index":4518,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["watcher",{"_index":1026,"title":{"57-4":{},"125-4":{},"192-4":{}},"name":{},"text":{"21":{},"24":{},"46":{},"57":{},"87":{},"89":{},"113":{},"125":{},"155":{},"157":{},"181":{},"192":{}},"component":{}}],["way",{"_index":194,"title":{"92-12":{}},"name":{},"text":{"4":{},"18":{},"19":{},"23":{},"26":{},"29":{},"32":{},"39":{},"40":{},"41":{},"42":{},"43":{},"46":{},"48":{},"50":{},"53":{},"56":{},"59":{},"60":{},"61":{},"62":{},"63":{},"66":{},"71":{},"84":{},"85":{},"90":{},"92":{},"93":{},"95":{},"98":{},"100":{},"106":{},"107":{},"108":{},"110":{},"111":{},"115":{},"117":{},"120":{},"123":{},"127":{},"128":{},"129":{},"130":{},"132":{},"134":{},"139":{},"152":{},"153":{},"158":{},"163":{},"166":{},"171":{},"174":{},"175":{},"176":{},"177":{},"178":{},"183":{},"185":{},"188":{},"191":{},"195":{},"196":{},"197":{},"198":{},"200":{},"202":{}},"component":{}}],["web",{"_index":472,"title":{"46-5":{},"63-35":{},"113-5":{},"132-35":{},"181-5":{},"200-35":{}},"name":{},"text":{"14":{},"17":{},"19":{},"21":{},"22":{},"24":{},"26":{},"27":{},"28":{},"29":{},"39":{},"40":{},"43":{},"45":{},"46":{},"51":{},"53":{},"63":{},"80":{},"83":{},"84":{},"87":{},"88":{},"89":{},"92":{},"94":{},"95":{},"106":{},"107":{},"110":{},"112":{},"113":{},"118":{},"120":{},"132":{},"148":{},"151":{},"152":{},"155":{},"156":{},"157":{},"162":{},"163":{},"174":{},"175":{},"178":{},"180":{},"181":{},"186":{},"188":{},"200":{}},"component":{}}],["web.xml",{"_index":491,"title":{"63-9":{},"132-9":{},"200-9":{}},"name":{},"text":{"14":{},"19":{},"29":{},"37":{},"40":{},"63":{},"66":{},"80":{},"84":{},"95":{},"104":{},"107":{},"132":{},"134":{},"148":{},"152":{},"163":{},"169":{},"175":{},"200":{},"202":{}},"component":{}}],["webapp",{"_index":473,"title":{},"name":{},"text":{"14":{},"19":{},"23":{},"24":{},"29":{},"40":{},"63":{},"80":{},"84":{},"89":{},"90":{},"95":{},"107":{},"132":{},"148":{},"152":{},"157":{},"158":{},"163":{},"175":{},"200":{}},"component":{}}],["webbapp",{"_index":5398,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webcont",{"_index":486,"title":{},"name":{},"text":{"14":{},"29":{},"36":{},"52":{},"80":{},"95":{},"103":{},"119":{},"148":{},"163":{},"168":{},"187":{}},"component":{}}],["webcontent/font",{"_index":4791,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["weblog",{"_index":5426,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webmethod(act",{"_index":5663,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webpack",{"_index":904,"title":{"22-9":{},"46-3":{},"88-9":{},"113-3":{},"156-9":{},"181-3":{}},"name":{},"text":{"20":{},"22":{},"46":{},"51":{},"56":{},"86":{},"88":{},"93":{},"113":{},"118":{},"123":{},"154":{},"156":{},"181":{},"186":{},"191":{}},"component":{}}],["webpack.config.j",{"_index":1045,"title":{},"name":{},"text":{"22":{},"46":{},"48":{},"51":{},"56":{},"88":{},"113":{},"115":{},"118":{},"123":{},"156":{},"181":{},"183":{},"186":{},"191":{}},"component":{}}],["webpack.config.other.j",{"_index":6385,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["webpackarg",{"_index":4538,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["webpackargs.progress=fals",{"_index":4539,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["webresourceload",{"_index":4973,"title":{},"name":{},"text":{"56":{},"123":{},"191":{}},"component":{}}],["webresult(nam",{"_index":5665,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webserv",{"_index":4513,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["webservic",{"_index":2962,"title":{"63":{},"132":{},"200":{},"63-11":{},"63-12":{},"63-16":{},"63-17":{},"63-20":{},"63-29":{},"63-32":{},"63-33":{},"63-34":{},"132-11":{},"132-12":{},"132-16":{},"132-17":{},"132-20":{},"132-29":{},"132-32":{},"132-33":{},"132-34":{},"200-11":{},"200-12":{},"200-16":{},"200-17":{},"200-20":{},"200-29":{},"200-32":{},"200-33":{},"200-34":{}},"name":{},"text":{"28":{},"32":{},"40":{},"63":{},"94":{},"98":{},"107":{},"132":{},"162":{},"166":{},"175":{},"200":{}},"component":{}}],["webservice(nam",{"_index":5544,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webservicecli",{"_index":5448,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webservicecontext",{"_index":5675,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webserviceentrypoint",{"_index":5433,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webserviceentrypoint(endpointinterfac",{"_index":5487,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webservicerequestcancelledexcept",{"_index":5612,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["webservice’",{"_index":5430,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["websit",{"_index":4217,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["websocket",{"_index":4228,"title":{},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["webtarget",{"_index":6033,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["wednesday",{"_index":3496,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["week",{"_index":6331,"title":{},"name":{},"text":{"93":{}},"component":{}}],["weight",{"_index":2709,"title":{},"name":{},"text":{"26":{},"52":{},"119":{},"187":{}},"component":{}}],["weighti",{"_index":3226,"title":{},"name":{},"text":{"36":{},"103":{},"168":{}},"component":{}}],["welcom",{"_index":998,"title":{},"name":{},"text":{"21":{},"24":{},"87":{},"89":{},"93":{},"155":{},"157":{}},"component":{}}],["well",{"_index":173,"title":{"93-6":{},"93-7":{}},"name":{},"text":{"3":{},"14":{},"17":{},"19":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"31":{},"32":{},"36":{},"40":{},"41":{},"42":{},"43":{},"46":{},"48":{},"50":{},"53":{},"54":{},"56":{},"58":{},"59":{},"60":{},"61":{},"63":{},"66":{},"69":{},"80":{},"83":{},"84":{},"88":{},"89":{},"90":{},"92":{},"93":{},"95":{},"97":{},"98":{},"103":{},"107":{},"108":{},"110":{},"111":{},"113":{},"115":{},"117":{},"120":{},"121":{},"122":{},"123":{},"124":{},"126":{},"127":{},"128":{},"129":{},"132":{},"134":{},"137":{},"148":{},"151":{},"152":{},"156":{},"157":{},"158":{},"163":{},"165":{},"166":{},"168":{},"175":{},"176":{},"177":{},"178":{},"181":{},"183":{},"185":{},"188":{},"189":{},"190":{},"191":{},"193":{},"194":{},"195":{},"196":{},"197":{},"200":{},"202":{}},"component":{}}],["went",{"_index":5064,"title":{},"name":{},"text":{"59":{},"127":{},"195":{}},"component":{}}],["west",{"_index":4565,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["we’ll",{"_index":919,"title":{},"name":{},"text":{"20":{},"46":{},"86":{},"113":{},"154":{},"181":{}},"component":{}}],["we’v",{"_index":2158,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["whatev",{"_index":1111,"title":{},"name":{},"text":{"22":{},"48":{},"57":{},"88":{},"115":{},"125":{},"156":{},"183":{},"192":{}},"component":{}}],["what’",{"_index":498,"title":{"16-7":{},"17-5":{},"21-7":{},"22-15":{},"24-10":{},"82-7":{},"83-5":{},"87-7":{},"88-15":{},"89-10":{},"150-7":{},"151-5":{},"155-7":{},"156-15":{},"157-10":{}},"name":{},"text":{},"component":{}}],["whendon",{"_index":3593,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["whenev",{"_index":1943,"title":{},"name":{},"text":{"23":{},"37":{},"50":{},"60":{},"63":{},"90":{},"104":{},"117":{},"128":{},"132":{},"158":{},"169":{},"185":{},"196":{},"200":{}},"component":{}}],["wherea",{"_index":2239,"title":{},"name":{},"text":{"23":{},"39":{},"40":{},"41":{},"63":{},"90":{},"106":{},"107":{},"111":{},"132":{},"158":{},"174":{},"175":{},"176":{},"200":{}},"component":{}}],["wherev",{"_index":6303,"title":{},"name":{},"text":{"93":{}},"component":{}}],["whether",{"_index":653,"title":{},"name":{},"text":{"18":{},"26":{},"39":{},"40":{},"43":{},"44":{},"48":{},"59":{},"60":{},"63":{},"65":{},"67":{},"85":{},"92":{},"93":{},"106":{},"107":{},"109":{},"110":{},"115":{},"127":{},"128":{},"132":{},"133":{},"153":{},"174":{},"175":{},"178":{},"179":{},"183":{},"195":{},"196":{},"200":{},"201":{}},"component":{}}],["white",{"_index":2568,"title":{"43-15":{},"110-15":{},"178-15":{}},"name":{},"text":{"26":{},"43":{},"44":{},"56":{},"109":{},"110":{},"123":{},"178":{},"179":{},"191":{}},"component":{}}],["whole",{"_index":4255,"title":{},"name":{},"text":{"43":{},"53":{},"56":{},"58":{},"100":{},"110":{},"120":{},"123":{},"126":{},"171":{},"178":{},"188":{},"191":{},"194":{}},"component":{}}],["whose",{"_index":3836,"title":{},"name":{},"text":{"40":{},"64":{},"107":{},"131":{},"175":{},"199":{}},"component":{}}],["wide",{"_index":821,"title":{},"name":{},"text":{"19":{},"27":{},"45":{},"84":{},"112":{},"152":{},"180":{}},"component":{}}],["widest",{"_index":2720,"title":{},"name":{},"text":{"26":{}},"component":{}}],["widget",{"_index":315,"title":{"59":{},"60":{},"127":{},"128":{},"195":{},"196":{},"22-13":{},"26-39":{},"53-1":{},"60-2":{},"60-3":{},"60-5":{},"60-7":{},"88-13":{},"93-6":{},"93-7":{},"93-8":{},"120-1":{},"128-2":{},"128-3":{},"128-5":{},"128-6":{},"128-8":{},"156-13":{},"188-1":{},"196-2":{},"196-3":{},"196-5":{},"196-6":{},"196-8":{}},"name":{"59":{},"60":{},"127":{},"128":{},"195":{},"196":{}},"text":{"5":{},"16":{},"18":{},"21":{},"22":{},"23":{},"26":{},"27":{},"29":{},"32":{},"34":{},"46":{},"48":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"59":{},"60":{},"65":{},"70":{},"82":{},"85":{},"87":{},"88":{},"90":{},"92":{},"93":{},"95":{},"98":{},"101":{},"113":{},"115":{},"116":{},"117":{},"119":{},"120":{},"122":{},"123":{},"127":{},"128":{},"133":{},"138":{},"150":{},"153":{},"155":{},"156":{},"158":{},"163":{},"166":{},"172":{},"181":{},"183":{},"184":{},"185":{},"187":{},"188":{},"190":{},"191":{},"195":{},"196":{},"201":{}},"component":{}}],["widget(id",{"_index":5293,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["widget._remov",{"_index":5291,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["widget.in",{"_index":5197,"title":{},"name":{},"text":{"60":{}},"component":{}}],["widget.remov",{"_index":5290,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["widget.rend",{"_index":5288,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["widget.setyourproperty(valu",{"_index":5232,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["widget.yourproperti",{"_index":5231,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["widgetcloneproperti",{"_index":6191,"title":{},"name":{},"text":{"92":{}},"component":{}}],["widgetmap",{"_index":6416,"title":{},"name":{},"text":{"128":{},"196":{}},"component":{}}],["widgetmodel.loadjsonmodel",{"_index":6195,"title":{},"name":{},"text":{"92":{}},"component":{}}],["widgetpopup",{"_index":6150,"title":{},"name":{},"text":{"92":{}},"component":{}}],["widgetpopup.widget",{"_index":6107,"title":{"92-16":{}},"name":{},"text":{},"component":{}}],["widgettooltip",{"_index":6147,"title":{},"name":{},"text":{"92":{}},"component":{}}],["widgettooltip.widget",{"_index":6106,"title":{"92-15":{}},"name":{},"text":{},"component":{}}],["width",{"_index":1707,"title":{"26-24":{}},"name":{},"text":{"23":{},"26":{},"36":{},"47":{},"50":{},"52":{},"53":{},"90":{},"103":{},"114":{},"117":{},"119":{},"120":{},"158":{},"168":{},"182":{},"185":{},"187":{},"188":{}},"component":{}}],["widthtocont",{"_index":6181,"title":{},"name":{},"text":{"92":{}},"component":{}}],["wiki.eclipse.org",{"_index":1906,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["wikipedia",{"_index":824,"title":{},"name":{},"text":{"19":{},"52":{},"57":{},"84":{},"119":{},"125":{},"152":{},"187":{},"192":{}},"component":{}}],["wild",{"_index":769,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["wildcard",{"_index":6393,"title":{},"name":{},"text":{"113":{},"181":{}},"component":{}}],["will",{"_index":3662,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["window",{"_index":543,"title":{},"name":{},"text":{"16":{},"19":{},"20":{},"22":{},"23":{},"28":{},"50":{},"52":{},"82":{},"84":{},"86":{},"88":{},"90":{},"94":{},"117":{},"119":{},"128":{},"150":{},"152":{},"154":{},"156":{},"158":{},"162":{},"185":{},"187":{},"196":{}},"component":{}}],["window.helloworld",{"_index":1125,"title":{},"name":{},"text":{"22":{}},"component":{}}],["window.yournamespac",{"_index":4595,"title":{},"name":{},"text":{"48":{},"92":{},"115":{},"183":{}},"component":{}}],["windows.[7",{"_index":836,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["wire",{"_index":4447,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["wise",{"_index":635,"title":{"18-1":{},"85-1":{},"153-1":{}},"name":{},"text":{},"component":{}}],["wish",{"_index":1174,"title":{},"name":{},"text":{"22":{},"24":{},"88":{},"89":{},"156":{},"157":{}},"component":{}}],["withattachment(screenshotattach",{"_index":4411,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withbodyplaintext(\"dear",{"_index":4413,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withcachekey(\"a",{"_index":4576,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["withcent",{"_index":4577,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["withcenter(new",{"_index":4581,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["withcheckable(tru",{"_index":3109,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withclickable(tru",{"_index":3108,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withclientnodeid(str",{"_index":4182,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["withcolorschem",{"_index":3136,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withcolorscheme(colorscheme.rainbow",{"_index":3097,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withconnecttimeout(10",{"_index":5604,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["withcontent(byt",{"_index":4403,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withcontenttype(\"image/jpeg",{"_index":4402,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withcontextinfo(\"cid",{"_index":3388,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["withcontextinfo(\"ent",{"_index":3358,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["withcontextinfo(\"id",{"_index":3359,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["withcontextinfo(\"job",{"_index":3392,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["withcontextinfo(\"us",{"_index":3390,"title":{},"name":{},"text":{"38":{},"105":{},"173":{}},"component":{}}],["withendin(1",{"_index":3490,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withexceptionhandling(new",{"_index":3465,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withexecutionsemaphore(semaphor",{"_index":3514,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withexecutiontrigger(jobs.newexecutiontrigg",{"_index":3461,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withfilename(\"screenshot.jpg",{"_index":4401,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withhost(\"mail.example.com",{"_index":4379,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withhttprequestheader(\"x",{"_index":5606,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["withiconid(\"notification_logo.png",{"_index":2638,"title":{},"name":{},"text":{"26":{}},"component":{}}],["within",{"_index":383,"title":{"63-17":{},"64-25":{},"64-26":{},"131-25":{},"131-26":{},"132-17":{},"199-25":{},"199-26":{},"200-17":{}},"name":{},"text":{"7":{},"14":{},"16":{},"19":{},"23":{},"29":{},"39":{},"40":{},"42":{},"47":{},"48":{},"56":{},"63":{},"64":{},"66":{},"73":{},"80":{},"82":{},"84":{},"90":{},"95":{},"106":{},"107":{},"108":{},"114":{},"115":{},"123":{},"131":{},"132":{},"134":{},"141":{},"148":{},"150":{},"152":{},"158":{},"163":{},"174":{},"175":{},"177":{},"182":{},"183":{},"191":{},"199":{},"200":{},"202":{}},"component":{}}],["withintervalinminutes(1",{"_index":3681,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withlegendclickable(tru",{"_index":3110,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withlistattribute(abstractexampleentitydo",{"_index":5812,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withlistattribute(collect",{"_index":5810,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withlocale(locale.u",{"_index":4159,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["withname(\"do",{"_index":3656,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withname(\"exampl",{"_index":5722,"title":{},"name":{},"text":{"64":{},"66":{},"131":{},"134":{},"199":{},"202":{}},"component":{}}],["withname(\"job",{"_index":3459,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withname(\"on",{"_index":5824,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withname(\"regist",{"_index":4647,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["withname(\"run",{"_index":3678,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withname(\"send",{"_index":3475,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withname(\"singl",{"_index":5830,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withname(\"two",{"_index":5827,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withname(str",{"_index":5711,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withname1ex(\"on",{"_index":5822,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withname1ex(\"singl",{"_index":5829,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withname1ex(str",{"_index":5793,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withname2ex(\"two",{"_index":5826,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withname2ex(str",{"_index":5801,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withnorth(new",{"_index":4579,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["without",{"_index":647,"title":{"26-31":{}},"name":{},"text":{"18":{},"20":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"34":{},"38":{},"39":{},"40":{},"46":{},"52":{},"55":{},"56":{},"58":{},"61":{},"63":{},"64":{},"65":{},"66":{},"85":{},"86":{},"88":{},"90":{},"92":{},"93":{},"94":{},"95":{},"101":{},"105":{},"106":{},"107":{},"113":{},"119":{},"122":{},"123":{},"126":{},"127":{},"128":{},"129":{},"131":{},"132":{},"133":{},"134":{},"153":{},"154":{},"156":{},"158":{},"161":{},"162":{},"163":{},"172":{},"173":{},"174":{},"175":{},"181":{},"187":{},"190":{},"191":{},"194":{},"195":{},"196":{},"197":{},"199":{},"200":{},"201":{},"202":{}},"component":{}}],["withoutreadtimeout",{"_index":5605,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["withpassword(\"secret",{"_index":5603,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["withpassword(\"smtpuserpwd",{"_index":4382,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withport(465",{"_index":4380,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withrepeatcount(59",{"_index":3685,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withrequestcontextproperty(\"cid",{"_index":5619,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["withruncontext(clientruncontexts.copycurr",{"_index":3460,"title":{},"name":{},"text":{"39":{},"48":{},"106":{},"115":{},"174":{},"183":{}},"component":{}}],["withschedule(cronschedulebuilder.cronschedule(\"0",{"_index":3499,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withschedule(fixeddelayschedulebuilder.repeatforever(1",{"_index":3687,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withschedule(fixeddelayschedulebuilder.repeatforever(5",{"_index":3464,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withschedule(fixeddelayschedulebuilder.repeatfortotalcount(60",{"_index":3688,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withschedule(simpleschedulebuilder.repeathourlyforev",{"_index":3492,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withschedule(simpleschedulebuilder.simpleschedul",{"_index":3680,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withsender(beans.get(mailparticipant.class).withname(\"sender\").withemail(\"me@example.com",{"_index":4409,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withsingleattribute(abstractexampleentitydo",{"_index":5815,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withsouth(new",{"_index":4583,"title":{},"name":{},"text":{"47":{},"114":{},"182":{}},"component":{}}],["withstartin(1",{"_index":3679,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withstartin(10",{"_index":3462,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["withsubject(\"screenshot",{"_index":4412,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withsubject(subject",{"_index":4158,"title":{},"name":{},"text":{"41":{},"111":{},"176":{}},"component":{}}],["withtitle(error.gettitl",{"_index":6026,"title":{},"name":{},"text":{"66":{},"134":{},"202":{}},"component":{}}],["withtype(icharttype.bar",{"_index":3096,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withtype(icharttype.bubbl",{"_index":3135,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withuseauthentication(tru",{"_index":4383,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withusername(\"smtpus",{"_index":4381,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withusername(\"test",{"_index":5602,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["withusesmtps(tru",{"_index":4384,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withusestarttls(tru",{"_index":4385,"title":{},"name":{},"text":{"44":{},"109":{},"179":{}},"component":{}}],["withvalues(1",{"_index":5723,"title":{},"name":{},"text":{"64":{},"66":{},"131":{},"134":{},"199":{},"202":{}},"component":{}}],["withvalues(6",{"_index":5869,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withvalues(collect",{"_index":5715,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withvalues(integ",{"_index":5717,"title":{},"name":{},"text":{"64":{},"131":{},"199":{}},"component":{}}],["withvgap(0",{"_index":4878,"title":{},"name":{},"text":{"53":{},"120":{},"188":{}},"component":{}}],["withxaxislabel(\"month",{"_index":3104,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withxaxislabeldisplay(tru",{"_index":3103,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withyaxislabel(\"scoop",{"_index":3106,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["withyaxislabeldisplay(tru",{"_index":3105,"title":{},"name":{},"text":{"33":{},"99":{},"170":{}},"component":{}}],["wizard",{"_index":129,"title":{"6-1":{},"6-2":{},"6-3":{},"6-4":{},"7-1":{},"7-2":{},"8-1":{},"8-2":{},"9-1":{},"10-1":{},"10-2":{},"11-1":{},"12-1":{},"12-2":{},"13-1":{},"13-2":{},"14-1":{},"14-2":{},"28-7":{},"28-8":{},"29-2":{},"29-10":{},"29-11":{},"29-12":{},"29-14":{},"29-15":{},"29-17":{},"29-18":{},"72-1":{},"72-2":{},"72-3":{},"72-4":{},"73-1":{},"73-2":{},"74-1":{},"74-2":{},"75-1":{},"76-1":{},"76-2":{},"77-1":{},"78-1":{},"78-2":{},"79-1":{},"79-2":{},"80-1":{},"80-2":{},"94-7":{},"94-8":{},"95-2":{},"95-10":{},"95-11":{},"95-12":{},"95-14":{},"95-15":{},"95-17":{},"95-18":{},"140-1":{},"140-2":{},"140-3":{},"140-4":{},"141-1":{},"141-2":{},"142-1":{},"142-2":{},"143-1":{},"144-1":{},"144-2":{},"145-1":{},"146-1":{},"146-2":{},"147-1":{},"147-2":{},"148-1":{},"148-2":{},"162-7":{},"162-8":{},"163-2":{},"163-10":{},"163-11":{},"163-12":{},"163-14":{},"163-15":{},"163-17":{},"163-18":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"21":{},"23":{},"24":{},"26":{},"28":{},"29":{},"31":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"82":{},"83":{},"87":{},"89":{},"90":{},"94":{},"95":{},"97":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"150":{},"151":{},"155":{},"157":{},"158":{},"162":{},"163":{},"165":{}},"component":{}}],["wl",{"_index":5427,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["woff",{"_index":4789,"title":{},"name":{},"text":{"52":{},"119":{},"187":{}},"component":{}}],["wolf",{"_index":845,"title":{},"name":{},"text":{"19":{},"84":{},"152":{}},"component":{}}],["won't",{"_index":5258,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["won`t",{"_index":3946,"title":{},"name":{},"text":{"40":{},"107":{},"175":{}},"component":{}}],["won’t",{"_index":4469,"title":{},"name":{},"text":{"46":{},"53":{},"56":{},"58":{},"60":{},"113":{},"120":{},"123":{},"126":{},"128":{},"181":{},"188":{},"191":{},"194":{},"196":{}},"component":{}}],["word",{"_index":1241,"title":{},"name":{},"text":{"23":{},"46":{},"66":{},"90":{},"113":{},"134":{},"158":{},"181":{},"202":{}},"component":{}}],["work",{"_index":323,"title":{"38":{},"105":{},"173":{},"19-3":{},"63-40":{},"84-3":{},"132-40":{},"152-3":{},"200-40":{}},"name":{},"text":{"5":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"28":{},"29":{},"36":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"46":{},"48":{},"50":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"70":{},"82":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"100":{},"103":{},"105":{},"106":{},"107":{},"108":{},"110":{},"111":{},"113":{},"115":{},"117":{},"119":{},"120":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"138":{},"150":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"162":{},"163":{},"168":{},"171":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"181":{},"183":{},"185":{},"187":{},"188":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{}},"component":{}}],["workaround",{"_index":3023,"title":{},"name":{},"text":{"33":{},"35":{},"45":{},"99":{},"102":{},"112":{},"167":{},"170":{},"180":{}},"component":{}}],["workbox",{"_index":1770,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["worker",{"_index":3474,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["workingset",{"_index":539,"title":{},"name":{},"text":{"16":{},"82":{},"150":{}},"component":{}}],["workoutlin",{"_index":1178,"title":{"23-6":{},"90-6":{},"158-6":{}},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["workoutline.java",{"_index":1239,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["workoutlineviewbutton",{"_index":1264,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["workspac",{"_index":452,"title":{},"name":{},"text":{"14":{},"16":{},"17":{},"23":{},"24":{},"26":{},"29":{},"63":{},"80":{},"82":{},"83":{},"89":{},"90":{},"95":{},"132":{},"148":{},"150":{},"151":{},"157":{},"158":{},"163":{},"200":{}},"component":{}}],["workspace.yaml",{"_index":1023,"title":{},"name":{},"text":{"21":{},"24":{},"87":{},"89":{},"155":{},"157":{}},"component":{}}],["workwithresult",{"_index":3438,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["world",{"_index":112,"title":{"17-1":{},"83-1":{},"151-1":{}},"name":{},"text":{"2":{},"15":{},"21":{},"22":{},"23":{},"28":{},"29":{},"60":{},"63":{},"68":{},"81":{},"87":{},"88":{},"90":{},"94":{},"95":{},"128":{},"132":{},"136":{},"149":{},"155":{},"156":{},"158":{},"162":{},"163":{},"196":{},"200":{}},"component":{}}],["worth",{"_index":5241,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["wrap",{"_index":3384,"title":{},"name":{},"text":{"38":{},"39":{},"40":{},"44":{},"48":{},"49":{},"60":{},"64":{},"66":{},"92":{},"93":{},"100":{},"105":{},"106":{},"107":{},"109":{},"115":{},"116":{},"128":{},"131":{},"134":{},"171":{},"173":{},"174":{},"175":{},"179":{},"183":{},"184":{},"196":{},"199":{},"202":{}},"component":{}}],["wrapped_typ",{"_index":6306,"title":{},"name":{},"text":{"93":{}},"component":{}}],["wrapper",{"_index":3377,"title":{},"name":{},"text":{"38":{},"43":{},"48":{},"49":{},"64":{},"105":{},"110":{},"115":{},"116":{},"131":{},"173":{},"178":{},"183":{},"184":{},"199":{}},"component":{}}],["write",{"_index":651,"title":{},"name":{},"text":{"18":{},"22":{},"26":{},"29":{},"32":{},"36":{},"39":{},"40":{},"46":{},"51":{},"53":{},"56":{},"60":{},"85":{},"88":{},"93":{},"95":{},"98":{},"103":{},"106":{},"107":{},"113":{},"118":{},"120":{},"123":{},"124":{},"128":{},"153":{},"156":{},"163":{},"166":{},"168":{},"174":{},"175":{},"181":{},"186":{},"188":{},"191":{},"193":{},"196":{}},"component":{}}],["written",{"_index":2824,"title":{},"name":{},"text":{"26":{},"32":{},"46":{},"60":{},"63":{},"66":{},"93":{},"98":{},"113":{},"124":{},"128":{},"132":{},"134":{},"166":{},"181":{},"193":{},"196":{},"200":{},"202":{}},"component":{}}],["wrong",{"_index":3615,"title":{},"name":{},"text":{"39":{},"59":{},"93":{},"106":{},"127":{},"174":{},"195":{}},"component":{}}],["ws",{"_index":2488,"title":{"63":{},"132":{},"200":{},"63-2":{},"63-3":{},"63-4":{},"63-5":{},"63-6":{},"63-8":{},"63-9":{},"63-26":{},"63-28":{},"63-30":{},"63-38":{},"63-39":{},"63-41":{},"132-2":{},"132-3":{},"132-4":{},"132-5":{},"132-6":{},"132-8":{},"132-9":{},"132-26":{},"132-28":{},"132-30":{},"132-38":{},"132-39":{},"132-41":{},"200-2":{},"200-3":{},"200-4":{},"200-5":{},"200-6":{},"200-8":{},"200-9":{},"200-26":{},"200-28":{},"200-30":{},"200-38":{},"200-39":{},"200-41":{}},"name":{"63":{},"132":{},"200":{}},"text":{"26":{},"40":{},"63":{},"92":{},"107":{},"132":{},"175":{},"200":{}},"component":{}}],["wsdl",{"_index":2969,"title":{"63-13":{},"132-13":{},"200-13":{}},"name":{},"text":{"28":{},"40":{},"63":{},"94":{},"107":{},"132":{},"162":{},"175":{},"200":{}},"component":{}}],["wsdl/schema",{"_index":5609,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["wsdlfile",{"_index":5447,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["wsdllocat",{"_index":5446,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["wsimport",{"_index":5369,"title":{"63-12":{},"132-12":{},"200-12":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["wsprovidercorrelationidhandl",{"_index":5577,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["wsse",{"_index":5694,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["wsse_usernametoken",{"_index":5690,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["wsseusernametokenauthenticationhandl",{"_index":5623,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["wsseusernametokenmethod",{"_index":5385,"title":{"63-51":{},"132-51":{},"200-51":{}},"name":{},"text":{},"component":{}}],["www.gravatar.com",{"_index":1905,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["x",{"_index":841,"title":{"43-2":{},"43-3":{},"110-2":{},"110-3":{},"178-2":{},"178-3":{}},"name":{},"text":{"19":{},"27":{},"35":{},"43":{},"50":{},"59":{},"63":{},"66":{},"84":{},"102":{},"110":{},"117":{},"127":{},"132":{},"134":{},"152":{},"167":{},"178":{},"185":{},"195":{},"200":{},"202":{}},"component":{}}],["x.y.z",{"_index":2617,"title":{},"name":{},"text":{"26":{}},"component":{}}],["xindex",{"_index":3115,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["xjc",{"_index":5469,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["xml",{"_index":861,"title":{"63-40":{},"132-40":{},"200-40":{}},"name":{},"text":{"19":{},"40":{},"43":{},"57":{},"62":{},"63":{},"84":{},"107":{},"110":{},"125":{},"130":{},"132":{},"152":{},"175":{},"178":{},"192":{},"198":{},"200":{}},"component":{}}],["xmlgregoriancalendar",{"_index":5633,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["xs",{"_index":5457,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["xsd",{"_index":5370,"title":{"63-13":{},"132-13":{},"200-13":{}},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["xsd:date",{"_index":5637,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["xsd:datetim",{"_index":5646,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["xsd:time",{"_index":5643,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["xss",{"_index":4206,"title":{"43-3":{},"110-3":{},"178-3":{}},"name":{},"text":{"43":{},"110":{},"178":{}},"component":{}}],["xx:xx",{"_index":5657,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["xxx",{"_index":239,"title":{},"name":{},"text":{"4":{},"29":{},"71":{},"95":{},"139":{},"163":{}},"component":{}}],["xy",{"_index":5249,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["y",{"_index":3181,"title":{},"name":{},"text":{"35":{},"102":{},"167":{}},"component":{}}],["ye",{"_index":4919,"title":{},"name":{},"text":{"55":{},"122":{},"190":{}},"component":{}}],["year",{"_index":86,"title":{},"name":{},"text":{"1":{},"26":{},"39":{},"57":{},"59":{},"63":{},"67":{},"106":{},"125":{},"127":{},"132":{},"135":{},"174":{},"192":{},"195":{},"200":{}},"component":{}}],["yellow",{"_index":1699,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["yesornocodetyp",{"_index":5359,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["yesornocodetype.class",{"_index":5353,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["yesornocodetype.nocod",{"_index":5361,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["yesornocodetype.yescod",{"_index":5360,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["yesornosmartfield",{"_index":5352,"title":{},"name":{},"text":{"62":{},"130":{},"198":{}},"component":{}}],["yield",{"_index":3664,"title":{},"name":{},"text":{"39":{},"106":{},"174":{}},"component":{}}],["yindex",{"_index":3116,"title":{},"name":{},"text":{"33":{},"35":{},"99":{},"102":{},"167":{},"170":{}},"component":{}}],["yourapp",{"_index":4542,"title":{},"name":{},"text":{"46":{},"113":{},"181":{}},"component":{}}],["yourfirstwebservice.wsdl",{"_index":5450,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["yournamespac",{"_index":4619,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["yournamespace.myextens",{"_index":4625,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["yournamespace.specialstringfield",{"_index":4599,"title":{},"name":{},"text":{"48":{},"115":{},"183":{}},"component":{}}],["yourproject.customt",{"_index":4921,"title":{},"name":{},"text":{"55":{},"122":{},"190":{}},"component":{}}],["yoursecondwebservice.wsdl",{"_index":5452,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["yourself",{"_index":4166,"title":{},"name":{},"text":{"41":{},"43":{},"46":{},"53":{},"58":{},"60":{},"63":{},"92":{},"93":{},"110":{},"111":{},"113":{},"120":{},"124":{},"126":{},"128":{},"132":{},"176":{},"178":{},"181":{},"188":{},"193":{},"194":{},"196":{},"200":{}},"component":{}}],["yourwebservice.wsdl",{"_index":5445,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}],["you’d",{"_index":5221,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["you’ll",{"_index":94,"title":{},"name":{},"text":{"1":{},"32":{},"46":{},"67":{},"93":{},"98":{},"113":{},"128":{},"135":{},"166":{},"181":{},"196":{}},"component":{}}],["you’r",{"_index":4815,"title":{},"name":{},"text":{"52":{},"119":{},"128":{},"187":{},"196":{}},"component":{}}],["you’v",{"_index":4808,"title":{},"name":{},"text":{"52":{},"60":{},"119":{},"187":{}},"component":{}}],["yyyi",{"_index":5962,"title":{},"name":{},"text":{"65":{},"133":{},"201":{}},"component":{}}],["z",{"_index":5296,"title":{},"name":{},"text":{"60":{},"128":{},"196":{}},"component":{}}],["z0",{"_index":2072,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["z]{2",{"_index":2074,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["za",{"_index":2071,"title":{},"name":{},"text":{"23":{},"90":{},"158":{}},"component":{}}],["zero",{"_index":3507,"title":{},"name":{},"text":{"39":{},"40":{},"106":{},"107":{},"174":{},"175":{}},"component":{}}],["zip",{"_index":1043,"title":{},"name":{},"text":{"22":{},"52":{},"88":{},"119":{},"156":{},"187":{}},"component":{}}],["zulu",{"_index":5638,"title":{},"name":{},"text":{"63":{},"132":{},"200":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"This document is referring to a past Scout release. Please click here for the recent version. These pages document Eclipse Scout. Here you will find all Scout 22.0 related documentation, from getting started to architecture details to release upgrades. If you are interested in the documentation of another Scout version, use the version selector on the bottom left of this page. For older versions, please see Archived Versions. Read the Get Started Guide first to learn the difference between Scout Classic and Scout JS. This will help you to decide which tutorial is the right one to start with. Once you have completed the Hello Scout tutorial, you can continue with one of the following tutorials. Scout Classic Tutorials Hello Scout Classic Deploy to Tomcat One Day Tutorial Scout JS Tutorials Hello Scout JS Hello Scout JS Full Stack Hello Scout JS with CDN If you want to get serious about Scout, you should definitely have a look at the following documents. You will learn about best practices and architecture details and even find How Tos for some specific topics. To learn more about the functionality of the Scout plugins for various IDEs, have a look at the Scout SDK documents. Technical Guide Scout SDK Please read the following documents when doing a Scout release upgrade. The Release Notes describe the new features of the release. The Migration Guide explains how to migrate your code for a proper upgrade. Release Notes Migration Guide Scout is a mature framework and since we release at least one major version once a year, there are quite a few versions out there. This documentation describes Version 22 and newer. Older Scout Versions are not part of this documentation platform and have been archived. You’ll find them under the following links: Version 11 Browse Version 10 Browse Version 9 Browse Version 8 Browse Version 7 Browse Version 6 Browse Version 5.2 Browse Version 5 Browse Version 4 Browse Version 3.9 Browse","title":"Overview","component":"scout-docs","version":"22","name":"index","url":"/scout-docs/22/index.html","titles":[{"text":"Get Started","hash":"get-started","id":1},{"text":"Deepen Your Knowledge","hash":"deepen-your-knowledge","id":2},{"text":"Upgrade Your Version","hash":"upgrade-your-version","id":3},{"text":"Archived Versions","hash":"archived-versions","id":4}]},"2":{"id":2,"text":"This guide gets you through the “Hello World” Eclipse Scout application and shows you how to import the Scout demo application into your Eclipse IDE. In the second part, the Scout tooling available in the Eclipse IDE is described. Getting Started Scout Tooling Do you want to improve this document? Have a look at the sources on GitHub.","title":"Eclipse Scout User Guide","component":"scout-docs","version":"22","name":"scout_user_guide","url":"/scout-docs/22/eclipse-help/scout_user_guide.html","titles":[]},"3":{"id":3,"text":"The Eclipse Scout package also includes Scout specific tooling, the Scout SDK that is available for the Eclipse IDE. The Scout Tooling provides wizards to create new project and application components, adds code assistance to the Java Editor and comes with a NLS editor to manage all translated text entries of the application. Thanks to this tooling, developing Scout applications is made simpler, more productive and also more robust. Initially, a solid understanding of Java (and JavaScript for Scout JS) is sufficient to start developing Scout applications and only a rough understanding of the underlying Maven/Web technologies is required. The Scout SDK also helps developers to become more productive. Many repetitive and error prone tasks run automatically in the background or are taken care of by the component wizards of the Scout SDK. The application code created by the Scout SDK wizards helps to ensure that the resulting Scout application has a consistent and robust code base and is well aligned with the application model defined by the Scout runtime framework. To learn more about the wizards and the editor support follow the links provided below. Scout Wizards Java Editor Support NLS Editor Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk","url":"/scout-docs/22/eclipse-help/sdk.html","titles":[{"text":"Scout Tooling","hash":"_scout_tooling","id":1},{"text":"Effects on Productivity and Code Quality","hash":"effects-on-productivity-and-code-quality","id":2},{"text":"Learn More","hash":"learn-more","id":3}]},"4":{"id":4,"text":"The NLS Editor allows to edit the different properties files containing the translated text entries. It is a efficient way to edit all the property files for multilingual texts in one go. Search for the *.nls files in the shared projects. Select Open With NLS Editor in the context menu The screenshot below shows the opened NLS editor. In the first column the key values are shown that are used in accessing translations through TEXTS.get(\"key\"). The second columns holds the default translations followed by columns holding the translations for other translated languages. Actions on the top right corner: Refresh NLS Project Reload the content of the editor. Show NLS entry usage For each row, search in the Java code where the NLS Key is used. Results are displayed in the first column. New entry…​ Opens the New Text Entry Wizard New language…​ Opens the Add a Language Wizard Import…​ Import the NLS entries of an external file Export…​ Export the NLS entries to an external file Import and Export requires additional components. Hide inherited rows checkbox On the top of each column, the text fields allow you to filter the entries in the table. With the Reset button on the right you will empty those filters. The entries in the table can be directly edited by pressing F2 or double-clicking into a text cell. On each row it is possible to call following context menu: Modify Entry Opens the New Text Entry Wizard Find references to 'Xxx' Search in the Java code where the NLS Key is used. Remove Xxx Delete the NLS Entry from the files The mapping between the properties files is registered in the \"Text Provider Service\" class. Per default the files follow this pattern: .shared/src/main/resources//texts/Texts.properties where: is a chain of folders following the same convention as the Java source files with the package name. For example the org.eclipse.contacts.shared project uses org/eclipse/scout/contacts/shared as path. is an identifier of the language and the country. Some possible file names: Texts.properties is the default language Texts_de.properties is for German Texts_fr_BE will be for French in Belgium If NLS keys are used in the code that do not exist in a properties file, an ugly placeholder is displayed to the user. To find such missing translations the Menu Scout → Search missing text keys…​ may be handy. The result is listed in the Eclipse Search view. The search also takes the scope of each NLS key into account. So that the key is considered to be available there must be a TextProviderService with that key on the classpath of that module. Reported false positives can be suppressed using the following comment at the end of the corresponding line: NO-NLS-CHECK. Matches on that line are then not reported in future searches anymore. Go back to the Scout Tooling. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_editor_nls","url":"/scout-docs/22/eclipse-help/sdk_editor_nls.html","titles":[{"text":"NLS Editor","hash":"_nls_editor","id":1},{"text":"Accessing the NLS Editor","hash":"accessing-the-nls-editor","id":2},{"text":"The NLS Editor","hash":"the-nls-editor","id":3},{"text":"Action Buttons","hash":"action-buttons","id":4},{"text":"Default Mapping to Properties Files","hash":"default-mapping-to-properties-files","id":5},{"text":"Find missing NLS Keys","hash":"find-missing-nls-keys","id":6}]},"5":{"id":5,"text":"Scout uses the standard Java Editor of the Eclipse IDE. To ease the development, the Scout SDK provides additional features for the Java Editor. To create new Scout components that are represented by inner classes in the Scout framework, the Scout tooling extends the Java content assist of the Eclipse Java editor. The offered proposals are context specific. Depending on the current cursor position in the Java editor, possible Scout components are added to the proposal list. In a class representing a group box in a form, the Scout content assist adds proposals for various form fields. In a table class the content assist adds proposals to add table columns or context menus. Those proposals trigger the creation of inner classes for form fields, table columns or codes. The Eclipse content assist can be started by typing Ctrl+Space. To add additional form fields to a form the current edit position needs to be inside of a Scout group box. Typing Ctrl+Space then provides access to the most frequently used Scout widgets as shown in Figure 1. Figure 1. Proposals to create new form fields in a GroupBox When a template is selected, it is possible to customize it by navigating between the different Edit-Groups with the Tab Key (this works exactly like other templates in the Eclipse Editor). With this mechanism you can quickly define the class name, the parent class and other properties. To exit the Edit-Mode just press Enter. For adding new columns in a table set the current edit position inside a Scout table. The Scout table itself may be located inside of a TableField as shown in Figure 2 or can also be located inside of a Scout TablePage. Figure 2. Proposals to create new columns in a Table Next to adding columns the content assist shown in Figure 2 can also be used to add key stroke actions and menus to tables. Adding new Codes to an existing CodeType is supported by the content assist as shown in Figure 3. Figure 3. Proposals to create new codes in a CodeType When the the current edit position is inside the String parameter of the TEXTS.get() code, the content assist (opened with Ctrl + Space) provides support for the NLS entries as shown in Figure 4. Figure 4. Proposals corresponding to NLS Support. Selecting one of proposal entries (like \"DateOfBirth\" in the example) shows the available translations on the right side. To select a specific proposal entry you may double click on the entry or hit the Enter key. To create a new text entry select New text…​ at the end of the proposal list. Selecting \"New text…​\" then opens the NLS Entry Wizard. Go back to the Scout Tooling. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_editor_java","url":"/scout-docs/22/eclipse-help/sdk_editor_java.html","titles":[{"text":"Additions to the Java Editor","hash":"_additions_to_the_java_editor","id":1},{"text":"Create new Form Fields","hash":"sec-sdk_new_form_field","id":2},{"text":"Create new Table Columns","hash":"sec-sdk_new_table_column","id":3},{"text":"Create new Codes","hash":"create-new-codes","id":4},{"text":"NLS-Entry support","hash":"nls-entry-support","id":5}]},"6":{"id":6,"text":"The Scout SDK provides a set of wizards to create new Scout projects and various components for your Scout applications. To start any of these wizards press Ctrl+N or use menu File New Other…​. In the first wizard step type \"Scout\" into the Wizards field as shown in Figure 1. Figure 1. Selecting Scout Wizards in the Eclipse wizard dialog With the New Project Wizard a new Scout client server application project is created from scratch. To create new components such as Scout forms or pages the following component wizards are provided by the Scout SDK. New Form Wizard, includes creation of a form, a form data, a service and permissions. New Page Wizard, includes creation of a page and a page data. New LookupCall Wizard, includes creation of a lookup call and a lookup service. New CodeType Wizard New Permission Wizard For the Scout NLS support two additional wizards are provided by the Scout SDK. Content assistance for the String parameter in TEXTS.get() is added to the Java editor. There, the New Text Entry Wizard can be used to add translated texts. Adding additional translated languages with the Add a Language Wizard is handled in the NLS Editor. Go back to the Scout Tooling. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_wizard","url":"/scout-docs/22/eclipse-help/sdk_wizard.html","titles":[{"text":"Scout Wizards","hash":"_scout_wizards","id":1},{"text":"New Project Wizard","hash":"new-project-wizard","id":2},{"text":"Wizards for Scout Components","hash":"wizards-for-scout-components","id":3},{"text":"NLS Wizards","hash":"nls-wizards","id":4}]},"7":{"id":7,"text":"The New Scout CodeType wizard can be used to create a new code type classes. To start the wizard use File New Other…​ or press Ctrl+N as described in section Scout Wizards. Figure 1. The new CodeType wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.shared.helloworld has been selected in the Package Explorer. The wizard fields that then needs to be filled in manually are the Name, the First Argument and the Second Argument fields. By clicking on the Finish button the wizard is started and the specified component is created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven shared module used for the creation of the code type class. The default value is the src/main/java folder in the Maven shared module. Package The Java package that will contain the code type class. The Scout SDK will try to guess the package name from the current context. Name The name of the code type class. According to Scout conventions the class name ends with the suffix CodeType. Super Class The super class for the form. AbstractCodeType is the default value. First Argument The class used to identify this code type. Second Argument The class to identify individual codes within this code type. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.shared The MyCodeType class in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_wizard_code-type","url":"/scout-docs/22/eclipse-help/sdk_wizard_code-type.html","titles":[{"text":"New CodeType Wizard","hash":"_new_codetype_wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"8":{"id":8,"text":"The New Form wizard is be used to create a new form including a form data, permissions and and related service. To start the wizard use File New Other…​ or press Ctrl+N. Figure 1. The new Form Wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the form class. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the form class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared and server modules. Name The name of the form class. According to Scout conventions the class name ends with the suffix Form. Super Class The super class for the form. AbstractForm is the default value. Create FormData If ticked, a form data class will be created in the shared module. Create Service If ticked, a service interface is created in the shared module and a service implementation is created in the Maven server module. Create Permissions If ticked, read and update permissions are created in the Maven shared module. Shared Source Folder The source folder of the Maven shared module used for creation of the form data, the service interface and the permission classes. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for the service class creation. The default value is the src/main/java folder in the Maven server module. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyForm form class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared In folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld The IMyService service interface The ReadMyPermission permission class The UpdateMyPermission permission class The MyFormData form data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService service class in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_wizard_form","url":"/scout-docs/22/eclipse-help/sdk_wizard_form.html","titles":[{"text":"New Form Wizard","hash":"new-form-wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"9":{"id":9,"text":"The Add a Language wizard can be used to create additional translation files in order to localize the user interface. It can be started from the The NLS Editor. It is possible to crate one translation file that corresponds to the user locale, which are specified by a language and optionally a country (de, de_DE, de_CH and so on). Language The language of the locale. Country (optional) The country of the locale. Folder The location where the Texts properties file will be created. Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_wizard_language","url":"/scout-docs/22/eclipse-help/sdk_wizard_language.html","titles":[{"text":"Add a Language Wizard","hash":"_add_a_language_wizard","id":1}]},"10":{"id":10,"text":"The New Scout Lookup Call wizard can be used to create a lookup call and a corresponding lookup service. To start the wizard use File New Other…​ or press Ctrl+N as described in section Scout Wizards. Figure 1. The new LookupCall wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.shared.helloworld has been selected in the Package Explorer. The only wizard fields that then needs to be filled in manually are the Name and the Key Class fields. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven shared module used for the creation of the lookup call class. The default value is the src/main/java folder in the Maven shared module. Package The Java package that will contain the lookup call class. The Scout SDK will try to guess the package name from the current context and derive a matching package names for the Maven server module. Name The name of the lookup call class. According to Scout conventions the class name ends with the suffix LookupCall. Super Class The super class for the form. LookupCall is the default value. Key Class The class to be used for key values of the lookup call. Server Source Folder The source folder of the Maven server module used for the service class creation. The default value is the src/main/java folder in the Maven server module. Service Super Class The super class for the lookup service associated with this lookup call. The default value is AbstractLookupService. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.shared In folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld The MyLookupCall class The IMyLookupService interface In Maven module helloworld.server The MyLookupService service class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.server.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_wizard_lookupcall","url":"/scout-docs/22/eclipse-help/sdk_wizard_lookupcall.html","titles":[{"text":"New LookupCall Wizard","hash":"_new_lookupcall_wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"11":{"id":11,"text":"The NLS Entry wizard can be used to create or to modify a text entry that will be displayed to the user and the needs to be localized. It can be opened from: The NLS Editor by selecting \"New Entry\" or \"Modify Entry\". The Java Editor by using the proposal editor inside the string parameter of the TEXTS.get(\"\") code. Figure 1. Adding a new text with the New Entry wizard. Key Name This field holds the text key that is used to access translated text. default This field holds the default translated text for the key. Make sure to at least provide a translated text in this tab. French (France) Additional tabs to enter translations for other languages may be present. Adding additional languages is described in the text for the NLS editor. Copy key to the clipboard Select this checkbox to copy the key name to the clipboard and paste it later in your code. Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_wizard_nls-entry","url":"/scout-docs/22/eclipse-help/sdk_wizard_nls-entry.html","titles":[{"text":"NLS Entry Wizard","hash":"nls-entry-wizard","id":1}]},"12":{"id":12,"text":"The New Scout Page wizard can be used to create a new page and related classes. To start the wizard use File New Other…​ or press Ctrl+N. Figure 1. The new Page Wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the page. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the page class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared module. Name The name of the page class. According to Scout conventions the class name ends with the suffix TablePage (for subclasses of AbstractPageWithTable) or NodePage (for AbstractPageWithNodes). Super Class The super class for the form. AbstractPageWithTable is the default value. Shared Source Folder The source folder of the Maven shared module used for creation of the page data and the service interface. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for creation of the service implementation. The default value is the src/main/java folder in the Maven server module. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyTablePage page class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared The IMyService service interface in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld MyTablePageData page data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService implementation in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_wizard_page","url":"/scout-docs/22/eclipse-help/sdk_wizard_page.html","titles":[{"text":"New Page Wizard","hash":"new-page-wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"13":{"id":13,"text":"The New Scout Permission wizard can be used to create a new permission classes. To start the wizard use File New Other…​ or press Ctrl+N as described in section Scout Wizards. Figure 1. The new Permission wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.shared.helloworld has been selected in the Package Explorer. The only wizard fields that then needs to be filled in manually is the Name fields. By clicking on the Finish button the wizard is started and the specified component is created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven shared module used for the creation of the permission class. The default value is the src/main/java folder in the Maven shared module. Package The Java package that will contain the permission class. The Scout SDK will try to guess the package name from the current context. Name The name of the permission class. According to Scout conventions the class name ends with the suffix Permission. Super Class The super class for the form. BasicPermission is the default value. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.shared The MyPermission class in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_wizard_permission","url":"/scout-docs/22/eclipse-help/sdk_wizard_permission.html","titles":[{"text":"New Permission Wizard","hash":"_new_permission_wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"14":{"id":14,"text":"The New Scout Project wizard can be used to create a new Scout project from scratch. To open the wizard press Ctrl+N or use File New Other…​ and type \"Scout\" into the Wizards search field. Then, select the entry \"Scout Project\" and click on Next. This leads to the initial dialog of the New Scout Project wizard as shown in Figure 1. Figure 1. The new Project Wizard A detailed description of the indiviudal wizard fields of Figure 1 is provided in the next section. By clicking on the Finish button the wizard is started and a new Scout client server application is created in the form of a Maven multi-module project. All fields of the Figure 1 are initially filled with default values. Group Id Maven groupId used for all created projects. The default value is org.eclipse.scout.apps. Artifact Id Maven artifactId for the parent project. The additional projects are derived from this name. The default value is helloworld. Display Name The name of the application presented to the user. This name is shown in the Browser title bar. The default value is \"My Application\" With the Project Location group box, you can control where the project will be created. Unchecked the Use default Workspace location checkbox to enter an other value in the Target Directory Field. The Browse…​ button can help you to find the appropriate path. With the Figure 1 wizard a complete Maven multi-module project is created. Using the default artifact Id helloworld the following Maven modules are created. Maven module helloworld Contains the project’s parent pom.xml file Maven module helloworld.client Contains model components of the client application in src/main/java and model tests in src/test/java. The class HelloWorldForm in package org.eclipse.scout.apps.helloworld.client.helloworld is an example of a model class. Maven module helloworld.shared Contains components needed in both the client and the server application. For examples see the IHelloWorldService interface in src/main/java and class HelloWorldFormData in src/generated/java. The Texts.nls file that can be opened in the Scout NLS Editor. Maven module helloworld.server Contains the model components of the server application in src/main/java and model tests in src/test/java. The class HelloWorldService in package org.eclipse.scout.apps.helloworld.server.helloworld is an example of such a model class. Maven module helloworld.server.app.dev Contains all components to run the Scout server application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the Scout server application. The file pom.xml bundles the Jetty web server with the server application. The file [webapp] dev server.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.server.app.war Contains all components to create a Scout server WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the server configuration. The file pom.xml is used to build the Scout server WAR file. Maven module helloworld.ui.html Contains servlet filters and the HTML pages as well as custom CSS and JavaScript files for the Scout UI Server. See class UiServletFilter in src/main/java and folder WebContent in source/main/resources. The file js build.launch contains the launch configuration for the Eclipse IDE that executes the JavaScript build. Maven module helloworld.ui.html.app.dev Contains all components to run the Scout UI application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the application. The file web.xml in folder src/main/webapp contains the web configuration for the application. The file pom.xml bundles the Jetty web server with the application. The file [webapp] dev ui.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.ui.html.app.war Contains all components to create a Scout UI WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the application configuration. The file web.xml in folder src/main/webapp contains the web configuration. The file pom.xml is used to build the Scout UI WAR file. Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"sdk_wizard_project","url":"/scout-docs/22/eclipse-help/sdk_wizard_project.html","titles":[{"text":"New Scout Project Wizard","hash":"new-scout-project-wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"15":{"id":15,"text":"To get started with Eclipse Scout, we propose that you first go through the “Hello World” tutorial and then follow the tutorial to import the existing Scout demo applications. Hello World Tutorial Import the Scout Demo Applications Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"tutorial","url":"/scout-docs/22/eclipse-help/tutorial.html","titles":[{"text":"Getting Started","hash":"getting-started","id":1}]},"16":{"id":16,"text":"With this tutorial you will learn how to import the Scout Demo applications into your workspace. The tutorial consists of the following two parts: Install the Scout Demo applications Run the Scout demo from your IDE In the first part of the tutorial we import the demo applications using the Oomph Eclipse installer tool. In the Eclipse IDE open the Import wizard with menu File Import…​. This opens the dialog shown in Figure 1. Next, under folder Oomph select the node Projects into Workspace and click the Next button. Figure 1. The Import Wizard in Eclipse. Now select Scout Demo App, check in the table below that 'Stream' shows the desired Scout version and click Next. Figure 2. Select Scout Demo App On the next wizard page, select the Show all variables check box in the bottom left corner. Figure 3. \"Variables\" Step of the Importer. Before you proceed make sure that all shown variables are set appropriately for your use case. Git clone location rule: “Located in a folder named '.git/' within the workspace folder” Target Platform: “None” JRE Location: Path to your Java 11 or 17 JRE Scout Demo App Github repository: “HTTPS (read-only, anonymous)” Once you finished setting the variables click Next. This leads to the Confirmation dialog. This last step can be completed by clicking on Finish. The Oomph installer first makes sure that all necessary Scout components and M2E connectors are available. In case one or more components are missing, Oomph will first download and install them. This triggers a restart request as shown in Figure 4. If the dialog does not automatically appear, click on the small icon in the status bar on the bottom as shown in Figure 5. Figure 4. Restart of the IDE after installation. Figure 5. Status icon To complete the installation click Finish. If your IDE needs to be restarted, select the same workspace in the Eclipse Launcher dialog. After the restart Oomph will continue to download and install the Scout demo applications showing the progress in the Eclipse importer dialog. Once the download and installation has completed you can close the dialog with clicking the Finish button. After the Setup of the \"Scout Demo App\", a lot of projects are materialized in the workspace (see the screenshot in Figure 6). The projects are organized in three working sets: Demo App: Contacts The projects corresponding to the Scout Demo Application \"Contacts\". Demo App: Widgets The projects corresponding to the Scout Demo Applications \"Widgets\" and \"JSWidgets\". Demo Docs The scout documentation and the project containing most of the code snippets included in the documentation. Figure 6. Projects in the workspace after the \"Scout Demo App\" setup. If you do not see the workingsets, you might need to select \"Top Level Elements Working Sets\" from the Menu as displayed in Figure 7 Figure 7. Select \"Working Sets\" as \"Top Level Elements\" in the \"Package Explorer\". With the Scout demo installed in our workspace we are now ready to start the applications from within our IDE. Open the Run As menu as shown in Figure 8. There are 3 launch groups available, one for each application. Each launch group will start all the necessary builds and servers. Now select [contacts] all (Windows or Unix variant) to run the Contacts application. Figure 8. Start the Contacts application. Once the startup sequence of the Contacts application has completed the console view in your Eclipse IDE should look like Figure 9. Figure 9. Console view after starting the Contacts demo. With the Contacts demo running in the IDE open the application in your favorite browser via URL http://localhost:8082. To get the screen shown in Figure 10 first click on the [folder]_Persons node and then double click on the ''Alice'' row. Figure 10. The Contacts application. Play with the Contacts application. This provides a good overview of a typical Scout application. You can browse through the data, open different forms and add/change entities. Also have a quick look at the code. The list on the left side of the application containing the nodes Persons and Organizations is implemented in class ContactOutline as shown in Listing 1. Listing 1. ContactOutline implementation. @ClassId(\"303c0267-3c99-4736-a7f5-3097c5e011b6\") public class ContactOutline extends AbstractOutline { @Override protected void execCreateChildPages(List> pageList) { // pages to be shown in the navigation area of this outline pageList.add(new PersonTablePage()); (1) pageList.add(new OrganizationTablePage()); } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Contacts\"); } @Override protected String getConfiguredIconId() { return Icons.Folder; } } If you have clicked on the Persons node a page with all available persons is shown. This page is implemented in class PersonTablePage and the dialog to show/edit persons is implemented in class PersonForm. This is the end of the getting started guide. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"tutorial_existingdemo","url":"/scout-docs/22/eclipse-help/tutorial_existingdemo.html","titles":[{"text":"Import the Scout Demo Applications","hash":"_import_the_scout_demo_applications","id":1},{"text":"Install the Scout Demo Applications","hash":"install-the-scout-demo-applications","id":2},{"text":"Setup result","hash":"setup-result","id":3},{"text":"Run the Contacts Demo Application","hash":"run-the-contacts-demo-application","id":4},{"text":"Start the application in the IDE","hash":"start-the-application-in-the-ide","id":5},{"text":"Use the Contacts Demo in a Browser","hash":"use-the-contacts-demo-in-a-browser","id":6},{"text":"What’s Next?","hash":"whats-next","id":7}]},"17":{"id":17,"text":"With this tutorial you will learn how to create your first Scout application. First, Node.js needs to be installed as Scout uses it to build web assets. So if you don’t have it yet, visit the Node.js download site, choose the package for your platform and install it on your local machine. Make sure the Node.js installation is on the PATH. You can verify it by using your command line: c:\\> node -v v16.13.0 Scout uses pnpm 6 as package manager. Therefore, install it into your Node installation by using your command line: npm install -g pnpm and verify that it was installed successfully with: c:\\> pnpm -v 6.22.2 Start your Eclipse IDE and select an empty directory for your workspace as shown in Figure 1. This workspace directory will then hold all the project code for the Hello Scout application. Once the Eclipse IDE is running, it will show the Java perspective. Figure 1. Select a new empty folder to hold your project workspace To create a new Scout project, select the menu File New Project…​ and type Scout Project in the wizard search field. Select the Scout Project wizard and press Next. The New Scout Project wizard is then started as shown in Figure 2. Figure 2. The new Scout project wizard. In the New Scout Project wizard you have to enter a Group Id, Artifact Id and a Display Name for your Scout project. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). For the Hello Scout application just use the already pre-filled values and ensure the user interface programming language is set to Java as sown in Figure 2. Then click the Finish button to let the Scout SDK create the initial project code for you. Depending on your Eclipse installation, some Maven plugin connectors may initially be missing. In that case, a dialog as shown in Figure 3 appears. In order to resolve the selected connectors and continue, click on Finish. Afterwards, confirm the installation, accept the license and the message that some content has not been signed. Finally, the installation of the maven plugin connectors requires a restart of the Eclipse IDE. Figure 3. The Maven plugin connector installation dialog. After the New Scout Project wizard has created the Maven modules for the Hello Scout application, the code is compiled by the Eclipse IDE. You can see the created Maven modules in the Package Explorer as shown in Figure 4. Figure 4. The initial set of Maven modules created for the Hello Scout application. After the compilation, you can start the Scout application for the first time. Since the Hello Scout app consists of a backend and a frontend, two servers need to be started. Before the frontend server can deliver any JavaScript code to the browser, the JavaScript build needs to be executed as well. You could start each launch configuration separately, but for the sake of convenience there is a launch group available which starts all at once. To start the launch group use the Run As menu as shown in Figure 5. Figure 5. Starting the Hello Scout application. The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites. Once the JS build has been completed successfully, the frontend and backend servers will be started automatically. The servers are ready as soon as the console shows Server ready. You can now access the Hello Scout application by navigating to http://localhost:8082/ in your favorite web browser. The Hello Scout application is then presented as shown in Figure 6. Figure 6. The Hello Scout application in the browser. In the next tutorial, you will learn how to import the Scout demo applications into your workspace. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"22","name":"tutorial_helloworld","url":"/scout-docs/22/eclipse-help/tutorial_helloworld.html","titles":[{"text":"Hello World Tutorial","hash":"_hello_world_tutorial","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Add pnpm","hash":"add-pnpm","id":3},{"text":"Create a Scout Project","hash":"create-a-scout-project","id":4},{"text":"What’s Next?","hash":"whats-next","id":5}]},"18":{"id":18,"text":"This document is referring to a past Scout release. Please click here for the recent version. Eclipse Scout is a framework that can be used in several ways. Before you can start, you should decide which way you want to take. First of all, you need to decide which programming language you want to use for the user interface. Do you prefer Java or JavaScript? If you choose Java, your user interface code runs on a Java server. Scout takes care of sending your UI to the browser and displaying it. It also automatically directs the user interactions to the Java server and lets you process them. This approach is called Scout Classic. If you choose JavaScript, your user interface code runs in the browser. You still don’t work with HTML elements directly. Instead, you use the same widget model as a Scout Java developer without needing a Java server. This approach is called Scout JS. No matter what you choose, you can always adjust the existing widgets or write completely new widgets using HTML, CSS and JavaScript. In addition to the programming language, you should think about whether you want to go full stack (frontend, backend) or just focus on one tier. For example, you could use Scout JS on the frontend, Scout on the backend and a REST api for the communication. Or maybe you prefer to use an existing REST api and just want to use the powerful Scout widgets for the frontend. Or maybe you don’t need a backend at all because you plan to implement an offline app. Have you made your decision? Great! Then it’s now time to really get started. Depending on your decision regarding the programming language, we recommend that you start with one of the following tutorials. Both tutorials guide you through the installation process, and you will learn how to setup your first Scout Classic or Scout JS project. Hello Scout Classic Hello Scout JS Even though an IDE is not required to work with Scout it is recommended to use one because it makes your developer life easier. There are Scout plugins available for IntelliJ and Eclipse. For Scout Classic either one is fine. For Scout JS we recommend IntelliJ because the JavaScript support of Eclipse is very poor. Unfortunately, the IntelliJ Community Edition does not contain JavaScript support, so you would need IntelliJ Ultimate. There is a trial if you want to try it. You can also use Visual Studio code or any other IDE or editor but there are no official Scout plugins for these editors. All Scout artifacts are published on public repositories. The Scout Java packages are Maven modules and available on Maven Central. The Scout JavaScript packages are npm modules and available on npmjs. Just include these dependencies in your project and import the required Java or JavaScript classes. The Scout npm modules contain prebuilt scripts, stylesheets and other necessary resources in the dist folder. There are several CDNs out there that serve the content of all npm modules. A popular one is jsDelivr. Thanks to such CDNs you can easily download the prebuilt Scout assets or directly include them in your HTML files. https://www.jsdelivr.com/package/npm/@eclipse-scout/core?path=dist Even though this is a convenient way to get the Scout assets, we still recommend getting the artifacts via npm, because it gives you more control and flexibility to work with. If you want to learn more about using a CDN, please see Hello Scout for CDN.","title":"Get Started with Eclipse Scout","component":"scout-docs","version":"22","name":"getstarted","url":"/scout-docs/22/getstarted/getstarted.html","titles":[{"text":"Choose Wisely","hash":"choose-wisely","id":1},{"text":"Installation","hash":"installation","id":2},{"text":"IDE","hash":"ide","id":3},{"text":"Artifacts","hash":"artifacts","id":4},{"text":"CDN","hash":"cdn","id":5}]},"19":{"id":19,"text":"This document is referring to a past Scout release. Please click here for the recent version. At some point during the application development you will want to install your software on a machine that is intended for productive use. This is the moment where you need to be able to build and package your Scout application in a way that can be deployed to an application server. As Scout applications just need a servlet container to run, Scout applications can be deployed to almost any Java application server. For the purpose of this tutorial we will use Apache Tomcat. First you need a Tomcat installation. If you do not yet have such an installation, you may want to read and follow the instructions provided in Appendix A. Second you need to decide if the users of your application should communicate with the Scout frontend server using HTTPS. We strongly recommend to use HTTPS for any productive environment. This is why the Hello Scout applications are configured to use HTTPS for production by default. In case you don’t want to use HTTPS the application must be slightly modified. Then you can skip the next section and instead follow the instructions in section Update the Scout Application to work with HTTP. As a default Tomcat installation is configured to use HTTP only, you need to verify if the installation is properly configured for HTTPS too. In case HTTPS support is already enabled for your Tomcat installation, you may skip the next section. More details on the SSL configuration can be found in the Tomcat Documentation to enable SSL/TLS. This section describes the creation and usage of a self-signed certificate in a localhost setting. Create a keystore file with a self-signed certificate. Adapt the HTTPS connector port in Tomcat’s server.xml configuration. Export the self-signed certificate from the keystore. Import the self-signed certificate into the Java certificate store. The first step is to create a self-signed certificate using the keytool provided with the Java runtime. The example command line below will create such a certificate using the alias tomcat_localhost and place it into the keystore file tomcat_localhost.jks keytool.exe -genkey -keyalg RSA -dname CN=localhost -alias tomcat_localhost -keystore tomcat_localhost.jks -keypass changeit -storepass changeit The second step is to uncomment the HTTPS connector element in the Tomcat’s server.xml configuration file. Make sure parameter keystoreFile points to your newly created keystore file (if you are using a Windows box, make sure not to use the backslash characters in the path to the keystore). After a restart of Tomcat you should then be able to access Tomcat on https://localhost:8443/manager/html. The third step is to export the newly created self-signed certificate from the tomcat_localhost.jks keystore file into the tomcat_localhost.der certificate file. keytool.exe -exportcert -alias tomcat_localhost -storepass changeit -keystore tomcat_localhost.jks -file tomcat_localhost.der In the last step add the self-signed certificate to the known certificates of the Java runtime. Make sure you modify the cacerts file of the Java runtime that is used in your Tomcat installation and modify the path to the cacerts file accordingly. keytool.exe -import -alias tomcat_localhost -trustcacerts -storepass changeit -keystore C:\\java\\jdk11\\lib\\security\\cacerts -file tomcat_localhost.der Your Tomcat installation is now properly configured for HTTPS. In case the Scout frontend server cannot access the Scout backend server, your self-signed certificate might be missing in the Java installation used by Tomcat. To verify that the certificate has been included in the file cacerts file use the following command. keytool.exe -list -storepass changeit -keystore C:\\java\\jdk11\\lib\\security\\cacerts | find \"localhost\" Once you no longer need the self-signed certificate file in your Java installation make sure to remove the certificate again: keytool.exe -delete -alias tomcat_localhost -storepass changeit -keystore C:\\java\\jdk11\\lib\\security\\cacerts If you prefer to work with HTTP only, you need to modify the security settings of your Scout application. This can be done with the steps described below. In file config.properties (in the folder helloscout.ui.html.app.war/src/main/resources): Add the property scout.auth.cookieSessionValidateSecure=false to disable the check for an encrypted channel (HTTPS). Change the scout.backendUrl property to use HTTP instead of HTTPS and change the port according to your Tomcat setup, typically 8080. In file web.xml (in the folder helloscout.ui.html.app.war/src/main/webapp/WEB-INF) delete the true flag in the element. In file web.xml (in the folder helloscout.server.app.war/src/main/webapp/WEB-INF) delete the true flag in the element. More on this topic can be found in the Scout Architecture Documentation. You are now ready to move the Hello Scout application from our development environment to a productive setup. The simplest option to move our application into the 'wild' is to build it using Maven. This produces two WAR files [1]. The first WAR file contains the Scout backend server with all business logic. The second WAR file contains the Scout frontend server that is responsible for communicating with the web browser of the user. To start the build open the directory containing the module helloscout in the command line and execute the Maven command mvn clean verify. This starts the compilation, executes all test cases and bundles the result into two WAR files. As soon as the build is reporting success (this may take a few minutes) you can find the built WAR files: The Scout backend WAR file org.eclipse.scout.apps.helloscout.server.war in folder helloscout/helloscout.server.app.war/target The Scout frontend WAR file org.eclipse.scout.apps.helloscout.ui.html.war in folder helloscout/helloscout.ui.html.app.war/target To see the new files within Eclipse you may need to refresh the target folder below each project using the F5 keystroke. As the final step of this tutorial, you have to deploy the two WAR files representing your Hello Scout application to a Tomcat web server. To verify a running Tomcat instance, type http://localhost:8080/ into the address bar of the web browser of your choice. You should then see the page shown in Figure 1. Figure 1. The Tomcat shown after a successful installation. After clicking on the Manager App button (highlighted in red) the login box is shown in front. A successful login shows the \"Tomcat Web Application Manager\". Once the web browser displays the successful running of your Tomcat instance, switch to its Manager App by clicking on the button highlighted in Figure 1. After entering user name and password the browser will display the Tomcat Web Application Manager as shown in Figure 2. If you don’t know the credentials, you may look it up in the file tomcat-users.xml as described in Directories and Files. Figure 2. The “Tomcat Web Application Manager”. The WAR files to be deployed can then be selected using button “Choose File” highlighted in red. After logging into Tomcat’s manager application, you can select the WAR files to be deployed using the button Choose File as shown in Figure 2. Then pick your just built org.eclipse.scout.apps.helloscout.server.war, close the file chooser and click on the button Deploy (the one located directly below button Choose File) to deploy the application to the Tomcat web server. Then repeat this step with the second WAR file org.eclipse.scout.apps.helloscout.ui.html.war. This will copy the selected WAR files into Tomcat’s webapps directory and unpack its contents into subdirectories with the same name as the WAR file. You can now connect to the application using the browser of your choice by navigating to: http://localhost:8080/org.eclipse.scout.apps.helloscout.ui.html/ or https://localhost:8443/org.eclipse.scout.apps.helloscout.ui.html/ if you have chosen to configure HTTPS for the Tomcat installation. In this case you might need to accept your self-signed certificate as the browser does not yet trust it. Figure 3. The \"Hello Scout\" login page. Then you will see the login page as shown in Figure 3. Two users have been predefined: admin with password admin and scott with password tiger. You can find this configuration in the config.properties file of the application. In a productive environment it is recommended to deploy the server and the user interface into two different servlet containers running on dedicated machines. This is because these two tiers have different requirements on resources, load balancing and access protection. Furthermore, it is strongly recommended using an encrypted connection (e.g. TLS 1.3 [2]) between client browsers and the Scout frontend server AND between the Scout frontend and backend server! Apache Tomcat is an open source servlet container that is a widely used. In case you are interested in getting some general context around Tomcat you could start with the Wikipedia article.[3]. Then get introduced to its core component “Tomcat Catalina”.[4]. before you switch to the official Tomcat homepage.[5]. This section is not really a step by step download and installation guide. Rather, it points you to the proper places for downloading and installing Tomcat. We recommend to work with Tomcat version 9.0. Start your download from the official download site.[6]. Figure 4. A successful Tomcat installation. Once you have downloaded and installed Tomcat 9 (see the sections below for plattform specific guidelines) you can start the corresponding service or daemon. To verify that Tomcat is actually running open a web browser of your choice and type http://localhost:8080 into the address bar. You should then see a confirmation of the successful installation according to Figure 4. According to the Tomcat setup installation for Windows.[7] download the package “32-bit/64-bit Windows Service Installer” from the Tomcat 9 download site. Then, start the installer and accept the proposed default settings. For installing Tomcat on OS X systems download the “tar.gz” package from the Tomcat 9 download site. Then, follow the installation guide.[8] provided by Wolf Paulus. For Linux systems download the “tar.gz” package from the Tomcat 9 download site. Then, follow the description of the Unix setup.[9] to run Tomcat as a daemon. If you use Ubuntu, you may want to follow the tutorial.[10] for downloading and installing Tomcat provided by Lars Vogel. Tomcat’s installation directory follows the same organisation on all platforms. Here, we will only introduce the most important aspects of the Tomcat installation for the purpose of this tutorial. Figure 5. The organisation of a Tomcat installation including specific files of interest. As an example, a web app called \"helloworld_server\" is contained in subdirectory \"webapps\". Note that some folders and many files of a Tomcat installation are not represented in Figure 5. We just want to provide a basic understanding of the most important parts to operate the web server in the context of this tutorial. In the bin folder, the executable programs are contained, including scripts to start and stop the Tomcat instance. The conf folder contains a set of XML and property configuration files. The file server.xml represents Tomcat’s main configuration file. It is used to configure general web server aspects such as the port number of its connectors for the client server communication. For the default setup, port number 8080 is used for the communication between client applications and the web server. The file tomcat-users.xml contains a database of users, passwords and associated roles. Folder logs contains various logfiles of Tomcat itself as well as host and web application log files. The folder needed for deploying web applications into a Tomcat instance is called webapps. It can be used as the target for copying WAR files into the web server. The installation of the WAR file then extracts its content into the corresponding directory structure as shown in Figure 5. Finally, the folder work contains Tomcat’s runtime cache for the deployed web applications. Tomcat comes with the pre installed Manager App. This application is useful to manage web applications and perform tasks such as deploying a web application from a WAR file, or starting and stopping installed web applications. A comprehensive documentation for the Manager App can be found on the Tomcat homepage.[11]. Here we only show how to start this application from the homepage of a running Tomcat installation. To access this application you can switch to the Manager App with a click on the corresponding button on the right side as shown in Figure 4. Before you are allowed to access this application, you need to provide credentials of a user associated with Tomcats’s manager-gui role. Listing 1. Tomcat Users configuration file \"tomcat-users.xml\". To get at user names and passwords you can open file tomcat-users.xml located in Tomcat’s conf directory. In this file the active users with their passwords and associated roles are stored. See Listing 1 for an example. From the content of this file, you see that user admin has password s3cret and possesses the necessary role manager-gui to access the Manager App. If file tomcat-users.xml does not contain any user with this role, you can simply add new user with this role to the existing users. Alternatively, you also can add the necessary role to an existing user. Just append a comma to the existing roles followed by the string manager-gui. You will need to restart your Tomcat application after adapting the content of file tomcat-users.xml. 1. Web application Archive (WAR): http://en.wikipedia.org/wiki/WAR_file_format_%28Sun%29 2. TLS: https://en.wikipedia.org/wiki/Transport_Layer_Security 3. Apache Tomcat Wikipedia: http://en.wikipedia.org/wiki/Apache_Tomcat. 4. Mulesoft’s introduction to Tomcat Catalina: http://www.mulesoft.com/tomcat-catalina. 5. Apache Tomcat Homepage: http://tomcat.apache.org/ 6. Tomcat 9 Downloads: http://tomcat.apache.org/download-90.cgi 7. Tomcat Windows setup: http://tomcat.apache.org/tomcat-9.0-doc/setup.html#Windows 8. Installing Tomcat on macOS: https://wolfpaulus.com/?s=tomcat 9. Tomcat Linux setup: http://tomcat.apache.org/tomcat-9.0-doc/setup.html#Unix_daemon 10. Apache Tomcat Tutorial: http://www.vogella.com/articles/ApacheTomcat/article.html 11. The Tomcat Manager Application: http://tomcat.apache.org/tomcat-9.0-doc/manager-howto.html.","title":"Build Scout App and Deploy to Tomcat","component":"scout-docs","version":"22","name":"deploy-to-tomcat","url":"/scout-docs/22/getstarted/deploy-to-tomcat.html","titles":[{"text":"Verify the Container Security Settings","hash":"verify-the-container-security-settings","id":1},{"text":"Create and Install a Self-Signed Certificate","hash":"create-and-install-a-self-signed-certificate","id":2},{"text":"Update the Scout Application to work with HTTP","hash":"update-the-scout-application-to-work-with-http","id":3},{"text":"Create WAR Files","hash":"create-war-files","id":4},{"text":"Deploy to Tomcat","hash":"sec-helloworld_deploy","id":5},{"text":"Appendix A: Apache Tomcat Installation","hash":"apx-install_tomcat","id":6},{"text":"Platform Specific Instructions","hash":"platform-specific-instructions","id":7},{"text":"Directories and Files","hash":"apx-tomcat_dirs_and_files","id":8},{"text":"The Tomcat Manager Application","hash":"apx-tomcat_manager_app","id":9}]},"20":{"id":20,"text":"This document is referring to a past Scout release. Please click here for the recent version. A typical approach to work with Scout JS is to use a package manager (e.g. pnpm) to download the modules and a bundler (e.g. webpack) to build them. Thanks to the Scout CLI this task is straightforward. The main advantage is the simplified development process. You can use Less variables from Scout (e.g. the color palette). Individual source files can be imported directly which facilitates code completion. It also enables you to use modern code but still target older browsers by the usage of Babel. If you don’t need all that and just want to include Scout as a script in your html page (as in the early days), you can do so, too! This article shows how to achieve this. A live demo of the app we’ll create is published on CodePen. First, you need to get the prebuilt Scout assets like scripts, stylesheets, fonts etc. These assets are part of the Scout npm modules and located in the dist folder. To get them you can either install the Scout modules using a package manager and take the necessary resources from the dist folder. Or you could use a CDN and download them manually from there or even link to that CDN in your html files. In this example we are going to use a CDN directly. There are several CDNs out there that serve the content of all npm modules. Popular are jsDelivr or unpkg which we will use here. Using such a CDN you can easily access all Scout assets: @eclipse-scout/core/dist. Now let’s create a new html file called index.html and paste the following content: Hello Scout CDN (1) (3) (2) (2) (1) (4) 1 As you can see, we include the Scout assets, namely eclipse-scout-core-theme.css and eclipse-scout-core.js. 2 Additionally, we need to include all dependencies, which are jquery and sourcemapped-stacktrace.js. These are the dependencies listed in the package.json of @eclipse-scout/core. 3 Finally, we need to add an empty scout where the html content generated by Scout will be placed. 4 The script hello.js contains the code of our application. Now create a file called hello.js and paste the following code: class Desktop extends scout.Desktop { constructor() { super(); } _jsonModel() { return { objectType: 'Desktop', navigationHandleVisible: false, navigationVisible: false, headerVisible: false, views: [ { objectType: 'Form', displayHint: 'view', modal: false, rootGroupBox: { objectType: 'GroupBox', borderDecoration: scout.GroupBox.BorderDecoration.EMPTY, fields: [ { id: 'NameField', objectType: 'StringField', label: 'Name' }, { id: 'GreetButton', objectType: 'Button', label: 'Say Hello', keyStroke: 'enter', processButton: false } ] } } ] }; } _init(model) { super._init(model); this.widget('GreetButton').on('click', event => { let name = this.widget('NameField').value || 'stranger'; scout.MessageBoxes.openOk(this.session.desktop, `Hello ${name}!`); }); } } scout.addObjectFactories({ 'Desktop': () => new Desktop() }); new scout.App().init({ bootstrap: { textsUrl: 'https://unpkg.com/@eclipse-scout/core@{node-version}/dist/texts.json', localesUrl: 'https://unpkg.com/@eclipse-scout/core@{node-version}/dist/locales.json' } }); As you can see, there are no imports at the top. Instead, we are using the global variable scout, that is automatically put on the window object, to reference Scout classes. Furthermore, we have to include the texts.json. This file needs to be included to make sure the texts used by Scout can be resolved for the language the user is using. In this case it is necessary for the text Ok which is visible on the message box when you click the button. Optionally the locales.json from Scout can be imported so that the application knows about locale dependent formatting (e.g. for numbers or dates). That’s it. This is all you need to do to use Scout in a plain html site without the need of build tools. If you like you could adjust the example to use the dark theme by using eclipse-scout-core-theme-dark.css instead of eclipse-scout-core-theme.css. Or you could try to add a Chart by including the @eclipse-scout/chart module. The procedure is the same: link to the @eclipse-scout/chart assets (script, stylesheet, texts) and include its dependencies, that are referenced by its package.json. The result could look like this: Eclipse Scout Chart on CodePen. Have fun!","title":"Hello Scout JS with a CDN","component":"scout-docs","version":"22","name":"helloscout-cdn","url":"/scout-docs/22/getstarted/helloscout-cdn.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Preparation","hash":"preparation","id":2},{"text":"Include Assets","hash":"include-assets","id":3},{"text":"Add your Code","hash":"add-your-code","id":4},{"text":"Summary","hash":"summary","id":5}]},"21":{"id":21,"text":"This document is referring to a past Scout release. Please click here for the recent version. In this tutorial we will create a Scout JS application consisting of a JavaScript frontend connected using REST to a Java backend that stores the data in a database. If you don’t know what Scout JS is yet, please read the Get Started Guide first. We will create the application using IntelliJ. The generated application can display persons loaded from a database. These persons can be edited or deleted and new persons can be added. This section guides you through the installation of the tools required to start the Hello Scout JS Full Stack application. First, Node.js needs to be installed as Scout uses it to build web assets. So if you don’t have it yet, visit the Node.js download site, choose the package for your platform and install it on your local machine. Make sure the Node.js installation is on the PATH. You can verify it by using your command line: c:\\> node -v v16.13.0 Scout uses pnpm 6 as package manager. Therefore, install it into your Node installation by using your command line: npm install -g pnpm and verify that it was installed successfully with: c:\\> pnpm -v 6.22.2 If you have no IntelliJ yet, you can download it from the JetBrains download site. We recommend selecting the Ultimate edition to have the JavaScript support included in the IDE. There is a 30-day trial if you have no licence. For this tutorial you can also use the free Community Edition, but it requires some extra steps indicated. Install or extract the package and start IntelliJ (see Run IntelliJ IDEA for the first time for instructions). Follow the instructions until the Welcome to IntelliJ IDEA screen is shown. On the left side switch to Plugins, search for Eclipse Scout and press the green Install button. In case a Third-Party Plugins Privacy Notice is shown, press Accept. The Scout plugin does not collect or process any personal data. Afterwards, the plugin is being downloaded from the JetBrains Marketplace and installed locally. As soon as this is completed, press the Restart IDE button. The same can also be achieved by navigating to File | Settings | Plugins in case you already have an existing IntelliJ project running. Congratulations! You have successfully set up IntelliJ IDEA for Scout development. Start your IntelliJ (if not already running) and in the Welcome to IntelliJ IDEA screen click on New Project. The New Project wizard starts. The same can also be achieved from the menu File | New | Project…​ if an existing project is open already. On the left side select the Scout type. You have to enter a Group Id, Artifact Id and a Display Name for your Scout project as shown in Figure 1. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). Figure 1. The new Scout project wizard. For the Hello Scout JS Full Stack application use helloscoutjs as the artifact id and ensure the user interface programming language is set to JavaScript as sown in Figure 1. You can keep the other default values. Then click the Next button. Figure 2. Specify name and location of the new project. On the second page please specify project name and location and press Finish. The Scout plugin then creates the initial project content for you (you will see some Maven build output). Wait until all tasks have completed. Afterwards, you will find the created Scout modules in the Project view as shown in Figure 3. Figure 3. The initial set of Maven modules created for the Hello Scout application. If the modules are not automatically created as indicated in Figure 3, right click on the root pom.xml and click Add as Maven Project. The Hello Scout JS Full Stack application’s backend accesses a local Derby database using jOOQ. For this to work, you first have to setup the local database. This is done be executing the database setup application. For this click the Add Configuration…​ menu on the top as shown in Figure 4. In the dialog, expand the Application type on the left side, select the prepared run configuration Setup local dev database and confirm with Ok. Then click on the green triangle symbol directly right of the Add Configuration…​ menu. This will launch the db setup application which creates a new Derby database in the helloscoutjs.app.dev/db folder. Figure 4. Selecting the db setup run configuration Now you are ready to start the Scout JS application. This includes downloading the necessary JavaScript dependencies, executing the Java and JavaScript builds and launching the Scout development server. It serves the JavaScript assets to the browser and acts as backend for the REST calls coming from the user interface. You could start each step separately, but for the sake of convenience, there is a compound run configuration available which performs all these tasks (IntelliJ Ultimate only, see below for instructions if using the Community Edition). To use it switch the run configuration by clicking the run configuration menu on the top again. Now there is no need to open the dialog as the available run configurations are shown in a dropdown menu. Select the launch all compound and run it using the green triangle button. The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites and check the IntelliJ settings in File | Settings | Languages & Frameworks | Node.js and NPM. The launch all compound uses JavaScript run configurations which are only available in IntelliJ Ultimate. If using the Community Edition, follow these instructions instead: Execute npm run pnpm-install on the command line in the root of your project (next to the pnpm-workspace.yaml) to install all JavaScript dependencies. Then execute npm run build:dev:watch in the helloscoutjs.app module to start the JavaScript build and watcher. The watcher keeps on running and will continuously update the JavaScript assets as you change your JavaScript source files (hot-code-replace). Finally start the run configuration Launch helloscoutjs dev server. Once the JS build has been completed (this may take a while for the first time as some dependencies need to be downloaded) and the server has been started, the Hello Scout JS Full Stack application can be accessed by navigating to http://localhost:8084/ in your favorite web browser. The Hello Scout JS Full Stack application is then presented as shown in Figure 5. Figure 5. The Hello Scout JS Full Stack application in the browser. To learn more about Scout JS, we recommend having a look at the other Scout JS Hello World tutorials and the Technical Guide. To see more example code of Scout JS, you should have a look at the Scout JS Widgets application and its source code. In case you should get stuck somewhere and need help, contact us on the Scout Forum or on Stack Overflow.","title":"Hello Scout JS Full Stack","component":"scout-docs","version":"22","name":"helloscout-js-fullstack","url":"/scout-docs/22/getstarted/helloscout-js-fullstack.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Node.js","hash":"node-js","id":3},{"text":"Add pnpm","hash":"add-pnpm","id":4},{"text":"IntelliJ","hash":"intellij","id":5},{"text":"Create the Project","hash":"create-the-project","id":6},{"text":"What’s Next?","hash":"whats-next","id":7}]},"22":{"id":22,"text":"This document is referring to a past Scout release. Please click here for the recent version. In this tutorial we will create your first Scout JS application. If you don’t know what Scout JS is yet, please read the Get Started Guide first. The application will simply show a text field and a button. Once the user enters some text and presses the button, the application displays a message box including that text. The application does not require Maven or Java, only Node.js. Also, the tutorial does not require any specific IDE. The goal of this tutorial is to provide a first impression of the Scout JS framework. We will start by getting the application running and then take a look at the code. Make sure you have Node.js 16 installed. Clone the helloscoutjs repository and checkout the branch releases/22.0. Alternatively, you can also download and extract a ZIP file of the repository. After that, the file and folder structure of your local copy should look like this (apart from a few more files): Listing 1. Files and folders of the application . │ package.json │ webpack.config.js │ ├───res │ index.html │ └───src │ helloworld.js │ helloworld.less │ ├───desktop │ Desktop.js │ DesktopModel.js │ └───greeting HelloForm.js HelloFormModel.js In the main folder, where the file package.json is located, open a terminal and execute npm install --ignore-scripts. This creates a folder node_modules, containing all (direct and transitive) dependencies, as well as a file package-lock.json, listing all the specific versions of these dependencies. If the dependencies defined in package.json change, run npm install again to update the node_modules folder. Now execute npm run build:dev. This creates a dist folder that contains the transpiled and bundled files to be served to the browser. Use npm run build:dev:watch to have these files automatically updated when the corresponding source files change. Use the same or start a new terminal in the main folder and execute npm run serve. This starts a little development server and opens the URL http://127.0.0.1:8080/ in your default browser. The server has live reload capability, that is, as soon as files in the dist folder change, the browser tab will reload automatically. Type some text in the field and press the button to test the application. Also check out how the layout changes when you narrow the browser window (or e.g. use Google Chrome’s DevTools to emulate a smaller device). Let’s now have a closer look at the files that were needed to build this application. In the main folder there are files containing information for the build, e.g. dependencies and entry points. In the subfolder res/ there are static resources that are just copied to dist/ in the build. And in the subfolder src/ you find the source files that are transformed and bundled by webpack. For npm commands like npm install or npm run , the file package.json provides the necessary information. Listing 2. package.json { \"scripts\": { \"build:dev\": \"scout-scripts build:dev\", \"build:dev:watch\": \"scout-scripts build:dev:watch\", \"serve\": \"live-server --mount=/:dist\" }, \"devDependencies\": { \"@eclipse-scout/cli\": \"^22.0.2\", \"live-server\": \"^1.2.1\" }, \"dependencies\": { \"@eclipse-scout/core\": \"^22.0.2\" } } The scripts define what npm run should execute. They work a bit like aliases in Bash. To have all needed files available at http://127.0.0.1:8080/, we need to mount the folder dist to the root path / when starting the development server. Modules defined in devDependencies and dependencies are downloaded to the node_modules folder on npm install. The dependency versions are prefixed with a ^ (caret), which means compatible version. That is, when running npm install, the newest version with the same major-level will be downloaded, unless another compatible version already exists in the node_modules folder or is already defined in the package-lock.json file. For more detailed and general information about package.json and package-lock.json, see the official documentation on Node.js: The package.json guide and The package-lock.json file. As defined in package.json, the script build:dev executes scout-scripts build:dev. scout-scripts is a command provided by the @eclipse-scout/cli module. With the build:dev argument, this command uses webpack to transform and bundle the source files and write the results to the dist folder. Scout provides a default webpack configuration which we use and adjust as follows. Listing 3. webpack.config.js const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { args.resDirArray = [ './res', './node_modules/@eclipse-scout/core/res', './node_modules/@eclipse-scout/core/dist/locales.json', './node_modules/@eclipse-scout/core/dist/texts.json' ]; const config = baseConfig(env, args); config.entry = { 'helloworld': './src/helloworld.js', 'helloworld-theme': './src/helloworld.less' }; return config; }; The args.resDirArray defines the files or folders with static resources to be copied to dist. In addition to the static resources of our application, we also need Scout’s static resources in node_modules/@eclipse-scout/core/. In config.entry, the entry points for bundling JavaScript and CSS files are defined. For our application, the target files helloworld.js and helloworld-theme.css (defined without the file extension) are generated from the source files src/helloworld.js and src/helloworld.less, respectively. The -theme suffix of the target CSS file is important for Scout’s post-processing to work properly. Also, make sure that you don’t use exactly the same name as for the target JS file. Other than that, you can name the target files whatever you want, just make sure you also adjust the references in index.html accordingly (see next section). For more details on the build, see Build Stack. For an HTML file to be valid (see The W3C Markup Validation Service), it has to define a DOCTYPE, a default language and a title. Furthermore, to allow for responsive web design, we include the viewport element. Listing 4. res/index.html Hello World The and elements include the CSS and JavaScript files generated by the build. The order of these elements is important. In particular, the element with the class \"scout\" has to be placed before the inclusion of the scripts, since it is used to build the final DOM for our application. The other file in our res/ folder, helloworld-texts.json, contains your own texts used in the application. Listing 5. src/helloworld.js import { scout, App } from '@eclipse-scout/core'; import { Desktop } from './desktop/Desktop' import { HelloForm } from './greeting/HelloForm' scout.addObjectFactories({ 'Desktop': () => new Desktop() }); window.helloworld = Object.assign(window.helloworld || {}, { HelloForm }); new App().init({ bootstrap: { textsUrl: 'texts.json', localesUrl: 'locales.json' } }); In our main JavaScript file, we import the scout namespace object as well as the class App. Before we initialize an instance of the Scout application (passing the location of the text urls and the locales url) we do two other things: Use scout.addObjectFactories to register a function (identified by 'Desktop') that provides an instance of our Desktop class. The desktop is the main widget of a Scout application and the root of every other widget. On application initialization, Scout is using that factory to create the desktop of our application. Define our own namespace object, helloworld, and put our HelloForm class in it, so Scout can use it to build modular widgets at runtime (see DesktopModel.js). Listing 6. src/helloworld.less @import \"~@eclipse-scout/core/src/index\"; Since we don’t need any custom styling for our application, we just import Scout’s LESS module as is in our LESS file. To try out Scout’s dark theme, just import index-dark instead of index. We follow the best practice of separating model (layout, structure) and behavior code. This also makes it easier to e.g. reuse a form that should look similar elsewhere but behave differently. A typical model definition for a Scout widget defines an objectType. This is specified as a string containing the corresponding class, prefixed with the namespace in which it is accessible. Without a namespace prefix, the namespace scout is used as default. Other object properties are used to configure the widget based on the specified objectType. Listing 7. src/greeting/DesktopModel.js export default () => ({ objectType: 'Desktop', navigationHandleVisible: false, navigationVisible: false, headerVisible: false, views: [ { objectType: 'helloworld.HelloForm' } ] }); The default desktop consists of a navigation, a header and a bench. We only need the bench for our application, so we hide the other parts, including the handle to toggle the navigation. A desktop can contain outlines and/or views. We provide an instance of our HelloForm as a view on our desktop. Listing 8. src/greeting/Desktop.js import { Desktop as ScoutDesktop, models } from '@eclipse-scout/core'; import DesktopModel from './DesktopModel'; export class Desktop extends ScoutDesktop { constructor() { super(); } _jsonModel() { return models.get(DesktopModel); } } Our desktop doesn’t have any custom behavior, so we only import the DesktopModel here, in the _jsonModel() function. Listing 9. src/greeting/HelloFormModel.js import {Form, GroupBox} from '@eclipse-scout/core'; export default () => ({ objectType: 'Form', displayHint: Form.DisplayHint.VIEW, modal: false, rootGroupBox: { objectType: 'GroupBox', borderDecoration: GroupBox.BorderDecoration.EMPTY, fields: [ { id: 'NameField', objectType: 'StringField', label: 'Name' }, { id: 'GreetButton', objectType: 'Button', label: 'Say Hello', keyStroke: 'enter', processButton: false } ] } }) Our form is defined to be non-modal and displayed as a view (rather than a dialog). It consists of a string field and a button. These are in a group box inside the form. We define an empty border decoration around this group box to have a little padding. The Enter key is defined as the keyboard shortcut for our button and we set processButton: false to place the button next to our field instead of above it. Listing 10. src/greeting/HelloForm.js import { Form, models, MessageBoxes } from '@eclipse-scout/core'; import HelloFormModel from './HelloFormModel'; export class HelloForm extends Form { constructor() { super(); } _jsonModel() { return models.get(HelloFormModel) } _init(model) { super._init(model); this.widget('GreetButton').on('click', event => { let name = this.widget('NameField').value || 'stranger'; MessageBoxes.openOk(this.session.desktop, `Hello ${name}!`); }); } } As in Desktop.js, we import the model but additionally add an event handler in the _init(model) function to implement the desired behavior when the button is clicked. To accomplish this, we can access our button and field by their respective id (see HelloFormModel.js). An OK message box with the desired text is displayed using the convenience class MessageBoxes from Scout. If you want to add the created application to a Git repository, it is recommended to exclude some files from the SCM. As a starting point, use the file you cloned/downloaded from the helloscoutjs repository. Listing 11. .gitignore # Git *.orig # Node node_modules/ dist/ test-results/ package-lock.json # Do not check in any log files *.log # IDEs .idea See the gitignore Documentation for details. Now that you have successfully created your first Scout JS application, you might want to learn more about Scout JS. If you are interested in adding a REST backend you should have a look at Hello Scout JS Full Stack Tutorial. To see more example code of Scout JS, we recommend looking at the Scout JS Widgets application and its source code. If you are interested in Scout’s concepts, architecture and features you probably want to have a look at the Technical Guide. In case you should get stuck somewhere and need help, contact us on the Scout Forum or on Stack Overflow. We wish you all the best on your journey with Scout.","title":"Hello Scout JS","component":"scout-docs","version":"22","name":"helloscout-js","url":"/scout-docs/22/getstarted/helloscout-js.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Get the Code","hash":"get-the-code","id":3},{"text":"Build the Application","hash":"build-the-application","id":4},{"text":"Run the Application","hash":"run-the-application","id":5},{"text":"Understand the Code","hash":"understand-the-code","id":6},{"text":"Build Information","hash":"build-information","id":7},{"text":"npm","hash":"npm","id":8},{"text":"webpack","hash":"webpack","id":9},{"text":"Static Resources","hash":"static-resources","id":10},{"text":"Source Files","hash":"source-files","id":11},{"text":"Entry Points","hash":"entry-points","id":12},{"text":"Widgets","hash":"widgets","id":13},{"text":"Git configuration","hash":"git-configuration","id":14},{"text":"What’s Next?","hash":"whats-next","id":15}]},"23":{"id":23,"text":"This document is referring to a past Scout release. Please click here for the recent version. In this tutorial we will create the “Contacts” Scout application. The goal of this application is to learn about the most prominent features of the Eclipse Scout framework using a fully functional application. The application is kept small enough to complete this tutorial within less than a day. An extended version of “Contacts” is available as a Scout sample application on Github. For this tutorial you can use IntelliJ or Eclipse IDE with installed Scout SDK plugins. If you have successfully completed the Hello Scout Tutorial you should have a running Eclipse Scout installation. If not, then you should do the Hello Scout Tutorial now. The “One Day Tutorial” is organized as follows. In the first section, the finished “Contacts” application is explained from the user perspective. The remaining sections focus on the individual steps to implement the “Contacts” tutorial application. The “Contacts” demo application is a client server application to manage personal contacts, organizations and events. The persistence of entered data is achieved via simple JDBC access to a Derby database. It is recommended that you first import the full “Contacts” demo application into a separate workspace. This gives you the possibility to check your source code against the full implementation during the various steps of the tutorial. To do so, just clone the Scout demo repository and import it into your IDE. git clone https://github.com/bsi-software/org.eclipse.scout.docs.git Alternatively, you can also view the source code of the “Contacts” demo application on Github. Figure 1. The “Contacts” application with the person page. The “Contacts” application shows the basic user interface layout of a typical Scout application. The main areas of this layout are briefly introduced below. Outline Button In Figure 1 the top left area shows a folder icon that represents the \"Contacts\" outline. The small down arrow at the folder icon indicates that additional outlines are available when clicking on this view button. On the right of the button with the folder icon is a second outline button that activates a search outline (not implemented yet). Navigation Tree The navigation tree on the left side of the layout shows the pages that are available for the selected outline. For the \"Contacts\" outline, the navigation tree provides access to the pages \"Persons\", \"Organizations\" and \"Events\". Selecting a page then shows associated information on the right side in the bench area. In the case of the selected \"Persons\" page the bench area shows a list of persons in the form of a table. Header The header area is located at the top and holds the available top level menus. In this example these are the \"Quick access\", \"Options\" menu points as well as a user menu that shows the username of the currently logged in user \"mzi\". Bench The bench represents the main display area of a Scout application. When selecting the \"Persons\" page, a table provides access to all available persons as shown in Figure 1. Selecting a specific person provides access to all actions that are available for the selected person. The selected person can then be opened with the Edit menu which opens the person in a view that is displayed in the bench area again as shown in Figure 2. For entering and editing of data in Scout applications views are used in most cases. Views are displayed in the bench area of a Scout application. Several views can also be opened simultaneously. To show a specific view the user has to click on the view button associated with the desired view. An example of an opened view is shown for person \"Verónica\" in Figure 2. Figure 2. The “Contacts” application with a person opened in a form. This tutorial walks you through the implementation of a Scout application consisting of a frontend and a backend application. The frontend application contains outlines with navigation trees, pages to present information in tabular form, and forms to view and edit data. In the backend application the tutorial shows how to implement services, logging, database access, and several other aspects of Scout applications. The tutorial is organized as a sequence of consecutive steps as listed below. Each step is described in a individual section that results in a executable application that can be tested and compared against the full \"Contacts\" demo application. Step 1: Setting up the Initial Project (Setting up the Initial Project) We will create a new project and prepare the generated code base by adapting existing components and deleting unnecessary components. At the end of step one we have a project setup that allows us to start adding new components to the application. Step 2: Adding the Person and Organization Page (Adding the Person and Organization Page) The second step adds the user interface components to display persons and organizations. For this a \"Persons\" page and an \"Organizations\" page are created and added to the \"Contacts\" outline as shown in Figure 1. Step 3: Creating and Accessing the Database (Creating and Accessing the Database) This step concentrates on the backend of the \"Contacts\" application. The covered topics include dealing with application properties, setup and access of a database and using the database to provide data for the person and organization page created in the previous step. Step 4: Adding a Form to Create/Edit Persons (Adding a Form to Create/Edit Persons) After having access to the database the components that allow a user to create and edit persons and organizations in the user interface of the \"Contacts\" application can be added. In addition, this tutorial step also demonstrates how to design and implement complex form layouts with the Scout framework. Step 5: Form Field Validation and Template Fields (Form Field Validation and Template Fields) This step provides an introduction into form field validation and the creation of template fields. Validation of user input is important for many business applications and template fields help to improve code quality with a mechanism to reuse application specific user interface components. Step 6: Adding the Company Form (Adding the Company Form) We create the organization form to create and enter organizations in the \"Contacts\" application. As we can reuse many of the components developed so far this is the shortest tutorial step. Step 7: Linking Organizations and Persons (Linking Organizations and Persons) In this step we modify the user interface to implement a 1:n relationship between organizations and persons. This includes the creation of a hierarchical page structure for organization, adding an organization column to the person page and adding an organization field to the person form to manage the association of a person to an organization. This section deals with setting up the initial workspace and code base for the \"Contacts\" application. The creation up of the initial project setup consists of the tasks listed below. Creating the initial Codebase (Creating the initial Codebase) Removing unnecessary Components (Removing unnecessary Components) Changes to Class WorkOutline (Changes to Class WorkOutline) Changes to Class Desktop (Changes to Class Desktop) This first step of the \"Contacts\" tutorial ends with a review of the results of this first tutorial step in What have we achieved?. If you are using Eclipse and your workspace contains modules from the “Hello World” tutorial, you may want to multi-select them and to either close them by invoking the context menu “Close Projects” or to delete them by invoking the context menu “Delete”. The initial code for the “Contacts” application is then generated using the New Scout Project wizard. For the wizard fields you may use the values below and as shown in Figure 3 (IntelliJ) and Figure 4 (Eclipse). Group Id: org.eclipse.scout Artifact Id: contacts Display Name: \"Contacts Application\" Figure 3. The creation of the initial \"Contacts\" application in IntelliJ. Figure 4. The creation of the initial \"Contacts\" application in Eclipse. To create this initial application click on Next/Finish. The project wizard then creates a number of Maven modules as shown in Figure 5 (IntelliJ) and Figure 6 (Eclipse). Figure 5. The package explorer with the initial Maven modules created for the \"Contacts\" application in IntelliJ. Figure 6. The package explorer with the initial Maven modules created for the \"Contacts\" application in Eclipse. We start with removing the *.helloworld and \\*.settings packages in all Maven modules of the \"Contacts\" application. To delete packages, first select an individual package or packages in the package explorer as shown in Figure 6 (IntelliJ) and Figure 6 (Eclipse) and then hit the Delete key. The packages to delete is provided per Maven module in the list below. Client Module contacts.client In folder src/main/java Delete package org.eclipse.scout.contacts.client.helloworld Delete package org.eclipse.scout.contacts.client.settings In folder src/test/java Delete package org.eclipse.scout.contacts.client.helloworld Server Module contacts.server In folder src/main/java Delete package org.eclipse.scout.contacts.server.helloworld In folder src/test/java Delete package org.eclipse.scout.contacts.server.helloworld Shared Module contacts.shared In folder src/main/java Delete package org.eclipse.scout.contacts.shared.helloworld In folder src/generated/java Delete package org.eclipse.scout.contacts.shared.helloworld The deletion of these outlines results in a number of compile errors in classes WorkOutline and Desktop. All these errors will be resolved in the following two sections where we modify the two classes to our needs. Instead of adding a new \"Contacts\" outline to the application we reuse the generated code and rename the \"Work\" outline into \"Contacts\" outline. For this, we perform the following modifications to class WorkOutline. Rename the class package to org.eclipse.scout.contacts.client.contact Rename the class to ContactOutline Change the outline title to \"Contacts\" Change the outline icon to Icons.Folder To quickly find the class WorkOutline we first open the Open Type dialog by hitting Ctrl+Shift+N in IntelliJ or Ctrl+Shift+T in Eclipse and enter \"workoutline\" into the search field as shown in Figure 7 (IntelliJ) and Figure 8 (Eclipse). In the result list, we select the desired class and click the OK button to open the file WorkOutline.java in the Java editor of your IDE. Figure 7. Use the Open Type dialog to quickly find java types in IntelliJ. Figure 8. Use the Open Type dialog to quickly find java types in Eclipse. We start with the package rename. To rename the package org.eclipse.scout.contacts.client.work to org.eclipse.scout.contacts.client.contact click into the word \"work\" of the package name and hit Shift+F6 (Eclipse: Alt+Shift+R). This opens the package rename dialog as shown in Figure 9 (IntelliJ) and Figure 10 (Eclipse), where we replace \"work\" by \"contact\" in the New name field. After pressing the Ok button your IDE informs the programmer that the code modification may not be accurate as the resource has compile errors. This warning can be acknowledged by clicking Continue. Figure 9. Use the IntelliJ Rename Package dialog to rename a Java package in IntelliJ. Figure 10. Use the Eclipse Rename Package dialog to rename a Java package in Eclipse. In next step we rename class WorkOutline to ContactOutline. In the Java editor we can rename the class by clicking into the class identifier WorkOutline and hitting Shift+F6 (Eclipse: Alt+Shift+R). Inside the edit box we can then change the class name to ContactOutline and hit the Enter key to execute the change. If your IDE shows a Rename Type dialog just hit button Continue to complete the rename operation. To get rid of the compile error in method execCreateChildPages we simply delete the content in the method body. Next, we change the outline title in method getConfiguredTitle. Replace the string \"Work\" with \"Contacts\". Set the cursor at the end of the word \"Contacts\" and hit Ctrl+Space. For Eclipse: Double-click on the proposal New text…​ to open the Scout new entry wizard as shown in Figure 12 and Figure 13. Enter the text \"Contacts\" as shown in Figure 11 (IntelliJ) and Figure 13 (Eclipse) and click Ok. Figure 11. Use the Scout new entry wizard to add translated texts to the application in IntelliJ. Figure 12. Use the Scout content assist to add new translations. Figure 13. Use the Scout new entry wizard to add translated texts to the application in Eclipse. As the last modification we change the return value of method getConfiguredIconId to value Icons.Folder and end with the code shown in Listing 1. In IntelliJ, the import for the Icons class should be added automatically. If not, check your settings for auto import or use Alt enter to import it manually. In Eclipse, you can use Ctrl+Shift+O to add the imports manually. Listing 1. Initial implementation of class ContactOutline. @ClassId(\"303c0267-3c99-4736-a7f5-3097c5e011b6\") public class ContactOutline extends AbstractOutline { @Override protected void execCreateChildPages(List> pageList) { } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Contacts\"); } @Override protected String getConfiguredIconId() { return Icons.Folder; } } The second class to adapt for the \"Contacts\" application is the Desktop class. This class is implemented exactly once in each Scout application and holds the available outlines and top level menus of the application in the form of inner classes. For the \"Contacts\" application we adapt the initial implementation to have outline view buttons for the \"Contacts\" and \"Search\" outlines. The top level menus are then adapted to hold the menus \"Quick Access\", \"Options\" and a menu for the logged in user. Start with opening the class in the Java editor using Ctrl+Shift+N (Eclipse: Ctrl+Shift+T) to quickly access the class. In the source code of method getConfiguredOutlines remove SettingsOutline.class from the list of return values as shown in Listing 2. Listing 2. Method getConfiguredOutlines defines the outlines associated with the desktop of the application. @Override protected List> getConfiguredOutlines() { return CollectionUtility.> arrayList(ContactOutline.class, SearchOutline.class); } Then, perform the following changes in class Desktop Delete the inner class SettingOutlineViewButton Delete the inner class UserProfileMenu. Rename inner class WorkOutlineViewButton to ContactOutlineViewButton Create a new inner class called QuickAccessMenu after the SearchOutlineViewButton. For this navigate the cursor after the SearchOutlineViewButton class, press Ctrl+Space and select the Menu entry. Adapt the created code until it matches the template as shown in Listing 3. Note that in your implementation, the menu should extend AbstractMenu instead of AbstractFormMenu in contrast to what is shown in Listing 3. As a consequence, the method getConfiguredForm from Listing 3 is obsolete. Create another menu called OptionsMenu right after the newly created QuickAccessMenu according to Listing 3. Create a last menu called UserMenu after the OptionsMenu according to Listing 3. Delete the method onThemeChanged. Remove the statement in the body of the constructor. Note that it is not necessary to organize the imports since you have registered the organization of imports as a save action earlier in this tutorial. At the end of these changes the inner class structure of class Desktop will look similar to the sample shown in Listing 3. Listing 3. Structure of class Desktop with outline buttons and top level menus. @ClassId(\"70eda4c8-5aed-4e61-85b4-6098edad8416\") public class Desktop extends AbstractDesktop { // outline buttons of the application @Order(1) @ClassId(\"9405937b-66e8-491a-831d-69adca724b90\") public class ContactOutlineViewButton extends AbstractOutlineViewButton { } @Order(2) @ClassId(\"55febc84-ad6d-4ee8-9963-d1d40169a63a\") public class SearchOutlineViewButton extends AbstractOutlineViewButton { } // top level menus for the header area of the application @Order(10) @ClassId(\"50df7a9d-dd3c-40a3-abc4-4619eff8d841\") public class QuickAccessMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"QuickAccess\"); } } @Order(20) @ClassId(\"4fce42bf-85f9-4892-96a2-2e89e18eeaee\") public class OptionsMenu extends AbstractFormMenu { (1) @Override protected String getConfiguredText() { return TEXTS.get(\"Options\"); } @Override protected String getConfiguredIconId() { return Icons.Gear; } @Override protected Class getConfiguredForm() { return OptionsForm.class; } } @Order(30) @ClassId(\"8dbfbe9d-0382-471a-ae43-3178f7a9e720\") public class UserMenu extends AbstractFormMenu { (2) @Override protected String getConfiguredIconId() { return Icons.PersonSolid; } @Override protected String getConfiguredCssClass() { return \"profile-menu\"; } @Override protected Class getConfiguredForm() { return UserForm.class; } } } 1 In your implementation OptionsMenu should extend AbstractMenu and the method getConfiguredForm should be deleted. 2 In your implementation UserMenu should extend AbstractMenu and the method getConfiguredForm should be deleted. In the first step of the \"Contacts\" tutorial we have created the initial project setup that will serve as the basis for all the following tutorial steps. As the \"Contacts\" application is in a clean state you can now test the application using the following steps. The user interface of the application will now look as shown in Figure 14. Activate the launch group [webapp] all to start the JS build, the frontend and the backend Open address http://localhost:8082/ in your browser Figure 14. The \"Contacts\" application at the end of tutorial step 1. From the coding perspective we now have all necessary maven Modules for the \"Contacts\" application including Java package and class names to match with the complete Scout \"Contacts\" demo application. This point is important as it simplifies the comparison of intermediate stages of the tutorial application with the Scout demo application. The same is true for the user perspective: The layout of the current state of the tutorial matches with the complete \"Contacts\" sample application. In the second step of the Scout tutorial the components to display persons and organizations are added to the \"Contacts\" outline of the user interface of the Scout application. Specifically, a \"Persons\" page and an \"Organizations\" page are created and added to the navigation tree of the \"Contacts\" outline. Database access and populating the pages with actual data from the database is not part of this section but will be covered in the next tutorial step (Creating and Accessing the Database). The addition of the \"Persons\" page is described in detail in the sections listed below. Creating additional Packages (Creating additional Packages) Creating the Country Lookup Call (Creating the Country Lookup Call) Creating the Person Page (Creating the Person Page) Adding Table Columns to the Page (Adding Table Columns to the Page) Link the Person Page to the Contacts Outline (Link the Person Page to the Contacts Outline) The addition of the company page is described in Adding the Company Page. Finally, the state of the \"Contacts\" application is summarized in What have we achieved?. A substantial part of the \"Contacts\" application deals with persons. In addition to the \"Persons\" page we will also add a Scout form to enter/edit persons in a later tutorial step. For the \"Contacts\" application we use this fact to justify the addition of a specific Java package that will hold all classes related to persons. This person package can be created with the following steps. Open the \"Contacts\" Maven module contacts.client in the Eclipse Package Explorer Select the Java package org.eclipse.scout.contacts.client in folder src/main/java For IntelliJ: Create a package by right-clicking on the Java package and selecting New → Package as shown in Figure 15 Enter org.eclipse.scout.contacts.client.person and press Enter as shown in Figure 16. For Eclipse: Press Ctrl+N, enter \"package\" into the search field and select the Package wizard in the proposal box and click Next Press Finish as shown in Figure 17. Figure 15. Create the person package in IntelliJ. Figure 16. Add the person package to the \"Contacts\" application in IntelliJ. Figure 17. Add the person package to the \"Contacts\" application in Eclipse. We will also need a separate package for organizations and some common elements. Add package org.eclipse.scout.contacts.client.organization Add package org.eclipse.scout.contacts.client.common The pages for the persons and the organizations will also display country information. To display country names we will be using a special column, that maps the country codes received from the backend application to translated country names. As the Java class Locale already contains both country codes and country names we can take advantage of this class and use it in a Scout local lookup call. In package org.eclipse.scout.contacts.client.common create a new class CountryLookupCall according to the implementation provided in Listing 4. Listing 4. The Scout lookup call for countries. This lookup call will be used for the address field. @ClassId(\"37736ea5-e861-43d8-a6bc-144dad3c208f\") public class CountryLookupCall extends LocalLookupCall { (1) private static final long serialVersionUID = 1L; @Override protected List> execCreateLookupRows() { (2) List> rows = new ArrayList<>(); for (String countryCode : Locale.getISOCountries()) { Locale country = new Locale(\"\", countryCode); rows.add(new LookupRow<>(countryCode, country.getDisplayCountry())); (3) } return rows; } } 1 Makes the CountryLookupCall to work with key type String 2 Defines the set of lookup rows to be used 3 Add a row with the country code as key and the country name as display value In this section we create the Scout page that will be used to list all entered persons to the user of the \"Contacts\" application. Out-of-the box this page will support the sorting and filtering of all the persons. This \"Persons\" page is then added to the navigation tree below the \"Contacts\" outline. We can now add the Scout person page as described below. Select the newly created package org.eclipse.scout.contacts.client.person in the Package Explorer For IntelliJ Create a new Scout page by right-clicking on the package and selecting New → Scout Element → Page as shown in Figure 18 For Eclipse Press Ctrl+N, enter \"scout page\" into the search field and select the Scout Page wizard in the proposal box and click [button]. Un-check the Create an Abstract Super Page option, as we don’t need an additional abstract super class for our new page. Enter PersonTablePage as the class name and click Finish as shown in Figure 20 Figure 18. Create the person page in IntelliJ. Figure 19. Add the person page to the \"Contacts\" application in IntelliJ. Figure 20. Add the person page to the \"Contacts\" application in Eclipse. The Scout New Page Wizard then creates an initial implementation for the PersonTablePage class very similar to the listing provided in Listing 5 below. Listing 5. Initial implementation of class PersonTablePage. @PageData(PersonTablePageData.class) @ClassId(\"23c10251-66b1-4bd6-a9d7-93c7d1aedede\") public class PersonTablePage extends AbstractPageWithTable { @Override protected String getConfiguredTitle() { return TEXTS.get(\"Persons\"); (1) } @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IPersonService.class) .getPersonTableData(filter, getOrganizationId())); (2) } @Override (3) protected boolean getConfiguredLeaf() { return true; } @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { // container class to hold columns and other elements for this table page (4) } } Before we start to add the columns to the table of the page we need to do some minor adaptations to Listing 5. 1 Specify the title \"Persons\" for the page using the Scout NLS tooling. 2 You don’t need to update method execLoadData to match this listing for now. 3 Add method getConfiguredLeaf to specify that the person page will not have any child pages. 4 We will add the columns in the next section of this tutorial. We are now ready to populate the inner class Table of the person page with the columns to display various person attributes. Table pages are an important UI element of Scout applications as they frequently play a central role in the interactions of a user with the application. Out of the box table pages offer powerful options to sort, filter and re-arrange the data contained in the table. This functionality offers a good starting point to decide which columns to add to a table page. To decide about the columns to add the following criteria have been useful in practice. Unique identifier of an element Attributes that are most frequently used in searches Category attributes that are useful for filtering Fewer columns are better As the visible data of all users is held in the memory of the frontend server it is good practice to keep the number of columns as low as possible. Not taking this advice into account can substantially increase the memory footprint of the frontend server in production. For the person page of the \"Contacts\" application we will add the following columns. PersonId: Hidden attribute of type string to hold the person key. Class name: PersonIdColumn First Name: String column. Class name: FirstNameColumn Last Name String column. Class name: LastNameColumn City: String column. Class name: CityColumn Country: Smart column. Class name: CountryColumn Phone: String column, not visible per default. Class name: PhoneColumn Mobile Phone: String column, not visible per default. Class name: MobileColumn Email: String column, not visible per default. Class name: EmailColumn Organization: String column, not visible per default. Class name: OrganizationColumn Make sure to use column class names exactly as indicated above. Working with different names is possible but requires additional work later in the tutorial when the data retrieved from the database is mapped to these column class names. To add the first column PersonIdColumn we open class PersonTablePage in the Java editor and place the cursor inside of the body of the inner Table class. We then open the Scout content assist with Ctrl+Space and select the Column proposal as shown in Figure 21 (IntelliJ) and Figure 22 (Eclipse). Figure 21. Adding a column to the person page table in IntelliJ. Figure 22. Adding a column to the person page table in Eclipse. In the first edit box we type \"PersonId\" as shown in Figure 23 (IntelliJ) and Figure 24 (Eclipse) and press Enter. Figure 23. Adding a column to the person page table in IntelliJ. Figure 24. Adding a column to the person page table in Eclipse. To configure this column as an invisible primary key we modify the newly created column class according to Listing 6. Listing 6. Implementation of the person primary key column PersonIdColumn. @Order(1) @ClassId(\"1cbc9059-caef-4684-b013-bfa3bc0d0642\") public class PersonIdColumn extends AbstractStringColumn { @Override (1) protected boolean getConfiguredDisplayable() { return false; } @Override (2) protected boolean getConfiguredPrimaryKey() { return true; } } 1 Returning false here makes this column invisible. As this column will be excluded from the table control the user is not aware of the existence of this column. 2 Returning true marks this attibute as a primary key (or part of a primary key) We can now add the additional columns FirstNameColumn, LastNameColumn, CityColumn below. After entering the class name press Tab twice to move the cursor to the label text of the field. In the case of the first name enter \"FirstName\" and hit Ctrl+Space to open the wizard to add the translated text \"First Name\". For these three columns the default implementation is fine and does not need any adaptations. Listing 7 below provides an example for this type of columns. Listing 7. Implementation of the first name column. @Order(2) @ClassId(\"99df594a-6731-4757-a799-aacdbb4788d3\") public class FirstNameColumn extends AbstractStringColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"FirstName\"); } @Override protected int getConfiguredWidth() { return 120; } } For column CountryColumn we will use a smart column. We again use Ctrl+Space to open the wizard and enter \"Country\" for the class name box and press Tab once and select AbstractSmartColumn as column type. Next we press Tab again to enter \"Country\" as the translated text. In the created class CountryColumn we need to add the generic type parameter to the super class declaration (AbstractSmartColumn) and add the method getConfiguredLookupCall according to Listing 8. Listing 8. Implementation of the country smart column. @Order(5) @ClassId(\"a39ad408-b5e5-4794-b86a-ddc13025862e\") public class CountryColumn extends AbstractSmartColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"Country\"); } @Override protected int getConfiguredWidth() { return 120; } @Override (1) protected Class> getConfiguredLookupCall() { return CountryLookupCall.class; } } 1 The configured lookup call is used to map country codes to the country names used in the user interface. After the country column we add the four columns PhoneColumn, MobileColumn, EmailColumn and OrganizationColumn that are initially not visible in the user interface. As an example for such a column Listing 9 is provided below. Listing 9. Implementation of the (initially invisible) phone column. @Order(6) @ClassId(\"fa879506-d38c-46a6-990c-1f1ae4b74d4e\") public class PhoneColumn extends AbstractStringColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"Phone\"); } @Override (1) protected boolean getConfiguredVisible() { return false; } @Override protected int getConfiguredWidth() { return 120; } } 1 Returning false hides the column initially. Using the table control the user can then make this column visible in the user interface. Use the content assist to efficiently add method getConfiguredVisible. Place the cursor after method getConfiguredHeaderText, type \"getConVis\" and hit Ctrl+Space and the method is inserted for you. We have now created a person page with corresponding table columns. However, this new UI component is not yet visible in the user interface. What is missing is the link from the application’s contacts outline class to the newly created PersonTablePage class. This is what we will do in the following section. In this section we add the person page to the contacts outline created during the initial project setup of the first step of this tutorial. This will make the person page visible in the navigation area below the \"Contacts\" outline. For this we have to add a single line of code to method execCreateChildPages of class ContactOutline according to Listing 10 Listing 10. Adding the PersonTable to the ContactOutline. @Override protected void execCreateChildPages(List> pageList) { // pages to be shown in the navigation area of this outline pageList.add(new PersonTablePage()); (1) } 1 A new instance of the PersonTable is added to this outline. This makes the person page visible in the navigation area below the contacts outline. The application is now in a state where we can restart the backend and the frontend server to verify our changes in the user interface. This section creates and adds a table page for organization to the \"Contacts\" outline. To create an organizations page the same steps are required as for the creation of the person page. The description is therefore kept on a higher level and in the text below only the main steps are described. Where appropriate, pointers are provided to the detailed descriptions for the creation of the person page. Add page OrganizationTablePage with title \"Organizations\" using the Scout new page wizard Listing 11. Initial implementation of class OrganizationTablePage. @PageData(OrganizationTablePageData.class) @ClassId(\"18f7a78e-0dd0-4e4e-9234-99892bb4459f\") public class OrganizationTablePage extends AbstractPageWithTable { @Override protected String getConfiguredTitle() { return TEXTS.get(\"Organizations\"); (1) } @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IOrganizationService.class).getOrganizationTableData(filter)); } @ClassId(\"54f3d730-7a62-462b-99ec-78fd1e6bb69d\") public class Table extends AbstractTable { // container class to hold columns and other elements for this table page } } 1 Make sure to add a translated text entry for \"Organizations\" using the Scout NLS tooling The implementation of class OrganizationTablePage using the Scout new page wizard then looks as shown in Listing 11. As in the case of the person page you can now add the columns for the inner Table class. For the organization page add the columns according to the specification provided below. OrganizationId: Hidden attribute of type string to hold the organization key. Class name: OrganizationIdColumn Name: String column. Class name: NameColumn City: String column. Class name: CityColumn Country: Smart column. Class name: CountryColumn Homepage: String column, not visible per default. Class name: HomepageColumn As in the case of the person page we have to add the newly created class OrganizationTablePage in method execCreateChildPages of the outline class ContactOutline as shown in Listing 12. Listing 12. Adding the OrganizationTablePage to the ContactOutline. @Override protected void execCreateChildPages(List> pageList) { // pages to be shown in the navigation area of this outline pageList.add(new PersonTablePage()); (1) pageList.add(new OrganizationTablePage()); } 1 The pages will appear in the user interface according to the order in which they are added to the outline. In the second step of the \"Contacts\" tutorial we have created a person page and an organization page to display data of persons and organizations. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the user interface in your browser. The user interface should look like the screenshot provided in Figure 25. Figure 25. The \"Contacts\" application with the person and organization pages at the end of tutorial step 2. When comparing the state of the \"Contacts\" tutorial application with the Scout demo application in Figure 1 the main difference is the missing person data. Adding access to a database is the focus of the next tutorial step. This tutorial step shows how Scout applications can interact with databases via JDBC. Due to the clean layering implemented in the \"Contacts\" application only the Scout backend server connects to the database. We therefore focus on the Scout backend in this part of the tutorial. For the \"Contacts\" application we will work with a Derby database. The choice of Derby is based on the fact that no additional installation is required and it is possible to work with in-memory databases. We start this tutorial step with copying the classes that handle the database creation/access from the full \"Contacts\" demo application as described in Adding the Infrastructure. The setup is then explained in the following sections. Scout Config Properties (Scout Config Properties) The SQL Service and SQL Statements (The SQL Service and SQL Statements) The Database Setup Service (The Database Setup Service) With the basic infrastructure in place we review the existing \"Contacts\" backend to answer the question What is missing?. In Fetching Organization and Person Data we then add the missing pieces. At the end of this tutorial step the \"Contacts\" backend server provides person and organization data to the frontend server as summarized in What have we achieved?. This section describes the installation of the necessary components and classes that handle the database creation/access of the \"Contacts\" application. To add the support for the Scout JDBC components and the Derby database we first need to declare the corresponding dependencies in the pom.xml file of the Maven server module. This can be done using the following steps. Expanding the Maven module contacts.server in the Eclipse Package Explorer Open the pom.xml file (use a double click on the file in the package explorer) and switch to the \"pom.xml\" tab in the Maven POM Editor. Add the database related dependencies according to Listing 13 Listing 13. The additional dependencies needed in the server pom.xml to use the derby database 4.0.0 org.eclipse.scout.contacts org.eclipse.scout.contacts 22.0-SNAPSHOT ../org.eclipse.scout.contacts org.eclipse.scout.contacts.server (1) org.eclipse.scout.rt org.eclipse.scout.rt.server.jdbc org.apache.derby derby 10.15.2.0 org.apache.derby derbytools 10.15.2.0 1 Add the derby and the org.eclipse.scout.rt.server.jdbc dependencies to the pom.xml of your \"Contacts\" server module. After adding the database dependencies to the server’s pom.xml file we need to update all Maven server modules for the \"Contacts\" app. To do this: For IntelliJ, press the Maven button on the right side as shown in Figure 26 to open up the Maven modules and then press the refresh button on the left side as shown in Figure 27. For Eclipse, select the three modules org.eclipse.scout.contacts.server.* and hit Alt+F5 as shown in Figure 28 and start the update with OK. Figure 26. Locate the Maven server modules in IntelliJ. Figure 27. Update the Maven server modules for the \"Contacts\" application in IntelliJ. Figure 28. Update the Maven server modules for the \"Contacts\" application in Eclipse. The next step is to create the org.eclipse.scout.contacts.server.sql package. Expand folder src/main/java of Maven module contacts.server Select the existing package org.eclipse.scout.contacts.server For IntelliJ: Right click on it and select New → Package Enter org.eclipse.scout.contacts.server.sql into the Name field and hit Enter For Eclipse: Hit Ctrl+N on it This opens the dialog to select a wizard. Enter \"package\" into the search field Select the New Java Package wizard with a double click on the Java Package proposal Enter org.eclipse.scout.contacts.server.sql into the Name field of the wizard and click Finish We are now ready to copy the classes related to the database infrastructure from the \"Contacts\" demo application to our tutorial workspace. The simplest way to do this is to open a second Eclipse IDE with the workspace where you have imported the Scout demo applications. If you have not done this yet go to the beginning of this tutorial [cha-large_example] and catch up now. In the demo application workspace navigate to the same package org.eclipse.scout.contacts.server.sql and copy over all its classes. After copying these classes make sure that the structure of your server Maven module looks as shown in Figure 29 (IntelliJ) and Figure 30 (Eclipse). Figure 29. The copied database classes in the tutorial workspace in IntelliJ. Figure 30. The copied database classes in the tutorial workspace in Eclipse. The imported classes are described in the following sections. Additional information is provided where these classes are relying on Scout concepts that have not previously been introduced. Scout Config properties can greatly improve the flexibility of Scout applications. For the \"Contacts\" application this feature is used to keep its database setup configurable. Moving from a in-memory setup to a disk based database is then possible without any reprogramming. The Scout backend (and frontend) applications initialize config properties from matching values found in file config.properties. For missing property values the default values defined in the config property classes are used. In the case of the \"Contacts\" application the config property files are located in the subfolder src/main/resources of the Maven modules that specify the frontend and the backend application. Expand Maven module contacts.server.app.dev Expand subfolder src/main/resources Open file config.properties in the text editor Append all properties defined in Listing 14 to the file Listing 14. Properties relevant for creating and accessing the database. ### Database contacts.database.jdbc.mappingName=jdbc:derby:memory:contacts-database contacts.database.autocreate=true contacts.database.autopopulate=true ### Application specific contacts.superuser=system These added property values then match the config properties defined in the class DatabaseProperties provided in Listing 15. Remember that this is one of the database infrastructure classes we have copied before. Listing 15. Typed properties for the \"Contacts\" application public class DatabaseProperties { public static class DatabaseAutoCreateProperty extends AbstractBooleanConfigProperty { // defines default value and key @Override public Boolean getDefaultValue() { return Boolean.TRUE; (1) } @Override public String getKey() { return \"contacts.database.autocreate\"; (2) } @Override public String description() { return \"Specifies if the contacts database should automatically be created if it does not exist yet. The default value is true.\"; } } public static class DatabaseAutoPopulateProperty extends AbstractBooleanConfigProperty { // defines default value and key } public static class JdbcMappingNameProperty extends AbstractStringConfigProperty { // defines default value and key } public static class SuperUserSubjectProperty extends AbstractSubjectConfigProperty { // defines default value and key } } 1 Defines the default value of the property that is used if the property is not defined in file config.properties 2 Defines the key to be used in file config.properties In the Scout framework config properties are always typed and need to implement interface IConfigProperty. For commonly used types Scout already provides classes. A boolean property may be created by extending Scout class AbstractBooleanConfigProperty. Accessing the actual property values in the code is demonstrated in the next section. Accessing databases with the Scout framework is implemented with SQL services that extend base class AbstractSqlService. As the \"Contacts\" application will be working with a Derby database we also need a Derby specific SQL service. This is why we have copied over class DerbySqlService. The only project specific method is getConfiguredJdbcMappingName as implemented in Listing 16. Listing 16. The Derby SQL service to connect to the database public class DerbySqlService extends AbstractDerbySqlService { @Override protected String getConfiguredJdbcMappingName() { return CONFIG.getPropertyValue(JdbcMappingNameProperty.class); } public void createDB() { String mappingName = CONFIG.getPropertyValue(JdbcMappingNameProperty.class); try { runDerbyCommand(mappingName + \";create=true\"); (1) } catch (SQLException e) { throw BEANS.get(PlatformExceptionTranslator.class).translate(e); } } } 1 Check the Derby documentation for additional attributes. This listing also demonstrates how to use the config properties in the code. With the property values defined in the previous section the \"Contacts\" application is working with an in-memory database. To change the setup to a disk based version, we would have to change the value for the property contacts.database.jdbc.mappingName from jdbc:derby:memory:contacts-database to jdbc:derby:. For a Windows box a concrete example could look like this: jdbc:derby:c:\\\\derby\\\\contacts-database. Now we look at how the actual SQL statements of the \"Contacts\" application work. For our application all statements are collected into a single class. While there are many more options how to organize SQL and Java code this setup has its own advantages. Efficient maintenance as all SQL statements are located in a single place Code completion support in the Eclipse IDE when using the statements The setup is easy to explain The SQL statements related to the database structure are provided in Listing 17. The statements (or building blocks of statements) in interface SQLs are plain SQL in many cases. In the other cases the statement texts include Scout specific syntax extensions with : as a prefix character. Examples are : and :{.}. Listing 17. Interface SQLs with the SQL commands for the creation of the database tables. public interface SQLs { String SELECT_TABLE_NAMES = \"\" + \"SELECT UPPER(tablename) \" + \"FROM sys.systables \" + \"INTO :result\"; (1) String ORGANIZATION_CREATE_TABLE = \"\" + \"CREATE TABLE ORGANIZATION \" + \" (organization_id VARCHAR(64) NOT NULL CONSTRAINT ORGANIZATION_PK PRIMARY KEY,\" + \" name VARCHAR(64), \" + \" logo_url VARCHAR(512), \" + \" url VARCHAR(64), \" + \" street VARCHAR(64), \" + \" city VARCHAR(64), \" + \" country VARCHAR(2), \" + \" phone VARCHAR(20), \" + \" email VARCHAR(64), \" + \" notes VARCHAR(1024)\" + \" )\"; String PERSON_CREATE_TABLE = \"\" + \"CREATE TABLE PERSON \" + \" (person_id VARCHAR(64) NOT NULL CONSTRAINT PERSON_PK PRIMARY KEY, \" + \" first_name VARCHAR(64), \" + \" last_name VARCHAR(64), \" + \" picture_url VARCHAR(512), \" + \" date_of_birth DATE, \" + \" gender VARCHAR(1), \" + \" street VARCHAR(64), \" + \" city VARCHAR(64), \" + \" country VARCHAR(2), \" + \" phone VARCHAR(20), \" + \" mobile VARCHAR(20), \" + \" email VARCHAR(64), \" + \" organization_id VARCHAR(64), \" + \" position VARCHAR(512), \" + \" phone_work VARCHAR(20), \" + \" email_work VARCHAR(64), \" + \" notes VARCHAR(1024), \" + \" CONSTRAINT ORGANIZATION_FK FOREIGN KEY (organization_id) REFERENCES ORGANIZATION (organization_id)\" + \" )\"; } 1 The syntax ':identifier' adds convenience and is supported by the Scout framework The next section discusses how the components introduced above are used by the \"Contacts\" appliction to create an initial \"Contacts\" database during the startup phase of the application. The database setup service is responsible to create the \"Contacts\" database during the startup of the application. In order to implement such a service, a number of Scout concepts are combined into class DatabaseSetupService. Access config properties using class CONFIG Executing SQL statements via class SQL Logging via class LOG Scout platform with the annotations @ApplicationScoped, @CreateImmediately and @PostConstruct How these elements are used in class DatabaseSetupService is shown in Listing 18. The actual creation of the \"Contacts\" database is performed by the method autoCreateDatabase. At the time of the database creation no user is yet logged into the application. This is why we use a run context associated with the super user. The context is then used to execute the runnable that creates the organization and person tables. Listing 18. Class DatabaseSetupService to create the database tables for the \"Contacts\" application. @ApplicationScoped @CreateImmediately public class DatabaseSetupService implements IDataStoreService { private static final Logger LOG = LoggerFactory.getLogger(DatabaseSetupService.class); @PostConstruct public void autoCreateDatabase() { if (CONFIG.getPropertyValue(DatabaseAutoCreateProperty.class)) { try { BEANS.get(DerbySqlService.class).createDB(); RunContext context = BEANS.get(SuperUserRunContextProducer.class).produce(); IRunnable runnable = () -> { createOrganizationTable(); createPersonTable(); }; context.run(runnable); } catch (RuntimeException e) { BEANS.get(ExceptionHandler.class).handle(e); } } } public void createOrganizationTable() { if (!getExistingTables().contains(\"ORGANIZATION\")) { SQL.insert(SQLs.ORGANIZATION_CREATE_TABLE); LOG.info(\"Database table 'ORGANIZATION' created\"); if (CONFIG.getPropertyValue(DatabaseAutoPopulateProperty.class)) { SQL.insert(SQLs.ORGANIZATION_INSERT_SAMPLE + SQLs.ORGANIZATION_VALUES_01); SQL.insert(SQLs.ORGANIZATION_INSERT_SAMPLE + SQLs.ORGANIZATION_VALUES_02); LOG.info(\"Database table 'ORGANIZATION' populated with sample data\"); } } } public void createPersonTable() { if (!getExistingTables().contains(\"PERSON\")) { SQL.insert(SQLs.PERSON_CREATE_TABLE); LOG.info(\"Database table 'PERSON' created\"); if (CONFIG.getPropertyValue(DatabaseAutoPopulateProperty.class)) { SQL.insert(SQLs.PERSON_INSERT_SAMPLE + SQLs.PERSON_VALUES_01); SQL.insert(SQLs.PERSON_INSERT_SAMPLE + SQLs.PERSON_VALUES_02); LOG.info(\"Database table 'PERSON' populated with sample data\"); } } } private Set getExistingTables() { StringArrayHolder tables = new StringArrayHolder(); SQL.selectInto(SQLs.SELECT_TABLE_NAMES, new NVPair(\"result\", tables)); (1) return CollectionUtility.hashSet(tables.getValue()); } } 1 The existing tables are stored in the StringArrayHolder object named \"result\". The usage of CONFIG is already covered by the previous section. Introductions for SQL, LOG and the Scout platform annotations are provided below. Logging Scout uses the SLF4J framework for logging. For the actual implementation of the loggers Scout uses Logback per default. To use logging a local logger is first created using the SLF4J LoggerFactory class. Additional information regarding the logging configuration is provided below. Executing SQL Statements For the execution of SQL statements Scout provides the convenience class SQL. The various methods can be used with a simple SQL command as in SQL.insert(mySqlCommand) or using additional named objects as in SQL.insertInto(mySqlCommand, myHolder). The Scout class NVPair is frequently used to create such named objects. Make sure that the identifiers (using the Scout : syntax) provided in the SQL commands always match with the names associated with the named objects. Scout Platform The Scout platform provides the basic infrastructure and a number of services to a Scout application. Services are represented by Scout beans that are registered at startup with the platform and created once they are needed. For class DatabaseSetupService we can use the Scout annotation @ApplicationScoped to register the service and to make sure that there will only be a single instance of this class. To force the creation of a bean DatabaseSetupService at startup time we also add Scout annotation @CreateImmediately. Finally, the annotation @PostConstruct executes our method autoCreateDatabase as soon as the DatabaseSetupService bean is created. Changing the basic log level of an application is a frequently used scenario. As Scout is using Logback per default we can adapt the log level in the logback.xml configuration files as shown in Listing 19. For the \"Contacts\" application these configuration files are located in folder src/main/resources of the Maven modules that define the frontend and the backend applications. More information regarding these configuration files is provided in the Logback manual. Listing 19. Setting the log level in the logback.xml configuration file. (1) 1 The level attribute of the element is used as the basic log level. Try \"DEBUG\" or \"WARN\" as alternative values. This section reviews the backend infrastructure that has been created so far and identifies the pieces that are missing to fetch person and organization data to send it to the frontend server of the \"Contacts\" application. During the creation of the person page and the organization page the Scout wizards created more than just Scout pages that are visible in the user interface. It also added corresponding classes in the shared module and the server module of the \"Contacts\" application. The new page wizard basically added the complete round trip from the client (frontend server) to the server (backend server) and back. Using the organization page as an example, the setup created by the page wizard involves the following classes. Class OrganizationTablePage with method execLoadData in the client module The service interface IOrganizationService and class OrganizationTablePageData in the shared module Class OrganizationService with the method stub getOrganizationTableData in the server module On the client side the server roundtrip is implemented in method execLoadData as shown in Listing 20. Listing 20. Accessing the \"Contacts\" backend server to fetch organization data. @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IOrganizationService.class).getOrganizationTableData(filter)); } This roundtrip between class OrganizationTablePage and OrganizationService works through the following steps. BEANS.get(IOrganizationService.class) returns a reference to a client proxy service Method getOrganizationTableData(filter) is executed on the corresponding server service This method returns the organization data in the form of an OrganizationTablePageData object Method importPageData transfers the data from the page data into the table of the user interface On the server side fetching the data from the database will be implemented in class OrganizationService according to Listing 21. Listing 21. Method getTableData to access the database and map the data into a pageData object. public class OrganizationService implements IOrganizationService { @Override public OrganizationTablePageData getOrganizationTableData(SearchFilter filter) { OrganizationTablePageData pageData = new OrganizationTablePageData(); return pageData; } } In the next section we will implement the database access logic in the getOrganizationTableData methods of the server classes OrganizationService and PersonService. We are now ready to fetch data from the Derby database using the available infrastructure and the SQL statements prepared in class SQLs. For the implementation of method getOrganizationTableData in class OrganizationService we will use the two SQL snippets provided in Listing 22. Listing 22. Interface SQLs with the SQL to fetch the list of organizations with their attributes. public interface SQLs { String ORGANIZATION_PAGE_SELECT = \"\" + \"SELECT organization_id, \" + \" name, \" + \" city, \" + \" country, \" + \" url \" + \"FROM ORGANIZATION \"; String ORGANIZATION_PAGE_DATA_SELECT_INTO = \"\" + \"INTO :{page.organizationId}, \" (1) + \" :{page.name}, \" + \" :{page.city}, \" + \" :{page.country}, \" + \" :{page.homepage}\"; } 1 The syntax ':{identifier.attribute}' adds convenience to map SQL result sets to Scout page data objects. Taking advantage of the SQL convenience offered by the Scout framework, we can add the missing functionality with two lines of code. See Listing 23 for the full listing of method getOrganizationTableData. After adding the two additional lines, we update the imports of the classes with pressing Ctrl+Shift+O. Listing 23. Method getTableData to access the database and map the data into a pageData object. public class OrganizationService implements IOrganizationService { @Override public OrganizationTablePageData getOrganizationTableData(SearchFilter filter) { OrganizationTablePageData pageData = new OrganizationTablePageData(); String sql = SQLs.ORGANIZATION_PAGE_SELECT + SQLs.ORGANIZATION_PAGE_DATA_SELECT_INTO; (1) SQL.selectInto(sql, new NVPair(\"page\", pageData)); (2) return pageData; } } 1 Added line 1: Assembling of the SQL statement 2 Added line 2: Fetching the data from the database and storing the result in pageData Note that the identifier \"page\" in the NVPair object will be mapped to the same identifier used in the ORGANIZATION_PAGE_DATA_SELECT_INTO statement. Finally, we have to also implement the loading of the person data in class PersonService. The implementation of method getPersonTableData is provided in Listing 24. Listing 24. Method getPersonTableData to access the database and map the data into a page data object. public class PersonService implements IPersonService { @Override public PersonTablePageData getPersonTableData(SearchFilter filter) { PersonTablePageData pageData = new PersonTablePageData(); String sql = SQLs.PERSON_PAGE_SELECT + SQLs.PERSON_PAGE_DATA_SELECT_INTO; SQL.selectInto(sql, new NVPair(\"page\", pageData)); return pageData; } } In the third step of the \"Contacts\" tutorial we have added the infrastructure to work with a Derby database. The infrastructure is used to create and populate the initial database. In addition person and organization data is now fetched from the database on the \"Contacts\" backend server and handed to the \"Contacts\" frontend server via a page data object. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. Person and company data is now visible in the user interface as shown in Figure 31. Figure 31. The \"Contacts\" application displaying person data at the end of tutorial step 3. In this tutorial step we add the Scout forms that are used to create and edit persons and organizations in the user interface. This tutorial step also provides an introduction into the design and implementation of complex form layouts with the Scout framework. Before we start with the actual implementation of the form Designing the Person Form provides an introduction to the layouting concepts of the Scout framework. Based on this information we design a hierarchical form layout for the person form and can then dive into the creation of the person form. Implementing the Form (Implementing the Form) Adding a Gender Code Type (Adding a Gender Code Type) Adding Form Fields (Adding Form Fields) Person Form Handler and Person Service (Person Form Handler and Person Service) The tutorial step concludes with a summary in What have we achieved?. We start with the sketch of the form layout as shown in Figure 32. Figure 32. A sketch of the target layout for the person form. The upper half of the form shows a picture of the person and contains some primary attributes such as first name and the gender of the person. The lower half of the form contains tab boxes. A \"Contact Info\" tab provides contact details of the person and adding notes for the person in the form of free text is possible in the \"Notes\" tab. Figure 33 below shows how the sketched form can fit with the logical grid layout of the Scout framework. Scout containers have two columns (indicated in red) per default and as many rows (indicated in yellow) as needed. Figure 33. Logical columns and rows of the Scout form layout. Scout containers have two columns per default. Individual form fields consist of a label part and a field part and occupy a single cell in the logical grid. Examples for fields using the default configuration are the first name field or the email field. When needed, fields can be configured to occupy several columns or rows. An example for this case is the image field that will hold the picture of the person. This field is configured to occupy 5 logical rows. With Scout’s container widgets such as group boxes, tab boxes and sequence boxes complex layouts can be achieved. Containers provide a lot of flexibility as these widgets can be nested hierarchically as shown in Figure 34 Figure 34. The hierarchical organization of the form including Scout group boxes, tab boxes and a sequence box. The sketch above details the organization of the container components to match the desired layout for the person form. The different container widgets can all be used with their default settings except for the address box. For the address box we will have to modify its size and its inner organization. As group boxes occupy two columns per default we will need to reduce the width of the address box to a single column. The second change is to the inner layout of the address box. To force the location box to come below the street field we have to change the inner layout of the group box to a single column as well. Otherwise, the location box would be shown next to the street field. In the next section we will start to implement the person form with the layout described above. In this section we implement the person form with its container widgets as described in the previous section. To be able to use the form to create and edit persons we will add \"New\" and \"Edit\" context menus to the table in the person page. Finally, we will also add a \"Create Person\" entry to the \"Quick Access\" top level menu of the application. Start the form creation with the Scout new form wizard following the steps listed below. Expand the Maven module contacts.client in the package explorer Select package org.eclipse.scout.contacts.client.person in folder src/main/java For IntelliJ: Create a new Scout form by right-clicking on the package and selecting New → Scout Element → Form as shown in Figure 35 Enter \"Person\" into the Name as shown in Figure 36 and then hit Enter For Eclipse: Press Ctrl+N and enter \"form\" into the search field of the wizard selection dialog Select the Scout Form proposal and click the Next button Enter \"Person\" into the Name and verify that the field contents match Figure 37 Click Finish to start the creation of the form and its related components Figure 35. Create a New Scout Form in IntelliJ. Figure 36. Use the New Scout Form to create the person form in IntelliJ. Figure 37. Use the New Scout Form to create the person form in Eclipse. Now open the newly created class PersonForm in the Java editor and perform the changes listed below as shown in Listing 25. Add property personId with the corresponding getter and setter methods Add method computeExclusiveKey Add method getConfiguredDisplayHint Verify the translated text entry in method getConfiguredTitle Listing 25. Add getConfiguredDisplayHint and the methods related to the person’s primary key. @ClassId(\"1cde38c1-da32-4fdd-92e7-28d82a5d7bf9\") @FormData(value = PersonFormData.class, sdkCommand = SdkCommand.CREATE) (1) public class PersonForm extends AbstractForm { // represents the person's primary key private String personId; @FormData (2) public String getPersonId() { return personId; } @FormData (2) public void setPersonId(String personId) { this.personId = personId; } @Override public Object computeExclusiveKey() { (3) return getPersonId(); } @Override protected int getConfiguredDisplayHint() { (4) return IForm.DISPLAY_HINT_VIEW; } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Person\"); } } 1 Links the form with its form data class PersonFormData. 2 The annotation @FormData on the getter and setter method define the personId as a property that will be included in the form data. 3 The object returned by this method is used by the framework to verify if a specific entity is already opened in some other form. 4 Configure this form to be opened in the view mode. Views are opened in the bench area of the user interface. We are now going to add the layout containers according to Listing 26. First add class GeneralBox using the Scout content assist selecting the Group Box proposal. Delete method getConfiguredLabel, as we are only using this group box to organize fields. After the general box add a tab box container class by choosing the Tab Box proposal in the Scout content assist. Inside of class DetailsBox create the individual tab containers \"Contact Info\", \"Work\" and \"Notes\" as inner classes of the details box according to Listing 26. Listing 26. The layouting structure of the person form using Scout container widgets. public class PersonForm extends AbstractForm { @Order(10) @ClassId(\"27a040ac-eac5-47c6-a826-572633b9d4ef\") public class MainBox extends AbstractGroupBox { (1) @Order(10) @ClassId(\"08832a97-8845-4ff4-8dfd-c29366c22742\") public class GeneralBox extends AbstractGroupBox { (2) } @Order(20) @ClassId(\"3469046e-ee95-4e86-b0c9-a8ed01fbf664\") public class DetailsBox extends AbstractTabBox { (3) @Order(10) @ClassId(\"2081b483-3d6e-4239-b7da-b6e2d2aa3b7a\") public class ContactInfoBox extends AbstractGroupBox { (4) @Order(10) @ClassId(\"736450dd-ba89-43cd-ba52-bcd31196b462\") public class AddressBox extends AbstractGroupBox { } } @Order(20) @ClassId(\"8e18a673-aca5-44a2-898f-60a744e4467a\") public class WorkBox extends AbstractGroupBox { } @Order(30) @ClassId(\"fcb5b155-2c89-4ef8-9a96-ac41e9032107\") public class NotesBox extends AbstractGroupBox { } } @Order(30) @ClassId(\"e54548b8-601e-41a4-842c-db25b5f1cad1\") public class OkButton extends AbstractOkButton { } @Order(40) @ClassId(\"26612eb9-1832-4284-ac5a-9f450dc7ff9b\") public class CancelButton extends AbstractCancelButton { } } } 1 Every Scout form has a class MainBox. It contains all visible UI components. 2 The GeneralBox will hold the picture field, first name and last names, the date of birth and the gender. 3 The DetailsBox tab box will contain the various tabs implemented in inner group boxes. 4 The containers ContactInfoBox, WorkBox and Notes represent the three tabs of the tab box. To actually open the person form the form needs to be integrated in the user interface. In Scout application forms are typically opened by first selecting a specific row in a page and then using a context menu. For the \"Contacts\" application we will follow this pattern too. Open class PersonTablePage in the Java editor and create the context menus \"New\" and \"Edit\" in the inner class Table according to Listing 27. Listing 27. The page context menus to open the person form. @PageData(PersonTablePageData.class) @ClassId(\"23c10251-66b1-4bd6-a9d7-93c7d1aedede\") public class PersonTablePage extends AbstractPageWithTable { @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { @Override protected Class getConfiguredDefaultMenu() { (1) return EditMenu.class; } @Order(10) @ClassId(\"4a8f5e0e-6eb8-4296-8ad7-012151f572f2\") public class EditMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"Edit\"); } @Override protected void execAction() { PersonForm form = new PersonForm(); form.setPersonId(getPersonIdColumn().getSelectedValue()); (2) form.addFormListener(new PersonFormListener()); // start the form using its modify handler form.startModify(); } } @Order(20) @ClassId(\"8ac358f2-de17-4b2b-93f3-73e21a7415d8\") public class NewMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"New\"); } @Override protected Set getConfiguredMenuTypes() { (3) return CollectionUtility. hashSet( TableMenuType.EmptySpace, TableMenuType.SingleSelection); } @Override protected void execAction() { PersonForm form = new PersonForm(); form.addFormListener(new PersonFormListener()); // start the form using its new handler form.startNew(); } } private class PersonFormListener implements FormListener { @Override public void formChanged(FormEvent e) { // reload page to reflect new/changed data after saving any changes if (FormEvent.TYPE_CLOSED == e.getType() && e.getForm().isFormStored()) { reloadPage(); } } } } } 1 This action gets executed when the user presses Enter on a table row or double clicks on a table row. 2 Transfer the primary key of the selected person row to the person form. 3 Including TableMenuType.EmptySpace in the return value activates the \"New\" menu even when no row is selected. In addition to the context menus defined for the person page we also add a \"Create new person\" menu on the desktop under the \"Quick Access\" top level menu. To do this open class Desktop in the Java editor and navigate to the inner class QuickAccessMenu. We can then add a NewPersonMenu using the Scout content assist and selecting the Menu proposal entry. The final implementation for the \"Create new person\" menu is provided in Listing 28. Listing 28. The \"Create new person\" menu on the desktop. @ClassId(\"70eda4c8-5aed-4e61-85b4-6098edad8416\") public class Desktop extends AbstractDesktop { @Order(10) @ClassId(\"50df7a9d-dd3c-40a3-abc4-4619eff8d841\") public class QuickAccessMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"QuickAccess\"); } @Order(10) @ClassId(\"effb3b69-f488-4aed-8923-d430a5f1fd97\") public class NewPersonMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"NewPersonMenu\"); } @Override protected void execAction() { new PersonForm().startNew(); } } } } We have now created the initial implementation of the person form including context menus to open the form from the person page and the \"Quick Access\" top level menu of the \"Contacts\" application. At this point it is already possible to verify that the person form can be opened on the user interface via the context menus. A screenshot of the current state is shown in Figure 38. Figure 38. The initial person form and the top level menu \"Create new person\". This initial implementation of the person form is also ready to add the individual form fields into the container boxes. For the fields of the person form we can directly extend the abstract form field classes offered by the Scout framework. Only for the implementation of the gender field we need a Scout code type that represents the possible values for the radio buttons. In this section we will add a gender code type for the \"Contacts\" application. As code types can be used for the specification of the options of a radio button group, we will be able to implement the gender field by providing a reference to the code type. To keep things simple, the gender code type will contain a \"Male\" code and a \"Female\" code. Code types are frequently used in both the frontend and the backend of an application. This implies that code type classes need to be implemented in the application’s shared module. As the gender code type is related to persons we will implement this class in the person package. Follow the steps described below to create the gender code type. Expand the Maven module contacts.shared in the package explorer Select package org.eclipse.scout.contacts.shared.person in folder src/main/java For IntelliJ: Create a new Scout code type by right-clicking on the package and selecting New → Scout Element → Code Type as shown in Figure 39 Enter \"Gender\" into the Name as shown in Figure 40 and then hit Enter In the generated code type, change the generics from to . For Eclipse: Press Ctrl+N and enter \"code\" into the search field of the wizard selection dialog Select the Scout CodeType proposal and click the Next button Enter \"Gender\" into the Name field and use the type String for the first and second type argument according to Figure 41 Click Finish. Figure 39. Create the gender code in IntelliJ. Figure 40. Create the gender code using the Scout new code wizard in IntelliJ. Figure 41. Create the gender code using the Scout new code wizard in Eclipse. Then, open the newly created class GenderCodeType in the Java editor and set the ID constant to \"Gender\". The created class will then look like Listing 29 except for the missing inner code classes. We will add these inner codes as the next step. Listing 29. The Scout code type to represent the gender of a person. This code type will be used for the gender field. @ClassId(\"bbe8fae2-4923-42bc-9745-3bb3ef592b12\") public class GenderCodeType extends AbstractCodeType { private static final long serialVersionUID = 1L; public static final String ID = \"Gender\"; @Override public String getId() { return ID; } @Order(1000) @ClassId(\"8893e1e4-7b6c-46c2-8c84-42c914ec29d5\") public static class MaleCode extends AbstractCode { private static final long serialVersionUID = 1L; public static final String ID = \"M\"; @Override protected String getConfiguredText() { return TEXTS.get(\"Male\"); } @Override public String getId() { return ID; } } @Order(2000) @ClassId(\"23e1540e-2914-401f-9f42-e409ac2fb605\") public static class FemaleCode extends AbstractCode { private static final long serialVersionUID = 1L; public static final String ID = \"F\"; @Override protected String getConfiguredText() { return TEXTS.get(\"Female\"); } @Override public String getId() { return ID; } } } To add an inner class MaleCode code to the gender code type perform the steps below. Press Ctrl+Space and select the Code proposal with a double click Enter \"Male\" into the first box to be used in the MaleCode class name Tab to the value for the ID constant and set it to \"M\" Tab to the value in TEXTS.get and add \"Male\" and its translated text Hit Enter to finish Then repeat the steps above for the female code. In this section we will add the form fields to the layout containers of the person form. We will start with filling the general box with the picture field, followed by the other fields in the upper part of the person form. Finally, we fill the individual tab boxes into the details box in the lower part of the person form. As the first field we add the field that will show the picture of the person to the GeneralBox container. Open class PersonForm in the Java editor Place the cursor in the body of the inner class GeneralBox. Copy the code provided in Listing 30 into the general box. Add for each field a getter method above the MainBox (where all other getters are). Alternatively you could use the SDK to create both fields (including getters) and add the code from Listing 30. Listing 30. The picture field for the person form. @Order(10) @ClassId(\"617ffd40-0d69-4d02-b4f8-90c28c68c6ce\") public class PictureUrlField extends AbstractStringField { @Override (1) protected boolean getConfiguredVisible() { return false; } } @Order(20) @ClassId(\"6366a23e-f8ba-4b50-b814-202e63daffc8\") public class PictureField extends AbstractImageField { @Override (2) protected Class getConfiguredMasterField() { return PictureUrlField.class; } @Override (3) protected void execChangedMasterValue(Object newMasterValue) { updateImage((String) newMasterValue); } @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected int getConfiguredGridH() { return 5; } @Override protected boolean getConfiguredAutoFit() { return true; } @Override protected String getConfiguredImageId() { return Icons.User; } protected void updateImage(String url) { setImageUrl(url); } } 1 Sets the field invisible. An invisible field does not occupy space in the user interface. 2 Declares PictureUrlField as the master field of the picture field. 3 This method will be called when the value of the master field has changed. Using the combination of the PictureField and PictureUrlField as its master field has two benefits. First, having a field that contains the the URL makes sure that this information is also stored in the form data and second, the method execChangedMasterValue can then be used to trigger the refresh of the actual picture when the picture URL is changed. For security reasons, the browser is not allowed to load content from other servers by default. For our demo images, we add a well-considered exception. Open the config.properties file of your UI server project and make sure it contains the following line: Listing 31. Content Security Policy Configuration (config.properties) scout.cspDirective[img-src]='self' www.gravatar.com wiki.eclipse.org upload.wikimedia.org The remaining fields for the general box can then be added using the Scout content assist or by copying Listing 32 into the code below the picture field, again not forgetting the getters above the MainBox. Listing 32. The other fields in the general box. @Order(30) @ClassId(\"359be835-439f-456e-9b0d-c832b034a298\") public class FirstNameField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"FirstName\"); } } @Order(40) @ClassId(\"8679ade5-21fb-470e-8f00-13bd15199101\") public class LastNameField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"LastName\"); } } @Order(50) @ClassId(\"7c602360-9daa-44b8-abb6-94ccf9b9db59\") public class DateOfBirthField extends AbstractDateField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"DateOfBirth\"); } } @Order(60) @ClassId(\"b9d0593e-3938-4f97-bdca-fdb6a1ce1d77\") public class GenderGroup extends AbstractRadioButtonGroup { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Gender\"); } @Override (1) protected Class> getConfiguredCodeType() { return GenderCodeType.class; } } 1 The codes defined in GenderCodeType will be used to determine the actual radio buttons to add to the gender field. Whenever we add several fields to a Scout container field the individual fields will be displayed according to their order specified by the @Order annotation in the source code. Using the default two column layout, the Scout layouting engine uses the first fields to fill up the first column before the remaining fields are assigned to the second column. In general the Scout layouting engine tries to balance the number of fields over all available columns. For the general box this rule has the effect that the picture field (this is the first field according to its order value) is assigned to the left column and all other fields are assigned to the right column. After having added all the fields to the general box of the person form we can now fill the individual tabs of the DetailsBox container. We start with adding the content to the tabs \"Work\" and \"Notes\" as described below. Now add the string fields listed below to the \"Work\" tab as inner classes of the container field WorkBox. Use the Scout content assist to add the fields and select String Field as the type of each field. Class PositionField, using label \"Position\" Class OrganizationField, using label \"Organization\" Class PhoneWorkField, using label \"Phone\" Class EmailWorkField, using label \"E-Mail\" The \"Notes\" tab represented by the container field NotesBox only contains a single string field. This field will not need a label, span 4 rows of the logical grid and hold a multi line text according to Listing 33. Listing 33. The notes tab box with its multi line text field. @Order(30) @ClassId(\"fcb5b155-2c89-4ef8-9a96-ac41e9032107\") public class NotesBox extends AbstractGroupBox { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Notes\"); } @Order(10) @ClassId(\"ce791f14-fca6-4f11-8476-89cbf905eb2e\") public class NotesField extends AbstractStringField { @Override protected int getConfiguredGridH() { return 4; } @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected boolean getConfiguredMultilineText() { return true; } } } } Next is the implementation of the address box in the \"Contact Info\" tab. The address box is realized as a single column group box that holds a street field, a city field and a country field. According to the form layout defined in Designing the Person Form the city field and the country field will be located on the same logical row and in the same cell of the logical grid. In the Scout default layout each form field uses up a single cell of the logical grid. Whenever we like to be more economical with the space occupied by several fields, we can work with a Scout sequence box. Inner fields of a sequence box will be arranged on a single row from left to right and the spacing between the inner fields will be minimal. Taking advantage of these properties we implement the location box as a sequence field according to Listing 34. To further optimize screen real estate we also switch to on-field labels for the city field and the country field. Listing 34. The content of the address box. @Order(10) @ClassId(\"736450dd-ba89-43cd-ba52-bcd31196b462\") public class AddressBox extends AbstractGroupBox { @Override protected boolean getConfiguredBorderVisible() { return false; } @Override protected int getConfiguredGridH() { (1) return 3; } @Override protected int getConfiguredGridW() { (1) return 1; } @Override protected int getConfiguredGridColumnCount() { (2) return 1; } @Order(10) @ClassId(\"a9137ad1-af9d-4fef-a69d-3e3d9ce48f21\") public class StreetField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Street\"); } } // use a sequence box for horizontal layout (3) @Order(20) @ClassId(\"a278333c-057e-4c1d-a442-0c1dd62fdca7\") public class LocationBox extends AbstractSequenceBox { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Location\"); } @Override protected boolean getConfiguredAutoCheckFromTo() { (4) return false; } @Order(10) @ClassId(\"3ea6ac2a-976e-4c7f-b04b-ec0d7d1ae5ec\") public class CityField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"City\"); } @Override protected byte getConfiguredLabelPosition() { return LABEL_POSITION_ON_FIELD; (5) } } @Order(20) @ClassId(\"d4dfce4f-019b-4a61-ba78-347ef67cf80f\") public class CountryField extends AbstractSmartField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Country\"); } @Override protected byte getConfiguredLabelPosition() { return LABEL_POSITION_ON_FIELD; } @Override protected Class> getConfiguredLookupCall() { return CountryLookupCall.class; } } } } 1 Makes the address box to occupy 1 column and 3 rows. 2 The content in the address box will use a single column layout. 3 Extending a Scout sequence box will place the inner fields of the LocationBox on a single row. 4 Disables the default check if the value of the first field in the sequence box is less than the value in the second field. 5 On field labels do not take any additional space and are shown in the field itself. While string fields are used for the street field and the city field, the country field is implemented as a smart field. Scout smart fields can be viewed as a powerful drop down lists with search-as-you-type support. In the case of the country field the smart field is backed by the lookup class CountryLookupCall that we already used for the country smart column in the person page. After the address box the \"Contact Info\" box contains the three fields mentioned below. Use the Scout content assist to add the fields and select String Field as the type of each field. Class PhoneField, using label \"Phone\" Class MobileField, using label \"Mobile\" Class EmailField, using label \"E-Mail\" We have now completed the implementation of the form layout and added all form fields of the person form. You might not have enough permissions yet to access the person form. For simplicity we will give all permissions to anyone. Follow the steps described below. Expand the Maven module contacts.server in the Eclipse package explorer Navigate to the package org.eclipse.scout.contacts.server.security in folder src/main/java Adjust the file ServerAccessControlService.java according to Listing 35. Listing 35. The content of the class ServiceAccessControlService. @Replace public class ServerAccessControlService extends AccessControlService { @Override protected IPermissionCollection execLoadPermissions(String userId) { return BEANS.get(AllPermissionCollection.class); } } The application is now in a state where we can verify the layout of the person form and check the handling of the different input fields. (Re)start the application and enter some values into the various fields of the person form. To view and enter person data with the form we have yet to add the interaction with the database in the backend of the \"Contacts\" application. This is the topic of the next section. This section shows how we can integrate the person form created in the previous sections with the \"Contacts\" backend application to load and store person data with the database. Most of the necessary infrastructure such as the transfer objects between the frontend and the backend application has already been created by the Scout form wizard. In the text below we will first discuss the setup created by the new form wizard and then add the missing code snippets to interact with the database. On the frontend side, the Scout new form wizard has also created the two form handler classes ModifyHandler and NewHandler. By convention a ModifyHandler is used to change existing data and a NewHandler implements the creation of new data. Form handler classes provide a number of callback methods that are invoked at various stages during the life cycle of the form. The implementation created by the Scout wizard includes the methods execLoad and execStore for each form handler. In these methods the form fetches data from the Scout backend application and/or sends new data to the backend server. Adapt the default implementation of the form handlers according to Listing 36. Listing 36. The new handler and modify handler for the person form. public class PersonForm extends AbstractForm { public class ModifyHandler extends AbstractFormHandler { @Override protected void execLoad() { IPersonService service = BEANS.get(IPersonService.class); (1) PersonFormData formData = new PersonFormData(); exportFormData(formData); (2) formData = service.load(formData); (3) importFormData(formData); (4) getForm().setSubTitle(calculateSubTitle()); (5) } @Override protected void execStore() { IPersonService service = BEANS.get(IPersonService.class); PersonFormData formData = new PersonFormData(); exportFormData(formData); service.store(formData); (6) } } public class NewHandler extends AbstractFormHandler { @Override protected void execStore() { IPersonService service = BEANS.get(IPersonService.class); PersonFormData formData = new PersonFormData(); exportFormData(formData); formData = service.create(formData); (7) importFormData(formData); } } protected String calculateSubTitle() { return StringUtility.join(\" \", getFirstNameField().getValue(), getLastNameField().getValue()); } } 1 Obtains a reference to the person service located on the Scout backend application. 2 All form field values are transferred to the form data. In this case the person primary key property will be transferred to the form data. Remember that we have set this key in the \"Edit\" context menu. 3 The form data (including the person primary key) is sent to the load method. The load method returns the person data from the backend. 4 The field values in the form data are loaded into the form fields of the person form. 5 The sub title on the view tab of the form is updated to reflect the name of the person. 6 Calls the store method of the person service providing the updated person data. 7 Calls the create method of the person service providing the new person data. With the implementation provided in Listing 36 the classes ModifyHandler and NewHandler orchestrate the complete roundtrip between the frontend and the backend of the \"Contacts\" application. The only part that is now missing is the implementation of the form service methods create, load and store on the backend of the \"Contacts\" application. For these methods we can again rely on the default implementations created by the Scout new form wizard. Modify the person service methods according to Listing 37. Listing 37. The PersonService methods to load, create and update person data. public class PersonService implements IPersonService { @Override public PersonFormData create(PersonFormData formData) { if (!ACCESS.check(new CreatePersonPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } // add a unique person id if necessary if (StringUtility.isNullOrEmpty(formData.getPersonId())) { formData.setPersonId(UUID.randomUUID().toString()); } SQL.insert(SQLs.PERSON_INSERT, formData); (1) return store(formData); (2) } @Override public PersonFormData load(PersonFormData formData) { if (!ACCESS.check(new ReadPersonPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.selectInto(SQLs.PERSON_SELECT, formData); (3) return formData; } @Override public PersonFormData store(PersonFormData formData) { if (!ACCESS.check(new UpdatePersonPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.update(SQLs.PERSON_UPDATE, formData); (4) return formData; } } 1 The SQL insert statement adds a new person entry in the database. Only the primary key is used to create this entry. 2 To save all other person attributes provided in the form data, the store method is reused. 3 The SQL select into transfers the person data from the database into the form data. 4 The SQL update statement transfers all person attributes provided in the form data to the person table. In the fourth step of the \"Contacts\" tutorial we have added the person form to add, view and change persons. Using the person form as an example we have learned how to implement complex form layouts using the Scout layouting mechanism, Scout container fields and individual form field properties. We have also seen how we can use context menus to integrate the forms in the user interface of the application and have implemented the interaction of the frontend with the backend application including the persistance of person data in the database. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. We can now verify the creation of new person entries and the modification of existing person data in the current state of the \"Contacts\" application. The created person form is shown in Figure 42. In case you copied some code snippets from the tutorial, you may see the text \"undefined text {…​}\" in some labels in the person field. You may want to define these texts using the Scout content assist for defining new texts as was already presented earlier in this tutorial. Figure 42. The \"Contacts\" application with the person form at the end of tutorial step 4. This tutorial step introduces two additional concepts that are used in most Scout applications. Form field validation and template fields. Form field validation helps to keep data quality high and template fields are used to increase the code quality of a Scout application. In addition to just retrieving and storing new data, a business application should also help the user to maintain the quality of the entered data. To validate user input, the Scout framework offers form field validation. Simple input validation is possible on the level of individual fields as shown in Simple Form Field Validation. Scout also offers mechanisms to validate field values on the level of container fields or on the level of a form as shown in Complex Form Field Validation. In the text below we add a number of form field validations that implement this approach for the person form. In Creating Template Fields we refactor the picture field code into a template field that can later be re-used for the organization form. To edit the image URL we add a simple edit form to the refactored picture field in Adding a simple URL Input Form to the Picture Field. In More Template Fields we outline the creation of additional template fields and provide a summary of this tutorial step in What have we achieved?. This section explains the form field validation on the level of a single field. As an example we will use the email address field defined in the \"Contact Info\" tab. The validation implemented in Listing 38 checks the length and the format of the entered email address. Listing 38. The validation of the email field @Order(40) @ClassId(\"5f9d9363-8e57-4151-b281-7d401e64702c\") public class EmailField extends AbstractStringField { private static final String EMAIL_PATTERN = (1) \"^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@\" + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\"; @Override protected String getConfiguredLabel() { return TEXTS.get(\"Email\"); } @Override (2) protected int getConfiguredMaxLength() { return 64; } @Override (3) protected String execValidateValue(String rawValue) { if (rawValue != null && !Pattern.matches(EMAIL_PATTERN, rawValue)) { throw new VetoException(TEXTS.get(\"BadEmailAddress\")); (4) } return rawValue; (5) } } 1 Email verification is performed against a simple regular expression. 2 This prevents the field from accepting more than 64 characters. The return value should match the size of the corresponding table column. 3 Method execValidateValue is called during validation of the new field value. 4 If the value violates any business rules, a VetoException should be thrown. 5 If the new value passes all business rules the method returns the value. In the next section we use the address box to demonstrate the joint validation of several fields. Often the values of several fields have to be considered jointly to evaluate if the entered data is actually valid. As an example we will add a more complex form field validation on the level of the AddressBox group box widget that takes into account the data entered into the street, city, and country fields. The implemented validation for the address box example should enforce the following set of business rules. Only valid countries should be allowed If a city is provided a country must also be provided If street information is provided, both a city and a country must be provided The address may be empty The simplest rule is about entering only valid countries. This rule is already implemented as the country smart field only allows the user to select a single entry of the list of valid countries. A possible implementation to enforce the other rules is provided in Listing 39. Listing 39. The validation of the fields in the address box @Order(10) @ClassId(\"736450dd-ba89-43cd-ba52-bcd31196b462\") public class AddressBox extends AbstractGroupBox { @Order(10) @ClassId(\"a9137ad1-af9d-4fef-a69d-3e3d9ce48f21\") public class StreetField extends AbstractStringField { @Override (1) protected void execChangedValue() { validateAddressFields(); (2) } } @Order(20) @ClassId(\"a278333c-057e-4c1d-a442-0c1dd62fdca7\") public class LocationBox extends AbstractSequenceBox { @Order(10) @ClassId(\"3ea6ac2a-976e-4c7f-b04b-ec0d7d1ae5ec\") public class CityField extends AbstractStringField { @Override protected void execChangedValue() { validateAddressFields(); (2) } } @Order(20) @ClassId(\"d4dfce4f-019b-4a61-ba78-347ef67cf80f\") public class CountryField extends AbstractSmartField { @Override protected void execChangedValue() { validateAddressFields(); (2) } } } protected void validateAddressFields() { boolean hasStreet = StringUtility.hasText(getStreetField().getValue()); boolean hasCity = StringUtility.hasText(getCityField().getValue()); getCityField().setMandatory(hasStreet); (3) getCountryField().setMandatory(hasStreet || hasCity); } } 1 This method is called after the value of this field has been changed. 2 After changing the street, the city or the country recompute which address fields are mandatory. 3 The city becomes mandatory if the street field is not empty. The country is mandatory if the street or the city is not empty. Whenever the content of the street field, the city field, or the country field is changed the mechanism implemented above triggers a re-evaluation of the mandatory status of the city field and the country field. As the Scout default form validation ensures that every mandatory field receives some content the application prevents the user from entering address data that does not satisfy the business rules mentioned above. The verification of user input can also be triggered before the form is closed. This behavior can be implemented by overriding method execValidate on the form level. As an example we use this mechanism to make sure that a user can only enter persons that have at least some name information. Now add this validation to the person form using the implementation provided in Listing 40. Listing 40. The validation of the first and last names on the form level public class PersonForm extends AbstractForm { @Override (1) protected boolean execValidate() { boolean noFirstName = StringUtility.isNullOrEmpty(getFirstNameField().getValue()); boolean noLastName = StringUtility.isNullOrEmpty(getLastNameField().getValue()); if (noFirstName && noLastName) { getFirstNameField().requestFocus(); (2) throw new VetoException(TEXTS.get(\"MissingName\")); (3) } return true; (4) } } 1 This method is called during the form validation and before the form is stored/closed. 2 Place the focus on the first name field. 3 In case both the first name and the last name fields are empty throw a VetoException, this will fail the validation. 4 The return value indicates if the validation has passed successfully or not. As we have now implemented a number of form field validations we are now ready to test the result in the running application. Re-start the \"Contacts\" application and try to trigger the different validation rules. Figure 43 shows the response of the user interface when trying to save invalid person data. Figure 43. The form field validation implemented for the person form. In this section we show how to refactor a group of fields into a Scout template field that is ready for reuse. As an example we refactor the picture field into a template field. Later in tutorial step Adding the Company Form we can then reuse this field in the company form to show the company’s logo. The generic approach to refactor a form field into a template field is listed below. Create an empty field data class in the shared module Create the template field class in the client module Copy the existing field code to the template field Let the original field extend the new template field and fix imports For refactoring the picture field we can exactly follow these steps. To create the empty field data class perform the following steps. Expand the shared module of the \"Contacts\" application Navigate into folder src/generated/java Add a new package org.eclipse.scout.contacts.shared.common Create class AbstractUrlImageFieldData in this package as shown in Listing 41 Listing 41. The empty form data class for the picture template field. package org.eclipse.scout.contacts.shared.common; public abstract class AbstractUrlImageFieldData { } We are now ready to implement the template field class according to the following steps. Navigate to the client module of the \"Contacts\" application Select package org.eclipse.scout.contacts.client.common in folder src/main/java Create a new Java class called AbstractUrlImageField and update the implementation according to Listing 42 Listing 42. The refactored picture field. @ClassId(\"73a4276f-77b2-4ad2-b414-7f806284bdb3\") @FormData(value = AbstractUrlImageFieldData.class, (1) sdkCommand = SdkCommand.CREATE, defaultSubtypeSdkCommand = DefaultSubtypeSdkCommand.CREATE) public abstract class AbstractUrlImageField extends AbstractImageField { private String url; (2) @FormData (2) public String getUrl() { return url; } @FormData (2) public void setUrl(String url) { this.url = url; updateImage(); } @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected int getConfiguredGridH() { return 5; } @Override protected boolean getConfiguredAutoFit() { return true; } @Override protected String getConfiguredImageId() { return Icons.User; } protected void updateImage() { setImageUrl(this.url); } } 1 The link to the corresponding field data class. 2 Field PictureUrlField is refactored into the property url value. To transfer the content of this property to the field data object we need to add annotation @FormData to its getter and setter methods. The next step is to replace the original code of the picture field with the newly created template field. Delete the field PictureUrlField and remove all the code from the field PictureField and let PictureField extend the newly created template field as shown in Listing 43. Listing 43. The refactored picture field. @Order(10) @ClassId(\"e7efc084-fe7a-462f-ba23-914e58f7b82d\") public class MainBox extends AbstractGroupBox { @Order(10) @ClassId(\"b20aad47-e070-4f3c-bafc-ddbaa3ae2a4c\") public class GeneralBox extends AbstractGroupBox { @Order(10) @ClassId(\"d80625e3-b548-47e4-9cae-42d70aaa568f\") public class PictureField extends AbstractUrlImageField { (1) } // additional form field } } 1 The implementation of the picture field is now provided by the template field AbstractUrlImageField. As the last step we need to slightly modify the SQL statement that loads and stores the picture URL information. The reason for the change is the replacement of the picture url field by an url property defined as a member of the picture field. For this change perform the steps listed below. Open class SQLs in the Java editor. In string PERSON_SELECT change the token ':pictureUrl' with ':picture.url' In string PERSON_UPDATE change the token ':pictureUrl' with ':picture.url' Based on the picture field example we have now walked through the complete process to turn normal fields into template fields. This process remains the same for refactoring container fields into template fields. Using the refactored picture template field we want the user to be able to enter and update the URL of the shown picture. We create a new form called PictureUrl as we’ve done before as shown in Figure 44 (IntelliJ) or Figure 45 (Eclipse). For Eclipse: Verify that you use the correct source folder and package name. In the Name field enter \"PictureUrl\". In section Additional Components deselect all checkboxes. Click Finish to let the wizard implement the form. Figure 44. Creating the picture URL form with the new form wizard in IntelliJ. Figure 45. Creating the picture URL form with the new form wizard in Eclipse. Now adapt the content of the URL form according to Listing 44. As you can see, there is no roundtrip to a backend server and the form only contains a single editable field. Listing 44. The form to edit the picture URL @ClassId(\"3b30ebf1-e8fe-4dd3-8124-5f5038b1d47c\") public class PictureUrlForm extends AbstractForm { @Override protected String getConfiguredTitle() { return TEXTS.get(\"PictureURL\"); } public void startModify() { startInternal(new ModifyHandler()); } public UrlField getUrlField() { return getFieldByClass(UrlField.class); } public InfoField getInfoField() { return getFieldByClass(InfoField.class); } @Order(10) @ClassId(\"6c5e0da2-cf04-402f-9784-43e3a138796b\") public class MainBox extends AbstractGroupBox { @Order(10) @ClassId(\"fdcc7087-a693-45e8-a889-3725b0995558\") public class UrlBox extends AbstractGroupBox { @Order(10) @ClassId(\"32b71aa6-1109-4b39-996f-f35a677faa06\") public class UrlField extends AbstractStringField { @Override protected boolean getConfiguredLabelVisible() { (1) return false; } @Override protected boolean getConfiguredStatusVisible() { return false; } @Override protected int getConfiguredGridW() { return 2; } } @Order(20) @ClassId(\"999c32e9-ca87-4b5c-a907-29d7a7400abf\") public class InfoField extends AbstractHtmlField { @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected boolean getConfiguredStatusVisible() { return false; } @Override protected int getConfiguredGridW() { return 2; } @Override protected boolean getConfiguredGridUseUiHeight() { return true; } @Override protected void execInitField() { setValue(HTML.fragment(HTML.icon(Icons.Info), HTML.bold(\" \" + TEXTS.get(\"PleaseNote\") + \": \"), TEXTS.get(\"SecurityUrlRestrictedMsg\")).toHtml()); } } } @Order(20) @ClassId(\"4e15ce0e-502c-4290-aeca-e83359f3bc5b\") public class OkButton extends AbstractOkButton { } @Order(30) @ClassId(\"f278815a-f4cf-4e86-a057-66cb7ce43fc3\") public class CancelButton extends AbstractCancelButton { } } public class ModifyHandler extends AbstractFormHandler { (2) } } 1 No label is needed as the name of the field is already provided by the title of the form. 2 As no round trip to the backend is required the modify handler can remain empty. We can now add an \"Edit URL\" menu to the picture template field. The implementation of the edit context menu is provided in Listing 45. Listing 45. The \"Edit URL\" menu for the refactored picture field public abstract class AbstractUrlImageField extends AbstractImageField { @Order(10) @ClassId(\"99c1c12a-84d4-4c1a-a009-dfd2b7b55ded\") public class EditURLMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"EditURL\"); } @Override protected Set getConfiguredMenuTypes() { return CollectionUtility. hashSet( ImageFieldMenuType.ImageUrl, ImageFieldMenuType.ImageId, ImageFieldMenuType.Null); } @Override protected void execAction() { PictureUrlForm form = new PictureUrlForm(); String oldUrl = getUrl(); if (StringUtility.hasText(oldUrl)) { (1) form.getUrlField().setValue(oldUrl); } form.startModify(); form.waitFor(); (2) if (form.isFormStored()) { (3) setUrl(form.getUrlField().getValue()); getForm().touch(); } } } } 1 If we already have an URL for the picture prefill the url field in the form with its value. 2 Method waitFor makes the application wait until the user has closed the form. 3 Only store the new URL if the user has saved a new value. Storing the value will refresh the picture in the user interface. Based on the example with the picture field we have now walked through the complete process to turn normal fields into template fields. This process remains the same for refactoring container fields into template fields. To reduce the amount of copy & paste for the implementation of the company form in the next tutorial step, we recommend that you refactor the following fields into templates. Email field Address group box field Notes group box field You can follow the steps described in the previous section for the picture field. To be able to copy & paste the code in the following tutorial step you may use the following class names. AbstractEmailField for the email template field AbstractAddressBox for the address group template field AbstractNotesBox for the notes tab template field Note that both the AbstractAddressBox and the AbstractNotesBox need their own form data object, whereas the AbstractEmailField does not. Replacing the concrete fields with the template fields in the person form will result in a number of compile errors in the field getter methods of the person form. In the case of the \"Contacts\" application these getter methods are not needed and can simply be deleted. Moving from concrete fields to template fields also implies some minor changes as we have seen with the picture template field. Therefore make sure to modify the SQL statements in class SQLs accordingly. Replace token ':street' by ':addressBox.street' Replace token ':city' by ':addressBox.city' Replace token ':country' by ':addressBox.country' Replace token ':notes' by ':notesBox.notes' In this step of the \"Contacts\" tutorial we have covered two important concepts for implementing business applications. Validation of user input on the level of fields, components and the complete form Creation and usage of template fields to minimize copy & paste where possible The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. Using the created picture template field we can now update the image in the picture form as shown in Figure 46. Figure 46. The person form with the refactored picture template field including a menu (red square) and a URL edit form. In the next tutorial step we are going to implement the company form to enter and edit company information. For the creation of this form we can reuse the template fields that we have created. This section describes the implementation of the organization form. For the implementation of the organization form we can apply many of the concepts we have learned in the previous sections. As a result, the descriptions of this section can be kept on a much higher level. Figure 47. The sketch of the organization form layout. Considering the layout sketch for the organization form shown in Figure 47 we can already see how we can reuse the following fields / templates. The picture field The address box with street, city and country including its validation The email field with its validation The complete \"Notes\" tab For the remaining fields \"Name\", \"Homepage\" and \"Phone\" we will use simple string fields with matching label texts. We can now implement the company form according to the following steps. Expand folder src/main/java in the client module in the package explorer Select package org.eclipse.scout.contacts.client.organization and create a new form called \"OrganizationForm\" as we’ve done before Hit Enter for IntelliJ or click Finish for Eclipse After creating the initial form class using Scout’s new form wizard the form layout can be implemented according to Listing 46. Listing 46. The layout implementation of the organization form public class OrganizationForm extends AbstractForm { private String organizationId; @FormData public String getOrganizationId() { return organizationId; } @FormData public void setOrganizationId(String organizationId) { this.organizationId = organizationId; } @Override public Object computeExclusiveKey() { return getOrganizationId(); } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Organization\"); } @Override protected int getConfiguredDisplayHint() { return IForm.DISPLAY_HINT_VIEW; } @Order(10) @ClassId(\"e7efc084-fe7a-462f-ba23-914e58f7b82d\") public class MainBox extends AbstractGroupBox { @Order(10) @ClassId(\"b20aad47-e070-4f3c-bafc-ddbaa3ae2a4c\") public class GeneralBox extends AbstractGroupBox { @Order(10) @ClassId(\"d80625e3-b548-47e4-9cae-42d70aaa568f\") public class PictureField extends AbstractUrlImageField { (1) @Override protected int getConfiguredGridH() { (2) return 4; } @Override protected double getConfiguredGridWeightY() { (3) return 0; } } @Order(20) @ClassId(\"4c1a0dea-6c04-4cad-b26b-8d5cc1b786a9\") public class NameField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Name\"); } @Override protected boolean getConfiguredMandatory() { (4) return true; } } @Order(30) @ClassId(\"68008603-257f-45dc-b8ea-d1e066682205\") public class HomepageField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Homepage\"); } } } @Order(20) @ClassId(\"4e48c196-22e4-4e22-965a-5e305af5e6a9\") public class DetailsBox extends AbstractTabBox { @Order(10) @ClassId(\"c6c9e644-2ab3-436e-9d8a-bdcc5482eb5b\") public class ContactInfoBox extends AbstractGroupBox { @Override protected String getConfiguredLabel() { return TEXTS.get(\"ContactInfo\"); } @Order(10) @ClassId(\"2a10bd00-de56-4a97-a5b2-6a8a0aae925f\") public class AddressBox extends AbstractAddressBox { (5) } @Order(20) @ClassId(\"504a4845-d307-4238-a2e9-9e785c1477ac\") public class PhoneField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Phone\"); } } @Order(30) @ClassId(\"0b4d059d-ec81-4e93-9a99-2512d734ebac\") public class EmailField extends AbstractEmailField { (6) } } @Order(20) @ClassId(\"85f4dfb0-f375-4e90-be92-b59e9bc2ebcf\") public class NotesBox extends AbstractNotesBox { (7) } } @Order(30) @ClassId(\"97c3ceed-d005-47da-b44d-def4b07f92ab\") public class OkButton extends AbstractOkButton { } @Order(40) @ClassId(\"d63bfcd6-7464-4e4f-a07e-eb1173a77f8c\") public class CancelButton extends AbstractCancelButton { } } } 1 We reuse the picture template field to display the company logo. 2 We reduce the number of rows for the company logo compared to the person picture. 3 We do not allow the general box to grow or shrink vertically 4 We configure the company name field to be mandatory for an organization. 5 As-is reuse of the address template box. 6 As-is reuse of the email template field. 7 As-is reuse of the notes tab box. To be able to open the organization form we need to link the form to the user interface. Following the pattern for the person form we define the context menus \"Edit\" and \"New\" for the organization table and a menu \"Create new organization\" under the \"Quick access\" top level menu. The implementation of the organization form is completed by providing the logic to interact with the database in the organization service according to Listing 47. The technical setup exactly follows the implementation of the person service. Listing 47. The OrganizationService methods to load, create and update organization data. public class OrganizationService implements IOrganizationService { @Override public OrganizationFormData create(OrganizationFormData formData) { if (!ACCESS.check(new CreateOrganizationPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } if (StringUtility.isNullOrEmpty(formData.getOrganizationId())) { formData.setOrganizationId(UUID.randomUUID().toString()); } SQL.insert(SQLs.ORGANIZATION_INSERT, formData); return store(formData); } @Override public OrganizationFormData load(OrganizationFormData formData) { if (!ACCESS.check(new ReadOrganizationPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.selectInto(SQLs.ORGANIZATION_SELECT, formData); return formData; } @Override public OrganizationFormData store(OrganizationFormData formData) { if (!ACCESS.check(new UpdateOrganizationPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.update(SQLs.ORGANIZATION_UPDATE, formData); return formData; } } Method prepareCreate is not needed for the creation of a new organization and we can remove it from OrganizationService and IOrganizationService. Therefore, the implementation of the method execLoad in the new handler of the organization form can also be removed. With these implementations of the organization form and organization service the \"Contacts\" application can now also be used to maintain a list of organizations. In the sixth step of the \"Contacts\" tutorial we have added the Scout form to edit and create organizations. The focus of this part of the tutorial was on re-using previous work and applying the concepts that have been introduced in previous tutorial steps. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. As shown in Figure 48 company data can now be viewed and entered in the user interface. Figure 48. The \"Contacts\" application with the newly created organization form. In this step we modify the user interface to represent the 1:n relationship between organizations and persons. For the implementation of this 1:n relation we follow the Scout standard pattern. In the \"Contacts\" application any person can be assigned to a single organization. This fact is represented in the database schema created using the statement SQLs.PERSON_CREATE_TABLE. We will therefore need to be able to assign a person to an existing organization by selecting an existing organization in the field. For this we modify the organization field on the person to a smart field. To display the assigned organizations we will also modify the person page accordingly. In addition we would like to be able to easily access all persons assigned to a specific organization. Using the existing organization page we will add a child page that will then show all associated persons. This will result in a drill-down functionality for the organization page. The implementation of the features described above can be achieved by the the following steps. Creating an Organization Lookup Call (Creating an Organization Lookup Call) Using the Lookup Call in the Person Form and the Person Table (Using the Lookup Call in the Person Form and the Person Table) Link the Person Page to Organizations (Link the Person Page to Organizations) This last tutorial step ends with a short review in What have we achieved? Before we can change the organization field on the person form from a string field to a smart field we need a organization lookup call that provides the necessary data to the smartfield. We have been using this approach for the country field already. The difference to the lookup call for countries lies in the fact that we no longer have a static list of entries but need to fetch possible the organizations dynamically. We will therefore need to access the database to provide the data to the lookup call. As this is a common requirement the Scout framework comes with the base class AbstractSqlLookupService and a default mechanism to route lookup calls from the frontend sever to database calls on the backend server. The necessary infrastructure can be created using the Scout lookup wizard according to the steps described below. Expand folder src/main/java in the shared module in the package explorer Select package org.eclipse.scout.contacts.shared.organization For IntelliJ Create a new Scout lookup call by right-clicking on the package and selecting New → Scout Element → Lookup Call as shown in Figure 49 Enter \"Organization\" into the name field as shown in Figure 50 and press Enter. In the generated lookup call, change the generic from to . For Eclipse Hit Ctrl+N Enter \"lookup\" into the search field of the wizard selection and double click on proposal Scout LookupCall Use \"OrganizationLookupCall\" as class name Enter \"String\" as the key class and use service super class \"AbstractSqlLookupService\" in the wizard Verify that the fields in the wizard match the values provided in Figure 51 Click Finish Figure 49. Creating the OrganizationLookupCall in IntelliJ. Figure 50. Using the Scout lookup call wizard for creating class OrganizationLookupCall in IntelliJ. Figure 51. Using the Scout lookup call wizard for creating class OrganizationLookupCall in Eclipse. The Scout wizard creates the lookup class OrganizationLookupCall and the corresponding lookup service with the interface IOrganizationLookupService and its initial implementation OrganizationLookupService. Beside making sure the generic uses the correct data type (String), the service interface and the lookup call class can be used as provided by the Scout wizard. We will only need to provide some implementation for the lookup service. Listing 48 shows the generated code for the lookup call. Listing 48. The OrganizationLookupCall implemented by the Scout wizard. @ClassId(\"22789824-ad89-4208-bc11-5c08b56ce998\") public class OrganizationLookupCall extends LookupCall { private static final long serialVersionUID = 1L; @Override protected Class> getConfiguredService() { return IOrganizationLookupService.class; } } We are now ready to implement method getConfiguredSqlSelect of the organization lookup service. Open class OrganizationLookupService in the Java editor and change the implementation according to Listing 49. Listing 49. The OrganizationService methods to load, create and update organization data. public class OrganizationLookupService extends AbstractSqlLookupService implements IOrganizationLookupService { @Override protected String getConfiguredSqlSelect() { return SQLs.ORGANIZATION_LOOKUP; (1) } } 1 We only need to return a single SQL statement for lookup services that extend AbstractSqlLookupService The SQL statement that backs the lookup service is provided in Listing 50. Lookup services can provide data for three different use cases. The most straightforward case is the mapping of a key to a specific lookup row. Next is the case where the lookup service returns a number of lookup rows that match a provided substring and finally the case where the lookup service simply returns all available rows. Listing 50. The SQL statement to provide the data for the organization lookup service. String ORGANIZATION_LOOKUP = \"\" + \"SELECT organization_id, \" + \" name \" + \"FROM ORGANIZATION \" + \"WHERE 1 = 1 \" + \" AND organization_id = :key \" (1) + \" AND UPPER(name) LIKE UPPER(:text||'%') \" (2) + \"\"; (3) 1 The where clause to be used for a search for a specific key 2 The where clause to be used when some search text is provided 3 The where clause that defines the full set of lookup rows Now we can use the organization lookup call to transform the organization field in the \"Work\" tab of the person form into a smart field. To do this we open class PersonForm in the Java editor and navigate to its inner class WorkBox. Then, update the implementation of the OrganizationField according to Listing 51 Listing 51. The organization smart field in the \"Work\" tab backed by the OrganizationLookupCall. @Order(20) @ClassId(\"8e18a673-aca5-44a2-898f-60a744e4467a\") public class WorkBox extends AbstractGroupBox { @Order(20) @ClassId(\"cd4a7afd-e0ac-4c79-bf2e-819aa491db27\") public class OrganizationField extends AbstractSmartField { (1) @Override protected String getConfiguredLabel() { return TEXTS.get(\"Organization\"); } @Override (2) protected Class> getConfiguredLookupCall() { return OrganizationLookupCall.class; } } } 1 The OrganizationField now extends a Scout smart field 2 The smart field is backed by the newly created organization lookup call This change has the effect, that now we can assign an organization in the person form by typing a substring of the organizations name into the organization field. The conversion of the field into a smart field has the additional benefit that only valid organizations can be selected that respect the referential integrity defined by the database. As a next step we also modify the organization column of the person page. For this open class PersonTablePage in the Java editor and navigate to its inner class Table. Then, change the implementation of OrganizationColumn according to Listing 52. Listing 52. The organization smart column in the person page. @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { @Order(9) @ClassId(\"2e53e50e-5bd5-421e-8bca-fc50f27d790b\") public class OrganizationColumn extends AbstractSmartColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"Organization\"); } @Override protected Class> getConfiguredLookupCall() { return OrganizationLookupCall.class; } } } Using the created organization lookup calls we have now completed the modifications on the person form and also used the lookup call to display the a person’s organization in the person page. The next section will focus on the necessary modifications and new components to re-use the person page as a sub page of the organization page. In this section we will implement a drill-down functionality on the organization page. The goal is to let the user of the application expand a row in the organization page to provide access to the persons of the organization. Scout node pages are useful when we want to display different entities that are related to a specific entry in a parent page. In the \"Contacts\" demo application this mechanism is used to link both persons and events to an organization as shown in Figure 52. Note that this is a screenshot of the \"Contacts\" demo application, not the tutorial application that we are building here. Figure 52. A drill-down on an organization in the \"Contacts\" demo application provides access to related persons and events. In the \"Contacts\" demo application this hierarchical page structure is implemented as follows. Organization page implemented in class OrganizationTablePage A node page implemented in class OrganizationNodePage Person page implemented in class OrganizationTablePage Event page implemented in class EventTablePage For the \"Contacts\" tutorial application we will create the exact same structure but only add the person page as child page to the organization node page. To implement this sequence of linked pages we will follow the dependencies of the linked classes. We start with adapting method getPersonTableData in the person service by adding an organization id parameter. Using this parameter we can then restrict the person search to the subset that is linked to the specified organization. For this change we first update the person service interface as shown in Listing 53. Listing 53. The updated method getPersonTableData for the person service interface. @ApplicationScoped @TunnelToServer public interface IPersonService { PersonTablePageData getPersonTableData(SearchFilter filter, String organizationId); (1) PersonFormData create(PersonFormData formData); PersonFormData load(PersonFormData formData); PersonFormData store(PersonFormData formData); } 1 Add parameter organizationId We now adapt the method implementation in the person service according to Listing 54. Listing 54. Method getPersonTableData to access the database and map the data into a page data object. public class PersonService implements IPersonService { @Override public PersonTablePageData getPersonTableData(SearchFilter filter, String organizationId) { PersonTablePageData pageData = new PersonTablePageData(); StringBuilder sql = new StringBuilder(SQLs.PERSON_PAGE_SELECT); // if an organization is defined, restrict result set to persons that are linked to it if (StringUtility.hasText(organizationId)) { sql.append(String.format(\"WHERE LOWER(organization_id) LIKE LOWER('%s') \", organizationId)); } sql.append(SQLs.PERSON_PAGE_DATA_SELECT_INTO); SQL.selectInto(sql.toString(), new NVPair(\"page\", pageData)); return pageData; } } Having modified the person service we add a organization id property to the person page. We can then populate this property when the person page is attached to the organization node page. Finally, we can use in method execLoadData according to Listing 55. Listing 55. Add the possibility to restrict the list of persons to those assigned to a specific organization. @PageData(PersonTablePageData.class) @ClassId(\"23c10251-66b1-4bd6-a9d7-93c7d1aedede\") public class PersonTablePage extends AbstractPageWithTable { private String organizationId; (1) public String getOrganizationId() { return organizationId; } public void setOrganizationId(String organizationId) { this.organizationId = organizationId; } @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IPersonService.class) .getPersonTableData(filter, getOrganizationId())); (2) } @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { @Order(20) @ClassId(\"8ac358f2-de17-4b2b-93f3-73e21a7415d8\") public class NewMenu extends AbstractMenu { @Override protected void execAction() { PersonForm form = new PersonForm(); form.getOrganizationField().setValue(getOrganizationId()); (3) form.addFormListener(new PersonFormListener()); // start the form using its new handler form.startNew(); } } } } 1 This property lets the person page remember an organization key 2 Provides the organization key to the person search on the backend server 3 If the user creates a new person below an organization pre-fill the corresponding field In the cases where the modified person page is shown as a child page of the organization page we can now improve the usability of the page’s new menu. When creating a person under an existing organization we create the new person with a pre-filled organization id. See the modified execAction method in NewMenu of Listing 55. The next step in the setup of the page hierarchy is the creation of the organization node page. Node pages allow to define a list of child pages that typically represent different entities. As mentioned before we will only have the person page as a child page in the \"Contacts\" tutorial application. To create the organization node page follow the steps listed below. Expand folder src/main/java in the client module in the package explorer Select package org.eclipse.scout.contacts.client.organization For IntelliJ Create a new Scout page by right-clicking on the package and selecting New → Scout Element → Page as we’ve done before Enter \"OrganizationNode\" into the name field and press Enter Finally, rename \"OrganizationNodeTablePage\" to \"OrganizationNodePage\" For Eclipse Hit Ctrl+N and enter \"scout page\" into the search field of the wizard selection and double click on proposal Scout Page Add \"Organization\" to the class name field Switch the super class field to \"AbstractPageWithNodes\" Verify that the fields in the wizard match the values provided in Figure 53 Click Finish Figure 53. Creating the organization node page. After the wizard has created the initial implementation of the node page, open class OrganizationNodePage in the Java editor and adapt its implementation according to Listing 56. Listing 56. The complete implementation of the class OrganizationNodePage. @ClassId(\"f074181d-462a-40dc-b7cd-46bb4e50e7fb\") public class OrganizationNodePage extends AbstractPageWithNodes { private String organizationId; (1) public String getOrganizationId() { return organizationId; } public void setOrganizationId(String organizationId) { this.organizationId = organizationId; } @Override (2) protected void execCreateChildPages(List> pageList) { PersonTablePage personTablePage = new PersonTablePage(); personTablePage.setOrganizationId(getOrganizationId()); (3) pageList.add(personTablePage); } } 1 The organization id property that represents the selected organization in the parent page 2 Method execCreateChildPages defines the list of child pages 3 Define the organization id property for the person child page We have now created an organization node page that contains a person page as its child page. The only missing step to create the discussed page hierarchy is the link between the organization page with the organization node page. Create this missing link by adding method execCreateChildPage to the organization page as shown in Listing 57. Listing 57. Add the organization node page as a child page to the organization page. @PageData(OrganizationTablePageData.class) @ClassId(\"18f7a78e-0dd0-4e4e-9234-99892bb4459f\") public class OrganizationTablePage extends AbstractPageWithTable { @Override protected IPage execCreateChildPage(ITableRow row) { OrganizationNodePage childPage = new OrganizationNodePage(); childPage.setOrganizationId(getTable().getOrganizationIdColumn().getValue(row)); return childPage; } } The difference between Scout table pages and node pages is also reflected in the different signatures of AbstractPageWithTable.execCreateChildPage and AbstractPageWithNodes.execCreateChildPages. Table pages can have a single child page while node pages may contain a list of child pages. In the seventh step of the \"Contacts\" tutorial we have introduced a typical Scout user interface pattern for 1:n relationships. We have created a dynamic lookup call and used the lookup call to provide the data for a smart field and a smart column. To implement a drill-down functionality for the organization table we have created a page hierarchy using the existing organization page and person page. To link the two table pages we have also created and integrated a Scout node page. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. As shown in Figure 54 the organization specific person data is now presented in a hierarchical form in the navigation area of the application. Figure 54. The linked person page only shows persons related to the parent organization page. If you want to add the created application to a Git repository there might some configurations be helpful. If there are no plans to use Git, this chapter can be skipped. E.g. it is best practice to exclude some files from adding to a Git repository. These exclusions can be configured by creating a file named .gitignore in the root folder of the repository (see the Git Documentation for details). Here is a sample file that might be used as starting point: # Git *.orig # Maven target/ .surefire-* .flattened-pom.xml # Node node_modules/ test-results/ # Do not check in any log files *.log","title":"Eclipse Scout One Day Tutorial","component":"scout-docs","version":"22","name":"one-day-tutorial","url":"/scout-docs/22/getstarted/one-day-tutorial.html","titles":[{"text":"The “Contacts” Application","hash":"sec-my_contacts_guide","id":1},{"text":"Tutorial Overview","hash":"sec-contacts_overview","id":2},{"text":"Setting up the Initial Project","hash":"sec-contacts_initial_project","id":3},{"text":"Creating the initial Codebase","hash":"sec-contacts_initial_codebase","id":4},{"text":"Removing unnecessary Components","hash":"sec-contacts_remove_stuff","id":5},{"text":"Changes to Class WorkOutline","hash":"sec-contacts_change_workoutline","id":6},{"text":"Changes to Class Desktop","hash":"sec-contacts_change_desktop","id":7},{"text":"What have we achieved?","hash":"sec-contacts_summary","id":8},{"text":"Adding the Person and Organization Page","hash":"sec-contacts_pages","id":9},{"text":"Creating additional Packages","hash":"sec-contacts_creating_person_package","id":10},{"text":"Creating the Country Lookup Call","hash":"sec-contacts_country_lookup_call","id":11},{"text":"Creating the Person Page","hash":"sec-contacts_creating_person_page","id":12},{"text":"Adding Table Columns to the Page","hash":"sec-contacts_adding_page_columns","id":13},{"text":"Link the Person Page to the Contacts Outline","hash":"sec-contacts_link_person_page","id":14},{"text":"Adding the Company Page","hash":"sec-contacts_adding_company_page","id":15},{"text":"What have we achieved?","hash":"sec-contacts_summary_step_2","id":16},{"text":"Creating and Accessing the Database","hash":"sec-contacts_jdbc","id":17},{"text":"Adding the Infrastructure","hash":"sec-contacts_jdbc_infra","id":18},{"text":"Scout Config Properties","hash":"sec-contacts_jdbc_properties","id":19},{"text":"The SQL Service and SQL Statements","hash":"sec-contacts_jdbc_sql","id":20},{"text":"The Database Setup Service","hash":"sec-contacts_jdbc_initial_db","id":21},{"text":"What is missing?","hash":"sec-contacts_jdbc_starting","id":22},{"text":"Fetching Organization and Person Data","hash":"sec-contacts_jdbc_fetching_data","id":23},{"text":"What have we achieved?","hash":"sec-contacts_jdbc_summary","id":24},{"text":"Adding a Form to Create/Edit Persons","hash":"sec-contacts_forms","id":25},{"text":"Designing the Person Form","hash":"sec-contacts_form_design","id":26},{"text":"Implementing the Form","hash":"sec-contacts_form_implement","id":27},{"text":"Adding a Gender Code Type","hash":"sec-contacts_form_code","id":28},{"text":"Adding Form Fields","hash":"sec-contacts_form_add_fields","id":29},{"text":"Person Form Handler and Person Service","hash":"sec-contacts_form_integrate_service","id":30},{"text":"What have we achieved?","hash":"sec-contacts_forms_summary","id":31},{"text":"Form Field Validation and Template Fields","hash":"sec-contacts_fields","id":32},{"text":"Simple Form Field Validation","hash":"sec-contacts_field_validation","id":33},{"text":"Complex Form Field Validation","hash":"sec-contacts_field_validation_complex","id":34},{"text":"Creating Template Fields","hash":"sec-contacts_form_templatefields","id":35},{"text":"Adding a simple URL Input Form to the Picture Field","hash":"sec-contacts_form_urleditform","id":36},{"text":"More Template Fields","hash":"sec-contacts_form_templatefields_more","id":37},{"text":"What have we achieved?","hash":"sec-contacts_form_templatefields_summary","id":38},{"text":"Adding the Company Form","hash":"sec-contacts_form_add_company","id":39},{"text":"What have we achieved?","hash":"sec-contacts_form_rest_summary","id":40},{"text":"Linking Organizations and Persons","hash":"sec-contacts_link_organization_person","id":41},{"text":"Creating an Organization Lookup Call","hash":"sec-contacts_company_lookup_call","id":42},{"text":"Using the Lookup Call in the Person Form and the Person Table","hash":"sec-contacts_modify_person_form_and_page","id":43},{"text":"Link the Person Page to Organizations","hash":"sec-contacts_organization_node_page","id":44},{"text":"What have we achieved?","hash":"sec-contacts_link_person_organization_summary","id":45},{"text":"Git configuration","hash":"sec-source_control","id":46}]},"24":{"id":24,"text":"This document is referring to a past Scout release. Please click here for the recent version. In this tutorial we will create your first Scout Classic application. If you don’t know what Scout Classic is yet, please read the Get Started Guide first. We will create the application using Eclipse or IntelliJ. The generated application will consist of a client and server part and simply display a text sent from the server. This section guides you through the installation of the tools required to start the Hello Scout application. Currently there is IDE support for Scout application development for IntelliJ IDEA and Eclipse. Such an IDE is not required but makes the development much easier. This tutorial describes the setup for both IDEs. Please choose the one you prefer. First, Node.js needs to be installed as Scout uses it to build web assets. So if you don’t have it yet, visit the Node.js download site, choose the package for your platform and install it on your local machine. Make sure the Node.js installation is on the PATH. You can verify it by using your command line: c:\\> node -v v16.13.0 Scout uses pnpm 6 as package manager. Therefore, install it into your Node installation by using your command line: npm install -g pnpm and verify that it was installed successfully with: c:\\> pnpm -v 6.22.2 If you have no IntelliJ yet, you can download it from the JetBrains download site. We recommend selecting the Ultimate edition to have the JavaScript support included in the IDE. There is a 30-day trial if you have no licence. For this tutorial you can also use the free Community Edition, but it requires some extra steps indicated. Install or extract the package and start IntelliJ (see Run IntelliJ IDEA for the first time for instructions). Follow the instructions until the Welcome to IntelliJ IDEA screen is shown. On the left side switch to Plugins, search for Eclipse Scout and press the green Install button. In case a Third-Party Plugins Privacy Notice is shown, press Accept. The Scout plugin does not collect or process any personal data. Afterwards, the plugin is being downloaded from the JetBrains Marketplace and installed locally. As soon as this is completed, press the Restart IDE button. The same can also be achieved by navigating to File | Settings | Plugins in case you already have an existing IntelliJ project running. Congratulations! You have successfully set up IntelliJ IDEA for Scout development. Then download the Eclipse IDE for Scout Developers package for your platform by visiting the official Eclipse download page. After the package selection, confirm the suggested mirror and extract the downloaded archive to your local disk. Congratulations! You have successfully installed Eclipse for Scout development. The Scout project creation depends on the IDE chosen. Therefore, please follow the instructions in the corresponding section below. Start your IntelliJ (if not already running) and in the Welcome to IntelliJ IDEA screen click on New Project. The New Project wizard starts. The same can also be achieved from the menu File | New | Project…​ if an existing project is open already. On the left side select the Scout type. You have to enter a Group Id, Artifact Id and a Display Name for your Scout project as shown in Figure 1. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). Figure 1. The new Scout project wizard. For the Hello Scout application just use the already pre-filled values and ensure the user interface programming language is set to Java as sown in Figure 1. Then click the Next button. Figure 2. Specify name and location of the new project. On the second page please specify project name and location and press Finish. The Scout plugin then creates the initial project content for you (you will see some Maven build output). Wait until all tasks have completed. Afterwards, you will find the created Scout modules in the Project view as shown in Figure 3. Figure 3. The initial set of Maven modules created for the Hello Scout application. If the modules are not automatically created as indicated in Figure 3, right click on the root pom.xml and click Add as Maven Project. Then you can start the Scout application for the first time. Since the Hello Scout app consists of a backend and a frontend, two servers need to be started. Before the frontend server can deliver any JavaScript code to the browser, the JavaScript build needs to be executed as well. You could start each run configuration separately, but for the sake of convenience there is a compound run configuration available which starts all at once. To start the launch configuration, use the Add Configuration…​ menu on the top as shown in Figure 4. In the dialog, expand the Compound type on the left side, select the prepared run configuration [webapp] all and confirm with Ok. Finally, click on the green triangle symbol directly right of the Add Configuration…​ menu. This will execute the Java build and start the Java frontend server and backend server afterwards. On IntelliJ Ultimate this will furthermore download all necessary JavaScript dependencies and execute the JavaScript build. If using the Community Edition, additionally execute the following commands on the command line manually: npm run pnpm-install in the root of your project (next to the pnpm-workspace.yaml) to install all JavaScript dependencies. npm run build:dev:watch in the helloscout.ui.html module to start the JavaScript build and watcher. The watcher keeps on running and will continuously update the JavaScript assets as you change your JavaScript source files (hot-code-replace). Figure 4. Selecting the compound run configuration The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites and check the IntelliJ settings in File | Settings | Languages & Frameworks | Node.js and NPM. Once the JS build has been completed (this may take a while for the first time as some dependencies need to be downloaded) and the two servers have been started, the Hello Scout application can be accessed by navigating to http://localhost:8082/ in your favorite web browser. The Hello Scout application is then presented as shown in Figure 5. Figure 5. The Hello Scout application in the browser. Start your Eclipse IDE and select an empty directory for your workspace as shown in Figure 6. This workspace directory will then hold all the project code for the Hello Scout application. Once the Eclipse IDE is running, it will show the Java perspective. Figure 6. Select a new empty folder to hold your project workspace To create a new Scout project, select the menu File New Project…​ and type Scout Project in the wizard search field. Select the Scout Project wizard and press Next. The New Scout Project wizard is then started as shown in Figure 7. Figure 7. The new Scout project wizard. In the New Scout Project wizard you have to enter a Group Id, Artifact Id and a Display Name for your Scout project. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). For the Hello Scout application just use the already pre-filled values and ensure the user interface programming language is set to Java as sown in Figure 7. Then click the Finish button to let the Scout SDK create the initial project code for you. Depending on your Eclipse installation, some Maven plugin connectors may initially be missing. In that case, a dialog as shown in Figure 8 appears. In order to resolve the selected connectors and continue, click on Finish. Afterwards, confirm the installation, accept the license and the message that some content has not been signed. Finally, the installation of the maven plugin connectors requires a restart of the Eclipse IDE. Figure 8. The Maven plugin connector installation dialog. After the New Scout Project wizard has created the Maven modules for the Hello Scout application, the code is compiled by the Eclipse IDE. You can see the created Maven modules in the Package Explorer as shown in Figure 9. Figure 9. The initial set of Maven modules created for the Hello Scout application. After the compilation, you can start the Scout application for the first time. Since the Hello Scout app consists of a backend and a frontend, two servers need to be started. Before the frontend server can deliver any JavaScript code to the browser, the JavaScript build needs to be executed as well. You could start each launch configuration separately, but for the sake of convenience there is a launch group available which starts all at once. To start the launch group use the Run As menu as shown in Figure 10. Figure 10. Starting the Hello Scout application. The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites. Once the JS build has been completed successfully, the frontend and backend servers will be started automatically. The servers are ready as soon as the console shows Server ready. You can now access the Hello Scout application by navigating to http://localhost:8082/ in your favorite web browser. The Hello Scout application is then presented as shown in Figure 11. Figure 11. The Hello Scout application in the browser. Congratulations! You have successfully created your first Scout Classic application. To gain experience working with Scout, we recommend going through the One Day Tutorial. If you are interested in Scout’s concepts, architecture and features you probably want to have a look at the Technical Guide. In case you should get stuck somewhere and need help, contact us on the Scout Forum or on Stack Overflow. We wish you all the best on your journey with Scout.","title":"Hello Scout Classic","component":"scout-docs","version":"22","name":"helloscout","url":"/scout-docs/22/getstarted/helloscout.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Node.js","hash":"node-js","id":3},{"text":"Add pnpm","hash":"add-pnpm","id":4},{"text":"IntelliJ","hash":"intellij","id":5},{"text":"Eclipse","hash":"eclipse","id":6},{"text":"Create a Scout Project","hash":"create-a-scout-project","id":7},{"text":"IntelliJ","hash":"intellij-2","id":8},{"text":"Eclipse","hash":"eclipse-2","id":9},{"text":"What’s Next?","hash":"whats-next","id":10}]},"25":{"id":25,"text":"This document is referring to a past Scout release. Please click here for the recent version. This chapter provides various small technical guides to very specific Scout subjects.","title":"How-Tos","component":"scout-docs","version":"22","name":"how-tos","url":"/scout-docs/22/howtos/how-tos.html","titles":[]},"26":{"id":26,"text":"This document is referring to a past Scout release. Please click here for the recent version. This document describes all relevant changes from Eclipse Scout 11.0 to Eclipse Scout 22.0. If existing code has to be migrated, instructions are provided here. Scout Runtime artifacts for Java are distributed using Maven Central: 22.0.41 on Maven Central 22.0.41 on mvnrepository.com Usage example in the parent POM of your Scout application: org.eclipse.scout.rt org.eclipse.scout.rt 22.0.41 pom import Scout Runtime artifacts for JavaScript are distributed using npm: Scout Core Runtime All official Scout JavaScript packages Usage example in your package.json: { \"name\": \"my-module\", \"version\": \"1.0.0\", \"devDependencies\": { \"@eclipse-scout/cli\": \"22.0.41\", \"@eclipse-scout/releng\": \"^22.0.0\" }, \"dependencies\": { \"@eclipse-scout/core\": \"22.0.41\", \"jquery\": \"3.6.0\" } } The pre-built Scout JavaScript assets are also available using a CDN (e.g. to be directly included in a html document): https://www.jsdelivr.com/package/npm/@eclipse-scout/core?path=dist Scout officially supports IntelliJ IDEA and Eclipse for Scout Developers. You can download the Scout plugin for IntelliJ IDEA from the JetBrains Plugin Repository or you can use the plugins client built into IntelliJ IDEA. Please refer to the IntelliJ Help on how to install and manage plugins. You can download the complete Eclipse IDE with Scout SDK included here: Eclipse for Scout Developers To install the Scout SDK into your existing Eclipse IDE, use this P2 update site: https://download.eclipse.org/scout/releases The Java 8 support has been dropped in Scout 22. Scout 22 older than 22.0.11 only supports Java 11. Scout 22.0.11 or newer supports Java 17 too. Check the chapter Migrating to Java 17 if you plan to use Java 17. You can get a Java 11 or 17 runtime from the Adoptium page. Ensure you have at least Maven 3.6.3 installed. Older versions are no longer supported. You can get a new Maven runtime at the Maven download site. Ensure you have at least Node 16.13.0 installed. Older versions will not work. A new version can be obtained from the Node download page. Scout now requires at least pnpm 6.22.2. You can install it as described on the pnpm installation page. To update your application the following steps might be required: Update the version of the maven_rt_plugin_config-master in your pom.xml files to the newest 22.0.x release. See Maven central for a list of versions available. Update the Scout versions (package.json and pom.xml) as shown in Obtaining the Latest Version. In case you have set one of the following properties in your pom.xml files, update its value to 11 or 17 (depending on the Java version you want to use): jdk.source.version jdk.min.version maven.compiler.source maven.compiler.target maven.compiler.release In case you used the cargo-maven2-plugin replace it with the cargo-maven3-plugin. If you are using Eclipse and web-service providers, update the .factorypath files as shown in the JAX-WS Appendix of the Scout documentation. The support for Microsoft Internet Explorer and Microsoft Edge Legacy has been dropped. Accordingly, you might want to update the list with supported browsers in your unsupported-browser.html file (if existing). Remove the list item having text ui.BrowserInternetExplorer. You can keep the one with Edge, because the new Chromium based Microsoft Edge browser is supported. If you are using Scout 22.0.11 or newer you may upgrade to Java 17. For this you have to do the following steps: Update the jdk.source.version property in the pom.xml of your parent module to 17. Regenerate all your private-public-key pairs. The values are stored in the config properties scout.auth.privateKey and scout.auth.publicKey. To create a new key pair you can execute the class org.eclipse.scout.rt.platform.security.SecurityUtility on the command line. This will print a new, unique, Java 17 compatible key pair. As an alternative you can also execute the following shell script to create a new key pair using OpenSSL: PRIVATE_KEY=$(openssl ecparam -name prime256v1 -genkey -text) printf \"################ Public Private Keypair ################\" printf \"\\nBase64 encoded privateKey: \" echo \"$PRIVATE_KEY\" | openssl ec -outform pem -no_public 2>/dev/null | openssl pkcs8 -topk8 -nocrypt -inform pem -outform der | base64 -w0 printf \"\\nBase64 encoded publicKey: \" echo \"$PRIVATE_KEY\" | openssl ec -outform der -pubout 2>/dev/null | base64 -w0 printf \"\\n\" Afterwards update the properties with the new values. It is recommended to have different values for each environment! While the new key pair is necessary if using Java 17, it is optional if you stay on Java 11. But still you may create new pairs even if you would like stay with Java 11 for now. Then the keys are already Java 17 compatible and must not be changed again when actually upgrading to Java 17. Furthermore, ensure you have at least version 22.0.2 of the maven_rt_plugin_config-master in your pom.xml files. See Maven central for a list of versions available. If you are using the charts from @eclipse-scout/chart you might need to update the config object of your charts, as most of them are rendered using chart.js. First check this migration guide. In addition, the following config attributes must also be migrated: config.options.scales.minSpaceBetweenXTicks → config.options.scales.x.minSpaceBetweenTicks config.options.scales.minSpaceBetweenYTicks → config.options.scales.y.minSpaceBetweenTicks config.options.scale.minSpaceBetweenTicks → config.options.scales.r.minSpaceBetweenTicks config.options.scales.[id].afterCalculateTickRotation → config.options.scales.[id].afterCalculateLabelRotation …​fontColor → …​color …​fontFamily → …​font.family …​fontSize → …​font.size …​fontStyle → …​font.style config.bubble → config.options.bubble config.fulfillment → config.options.fulfillment config.salesfunnel → config.options.salesfunnel config.speedo → config.options.speedo config.venn → config.options.venn config.data.datasets[i].pointHoverBackgroundColor only for config.type line and radar or config.data.dataset[i].type line config.data.datasets[i].pointBorderColor only for config.type line and radar or config.data.dataset[i].type line config.data.datasets[i].pointHoverBorderColor only for config.type line and radar or config.data.dataset[i].type line Also, we observed some changes that might be of interest: Remove the borderWidth on every dataset when backgroundColor and borderColor are the same. Otherwise, there will be a small white line between the border and the background. Scale.longestLabelWidth → Scale._labelSizes.widest.width Scale._ticks → Scale.ticks Element._datasetIndex → Element.datasetIndex Element._index → Element.index Never use data.splice(n), always use data.splice(n, data.length - n), as chart.js listens on splice-events and can’t handle calls without the deleteCount. The chart.js tooltip was replaced by the scout tooltip. Therefore, the css class .tooltip-background ca be removed. Perform the following migration in all your package.json files: If you specify the minimum engines versions please update them as follows: \"engines\": { \"node\": \">=16.13.0\", \"npm\": \">=8.1.0\", \"pnpm\": \">=6.22.2\" } Update the following dependencies (if existing in your application): \"jquery\": \"3.6.0\" \"jasmine-core\": \"3.10.1\" \"karma\": \"6.3.20\" \"eslint\": \"8.10.0\" Replace dependencies to babel-eslint and eslint-plugin-babel with these two: \"@babel/eslint-parser\": \"7.16.5\", \"@babel/eslint-plugin\": \"7.16.5\" Adjust your .eslintrc.js in the following way: plugins: ['@babel'], parser: '@babel/eslint-parser', parserOptions: { requireConfigFile: false } If your launch group contains an action that waits for a specific console output before starting the ui and backend servers, you probably need to adjust the regular expression. Otherwise, the launch is likely to get stuck at about 63%. To do so, edit your launch configuration and change the regular expression of the js build program from Built at: to compiled .*successfully. Or remove the action completely if you prefer the launchers to be started in parallel. Figure 1. Adjust Launch Group The following changes have been made to the Scout releng. Please apply the necessary migration steps in your files and build scripts (may also affect continuous integration environments): If you have a .npmrc file (locally in your project root and/or your user home or on your build infrastructure), update it to the following content: # pnpm settings shared-workspace-lockfile=true link-workspace-packages=true prefer-workspace-packages=true # npm settings engine-strict=true scripts-prepend-node-path=auto The property prefer-workspace-packages is new and important if you have multiple npm modules in your project. In all your package.json files: Replace \"snapshot-cleanup\": \"releng-scripts snapshot-cleanup\" with \"cleanup:snapshots\": \"releng-scripts cleanup:snapshots\" Replace \"snapshot-predependency\": \"releng-scripts snapshot-install-dependency\" with \"version:snapshot:dependencies\": \"releng-scripts version:snapshot:dependencies\" Replace \"snapshot-postdependency\": \"releng-scripts snapshot-publish-dependency\" with \"version:snapshot\": \"releng-scripts version:snapshot\" Replace \"release-predependency\": \"releng-scripts release-install-dependency\" with \"version:release:dependencies\": \"releng-scripts version:release:dependencies\" Replace \"release-postdependency\": \"releng-scripts release-publish-dependency\" with \"version:release\": \"releng-scripts version:release\" If you are executing the npm scripts above during your build, update the names in your build scripts accordingly. If you are using snapshot dependencies of the form \"x.y.z-snapshot\" replace it with a range version of the form \">=x.y.z-snapshot . A ITypeVersion represents a namespace/version and its dependencies. Migration: For each different String value used in type version annotation, create an implementation of ITypeVersion as described in Data Objects: Namespace and ITypeVersion in the technical documentation. DataObjectInventory#getTypeVersion now returns NamespaceVersion instead of String. Use NamespaceVersion#unwrap to access the text representation. @EnumVersion was designed for migration support similar as the TypeVersion but was never part of any serialization output of a data object, therefore couldn’t be used as indicator for migrations. Support for @EnumVersion was removed. Migration: Remove @EnumVersion annotations on IEnum implementors. The new notifications displayed by the browser use the application logo configured in AbstractDesktop#getConfiguredLogoId() by default. If you use native notifications, you should provide a logo with a resolution of at least 150x150 px. If your application logo already has such a resolution, it should be fine. If your application logo has a lower resolution or is an SVG, you should use a different image for the notifications (SVGs are not supported by Chrome notifications). To do so, just configure the native notification defaults on your desktop. @Override protected NativeNotificationDefaults getConfiguredNativeNotificationDefaults() { return super.getConfiguredNativeNotificationDefaults() .withIconId(\"notification_logo.png\"); } The image application_logo_large and the constant AbstractIcons.ApplicationLogo have been removed. The name was confusing and it was only used for the ScoutInfoForm. The info form now uses the logo of the desktop (IDesktop#getLogoId()) by default. So if you prefer to use a different logo for the info form, just extend the info form, override the method getProductLogo() and return the name of your preferred image. In case you don’t use SVG logos yet, you should consider doing so to prevent blurry logos. Many less variables have been modified, added and removed. Also, the name \"active\" has been replaced with selected where it has been used for a selection state rather than the css \"active\" state (mouse press). Following renames have been applied (incomplete list): @active-inverted-background-color → @selected-background-color @active-inverted-color → @selected-color @command-button-active-* → @command-button-selected-* @default-button-active-background-color → @default-button-selected-background-color @navigation-background-color → @desktop-navigation-background-color @navigation-color → @desktop-navigation-color @outline-title-margin-left/right → @outline-title-padding-left/right @group-box-title-margin-top → @group-box-header-margin-top @group-box-title-border-width → @group-box-header-border-width @simple-tab-active-*background → @simple-tab-selected-* @wizard-step-active-* → @wizard-step-selected-* Notes: @desktop-navigation-background-color now points to @desktop-header-background-color; Instead of customizing the navigation background color it is suggested to now customize the header background color. Many css rules have been adjusted for the new style. So if you have customized some Scout components, please check your rules if they are still doing what they are supposed to. The following list shows some of the changes: .menubox → .menubar-box .group-box-title → .group-box-header > .title border-bottom of group-box-title → .group-box-header > .bottom-border .tab-box-bottom-border → .bottom-border Tree/Table: Selection style is not applied to the table-row/tree-node anymore but to a separate ::after element Button/Menu: simplified CSS and HTML structure For details please see the individual commits. Some icons have been removed because they are not used by Scout itself anymore. If you need these icons, please add them to your own icon library. If you don’t already have a custom icon library, please see our guide on how to create one: Icons The icons from Scout can be found here: https://github.com/eclipse-scout/scout.rt/tree/releases/22.0/org.eclipse.scout.rt.ui.html/src/icons There you also find a selection.json that can be used to import the icons to IcoMoon. MENU_BOLD (uF0C9) LIST_UL_BOLD (uF0CA) LIST_OL_BOLD (uF0CB) ROTATE_LEFT_BOLD (F0E2) ROTATE_RIGHT_BOLD (F01E) GRAPH_BOLD (uE023) CATEGORY (uE059) CATEGORY_BOLD (uE024) ELLIPSIS-V-BOLD / VERTICAL_DOTS (uE040) SPINNER (uE044) ANGLE-DOUBLE-LEFT-BOLD (uF100) ANGLE-DOUBLE-RIGHT-BOLD (uF101) ANGLE-DOUBLE-UP-BOLD (uF102) ANGLE-DOUBLE-DOWN-BOLD (uF103) BOLD (uE051) ITALIC (uE052) UNDERLINE (uE053) STRIKETHROUGH (uE054) LIST-UL (uE055) LIST-OL (uE056) LIGHTBULB_OFF (uE057) LIGHTBULB_ON (uE058) The following icons have been renamed - EXCLAMATION_MARK → EXCLAMATION_MARK_BOLD The line width of the Scout icons has been increased a little because they are now displayed a little smaller. If you use custom icons in combination with the Scout icons, you may want to consider adjusting the line widths of your icons as well. This should only be relevant if you explicitly used the Scout icons in your code. Also, the Scout icons now come with a regular and a light font. The regular font should be used if the icon is displayed at about 16px. This is the case for most widgets (menu, button etc.) If the icon is displayed larger, the light font can be used. To activate it for your custom widget, set the font-weight to @icon-font-weight-light. If you want to align your custom icons with the Scout icons, use the following dimensions: Regular: 1.5px line width and 24px artboard height Light: 1px line width and 24px artboard height Views (forms with display hint = view) are now closable by default. Until now, only dialogs containing a close or cancel button showed the close icon in the top right corner. If you have views that must not be closable, set closable to false explicitly. The type of the data argument for the callback execPostMessage was changed from String to Object. This allows for the widest variety of data that can be sent from an embedded page to the application: String Number Boolean IDataObject (objects or arrays) In previous Scout versions, all messages were always converted to text. Now, the data type is preserved as accurately as possible. JSON objects or arrays are converted to IDoEntity or DoList with the help of the IObjectMapper bean. To use this feature, an implementation of IDataObjectMapper needs to be present at runtime. If no implementation is available, the data will be converted to text automatically. Migration: Adjust the signature of all implementations of AbstractBrowserField#postMessage in your code. Change execPostMessage(String data, String origin) to execPostMessage(Object data, String origin). If the message sent by the embedded web page is not a text, the appropriate data type is now passed. Check the expected type using instanceof or convert it to String manually. If you want objects and arrays to be converted to IDataObjects automatically, make sure there is an implementation of IObjectMapper present at runtime, e.g. by adding a dependency to the module org.eclipse.scout.rt.jackson in pom.xml. In the past when a page was created the embedded detail forms and tables have been created together with the page. This may lead to a bad performance when an outline containing lots of complex pages is created. Therefore the containing tables and forms are now only created when the page is activated (e.g. selected by the user). This is the same behavior as already implemented in Scout Classic since several years. As a consequence accessing Page.detailForm or Page.detailTable may now return null if the page has not been activated yet. Check all usages of the detailForm and detailTable properties of pages in your code and ensure it is guarded with a null check or is only executed when the page has already been activated. Typically these properties are accessed in the _init() function of a page e.g. to attach listeners. This is no longer possible as these properties are no longer available at that moment. As an alternative override the _initDetailForm(form) or _initDetailTable(table) methods if your code exists on a Page (don’t forget to add a super call). If outside a Page listen for the propertyChange events for detailForm or detailTable to execute your detailForm or detailTable dependant code. Furthermore if you use the following methods on pages, please rename them as follows: from createDetailForm to _createDetailForm from _createTable to _createDetailTable from _initTable to _initDetailTable from _ensureDetailForm to ensureDetailForm The tag field is not clickable by default anymore. If you need the tags to be clickable (and triggering a tagClick event), you have to activate it manually by setting clickable to true in the given tag field model. Or by using the dedicated setter: tagField.tagBar.setClickable(true). The following classes were renamed: IDoEntityDeserializerTypeResolver → IDoEntityDeserializerTypeStrategy DefaultDoEntityDeserializerTypeResolver → DefaultDoEntityDeserializerTypeStrategy RawDoEntityDeserializerTypeResolver → RawDoEntityDeserializerTypeStrategy When raw deserializing json using Jackson (e.g. by using JacksonDataObjectMapper#readValueRaw) the behavior changed for floating point numbers: In former releases float numbers fitting into a Double have been mapped to Double. Now always a BigDecimal is used. This helps to clarify and stabilize the API (the datatype does not suddenly change if the numbers get bigger) and it helps to map the value from the json to a more precise Java representation (a Double cannot hold all floats exactly). Nothing changes if you deserialize json to a typed DataObject. Then the target type of the attribute in the DataObject is used. If your code relies on a specific float type after raw deserialization, update it accordingly to handle BigDecimal instead. The behavior of data objects without a @TypeName annotation was changed. In former releases such a data object was serialized into JSON including a \"_type\" : null type name. The new implementation does not include the null-TypeName in the serialized JSON document. The static strings utility provides various string-related functions. The obsolete functions uppercaseFirstLetter and lowercaseFirstLetter were deprecated in favor of more robust and consistent alternatives, and should no longer be used. They will be removed eventually. Migration: Change strings.uppercaseFirstLetter(s) to strings.toUpperCaseFirstLetter(s). Change strings.lowercaseFirstLetter(s) to strings.toLowerCaseFirstLetter(s). Note the uppercase \"C\" in the new function names! At the same time, some new null-safe variants of String prototype methods were added: toUpperCase(s), toLowerCase(s), length(s), trim(s) . The StreamUtility utility provided some methods that were functionally identical to Java 9 methods of the same name. The methods not, takeWhile, and iterate were removed; the equivalent Java core library methods may now be used directly. Migration: Change StreamUtility.not(p) to java.util.function.Predicate.not(p). Change StreamUtility.takeWhile(stream, predicate) to stream.takeWhile(predicate). Change StreamUtility.iterate(initialElement, hasNext, next) to java.util.stream.Stream.iterate(initialElement, hasNext, next). Note that takeWhile now operates on the java.util.Stream object itself and no longer is a static method. The style and colors for tooltips has been changed which may require the following migration: The colors for tooltips have changed: severity OK is showing in green, INFO in black and WARNING in orange. Severity ERROR is still red and therefore remains unchanged. If you use a Status that is displayed as tooltip and uses one of the changed severities, verify if the color matches the meaning of the tooltip and adapt the severity if necessary. Scout JS only: The tooltips are now displayed in inverse style (white text, dark background). If you used custom styling for your tooltips (using property htmlEnabled), you might require to adapt your styles to look nice again with the inverse style. The HTTP Session ID is a crucial factor of a web application’s security. Knowledge of the session ID can enable attackers to hijack the session of an active user. It must therefore not be made available to a malicious third party under any circumstances! Writing the ID to a log files might therefore pose a security risk, depending on who has access to the file. Scout does not directly output the HTTP Session ID by default, but it provides a corresponding \"diagnostics context value\" (MDC). If the logger implementation is configured accordingly, the context value http.session.id is written to the log file. In accordance with the security by default principle, the diagnostics context value no longer contains the full session ID. Instead, an obfuscated and truncated identifier is provided. It cannot be converted back to the original session ID but is still sufficiently unique to relate log entries for the same session for debugging purposes. See the class HttpSessionIdLogHelper for details. Migration: No migration is required. Logger configurations that don’t use the MDC value http.session.id are not affected by this change. The content of the MDC value http.session.id can be configured via the system property scout.diagnostics.httpSessionIdLogMode. SHORT: Provides a safe, truncated session identifier. This is the default value (no configuration required). OFF: Never provides a value (always empty). FULL: Provides the full HTTP Session ID. This restores the previous, less safe behavior. Using this value is NOT recommended! The class ScoutFieldStatus has been deleted. It can be replaced with org.eclipse.scout.rt.platform.status.Status. The widgets Table.js, Tree.js, TileGrid.js and TileAccordion.js share a common filter API since 22.0. This API contains the methods addFilter(filter, applyFilter = true), removeFilter(filter, applyFilter = true) and setFilters(filters, applyFilter = true) and the property filters. The corresponding methods of the TileAccordion.js used to be addTileFilter(filter), removeTileFilter(filter) and setTileFilters(filters). These methods were renamed to the ones above. The property tileFilters was renamed to filters as well. Some of the above widgets also had addFilters and removeFilters methods to add or remove an array of filters. Those methods were removed as the new ones can handle single filters and arrays of filters. The mentioned widgets used to have a different behavior whether after modifying the filters they were executed or not. All calls need to be checked and adjusted accordingly. Examples: Listing 1. add a filter to tree and do not apply the filters, execute some other logic and then apply the filters tree.addFilter(filter, false); // some other logic here tree.filter(); Listing 2. remove multiple filters from table and apply the filters table.removeFilter(filters); Migration: Table.js: Change addFilter(filter); to addFilter(filter, false); and addFilter(filter); filter(); to addFilter(filter); Change removeFilter(filter); to removeFilter(filter, false); and removeFilter(filter); filter(); to removeFilter(filter); Change removeFilterByKey(filter); to removeFilterByKey(filter, false); and removeFilterByKey(filter); filter(); to removeFilterByKey(filter); Change setFilters(filters); to setFilters(filters, false); and setFilters(filters); filter(); to setFilters(filters); Tree.js: Change addFilter(filter, true); to addFilter(filter, false); Change removeFilter(filter); to removeFilter(filter, false); and removeFilter(filter); filter(); to removeFilter(filter); TileGrid.js: Change addFilters(…​); to addFilter(…​); Change addFilter(filter); to addFilter(filter, false); and addFilter(filter); filter(); to addFilter(filter); Change removeFilters(…​); to removeFilter(…​); Change removeFilter(filter); to removeFilter(filter, false); and removeFilter(filter); filter(); to removeFilter(filter); Change setFilters(filters); to setFilters(filters, false); and setFilters(filters); filter(); to setFilters(filters); TileAccordion.js: Change tileFilters to filters Change addTileFilter(filter); to addFilter(filter, false); and addTileFilter(filter); filterTiles(); to addFilter(filter); Change removeTileFilter(filter); to removeFilter(filter, false); and removeTileFilter(filter); filterTiles(); to removeFilter(filter); Change setTileFilters(filters); to setFilters(filters, false); and setTileFilters(filters); filterTiles(); to setFilters(filters); Change filterTiles(); to filter(); These widgets support a text filter that is shown while typing if the widget is focused. This behaviour is enabled by default and can be turned off using the property textFilterEnabled. Fields that provide this functionality may now be obsolete and can be removed. For more information about the filter API and the filter field see Filter Field. All classes that are related to the DataModel have been moved to separate modules. This includes IDataModel and the IComposerField. If these classes have been used you need to add the references to the new modules to the corresponding pom.xml. The packages for these classes remain unchanged so no further migration is needed besides adding the dependencies to the new modules. These packages are intended to be deleted in an upcoming release. org.eclipse.scout.rt.datamodel.client Everything related to the IComposerField can be found here org.eclipse.scout.rt.datamodel.server FormDataStatementBuilder and EntityContribution and related classes are now located here org.eclipse.scout.rt.datamodel.shared Classes related to the IDataModel have been moved to this module org.eclipse.scout.rt.datamodel.ui.html Json components of the IComposerField are located here If you created custom JavaScript keystrokes (extending from KeyStroke.js), you might experience a different behavior: the keystroke is now only active if the widget and every parent widget is enabled. Previously, the state of the parents was ignored, which was inconsistent. If your keystroke should be active even if the widget is disabled, you can set inheritAccessibility = false on your keystroke. For more details, see https://github.com/eclipse-scout/scout.rt/commit/91f8465564e718702920a28edbb559041cfeb752 If you are implementing one of the interfaces ITokenVerifier or ITokenPrincipalProducer, you must add either the @ApplicationScope or @Bean annotation to your implementation class. Previously, the interfaces itself were annotated with @ApplicationScope, which is too strict. This prevents having multiple instances of BearerAuthAccessController with different configurations/states of an ITokenVerifier or ITokenPrincipalProducer. Widgets which allow to upload a file inside the browser show an error message if the uploaded file exceeds the configurated maximum upload file size. The error message always refers to MB even if the configured maximum upload file size is much smaller than that (or much larger). The error message looked like this: The maximum file size exceeds the limit allowed (0.000976 MB). The same message using KB is much more readable: The maximum file size exceeds the limit allowed (1 KB). Hence, depending on the file size, a suitable unit (B, KB, MB, GB) is used for all upload-widgets (file chooser, file chooser button, file chooser field). This change has also changed the translations of the text-key ui.FileSizeLimit. In case this text-key is directly used in your project (which you should not do anyway), the displayed error message is broken now. You have to adapt your code.","title":"Eclipse Scout Migration Guide","component":"scout-docs","version":"22","name":"migration-guide","url":"/scout-docs/22/migration/migration-guide.html","titles":[{"text":"About This Document","hash":"about-this-document","id":1},{"text":"Obtaining the Latest Version","hash":"obtaining-the-latest-version","id":2},{"text":"Scout Runtime for Java","hash":"scout-runtime-for-java","id":3},{"text":"Scout Runtime for JavaScript","hash":"scout-runtime-for-javascript","id":4},{"text":"IDE Tooling (Scout SDK)","hash":"ide-tooling-scout-sdk","id":5},{"text":"IntelliJ IDEA","hash":"intellij-idea","id":6},{"text":"Eclipse","hash":"eclipse","id":7},{"text":"New 3rd Party requirements","hash":"new-3rd-party-requirements","id":8},{"text":"Migrating to Java 17","hash":"migrating-to-java-17","id":9},{"text":"Update of 3rd Party library chart.js to 3.7.0","hash":"update-of-3rd-party-library-chart-js-to-3-7-0","id":10},{"text":"Update of other 3rd Party JavaScript libraries","hash":"update-of-other-3rd-party-javascript-libraries","id":11},{"text":"Eclipse Launch Group","hash":"eclipse-launch-group","id":12},{"text":"Release engineering changes","hash":"release-engineering-changes","id":13},{"text":"Log4j support removed","hash":"log4j-support-removed","id":14},{"text":"@TypeVersion Annotation Type Change","hash":"typeversion-annotation-type-change","id":15},{"text":"Annotation @EnumVersion Removed","hash":"annotation-enumversion-removed","id":16},{"text":"Native Notification Support","hash":"native-notification-support","id":17},{"text":"Application Logo / Info Form","hash":"application-logo-info-form","id":18},{"text":"Style","hash":"style","id":19},{"text":"LESS Variables","hash":"less-variables","id":20},{"text":"CSS Rules","hash":"css-rules","id":21},{"text":"Icons","hash":"icons","id":22},{"text":"Cleanup","hash":"cleanup","id":23},{"text":"Line Width Adjustments","hash":"line-width-adjustments","id":24},{"text":"Form","hash":"form","id":25},{"text":"Browser Field","hash":"browser-field","id":26},{"text":"Lazy Creation of detailTable and detailForm in Scout JS Pages","hash":"lazy-creation-of-detailtable-and-detailform-in-scout-js-pages","id":27},{"text":"TagField (Scout JS)","hash":"tagfield-scout-js","id":28},{"text":"Jackson DoEntity Deserializer","hash":"jackson-doentity-deserializer","id":29},{"text":"Json raw deserialization of floating point numbers","hash":"json-raw-deserialization-of-floating-point-numbers","id":30},{"text":"Data Objects without @TypeName Annotation","hash":"data-objects-without-typename-annotation","id":31},{"text":"Deprecated Functions in strings.js Utility","hash":"deprecated-functions-in-strings-js-utility","id":32},{"text":"Removed functions in StreamUtility.java","hash":"removed-functions-in-streamutility-java","id":33},{"text":"New Style for Tooltips","hash":"new-style-for-tooltips","id":34},{"text":"Logging the HTTP Session ID","hash":"logging-the-http-session-id","id":35},{"text":"ScoutFieldStatus deleted","hash":"scoutfieldstatus-deleted","id":36},{"text":"New Filter API for ScoutJS","hash":"new-filter-api-for-scoutjs","id":37},{"text":"New Modules for DataModel related classes","hash":"new-modules-for-datamodel-related-classes","id":38},{"text":"Keystroke adjustments for disabled widgets (since 22.0.3)","hash":"keystroke-adjustments-for-disabled-widgets-since-22-0-3","id":39},{"text":"Removal of ApplicationScoped annotation to support multiple instances of BearerAuthAccessController (since 22.0.35)","hash":"removal-of-applicationscoped-annotation-to-support-multiple-instances-of-bearerauthaccesscontroller-since-22-0-35","id":40},{"text":"Improved error message when upload file size is exceeded (since 22.0.46)","hash":"improved-error-message-when-upload-file-size-is-exceeded-since-22-0-46","id":41}]},"27":{"id":27,"text":"This document is referring to a past Scout release. Please click here for the recent version. The latest version of this release is: 22.0.41. You can see the detailed change log on GitHub. Coming from an older Scout version? Check out the Eclipse Scout Migration Guide for instructions on how to obtain the new version and upgrade existing applications. The demo applications for this version can be found on the features/version/22.0.41 branch of our docs repository on GitHub. If you just want to play around with them without looking at the source code, you can always use the deployed versions: https://scout.bsi-software.com/contacts/ https://scout.bsi-software.com/widgets/ https://scout.bsi-software.com/jswidgets/ The user interface has been completely reworked. The goal was to modernize it and improve the usability without changing basic user interactions. Modern design principles have been applied for a fresh look, an improved user guidance and increased readability. Various widgets have been beautified like date field, smart field, table and many more. Figure 1. Brush Up The following topics describe some notable features of the brush-up. Action elements like buttons, links, menus. etc. are now more user-friendly due to increased click area, clear hover effect and aligned colors. Figure 2. Menu There is now a scroll shadow on every scrollable element to indicate that not all elements are visible. Figure 3. Scroll Shadow Notifications in GroupBoxes (IGroupBox.setNotification()), desktop notifications (IDesktop.addNotification) and message boxes now support icons. Figure 4. Notification There is a consistent coloring across tooltips, notifications and message boxes. Focus marker and table/tree selection have been improved to better guide the user. Figure 5. List Box Toggleable menu items now correctly visualize the selected state. Figure 6. Toggle Menu The combo menu got more flexible and can be used with the button style as well. Figure 7. Combo Menu Views can now be closed using an \"x\" icon, even if they are not active. Figure 8. Views Popups are now animated and have a cleaner look. Figure 9. Popup The Java 8 support has been dropped in Scout 22. Scout 22 older than 22.0.11 only supports Java 11. Scout 22.0.11 or newer supports Java 17 too. Check the migration guide for instructions on how to update to Java 17. Furthermore, the minimal Maven version has been raised to 3.6.3. See the migration guide for instructions on how to update. Please note that Scout 22 makes use of Jakarta EE 8 artifacts. These artifacts already use the new jakarta.* Maven coordinates but still contain the old javax.* Java packages. This ensures backwards compatibility with older Java EE 8 containers. The transition to Jakarta EE 9.1 or newer is planned for a future release. The minimal supported browsers have been updated. Scout 22 has the following requirements: Mozilla Firefox >= 69 Chromium (like Google Chrome, Microsoft Edge, Brave or Opera) >= 71 Apple Safari >= 12.1 Please note that Microsoft Internet Explorer and Microsoft Edge Legacy are no longer supported by Scout. If you are still using Internet Explorer or Edge Legacy, we strongly recommend updating to a newer browser. It’s now possible to send notifications via the Notification API. The DesktopNotification has some new properties to control the behavior: nativeOnly, nativeNotificationVisibility and more. Figure 10. Native Notification A new bean org.eclipse.scout.rt.platform.nls.ITextPostProcessor has been introduced which allows to modify all texts returned by a TextProviderService. This allows applying application wide logic on all translated texts including the ones provided by Scout itself. The Support for Log4j logging has been dropped as Log4j 1 is end-of-life. If you still rely on Log4j 1 please consult the migration notes for instructions how to update. Browser fields provide a new method postMessage(data, targetOrigin) to send arbitrary data to the embedded web page. To prevent malicious data from being sent to your application, the origin of the message should always be validated in the callback handler (execPostMessage in Java, message event listener in Scout JS). Scout will now do this check automatically for you if you configure the valid origins in the new property trustedMessageOrigins. Scout lookup calls may return hierarchically linked rows (parent-child relation). The support for hierarchical lookup rows using REST lookup calls (e.g. the parentId attribute definition) was moved from AbstractLookupRowDo to the new class AbstractHierarchicalLookupRowDo. In order to support hierarchical lookups using REST, change your lookup row implementation and extend the new base class AbstractHierachicalLookupRowDo. Listing 1. Example @TypeName(\"ExampleLookupRow\") public class ExampleLookupRowDo extends AbstractHierarchicalLookupRowDo { @Override public DoValue id() { return doValue(ID); } @Override public DoValue parentId() { return doValue(PARENT_ID); } // ... } The annotation org.eclipse.scout.rt.rest.doc.ApiDocDescription is now marked as @Inherited. This allows inheritance for API documentation (e.g. on an abstract REST resource). The widgets Table.js, Tree.js, TileGrid.js and TileAccordion.js now support a text filter. This filter field is shown while typing if the widget is focused or can be opened by clicking the icon in the bottom right corner. Figure 11. A TreeBox with the filter icon in the bottom right corner. Figure 12. A TreeBox with the filter field, filtering all nodes for 'latin'. This feature is enabled by default and can be turned off using the property textFilterEnabled. For more information about the filter API and the filter field see Filter Field. Until now, only some form fields supported menus. In order to generalize the functionality the menu support has been moved to IFormField.java. This reduces duplicated code and enables menus on every form field, e.g. on a tree field. Figure 13. A TreeField with Menus The detail elements of a page are now loaded lazily which improves initial loading time significantly. The first invalid field now gets the focus when a form should be saved to better guide the user.","title":"Eclipse Scout Release Notes","component":"scout-docs","version":"22","name":"release-notes","url":"/scout-docs/22/releasenotes/release-notes.html","titles":[{"text":"About This Release","hash":"about-this-release","id":1},{"text":"Demo Applications","hash":"demo-applications","id":2},{"text":"UI Brush Up","hash":"ui-brush-up","id":3},{"text":"Reworked Action Elements","hash":"reworked-action-elements","id":4},{"text":"Scroll Shadow","hash":"scroll-shadow","id":5},{"text":"Icons for Notification and Message Boxes","hash":"icons-for-notification-and-message-boxes","id":6},{"text":"Consistent Severity Handling","hash":"consistent-severity-handling","id":7},{"text":"Better Focus Indication","hash":"better-focus-indication","id":8},{"text":"Toggle Menu Support","hash":"toggle-menu-support","id":9},{"text":"Improved Combo Menu","hash":"improved-combo-menu","id":10},{"text":"Closable Views","hash":"closable-views","id":11},{"text":"Better Popups","hash":"better-popups","id":12},{"text":"New 3rd Party requirements","hash":"new-3rd-party-requirements","id":13},{"text":"Java","hash":"java","id":14},{"text":"Browsers","hash":"browsers","id":15},{"text":"Native Notification Support","hash":"native-notification-support","id":16},{"text":"Text Post-Processors","hash":"text-post-processors","id":17},{"text":"Log4j support removed","hash":"log4j-support-removed","id":18},{"text":"Browser Field: Support for Posting Messages","hash":"browser-field-support-for-posting-messages","id":19},{"text":"REST LookupCall support for hierarchical data","hash":"rest-lookupcall-support-for-hierarchical-data","id":20},{"text":"REST API Documentation Generation: Support for inheritance","hash":"rest-api-documentation-generation-support-for-inheritance","id":21},{"text":"New Filter Field","hash":"new-filter-field","id":22},{"text":"Menu on Form Field","hash":"menu-on-form-field","id":23},{"text":"Lazy Loading for Tables and Detail Forms (Scout JS)","hash":"lazy-loading-for-tables-and-detail-forms-scout-js","id":24},{"text":"Focus of Invalid Field (Scout JS)","hash":"focus-of-invalid-field-scout-js","id":25}]},"28":{"id":28,"text":"This document is referring to a past Scout release. Please click here for the recent version. After installing the Eclipse Scout package you are ready for testing the SDK version Before executing the SDK tests described below, make sure that you already have (at least) checked that the Scout Hello World is working properly. Eclipse must be launched with a JDK! Check this in the Eclipse About Dialog → Installation Details → Configuration. Otherwise many operations (especially the generation of webservices) will fail. This can be set in the eclipse.ini file. Windows: The -vm parameter pointing to the JDK subdirectory …​\\jre\\bin\\server\\jvm.dll Open Eclipse About dialog Click on Eclipse Scout project button Check Scout SDK feature version Click on button Plug-in Details Check Scout SDK plug-in version (same as feature version) SDK Version Check: Scout SDK version matches expected version for testing. Open HelloWorld Form and create a new form field using Ctrl+Space. Ensure the Scout Templates (E.g. StringField, TableField) are available. Select a Template. The corresponding code is inserted and edit locations can be switched using Tab key. When moving to a super class by using the Tab key, ensure the possible super class proposals are displayed (see screenshot below). Create a new Form using the New Form wizard. As soon as the Form is opened, directly invoke the code completion in a group box without closing the file and ensure the template can be inserted. Figure 1. Select the desired super class proposal Ensure the newly created form field (test before) is reflected in the corresponding form data (DTO auto update). When pressing Ctrl+Space in a TEXTS.get(\"\") statement ensure the NLS proposals are displayed and that a new one can be created Open the *.nls file and test that the NLS Editor opens and that new entries can be created. Press the menu Scout → Create all missing @Classid Annotations and ensure they are correctly created (all types that implement ITypeWithClassId should have a class id after this step) Create a new Form (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Table Page (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new CodeType (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Form (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new LookupCall (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Table Page (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Permission (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Web Service (Ctrl+N) Consumer for WSDL http://services.nexus6studio.com/StockQuoteService.asmx?wsdl and verify that it is created correctly (no compilation errors)","title":"Scout SDK Testing Procedure","component":"scout-docs","version":"22","name":"scout-sdk-testing","url":"/scout-docs/22/sdk/scout-sdk-testing.html","titles":[{"text":"Precondition","hash":"precondition","id":1},{"text":"Verify Version","hash":"verify-version","id":2},{"text":"Test Code Completion","hash":"test-code-completion","id":3},{"text":"Test DTO update","hash":"test-dto-update","id":4},{"text":"Test NLS","hash":"test-nls","id":5},{"text":"Test ClassId creation","hash":"test-classid-creation","id":6},{"text":"Test Wizards Small Set","hash":"test-wizards-small-set","id":7},{"text":"Test Wizards Full Set","hash":"test-wizards-full-set","id":8}]},"29":{"id":29,"text":"This document is referring to a past Scout release. Please click here for the recent version. This chapter presents the Scout SDK plugins available for the Eclipse IDE. The Scout SDK provides wizards to create new project and application components, adds code assistance to the Java Editor and comes with a NLS editor to manage all translated text entries of the application. The chapter is organized as follows: Because the Scout Tooling is based on the Eclipse IDE, Eclipse IDE tooling provides a short overview of frequently used Eclipse features. A high level description of the Scout tooling is provided in Scout SDK Overview. Scout Wizards, Scout Content Assistance and Scout NLS Tooling then provide detailed descriptions of the functionality offered by the Scout SDK. The Scout tooling is an extension of the Eclipse IDE. The goal of this section is not to provide a complete overview on the features contained in the Eclipse IDE. It provides a short overview of the important eclipse features, frequently used during the development of a Scout Application. Experienced Eclipse IDE users might skip this section. To start the New Wizard wizard press Ctrl+N or use menu File New Other…​. In the first wizard step type the name of the object you want to create into the Wizards field as shown in Figure 1. Figure 1. \"New\" Wizard Start the New Wizard and type Class in the Wizards field. Select Class Click on Next to open the New class wizard Figure 2. \"New Java Class\" Wizard You can choose define the following properties: Source folder: Click on Browse to choose the project where the class belongs. Package: Click on Browse to choose the package in the given project. If the package does not exist it will be created a new one automatically. Name: Type the class name Modifiers: Choose public or default. Or abstract and/or final. Superclass: Choose the parent class clicking on Browse Interfaces: Click on Add to add the list of interfaces your class implements. Method stubs: Include methods in your class. Comments: Generate predefine comments. Click on Finish when you are done with the class definition. The java editor will open and you can start editing. Start the New Wizard and type Package in the Wizards field. Select Package Click on Next to open the New package wizard In the New package wizard you can define the following properties: Source folder: Click on Browse to choose the project where the package belongs. Name: Write the name of the package. Package info: Choose the checkbox if you want package-info Click on Next to create the project. The Project Browser The import section of a java class needs to be kept up-to-date. New imports need to be added and no longer used ones should be removed. Eclipse offers a the shortcut Ctrl+Shift+O to accomplish this task. In case an import cannot be resolved because several candidates exist, a selection list is displayed. Renaming a class without SDK support is not so easy. The class and possibly the compilation unit need to be renamed. Then every reference to the class within the workspace needs to be updated. All this work is accomplished by using the Class rename Wizard. Open the Wizard using one of the following methods Alt+Shift+R Context Menu Refactor Rename…​ Select the class in the tree and press F2 Choose the new name for the class Specify which references need to be updated Click [Finish] or [Next] to continue A class can be renamed by select the class name anywhere in code and pressing Ctrl+1. The option [Rename in Workspace] will rename the class without using a the wizard. Renaming a package without SDK support would be a tedious undertaking. All classes in the package and its subpackages would have to be modified as well as the directory structure on disk. Then every reference to the package within the workspace needs to be updated. All this work is accomplished by using the Package rename Wizard. Open the Wizard using one of the following methods Alt+Shift+R Context Menu Refactor Rename…​ Select the package in the tree and press F2 Choose the new name for the package Specify which references need to be updated Click [OK] or [Prview] to continue The Scout SDK tooling helps the Scout developer to quickly create frequently used Scout components. This Scout Tooling is implemented as extensions of the Eclipse IDE in the form of wizards, content assist extension to the Eclipse Java editor and support for dealing with translated texts called NLS support. Scout Wizards The Scout SDK tooling includes a number of wizards for the creation of frequently used Scout components. In many cases the execution of such wizards involves the creation/editing of several source files. In the case of the creation of a new Scout form this includes the form class in the client module of the Scout application, a form data class and a service that communicates Descriptions for the individual wizards are provided in Scout Wizards. Content Assist In the Scout framework the hierarchical organization of Scout components if frequently reflected in the form of inner classes. This allows the Scout tooling to provide context specific proposals in the form of content assist proposals offered in the Java editor of the Eclipse IDE. Examples for this form of the tooling includes the creation of form fields or adding columns and context menus to tables. Content assist support is described in detail in Scout Content Assistance. NLS Tooling Eclipse Scout comes with NLS (National Language Support). To support Scout developers in using Scout’s NLS (National Language Support) the Scout SDK offers corresponding tooling to work with translated texts. This tooling is described in Scout NLS Tooling. The Scout SDK provides a set of wizards to create new Scout projects and various components for your Scout applications. To start any of these wizards press Ctrl+N or use menu File New Other…​. In the first wizard step type \"Scout\" into the Wizards field as shown in Figure 3. Figure 3. Selecting Scout Wizards in the Eclipse wizard dialog The wizards provided by the Scout SDK are introduced and described in the sections listed below. New Project Wizard (New Project Wizard) New Page Wizard (New Page Wizard) New Form Wizard (New Form Wizard) The New Scout Project wizard can be used to create a new Scout project from scratch. To open the wizard press Ctrl+N or use File New Other…​ and type \"Scout\" into the Wizards search field. Then, select the entry \"Scout Project\" and click on Next. This leads to the initial dialog of the New Scout Project wizard as shown in Figure 4. Figure 4. The new Project Wizard A detailed description of the indiviudal wizard fields of Figure 4 is provided in the next section. By clicking on the Finish button the wizard is started and a new Scout client server application is created in the form of a Maven multi-module project. All fields of the Figure 4 are initially filled with default values. Group Id Maven groupId used for all created projects. The default value is org.eclipse.scout.apps. Artifact Id Maven artifactId for the parent project. The additional projects are derived from this name. The default value is helloworld. Display Name The name of the application presented to the user. This name is shown in the Browser title bar. The default value is \"My Application\" With the Project Location group box, you can control where the project will be created. Unchecked the Use default Workspace location checkbox to enter an other value in the Target Directory Field. The Browse…​ button can help you to find the appropriate path. With the Figure 4 wizard a complete Maven multi-module project is created. Using the default artifact Id helloworld the following Maven modules are created. Maven module helloworld Contains the project’s parent pom.xml file Maven module helloworld.client Contains model components of the client application in src/main/java and model tests in src/test/java. The class HelloWorldForm in package org.eclipse.scout.apps.helloworld.client.helloworld is an example of a model class. Maven module helloworld.shared Contains components needed in both the client and the server application. For examples see the IHelloWorldService interface in src/main/java and class HelloWorldFormData in src/generated/java. The Texts.nls file that can be opened in the Scout NLS Editor. Maven module helloworld.server Contains the model components of the server application in src/main/java and model tests in src/test/java. The class HelloWorldService in package org.eclipse.scout.apps.helloworld.server.helloworld is an example of such a model class. Maven module helloworld.server.app.dev Contains all components to run the Scout server application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the Scout server application. The file pom.xml bundles the Jetty web server with the server application. The file [webapp] dev server.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.server.app.war Contains all components to create a Scout server WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the server configuration. The file pom.xml is used to build the Scout server WAR file. Maven module helloworld.ui.html Contains servlet filters and the HTML pages as well as custom CSS and JavaScript files for the Scout UI Server. See class UiServletFilter in src/main/java and folder WebContent in source/main/resources. The file js build.launch contains the launch configuration for the Eclipse IDE that executes the JavaScript build. Maven module helloworld.ui.html.app.dev Contains all components to run the Scout UI application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the application. The file web.xml in folder src/main/webapp contains the web configuration for the application. The file pom.xml bundles the Jetty web server with the application. The file [webapp] dev ui.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.ui.html.app.war Contains all components to create a Scout UI WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the application configuration. The file web.xml in folder src/main/webapp contains the web configuration. The file pom.xml is used to build the Scout UI WAR file. The New Scout Page wizard can be used to create a new page and related classes. To start the wizard use File New Other…​ or press Ctrl+N. Figure 5. The new Page Wizard In the case of Figure 5 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 5 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the page. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the page class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared module. Name The name of the page class. According to Scout conventions the class name ends with the suffix TablePage (for subclasses of AbstractPageWithTable) or NodePage (for AbstractPageWithNodes). Super Class The super class for the form. AbstractPageWithTable is the default value. Shared Source Folder The source folder of the Maven shared module used for creation of the page data and the service interface. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for creation of the service implementation. The default value is the src/main/java folder in the Maven server module. In the Figure 5 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyTablePage page class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared The IMyService service interface in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld MyTablePageData page data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService implementation in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld The New Form wizard is be used to create a new form including a form data, permissions and and related service. To start the wizard use File New Other…​ or press Ctrl+N. Figure 6. The new Form Wizard In the case of Figure 6 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 6 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the form class. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the form class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared and server modules. Name The name of the form class. According to Scout conventions the class name ends with the suffix Form. Super Class The super class for the form. AbstractForm is the default value. Create FormData If ticked, a form data class will be created in the shared module. Create Service If ticked, a service interface is created in the shared module and a service implementation is created in the Maven server module. Create Permissions If ticked, read and update permissions are created in the Maven shared module. Shared Source Folder The source folder of the Maven shared module used for creation of the form data, the service interface and the permission classes. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for the service class creation. The default value is the src/main/java folder in the Maven server module. In the Figure 6 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyForm form class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared In folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld The IMyService service interface The ReadMyPermission permission class The UpdateMyPermission permission class The MyFormData form data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService service class in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld To create new Scout components that are represented by inner classes in the Scout framework, the Scout tooling extends the Java content assist of the Eclipse Java editor. The offered proposals are context specific. Depending on the current cursor position in the Java editor, possible Scout components are added to the proposal list. In a class representing a group box in a form, the Scout content assist adds proposals for various form fields. In a table class the content assist adds proposals to add table columns or context menus. Those proposals trigger the creation of inner classes for form fields, table columns or codes. The Eclipse content assist can be started by typing Ctrl+Space. To add additional form fields to a form the current edit position needs to be inside of a Scout group box. Typing Ctrl+Space then provides access to the most frequently used Scout widgets as shown in Figure 7. Figure 7. Proposals to create new form fields in a GroupBox When a template is selected, it is possible to customize it by navigating between the different Edit-Groups with the Tab Key (this works exactly like other templates in the Eclipse Editor). With this mechanism you can quickly define the class name, the parent class and other properties. To exit the Edit-Mode just press Enter. For adding new columns in a table set the current edit position inside a Scout table. The Scout table itself may be located inside of a TableField as shown in Figure 8 or can also be located inside of a Scout TablePage. Figure 8. Proposals to create new columns in a Table Next to adding columns the content assist shown in Figure 8 can also be used to add key stroke actions and menus to tables. Adding new Codes to an existing CodeType is supported by the content assist as shown in Figure 9. Figure 9. Proposals to create new codes in a CodeType Translated text entries are most frequently added when working in the Java editor view. When the the current edit position is inside the String parameter of the TEXTS.get() code, the content assist (opened with Ctrl + Space) provides support for the NLS entries as shown in Figure 10. Figure 10. Proposals corresponding to NLS Support. Selecting one of proposal entries (like \"DateOfBirth\" in the example) shows the available translations on the right side. To select a specific proposal entry you may double click on the entry or hit the Enter key. To create a new text entry select New text…​ at the end of the proposal list. Adding a translated text can then be done in the New Entry wizard provided by the Scout SDK as shown in Figure 11. Figure 11. Adding a new text with the New Entry wizard. Key Name This field holds the text key that is used to access translated text. default This field holds the default translated text for the key. Make sure to at least provide a translated text in this tab. French (France) Additional tabs to enter translations for other languages may be present. Adding additional languages is described in the text for the NLS editor. Copy key to the clipboard Select this checkbox to copy the key name to the clipboard and paste it later in your code. To manage translated application texts for different languages the Scout SDK includes a NLS editor. This editor helps to efficiently deal to edit all the property files that are used with the default setup of Scout. The NLS editor can be accessed for each text provider service of a Scout application via the *.nls files of the shared Maven modules of the application. In the case of the \"Hello World\" application you will find the Texts.nls file in module org.eclipse.scout.helloworld.shared. To open the editor for the \"Hello World\" application select the Texts.nls file first and then use context menu Open With NLS Editor. The screenshot below shows the opened NLS editor. In the first column the key values are shown that are used in accessing translations through TEXTS.get(\"key\"). The second columns holds the default translations followed by columns holding the translations for other translated languages. Actions on the top right corner: Refresh NLS Project Reload the content of the editor. Show NLS entry usage For each row, search in the Java code where the NLS Key is used. Results are displayed in the first column. New entry…​ Opens the New Text Entry Wizard New language…​ Opens the Add a Language Wizard Import…​ Import the NLS entries of an external file Export…​ Export the NLS entries to an external file Import and Export requires additional components. Hide inherited rows checkbox On the top of each column, the text fields allow you to filter the entries in the table. With the Reset button on the right you will empty those filters. The entries in the table can be directly edited by pressing F2 or double-clicking into a text cell. On each row it is possible to call following context menu: Modify Entry Opens the New Text Entry Wizard Find references to 'Xxx' Search in the Java code where the NLS Key is used. Remove Xxx Delete the NLS Entry from the files The mapping between the properties files is registered in the \"Text Provider Service\" class. Per default the files follow this pattern: .shared/src/main/resources//texts/Texts.properties where: is a chain of folders following the same convention as the Java source files with the package name. For example the org.eclipse.contacts.shared project uses org/eclipse/scout/contacts/shared as path. is an identifier of the language and the country. Some possible file names: Texts.properties is the default language Texts_de.properties is for German Texts_fr_BE will be for French in Belgium If NLS keys are used in the code that do not exist in a properties file, an ugly placeholder is displayed to the user. To find such missing translations the Menu Scout → Search missing text keys…​ may be handy. The result is listed in the Eclipse Search view. The search also takes the scope of each NLS key into account. So that the key is considered to be available there must be a TextProviderService with that key on the classpath of that module. Reported false positives can be suppressed using the following comment at the end of the corresponding line: NO-NLS-CHECK. Matches on that line are then not reported in future searches anymore. This chapter walks you through the installation of the Eclipse Scout SDK. There are two ways to install it. Install a prepackaged Eclipse IDE tailored for Scout developers. Install the Scout SDK plugins into an existing Eclipse IDE. The installation process for the Eclipse package containing Scout is described in the Hello Scout Tutorial. This section describes the installation of Scout into an existing Eclipse installation. As the audience of this section is assumed to be familiar with Eclipse, we do not describe how you got your Eclipse installation in the first place. For the provided screenshots we start from the popular package Eclipse IDE for Java EE Developers. Figure 12. Eclipse menu to install additional software To add Scout to your existing Eclipse installation, you need to start Eclipse. Then select the Help Install New Software…​ menu as shown in Figure 12 to open the install dialog. Figure 13. Select the Scout features to add to the Eclipse installation In the install dialog, select the update site matching your Eclipse installation. Type Scout into the filter field below and select Eclipse Scout SDK (Binary only). Then, move through the installation with the Next button. On the last installation step, accept the presented EPL terms by clicking on the appropriate radio button. To complete the installation, click the Finish button and accept the request for a restart of Eclipse. After the restart of the Eclipse IDE the Scout SDK is ready to use! The simplest way to verify your Scout installation is to create a “Hello World” Scout project and run the corresponding Scout application as described in Hello Scout.","title":"Scout SDK for Eclipse","component":"scout-docs","version":"22","name":"sdk-eclipse","url":"/scout-docs/22/sdk/sdk-eclipse.html","titles":[{"text":"Eclipse IDE tooling","hash":"sec-eclipse_ide_tooling","id":1},{"text":"Start the New Wizard","hash":"start-the-new-wizard","id":2},{"text":"Create a new Java class","hash":"create-a-new-java-class","id":3},{"text":"Create a new Java package","hash":"create-a-new-java-package","id":4},{"text":"Organize Java imports","hash":"organize-java-imports","id":5},{"text":"Rename a class","hash":"rename-a-class","id":6},{"text":"Alternative Method","hash":"alternative-method","id":7},{"text":"Rename a package","hash":"rename-a-package","id":8},{"text":"Scout SDK Overview","hash":"sec-sdk_overview","id":9},{"text":"Scout Wizards","hash":"sec-sdk_wizard","id":10},{"text":"New Project Wizard","hash":"sec-wizard_project","id":11},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":12},{"text":"Created Components","hash":"created-components","id":13},{"text":"New Page Wizard","hash":"sec-wizard_page","id":14},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values-2","id":15},{"text":"Created Components","hash":"created-components-2","id":16},{"text":"New Form Wizard","hash":"sec-wizard_form","id":17},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values-3","id":18},{"text":"Created Components","hash":"created-components-3","id":19},{"text":"Scout Content Assistance","hash":"sec-sdk_content_assist","id":20},{"text":"Create new Form Fields","hash":"sec-sdk_new_form_field","id":21},{"text":"Create new Table Columns","hash":"sec-sdk_new_table_column","id":22},{"text":"Create new Codes","hash":"create-new-codes","id":23},{"text":"Scout NLS Tooling","hash":"sec-sdk_nls","id":24},{"text":"Adding a new Translated Text Entry","hash":"sec-add_text_entry","id":25},{"text":"The NLS Editor","hash":"sec-nls_editor","id":26},{"text":"Action Buttons","hash":"action-buttons","id":27},{"text":"Default Mapping to Properties Files","hash":"default-mapping-to-properties-files","id":28},{"text":"Find missing NLS Keys","hash":"find-missing-nls-keys","id":29},{"text":"Appendix A: Scout SDK Installation","hash":"apx-install_scout","id":30},{"text":"Install Eclipse IDE for Scout Developers","hash":"install-eclipse-ide-for-scout-developers","id":31},{"text":"Add Scout to your Existing Eclipse IDE","hash":"add-scout-to-your-existing-eclipse-ide","id":32},{"text":"Verifying the Installation","hash":"verifying-the-installation","id":33}]},"30":{"id":30,"text":"This document is referring to a past Scout release. Please click here for the recent version. The Scout SDK plugin for IntelliJ is available at the JetBrains Marketplace. Please see the Installation Guide on how to install it. Make sure to check out https://plugins.jetbrains.com/plugin/13393-eclipse-scout to learn what the plugin contains.","title":"Scout SDK for IntelliJ","component":"scout-docs","version":"22","name":"sdk-intellij","url":"/scout-docs/22/sdk/sdk-intellij.html","titles":[]},"31":{"id":31,"text":"This document is referring to a past Scout release. Please click here for the recent version. Scout provides plugins for IntelliJ and Eclipse that support developing Eclipse Scout applications. The Scout SDK plugins helps to create a new project and application components, improve code completion and come with a NLS editor to manage all translated text entries of the application. Thanks to this tooling, developing Scout applications is made simpler, more productive and also more robust. Initially, a solid understanding of Java (and JavaScript for Scout JS) is sufficient to start developing Scout applications and only a rough understanding of the underlying Maven/Web technologies is required. The Scout SDK also helps developers to become more productive. Many repetitive and error prone tasks run automatically in the background or are taken care of by the component wizards of the Scout SDK. The application code created by the Scout SDK wizards helps to ensure that the resulting Scout application has a consistent and robust code base and is well aligned with the application model defined by the Scout runtime framework.","title":"Scout SDK","component":"scout-docs","version":"22","name":"sdk","url":"/scout-docs/22/sdk/sdk.html","titles":[{"text":"Motivation for the Tooling","hash":"sec-sdk_motivation","id":1}]},"32":{"id":32,"text":"This document is referring to a past Scout release. Please click here for the recent version. Scout is a framework for creating modern business applications. Such applications are typically separated into multiple tiers where each tier is responsible for a specific part of the application like presenting information to the user or processing business logic and persisting data. Scout solves these requirements by providing a separation of such tiers out of the box. A typical Scout Classic application consists of the following parts: A server layer responsible for persisting data on a database and possibly providing and consuming webservices. The scout server layer provides utilities to simplify the most common tasks. A client layer responsible for handling the Java UI code. It consists of a model represented by plain Java classes as well as services and utilities to implement behaviour associated with client code. The scout client layer provides utilities to simplify the most common tasks. For simplicity, the client model is processed in a single threaded way to avoid synchronization. Callbacks, e.g. for validating a field or calling services when opening a form run inside a Model Job. A UI layer responsible for rendering the client model in the browser. Since the scout UI layer already provides JavaScript/HTML/CSS code for many common UIs, the project specific code in this layer is typically quite small. Examples are specific CSS styling or a new custom input field for special purposes. Server and client both run in a servlet container, such as Apache Tomcat. They are usually deployed as separate war files in order to be able to scale them differently. However, it is also possible to create a single war file. Scout JS is used to build the user interface of an Eclipse Scout application. It consists of a large widget library including simple widgets like buttons or menu items and more complex widgets like tables, tile grids or trees. Beside the widget library itself, Scout JS also helps to interact with the widgets, from accessing a widget, to configuring data binding or adding input validation. But with the widgets alone you cannot create an application. You need a frame to put the widgets into, a setup to easily write tests and prevent errors, a centralized error handling to analyze errors, possibilities to customize the look of your app and tooling to build it, so it can be published and used. For all these topics Scout JS provides solutions with the goal to make developing a user interface as easy as possible. This means, with Scout JS you’ll create your user interface of an Eclipse Scout application using JavaScript. Compared to using Scout Classic, you don’t need a UI server which helps to create stateless applications. Scout JS is used in classic Scout applications as well to render the client model written in Java. So, if you understand the concepts of Scout JS, writing custom widgets for Scout Classic will be a lot easier.","title":"Technical Guide","component":"scout-docs","version":"22","name":"technical-guide","url":"/scout-docs/22/technical-guide/technical-guide.html","titles":[{"text":"Scout Classic","hash":"scout-classic","id":1},{"text":"Scout JS","hash":"scout-js","id":2}]},"33":{"id":33,"text":"This document is referring to a past Scout release. Please click here for the recent version. This cheat sheet shows how to create your own chart for a Scout application. In this example we will visualize the sold scoops of an ice cream shop. We assume the ice cream shop already has a running Scout application and a place where it wants to create the chart. Everything related to charts has its own Maven and npm modules and is not part of Scout core. Therefore, the following Maven dependencies need to be added to the client-, shared- and ui.html-module of the ice cream shop app. org.eclipse.scout.rt org.eclipse.scout.rt.chart.client org.eclipse.scout.rt org.eclipse.scout.rt.chart.shared org.eclipse.scout.rt org.eclipse.scout.rt.chart.ui.html A npm dependency to @eclipse-scout/chart needs to be added in the package.json of the ice cream shop app and in addition, an import needs to be added to the entry-files icecream.js, import * as chart from '@eclipse-scout/chart'; Object.assign({}, chart); // workaround so that the imports are not unused icecream-theme.less and icecream-theme-dark.less. @import \"~@eclipse-scout/chart/src/index\"; @import \"~@eclipse-scout/chart/src/index-dark\"; The chart is created using an AbstractChartField and placed inside a GroupBox. public class ChartField extends AbstractChartField { public class Chart extends AbstractChart { } } The ice cream shop has sold the following amount of scoops: Table 1. Table Scoops per month and flavor Jan. Feb. Mar. Apr. May Jun. Jul. Aug. Sept. Oct. Nov. Dec. Vanilla 0 0 0 94 162 465 759 537 312 106 0 0 Chocolate 0 0 0 81 132 243 498 615 445 217 0 0 Strawberry 0 0 0 59 182 391 415 261 75 31 0 0 We create a data object and pass it to the chart (e.g. in the execLoad method of our FormHandler). ChartData data = new ChartData(); List axis = new ArrayList<>(); Stream.of(\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May\", \"Jun.\", \"Jul.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\") .forEach(label -> axis.add(new ChartAxisBean(label, label))); data.getAxes().add(axis); MonupleChartValueGroupBean vanilla = new MonupleChartValueGroupBean(); vanilla.setGroupName(\"Vanilla\"); IntStream.of(0, 0, 0, 94, 162, 465, 759, 537, 312, 106, 0, 0) .forEach(value -> vanilla.getValues().add(new BigDecimal(value))); data.getChartValueGroups().add(vanilla); MonupleChartValueGroupBean chocolate = new MonupleChartValueGroupBean(); chocolate.setGroupName(\"Chocolate\"); IntStream.of(0, 0, 0, 81, 132, 243, 498, 615, 445, 217, 0, 0) .forEach(value -> chocolate.getValues().add(new BigDecimal(value))); data.getChartValueGroups().add(chocolate); MonupleChartValueGroupBean strawberry = new MonupleChartValueGroupBean(); strawberry.setGroupName(\"Strawberry\"); IntStream.of(0, 0, 0, 59, 182, 391, 415, 261, 75, 31, 0, 0) .forEach(value -> strawberry.getValues().add(new BigDecimal(value))); data.getChartValueGroups().add(strawberry); getFieldByClass(ChartField.class).getChart().setData(data); The chart will now look like this: It looks like this, because the default type is pie, the default value of maxSegments is 5 and the first three segments in each dataset are 0. Let’s change it to a bar chart and use another color scheme: IChartConfig config = BEANS.get(IChartConfig.class) .withType(IChartType.BAR) .withColorScheme(ColorScheme.RAINBOW); getFieldByClass(ChartField.class).getChart().setConfig(config); Now we add labels to the scales and set some custom colors. vanilla.setColorHexValue(\"#fdf2d1\"); chocolate.setColorHexValue(\"#94654c\"); strawberry.setColorHexValue(\"#f89fa1\"); config.withAutoColor(false) .withXAxisLabelDisplay(true) .withXAxisLabel(\"Month\") .withYAxisLabelDisplay(true) .withYAxisLabel(\"Scoops\"); getFieldByClass(ChartField.class).getChart().setData(data); getFieldByClass(ChartField.class).getChart().setConfig(config); Finally, we want to make the chart interactive. getFieldByClass(ChartField.class).getChart().extendConfig(BEANS.get(IChartConfig.class) .withClickable(true) .withCheckable(true) .withLegendClickable(true), true); The chart is now clickable and checkable and datasets can be hidden via the legend. Figure 1. The dataset \"Vanilla\" is hidden and some segments are checked. Each time a segment is clicked an event is triggered. This event can be handled by overriding execValueClick on the chart. @Override protected void execValueClick(BigDecimal xIndex, BigDecimal yIndex, Integer datasetIndex) { System.out.println(\"Segment clicked\\n\" + \" - datasetIndex: \" + datasetIndex + \"\\n\" + \" - xIndex: \" + xIndex + \"\\n\" + \" - yIndex: \" + yIndex); } Even if some charts are rendered on a -element the colors can be changed via CSS. We add a custom grey color scheme for the bubble chart, which is rendered on a . To achieve this, we need to add a LESS file with the following content: @chart-grey-1: #191919; @chart-grey-2: #4C4C4C; @chart-grey-3: #737373; @chart-grey-4: #999999; @chart-grey-5: #BFBFBF; @chart-grey-6: #D8D8D8; .color-scheme-grey > .bubble-chart { & > .elements { > .label { fill: black; } > .grid { fill: lightslategrey; } > .tooltip-border { fill: black; } #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 20); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 35, @additional-classes: ~\".hover\"); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".legend\"); } &.checkable > .elements { #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".checked\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover.checked\"); } } This color scheme can now be used in a config object: BEANS.get(IChartConfig.class) .withType(IChartType.BUBBLE) .withColorScheme(() -> \"color-scheme-grey\"); Figure 2. A checkable bubble chart using the custom grey color scheme.","title":"How to Create a Chart","component":"scout-docs","version":"22","name":"chart-how-to","url":"/scout-docs/22/howtos/scout-classic/chart-how-to.html","titles":[{"text":"Prerequisites","hash":"prerequisites","id":1},{"text":"Minimal Code for a New Chart","hash":"minimal-code-for-a-new-chart","id":2},{"text":"Add data to the chart","hash":"add-data-to-the-chart","id":3},{"text":"Chart configuration","hash":"chart-configuration","id":4},{"text":"Events","hash":"events","id":5},{"text":"Change colors using CSS","hash":"change-colors-using-css","id":6}]},"34":{"id":34,"text":"This document is referring to a past Scout release. Please click here for the recent version. When a user selects a lookup-row from the proposal chooser in Scout versions ⇐ 6.0, the properties foregroundColor, backgroundColor, font and tooltipText have been automatically copied from the lookup-row to the field. In some cases this was exactly what a specific application needed, but in other cases it was hard to implement a specific behavior without overriding internal methods from the SmartField. For instance it was not possible to have a lookup-row with background-color red in the proposal-chooser and at the same time avoid the background-color of the field changing to red, when that row was being selected. Since that automatic behavior didn’t fit every business requirement, we removed it completely. This means a programmer must now implement specific code to read properties from the lookup-row and set them on the field. The following example is from the Scout widgets app. It changes the background-color of the field. Listing 1. Java example, set the background-color of the lookup-row on the field @Override protected void execChangedValue() { updateFieldBackgroundColor(); } /** * Sets the color of the field to the color of the selected lookup row. */ protected void updateFieldBackgroundColor() { ILookupRow lookupRow = getLookupRow(); String bgColor = lookupRow == null ? null : lookupRow.getBackgroundColor(); setBackgroundColor(bgColor); } Since Scout 8.0 the property cssClass from the lookup-row is automatically applied to the .form-field DIV. This gives the programmer the flexibility to style either both, lookup-row and field, or only the lookup-row in the proposal-chooser via CSS/LESS. Here’s a LESS example from the Scout widget app that sets the background-color of lookup-row and field. It is used for the EventTypeCodeType which defines 3 codes with the CSS classes public, private and external: Listing 2. LESS example, style lookup-row and field with the same CSS class .form-field.public > .field, .table-row.public { background-color: @palette-green-0; } .form-field.private > .field, .table-row.private { background-color: @palette-orange-1; } .form-field.external > .field, .table-row.external { background-color: @palette-gray-3; } Conclusion: older Scout apps that rely on the automatic behavior for the properties mentioned above, should use CSS classes instead of the properties back-/foregroundColor or font. If that’s not possible you should implement logic as shown in the example above where required, possibly moving that code in a class that extends AbstractSmartField, if the same code is required in multiple places.","title":"SmartField: How to Apply Colors and Styles From a Lookup Row","component":"scout-docs","version":"22","name":"smart-field-how-to","url":"/scout-docs/22/howtos/scout-classic/smart-field-how-to.html","titles":[]},"35":{"id":35,"text":"This document is referring to a past Scout release. Please click here for the recent version. This cheat sheet shows how to create your own chart for a ScoutJS application. In this example we will visualize the sold scoops of an ice cream shop. We assume the ice cream shop already has a running ScoutJS application and a place where it wants to create the chart. Everything related to charts has its own Maven and npm modules and is not part of Scout core. Therefore, the following Maven dependencies need to be added to the ui.html-module of the ice cream shop app. org.eclipse.scout.rt org.eclipse.scout.rt.chart.ui.html A npm dependency to @eclipse-scout/chart needs to be added in the package.json of the ice cream shop app and in addition, an import needs to be added to the entry-files icecream.js, import * as chart from '@eclipse-scout/chart'; Object.assign({}, chart); // workaround so that the imports are not unused icecream-theme.less and icecream-theme-dark.less. @import \"~@eclipse-scout/chart/src/index\"; @import \"~@eclipse-scout/chart/src/index-dark\"; The chart is created by scout.create('Chart', { parent: this }); The ice cream shop has sold the following amount of scoops: Table 1. Table Scoops per month and flavor Jan. Feb. Mar. Apr. May Jun. Jul. Aug. Sept. Oct. Nov. Dec. Vanilla 0 0 0 94 162 465 759 537 312 106 0 0 Chocolate 0 0 0 81 132 243 498 615 445 217 0 0 Strawberry 0 0 0 59 182 391 415 261 75 31 0 0 We create a data object and pass it to the chart. let data = { axes: [ [{label: 'Jan.'}, {label: 'Feb.'}, {label: 'Mar.'}, {label: 'Apr.'}, {label: 'May'}, {label: 'Jun.'}, {label: 'Jul.'}, {label: 'Aug.'}, {label: 'Sept.'}, {label: 'Oct.'}, {label: 'Nov.'}, {label: 'Dec.'}] ], chartValueGroups: [ { groupName: 'Vanilla', values: [0, 0, 0, 94, 162, 465, 759, 537, 312, 106, 0, 0] }, { groupName: 'Chocolate', values: [0, 0, 0, 81, 132, 243, 498, 615, 445, 217, 0, 0] }, { groupName: 'Strawberry', values: [0, 0, 0, 59, 182, 391, 415, 261, 75, 31, 0, 0] } ] }; chart.setData(data); The chart will now look like this: It looks like this, because the default type is pie, the default value of maxSegments is 5 and the first three segments in each dataset are 0. Let’s change it to a bar chart and use another color scheme: let config = { type: Chart.Type.BAR, options: { colorScheme: colorSchemes.ColorSchemeId.RAINBOW } }; chart.setConfig(config); Now we add labels to the scales and set some custom colors. data.chartValueGroups[0].colorHexValue = '#fdf2d1'; data.chartValueGroups[1].colorHexValue = '#94654c'; data.chartValueGroups[2].colorHexValue = '#f89fa1'; config.options.autoColor = false; config.options.scales = { x: { title: { display: true, text: 'Month' } }, y: { title: { display: true, text: 'Scoops' } } }; chart.setData(data); chart.setConfig(config); Finally, we want to make the chart interactive. config.options = $.extend(true, {}, config.options, { clickable: true, checkable: true, plugins: { legend: { clickable: true } } }); chart.setConfig(config); The chart is now clickable and checkable and datasets can be hidden via the legend. Figure 1. The dataset \"Vanilla\" is hidden and some segments are checked. Each time a segment is clicked an event is triggered. This event can be handled by let clickHandler = event => { let clickObject = event.data, datasetIndex = clickObject.datasetIndex, dataIndex = clickObject.dataIndex, xIndex = clickObject.xIndex, yIndex = clickObject.yIndex; console.log('Segment clicked\\n' + ' - datasetIndex: ' + datasetIndex + '\\n' + ' - dataIndex: ' + dataIndex + '\\n' + ' - xIndex: ' + xIndex + '\\n' + ' - yIndex: ' + yIndex); }; chart.on('valueClick', clickHandler); A list of all checked segments is held in chart.checkedItems. Even if some charts are rendered on a -element the colors can be changed via CSS. We add a custom grey color scheme for the bubble chart, which is rendered on a . To achieve this, we need to add a LESS file with the following content: @chart-grey-1: #191919; @chart-grey-2: #4C4C4C; @chart-grey-3: #737373; @chart-grey-4: #999999; @chart-grey-5: #BFBFBF; @chart-grey-6: #D8D8D8; .color-scheme-grey > .bubble-chart { & > .elements { > .label { fill: black; } > .grid { fill: lightslategrey; } > .tooltip-border { fill: black; } #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 20); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 35, @additional-classes: ~\".hover\"); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".legend\"); } &.checkable > .elements { #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".checked\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover.checked\"); } } This color scheme can now be used in a config object: let config = { type: Chart.Type.BUBBLE, options: { colorScheme: 'color-scheme-grey' } }; Figure 2. A checkable bubble chart using the custom grey color scheme.","title":"How to Create a Chart","component":"scout-docs","version":"22","name":"chart-how-to","url":"/scout-docs/22/howtos/scout-js/chart-how-to.html","titles":[{"text":"Prerequisites","hash":"prerequisites","id":1},{"text":"Minimal Code for a New Chart","hash":"minimal-code-for-a-new-chart","id":2},{"text":"Add data to the chart","hash":"add-data-to-the-chart","id":3},{"text":"Chart configuration","hash":"chart-configuration","id":4},{"text":"Events","hash":"events","id":5},{"text":"Change colors using CSS","hash":"change-colors-using-css","id":6}]},"36":{"id":36,"text":"This document is referring to a past Scout release. Please click here for the recent version. This cheat sheet shows how to implement your own custom field for a ScoutJS application. In this example we will write a FlipCard field that will show a playing card. Clicking on the card will flip it from one side to the other. For this example we use the helloscout git repository, but you can easily create the field in your own code base as well. In case you want to use the helloscout repo, clone and import it into your favourite IDE: git clone https://github.com/bsi-software/helloscout.git Read the readme and start the hellojs application to make sure it works. Create the following files in the folder org.eclipse.scout.hellojs.ui.html src/main/js/flipcard/FlipCardField.js The JavaScript file representing the field. src/main/js/flipcard/FlipCardField.less The LESS file containing the styles of the field. Listing 1. index.js ... export {default as FlipCardField} from './flipcard/FlipCardField'; ... Listing 2. index.less ... @import \"flipcard/FlipCardField\"; ... The FlipCard will inherit from FormField. Every form field consists of a container, a label, the actual field, a mandatory-indicator and a status. Listing 3. FlipCardField.js import {FormField} from '@eclipse-scout/core'; export default class FlipCardField extends FormField { _render() { // Create the container this.addContainer(this.$parent, 'flip-card-field'); // Add a label this.addLabel(); // Create the actual field. This will be your flip card. var $field = this.$parent.appendDiv('content'); // add the field to the form field. this.addField($field); // Add other required form field elements this.addMandatoryIndicator(); this.addStatus(); }; } Listing 4. HelloFormModel.js { id: \"hellojs.HelloForm\", ... rootGroupBox: { ... fields: [ { id: 'DetailBox', ... fields: [ { id: 'NameField', ... }, (1) { id: 'FlipCardField', objectType: 'hellojs.FlipCardField', label: 'Flip the card', gridDataHints: { h: 5, weightY: 0 } }, { id: 'GreetButton', ... } ] } ] } } 1 The FlipCard field Now reload your browser and you should get the following result: Result Minimal Form Field Listing 5. FlipCard.js import {FormField} from '@eclipse-scout/core'; export default class FlipCardField extends FormField { constructor() { super(); this.$card = null; this.$front = null; this.$back = null; this.flipped = false; this.frontImage = null; this.backImage = null; } _render() { // Create the container this.addContainer(this.$parent, 'flip-card-field'); // Add a label this.addLabel(); // Create the actual field (1) var $field = this.$parent.appendDiv('content'); // Create the card inside the field this.$card = $field.appendDiv('card') .on('mousedown', this._onCardMouseDown.bind(this)); //(2) this.$front = this.$card.appendDiv('front'); this.$back = this.$card.appendDiv('back'); // Add the field to the form field. It will be available as this.$field. this.addField($field); // Add other required form field elements this.addMandatoryIndicator(); this.addStatus(); } _renderProperties() { (3) super._renderProperties(); this._renderFrontImage(); this._renderBackImage(); this._renderFlipped(); } _renderFrontImage() { if (this.frontImage) { this.$front.append(''); } } _renderBackImage() { if (this.backImage) { this.$back.append(''); } } _remove() { (4) super._remove(); this.$card = null; this.$front = null; this.$back = null; } _onCardMouseDown() { (2) this.setFlipped(!this.flipped); } setFlipped(flipped) { this.setProperty('flipped', flipped); } _renderFlipped() { this.$card.toggleClass('flipped', this.flipped); } } 1 Create the dom elements in the render function. 2 Add event handler which toggles the CSS class flipped. 3 Initial rendering of the properties. Applies the state to the DOM. 4 Keep the references clean. Reset DOM references when the field has been removed. Listing 6. HelloForm.json export default { id: 'hellojs.HelloForm', ... rootGroupBox': { ... fields: [ { id: 'DetailBox', ... fields: [ { id: 'NameField', ... }, (1) { id: 'FlipCardField', objectType: 'hellojs.FlipCardField', label: 'Flip the card', frontImage: 'img/card-back.jpg', backImage: 'img/card-front.jpg', gridDataHints: { h: 5, weightY: 0 } }, { id: 'GreetButton', ... } ] } ] } } 1 FlipCard field is inserted after the name field. Listing 7. FlipCardField.less .flip-card-field { .card { position: absolute; cursor: pointer; height: 100%; width: 152px; transition: transform 1s; (1) transform-style: preserve-3d; &.flipped { transform: rotateY( 180deg ); } & > div { display: block; height: 100%; width: 100%; position: absolute; backface-visibility: hidden; (2) &.back { transform: rotateY( 180deg ); (3) } & > img { height: 100%; width: 100%; } } } } 1 Animation of the card. 2 Ensure back side is not visible. 3 Rotation to back side. Finally, create a folder img in the WebContent folder (org.eclipse.scout.hellojs.ui.html.app/src/main/resources/WebContent) and paste the two images of the card into that folder. You should be able to find the images using Google ;-) Result Flip Card","title":"How to Create a Custom Field","component":"scout-docs","version":"22","name":"flip-card-how-to","url":"/scout-docs/22/howtos/scout-js/flip-card-how-to.html","titles":[{"text":"Setup","hash":"setup","id":1},{"text":"Add Empty JS and CSS Files","hash":"add-empty-js-and-css-files","id":2},{"text":"Add the JS file to the JS index","hash":"add-the-js-file-to-the-js-index","id":3},{"text":"Add the LESS file to the LESS index","hash":"add-the-less-file-to-the-less-index","id":4},{"text":"Minimal Code for a New FormField","hash":"minimal-code-for-a-new-formfield","id":5},{"text":"Create a Minimal FormField","hash":"create-a-minimal-formfield","id":6},{"text":"Add the FlipCard to the HelloForm","hash":"add-the-flipcard-to-the-helloform","id":7},{"text":"Full Featured Flip Card Field","hash":"full-featured-flip-card-field","id":8}]},"37":{"id":37,"text":"This document is referring to a past Scout release. Please click here for the recent version. This how-to shows how to provide JAX-RS RESTful services and consume them from a Scout JS Single Page Application. The goal is to provide a ServerState service in the org.eclipse.scout.hellojs.ui.html module. Add the following dependencies to the org.eclipse.scout.hellojs.ui.html module. org.eclipse.scout.hellojs.ui.html/pom.xml ... org.eclipse.scout.rt org.eclipse.scout.rt.rest org.glassfish.jersey.containers jersey-container-servlet-core org.glassfish.jersey.inject jersey-hk2 org.glassfish.jersey.media jersey-media-json-jackson Register the REST servlet in the web.xml of org.eclipse.scout.hellojs.ui.html.app.dev and org.eclipse.scout.hellojs.ui.html.app.war. org.eclipse.scout.hellojs.ui.html.app.dev/src/main/webapp/WEB-INF/web.xml org.eclipse.scout.hellojs.ui.html.app.war/src/main/webapp/WEB-INF/web.xml ... apiServlet org.glassfish.jersey.servlet.ServletContainer javax.ws.rs.Application org.eclipse.scout.rt.rest.RestApplication 1 ... apiServlet /api/* ... Create the server state service in the org.eclipse.scout.hellojs.ui.html module. The service returns a OK status whenever it is accessible. org.eclipse.scout.hellojs.ui.html/src/main/java/org/eclipse/scout/hellojs/ui/html/helloworld/ServerStateService.java package org.eclipse.scout.hellojs.ui.html.helloworld; import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.Produces; import javax.ws.rs.core.MediaType; import org.eclipse.scout.rt.platform.status.IStatus; import org.eclipse.scout.rt.platform.status.Status; import org.eclipse.scout.rt.rest.IRestResource; /** * {@link HelloWorldService} */ @Path(\"serverstatus\") (1) public class ServerStateService implements IRestResource { @GET @Produces(MediaType.APPLICATION_JSON) public Status getStatus() { return new Status(IStatus.OK); } } 1 The path under which the service will be provided. Note: the full path is /api/serverstatus since the apiServlet is mapped to /api/* in the web.xml. Start the dev ui application org.eclipse.scout.hellojs.ui.html.app.dev/[org.eclipse.scout.hellojs] dev ui.launch. Connect to the url http:localhost:[ui server port]/api/serverstatus and ensure the service is up an running. var ajaxOptions = { type: 'GET', dataType: 'json', contentType: 'application/json; charset=UTF-8', cache: false, url: 'api/serverstatus', timeout: 0 }; this.ajaxCall = scout.create('AjaxCall', { ajaxOptions: ajaxOptions, name: 'server status request' }, { ensureUniqueId: false }); this.ajaxCall.retryIntervals = []; (1) this.ajaxCall.call() (2) .done(function(result) { (3) // TODO handle the success state. result.severity if filled with the severity code. }.bind(this)) .fail( (4) function() { // TODO handle the failure case. }.bind(this) ); 1 The ajax call retries by default 4 times for our example it is not needed to retry at all. 2 The ajax call 3 Success callback 4 Error callback","title":"How to Use a REST Service","component":"scout-docs","version":"22","name":"rest-service-how-to","url":"/scout-docs/22/howtos/scout-js/rest-service-how-to.html","titles":[{"text":"Maven Dependencies","hash":"maven-dependencies","id":1},{"text":"REST Servlet","hash":"rest-servlet","id":2},{"text":"Provide a RESTful service","hash":"provide-a-restful-service","id":3},{"text":"Test if the service is up an running","hash":"test-if-the-service-is-up-an-running","id":4},{"text":"Use the service from Scout JS","hash":"use-the-service-from-scout-js","id":5}]},"38":{"id":38,"text":"This document is referring to a past Scout release. Please click here for the recent version. Exceptions can be logged via SLF4J Logger, or given to exception handler for centralized, consistent exception handling, or translated into other exceptions. Scout provides some few exceptions/errors, which are used by the framework. All scout throwables are unchecked and typically implementing the IThrowableWithContextInfo interface, which provides functionality for associating context information with the occurred error. Most scout throwables are runtime exceptions, and typically inherit from PlatformException. See Scout Runtime Exceptions for more information. Some scout throwables are instances of java.lang.Error by extending PlatformError. Those errors usually provide functionality to interrupt Jobs, for example when a user is canceling a long running operation. Note: PlatformErrors should never be catched by business logic! See Scout Runtime Errors for more information. Base runtime exception of the Scout platform, which allows for message formatting anchors and context information to be associated. There is a single constructor which accepts the exception’s message, and optionally a variable number of arguments. Typically, a potential cause is given as its argument. The message allows further the use of formatting anchors in the form of {} pairs. The respective formatting arguments are provided via the constructor’s varArg parameter. If the last argument is of the type Throwable and not referenced as formatting anchor in the message, that Throwable is used as the exception’s cause. Internally, SLF4J MessageFormatter is used to provide substitution functionality. Hence, The format is the very same as if using SLF4j Logger. Further, PlatformException allows to associate context information, which are available in SLF4J diagnostic context map (MDC) upon logging the exception. Listing 1. PlatformException examples Exception cause = new Exception(); // Create a PlatformException with a message new PlatformException(\"Failed to persist data\"); // Create a PlatformException with a message and cause new PlatformException(\"Failed to persist data\", cause); // Create a PlatformException with a message with formatting anchors new PlatformException(\"Failed to persist data [entity={}, id={}]\", \"person\", 123); // Create a PlatformException with a message containing formatting anchors and a cause new PlatformException(\"Failed to persist data [entity={}, id={}]\", \"person\", 123, cause); // Create a PlatformException with context information associated new PlatformException(\"Failed to persist data\", cause) .withContextInfo(\"entity\", \"person\") .withContextInfo(\"id\", 123); Represents a PlatformException and is thrown in case of a processing failure, and which can be associated with an exception error code and severity. Represents a ProcessingException with VETO character. If thrown server-side, exceptions of this type are transported to the client and typically visualized in the form of a message box. Represents a PlatformException and indicates an assertion error about the application’s assumptions about expected values. Represents a PlatformException and is thrown if a ServerRunContext requires a transaction to be available. Runtime Errors are used to indicate an error, that shouldn’t be catched/treated by business logic and therefore bubble up to the appropriate exception handler in the scout framework. Because those errors are handled by the framework internals, they should never be catched on the server (Services etc.) nor on the client side (Pages, Forms, etc.). All Scout Runtime Errors extend PlatformError. Like PlatformException, PlatformErrors implement IThrowableWithContextInfo for associating context information with the occurred error. See PlatformException for usage and example code. Represents a PlatformError and indicates that a thread was interrupted while waiting for some condition to become true, e.g. while waiting for a job to complete. Unlike java.lang.InterruptedException, the thread’s interrupted status is not cleared when catching this exception. Represents a PlatformError and indicates that the result of a job cannot be retrieved, or the IFuture’s completion not be awaited because the job was cancelled. Represents a PlatformError and indicates that the maximal wait time elapsed while waiting for some condition to become true, e.g. while waiting a job to complete. An exception handler is the central point for exception handling. It provides a single method 'handle' which accepts a Throwable, and which never throws an exception. It is implemented as a bean, meaning managed by the bean manager to allow easy replacement, e.g. to use a different handler when running client or server side. By default, a ProcessingException is logged according to its severity, a VetoException, ThreadInterruptedError or FutureCancelledError logged in DEBUG level, and any other exception logged as an ERROR. If running client side, exceptions are additionally visualized and showed to the user. Exception translators are used to translate an exception into another exception. Also, they unwrap the cause of wrapper exceptions, like UndeclaredThrowableException, or InvocationTargetException, or ExecutionException. If the exception is of the type Error, it is normally not translated, but re-thrown instead. That is because an Error indicates a serious problem due to an abnormal condition. Use this translator to work with checked exceptions and runtime exceptions, but not with Throwable. If given an Exception, or a RuntimeException, or if being a subclass thereof, that exception is returned as given. Otherwise, a PlatformException is returned which wraps the given Throwable. Use this translator to work with runtime exceptions. When working with RunContext] or IFuture, some methods optionally accept a translator. If not specified, this translator is used by default. If given a RuntimeException, it is returned as given. For a checked exception, a PlatformException is returned which wraps the given checked exception. Use this translator to work with PlatformExceptions. If given a PlatformException, it is returned as given. For all other exceptions (checked or unchecked), a PlatformException is returned which wraps the given exception. Typically, this translator is used if you require to add some context information via IThrowableWithContextInfo.withContextInfo(String, Object, Object). Listing 2. PlatformException examples try { // do something } catch (Exception e) { throw BEANS.get(PlatformExceptionTranslator.class).translate(e) .withContextInfo(\"cid\", \"12345\") .withContextInfo(\"user\", Subject.getSubject(AccessController.getContext())) .withContextInfo(\"job\", IFuture.CURRENT.get()); } Use this translator to work with Throwable as given. Also, if given a wrapped exception like UndeclaredThrowableException, InvocationTargetException or ExecutionException, that exception is returned as given without unwrapping its cause. For instance, this translator can be used if working with the Job API, e.g. to distinguish between a FutureCancelledError thrown by the job’s runnable, or because the job was effectively cancelled. The Scout framework logs via SLF4J (Simple Logging Facade for Java). It serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging or logback) allowing the end user to plug in the desired logging framework at deployment time. SLF4J allows the use of formatting anchors in the form of {} pairs in the message which will be replaced by the respective argument. If the last argument is of the type Throwable and not referenced as formatting anchor in the message, that Throwable is used as the exception. Listing 3. Logging examples Exception e = new Exception(); Logger logger = LoggerFactory.getLogger(getClass()); // Log a message logger.error(\"Failed to persist data\"); // Log a message with exception logger.error(\"Failed to persist data\", e); // Log a message with formatting anchors logger.error(\"Failed to persist data [entity={}, id={}]\", \"person\", 123); // Log a message and exception with a message containing formatting anchors logger.error(\"Failed to persist data [entity={}, id={}]\", \"person\", 123, e);","title":"Working with exceptions","component":"scout-docs","version":"22","name":"exception-handling","url":"/scout-docs/22/technical-guide/common-concepts/exception-handling.html","titles":[{"text":"Scout Throwables","hash":"scout-throwables","id":1},{"text":"Scout Runtime Exceptions","hash":"scout-runtime-exceptions","id":2},{"text":"PlatformException","hash":"platformexception","id":3},{"text":"ProcessingException","hash":"processingexception","id":4},{"text":"VetoException","hash":"vetoexception","id":5},{"text":"AssertionException","hash":"assertionexception","id":6},{"text":"TransactionRequiredException","hash":"transactionrequiredexception","id":7},{"text":"Scout Runtime Errors","hash":"scout-runtime-errors","id":8},{"text":"PlatformError","hash":"platformerror","id":9},{"text":"ThreadInterruptedError","hash":"threadinterruptederror","id":10},{"text":"FutureCancelledError","hash":"futurecancellederror","id":11},{"text":"TimedOutError","hash":"timedouterror","id":12},{"text":"Exception handling","hash":"exception-handling","id":13},{"text":"Exception translation","hash":"exception-translation","id":14},{"text":"DefaultExceptionTranslator","hash":"defaultexceptiontranslator","id":15},{"text":"DefaultRuntimeExceptionTranslator","hash":"default-runtime-exception-translator","id":16},{"text":"PlatformExceptionTranslator","hash":"platformexceptiontranslator","id":17},{"text":"NullExceptionTranslator","hash":"nullexceptiontranslator","id":18},{"text":"Exception Logging","hash":"exception-logging","id":19}]},"39":{"id":39,"text":"This document is referring to a past Scout release. Please click here for the recent version. Scout provides a job manager based on Java Executors framework to run tasks in parallel, and on Quartz Trigger API to support for schedule plans and to compute firing times. A task (aka job) can be scheduled to commence execution either immediately upon being scheduled, or delayed some time in the future. A job can be single executing, or recurring based on some schedule plan. The job manager itself is implemented as an application scoped bean, meaning that it is a singleton which exists once in the web application. immediate, delayed or timed execution single (one-shot) or repetitive execution (based on Quartz schedule plans) listen for job lifecycle events wait for job completion job cancellation limitation of the maximal concurrently level among jobs RunContext based execution configurable thread pool size (core pool size, max pool size) association of job execution hints to select jobs (e.g. to cancel or await job’s completion) named jobs and threads to ease debugging A job is defined as some work to be executed asynchronously and is associated with a JobInput to describe how to run that work. The work is given to the job manager in the form of a Runnable or Callable. The only difference is, that a Runnable represents a 'fire-and-forget' action, meaning that the submitter of the job does not expect the job to return a result. On the other hand, a Callable returns the computation’s result, which the submitter can await for. Of course, a runnable’s completion can also be waited for. Listing 1. Work that does not return a result public class Work implements IRunnable { @Override public void run() throws Exception { // do some work } } Listing 2. Work that returns a computation result public class WorkWithResult implements Callable { @Override public String call() throws Exception { // do some work return \"result\"; } } Upon scheduling a job, the job manager returns a IFuture to interact with the job, e.g. to cancel its execution, or to await its completion. The job itself can also access its IFuture, namely via IFuture.CURRENT() ThreadLocal. Listing 3. Accessing the Future from within the job public class Job implements IRunnable { @Override public void run() throws Exception { IFuture myFuture = IFuture.CURRENT.get(); } } The job manager provides two scheduling methods, which only differ in the work they accept for execution (callable or runnable). IFuture schedule(IRunnable runnable, JobInput input); (1) IFuture schedule(Callable callable, JobInput input); (2) 1 Use to schedule a runnable which does not return a result to the submitter 2 Use to schedule a callable which does return a result to the submitter The second and mandatory argument to be provided is the JobInput, which tells the job manager how to run the job. Learn more about JobInput. The following snippet illustrates how a job is actually scheduled. Listing 4. Schedule a job IJobManager jobManager = BEANS.get(IJobManager.class); (1) (2) jobManager.schedule(() -> { // do something }, BEANS.get(JobInput.class)); (3) 1 Obtain the job manager via bean manager (application scoped bean) 2 Provide the work to be executed (either runnable or callable) 3 Provide the JobInput to instrument job execution This looks a little clumsy, which is why Scout provides you with the Jobs class to simplify dealing with the job manager, and to support you in the creation of job related artifacts like JobInput, filter builders and more. Most importantly, it allows to schedule jobs in a shorter and more readable form. Listing 5. Schedule a job via Jobs helper class Jobs.schedule(() -> { // do something }, Jobs.newInput()); The job input tells the job manager how to run the job. It further names the job to ease debugging, declares in which context to run the job, and how to deal with unhandled exceptions. The job input itself is a bean, useful if adding some additional features to the job manager. The API of JobInput supports for method chaining for reduced and more solid code. Listing 6. Schedule a job and control execution via JobInput Jobs.schedule(() -> { // do something }, Jobs.newInput() .withName(\"job name\") (1) .withRunContext(ClientRunContexts.copyCurrent()) (2) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(10, TimeUnit.SECONDS) (3) .withSchedule(FixedDelayScheduleBuilder.repeatForever(5, TimeUnit.SECONDS))) (4) .withExceptionHandling(new ExceptionHandler() { (5) @Override public void handle(Throwable t) { System.err.println(t); } }, true)); This snippet instructs the job manager to run the job as following: 1 Give the job a name. 2 Run the job in the current calling context, meaning in the very same context as the submitter is running when giving this job to the job manager. By copying the current context, the job will also be cancelled upon cancellation of the current RunContext. 3 Commence execution in 10 seconds (delayed execution). 4 Execute the job repeatedly, with a delay of 5 seconds between the termination of one and the commencement of the next execution. Also, repeat the job infinitely, until being cancelled. 5 Print any uncaught exception to the error console, and do not propagate the exception to the submitter, nor cancel the job upon an uncaught exception. The following paragraphs describe the functionality of JobInput in more detail. To optionally specify the name of the job, which is used to name the worker thread (only in development environment) and for logging purpose. Optionally, formatting anchors in the form of {} pairs can be used in the name, which will be replaced by the respective argument. Jobs.newInput() .withName(\"Sending emails [from={}, to={}]\", \"frank\", \"john@eclipse.org, jack@eclipse.org\"); To optionally specify the RunContext to be installed during job execution. The RunMonitor associated with the RunContext will be used as the job’s monitor, meaning that cancellation requests to the job future or the context’s monitor are equivalent. If no context is given, the job manager ensures a monitor to be installed, so that executing code can always query its cancellation status via RunMonitor.CURRENT.get().isCancelled(). To optionally set the trigger to define the schedule upon which the job will commence execution. If not set, the job will commence execution immediately after being scheduled, and will execute exactly once. The trigger mechanism is provided by Quartz Scheduler, meaning that you can profit from the powerful Quartz schedule capabilities. For more information, see http://www.quartz-scheduler.org. Use the static factory method Jobs.newExecutionTrigger() to get an instance: // Schedules a delayed single executing job Jobs.newInput() .withName(\"job\") .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(10, TimeUnit.SECONDS)); // Schedules a repeatedly running job at a fixed rate (every hour), which ends in 24 hours Jobs.newInput() .withName(\"job\") .withExecutionTrigger(Jobs.newExecutionTrigger() .withEndIn(1, TimeUnit.DAYS) .withSchedule(SimpleScheduleBuilder.repeatHourlyForever())); // Schedules a job which runs at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday Jobs.newInput() .withName(\"job\") .withExecutionTrigger(Jobs.newExecutionTrigger() .withSchedule(CronScheduleBuilder.cronSchedule(\"0 15 10 ? * MON-FRI\"))); Learn more about ExecutionTrigger. To optionally control the maximal concurrently level among jobs assigned to the same semaphore. With a semaphore in place, this job only commences execution, once a permit is free or gets available. If free, the job commences execution immediately at the next reasonable opportunity, unless no worker thread is available. A semaphore initialized to one allows to run jobs in a mutually exclusive manner, and a semaphore initialized to zero to run no job at all. The number of total permits available can be changed at any time, which allows to adapt the maximal concurrency level to some dynamic criteria like time of day or system load. However, a semaphore can be sealed, meaning that the number of permits cannot be changed anymore, and any attempts will be rejected. A new semaphore instance can be obtained via Jobs class. IExecutionSemaphore semaphore = Jobs.newExecutionSemaphore(5); (1) for (int i = 0; i { // doing something }, Jobs.newInput() .withName(\"job-{}\", i) .withExecutionSemaphore(semaphore)); (3) } 1 Create a new ExecutionSemaphore via Jobs class. The semaphore is initialized with 5 permits, meaning that at any given time, there are no more than 5 jobs running concurrently. 2 Schedule 100 jobs in a row. 3 Set the semaphore to limit the maximal concurrency level to 5 jobs. Learn more about ExecutionSemaphore. To associate the job with an execution hint. An execution hint is simply a marker to mark a job, and can be evaluated by filters to select jobs, e.g. to listen to job lifecycle events of some particular jobs, or to wait for some particular jobs to complete, or to cancel some particular jobs. A job may have multiple hints associated. Further, hints can be registered directly on the future via IFuture.addExecutionHint(hint), or removed via IFuture.removeExecutionHint(hint). To control how to deal with uncaught exceptions. By default, an uncaught exception is handled by ExceptionHandler bean and then propagated to the submitter, unless the submitter is not waiting for the job to complete via IFuture.awaitDoneAndGet(). This method expects two arguments: an optional exception handler, and a boolean flag indicating whether to swallow exceptions. 'Swallow' is independent of the specified exception handler, and indicates whether an exception should be propagated to the submitter, or swallowed otherwise. If running a repetitive job with swallowing set to true, the job will continue its repetitive execution upon an uncaught exception. If set to false, the execution would exit. To set the thread name of the worker thread that will execute the job. To set the maximal expiration time upon which the job must commence execution. If elapsed, the job is cancelled and does not commence execution. By default, a job never expires. For a job that executes once, the expiration is evaluated just before it commences execution. For a job with a repeating schedule, it is evaluated before every single execution. In contrast, the trigger’s end time specifies the time at which the trigger will no longer fire. However, if fired, the job may not be executed immediately at this time, which depends on whether having to compete for an execution permit first. So the end time may already have elapsed once commencing execution. In contrast, the expiration time is evaluated just before starting execution. A future represents the result of an asynchronous computation, and is returned by the job manager upon scheduling a job. The future provides functionality to await for the job to complete, or to get its computation result or exception, or to cancel its execution, and more. Learn more about job cancellation in Job cancellation. Learn more about listening for job lifecycle events in Subscribe for job lifecycle events. Learn more about awaiting the job’s completion in Awaiting job completion. Upon scheduling a job, the job transitions different states. The current state of a job can be queried from its associated IFuture. state description SCHEDULED Indicates that a job was given to the job manager for execution. REJECTED Indicates that a job was rejected for execution. This might happen if the job manager has been shutdown, or if no more worker threads are available. PENDING Indicates that a job’s execution is pending, either because scheduled with a delay, or because of being a repetitive job while waiting for the commencement of the next execution. RUNNING Indicates that a job is running. DONE Indicates that a job finished execution, either normally or because it was cancelled. Use IFuture.isCancelled() to check for cancellation. WAITING_FOR_PERMIT Indicates that a semaphore aware job is competing for a permit to become available. WAITING_FOR_BLOCKING_CONDITION Indicates that a job is blocked by a blocking condition, and is waiting for it to fall. The state 'done' does not necessarily imply that the job already finished execution. That is because a job also enters 'done' state upon cancellation, but may still continue execution. A future filter is a filter which can be passed to various methods of the job manager to select some futures. The filter must implement IFilter interface, and has a single method to accept futures of interest. Listing 7. Example of a future filter public class FutureFilter implements Predicate> { @Override public boolean test(IFuture future) { // Accept or reject the future return false; } } Scout provides you with FutureFilterBuilder class to ease building filters which match multiple criteria joined by logical 'AND' operation. Listing 8. Usage of FutureFilterBuilder Predicate> filter = Jobs.newFutureFilterBuilder() (1) .andMatchExecutionHint(\"computation\") (2) .andMatchNotState(JobState.PENDING) (3) .andAreSingleExecuting() (4) .andMatchNotFuture(IFuture.CURRENT.get()) (5) .andMatchRunContext(ClientRunContext.class) (6) .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) (7) .toFilter(); (8) 1 Returns an instance of the future filter builder 2 Specifies to match only futures associated with execution hint 'computation' 3 Specifies to match only jobs not in state pending 4 Specifies to match only single executing jobs, meaning no recurring jobs 5 Specifies to exclude the current future (if any) 6 Specifies to match only jobs running on behalf of a ClientRunContext 7 Specifies to match only jobs of the current session 8 Builds the filters to get a Filter instance Fore more information, refer to the JavaDoc of FutureFilterBuilder. A job event filter is a filter which can be given to job manager to subscribe for job lifecycle events. The filter must implement IFilter interface, and has a single method to accept events of interest. Listing 9. Example of an event filter public class EventFilter implements Predicate { @Override public boolean test(JobEvent event) { // Accept or reject the event return false; } } Scout provides you with JobEventFilterBuilder class to ease building filters which match multiple criteria joined by logical 'AND' operation. Listing 10. Usage of JobEventFilterBuilder Predicate filter = Jobs.newEventFilterBuilder() (1) .andMatchEventType(JobEventType.JOB_STATE_CHANGED) (2) .andMatchState(JobState.RUNNING) (3) .andMatch(new SessionJobEventFilter(ISession.CURRENT.get())) (4) .andMatchExecutionHint(\"computation\") (5) .toFilter(); (6) 1 Returns an instance of the job event filter builder 2 Specifies to match all events representing a job state change 3 Specifies to match only events for jobs which transitioned into running state 4 Specifies to match only events for jobs of the current session 5 Specifies to match only events for jobs which are associated with the execution hint 'computation' 6 Builds the filters to get a Filter instance Fore more information, refer to the JavaDoc of JobEventFilterBuilder. A job can be cancelled in two ways, either directly via its IFuture, or via job manager. Both expect you to provide a boolean flag indicating whether to interrupt the executing working thread. Upon cancellation, the job immediately enters 'done' state. Learn more about Job states. If cancelling via job manager, a future filter must be given to select the jobs to be cancelled. Learn more about Future filter The cancellation attempt will be ignored if the job has already completed or was cancelled. If not running yet, the job will never run. If the job has already started, then the interruptIfRunning parameter determines whether the thread executing the job should be interrupted in an attempt to stop the job. In the following some examples: Listing 11. Cancel a job via its future // Schedule a job IFuture future = Jobs.schedule(new Work(), Jobs.newInput()); // Cancel the job via its future future.cancel(false); Listing 12. Cancel multiple jobs via job manager Jobs.getJobManager().cancel(Jobs.newFutureFilterBuilder() .andMatchFuture(future1, future2, future3) .toFilter(), false); Listing 13. Cancel multiple jobs which match a specific execution hint and the current session Jobs.getJobManager().cancel(Jobs.newFutureFilterBuilder() .andMatchExecutionHint(\"computation\") .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), false); A job can query its current cancellation status via RunMonitor.CURRENT.get().isCancelled(). If doing some long-running operations, it is recommended for the job to regularly check for cancellation. A job which is scheduled to run on a copy of the submitting RunContext, it gets also cancelled once the RunMonitor of that context gets cancelled. Sometimes it is useful to register for some job lifecycle events. The following event types can be subscribed for: state description JOB_STATE_CHANGED Signals that a job transitioned to a new JobState, e.g. form JobState.SCHEDULED to JobState.RUNNING. JOB_EXECUTION_HINT_ADDED Signals that an execution hint was added to a job. JOB_EXECUTION_HINT_REMOVED Signals that an execution hint was removed from a job. JOB_MANAGER_SHUTDOWN Signals that the job manager was shutdown. The listener is registered via job manager as following: Listing 14. Subscribe for global job events Jobs.getJobManager().addListener(Jobs.newEventFilterBuilder() (1) .andMatchEventType(JobEventType.JOB_STATE_CHANGED) .andMatchState(JobState.RUNNING) .andMatch(new SessionJobEventFilter(ISession.CURRENT.get())) .toFilter(), event -> { IFuture future = event.getData().getFuture(); (2) System.out.println(\"Job commences execution: \" + future.getJobInput().getName()); }); 1 Subscribe for all events related to jobs just about to commence execution, and which belong to the current session 2 Get the future this event was fired for If interested in only events of a single future, the listener can be registered directly on the future. Listing 15. Subscribe for local job events future.addListener(Jobs.newEventFilterBuilder() .andMatchEventType(JobEventType.JOB_STATE_CHANGED) .andMatchState(JobState.RUNNING) .toFilter(), event -> System.out.println(\"Job commences execution\")); A job’s completion can be either awaited on its IFuture, or via job manager - the first optionally allows to consume the job’s computation result, whereas the second allows multiple futures to be awaited for. When awaiting futures, the definition of 'done' and 'finished' state should be understood - 'done' means that the future completed either normally, or was cancelled. But, if cancelled while running, the job may still continue its execution, whereas a job which not commenced execution yet, will never do so. The latter typically applies for jobs scheduled with a delay. However, 'finished' state differs from 'done' state insofar as a cancelled, currently running job enters 'finished' state only upon its actual completion. Otherwise, if not cancelled, or cancelled before executing, it is equivalent to 'done' state. In most situations, it is sufficient to await for the future’s done state, especially because a cancelled job cannot return a result to the submitter anyway. Besides of some overloaded methods, IFuture basically provides two methods to wait for a future to enter 'done' state, namely awaitDone and awaitDoneAndGet, with the difference that the latter additionally returns the job’s result or exception. If the future is already done, those methods will return immediately. For both methods, there exists an overloaded version to wait for at most a given time, which once elapsed results in a TimedOutError thrown. Further, awaitDoneAndGet allows to specify an IExceptionTranslator to control exception translation. By default, DefaultRuntimeExceptionTranslator is used, meaning that a RuntimeException is propagated as it is, whereas a checked exception would be wrapped into a PlatformException. If you require checked exceptions to be thrown as they are, use DefaultExceptionTranslator instead, or even NullExceptionTranslator to work with the raw ExecutionException as being thrown by Java Executor framework. Listing 16. Examples of how to await done state on a future IFuture future = Jobs.schedule(() -> { // doing something return \"computation result\"; }, Jobs.newInput()); // Wait until done without consuming the result future.awaitDone(); (1) future.awaitDone(10, TimeUnit.SECONDS); (2) // Wait until done and consume the result String result = future.awaitDoneAndGet(); (3) result = future.awaitDoneAndGet(10, TimeUnit.SECONDS); (4) // Wait until done, consume the result, and use a specific exception translator result = future.awaitDoneAndGet(DefaultExceptionTranslator.class); (5) result = future.awaitDoneAndGet(10, TimeUnit.SECONDS, DefaultExceptionTranslator.class); (6) 1 Waits if necessary for the job to complete, or until cancelled. This method does not throw an exception if cancelled or the computation failed, but throws ThreadInterruptedError if the current thread was interrupted while waiting. 2 Waits if necessary for at most 10 seconds for the job to complete, or until cancelled, or the timeout elapses. This method does not throw an exception if cancelled, or the computation failed, but throws TimedOutError if waiting timeout elapsed, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 3 Waits if necessary for the job to complete, and then returns its result, if available, or throws its exception according to DefaultRuntimeExceptionTranslator, or throws FutureCancelledError if cancelled, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 4 Waits if necessary for at most 10 seconds for the job to complete, and then returns its result, if available, or throws its exception according to DefaultRuntimeExceptionTranslator, or throws FutureCancelledError if cancelled, or throws TimedOutError if waiting timeout elapsed, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 5 Waits if necessary for the job to complete, and then returns its result, if available, or throws its exception according to the given DefaultExceptionTranslator, or throws FutureCancelledError if cancelled, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 6 Waits if necessary for at most the given time for the job to complete, and then returns its result, if available, or throws its exception according to the given DefaultExceptionTranslator, or throws FutureCancelledError if cancelled, or throws TimedOutError if waiting timeout elapsed, or throws ThreadInterruptedError if the current thread was interrupted while waiting. It is further possible to await asynchronously on a future to enter done state by registering a callback via whenDone method. The advantage over registering a listener is that the callback is invoked even if the future already entered done state upon registration. Listing 17. Example of when-done callback future.whenDone(event -> { // invoked upon entering done state. }, ClientRunContexts.copyCurrent()); Because invoked in another thread, this method optionally accepts a RunContext] to be applied when being invoked. Use the method awaitFinished to wait for the job to finish, meaning that the job either completed normally or by an exception, or that it will never commence execution due to a premature cancellation. To learn more about the difference between 'done' and 'finished' state, click here. Please note that this method does not return the job’s result, because by Java Future definition, a cancelled job cannot provide a result. Listing 18. Examples of how to await finished state on a future IFuture future = Jobs.schedule(() -> { // doing something return \"computation result\"; }, Jobs.newInput()); // Wait until finished future.awaitFinished(10, TimeUnit.SECONDS); Job Manager allows to await for multiple futures at once. The filter to be provided limits the futures to await for. This method requires you to provide a maximal time to wait. Filters can be plugged by using logical filters like AndFilter or OrFilter, or negated by enclosing a filter in NotFilter. Also see Future filter to create a filter to match multiple criteria joined by logical 'AND' operation. Listing 19. Examples of how to await done state of multiple futures // Wait for some futures Jobs.getJobManager().awaitDone(Jobs.newFutureFilterBuilder() (1) .andMatchFuture(future1, future2, future3) .toFilter(), 1, TimeUnit.MINUTES); // Wait for all futures marked as 'reporting' jobs of the current session Jobs.getJobManager().awaitDone(Jobs.newFutureFilterBuilder() (2) .andMatchExecutionHint(\"reporting\") .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), 1, TimeUnit.MINUTES); 1 Waits if necessary for at most 1 minute for all three futures to complete, or until cancelled, or the timeout elapses. 2 Waits if necessary for at most 1 minute until all jobs marked as 'reporting' jobs of the current session complete, or until cancelled, or the timeout elapses. Use the method awaitFinished to wait for multiple jobs to finish, meaning that the jobs either completed normally or by an exception, or that they will never commence execution due to a premature cancellation. To learn more about the difference between 'done' and 'finished' state, click here. Listing 20. Examples of how to await finish state of multiple futures // Wait for some futures Jobs.getJobManager().awaitFinished(Jobs.newFutureFilterBuilder() (1) .andMatchFuture(future1, future2, future3) .toFilter(), 1, TimeUnit.MINUTES); // Wait for all futures marked as 'reporting' jobs of the current session Jobs.getJobManager().awaitFinished(Jobs.newFutureFilterBuilder() (2) .andMatchExecutionHint(\"reporting\") .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), 1, TimeUnit.MINUTES); 1 Waits if necessary for at most 1 minute for all three futures to finish, or until cancelled, or the timeout elapses. 2 Waits if necessary for at most 1 minute until all jobs marked as 'reporting' jobs of the current session finish, or until cancelled, or the timeout elapses. If a job throws an exception, that exception is handled by ExceptionHandler, and propagated to the submitter. However, the exception is only propagated if having a waiting submitter. Also, an uncaught exception causes repetitive jobs to terminate. This default behavior as described can be changed via JobInput.withExceptionHandling(..). A blocking condition allows a thread to wait for a condition to become true. That is similar to the Java Object’s 'wait/notify' mechanism, but with some additional functionality regarding semaphore aware jobs. If a semaphore aware job enters a blocking condition, it releases ownership of the permit, which allows another job of that same semaphore to commence execution. Upon the condition becomes true, the job then must compete for a permit anew. A condition can be used across multiple threads to wait for the same condition. Also, a condition is reusable upon invalidation. And finally, a condition can be used even if not running within a job. A blocking condition is often used by model jobs to wait for something to happen, but to allow another model job to run while waiting. A typical use case would be to wait for a MessageBox to be closed. You are running in a semaphore aware job and require to do some long-running operation. During that time you do not require to be the permit owner. A simple but wrong approach would be the following: // Schedule a long running operation. IFuture future = Jobs.schedule(new LongRunningOperation(), Jobs.newInput()); // Wait until done. future.awaitDone(); The problem with this approach is, that you still are the permit owner while waiting, meaning that you possibly prevent other jobs from running. Instead, you could use a blocking condition for that to achieve: // Create a blocking condition. final IBlockingCondition operationCompleted = Jobs.newBlockingCondition(true); // Schedule a long running operation. IFuture future = Jobs.schedule(new LongRunningOperation(), Jobs.newInput()); // Register done callback to unblock the condition. future.whenDone(event -> { // Let the waiting job re-acquire a permit and continue execution. operationCompleted.setBlocking(false); }, null); // Wait until done. Thereby, the permit of the current job is released for the time while waiting. operationCompleted.waitFor(); Represents a fair counting semaphore used in Job API to control the maximal number of jobs running concurrently. Jobs which are assigned to the same semaphore run concurrently until they reach the maximal concurrency level defined for that semaphore. Subsequent tasks then wait in the queue until a permit becomes available. A semaphore initialized to one allows to run jobs in a mutually exclusive manner, and a semaphore initialized to zero to run no job at all. The number of total permits available can be changed at any time, which allows to adapt the maximal concurrency level to some dynamic criteria like time of day or system load. However, once calling seal(), the number of permits cannot be changed anymore, and any attempts will result in an AssertionException. By default, a semaphore is unbounded. Component that defines the schedule upon which a job will commence execution. A trigger can be as simple as a 'one-shot' execution at some specific point in time in the future, or represent a schedule which executes a job on a repeated basis. The latter can be configured to run infinitely, or to end at a specific point in time. It is further possible to define rather complex triggers, like to execute a job every second Friday at noon, but with the exclusion of all the business’s holidays. See the various schedule builders provided by Quartz Scheduler: SimpleScheduleBuilder, CronScheduleBuilder, CalendarIntervalScheduleBuilder, DailyTimeIntervalScheduleBuilder. The most powerful builder is CronScheduleBuilder. Cron is a UNIX tool with powerful and proven scheduling capabilities. For more information, see http://www.quartz-scheduler.org. Additionally, Scout provides you with FixedDelayScheduleBuilder to run a job with a fixed delay between the termination of one execution and the commencement of the next execution. Use the static factory method 'Jobs.newExecutionTrigger()' to get an instance. Regardless of the schedule used, job manager guarantees no concurrent execution of the same job. That may happen, if using a repeated schedule with the job not terminated its last execution yet, but the schedule’s trigger would like to fire for the next execution already. Such a situation is called a misfiring. The action to be taken upon a misfiring is configurable via the schedule’s misfiring policy. A policy can be to run the job immediately upon termination of the previous execution, or to just ignore that missed firing. See the JavaDoc of the schedule for more information. Upon stopping the platform, the job manager will also be shutdown.If having a IPlatformListener to perform some cleanup work, and which requires the job manager to be still functional, that listener must be annotated with an @Order less than IJobManager.DESTROY_ORDER, which is 5'900. If not specifying an @Order explicitly, the listener will have the default order of 5, meaning being invoked before job manager shutdown anyway. Model jobs exist client side only, and are used to interact with the Scout client model to read and write model values in a serial manner per session.That enables no synchronization to be used when interacting with the model. By definition, a model job requires to be run on behalf of a ClientRunContext with a IClientSession set, and must have the session’s model job semaphore set as its ExecutionSemaphore.That causes all such jobs to be run in sequence in the model thread.At any given time, there is only one model thread active per client session. The class ModelJobs is a helper class, and is for convenience purpose to facilitate the creation of model job related artifacts, and to schedule model jobs. Listing 21. Running work in model thread (1) ModelJobs.schedule(() -> { // doing something in model thread }, ModelJobs.newInput(ClientRunContexts.copyCurrent()) (2) .withName(\"Doing something in model thread\")); 1 Schedules the work to be executed in the model thread 2 Creates the JobInput to become a model job, meaning with the session’s model job semaphore set For model jobs, it is also allowed to run according to a Quartz schedule plan, or to be executed with a delay. Then the model permit is acquired just before each execution, and not upon being scheduled. Furthermore, the class ModelJobs provides some useful static methods: // Returns true if the current thread represents the model thread for the current client session. At any given time, there is only one model thread active per client session. ModelJobs.isModelThread(); // Returns true if the given Future belongs to a model job. ModelJobs.isModelJob(IFuture.CURRENT.get()); // Returns a builder to create a filter for future objects representing a model job. ModelJobs.newFutureFilterBuilder(); // Returns a builder to create a filter for JobEvent objects originating from model jobs. ModelJobs.newEventFilterBuilder(); // Instructs the job manager that the current model job is willing to temporarily yield its current model job permit. It is rarely appropriate to use this method. It may be useful for debugging or testing purposes. ModelJobs.yield(); Job manager can be configured with properties starting with scout.jobmanager. See Scout Config Properties. Job manager is implemented as an application scoped bean, and which can be replaced. To do so, create a class which extends JobManager, and annotate it with @Replace annotation. Most likely, you like to use the EE container’s ThreadPoolExecutor, or to contribute some behavior to the callable chain which finally executes the job. To change the executor, overwrite createExecutor method and return the executor of your choice. But do not forget to register a rejection handler to reject futures upon rejection. Also, overwrite shutdownExecutor to not shut down the container’s executor. To contribute some behavior to the callable chain, overwrite the method interceptCallableChain and contribute your decorator or interceptor. Refer to the method’s JavaDoc for more information. This sections contains some common scheduling examples. Listing 22. Schedule a one-shot job Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running once\") .withRunContext(ClientRunContexts.copyCurrent())); Listing 23. Schedule a job with a delay Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running in 10 seconds\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(10, TimeUnit.SECONDS))); // delay of 10 seconds Listing 24. Schedule a repetitive job at a fixed rate Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running every minute\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(SimpleScheduleBuilder.simpleSchedule() (2) .withIntervalInMinutes(1) (3) .repeatForever()))); (4) 1 Configure to fire in 1 minute for the first time 2 Use Quartz simple schedule to achieve fixed-rate execution 3 Repetitively fire every minute 4 Repeat forever Listing 25. Schedule a repetitive job which runs 60 times at every minute Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running every minute for total 60 times\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(SimpleScheduleBuilder.simpleSchedule() (2) .withIntervalInMinutes(1) (3) .withRepeatCount(59)))); (4) 1 Configure to fire in 1 minute for the first time 2 Use Quartz simple schedule to achieve fixed-rate execution 3 Repetitively fire every minute 4 Repeat 59 times, plus the initial execution Listing 26. Schedule a repetitive job at a fixed delay Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running forever with a delay of 1 minute between the termination of the previous and the next execution\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(FixedDelayScheduleBuilder.repeatForever(1, TimeUnit.MINUTES)))); (2) 1 Configure to fire in 1 minute for the first time 2 Use fixed delay schedule Listing 27. Schedule a repetitive job which runs 60 times, but waits 1 minute between the termination of the previous and the commencement of the next execution Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running 60 times with a delay of 1 minute between the termination of the previous and the next execution\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(FixedDelayScheduleBuilder.repeatForTotalCount(60, 1, TimeUnit.MINUTES)))); (2) 1 Configure to fire in 1 minute for the first time 2 Use fixed delay schedule Listing 28. Running at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withSchedule(CronScheduleBuilder.cronSchedule(\"0 15 10 ? * MON-FRI\")))); (1) 1 Cron format: [second] [minute] [hour] [day_of_month] [month] [day_of_week] [year]? Listing 29. Running every minute starting at 14:00 and ending at 14:05, every day Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running every minute starting at 14:00 and ending at 14:05, every day\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withSchedule(CronScheduleBuilder.cronSchedule(\"0 0-5 14 * * ?\")))); (1) 1 Cron format: [second] [minute] [hour] [day_of_month] [month] [day_of_week] [year]? Listing 30. Limit the maximal concurrency level among jobs IExecutionSemaphore semaphore = Jobs.newExecutionSemaphore(5); (1) for (int i = 0; i { // doing something }, Jobs.newInput() .withName(\"job-{}\", i) .withExecutionSemaphore(semaphore)); (2) } 1 Create the execution semaphore initialized with 5 permits 2 Set the execution semaphore to the job subject for limited concurrency Listing 31. Cancel all jobs of the current session Jobs.getJobManager().cancel(Jobs.newFutureFilterBuilder() .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), true); Listing 32. Query for cancellation public class CancellableWork implements IRunnable { @Override public void run() throws Exception { // do first chunk of operations if (RunMonitor.CURRENT.get().isCancelled()) { return; } // do next chunk of operations if (RunMonitor.CURRENT.get().isCancelled()) { return; } // do next chunk of operations } } Listing 33. Release current semaphore permit while executing // Create a blocking condition. final IBlockingCondition operationCompleted = Jobs.newBlockingCondition(true); // Schedule a long running operation. IFuture future = Jobs.schedule(new LongRunningOperation(), Jobs.newInput()); // Register done callback to unblock the condition. future.whenDone(event -> { // Let the waiting job re-acquire a permit and continue execution. operationCompleted.setBlocking(false); }, null); // Wait until done. Thereby, the permit of the current job is released for the time while waiting. operationCompleted.waitFor();","title":"JobManager","component":"scout-docs","version":"22","name":"job-manager","url":"/scout-docs/22/technical-guide/common-concepts/job-manager.html","titles":[{"text":"Functionality","hash":"functionality","id":1},{"text":"Job","hash":"job","id":2},{"text":"Scheduling a Job","hash":"scheduling-a-job","id":3},{"text":"JobInput","hash":"jobinput","id":4},{"text":"JobInput.withName","hash":"jobinput-withname","id":5},{"text":"JobInput.withRunContext","hash":"jobinput-withruncontext","id":6},{"text":"JobInput.withExecutionTrigger","hash":"jobinput-withexecutiontrigger","id":7},{"text":"JobInput.withExecutionSemaphore","hash":"jobinput-withexecutionsemaphore","id":8},{"text":"JobInput.withExecutionHint","hash":"jobinput-withexecutionhint","id":9},{"text":"JobInput.withExceptionHandling","hash":"jobinput-withexceptionhandling","id":10},{"text":"JobInput.withThreadName","hash":"jobinput-withthreadname","id":11},{"text":"JobInput.withExpirationTime","hash":"jobinput-withexpirationtime","id":12},{"text":"IFuture","hash":"ifuture","id":13},{"text":"Job states","hash":"job-states","id":14},{"text":"Future filter","hash":"future-filter","id":15},{"text":"Event filter","hash":"event-filter","id":16},{"text":"Job cancellation","hash":"job-cancellation","id":17},{"text":"Subscribe for job lifecycle events","hash":"subscribe-for-job-lifecycle-events","id":18},{"text":"Awaiting job completion","hash":"awaiting-job-completion","id":19},{"text":"Difference between 'done' and 'finished' state","hash":"difference-between-done-and-finished-state","id":20},{"text":"Awaiting a single future’s 'done' state","hash":"awaiting-a-single-futures-done-state","id":21},{"text":"Awaiting a single future’s 'finished' state","hash":"awaiting-a-single-futures-finished-state","id":22},{"text":"Awaiting multiple future’s 'done' state","hash":"awaiting-multiple-futures-done-state","id":23},{"text":"Awaiting multiple future’s 'finished' state","hash":"awaiting-multiple-futures-finished-state","id":24},{"text":"Uncaught job exceptions","hash":"uncaught-job-exceptions","id":25},{"text":"Blocking condition","hash":"blocking-condition","id":26},{"text":"Example of a blocking condition","hash":"example-of-a-blocking-condition","id":27},{"text":"ExecutionSemaphore","hash":"executionsemaphore","id":28},{"text":"ExecutionTrigger","hash":"executiontrigger","id":29},{"text":"Misfiring","hash":"misfiring","id":30},{"text":"Stopping the platform","hash":"stopping-the-platform","id":31},{"text":"Model Jobs","hash":"model-jobs","id":32},{"text":"Configuration","hash":"configuration","id":33},{"text":"Extending job manager","hash":"extending-job-manager","id":34},{"text":"Scheduling examples","hash":"scheduling-examples","id":35}]},"40":{"id":40,"text":"This document is referring to a past Scout release. Please click here for the recent version. Scout contains a platform which provides basic functionality required by many software applications. The following list gives some examples for which tasks the platform is responsible for: Application Lifecycle Management Object Instance Management (Bean Management) Configuration Management Application Inventory The lifecycle of a Scout application is controlled by implementations of org.eclipse.scout.rt.platform.IPlatform. This interface contains methods to start and stop the application and to retrieve the Bean Manager associated with this application. The class org.eclipse.scout.rt.platform.Platform provides access to the current platform instance. On first access the platform is automatically created and started. During its startup, the platform transitions through several states. Depending on the state of the platform some components may already be initialized and ready to use while others are not available yet. See enum org.eclipse.scout.rt.platform.IPlatform.State for a description of each state and what may be used in a certain state. To participate in the application startup or shutdown a platform listener can be created. For this a class implementing org.eclipse.scout.rt.platform.IPlatformListener must be created. The listener is automatically a bean and must therefore not be registered anywhere. See Bean Manager to learn more about bean management in Scout and how the listener becomes a bean. As soon as the state of the platform changes the listener will be notified. Listing 1. A listener that will do some work as soon as the platform has been started. public class MyListener implements IPlatformListener { @Override public void stateChanged(PlatformEvent event) { if (event.getState() == State.PlatformStarted) { // do some work as soon as the platform has been started completely } } } As platform listeners may run as part of the startup or shutdown not the full Scout platform may be available. Depending on the state some tasks cannot be performed or some platform models are not available yet! Scout applications use an inventory containing the classes available together with some meta data about them. This allows finding classes available on the classpath by certain criteria: All subclasses of a certain base class (also known as type hierarchy) All classes having a specific annotation. This class inventory can be accessed as described in listing Listing 2. Listing 2. Access the Scout class inventory. IClassInventory classInventory = ClassInventory.get(); // get all classes below IService Set services = classInventory.getAllKnownSubClasses(IService.class); // get all classes having a Bean annotation (directly on them self). Set classesHavingBeanAnnot = classInventory.getKnownAnnotatedTypes(Bean.class); In its static initializer, the ClassInventory collects classes in projects containing a resource called META-INF/scout.xml. Scanning all classes would be unnecessarily slow and consume too much memory. The file scout.xml is just an empty xml file. Scout itself also includes scout.xml files in all its projects. The format XML was chosen to allow adding exclusions in large projects, but this feature is not implemented right now. It is recommended to add an emtpy scout.xml file into the META-INF folder of your projects, such that the classes are available in the 'ClassInventory'. Scout uses Jandex [1] to build the class inventory. The meta data to find classes can be pre-computed during build time into an index file describing the contents of the jar file. See the jandex project for details. The Scout bean manager is a dynamic registry for beans. Beans are normal Java classes usually having some meta data describing the characteristics of the class. The bean manager can be changed at any time. This means beans can be registered or unregistered while the application is running. For this the bean manager contains methods to register and unregister beans. Furthermore methods to retrieve beans are provided. The next sections describe how beans are registered, the different meta data of beans, how instances are created, how they can be retrieved and finally how the bean decoration works. Usually beans are registered during application startup. The application startup can be intercepted using platform listeners as described in Platform Listener. Listing 3. A listener that registers a bean (direct class or with meta data). public class RegisterBeansListener implements IPlatformListener { @Override public void stateChanged(PlatformEvent event) { if (event.getState() == State.BeanManagerPrepared) { // register the class directly BEANS.getBeanManager().registerClass(BeanSingletonClass.class); // Or register with meta information BeanMetaData beanData = new BeanMetaData(BeanClass.class).withApplicationScoped(true); BEANS.getBeanManager().registerBean(beanData); } } } There is also a predefined bean registration built into the Scout runtime. This automatically registers all classes having an org.eclipse.scout.rt.platform.@Bean annotation. Therefore it is usually sufficient to only annotate a class with @Bean to have it available in the bean manager as shown in listing Listing 4. Listing 4. A normal bean @Bean public class BeanClass { } As the @Bean annotation is an java.lang.annotation.@Inherited annotation, this automatically registers all child classes too. This means that also interfaces may be @Bean annotated making all implementations automatically available in the bean manager! Furthermore other annotations may be @Bean annotated making all classes holding these annotations automatically to beans as well. If you inherit a @Bean annotation from one of you super types but don’t want to be automatically registered into the bean manger you can use the org.eclipse.scout.rt.platform.@IgnoreBean annotation. Those classes will then be skipped. There is a built in annotation org.eclipse.scout.rt.shared.@TunnelToServer. Interfaces marked with this annotation are called on the server. The server itself ignores this annotation. To achieve this a bean is registered on client side for each of those interfaces. Because the platform cannot directly create an instance for these beans a specific producer is registered which creates a proxy that delegates the call to the server. Please note that this annotation is not inherited. Therefore if an interface extends a tunnel-to-server interface and the new methods of this interface should be called on the server as well the new child interface has to repeat the annotation! The proxy is created only once for a specific interface bean. The most important meta data of a bean is the scope. It describes how many instances of a bean can exist in a single application. There are two different possibilities: Unlimited instances: Each bean retrieval results in a new instance of the bean. This is the default. Only one instance: There can only be one instance by Scout platform. From an application point of view this can be seen as singleton. The instance is created on first use and each subsequent retrieval of the bean results in this same cached instance. As like all bean meta data this characteristic can be provided in two different ways: With a Java annotation on the bean class as shown in the listing Listing 5. With bean meta data as shown in listing Listing 3. Listing 5. An application scoped bean using annotations @ApplicationScoped public class BeanSingletonClass { } So the Java annotation org.eclipse.scout.rt.platform.@ApplicationScoped describes a bean having singleton characteristics. Also @ApplicationScoped is an @Inherited annotation. Therefore all child classes automatically inherit this characteristic like with the @Bean annotation. It is not only possible to influence the number of instances to be created (see Bean Scopes), but also to create beans eagerly, execute methods after creation (like constructors) or to delegate the bean creation completely. These topics are described in the next sections. By default beans are created on each request. An exception are the beans marked to be application scoped (as shown in Bean Scopes). Those beans are only created on first request (lazy). This means if a bean is never requested while the application is running, there will never be an instance of this class. But sometimes it is necessary to create beans already at the application startup (eager). This can be done by marking the bean as org.eclipse.scout.rt.platform.@CreateImmediately. All classes holding this annotation must also be marked as @ApplicationScoped! These beans will then be created as part of the application startup. Beans must have empty constructors so that the bean manager can create instances. But furthermore it is possible to mark methods with the javax.annotation.@PostConstruct annotation. Those methods must have no parameters and will be called after instances have been created. When querying the bean manager for an application scoped bean, it will always return the same instance. However, the constructor of an application scoped bean may run more than once, whereas a method annotated with @PostConstruct in an application scoped been is guaranteed to run exactly once. To retrieve a bean the class org.eclipse.scout.rt.platform.BEANS should be used. This class provides (amongst others) the following methods: Listing 6. How to get beans. BeanSingletonClass bean = BEANS.get(BeanSingletonClass.class); BeanClass beanOrNull = BEANS.opt(BeanClass.class); The get() method throws an exception if there is not a single bean result. So if no bean can be found or if multiple equivalent bean candidates are available this method fails! The opt() method requires a single or no bean result. It fails if multiple equivalent bean candidates are available and returns null if no one can be found. The all() method returns all beans in the correct order. The list may also contain no beans at all. There are now two more annotations that have an effect on which beans are returned if multiple beans match a certain class. Consider the following example bean hierarchy: Figure 1. A sample bean hierarchy. In this situation 4 bean candidates are available: MyServiceImpl, MyServiceMod, MySpecialVersion and AnotherVersion. But which one is returned by BEANS.get(IMyService.class)? Or by BEANS.get(MySpecialVersion.class)? This can be influenced with the org.eclipse.scout.rt.platform.@Order and org.eclipse.scout.rt.platform.@Replace annotations. The next sections describe the idea behind these annotations and gives some examples. This annotation works exactly the same as in the Scout user interface where it brings classes into an order. It allows to assign a double value to a class. All beans of a certain type are sorted according to this value in ascending order. This means a low order value is equivalent with a low position in a list (come first). Please note that the @Order annotation is not inherited so that each bean must declare its own value where it fits in. The @Order annotation value may be inherited in case it replaces. See the next section for details. If a bean does not declare an order value, the default of 5000 is used. Scout itself uses orders from 4001 to 5999. So for user applications the value 4000 and below can be used to declare more important beans. For testing bean mocks the value -10'000 can be used which then usually comes before each normal Scout or application bean. The @Replace annotation can be set to beans having another bean as super class. This means that the original bean (the super class) is no longer available in the Scout bean manager and only the new child class is returned. If the replacing bean (the child class) has no own @Order annotation defined but the replaced bean (the super class) has an @Order value, this order is inherited to the child. This is the only special case in which the @Order annotation value is inherited! The next examples use the bean situation as shown in figure Figure 1. In this situation the bean manager actually contains 3 beans: AnotherVersion with @Order of 4000. This bean has no own order and would therefore get the default order of 5000. But because it is replacing another bean it inherits its order. MyServiceMod with @Order of 4500. This bean declares its own order. MyServiceImpl with @Order of 5000. This bean gets the default order of 5000 because it does not declare an order. The bean MySpecialVersion is not part of the bean manager because it has been replaced by AnotherVersion. BEANS.get(IMyService.class): Returns AnotherVersion instance. The result cannot be an exact match because the requested type is an interface. Therefore of all candidates there is one single candidate with lowest order (comes first). BEANS.get(MyServiceImpl.class): Returns MyServiceImpl because there is an exact match available. BEANS.get(MySpecialVersion.class): Returns AnotherVersion. The result cannot be an exact match because there is no exact bean with this class in the bean manager (MySpecialVersion has been replaced). Therefore only AnotherVersion remains as candidate in the hierarchy below MySpecialVersion. BEANS.get(MyServiceMod.class): Returns MyServiceMod because there is no other candidate. BEANS.all(IMyService.class): Returns a list with all beans sorted by @Order. This results in: AnotherVersion, MyServiceMod, MyServiceImpl. If MyServiceMod would have no @Order annotation, there would be two bean candidates available with the same default order of 5000: MyServiceImpl and MyServiceMod. In this case a call to BEANS.get(IMyService.class) would fail because there are several equivalent candidates. Equivalent candidates means they have the same @Order value and the system cannot decide which one is the right one. Bean decorations allow to wrap interfaces with a proxy to intercept each method call to the interface of a bean and apply some custom logic. For this a IBeanDecorationFactory has to be implemented. This is one single factory instance for the entire application. It decides which decorators are created for a bean request. The factory is asked for decorators on every bean retrieval. This allows to write bean decoration factories depending on dynamic conditions. As bean decoration factories are beans themselves, it is sufficient to create an implementation of org.eclipse.scout.rt.platform.IBeanDecorationFactory and to ensure this implementation is used (see Bean Retrieval). This factory receives the bean to be decorated and the originally requested bean class to decide which decorators it should create. In case no decoration is required the factory may return null. Then the original bean is used without decorations. Decorations are only supported if the class obtained by the bean manager (e.g. by using BEANS.get()) is an interface! It is best practice to mark all annotations that are interpreted in the bean decoration factory with the annotation org.eclipse.scout.rt.platform.@BeanInvocationHint. However this annotation has no effect at runtime and is only for documentation reasons. The sample in listing Listing 7 wraps each call to the server with a profiler decorator that measures how long a server call takes. Listing 7. Bean decoration example. @Replace public class ProfilerDecorationFactory extends SimpleBeanDecorationFactory { @Override public IBeanDecorator decorate(IBean bean, Class queryType) { return new BackendCallProfilerDecorator<>(super.decorate(bean, queryType)); } } public class BackendCallProfilerDecorator implements IBeanDecorator { private final IBeanDecorator m_inner; public BackendCallProfilerDecorator(IBeanDecorator inner) { m_inner = inner; } @Override public Object invoke(IBeanInvocationContext context) { final String className; if (context.getTargetObject() == null) { className = context.getTargetMethod().getDeclaringClass().getSimpleName(); } else { className = context.getTargetObject().getClass().getSimpleName(); } String timerName = className + '.' + context.getTargetMethod().getName(); TuningUtility.startTimer(); try { if (m_inner != null) { // delegate to the next decorator in the chain return m_inner.invoke(context); } // forward to real bean return context.proceed(); } finally { TuningUtility.stopTimer(timerName); } } } Application scoped beans can declare methods annotated with javax.annotation.@PreDestroy. These methods will be called when the Scout platform is stopping. The methods may have any visibility modifier but must not be static and must not declare any parameters. If such a pre-destroy method throws an exception, the platform will continue to call all other pre-destroy methods (even methods on the same bean). Please note that pre-destroy methods are only called for application-scoped beans that already have created their instance. Pre-destroy methods inherited from super classes are always called after the ones from the class itself. Methods that are overridden are only called on the leaf class. Private methods are always called (because they cannot be overridden). The order in which multiple methods in the same declaring class are called is undefined. Applications usually require some kind of configuration mechanism to use the same binaries in a different environment or situation. Scout applications provide a configuration mechanism using properties files [2]. For each property a class cares about default values and value validation. These classes share the org.eclipse.scout.rt.platform.config.IConfigProperty interface and are normal application scoped beans providing access to a specific configuration value as shown in listing Listing 8. If the property class is an inner class it has to be defined as a static class with the static modifier. Listing 8. A configuration property of type Long. import org.eclipse.scout.rt.platform.config.AbstractLongConfigProperty; /** * Property of data type {@link Long} with key 'my.custom.timeout' and default value '3600L'. */ public class MyCustomTimeoutProperty extends AbstractLongConfigProperty { @Override public String getKey() { return \"my.custom.timeout\"; (1) } @Override public String description() { return \"Description of the custom timeout property. The default value is 3600.\"; } @Override public Long getDefaultValue() { return 3600L; (2) } } 1 key 2 default value To read the configured value you can use the CONFIG class as demonstrated in Listing 9. Listing 9. Read the configured value in your code. Long value = CONFIG.getPropertyValue(MyCustomTimeoutProperty.class); The given property key is searched in the following environments: In the system properties (java.lang.System.getProperty(String)). In the environment variables of the system (java.lang.System.getenv(String)). In the properties file. The properties file can be a file on the local filesystem where the system property with key config.properties holds an absolute URL to the file or a file on the classpath with path /config.properties (recommended). If none of the above is found, the default value of the property is applied. Supported formats are simple key-value pairs, list values and map values. For more details about the format please refer to the JavaDoc of the org.eclipse.scout.rt.platform.config.PropertiesHelper class. Since the environment variable names are more restrictive in many shells and systems than the property names in Java, overriding a property containing a dot/period (.) with an environment variable would not be possible. To still allow overriding of such properties, the following lookup rules are applied in-order to find a matching environment variable: An exact match of your property key (my.property) A match where periods are replaced by underscores (my_property) An uppercase match of your property key (MY.PROPERTY) An uppercase match where periods are replaced by underscores (MY_PROPERTY) When it comes to working with mapped config properties (subclasses of org.eclipse.scout.rt.platform.config.AbstractMapConfigProperty), there’s also some special mechanic to consider in terms of providing or overriding property map values using environment variables. Since it is not possible to reliably retrieve the original map key from an environment variable (again, due to the restrictions mentioned above), property map values may be supplied using environment variables whose value is a JSON object string: my_map_property={\"map-key-01\": \"value-01\", \"map-key-02\": \"value-02\", \"map-key-03\": null} The following rules apply, when such environment variables are read: * property map key/value pairs are added from the JSON object to the property map, overriding keys already being defined by sources of lower precedence (e.g. config.properties file) * a JSON object attribute value of \"null\" will remove a key potentially being defined by sources of lower precedence The parsing of JSON object strings is abstracted away using the new org.eclipse.scout.rt.platform.config.IJsonPropertyReader interface as parsing JSON strings is not implemented in the platform itself. However, there is a default implementation of this interface available in org.eclipse.scout.rt.dataobject which uses the org.eclipse.scout.rt.platform.dataobject.IDataObjectMapper feature to deserialize the JSON string into a Java Map. In order to use this, an implementation of the IDataObjectMapper interface is also required (e.g. org.eclipse.scout.rt.jackson.dataobject.JacksonDataObjectMapper). So in case you want to use this feature, you have to define * org.eclipse.scout.rt:org.eclipse.scout.rt.dataobject * org.eclipse.scout.rt:org.eclipse.scout.rt.jackson as new dependencies of your application aggregator module (if they are not already present). A properties file may import other config files from the classpath or any other absolute URL. This is done using the special key import. It can be a single value or a list or map (e.g. import[anyKey or number]: import[0]=classpath:myConfigs/other.properties import[1]=file:/C:/path/to/my/settings.properties import[2]=file:${catalina.base}/conf/db_connection.properties Scout already has some config properties. For a list and the corresponding documentation see Scout Config Properties. Because the property classes are managed by the bean manager, you can use all the mechanisms to change the behavior (@Replace in particular). Listing 10 demonstrates how you can use the replace annotation to change the existing ApplicationNameProperty class. The value is no longer fetched via the config mechanism, because the getValue(String) method is overridden. In this case a fixed value is returned. Listing 10. Property class providing a constant value. import org.eclipse.scout.rt.platform.IgnoreBean; import org.eclipse.scout.rt.platform.Replace; import org.eclipse.scout.rt.platform.config.PlatformConfigProperties.ApplicationNameProperty; @Replace public class ApplicationNameConstant extends ApplicationNameProperty { @Override protected String readFromSource(String namespace) { return \"Contacts Application\"; } } The next example presented in Listing 11 uses the same idea. In this case, the getKey() method is overridden to read the value from an other key as demonstrated is the Listing 12. Listing 11. Property class reading the value from an other key. import org.eclipse.scout.rt.platform.IgnoreBean; import org.eclipse.scout.rt.platform.Replace; import org.eclipse.scout.rt.platform.config.PlatformConfigProperties.ApplicationNameProperty; @Replace public class ApplicationNamePropertyRedirection extends ApplicationNameProperty { @Override public String getKey() { return \"myproject.applicationName\"; } } Listing 12. Read the configured value in your code. ### Redirected Application Config myproject.applicationName=My Project Application During the Platform startup all classes implementing the interface org.eclipse.scout.rt.platform.config.IConfigurationValidator are asked to validate configuration provided in the config.properties files. If there is at least one IConfigurationValidator that accepts a given key-value-pair the configuration is considered to be valid. Otherwise the platform will not start. The concrete implementation org.eclipse.scout.rt.platform.config.ConfigPropertyValidator will also check if a configured value matches the default value. In case it does an info message (warn in development mode) will be logged but the platform will still start. To minimize configuration files such entries should be removed from config.properties files. Table 1. Config Properties Key Description Data Type Kind scout.application.name The display name of the application. Used e.g. in the info form and the diagnostic views. The default value is unknown. String Config Property scout.application.version The application version as displayed to the user. Used e.g. in the info form and the diagnostic views. The default value is 0.0.0. String Config Property scout.auth.anonymousEnabled Specifies if the AnonymousAccessController is enabled. Therefore, if a security filter uses this controller no login is required. Boolean Config Property scout.auth.cookieEnabled Specifies if the CookieAccessController is enabled. Boolean Config Property scout.auth.cookieMaxAge If the CookieAccessController is enabled, specifies the maximum age in seconds for the cookie. A positive value indicates that the cookie will expire after that many seconds have passed. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted. The default value is 10 hours. Long Config Property scout.auth.cookieName If the CookieAccessController is enabled, specifies the name for the cookie. The name must conform to RFC 2109. However, vendors may provide a configuration option that allows cookie names conforming to the original Netscape Cookie Specification to be accepted. By default sso.user.id is used as cookie name. String Config Property scout.auth.cookieSessionValidateSecure Specifies if the UI server should ensure a secure cookie configuration of the webapp. If enabled the application validates that the httpOnly and Secure flags are set in the cookie configuration in the web.xml. This property should be disabled if no secure connection (https) is used to the client browser (not recommended). The default value is true. Boolean Config Property scout.auth.credentials Specifies the known credentials (username & passwords) of the org.eclipse.scout.rt.platform.security.ConfigFileCredentialVerifier. Credentials are separated by semicolon. Username and password information are separated by colon. Usernames are case-insensitive, and it is recommended that they should only consist of ASCII characters. Plain text passwords are case-sensitive. By default the password information consists of Base64 encoded salt followed by a dot followed by the Base64 encoded SHA-512 hash of the password (using UTF-16). Example: username1:base64EncodedSalt.base64EncodedPasswordHash;username2:base64EncodedSalt.base64EncodedPasswordHash To create a salt and hash tuples based on a clear text password use the org.eclipse.scout.rt.platform.security.ConfigFileCredentialVerifier.main() method that can be invoked from the command line. If scout.auth.credentialsPlaintext is set to true the password information just consists of the cleartext password. String Config Property scout.auth.credentialsPlaintext Specifies if the passwords specified in property scout.auth.credentials is plaintext (not recommended) or hashed. A value of false indicates hashed passwords which is the default. Boolean Config Property scout.auth.privateKey Specifies the Base64 encoded private key for signing requests from the UI server to the backend server. By validating the signature the server can ensure the request is trustworthy. Furthermore, the CookieAccessController uses this private key to sign the cookie. New public-private-key-pairs can be created by invoking the class org.eclipse.scout.rt.platform.security.SecurityUtility on the command line. Base64 encoded String Config Property scout.auth.publicKey Specifies the Base64 encoded public key used to validate signed requests on the backend server. The public key must match the private key stored in the property scout.auth.privateKey on the UI server. New public-private-key-pairs can be created by invoking the class org.eclipse.scout.rt.platform.security.SecurityUtility on the command line. Base64 encoded String Config Property scout.auth.tokenTtl Number of milliseconds a signature on a request from the UI server to the backend server is valid (TTL for the authentication token). If a request is not received within this time, it is rejected. By default this property is set to 10 minutes. Long >= 0 Config Property scout.backendUrl The URL of the scout backend server (without any servlets). E.g.: http://localhost:8080 By default this property is null. String Config Property scout.client.jobCompletionDelayOnSessionShutdown Specifies the maximal time (in seconds) to wait until running jobs are cancelled on session shutdown. The default value is 10 seconds. Long >= 0 Config Property scout.client.memoryPolicy Specifies how long the client keeps fetched data before it is discarded. One of small, medium or large. The default value is large. String Config Property scout.client.notificationSubject Technical subject under which received client notifications are executed. By default notification-authenticator is used. Subject name as String Config Property scout.client.testingSessionTtl Testing client session expiration in milliseconds. The default value is 1 day. Long >= 0 Config Property scout.client.userArea User data area (e.g. in the user home) to store user preferences. If nothing is specified the user home of the operating system is used. By default no user home is set. String Config Property scout.clientnotification.chunkSize The maximum number of client notifications that are consumed at once. The default is 30. Integer >= 0 Config Property scout.clientnotification.maxNotificationBlockingTimeOut The maximum amount of time in millisecons a consumer blocks while waiting for new notifications. The default is 10 seconds. Integer >= 0 Config Property scout.clientnotification.nodeQueueCapacity Capacity of the client notification queue. If maximum capacity is reached, notification messages are dropped. The default value is 200. Integer >= 0 Config Property scout.clientnotification.notificationQueueExpireTime If no message is consumed for the specified number of milliseconds, client notification queues (with possibly pending notifications) are removed. This avoids overflows and unnecessary memory consumption. Old queues may exist if a node does not properly unregister (e.g. due to a crash). The default value is 10 minutes. Integer >= 0 Config Property scout.clustersync.user Technical subject under which received cluster sync notifications are executed. The default value is system. String Config Property scout.createTunnelToServerBeans Specifies if the Scout platform should create proxy beans for interfaces annotated with TunnelToServer. Calls to beans of such types are then tunneled to the Scout backend. By default this property is enabled if the property scout.servicetunnel.targetUrl is set. Boolean Config Property scout.cspDirective Configures individual Content Security Policy (CSP) directives. See https://www.w3.org/TR/CSP2/ and the Bean org.eclipse.scout.rt.server.commons.servlet.ContentSecurityPolicy for more details. The value must be provided as a Map. Example: scout.cspDirective[img-src]=self data: https: http://localhost:8086 Map Config Property scout.cspEnabled Enable or disable Content Security Policy (CSP) headers. The headers can be modified by replacing the bean org.eclipse.scout.rt.server.commons.servlet.ContentSecurityPolicy or using the property scout.cspDirective. Boolean Config Property scout.cspExclusions A list of regex strings. If the pathInfo of the request matches one of these strings the csp headers won`t be set. This property only has an effect if csp is enabled, see scout.cspEnabled. List Config Property scout.devMode Property to specify if the application is running in development mode. Default is false. Boolean Config Property scout.externalBaseUrl Absolute URL to the deployed http(s):// base of the web-application. The URL should include proxies, redirects, etc. Example: https://www.my-company.com/my-scout-application/. This URL is used to replace tags. String Config Property scout.healthCheckRemoteUrls Comma separated list of URLs the RemoteHealthChecker should access. By default no URLs are set. List Config Property scout.http.connectionTtl Specifies the maximum life time in milliseconds for kept alive connections of the Apache HTTP client. The default value is 1 hour. Integer Config Property scout.http.ignoreProxyPatterns Configure the proxy ignore list for the ConfigurableProxySelector. If an URI matches the pattern no proxy connection is used. By default no proxy is configured. Example: scout.http.ignoreProxyPatterns[0]=https?://localhost(?::\\d+)?(?:/.*)? scout.http.ignoreProxyPatterns[1]=…​ List Config Property scout.http.keepAlive Enable/disable HTTP keep-alive connections. The default value is defined by the system property http.keepAlive or true if the system property is undefined. Boolean Config Property scout.http.maxConnectionsPerRoute Configuration property to define the default maximum connections per route of the Apache HTTP client. The default value is 32. Integer Config Property scout.http.maxConnectionsTotal Specifies the total maximum connections of the Apache HTTP client. The default value is 128. Integer Config Property scout.http.proxyPatterns Configure proxies for the ConfigurableProxySelector. If an URI matches a pattern the corresponding proxy will be used. By default no proxy is used. The property value is of the format REGEXP_FOR_URI=PROXY_HOST:PROXY_PORT Example: scout.http.proxyPatterns[0]=.\\.example.com(:\\d+)?=127.0.0.1:8888 scout.http.proxyPatterns[1]=.\\.example.org(:\\d+)?=proxy.company.com List Config Property scout.http.redirectPost Enable redirect of POST requests (includes non-idempotent requests). The default value is true Boolean Config Property scout.http.retryOnNoHttpResponseException Enable retry of request (includes non-idempotent requests) on NoHttpResponseException Assuming that the cause of the exception was most probably a stale socket channel on the server side. For apache tomcat see http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d5e659 The default value is true Boolean Config Property scout.http.retryOnSocketExceptionByConnectionReset Enable retry of request (includes non-idempotent requests) on {@link SocketException} with message Connection reset Assuming that the cause of the exception was most probably a stale socket channel on the server side. For apache tomcat see http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d5e659 The default value is true Boolean Config Property scout.http.transportFactory Fully qualified class name of the HTTP transport factory the application uses. The class must implement org.eclipse.scout.rt.shared.http.IHttpTransportFactory. By default org.eclipse.scout.rt.shared.http.ApacheHttpTransportFactory is used. Fully qualified class name. The class must have org.eclipse.scout.rt.shared.http.IHttpTransportFactory in its super hierarchy. Config Property scout.jandex.rebuild Specifies if Jandex indexes should be rebuilt. Is only necessary to enable during development when the class files change often. The default value is false. RebuildStrategy Config Property scout.jaxws.consumer.connectTimeout Connect timeout in milliseconds to abort a webservice request, if establishment of the connection takes longer than this timeout. A timeout of null means an infinite timeout. The default value is null. Integer >= 0 Config Property scout.jaxws.consumer.portCache.corePoolSize Number of ports to be preemptively cached to speed up webservice calls. The default value is 10. Integer >= 0 Config Property scout.jaxws.consumer.portCache.enabled Indicates whether to use a preemptive port cache for webservice clients. Depending on the implementor used, cached ports may increase performance, because port creation is an expensive operation due to WSDL and schema validation. The cache is based on a corePoolSize, meaning that that number of ports is created on a preemptive basis. If more ports than that number is required, they are are created on demand and also added to the cache until expired, which is useful at a high load. The default value is true. Boolean Config Property scout.jaxws.consumer.portCache.ttl Maximum time in seconds to retain ports in the cache if the value of scout.jaxws.consumer.portCache.corePoolSize is exceeded. That typically occurs at high load, or if scout.jaxws.consumer.portCache.corePoolSize is undersized. The default value is 15 minutes. Long >= 0 Config Property scout.jaxws.consumer.portPoolEnabled To indicate whether to pool webservice clients. Creating new service and Port instances is expensive due to WSDL and schema validation. Using the pool helps to reduce these costs. The default value is true. The pool size is unlimited but its elements are removed after a certain time (configurable) If this value is true, the value of property scout.jaxws.consumer.portCache.enabled has no effect. Boolean Config Property scout.jaxws.consumer.readTimeout Read timeout in milliseconds to abort a webservice request, if it takes longer than this timeout for data to be available for read. A timeout of null means an infinite timeout. The default value is null. Integer >= 0 Config Property scout.jaxws.implementor Fully qualified class name of the JAX-WS implementor to use. The class must extend org.eclipse.scout.rt.server.jaxws.implementor.JaxWsImplementorSpecifics. By default JAX-WS Metro (not bundled with JRE) is used. For that to work, add the Maven dependency to JAX-WS Metro to your server application`s pom.xml: com.sun.xml.ws:jaxws-rt:2.3.5. Fully qualified class name. The class must have org.eclipse.scout.rt.server.jaxws.implementor.JaxWsImplementorSpecifics in its super hierarchy. Config Property scout.jaxws.loghandlerDebug Indicates whether to log SOAP messages in debug or info level. The default value is false. Boolean Config Property scout.jaxws.provider.authentication.basicRealm Security Realm used for Basic Authentication; used by org.eclipse.scout.rt.server.jaxws.provider.auth.method.BasicAuthenticationMethod. The default value is JAX-WS. String Config Property scout.jaxws.provider.user.authenticator Technical Subject used to authenticate webservice requests. The default value is jaxws-authenticator. Subject name as String Config Property scout.jaxws.provider.user.handler Technical subject used to invoke JAX-WS handlers if the request is not authenticated yet; used by org.eclipse.scout.rt.server.jaxws.provider.handler.HandlerDelegate. The default value is jaxws-handler. Subject name as String Config Property scout.jetty.port The port under which the jetty will be running. Integer between 1 and 65535 Config Property scout.jobmanager.allowCoreThreadTimeOut Specifies whether threads of the core-pool should be terminated after being idle for longer than the value of property scout.jobmanager.keepAliveTime. The defautl value is false. Boolean Config Property scout.jobmanager.corePoolSize The number of threads to keep in the pool, even if they are idle. The default value is 25. Integer >= 0 Config Property scout.jobmanager.keepAliveTime The time limit (in seconds) for which threads, which are created upon exceeding the scout.jobmanager.corePoolSize limit, may remain idle before being terminated. The default value is 1 minute. Long >= 0 Config Property scout.jobmanager.maximumPoolSize The maximal number of threads to be created once the value of scout.jobmanager.corePoolSize is exceeded. The default value is unlimited (which means limited by the resources of the machine). Integer >= 0 Config Property scout.jobmanager.prestartCoreThreads Specifies whether all threads of the core-pool should be started upon job manager startup, so that they are idle waiting for work. By default this is disabled in development mode (property scout.devMode is true) and enabled otherwise. Boolean Config Property scout.loadWebResourcesFromFilesystem Specifies if the application should look for web resources (like .js, .html or .css) on the local filesystem. If true, the resources will be searched in modules that follow the Scout naming conventions (e.g. name.ui.app.dev, name.ui.app, name.ui) on the local filesystem first and (if not found) on the classpath second. If false, the resources are searched on the Java classpath only. By default this property is true in dev mode and false otherwise. Boolean Config Property scout.mail.bouncedetector.heuristic.contents Non standard email bounce detection: content is checked against the provided list of heuristic contents (partial match, case-insensitive) List Config Property scout.mail.bouncedetector.heuristic.senderPrefixes Non standard email bounce detection: sender is checked against the provided list of heuristic sender prefixes (prefix match, case-insensitive) List Config Property scout.mail.bouncedetector.heuristic.subjects Non standard email bounce detection: subject is checked against the provided list of heuristic subjects (partial match, case-insensitive) List Config Property scout.malwareScanner.path Path to a malware scanner checked directory. The default value is null which means the system temp path is used. String Config Property scout.mom.cluster.destination.clusterNotificationTopic Name of the topic for cluster notifications published by scout application. IDestination Config Property scout.mom.cluster.environment Contains the configuration to connect to the network or broker. This configuration is specific to the MOM implementor Example to connect to a peer based cluster, which is useful in development mode because there is no central broker: scout.mom.cluster.environment[scout.mom.name]=Scout Cluster MOM scout.mom.cluster.environment[scout.mom.connectionfactory.name]=ClusterMom scout.mom.cluster.environment[java.naming.factory.initial]=org.apache.activemq.jndi.ActiveMQInitialContextFactory scout.mom.cluster.environment[java.naming.provider.url]=failover:(peer://mom/cluster?persistent=false) scout.mom.cluster.environment[connectionFactoryNames]=ClusterMom Map Config Property scout.mom.cluster.implementor Specifies the MOM implementor. Example to work with a JMS based implementor: scout.mom.cluster.implementor=org.eclipse.scout.rt.mom.jms.JmsMomImplementor Fully qualified class name. The class must have org.eclipse.scout.rt.mom.api.IMomImplementor in its super hierarchy. Config Property scout.mom.failover.connectionRetryCount Specifies the connection retry count for connection failover. Default is 15. The value 0 disables connection failover. Integer Config Property scout.mom.failover.connectionRetryIntervalMillis Specifies the connection retry interval in milliseconds. Default is 2000ms. Integer Config Property scout.mom.failover.sessionRetryIntervalMillis Specifies the session retry interval in milliseconds. Default is 5000ms. Integer Config Property scout.mom.marshaller Specifies the default Marshaller to use if no marshaller is specified for a MOM or a destination. By default the JsonDataObjectMarshaller is used. Fully qualified class name. The class must have org.eclipse.scout.rt.mom.api.marshaller.IMarshaller in its super hierarchy. Config Property scout.mom.requestreply.cancellationTopic Specifies the default topic to receive cancellation request for request-reply communication. By default a defined topic with the name scout.mom.requestreply.cancellation is used. IDestination Config Property scout.mom.requestreply.enabled Specifies if request-reply messaging is enabled by default. This value can also be configured individually per MOM. The default value is true. Boolean Config Property scout.nodeId Specifies the cluster node name. If not specified a default id is computed. String Config Property scout.remotefileRootPath Absolute path to the root directory of the RemoteFileService. The default value is null. String Config Property scout.serverSessionTtl Server sessions that have not been accessed for the specified number of milliseconds are removed from the cache. The default value is one day. Long >= 0 Config Property scout.servicetunnel.compress Specifies if the service tunnel should compress the data. If null, the response decides which is default to true. Boolean Config Property scout.servicetunnel.maxConnectionsPerRoute Specifies the default maximum connections per route property for the HTTP service tunnel. Overrides the value from scout.http.maxConnectionsPerRoute for the service tunnel. Default value is 2048. Integer Config Property scout.servicetunnel.maxConnectionsTotal Specifies the default total maximum connections property for the HTTP service tunnel. Overrides the value from scout.http.maxConnectionsTotal for the service tunnel. The default value is 2048. Integer Config Property scout.servicetunnel.targetUrl Specifies the URL to the ServiceTunnelServlet on the backend server. By default this property points to the value of property scout.backendUrl with /process appended. String Config Property scout.smtp.connectionTimeout Socket connection timeout value in milliseconds. Integer >= 0 Config Property scout.smtp.debugReceiverEmail If specified all emails are sent to this address instead of the real one. This may be useful during development to not send emails to real users by accident. String Config Property scout.smtp.pool.maxConnectionLifetime Max. lifetime of pooled connections in seconds. Integer >= 0 Config Property scout.smtp.pool.maxIdleTime Max. idle time for pooled connections in seconds. Integer >= 0 Config Property scout.smtp.pool.waitForConnectionTimeout Max. wait time for SMTP connection in seconds. If the value is 0, callers will wait infinitely long for SMTP connections. Integer >= 0 Config Property scout.smtp.readTimeout Socket read timeout value in milliseconds. Integer >= 0 Config Property scout.sql.directJdbcConnection If true a direct JDBC connection is created. Otherwise a JNDI connection is used. The default value is true. Boolean Config Property scout.sql.jdbc.driverName The driver name to use. By default oracle.jdbc.OracleDriver is used. String Config Property scout.sql.jdbc.mappingName The JDBC mapping name. By default jdbc:oracle:thin:@localhost:1521:ORCL is used. String Config Property scout.sql.jdbc.pool.connectionBusyTimeout Connections will be closed after this timeout in milliseconds even if the connection is still busy. The default value is 6 hours. Long >= 0 Config Property scout.sql.jdbc.pool.connectionIdleTimeout Idle connections will be closed after this timeout in milliseconds. The default value is 5 minutes. Long >= 0 Config Property scout.sql.jdbc.pool.size The maximum number of connections to create. The default pool size is 25. Integer >= 0 Config Property scout.sql.jdbc.properties Semicolon separated list of properties to pass to the JDBC connection. The default value is null. E.g.: key1=val1;key2=val2 String Config Property scout.sql.jdbc.statementCacheSize Maximum number of cached SQL statements. The default value is 25. Integer >= 0 Config Property scout.sql.jndi.initialContextFactory The name of the object to lookup in the JNDI context. Default is null. String Config Property scout.sql.jndi.name The name of the object to lookup in the JNDI context. Default is null. String Config Property scout.sql.jndi.providerUrl JNDI provider url (e.g. ldap://somehost:389). Default is null. String Config Property scout.sql.jndi.urlPkgPrefixes A colon-separated list of package prefixes for the class name of the factory class that will create a URL context factory. Default is null. String Config Property scout.sql.password The password to connect to the database (JDBC or JNDI) String Config Property scout.sql.transactionMemberId Id of the transaction member on which the connection is available. String Config Property scout.sql.username The username to connect to the database (JDBC or JNDI) String Config Property scout.texts.showKeys If this property is set to true, the TextKeyTextProviderService will be registered with high priority, and each call to TEXTS.get() will return the given text key instead of the translation. This is useful for debug/testing purposes or exporting forms to JSON. By default this property is false. Boolean Config Property scout.tiles.dataLoadQueueTimeoutSeconds Maximum number of seconds a tile load job can execute until it is automatically cancelled. The default value is 2 minutes. Integer >= 0 Config Property scout.tiles.maxConcurrentDataLoadThreads Maximum number of threads per server that can be created to load tiles. The default value is 25. Integer >= 0 Config Property scout.trustedCertificates URIs to DER (Base64) encoded certificate files that should be trusted. The URI may refer to a local file or a resource on the classpath (use classpath: prefix). The default value is an empty list. List Config Property scout.ui.backgroundPollingMaxWaitTime The polling request (which waits for a background job to complete) stays open until a background job has completed or the specified number of seconds elapsed. This property must have a value between 3 and the value of property scout.ui.maxUserIdleTime. By default this property is set to 1 minute. Long >= 0 Config Property scout.ui.locales Contains a comma separated list of supported locales (e.g. en,en-US,de-CH). This is only relevant if locales.json and texts.json should be sent to the client, which is not the case for remote apps. So this property is only used for JS only apps. By default no locales are supported. List Config Property scout.ui.maxUserIdleTime If a user is inactive (no user action) for the specified number of seconds, the session is stopped and the user is logged out. By default this property is set to 4 hours. Long >= 0 Config Property scout.ui.modelJobTimeout The maximal timeout in seconds to wait for model jobs to complete during a UI request. After that timeout the model jobs will be aborted so that the request may return to the client. By default this property is set to 1 hour. Long >= 0 Config Property scout.ui.sessionstore.housekeepingDelay Number of seconds before the housekeeping job starts after a UI session has been unregistered from the store. By default this property is set to 30 seconds. Integer >= 0 Config Property scout.ui.theme The name of the UI theme which is activated when the application starts. String Config Property scout.urlHints.enabled Enable or disable changing UrlHints using URL parameters in the browser address line. By default has the same value as the config property scout.devMode meaning it is by default only enabled in development mode. Boolean Config Property scout.util.defaultDecimalSupportProvider Specifies the default DefaultDecimalSupportProvider to use. By default the DefaultDecimalSupportProvider is used. Fully qualified class name. The class must have org.eclipse.scout.rt.platform.util.DECIMAL$DefaultDecimalSupportProvider in its super hierarchy. Config Property 1. https://github.com/wildfly/jandex 2. https://en.wikipedia.org/wiki/.properties","title":"Platform","component":"scout-docs","version":"22","name":"platform","url":"/scout-docs/22/technical-guide/common-concepts/platform.html","titles":[{"text":"Application Lifecycle","hash":"sec-app.lifecycle","id":1},{"text":"Platform Listener","hash":"platform-listener","id":2},{"text":"Class Inventory","hash":"sec-class.inventory","id":3},{"text":"scout.xml","hash":"scout-xml","id":4},{"text":"Bean Manager","hash":"sec-bean.manager","id":5},{"text":"Bean registration","hash":"bean-registration","id":6},{"text":"@TunnelToServer","hash":"tunneltoserver","id":7},{"text":"Bean Scopes","hash":"bean-scopes","id":8},{"text":"Bean Creation","hash":"bean-creation","id":9},{"text":"Eager Beans","hash":"eager-beans","id":10},{"text":"Constructors","hash":"constructors","id":11},{"text":"Bean Retrieval","hash":"bean-retrieval","id":12},{"text":"@Order","hash":"order","id":13},{"text":"@Replace","hash":"replace","id":14},{"text":"Examples","hash":"examples","id":15},{"text":"Bean Decoration","hash":"bean-decoration","id":16},{"text":"Destroy Beans","hash":"destroy-beans","id":17},{"text":"Configuration Management","hash":"sec-config.management","id":18},{"text":"Property resolution","hash":"property-resolution","id":19},{"text":"Additional examples","hash":"additional-examples","id":20},{"text":"Configuration validation","hash":"configuration-validation","id":21},{"text":"Scout Config Properties","hash":"sec-app.configProperties","id":22}]},"41":{"id":41,"text":"This document is referring to a past Scout release. Please click here for the recent version. Mostly, code is run on behalf of some semantic context, for example as a particular Subject and with some context related ThreadLocals set, e.g. the user’s session and its Locale. Scout provides you with different RunContexts, such as ClientRunContext or ServerRunContext. They all share some common characteristics like Subject, Locale and RunMonitor, but also provide some additional functionality like transaction boundaries if using ServerRunContext. Also, a RunContext facilitates propagation of state among different threads. In order to ease readability, the 'setter-methods' of the RunContext support method chaining. All a RunContext does is to provide some setter methods to construct the context, and a run and call method to run an action on behalf of that context. Thereby, the only difference among those two methods is their argument. Whereas run takes a IRunnable instance, call takes a Callable to additionally return a result to the caller. The action is run in the current thread, meaning that the caller is blocked until completion. By default, a RunContext is associated with a RunMonitor, and the monitor’s cancellation status can be queried via RunMonitor.CURRENT.get().isCancelled(). The monitor allows for hard cancellation, meaning that the executing thread is interrupted upon cancellation. For instance if waiting on an interruptible construct like Object.wait() or IFuture.awaitDone(), the waiting thread returns with an interruption exception. Typically, a RunContext is created from a respective factory like RunContexts to create a RunContext, or ServerRunContexts to create a ServerRunContext, or ClientRunContexts to create a ClientRunContext. Internally, the BeanManager is asked to provide a new instance of the RunContext, which allows you to replace the default implementation of a RunContext in an easy way. The factories declare two factory methods: empty() and copyCurrent(). Whereas empty() provides you an empty RunContext, copyCurrent() takes a snapshot of the current calling context and initializes the RunContext accordingly. That is useful if only some few values are to be changed, or, if using ServerRunContext, to run the code on behalf of a new transaction. The following Listing 1 illustrates the creation of an empty RunContext initialized with a particular Subject and Locale. Listing 1. Creation of an empty RunContext Subject subject = new Subject(); (1) subject.getPrincipals().add(new SimplePrincipal(\"john\")); subject.setReadOnly(); (2) RunContexts.empty() .withSubject(subject) .withLocale(Locale.US) .run(() -> { // run some code (3) System.out.println(NlsLocale.CURRENT.get()); // > Locale.US System.out.println(Subject.getSubject(AccessController.getContext())); // > john }); 1 create the Subject to do some work on behalf 2 Create and initialize the RunContext 3 This code is run on behalf of the RunContext The following Listing 2 illustrates the creation of a 'snapshot' of the current calling RunContext with another Locale set. Listing 2. Create a copy of the current calling RunContext RunContexts.copyCurrent() .withLocale(Locale.US) .run(() -> { // run some code }); An important difference is related to the RunMonitor. By using the copyCurrent() factory method, the context’s monitor is additionally registered as child monitor of the monitor of the current calling context. That way, a cancellation request to the calling context is propagated down to this context as well. Of course, that behavior can be overwritten by providing another monitor yourself. The following properties are declared on a RunContext and are inherited by ServerRunContext and ClientRunContext. property description accessibility runMonitor Monitor to query the cancellation status of the context. * must not be null * is automatically set if creating the context by its factory * is automatically registered as child monitor if creating the context by copyCurrent() factory method RunMonitor.CURRENT.get() subject Subject to run the code on behalf Subject.getSubject(AccessController.getContext()) locale Locale to be bound to the Locale ThreadLocal NlsLocale.CURRENT.get() propertyMap Properties to be bound to the Property ThreadLocal PropertyMap.CURRENT.get() A ServerRunContext controls propagation of server-side state and sets the transaction boundaries, and is a specialization of RunContext. property description accessibility session Session to be bound to Session ThreadLocal ISession.CURRENT.get() transactionScope To control transaction boundaries. By default, a new transaction is started, and committed or rolled back upon completion. * Use TransactionScope.REQUIRES_NEW to run the code in a new transaction (by default). * Use TransactionScope.REQUIRED to only start a new transaction if not running in a transaction yet. * Use TransactionScope.MANDATORY to enforce that the caller is already running in a transaction. Otherwise, a TransactionRequiredException is thrown. ITransaction.CURRENT.get() transaction Sets the transaction to be used to run the runnable. Has only an effect, if transaction scope is set to TransactionScope.REQUIRED or TransactionScope.MANDATORY. Normally, this property should not be set manually. ITransaction.CURRENT.get() clientNotificationCollector To associate the context with the given ClientNotificationCollector, meaning that any code running on behalf of this context has that collector set in ClientNotificationCollector.CURRENT thread-local. That collector is used to collect all transactional client notifications, which are to be published upon successful commit of the associated transaction, and which are addressed to the client node which triggered processing (see withClientNodeId(String)). That way, transactional client notifications are not published immediately upon successful commit, but included in the client’s response instead (piggyback). Typically, that collector is set by ServiceTunnelServlet for the processing of a service request. ClientNotificationCollector.CURRENT.get() clientNodeId Associates this context with the given 'client node ID', meaning that any code running on behalf of this context has that id set in IClientNodeId.CURRENT thread-local. Every client node (that is every UI server node) has its unique 'node ID' which is included with every 'client-server' request, and is mainly used to publish client notifications. If transactional client notifications are issued by code running on behalf of this context, those will not be published to that client node, but included in the request’s response instead (piggyback). However, transactional notifications are only sent to clients upon successful commit of the transaction. Typically, this node ID is set by ServiceTunnelServlet for the processing of a service request. IClientNodeId.CURRENT.get() A ClientRunContext controls propagation of client-side state, and is a specialization of RunContext. property description accessibility session Session to be bound to Session ThreadLocal ISession.CURRENT.get() form Associates this context with the given IForm, meaning that any code running on behalf of this context has that IForm set in IForm.CURRENT thread-local. That information is mainly used to determine the current calling model context, e.g. when opening a message-box to associate it with the proper IDisplayParent. Typically, that information is set by the UI facade when dispatching a request from UI, or when constructing UI model elements. IForm.CURRENT.get() outline Associates this context with the given IOutline, meaning that any code running on behalf of this context has that IOutline set in IOutline.CURRENT thread-local. That information is mainly used to determine the current calling model context, e.g. when opening a message-box to associate it with the proper IDisplayParent. Typically, that information is set by the UI facade when dispatching a request from UI, or when constructing UI model elements. IOutline.CURRENT.get() desktop Associates this context with the given IDesktop, meaning that any code running on behalf of this context has that IDesktop set in IDesktop.CURRENT thread-local. That information is mainly used to determine the current calling model context, e.g. when opening a message-box to associate it with the proper IDisplayParent. Typically, that information is set by the UI facade when dispatching a request from UI, or when constructing UI model elements. IDesktop.CURRENT.get()","title":"RunContext","component":"scout-docs","version":"22","name":"run-context","url":"/scout-docs/22/technical-guide/common-concepts/run-context.html","titles":[{"text":"Factory methods to create a RunContext","hash":"factory-methods-to-create-a-runcontext","id":1},{"text":"Properties of a RunContext","hash":"properties-of-a-runcontext","id":2},{"text":"Properties of a ServerRunContext","hash":"properties-of-a-serverruncontext","id":3},{"text":"Properties of a ClientRunContext","hash":"properties-of-a-clientruncontext","id":4}]},"42":{"id":42,"text":"This document is referring to a past Scout release. Please click here for the recent version. A RunMonitor allows the registration of ICancellable objects, which are cancelled upon cancellation of this monitor. A RunMonitor is associated with every RunContext and IFuture, meaning that executing code can always query its current cancellation status via RunMonitor.CURRENT.get().isCancelled(). A RunMonitor itself is also of the type ICancellable, meaning that it can be registered within another monitor as well. That way, a monitor hierarchy can be created with support of nested cancellation. That is exactly what is done when creating a copy of the current calling context, namely that the new monitor is registered as ICancellable within the monitor of the current calling context. Cancellation only works top-down, and not bottom up, meaning that a parent monitor is not cancelled once a child monitor is cancelled. When registering a ICancellable and this monitor is already cancelled, the ICancellable is cancelled immediately. Furthermore, a job’s Future is linked with the job’s RunMonitor, meaning that cancellation requests targeted to the Future are also propagated to the RunMonitor, and vice versa. The following Figure 1 illustrates the RunMonitor and its associations. Figure 1. RunMonitor and its associations","title":"RunMonitor","component":"scout-docs","version":"22","name":"run-monitor","url":"/scout-docs/22/technical-guide/common-concepts/run-monitor.html","titles":[]},"43":{"id":43,"text":"This document is referring to a past Scout release. Please click here for the recent version. All Scout HTTP servlets delegate to a central authority to append HTTP response headers. This is the bean HttpServletControl. It enables developers to control which headers that should be added to the HTTP response for each servlet and request. The next sections describe the headers that are added to any response by default. Beside these also the following headers may be of interest for an end user application (consider adding them to your application if possible): Public Key Pinning Strict Transport Security (HSTS) X-Content-Type-Options Please note that not all headers are supported in all user agents! The X-Frame-Options HTTP response header [1] can be used to indicate whether a user agent should be allowed to render a page in a , or . Sites can use this to avoid clickjacking [2] attacks, by ensuring that their content is not embedded into other sites. The X-Frame-Options header is described in RFC 7034 [3]. In Scout this header is set to SAMEORIGIN which allows the page to be displayed in a frame on the same origin (scheme, host and port) as the page itself only. This header enables the XSS [4] filter built into most recent user agents. It’s usually enabled by default anyway, so the role of this header is to re-enable the filter for the website if it was disabled by the user. The X-XSS-Protection header is described in controlling-the-xss-filter. In Scout this header is configured to enable XSS protections and instructs the user-agent to block a page from loading if reflected XSS is detected. Content Security Policy is an HTTP response header that helps you reduce XSS risks on modern user agents by declaring what dynamic resources are allowed to load [5]. The CSP header is described in Level 1 and Level 2. There is also a working draft for a Level 3. Scout makes use of Level 1 (and one directive from Level 2) and sets by default the following settings: JavaScript [6]: Only accepts JavaScript resources from the same origin (same scheme, host and port). Inline JavaScript is allowed and unsafe dynamic code evaluation (like eval(string), setTimeout(string), setInterval(string), new Function(string)) is allowed as well. Stylesheets (CSS) [7]: Only accepts Stylesheet resources from the same origin (same scheme, host and port). Inline style attributes are allowed. Frames [8]: All sources are allowed because the iframes created by the Scout BrowserField run in the sandbox mode and therefore handle the security policy on their own. All other types (Image, WebSocket [9], EventSource [10], AJAX calls [11], fonts, [12], [13], [14], [15] and [16]) only allow resources from the same origin (same scheme, host and port). If a resource is blocked because it violates the CSP a report is created and logged on server side using level warning. This is done in the class ContentSecurityPolicyReportHandler. This enables admins to monitor the application and to react if a CSP violation is detected. The UiServlet checks if the session cookie is configured safely. The validation is only performed on first access to the UiServlet. There is no automatic validation on the backend server side or on any custom servlets! If the validation fails, a corresponding error message is logged to the server and an exception is thrown making the UiServlet inaccessible. Because of security reasons the exception shown to the user includes no details about the error. These can only be seen on the server side log. First the existence of the HttpOnly flag is checked. The servlet container will then add this flag to the Set-Cookie HTTP response header. If the user agent supports this flag, the cookie cannot be accessed through a client side script. As a result even if a cross-site scripting (XSS) flaw exists and a user accidentally accesses a link that exploits this flaw, the user agent will not reveal the cookie to a third party. For a list of user agents supporting this feature please refer to OWASP. It is recommended to always enable this flag. Since Java Servlet 3.0 specification this property can be set in the configuration in the deployment descriptor WEB-INF/web.xml: ... ... true (1) ... ... ... 1 The HttpOnly flag activated Second the existence of the Secure flag is checked. The servlet container will then add this flag to the Set-Cookie HTTP response header. The purpose of the secure flag is to prevent cookies from being observed by unauthorized parties due to the transmission of a cookie in clear text. Therefore, setting this flag will prevent the user agent from transmitting the session id over an unencrypted channel. Since Java Servlet 3.0 specification this property can be set in the configuration in the deployment descriptor WEB-INF/web.xml: ... ... true (1) ... ... ... 1 The Secure flag activated This of course only makes sense if the application is exposed to the end user using an encrypted channel like HTTPS (which is strongly recommended). Unfortunately for the UI server it is not possible to detect if an application uses a secured channel. Consider the following example: The servlet container is protected by a reverse proxy. The communication between the user agent and the proxy is encrypted while the channel between the proxy and the servlet container is not. In this scenario the container cannot know that from a user agent point of view the channel is secured. Because of this the validation assumes that the channel from the user agent to the entering node is secured and by default checks for the Secure flag. In case this assumption is not true and an unencrypted channel must be used this validation step can be disabled by setting the following property in the config.propertis file: scout.auth.cookieSessionValidateSecure=false This skips the Secure flag check completely. In this scenario (not using https) it is also required to remove the secure tag from the cookie config in the WEB-INF/web.xml. This chapter describes how HTML Output can be handled in a secure way. Scout applications often display potentially dangerous data, e.g. user input or data from other systems. Encoding this input in such a way, that it can not be executed, prevents security vulnerabilities like cross-site scripting. By default, all input in the Scout model is encoded. Examples are values/labels in value fields, cells in tables, message in message box. The reason behind this default choice is that developers do not have to think about output encoding in the standard case and are therefore less likely to forget output encoding and introduce a security vulnerability. Example: In the following label field, the HTML tag is encoded as bold text: public class LabelField extends AbstractLabelField { @Override protected void execInitField() { setValue(\"...Bold text...\"); } Sometimes developers may want to use HTML in the Scout model. Examples are Simple styling of dynamic content, such as addresses or texts in message boxes Text containing application-internal or external links Html or XML content received from other systems, such as e-mails or html pages Html input should only partially be encoded or not at all. To disable the encoding of the whole value, the property HtmlEnabled can be used: public class NoEncodingLabelField extends AbstractLabelField { @Override protected boolean getConfiguredHtmlEnabled() { return true; } @Override protected void execInitField() { setValue(\"...Bold text...\"); } There are several ways to implement the use cases above. Some typical implementations are described in the following sections. Often using HTML in value fields or table cells is not necessary for styling. Very basic styling can be done for example by setting the CSS class. For creating simple HTML files or fragments with encoded user input, the class org.eclipse.scout.rt.platform.html.HTML can be used. It is also easily possible to create application internal and external link with this approach. For more complex HTML, using IBeanField in the scout model and implementing the styling in the UI-Layer is often the preferred way. Links are possible as well. It is also possible to encode any String manually using StringUtility.htmlEncode(String). org.eclipse.scout.rt.platform.html.HTML uses this method internally for encoding. However, using HTML is recommended, where possible, because it is more concise and leads to less errors. If HTML or XML from external sources or more complex HTML are used in the Scout model, using a white-list filter might be the best way to avoid security bugs. Libraries, such as JSoup provide such a white-list filter. Scout currently does not include any services or utilities for using white-list filters, because the configuration and usage is very use-case-specific and would therefore not add much benefit. Scout uses the java.security API principles to grant access to a specific resource. Each user has a set of granted java.security.Permission instances. This set is a java.security.PermissionCollection. A call to PermissionCollection.implies(Permission p) does the access check. The argument p in this call is a new permission instance for which we want to do the access check and which is compared against the granted permissions. Usually, the permission collection implementation iterates through all granted permissions and calls on each Permission.implies(Permission p) until one call returns true. Scout adds some concepts and helpers to this API: IPermission Unlike other permissions, a permission implementing this interface can only be implied by another IPermission with the same name. A permission used together with scouts security API does not have to implement the IPermission interface, but it is recommended. PermissionLevel An IPermission, which is part of an IPermissionCollection has always a granted access level assigned (IPermission.getLevel()). If the granted level is PermissionLevel.NONE, any access checks will fail. IAccessControlService This service is responsible to provide and manage a users set of granted permissions. A scout application usually extends AbstractAccessControlService and implements #execLoadPermissions. ACCESS Provides a set of convenience methods to check access. Let us assume you require a permission to allow a user to access companies. public class ReadCompanyPermission extends AbstractPermission { private static final long serialVersionUID = 1L; public ReadCompanyPermission() { super(\"scoutdoc.ReadCompany\"); } } To check access one can use ACCESS. if (ACCESS.check(new ReadCompanyPermission())) { (1) throw new AccessForbiddenException(TEXTS.get(\"YouAreNotAllowedToReadThisData\")); } ACCESS.checkAndThrow(new ReadCompanyPermission()); (2) 1 Checks permission against granted permissions of current user. 2 Checks permission and if this check fails, throw an AccessForbiddenException with a default message. We can define a default access check failed message for a permission. public class CreateCompanyPermission extends AbstractPermission { private static final long serialVersionUID = 1L; public CreateCompanyPermission() { super(\"scoutdoc.CreateCompany\"); } @Override public String getAccessCheckFailedMessage() { return TEXTS.get(\"YouAreNotAllowedToRegisterThisData\"); } } ACCESS allows to check multiple permissions at once. ACCESS.checkAllAndThrow(new ReadCompanyPermission(), new CreateCompanyPermission()); ACCESS.checkAnyAndThrow(new ReadCompanyPermission(), new CreateCompanyPermission()); We have seen some simple permission checks. Now let us assume, that some users may modify a company only if they have registered the company by themselves. For this use case we introduce a new permission level ScoutdocPermissionLevels.OWN. This is the permission level which is granted for those users. public final class ScoutdocPermissionLevels { private ScoutdocPermissionLevels() { } public static final int LEVEL_NONE = PermissionLevel.LEVEL_NONE; public static final int LEVEL_OWN = 10; public static final int LEVEL_ALL = PermissionLevel.LEVEL_ALL; public static final PermissionLevel NONE = PermissionLevel.NONE; public static final PermissionLevel OWN = PermissionLevel.register(LEVEL_OWN, \"OWN\", true, () -> TEXTS.get(\"Own\")); public static final PermissionLevel ALL = PermissionLevel.ALL; public static void init() { // ensures all static initializers have been called } } In order to check access for this new level we have to override AbstractPermission#evalPermission. public class UpdateCompanyPermission extends AbstractPermission { private static final long serialVersionUID = 1L; private final UUID m_companyId; public UpdateCompanyPermission() { this(null); } public UpdateCompanyPermission(UUID companyId) { super(\"scoutdoc.UpdateCompany\"); m_companyId = companyId; } public UUID getCompanyId() { return m_companyId; } @Override protected boolean evalPermission(IPermission p) { // Precondition: p.getClass() == getClass() && getName().equals(p.getName()) && // getLevel() != PermissionLevel.NONE if (ScoutdocPermissionLevels.OWN == getLevel()) { UUID companyId = ((UpdateCompanyPermission) p).getCompanyId(); return BEANS.get(ICompanyService.class).isOwnCompany(companyId); } return true; // ScoutdocPermissionLevels.ALL == getLevel() } @Override public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((m_companyId == null) ? 0 : m_companyId.hashCode()); return result; } @Override public boolean equals(Object obj) { if (this == obj) { return true; } if (!super.equals(obj)) { return false; } if (getClass() != obj.getClass()) { return false; } UpdateCompanyPermission other = (UpdateCompanyPermission) obj; if (m_companyId == null) { if (other.m_companyId != null) { return false; } } else if (!m_companyId.equals(other.m_companyId)) { return false; } return true; } } ACCESS.checkAndThrow(new UpdateCompanyPermission(companyId)); If such a service call would be expensive, one may cache the result of such a permission check. You have to implement this by yourself. A recommended solution is to create a wrapper around IPermissionCollection and this wrapper caches calls to IPermissionCollection#implies if required. 1. https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options 2. https://en.wikipedia.org/wiki/Clickjacking 3. https://tools.ietf.org/html/rfc7034 4. https://en.wikipedia.org/wiki/Cross-site_scripting 5. http://content-security-policy.com/ 6. https://en.wikipedia.org/wiki/JavaScript 7. https://en.wikipedia.org/wiki/Cascading_Style_Sheets 8. https://en.wikipedia.org/wiki/Framing_(World_Wide_Web) 9. https://en.wikipedia.org/wiki/WebSocket 10. https://developer.mozilla.org/en-US/docs/Web/API/EventSource 11. https://en.wikipedia.org/wiki/Ajax_%28programming%29 12. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object 13. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed 14. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/applet 15. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio 16. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video","title":"Security","component":"scout-docs","version":"22","name":"security","url":"/scout-docs/22/technical-guide/common-concepts/security.html","titles":[{"text":"Default HTTP Response Headers","hash":"default-http-response-headers","id":1},{"text":"X-Frame-Options","hash":"x-frame-options","id":2},{"text":"X-XSS-Protection","hash":"x-xss-protection","id":3},{"text":"Content Security Policy","hash":"content-security-policy","id":4},{"text":"Session Cookie (JSESSIONID Cookie) Configuration Validation","hash":"session-cookie-jsessionid-cookie-configuration-validation","id":5},{"text":"HttpOnly","hash":"httponly","id":6},{"text":"Secure","hash":"secure","id":7},{"text":"Secure Output","hash":"secure-output","id":8},{"text":"Encoding by Default","hash":"encoding-by-default","id":9},{"text":"Html Enabled","hash":"html-enabled","id":10},{"text":"CSS Class and Other Model Properties","hash":"css-class-and-other-model-properties","id":11},{"text":"HTML Builder","hash":"html-builder","id":12},{"text":"Styling in the UI-Layer","hash":"styling-in-the-ui-layer","id":13},{"text":"Manual Encoding","hash":"manual-encoding","id":14},{"text":"Using a White-List Filter","hash":"using-a-white-list-filter","id":15},{"text":"Authorization (Granting)","hash":"authorization-granting","id":16}]},"44":{"id":44,"text":"This document is referring to a past Scout release. Please click here for the recent version. The org.eclipse.scout.rt.mail.smtp.SmtpHelper is an @ApplicationScoped Bean that provides means of sending emails described by javax.mail.internet.MimeMessage objects via SMTP. The SMTP connection can either be provided as a org.eclipse.scout.rt.mail.smtp.SmtpServerConfig object containing all the required connection parameters or as an already created javax.mail.Session object. The SmtpHelper also supports pooling of SMTP connections as described in the section Connection Pooling. The org.eclipse.scout.rt.mail.smtp.SmtpServerConfig class allows to specify details of an SMTP connection to be made. It supports the following properties: Property Description Example host The hostname or ip address of the SMTP server to use. localhost or 192.168.10.199. port The TCP port the SMTP server listens on. E.g. 25 or 465. username The username to use for authentication. - password The password to use for authentication. - useAuthentication Whether to use authentication or not. This setting is only effective, if a username has been provided. - useSmtps If true, the protocol will be 'smtps', else the protocol will be 'smtp'. - useStartTls If true, STARTTLS will be used to create the connection to the SMTP server. - sslProtocols Limits the SSL protocols to support when connecting to the SMTP server. The value is a space separated list of protocol names returned by the javax.net.ssl.SSLSocket.getSupportedProtocols() method. E.g. \"TLSv1.1 TLSv1.2\" additionalSessionProperties Can be used to specify any other property for the javax.mail.Session that is created from org.eclipse.scout.rt.mail.smtp.SmtpServerConfig. These additional properties are applied after all the other properties, thus may override already specified properties. \"mail.smtp.socketFactory.class\": \"com.example.net.SocketFactory\" poolSize Allows to specify the size of the connection pool for this SmtpServerConfig. The Default value is 0 which effectively deactives connection pooling. 4 maxMessagesPerConnection Allows to specify the max number of messages to be sent per connection when using connection pooling (poolSize > 0). The default value is 0 which effectively disables limiting the maximum number of messages sent per connection. You should consult with the operator of the SMTP server you are using to define this value. Local mail servers probably allow less than 20 messages per connection, bigger white mailers may allow up to 100 or even more. 20 Listing 1 demonstrates how to use the SmtpServerConfig class. Listing 1. Create and configure an instance of org.eclipse.scout.rt.mail.smtp.SmtpServerConfig @SuppressWarnings(\"unused\") SmtpServerConfig smtpServerConfig = BEANS.get(SmtpServerConfig.class) .withHost(\"mail.example.com\") .withPort(465) .withUsername(\"smtpuser\") .withPassword(\"smtpuserpwd\") .withUseAuthentication(true) .withUseSmtps(true) .withUseStartTls(true); Messages can be sent using the sendMessage Methods of the SmtpHelper class. In Order to prepare the message to be sent, Scout provides a number of classes and helpers: Class Description org.eclipse.scout.rt.mail.MailMessage Encapsulates all the information about a single mail message (sender, recipient, carbon-copy recipients, subject, body, attachments, etc.). org.eclipse.scout.rt.mail.MailParticipant Defines email address and name of a mail participant. A participant can be a recipient, a carbon-copy recipient, a blind-carbon-copy recipient, the sender and a replyTo contact. org.eclipse.scout.rt.mail.MailAttachment Contains information about an email attachment. org.eclipse.scout.rt.mail.MailHelper Provides various helper methods around email bodies, attachments, etc. Listing 2 shows the usage of the mentioned classes Scout provides in order to create a MimeMessage object. Listing 2. Create org.eclipse.scout.rt.mail.CharsetSafeMimeMessage object // create BinaryResource for an attachment. BinaryResource screenshotResource = BinaryResources.create() .withFilename(\"screenshot.jpg\") .withContentType(\"image/jpeg\") .withContent(bytes) .build(); // wrap BinaryResource in MailAttachment MailAttachment screenshotAttachment = new MailAttachment(screenshotResource); // prepare Scout MailMessage MailMessage mailMessage = BEANS.get(MailMessage.class) .withSender(BEANS.get(MailParticipant.class).withName(\"sender\").withEmail(\"me@example.com\")) .addToRecipient(BEANS.get(MailParticipant.class).withName(\"recipient\").withEmail(\"somebody@example.com\")) .withAttachment(screenshotAttachment) .withSubject(\"Screenshot\") .withBodyPlainText(\"Dear recipient,\\n\\nPlease have a look at my screenshot!\\n\\nRegards,\\nsender\"); // convert MailMessage to MimeMessage CharsetSafeMimeMessage mimeMessage = BEANS.get(MailHelper.class).createMimeMessage(mailMessage); In order to send the message you can either use a org.eclipse.scout.rt.mail.smtp.SmtpServerConfig object or an existing javax.mail.Session object as demonstrated in Listing 3 and Listing 4. Listing 3. Send email using an org.eclipse.scout.rt.mail.smtp.SmtpServerConfig object. BEANS.get(SmtpHelper.class).sendMessage(smtpServerConfig, mimeMessage); Listing 4. Send email using an existing javax.mail.Session object. // The password has to be provided additionally as it is not stored in the session object. BEANS.get(SmtpHelper.class).sendMessage(session, password, mimeMessage); The SmtpHelper provides some config properties that allow to modify certain behaviour. Key Description Example scout.smtp.debugReceiverEmail If this property is set, the SmtpHelper sends all emails to the specified email address instead of the recipients specified in the MimeMessage object. This is useful for development and testing environments. debug-receiver@example.com scout.smtp.connectionTimeout Specifies the connection timeout for SMTP connections in milliseconds. Default is 60 seconds. 30000 scout.smtp.readTimeout Specifies the read timeout for SMTP connections in milliseconds. Default is 60 seconds. 30000 Normally, the SmtpHelper opens a new connection for every email which is then closed after the email has been sent. If you want to send a lot of emails, this behaviour is rather inefficient as opening a new SMTP connection takes a long time compared to sending the email especially when using encrypted connections. To mitigate this overhead, the SmtpHelper supports pooling of SMTP connections which is activated using the poolSize property of SmtpServerConfig objects. If you set the pool size property to a value > 0, the SmtpHelper will create parallel connections up to the specified number. This means, that connection pooling is not possible when you use the sendMessage method accepting an already prepared javax.mail.Session object. Pooling in this context means the following: All SMTP server connections sharing the same SmtpServerConfig object (by same meaning being equal according to SmtpServerConfig.equals()) belong to the same pool For each different SmtpServerConfig object (again using SmtpServerConfig.equals()) up to the specified pool size connections are created Connections are not immediately closed after an email has been sent, instead they are returned to the pool as idle connections. Before creating new connections, idle connections are reused. When trying to send an email while all the SMTP connections are currently in use and the pool size has already been reached, the calling thread is blocked until a connection is returned as idle to the pool or as soon as the wait-for-connection-timeout has exceeded. As long as connections are open, a background job monitors their state and closes idle and old connections. The following config properties allow to modify the behavior of the connection pool implementation at the global level: key Description Example scout.smtp.pool.maxIdleTime Specifies how long in seconds a connection can be idle before it is closed by the background cleanup job. Default is 60 seconds. 30 scout.smtp.pool.maxConnectionLifetime Specifies how long in seconds a connection can be open before it is closed. This is to prevent connections from being open forever when sending emails on a regular basis. Default is 1h. 7200 scout.smtp.pool.waitForConnectionTimeout Max. wait time for SMTP connection in seconds. If the value is 0, callers will wait infinitely long for SMTP connections. Default is 300 seconds. 100","title":"SmtpHelper","component":"scout-docs","version":"22","name":"smtp-helper","url":"/scout-docs/22/technical-guide/common-concepts/smtp-helper.html","titles":[{"text":"SmtpServerConfig","hash":"smtpserverconfig","id":1},{"text":"Sending messages","hash":"sending-messages","id":2},{"text":"SmtpHelper Configuration","hash":"smtphelper-configuration","id":3},{"text":"Connection Pooling","hash":"connection-pooling-chapter","id":4},{"text":"SmtpConnectionPool Configuration","hash":"smtpconnectionpool-configuration","id":5}]},"45":{"id":45,"text":"This document is referring to a past Scout release. Please click here for the recent version. The Scout HTML UI requires a web browser with modern built-in technologies: HTML 5, CSS 3, JavaScript (ECMAScript 5). Scout does its best to support all browsers widely in use today by making use of vendor-specific prefixes, polyfills or other workarounds. However, some older or obscure browsers are not supported deliberately, simply because they are lacking basic capabilities or the required effort would be beyond reason. Here is a non-exhaustive list of supported browsers: Desktop Mozilla Firefox >= 69 Chromium (like Google Chrome, Microsoft Edge, Brave or Opera) >= 71 Apple Safari >= 12.1 Mobile (Due to the nature of mobile operating systems, it is hard to specify exact versions of supported browsers. Usually, the screen size and the device speed are the limiting factors.) iOS >= 13 Android >= 5","title":"Browser Support","component":"scout-docs","version":"22","name":"browser-support","url":"/scout-docs/22/technical-guide/user-interface/browser-support.html","titles":[]},"46":{"id":46,"text":"This document is referring to a past Scout release. Please click here for the recent version. JavaScript and CSS assets of a typical Scout application are built by Webpack using npm and Node.js. In order to make the building as easy as possible for you, there is a CLI module available. That module contains a default webpack and karma configuration and several build scripts you can use. The goal is to reduce the time you need to setup your build to a minimum. If you have created your Scout project using a Scout archetype, it should all be already setup for you. Nevertheless, you will get to a point where it is important to know how the building works in detail and how the several build tools are wired together. If you are there, this chapter should help you out. In every modern application you will have dependencies to other modules, either modules you created to separate your code, or third party modules like Scout. Such dependencies to other JavaScript modules are managed by the Node Package Manager (npm). So every module containing JavaScript or Less code needs to be a Node module with a package.json file that defines its dependencies. This setup gives you the possibility to easier integrate and update 3rd party JavaScript frameworks available in the huge npm registry. Scout itself is also published to that registry and will therefore be downloaded automatically once you execute npm install, as long as your package.json contains a Scout dependency. You will recognize a Scout module based on its name: all official Scout modules are published using the scope @eclipse-scout. The most important one is @eclipse-scout/core which contains the core runtime functionality. Other modules are @eclipse-scout/cli for the building support, @eclipse-scout/eslint-config for our ESLint rules, or @eclipse-scout/karma-jasmine-scout for enhanced testing support. In addition to Node module dependencies, a Scout application uses ES6 imports to define dependencies between each JavaScript files. So if you want to use a class or utility from @eclipse-scout/core, you’ll need to import that class or utility in your own JavaScript file. Listing 1. Importing ES6 modules import PersonFormModel from './PersonFormModel'; import {Form, models} from '@eclipse-scout/core'; export default class PersonForm extends Form { _jsonModel() { return models.get(PersonFormModel); } } In the code above there are two imports defined: the first one imports the file PersonFormModel into the variable PersonFormModel. The second one imports the class Form and the utility models from the scout core module. Notice that the first import directly addresses a specific file while the second import addresses the node module itself. This is possible because Scout provides an index file specifying all available exports. That file is linked in the package.json. If your application contains more than one Node modules as well, you can do the same. Scout provides a default Webpack configuration containing all the necessary settings for Webpack and the plugins needed for a typical Scout application setup. To make your application use the Scout defaults, you need to create a file called webpack.config.js in your Node module and reexport the Scout configuration. Listing 2. Using Scout’s default Webpack config const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { return baseConfig(env, args); }; If you don’t like the defaults you can easily adjust them by customizing the object returned by the baseConfig(env, args) call. Beside using the default configuration, you’ll need to configure some small things in order to make your application work. In this chapter we’ll have a look at these things you have to configure and the things that are provided by default. The main purpose of Webpack is to bundle the many small source files into one or a few larger JavaScript or CSS files which are included in the HTML files as resp. tags and therefore loaded by the browser. Scout does not provide any special bundling rules, but relies on the Webpack default configuration. It is optimized for best performance and user experience on modern browsers. If you want to customize the bundling please have a look at the SplitChunksPlugin of Webpack. To let Webpack know about your entry files you need to specify them in your webpack.config.js. Listing 3. Using Scout’s default Webpack config const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { const config = baseConfig(env, args); config.entry = { 'helloworld': './src/main/js/index.js', 'helloworld-theme': './src/main/js/theme.less', 'helloworld-theme-dark': './src/main/js/theme-dark.less' }; return config; }; In this example the application is called helloworld and there is a bundle created with the same name. In order to create the bundle, Webpack uses the entry file, which is index.js in this case, follows all the ES 6 imports and includes these files. It then extracts chunks into separate files based on the predefined Webpack default rules. So you don’t have to care about these chunks unless you want to customize it. Also notice that the same applies to CSS files. The above example defines 2 CSS bundles in addition to the JavaScript bundle: helloworld-theme.css and helloworld-theme-dark.css. There are no predefined chunks for CSS files, we just put all the CSS code in one big file. In addition to JavaScript and CSS resources bundled by webpack, your application will probably also require resources like images or fonts. Such resources should be placed in a resource folder, e.g. src/main/resources/WebContent if you use the Maven module structure, or just res otherwise. Because there are multiple modules that could provide such resources, you need to specify them in your webpack.config.js using the resDir array. Listing 4. Specifying res folders const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { args.resDirArray = ['src/main/resources/WebContent', 'node_modules/@eclipse-scout/core/res']; return baseConfig(env, args); }; In the snippet above the resDir array contains a folder of your module and a folder of Scout itself. The resource folder of Scout mainly contains the scoutIcons.woff, which is the icon font used by some Scout widgets. When the build runs all the folders specified by the resDir array are visited and the resources collected. These resources are then available under / (if you use the Scout backend). If you want to know how to start the build, have a look at the Command Line Interface (CLI). In order to use the latest EcmaScript features like the ES6 Modules but still support older browsers, Scout uses Babel to transpile ES6+ code into ES5. The transpiler is enabled by default if you use the Webpack configuration provided by Scout, so you don’t have to configure it by yourself. The CSS preprocessor used by Scout is Less, so the default webpack configuration already supports it by using the less-loader plugin. In order to profit from Scout`s less variables (see Styling]) we recommend to use Less as well. Since it is already configured, you won’t have to do anything but to write your CSS rules. Scout uses Karma as test runner for its unit tests. The tests itself are written with the test framework Jasmine. We also use some plugins like karma-jasmine-jquery, karma-jasmine-ajax or karma-jasmine-scout to make writing tests for a Scout application even easier. All this is configured in the file karma-defaults.js. If you want to use them too, you need to provide your own Karma file called karma.conf.js and import the defaults, similar to the Webpack Configuration. You can now adjust or override the defaults or just leave them as they are. To let Karma know about your tests, you need to define the entry point. Listing 5. karma.conf.js const baseConfig = require('@eclipse-scout/cli/scripts/karma-defaults'); module.exports = config => baseConfig(config, './src/test/js/test-index.js'); In the snippet above you see two things: The Scout defaults are imported and the entry point test-index.js is defined. This is all you need to do in this file if you are fine with the defaults. The file test-index.js defines where your unit tests are and what the context is for the Webpack build. Because a unit test is called a spec when using Jasmine, a typical test-index.js looks like this: Listing 6. karma.conf.js import {JasmineScout} from '@eclipse-scout/core/src/testing/index'; let context = require.context('./', true, /[sS]pec\\.js$/); JasmineScout.runTestSuite(context); This code tells the karma-webpack plugin to require all files ending in Spec.js.This will generate one big test bundle, but since source maps are enabled, you can debug the actual test files easily.The last line installs the given context and also runs a Scout app so that the Scout environment is properly set up. After running the tests, all results are put in a folder called test-results.There is a sub folder for each browser that executed the tests containing a file called test-results.xml.Since the karma-defaults.js uses the junit reporter, the file can be interpreted by any tool supporting the junit format, e.g. Jenkins. The Scout CLI is a bunch of npm-scripts that help you building and testing your application.In order to use them you need to add a devDependency to @eclipse-scout/cli to the package.json of your module.We also suggest to add some scripts to make the execution easier.If you use the Scout archetype, the following will be created for you. Listing 7. CLI dependency and scripts in package.json \"scripts\": { \"testserver:start\": \"scout-scripts test-server:start\", \"testserver:stop\": \"scout-scripts test-server:stop\", \"test:ci\": \"scout-scripts test:ci\", \"build:dev\": \"scout-scripts build:dev\", \"build:prod\": \"scout-scripts build:prod\", \"build:all\": \"scout-scripts build:dev && scout-scripts build:prod\", \"build:dev:watch\": \"scout-scripts build:dev:watch\" }, \"devDependencies\": { \"@eclipse-scout/cli\": \"10.0.0\" } Before you can open your application in the browser, you need to build it. The build takes all your source code and resources and creates the artifacts needed for the browser according to your Webpack Configuration. Once the build is complete all the produced artifacts are put in the target/dist folder. The target/dist folder contains three sub folders: dev: contains not minified versions of the JS and CSS bundles with Source Maps. The source maps are necessary to map the bundles to the actual source files which makes debugging a lot easier. The Scout server delivers such bundles if it runs in dev mode (scout.devMode=true). prod: contains minified versions of the JS and CSS bundles with restricted source maps (the maps don’t contain the actual source code, only the information necessary to create meaningful stack traces, see also the devtool property nosources-source-map). Content hashes are generated and added to the bundles for optimal cashing. The Scout server delivers such bundles if it runs in production mode (scout.devMode=false). res: contains all static resources from the various resource folders specified by the resDir array, see Static Web Resources. If the property scout.urlHints.enabled is set to true, the dev files can be requested on the fly even if the server does not run in devMode. Just add the query parameter ?debug=true and the files in the dev folder instead of the ones in the prod folder are delivered. This can be very useful to debug a deployed application. In order to start the build, use the following command: npm run build:dev This will fill the dev and res folders with the appropriate files. To make the files available to your browser you need to start a webserver. When using the Scout backend just start the class JettyServer. Once the build is complete and Jetty runs, you can open your application in the browser. If you now make adjustments on your JS or CSS files, you would have to rerun the buid script, which could be time consuming and annoying. To make your developer life easier you can run the following script instead: npm run build:dev:watch This will also build your application but additionally starts a watcher that watches your source code. As soon as you change your code that watcher will notice and start a build. Since it knows which files changed, only these files need to be rebuilt which makes it a lot faster. The build commands accept some arguments you can use to adjust the build without modifying your webpack config file. The following arguments are available: mode: development or production. This argument is set automatically when using build:dev or build:prod. clean: true, to clean the target/dist folder before each build. Default is false if watcher is enabled (build:dev:watch), otherwise true. progress: true, to show build progress in percentage. Default is true. profile: true, to show timing information for each build step. Default is false. resDirArray: an array containing directories which should be copied to dist/res. stats: object to control the build output. There are some presets available as shortcuts (e.g. 'detailed' or 'errors-only'), see also: https://webpack.js.org/configuration/stats/. In order to set an argument make sure to separate the arguments using -- from the command. Example: npm run build:dev -- --progress false All arguments are passed to the webpack config file as parameter args which is the second parameter. The first parameter called env is actually just a convenience accessor to args.env and does not contain system environment variables. If you want to access them just use the regular node syntax process.env. Before you can run your unit tests you need to properly setup the files as described in Karma Configuration. If all is setup correctly, you can run your tests using the following command: npm run test:ci This will execute all unit tests with the headless browser. The default headless browser is Chrome, so you need to make sure Chrome is installed. This includes your Continuous Integration Environment, if you plan to automatically run the tests on a regular basis (e.g. with Jenkins). The above command will execute the tests once and does not watch for changes. This is typically not desired during development. When you are actively developing a component and want to run your tests while you are developing, you can use the following command: npm run testserver:start This will start a real browser and enable the watch mode. This means every time you adjust your code and save it, the web pack build is started, the browser reloaded and your tests executed. If you don’t like the automatic browser reloading, you can press debug on the top right corner of the browser or manually navigate to http://localhost:9876/debug.html. The test commands accept some arguments you can use to adjust the karma runner without modifying your karma config file. All passed arguments are merged with the karma config object, so all karma configuration options are available (see http://karma-runner.github.io/4.0/config/configuration-file.html). Example usage: npm run test:ci -- --junitReporter.outputDir=custom-out-dir Please note that no type conversion happens which is especially relevant for boolean arguments. If you for example want to disable the watcher, you cannot use --auto-watch false. Instead, you would have to use --no-auto-watch. In addition to the karma configuration options you can also pass the webpack arguments (checkout Arguments for a list of available arguments). To do that, you need to use the argument called webpackArgs. Example: npm run testserver:start -- --webpackArgs.progress=false test:ci automatically disables the webpack progress because you don’t want the progress when the tests run on a continuous integration server. In case you need to test the files built by build:prod locally, follow this procedure: Stop the UI server. Run npm run build:prod, this script will copy minified script files to the /dist folder. Start the UI server. Stopping and starting the UI server makes sure the server-side script cache is cleared. Start the application with the URL parameter /?debug=false. Check your index.html in the browser. Each referenced script or CSS file should have a fingerprint, example: yourapp-2c6053b2fdf5b816fae5.min.js. If you set the config property scout.devMode to false instead of using the URL parameter, the resources will be loaded from the Java classpath. In that case you need to additionally copy the content of the dist folder to target/classes before starting the UI server. Or you can also set scout.loadWebResourcesFromFilesystem to true to disable classpath loading (see also LoadWebResourcesFromFilesystemConfigProperty). For the Scout code base we use ESLint to analyze the JavaScript code. The ruleset we use is stored in the module @eclipse-scout/eslint-config. If you like, you can use the same ruleset for your application, but you don’t have to. You can use your custom config or even a different linter. When using the Scout archetype to generate your app, the ESLint configuration is already setup for you and you don’t need to do the following steps. In order to use the Scout eslint-config, you need to add devDependencies to the modules @eclipse-scout/eslint-config and eslint in your package.json. Listing 8. ESLint Dependencies \"devDependencies\": { \"@eclipse-scout/eslint-config\": \"22.0.0\", \"eslint\": \"8.10.0\" } Then create a file called .eslintrc.js with the following content: Listing 9. .eslintrc.js module.exports = { extends: '@eclipse-scout' }; This tells ESLint to inherit the configuration from the Scout module. In order to run the analysis, you can either use an IDE that supports it (e.g. IntelliJ), or the command line. npx eslint . If the command takes very long and prints a lot of errors, you may have to ignore the target/dist folder, see ESLint Ignore. The command above will analyze your current directory including all sub directories. Depending on your environment, it is likely that you’ll see some errors regarding linebreaks. This is because the Scout config enforces the UNIX format (LF). You can now either convert the linebreaks of your files to that format and adjust your editor to always use the UNIX format, or you can disable the rule. To do that, just add the following to your .eslintrc.js: Listing 10. Disabling the linebreak rule rules: { 'linebreak-style': 'off' } Now run the command again to make the linebreak errors disappear. If you plan to configure your IDE to use the UNIX linebreak format, we recommend having a look at Editor Config. The file can be interpreted by various IDEs. Just add end_of_line=lf to that file and you are done. If you use some bleeding edge EcmaScript features that are not yet part of the official specification but already supported by Babel, you should add a dependency to the babel-eslint plugin. Otherwise the analysis will probably report an error regarding these features. One example of such a feature is class properties. This allows the definition of static class members. Scout itself uses that feature, that is why the Scout CLI has a dependency to babel-plugin-proposal-class-properties. Listing 11. Class properties class Example { static anObject = {}; } If you plan to use such features too, you should enable the babel eslint parser. To do that, add the following devDependencies to your package.json: Listing 12. Babel-eslint dependencies \"devDependencies\": { \"@babel/eslint-parser\": \"7.16.5\", \"@babel/eslint-plugin\": \"7.16.5\" } To enable it, configure your .eslintrc.js in the following way: Listing 13. Babel-eslint configuration plugins: ['@babel'], parser: '@babel/eslint-parser', parserOptions: { requireConfigFile: false } That’s it. Remember: ESLint itself already supports a lot of modern EcmaScript code. You only need to enable the babel eslint parser if you want to use the latest features which are not yet supported by ESLint. Similar to .gitignore, you can create a file called .eslintignore to exclude specific files or directories from the analysis. Because analyzing the build output probably does not make any sense, we recommend to at least ignore the target folder. The only thing you need to do is to create that file and add a line with the word target. For more details please see the official ESLint documentation at https://eslint.org/docs/user-guide/configuring#eslintignore.","title":"Build Stack","component":"scout-docs","version":"22","name":"build-stack","url":"/scout-docs/22/technical-guide/user-interface/build-stack.html","titles":[{"text":"Dependency Management","hash":"dependency-management","id":1},{"text":"ES6 Modules","hash":"es6-modules","id":2},{"text":"Webpack Configuration","hash":"webpack-configuration","id":3},{"text":"Bundling","hash":"bundling","id":4},{"text":"Static Web Resources","hash":"static-web-resources","id":5},{"text":"EcmaScript Transpiler","hash":"ecmascript-transpiler","id":6},{"text":"CSS Preprocessor","hash":"css-preprocessor","id":7},{"text":"Karma Configuration","hash":"karma-configuration","id":8},{"text":"Reporting","hash":"reporting","id":9},{"text":"Command Line Interface (CLI)","hash":"command-line-interface-cli","id":10},{"text":"Building","hash":"building","id":11},{"text":"Arguments","hash":"webpack-arguments","id":12},{"text":"Testing","hash":"testing","id":13},{"text":"Arguments","hash":"arguments","id":14},{"text":"Test prod scripts on your local machine","hash":"test-prod-scripts-on-your-local-machine","id":15},{"text":"ESLint","hash":"eslint","id":16},{"text":"Babel Dependency","hash":"babel-dependency","id":17},{"text":"ESLint Ignore","hash":"eslint-ignore","id":18}]},"47":{"id":47,"text":"This document is referring to a past Scout release. Please click here for the recent version. The Desktop Layout can be configured using the IDesktop.setBenchLayoutData method. This property is observed and might be changed during the application lifecycle. The desktop consists out of 9 view stacks (see Figure 1). Each form can be assigned to a single view stack using the property DisplayViewId (IForm.getConfiguredDisplayViewId). If multiple forms are assigned to the same view stack the views will be displayed as tabs where the top form is visible and the corresponding tab selected. Tabs are only visible if the form does have a title, subtitle or an image. Figure 1. Desktop Bench overview The east, center and west columns are separated with splitters which can be moved according to the layout data properties. Each column is split into a north, center and south part. Within a column the north, center and south parts can not differ in their width. The modifications (splitter movements) are cached when a cache key (BenchLayoutData.withCacheKey) is set. In case the cache key is null the layout starts always with the initial values. An example of a bench layout data configuration with a fixed north (N) view stack and a south (S) view stack with a minimal size. See org.eclipse.scout.rt.client.ui.desktop.bench.layout.FlexboxLayoutData API for the documentation of the properties. desktop.setBenchLayoutData( (1) new BenchLayoutData() .withCacheKey(\"a-cache-key\") (2) .withCenter( (3) new BenchColumnData() .withNorth(new FlexboxLayoutData().withGrow(0).withShrink(0).withInitial(280).withRelative(false)) (4) .withCenter(new FlexboxLayoutData()) (5) .withSouth(new FlexboxLayoutData().withShrink(0).withInitial(-1)))); (6) 1 set the BenchLayoutData to the desktop. 2 set a cache key to store the layout modifications (dragging splitters) to the session store. Aware the settings are stored to the browsers session store they are not transferred over different browsers nor systems. 3 configure the center column (N, C, S). 4 The north part is fixed in size so the splitter between north (N) and center © view stack is disabled. The size is fixed to 280 pixel. 5 Use default for the center © view stack. 6 The south part is using the UI height as initial size and is growable but not shrinkable.","title":"Desktop","component":"scout-docs","version":"22","name":"desktop","url":"/scout-docs/22/technical-guide/user-interface/desktop.html","titles":[{"text":"Desktop Bench Layout","hash":"desktop-bench-layout","id":1}]},"48":{"id":48,"text":"This document is referring to a past Scout release. Please click here for the recent version. The extensibility concepts of Scout JS allow you to extend or even replace methods of Scout widgets or objects. You can also use it to extend your own objects or objects from a Scout based third party library. There are mainly two ways to extend an object: Extension by Sub-Classing Extension by Composition Extending an object using sub-classing is simple and straight forward. It can either be used to create a custom widget and only use it for certain cases. And it can even be used to replace a specific widget completely, so your widget will be used every time the original widget is requested. To extend from a widget, just create a new class, extend from the desired widget class and override the methods you want to adjust. Listing 1. SpecialStringField.js import {StringField} from '@eclipse-scout/core'; export default class SpecialStringField extends StringField { // Override desired methods } Then, register it in your index file as usual and use it in your code by creating a new instance with scout.create('yournamespace.SpecialStringField') or as part of a model: Listing 2. index.js // ... export {default as SpecialStringField} from './SpecialStringField'; // ... window.yournamespace == Object.assign(window.yournamespace || {}, self); Listing 3. ExampleFormModel.js export default () => ({ rootGroupBox: { objectType: 'GroupBox', fields: [ { id: 'SpecialField', objectType: 'yournamespace.SpecialStringField', label: 'Your special field' } ] } }); If you want to replace every StringField in your application with SpecialStringField, you need to register a new object factory for the objectType StringField as follows: Listing 4. Adding a new object factory registration import {SpecialStringField} from './index'; import {scout} from '@eclipse-scout/core'; scout.addObjectFactories({ 'StringField': () => new SpecialStringField() }); More details can be found in the chapter Object Factory. If you need to extend a widget that uses a model (see Creating a Widget Declaratively), you may have to extend that model as well. To do so, extend the widget as described above and either adjust the widgets in the init function directly. Listing 5. ExtendedForm.js import ExampleForm from './ExampleForm'; export default class ExtendedForm extends ExampleForm { _init(model) { super._init(model); this.widget('SpecialField').setLabel('New label for the special field'); } } Or, for more complex cases, you can put your model adjustments in a separate file and use the declarative approach. To do so, override the _jsonModel method and use models.extend to adapt the original model. Listing 6. ExtendedForm.js with separate model import {models} from '@eclipse-scout/core'; import ExampleForm from './ExampleForm'; import ExtendedFormModel from './ExtendedFormModel'; export default class ExtendedForm extends ExampleForm { _jsonModel() { let baseModel == super._jsonModel(); return models.extend(ExtendedFormModel, baseModel); } } Then, create a new file that will contain your model extensions. Use the target keyword to specify which widget should be adjusted. With the operation keyword you define, whether properties should be adjusted (appendTo) or new objects should be inserted (insert). The following example contains an extension for the field with the id SpecialField that sets a new value for the label. Listing 7. ExtendedFormModel.js export default () => ({ type: 'extension', extensions: [ { operation: 'appendTo', target: { id: 'SpecialField' }, extension: { label: 'New label for the special field' } } ] }); Extension by Composition allows to have multiple, independent extensions of a Scout object. It also allows the adjustment of super classes of objects from which it is not possible to inherit, e.g. FormField or even Widget. This extension feature works by wrapping functions on the prototype of a Scout object with a wrapper function which is provided by an extension. The extension feature doesn’t rely on subclassing, instead we simply register one or more extensions for a single Scout class. When a function is called on an extended object, the functions are called on the registered extensions first. Since a Scout class can have multiple extensions, we speak of an extension chain, where the last element of the chain is the original (extended) object. The base class for all extensions is Extension. This class is used to extend an existing Scout object. In order to use the extension feature you must subclass Extension and implement an init function, where you register the functions you want to extend. Example: import {Extension, StringField} from '@eclipse-scout/core'; export default class MyExtension extends Extension { init() { this.extend(StringField.prototype, '_init'); } } Then you implement functions with the same name and signature on the extension class. Example: _init(model) { // Call the original _init() method of the StringField class this.next(model); // Extend the instance with a new property called bar with the value foo // -> EVERY string field now has this new property this.extended.setProperty('bar', 'foo'); } The extension feature sets two properties on the extension instance before the extended method is called. These two properties are described below. The function scope (this) is set to the extension instance when the extended function is called. next is a reference to the next extended function or the original function of the extended object, in case the current extension is the last extension in the extension chain. extended is the extended or original object. All extensions must be registered in the _installExtensions function of your App (make sure to use the namespace which is defined in your index.js instead of yournamespace). You can find your app in your entrypoint file that is linked in your webpack.config.js. If you already have a custom App, just override _installExtensions and register the extension. Otherwise, you need to create a custom App first by extending from the Scout App (or RemoteApp for Scout Classic) and make sure this new app is initialized rather than the default one. Listing 8. CustomApp.js import {App, Extension} from '@eclipse-scout/core'; export default class CustomApp extends App { _installExtensions() { Extension.install([ 'yournamespace.MyExtension' ]); } } Listing 9. Entry point file import CustomApp from './CustomApp'; let app == new CustomApp(); app.init(); Required version: The API described here requires Scout version 4.2 or newer. When working with large business applications it is often required to split the application into several modules. Some of those modules may be very basic and can be reused in multiple applications. For those it makes sense to provide them as binary library. But what if you have created great templates for your applications but in one special case you want to include one more column in a table or want to execute some other code when a pre-defined context menu is pressed? You cannot just modify the code because it is a general library used everywhere. This is where the extensibility concept helps. To achieve this two new elements have been introduced: Extension Classes: Contains modifications for a target class. Modifications can be new elements or changed behavior of existing elements. Extension Registry: Service holding all Extensions that should be active in the application. The Scout extensibility concept offers three basic possibilites to extend existing components: Extensions Changing behavior of a class Contributions Add new elements to a class Moves Move existing elements within a class The following chapers will introduce this concepts and present some examples. Extensions contain modifications to a target class. This target class must be extensible. All elements that implement org.eclipse.scout.rt.shared.extension.IExtensibleObject are extensible. And for all extensible elements there exists a corresponding abstract extension class. Examples: AbstractStringField is extensible. Therefore, there is a class AbstractStringFieldExtension. AbstractCodeType is extensible. Therefore, there is a class AbstractCodeTypeExtension. Target classes can be all that are instanceof those extensible elements. This means an AbstractStringFieldExtension can be applied to AbstractStringField and all child classes. Extensions contain methods for all Scout Operations (see Exec Methods). Those methods have the same signature except that they have one more input parameter. This method allows you to intercept the given Scout Operation and execute your own code even though the declaring class exists in a binary library. It is then your decision if you call the original code or completely replace it. To achieve this the Chain Pattern is used: All extensions for a target class are called as part of a chain. The order is given by the order in which the extensions are registered. And the original method of the Scout element is an extension as well. Extensions to specific types of elements are prepared as abstract classes: AbstractGroupBoxExtension AbstractImageFieldExtension The following image visualizes the extension chain used to intercept the default behavior of a component: The following example changes the initial value of a StringField called NameField: Listing 10. Extension for NameField public class NameFieldExtension extends AbstractStringFieldExtension { public NameFieldExtension(NameField owner) { super(owner); } @Override public void execInitField(FormFieldInitFieldChain chain) { chain.execInitField(); // call the original exec init. whatever it may do. getOwner().setValue(\"FirstName LastName\"); // overwrite the initial value of the name field } } Note: The type parameter of the extension (e.g. NameField) denotes the element which is extended. The extension needs to be registeres when starting the application: Listing 11. Register extension for NameField Jobs.schedule(() -> BEANS.get(IExtensionRegistry.class).register(NameFieldExtension.class), Jobs.newInput() .withRunContext(ClientRunContexts.copyCurrent()) .withName(\"register extension\")); The section before explained how to modify the behavior of existing Scout elements. This section will describe how to contribute new elements into existing containers. This is done by using the same mechanism as before. It is required to create an Extension too. But instead of overwriting any Scout Operation we directly define the new elements within the Extension. A lot of new elements can be added this way: Fields, Menus, Columns, Codes, …​ Some new elements may also require a new DTO (FormData, TablePageData, TableData) to be filled with data from the server. The corresponding DTO for the extension is automatically created when using the SDK 4.2 or newer and having the @Data annotation specified on your extension. As soon as the DTO extension has been registered in the IExtensionRegistry service it is automatically created when the target DTO is created and will also be imported and exported automatically! The following example adds two new fields for salary and birthday to a PersonForm. Please note the @Data annotation which describes where the DTO for this extension should be created. Listing 12. Extension for PersonForm /** * Extension for the MainBox of the PersonForm */ @Data(PersonFormMainBoxExtensionData.class) public class PersonFormMainBoxExtension extends AbstractGroupBoxExtension { public PersonFormMainBoxExtension(MainBox ownerBox) { super(ownerBox); } @Order(2000) @ClassId(\"fda7cd67-0df1-4194-9d70-22a9b3ce890d\") public class SalaryField extends AbstractBigDecimalField { } @Order(3000) @ClassId(\"478037fb-759f-4fa1-b737-c77f903c6881\") public class BirthdayField extends AbstractDateField { } } Beware: Field names must be unique throughout form and extensions (e.g. there may not be a field on the form or another extension contributing to the same form with the same field name). However, it is possible to create templates (e.g. a group box as container with its own @FormData annotation) which is added multiple times through a form or extensions. The extension data must be registered manually in the job like in the example before: Listing 13. Register extension for PersonForm BEANS.get(IExtensionRegistry.class).register(PersonFormMainBoxExtension.class); Then the SDK automatically creates the extension DTO which could look as follows. Please note: The DTO is generated automatically, but you have to register the generated DTO manually! Listing 14. Extension Data for PersonForm @Extends(PersonFormData.class) @Generated(value = \"org.eclipse.scout.docs.snippets.person.PersonFormMainBoxExtension\", comments = \"This class is auto generated by the Scout SDK. No manual modifications recommended.\") public class PersonFormMainBoxExtensionData extends AbstractFormFieldData { private static final long serialVersionUID = 1L; public Birthday getBirthday() { return getFieldByClass(Birthday.class); } public Salary getSalary() { return getFieldByClass(Salary.class); } @ClassId(\"478037fb-759f-4fa1-b737-c77f903c6881-formdata\") public static class Birthday extends AbstractValueFieldData { private static final long serialVersionUID = 1L; } @ClassId(\"fda7cd67-0df1-4194-9d70-22a9b3ce890d-formdata\") public static class Salary extends AbstractValueFieldData { private static final long serialVersionUID = 1L; } } You can also access the values of the DTO extension as follows: Listing 15. Access extended fields // create a normal FormData // contributions are added/imported/exported automatically PersonFormData data = new PersonFormData(); // access the data of an extension PersonFormMainBoxExtensionData c = data.getContribution(PersonFormMainBoxExtensionData.class); c.getSalary().setValue(new BigDecimal(\"200.0\")); Extending a AbstractForm and one (or more) of its AbstractFormHandlers that can be achieved as follows: Listing 16. Extension for PersonForm public class PersonFormExtension extends AbstractFormExtension { public PersonFormExtension(PersonForm ownerForm) { super(ownerForm); } @Override public void execInitForm(FormInitFormChain chain) { chain.execInitForm(); // Example logic: Access the form, disable field getOwner().getNameField().setEnabled(false, true, true); } public void testMethod() { MessageBoxes.create().withHeader(\"Extension method test\").withBody(\"A method from the form extension was called\").show(); } public static class NewFormHandlerExtension extends AbstractFormHandlerExtension { public NewFormHandlerExtension(NewHandler owner) { super(owner); } @Override public void execPostLoad(FormHandlerPostLoadChain chain) { chain.execPostLoad(); // Example logic: Show a message box after load MessageBoxes.create().withHeader(\"Extension test\").withBody(\"If you can read this, the extension works correctly\").show(); // Access element from the outer extension. PersonFormExtension extension = ((AbstractForm) getOwner().getForm()).getExtension(PersonFormExtension.class); extension.testMethod(); } } } There are a few things to note about this example: It is only necessary to register the outer form extension, not the inner handler extension as well. The inner handler extension must be static, otherwise an Exception will occur when the extended form is being started! You can access the element you are extending by calling getOwner(). Since you cannot access elements from your form extension directly from the inner handler extension (because it is static), you will need to retrieve the form extension via the getExtension(Class>) method on the extended object, as done here to retrieve the form extension from the form handler extension. You can also move existing Scout elements to other positions. For this you have to register a move command in the IExtensionRegistry. As with all extension registration it is added to the extension registration Job in your Activator class: Listing 17. Move NameField to LastBox BEANS.get(IExtensionRegistry.class).registerMove(NameField.class, 20d, LastBox.class); The new extensibility concept is added on top of all existing extension possibilities like injection or sub-classing. Therefore, it works together with the current mechanisms. But for some use cases (like modifying template classes) it offers a lot of benefits. Therefore no migration is necessary. The concepts do exist alongside each others. However there is one impact: Because the Scout Operation methods are now part of a call chain they may no longer be invoked directly. So any call to e.g. execValidateValue() is no longer allowed because this would exclude the extensions for this call. The Scout SDK marks such calls with error markers in the Eclipse Problems view. If really required the corresponding intercept-Method can be used. So instead directly calling myField.execChangedValue you may call myField.interceptChangedValue().","title":"Extensibility","component":"scout-docs","version":"22","name":"extensibility","url":"/scout-docs/22/technical-guide/user-interface/extensibility.html","titles":[{"text":"Scout JS Extensibility","hash":"scout-js-extensibility","id":1},{"text":"Extension by Sub-Classing","hash":"extension-by-sub-classing","id":2},{"text":"Extending a Model","hash":"extending-a-model","id":3},{"text":"Extension by Composition","hash":"extension-by-composition","id":4},{"text":"Scout Classic Extensibility","hash":"scout-classic-extensibility","id":5},{"text":"Overview","hash":"overview","id":6},{"text":"Extensions","hash":"extensions","id":7},{"text":"Extending a StringField example","hash":"extending-a-stringfield-example","id":8},{"text":"Contributions","hash":"contributions","id":9},{"text":"Extending a form and a handler","hash":"extending-a-form-and-a-handler","id":10},{"text":"Move elements","hash":"move-elements","id":11},{"text":"Migration","hash":"migration","id":12}]},"49":{"id":49,"text":"This document is referring to a past Scout release. Please click here for the recent version. A form field is a special kind of a widget. It is mainly used on forms but may actually be added to any other widget. Every form field contains of the following parts: Figure 1. Parts of a form field Typical form fields are StringField, DateField or TableField. All these fields have the API of FormField in common (like setLabel(), setErrorStatus(), etc.) but also provide additional API. Some form fields are actually just a wrapper for another widget. This is for example the case for the TableField. The Table itself may be used stand-alone, just call scout.create('Table', {}). But if you want to use it in a GroupBox, which is a form field, you have to use a TableField wrapping the Table.","title":"Form Field","component":"scout-docs","version":"22","name":"form-field","url":"/scout-docs/22/technical-guide/user-interface/form-field.html","titles":[]},"50":{"id":50,"text":"This document is referring to a past Scout release. Please click here for the recent version. A form is typically used for two purposes: Allowing the user to enter data in a structured way Displaying the data in a structured way This is achieved by using Form Field]s. Every form has one root group box (also called main box) which has 1:n form fields. The form fields are layouted using the logical grid layout, unless no custom layout is used. This makes it easy to arrange the fields in a uniform way. A form may be displayed in various ways, mainly controlled by the property displayHint. The following display hints are available by default: view: the form will be opened in a tab and will take full width and height of the bench dialog: the form will be opened as overlaying dialog and will be as width and height as necessary popup-window: the form will be opened in a separate browser window (please note that this feature does not work properly with Internet Explorer) To display the form, just set one of the above display hints and call form.open(). Beside opening the form as separate dialog or view, you can also embed it into any other widget because it is actually a widget by itself. Just call form.render() for that purpose. When working with forms, you likely want to load, validate and save data as well. The form uses a so called FormLifecycle to manage the state of that data. The lifecycle is installed by default, so you don’t have to care about it. So whenever the user enters some data and presses the save button, the data is validated and if invalid, a message is shown. If it is valid the data will be saved. The following functions of a form may be used to control that behavior. open: calls load and displays the form once the loading is complete. load: calls _load and importData which you can implement to load the data and then marks the fields as saved to set their initial values. Finally, a postLoad event is fired. save: validates the data by checking the mandatory and validation state of the fields. If every mandatory field is filled and every field contains a valid value, the exportData and _save functions are called which you can implement to save the data. After that every field is marked as saved and the initial value set to the current value. reset: resets the value of every field to its initial value marking the fields as untouched. ok: saves and closes the form. cancel: closes the form if there are no changes made. Otherwise, it shows a message box asking to save the changes. close: closes the form and discards any unsaved changes. abort: called when the user presses the \"x\" icon. It will call close if there is a close menu or button, otherwise cancel. If you need to perform form validation which is not related to a particular form-field, you can implement the _validate function. This function is always called, even when there is no touched field. If you embed the form into another widget, you probably don’t need the functions open, ok, close, cancel and abort. But load, reset and save may come in handy as well. Because it is quite common to have a button activating one of these functions (like an 'ok' or 'cancel' button), the following buttons (resp. menus because they are used in the menu bar) are available by default: OkMenu, CancelMenu, SaveMenu, ResetMenu, CloseMenu.","title":"Form","component":"scout-docs","version":"22","name":"form","url":"/scout-docs/22/technical-guide/user-interface/form.html","titles":[{"text":"Form Lifecycle","hash":"form-lifecycle","id":1}]},"51":{"id":51,"text":"This document is referring to a past Scout release. Please click here for the recent version. The HTML document parser is only available in the Scout UI server. If your Scout JS application uses a different backend, you cannot use the features described in this chapter. The class HtmlDocumentParser is used by the Scout UI server in order to create dynamic HTML output on the server-side. Like JSP the parser supports a set of tags that are processed by the sever. The main purpose of the parser is to provide functions used for login.html and index.html, like bootstrapping and localization before JavaScript can be executed in the browser. Note: some tags like scout-version and scout-text will be removed from the DOM once the Scout App is initialized. Outputs the context-path (or the root-directory) of the deployed web application as base tag in the HTML document. Example: Output: This tag is used for server-side inlcudes, which means you can embed the HTML content of another file into the current HTML document. This avoids unnecessary code duplication by referencing the same fragement in multiple HTML documents. Example: Depending on the current user language provided by the browser, this tag outputs a list of localized text strings. The texts are used to display error-messages during login in the correct language, because at this point we don’t have a Scout session and thus no user language. The parser replaces the message tag through scout-text tags. These tags will be read by scout.texts#readFromDOM. Example: Output: Converts the tag to a regular script tag in the HTML document so that the referenced JavaScript bundle can be loaded by the browser. Prior to that, the file name will be augmented depending on Scout’s runtime properties: if caching is enabled an additional fingerprint is added to the filename. If minifying is enabled the suffix \".min\" is appended to the filename. This tag may be used if custom chunks are defined in webpack.config.js and names of these chunks are known at development time. Example: Output: Writes all script tags in the HTML document which contain the webpack entryPoint name given. This requires that no custom splitChunks are defined. It automatically includes all chunks that are required by the given entry point. The entry point name must match the name in the entry section of the webpack.config.js file. Example: Output: Converts the tag to a regular style tag in the HTML document so that the referenced CSS bundle can be loaded by the browser. Prior to that, the file name will be augmented depending on Scout’s runtime properties: if caching is enabled an additional fingerprint is added to the filename. If minifying is enabled the suffix \"-min\" is appended to the filename. Example: Output: Writes all link tags in the HTML document which contain the webpack entryPoint name given. This requires that no custom splitChunks are defined. It automatically includes all chunks that are required by the given entry point. The entry point name must match the name in the entry section of the webpack.config.js file. Example: Output: Outputs the current version of the Scout application as scout-version tag in the HTML document. This tag is read by scout.App#_initVersion. Example: Output:","title":"HTML Document Parser","component":"scout-docs","version":"22","name":"html-document-parser","url":"/scout-docs/22/technical-guide/user-interface/html-document-parser.html","titles":[{"text":"scout:base","hash":"scoutbase","id":1},{"text":"scout:include","hash":"scoutinclude","id":2},{"text":"scout:message","hash":"scoutmessage","id":3},{"text":"scout:script","hash":"scoutscript","id":4},{"text":"scout:scripts","hash":"scoutscripts","id":5},{"text":"scout:stylesheet","hash":"scoutstylesheet","id":6},{"text":"scout:stylesheets","hash":"scoutstylesheets","id":7},{"text":"scout:version","hash":"scoutversion","id":8}]},"52":{"id":52,"text":"This document is referring to a past Scout release. Please click here for the recent version. A lot of Scout widgets support icons. For instance a menu item can show an icon next to the menu text. Icons in Scout can be either a bitmap image (GIF, PNG, JPEG, etc.), an SVG or a character from an icon-font. An example for an icon-font is the scoutIcons.woff which comes shipped with Scout. It’s a good practice to define the available icons in your application in a class that defines each icon as a constant. Create a class Icons in the shared module of your project. These constants should be references, when you set the IconId property in your code. For bitmap images you simply specify the filename of the image file without the file extension. Place all your icon files in the resource folder of your client module. Assuming your project name is \"org.scout.hello\", the correct location to store icon files would be: org.scout.hello.client/ # Client project directory src/main/resources/ # Resources directory org/scout/hello/client/icons/ # Path to icons application_logo.png person.png ... Listing 1. Icons.java // Bitmap image (references icons/application_logo.png) public static final String ApplicationLogo = \"application_logo\"; // Character from icon-font scoutIcons.woff (default) public static final String Calendar =\"font:\\uE003\"; // Character from a custom icon-font public static final String Phone =\"font:awesomeIcons \\uF095\"; Listing 2. Usage of iconId in a Scout widget @Override protected String getConfiguredIconId(){ return Icons.Calendar; } The icons used by Scout itself are mainly font icons. Even though font icons are scalable, an icon can get very thick when the size is increased, which is not always desired. To overcome that, Scout icons come in 2 flavors: regular and light. The regular icons can be used, if the icon is displayed at about 16px. This is the case for most widgets (menu, button etc.) If the icon should be displayed larger, the light icons can be used. To use a light icon for your custom widget, just set the font-weight to @icon-font-weight-light. If you create a custom icon font (or use an existing one), you may want to use icons that are compatible with the Scout icons in terms of line width. This allows you to use the Scout icons and your custom icons side by side. Alternatively, only use your custom icons and forget about the Scout icons. The scout icons use the following dimensions: Regular: 1.5px line width and 24px artboard height Light: 1px line width and 24px artboard height You can use your own icon font. The required file format for an icon font is .woff. For the following examples we assume the name of your font file is awesomeIcons.woff. The following steps are required: Place the font file in the WebContent/fonts directory of your html.ui module. This makes it available for http requests on the URL http://[base]/fonts/awesomeIcons.woff. Create a CSS/LESS definition to reference the icon font in stylesheets (e.g. in a file called fonts.less). Make sure the definition is added to the index.less of your project. Listing 3. The CSS/LESS font definition should look like this: @font-face { font-family: awesomeIcons; font-weight: normal; src: url('fonts/awesomeIcons.woff') format('woff'); } /* Overrides definitions in fonts.css > .font-icon * Use iconId 'font:awesomeIcons [character]' in Scout model. * See icons.js and usage of this class to see how iconId is used. */ .font-awesomeIcons { font-family: awesomeIcons, @font-default-family; } To check if your CSS definition is correct, you should download the CSS file directly via URL and check if the CSS file contains the required font definition. Have a look at your index.html to find the path to your CSS (e.g. http://[base]/yourapp-theme.css). When you request resources from the WebContent folder via http, Scout will find resources from other modules on the classpath too. Thus the scoutIcons.woff is always available in a Scout project. However, you must avoid naming conflicts, since at runtime all files exist on the same classpath. Here’s what we do to create and maintain our own icon font scoutIcons.woff. There may be other methods to achieve the same. To create and modify our icon font we use the online application IcoMoon. IcoMoon allows you to assemble a set of icons from various sources (e.g. FontAwesome or custom SVG graphics) and create a font file from that set. You can export/import your icon set from and to IcoMoon, and you should store the files exported from IcoMoon in a SCM system like GIT. IcoMoon stores all important data in the file selection.json. Make sure you also store the raw SVG graphics you’ve uploaded to IcoMoon in your SCM, in case you have to change a single icon later. To edit the icon font in IcoMoon follow these steps: Import selection.json in IcoMoon, click on the \"Import Icons\" button. With the Select tool (arrow) you select the icons you want to add to your set. You can also add one or more characters from other icon fonts like FontAwesome by choosing Add Icons From Library…​ Your can import your custom SVG graphics with Import to Set, which you find in the hamburger menu on the icon set. The SVG graphic should have the same size as the other icons in the set and must use only a single color, black. The background must be transparent. Hint: the filename of the SVG graphic should contain the unicode of the character in the font in order to simplify maintencance. Only use unicodes from the Private Use Area from U+E000 to U+F8FF. When you’re happy with your icon set, you hit the Generate Font button in the footer in IcoMoon. On the following page you can set the unicode of each icon/character. Click on the prefences button (cog icon), to set the name of your icon font (e.g. scoutIcons). Finally click on Download and you receive a ZIP file which contains the new selection.json, and font files like .ttf and .woff. When you’ve added new unicodes to the icon font, you should also update Icons.java and add constants for the new characters. When you’re using Scout JS you should also update icons.js and icons.less. Important! don’t forget to check in the new selection.js to your SCM. Windows tool Character Map: first you must install your custom TrueType Font .ttf in Windows. Simply double-click on the .ttf file and choose Install. After that you can start Character Map and browse through the font. The ZIP archive from IcoMoon contains a file demo.html. This file shows a preview of your icon font. Works in Chrome, but we had trouble viewing the font with Firefox. This tool from Wikipedia also creates a preview for an icon font: Vorlage:Private-Use-Area-Test. Icon font must be installed first.","title":"Icons","component":"scout-docs","version":"22","name":"icons","url":"/scout-docs/22/technical-guide/user-interface/icons.html","titles":[{"text":"Font Icons","hash":"font-icons","id":1},{"text":"Using a custom icon font","hash":"using-a-custom-icon-font","id":2},{"text":"How to create a custom icon font","hash":"how-to-create-a-custom-icon-font","id":3},{"text":"Tools","hash":"tools","id":4}]},"53":{"id":53,"text":"This document is referring to a past Scout release. Please click here for the recent version. Figure 1. Scout apps run on desktops, tablets and mobile phones Scout applications are mobile capable, meaning that they can be used on portable touch devices like smartphones and tablets. This capability is based on 2 main parts: Responsive and Touch Capable Widgets Device Transformation Responsive design in context of a web application means that the design reacts to screen size changes. A Scout application does not use responsive design for the whole page, but many widgets itself may change the appearance when they don’t fit into screen. One example is the menu bar that stacks all menus which don’t fit into an ellipsis menu. Figure 2. Responsive menu bar Beside being responsive, the widgets may deal with touch devices as well. This means they are big enough to be used with the finger. And they don’t need a mouse, especially the right mouse button. One example is the tooltip of a form field which is reflected by an info icon on the right side of the field. Instead of hovering over the field the user can press that info icon to bring up the tooltip. This approach not only provides an indicator where tooltips are available, it also works for mouse and touch based devices. Figure 3. Touch friendly widgets Another widget that will react to changing sizes is the group box. Once a group box becomes smaller than its preferred width it will transform its internal fields. Example: For all internal fields the labelPosition will be set to 'top' to give the field more horizontal space. Figure 4. Responsive group box Those transformations are handled by scout.GroupBoxResponsiveHandler and managed by scout.ResponsiveManager. The manager decides when to switch to a responsive mode and back. If desired, the responsive transformations can be completely disabled by calling scout.responsiveManager.setActive(false). By default, all the main boxes will be responsive. In order to exclude a group box from the responsive transformations you could do the following: @Order(20) @ClassId(\"98af1bc6-2d62-4132-9953-55e08492f65f\") public class MyGroupBox extends AbstractGroupBox { @Override protected TriState getConfiguredResponsive() { return TriState.FALSE; } } The handler is called when the manager detects a changed responsive state to perform its transformations. There are three responsive modes, of which only the first two are supported in scout classic. Normal (e.g. width >= 500): Regular case, no transformations are applied. Condensed (e.g. 300 ⇐ width { CompactBean bean = new CompactBean(); bean.setTitle(\"custom title\"); bean.addContentLine(new CompactLine(\"label\", \"text\")); return bean; }); } } If the MobileDeviceTransformer is active, the responsive feature of the GroupBox will be disabled. Instead, some transformations will be applied like moving the label and status to top, reducing the column count to one, disabling cancel confirmation and more. Have a look at MobileDeviceTransformation and at MobileDeviceTransformer to learn more about it. Figure 9. Form on Mobile Since the transformers are plain Scout beans, you can easily replace them and adjust their behavior. To disable some transformations just get the configuration and disable the unwanted ones. @Replace public class CustomMobileDeviceTransformer extends MobileDeviceTransformer { @Override protected void initTransformationConfig() { super.initTransformationConfig(); getDeviceTransformationConfig().disableTransformation(MobileDeviceTransformation.MOVE_FIELD_LABEL_TO_TOP); } } Have a look at the class MobileDeviceTransformation to get a list of all available transformations. All these transformations are triggered by extensions to components like form fields or the desktop. These extensions are registered by DeviceTransformationPlatformListener. If you don’t want any of these transformers to be active you could simply replace that listener and do nothing. @Replace public class CustomDeviceTransformationPlatformListener extends DeviceTransformationPlatformListener { @Override public void stateChanged(PlatformEvent event) { // Do nothing to not register any extension so no transformation will happen } } The device transformers take care of global transformations which should be applied for most of the components. If you need to adapt a specific component you can do it at the component itself. Let’s say you want to hide a field if the application is running on a smart-phone, you could do the following. @Order(20) @ClassId(\"032f5ffb-bb1a-477a-95c8-f185e930a977\") public class MyField extends AbstractStringField { @Override protected void execInitField() { if (UserAgentUtility.isMobileDevice()) { setVisibleGranted(false); } } } Sometimes a transformation done by a device transformer is not desired, but you don’t want to turn it off globally. If that is the case you can disable that transformation for a specific form or form field. @Override protected void execInitField() { BEANS.get(IDeviceTransformationService.class).excludeFieldTransformation(this, MobileDeviceTransformation.REDUCE_GROUPBOX_COLUMNS_TO_ONE); } Or you can exclude a specific form or form field from all transformations. @Override protected void execInitField() { BEANS.get(IDeviceTransformationService.class).excludeField(this); } Once you have done your adjustments on the model and transformations, and you are still not pleased how your app looks, you still have the possibility to add some custom CSS. To do so, just add a CSS class to your component and define the rules in a Less file. Also have a look at the Java file CssClasses. Scout provides a few predefined css classes for some specific use cases. @Override protected void execInitField() { if (UserAgentUtility.isMobileDevice()) { addCssClass(\"mobile\"); } } For details on how to write the Less code please see Styling. If you just want to reduce some padding maybe it is sufficient to adjust the gaps of a group box. To do so just override the method getConfiguredBodyLayoutConfig of your group box and do the adjustments. @Override protected LogicalGridLayoutConfig getConfiguredBodyLayoutConfig() { return super.getConfiguredBodyLayoutConfig() .withVGap(0); } The class UserAgent is essential for the mobile support. It stores information about the running device like the used browser or OS. The user agent is available on the UI server as well as on the backend server and can be accessed using the static method UserAgent.get(). The class UserAgentUtility provides some useful helper methods to check which type of device is running, like if it’s a mobile phone, a tablet, or a desktop device. When creating a Scout application which should run on touch devices as well, the following tipps may help you. Focus on the essential. Even though most of the application should run fine on a mobile device, some parts may not make sense. Identify those parts and make them invisible using setVisibleGranted(false). The advantage of using setVisibleGranted over setVisible is that the model of the invisible components won’t be sent to the client at all, which might increase the performance a little. But remember: The users nowadays might expect every functionality to be available even on a mobile phone, so don’t take them away too much. Limit the usage of custom HTML. Custom HTML cannot be automatically transformed, so you need to do it by yourself. Example: You created a table with several columns using HTML. On a small screen this table will be too large, so you have to make sure that your table is responsive, or provide other HTML code when running on a mobile device. Don’t use too large values for gridH. GridH actually is the minimum grid height, so if you set gridH to 10 the field will always be at least 10 logical grid rows height. This may be too big on a mobile device. Use appropriate values for table column width. Tables are displayed the same way on a mobile phone as on the desktop device (unless compact is set to true), if the content is not fully visible the user can scroll. If you have tables with autoResizeColumns set to true, you should make sure that the column widths are set properly. Just check how the table looks on a small screen and adjust the values accordingly. Know the difference between small screens and touch capable. If you do checks against different device types, you should be aware that a touch device is not necessarily a small device. That means UserAgentUtility.isTouchDevice() may be true on a laptop as well, so use it with care. If you use filler fields for layouting purpose, make sure you use the official IPlaceholderField. Such filler fields normally waste space on a one column layout, so the mobile transformer will make them invisible.","title":"Mobile Support","component":"scout-docs","version":"22","name":"mobile","url":"/scout-docs/22/technical-guide/user-interface/mobile.html","titles":[{"text":"Responsive and Touch Capable Widgets","hash":"responsive-and-touch-capable-widgets","id":1},{"text":"GroupBox","hash":"ResponsiveGroupBox","id":2},{"text":"Add a Custom Handler","hash":"add-a-custom-handler","id":3},{"text":"Device Transformation","hash":"device-transformation","id":4},{"text":"Compact Desktop","hash":"compact-desktop","id":5},{"text":"Adjusting Summary Cells","hash":"adjusting-summary-cells","id":6},{"text":"Compact Table","hash":"compact-table","id":7},{"text":"Form Transformation","hash":"form-transformation","id":8},{"text":"Disable Transformations","hash":"disable-transformations","id":9},{"text":"Adapt Specific Components","hash":"adapt-specific-components","id":10},{"text":"Optimize the Look","hash":"optimize-the-look","id":11},{"text":"User Agent","hash":"user-agent","id":12},{"text":"Best Practices","hash":"best-practices","id":13}]},"54":{"id":54,"text":"This document is referring to a past Scout release. Please click here for the recent version. Several components support multiple dimensions for visibility or enabled flags. This means the component is only visible or enabled if all dimensions are set to true. This gives developers the flexibility to e.g. use a dimension for granting and one for the business logic. A total of 8 dimensions are available for a certain component type and attribute. This means you e.g. have a total of 8 dimensions for Form Field visibility in your application. And 8 dimensions for enabled-states of Actions. So the dimensions are not consumed by component instance but by component type. This means you have to be careful in defining new dimensions as all components of the same type share these dimensions. Some of these dimensions are already used internally. Refer to the implementation and JavaDoc of the component for details about how many dimensions are available for custom use. menu.setEnabled(false); (1) menu.setEnabledGranted(false); (2) menu.setVisible(false, IDimensions.VISIBLE_CUSTOM); (3) formField.setVisible(true, false, true, \"MyCustomDimension\"); (4) formField2.setVisible(true, true, true); (5) formField3.isEnabled(IDimensions.ENABLED_CUSTOM); (6) formField3.isEnabled(IDimensions.ENABLED); (7) formField3.isEnabled(); (8) formField3.isEnabledIncludingParents(); (9) 1 Disables the menu using the internal default dimension 2 Disables the menu using the internal granted dimension 3 Hides the menu with a third custom dimension 4 Form Fields also support the propagation of new values to children and parents. This sets the custom dimension of this field and all of its children to true. 5 This sets the internal default enabled dimension of this field and all of its parents and children to true. 6 Checks if the custom dimension is set to true 7 Checks if the internal default dimension is set to true 8 Checks if all dimensions of formField2 are true 9 Checks if all dimensions of formField2 and all dimensions of all parent Form Fields are enabled. In the example above the instance 'formField3' uses 4 dimensions for the enabled attribute: ENABLED_CUSTOM because it is explicitly used and the 3 dimensions that are used internally (ENABLED, ENABLED_GRANTED, ENABLED_SLAVE). Even though the instance 'formField2' makes no use of the custom dimension it is consumed for this instance as well because the dimensions do not exist by instance but by attribute (as explained above).","title":"Multiple Dimensions Support (Scout Classic)","component":"scout-docs","version":"22","name":"multi-dimensions","url":"/scout-docs/22/technical-guide/user-interface/multi-dimensions.html","titles":[]},"55":{"id":55,"text":"This document is referring to a past Scout release. Please click here for the recent version. As seen in the Creating a Widget a widget may be created using scout.create. When using this function, the call is delegated to the ObjectFactory. The ObjectFactory is responsible to create and initialize a Scout object. A typical Scout object has an objectType and an init function. But actually any kind of object with a constructor function in the scout or a custom namespace may be created. By default, objects are created using naming convention. This means when calling scout.create('scout.Table', model), the scout namespace is searched for a class called Table. Since scout is the default namespace, it may be omitted. So calling scout.create('Table', model) has the same effect. If there is such a class found, it will be instantiated and the init function called, if there is one. The model is passed to that init function. So instead of using scout.create you could also use the following code: Listing 1. Creating an object without the ObjectFactory import {Table} from '@eclipse-scout/core'; var table = new Table(); table.init(model); This will work fine, but you will loose the big benefit of the ObjectFactory: the ability to replace existing classes. So if you want to customize the default Table, you would likely extend that table and override some functions. In that case you need to make sure every time a table is created, your class is used instead of the default. To do that you have to register your class in the ObjectFactory with the objectType Table. If scout.create('Table') is called the object factory will check if there is a class registered for the type Table and, if yes, that class is used. Only if there is no registration found, the default approach using the naming convention is performed. In order to register you class, you need a file called objectFactories and add that to your JavaScript module (e.g. index.js). The content of that file may look as following: Listing 2. Adding a new object factory registration import {CustomTable} from './index'; import {scout} from '@eclipse-scout/core'; scout.addObjectFactories({ 'Table': () => new CustomTable() }); This will simply add a new factory for the type Table the the list of existing factories. From now on yourproject.CustomTable will be instantiated every time a Table should be created.","title":"Object Factory","component":"scout-docs","version":"22","name":"object-factory","url":"/scout-docs/22/technical-guide/user-interface/object-factory.html","titles":[]},"56":{"id":56,"text":"This document is referring to a past Scout release. Please click here for the recent version. Beside JavaScript for business logic and for the models, every Scout JS app probably needs some CSS code at some point in time. If you are writing custom widgets, you need it for sure. But also if you are just using the given widgets you might have the need to adjust the look here and there. Scout uses LESS as CSS preprocessor. It has a lot of advantages to pure CSS: variables, mixins, functions, imports etc. If you use the default build infrastructure provided by Scout, you cannot only use LESS easily without getting a headache on how to integrate it in your build system, you get access to all the LESS constructs used by Scout itself. This means you can use variables for colors, icons and sizes, mixins for animations and to avoid browser specific prefixes. You can import whole Scout LESS files for your custom themes, and you get a lot of sample code in the Scout code base because Scout itself uses the same concepts. In order to get started you need a place to put all your LESS code. The recommendation is to create one LESS file for each widget. That means if your widget is called MyWidget.js you would create a file called MyWidget.less. Even if you adjust the look of an existing widget you can create a file called let’s say StringField.less and put the rules there. If you only have a few rules or non widget specific rules you can create a file called main.less and put them there. However, these are only recommendations, you can always do it as you like. The creation of these files won’t make them load automatically. You have to register them in your index file. This file should be put into your src/main/js folder and named index.less. Just include your new files using the LESS @import keyword. Listing 1. Include a LESS file @import \"style/colors\"; In addition to this index file you normally also have a theme file which will be used as entry point in your webpack.config.js and included in the index.html. The intention of the theme file is to group individual index files and make one file in order to load all rules at once within one request. Now that we have all the infrastructure set up, we can start adding some rules. As already said, you can use all the LESS variables from Scout. The variables can be found in the scout/style folder of the @eclipse-scout/core module. If you have a look at the file colors.less you find all the colors you can use or customize. Let’s say you want to change the background color of the header, you can redefine the variable @desktop-header-background-color. Listing 2. Changing the background color of the header @desktop-header-background-color: @palette-red-4; That’s it! As you can see, changing this variable not only changes the background color of the header, it also changes the background color of the view-buttons on the top left, because they are supposed to have the same color. You could do the same by using CSS rules, but you would have to write several selectors to achieve the same. Figure 1. Helloworld default and with a custom header background color In this example a color from the Scout color palette is used. You can also use a custom hex code instead of @palette-red-4 or define a custom color palette, if you want to use the same colors for different rules. Beside colors there are some other files in the style folder of the Scout module: animations.less, fonts.less, icons.less, mixins.less and sizes.less. All these files contain variables or mixins which are used by various Scout widgets and may be used by your project as well. In the above example to change the header background color, we adjusted a specific less variable to only change the header. As you may have noticed on the screenshot, the pencil on the top left, the title below and the text on the tile are still blue. This is expected, because they are not related to the header background color. If you want to change these colors as well, you could do it in the same way: Look for the LESS variables and adjust them. But you could also try to adjust the accent colors. Scout has a dedicated color palette for accent colors. Accent colors are used by many widgets, for titles, for links, for hover states etc. The default accent color of Scout is blue. So, instead of changing specific colors, you can try to change the accent color palette. For this example we use the slightly adjusted red palette, but you can use your own colors of course: @accent-color-0: @palette-red-0; @accent-color-1: @palette-red-1; @accent-color-2: @palette-red-2; @accent-color-3: @palette-red-4; @accent-color-4: @palette-red-5; @accent-color-5: darken(@palette-red-5, 10%); Figure 2. Accent color change Redefining a LESS variable is the simplest way of customizing. If you need more control you can always write a custom CSS rule. Keep in mind that these rules need to be more specific than the default CSS rules of Scout, otherwise they won’t be executed (see https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity for details). We cannot guarantee that your custom rules will still work when migrating to a newer Scout version, because changing only a small part of the rule might make it more specific so that your rule won’t work anymore. That only applies to custom rules which are supposed to change existing look or behavior. If you are writing a custom widget without overriding default Scout rules there shouldn’t be any problems regarding migration. Scout applications support styling via CSS/LESS themes. Scout comes with two themes by default: the default theme with blue colors and the dark theme with gray/black colors. Technically a theme has a name and a set of LESS files. In Scout Classic a theme is activated by calling the method AbstractDesktop#setTheme(String name). This causes the browser to reload the page and loads the CSS theme for that name, like myapp-theme.css for the default theme or myapp-theme-dark.css for the dark theme. The default theme is activated by passing a null value as name. In Scout JS you do the same thing by calling the method Desktop#setTheme(name). If you have multiple themes and you want to start with a defined theme by default, you can set a property in the config.properties file on the Scout UI server. In the following example the theme rainbow will be activated, which means the Scout application tries to load the CSS file myapp-theme-rainbow.css on start-up: config.properties scout.ui.theme=rainbow Note that Scout only provides an API to switch between themes. If the user of your Scout application should switch between various themes, your application must provide an UI element to do that. Scout provides no standard UI element for that. However, the Widgets apps for Scout Classic and Scout JS give you an idea of how you could implement that feature. You have two options to customize CSS styles in your Scout project: Change CSS properties (or LESS variables) by overriding styles from the default theme Provide your own theme with a unique name like rainbow If your Scout application should have only a single theme, option 1 is the way to go. If users should have the option to switch between various themes, you should go with option 2. In this chapter we will focus on the latter option. In order to understand Scout themes, take a look at the myapp-theme.less file which has been generated for your project by the Scout archetype. In the following examples we assume that the name of your project is myapp. Listing 3. myapp-theme.less @import \"~@eclipse-scout/core/src/index\"; @import \"./src/main/js/index\"; As you can see the theme bundles various LESS modules. Line 1 imports the LESS module from the Scout core. This module contains style definitions for all UI elements provided by Scout. Line 2 imports the LESS module from your application. This module contains style definitions for custom widgets used in your project. The build creates a single CSS file myapp-theme.css, which is used as theme for your project. We recommend making an index file for each Scout module. These index files import each single LESS file which belongs to that module. This excerpt from Scouts index.less shows how we import all distinct LESS files required to style the desktop or the LESS variable definitions for all colors used in the stylesheet: Listing 4. Excerpt from Scout core index.less @import \"desktop/Desktop\"; @import \"desktop/DesktopLogo\"; @import \"desktop/DesktopDense\"; @import \"desktop/bench/DesktopBench\"; @import \"desktop/bench/BenchColumn\"; @import \"style/colors\"; How does the dark theme for your Scout application look like? Like for the default theme, we create a LESS file myapp-theme-dark.less, but this time we import the index-dark modules. Listing 5. myapp-theme-dark.less @import \"~@eclipse-scout/core/src/index-dark\"; @import \"./src/main/js/index-dark\"; Let’s take a look at the details in the index-dark.less file from the Scout core: Listing 6. index-dark.less @import \"index\"; @import \"style/colors-dark\"; @import \"style/sizes-dark\"; As you see, the first thing we do on line 1 is to import the default theme 'index'. This means the dark theme inherits all style definitions from the default theme. The dark theme only extends new additional style and LESS variables or overrides styles or LESS variables from the default theme. This is what happens on line 2: colors-dark.less overrides some variables defined in the colors.less file from the default theme, like the gray colors: Listing 7. Excerpt from Scout core index-dark.less @palette-gray-0: @palette-white; @palette-gray-1: #F5F5F5; @palette-gray-2: #E9EBEB; @palette-gray-3: #BFC2C3; @palette-gray-4: #A7ACAD; @palette-gray-5: #7E8588; Note that all variables except @palette-gray-2-1 override variables from colors.less. @palette-gray-2-1 is a variable which is only defined and used in the dark theme. Scout uses Webpack to run the LESS parser and build the CSS themes. Your application needs at least one default theme. The Scout archetype adds this theme to your webpack.config.js. If your application needs to work with multiple themes you must add them to the list of config entries. In this example we add the two themes dark and rainbow: Listing 8. Excerpt from webpack.config.js config.entry = { 'bsicrm': './src/main/js/myapp.js', 'login': './src/main/js/login.js', 'logout': './src/main/js/logout.js', 'myapp-theme': './src/main/js/myapp-theme.less', 'myapp-theme-dark': './src/main/js/myapp-theme-dark.less', 'myapp-theme-rainbow': './src/main/js/myapp-theme-rainbow.less' }; When you use a Scout UI server as backend for your Scout JS application the class WebResourceLoader is responsible for supplying the requested CSS theme file to the browser. This class uses the current theme name as provided by the UiThemeHelper, which checks if a theme name is set by a cookie, the HTTP session or by an HTTP request parameter. These are good starting points for debugging, in case something unexpected happens while developing themes.","title":"Styling","component":"scout-docs","version":"22","name":"styling","url":"/scout-docs/22/technical-guide/user-interface/styling.html","titles":[{"text":"Setup Less Files","hash":"setup-less-files","id":1},{"text":"Basic Customization","hash":"basic-customization","id":2},{"text":"Accent Colors","hash":"accent-colors","id":3},{"text":"Advanced Customization","hash":"advanced-customization","id":4},{"text":"Themes","hash":"themes","id":5},{"text":"Build and Runtime","hash":"build-and-runtime","id":6}]},"57":{"id":57,"text":"This document is referring to a past Scout release. Please click here for the recent version. The TEXTS class is a convenience class to access the default Text Provider Service used for the localization of the texts in the user interface. Listing 1. Text lookup TEXTS.get(\"persons\"); Its also possible to use some parameters: Listing 2. Text lookup String name = \"Bob\"; int age = 13; TEXTS.get(\"NameWithAge\", name, age); In this case, some placeholders for the parameters are needed in the translated text: Listing 3. Text lookup NameWithAge={0} is {1} years old; Scout uses the java.util.ResourceBundle mechanism for native language support. So whatever language files you have in your .shared/resources/texts/*.properties are taken as translation base. Example setup: .shared/resources/texts/Texts.properties .shared/resources/texts/Texts_fr.properties If your application starts with the -vmargs -Duser.language=fr or eclipse.exe -nl=fr the translations in Texts_fr.properties are considered. In case of any other user language the translations in Texts.properties are considered. It is possible to edit these files in the Eclipse Scout SDK with the NLS Editor. Text Provider Services are services responsible to provide localization for texts in the user interface. A typical application contains a such service contributed by the Shared Project. implements: ITextProviderService extends: AbstractDynamicNlsTextProviderService (default, translations are stored in properties files) Using Text Provider Services developers can decide to store the translations in a custom container like a database or XML files. Furthermore using TextProviderServices it is very easy to overwrite any translated text in the application (also texts used in Scout itself) using the service ranking. The mechanism is aligned with the icon retrieval which is also managed using Icon Provider Services. By default the internationalization mechanism relies on .properties files using a reference implementation of the TextProviderServices: Service extending the AbstractDynamicNlsTextProviderService class. A Text Provider Service working with the default implementation need to define where the properties files are located. This is realized by overriding the getter getDynamicNlsBaseName(). Here an example: Listing 4. Text lookup @Override protected String getDynamicNlsBaseName() { return \"resources.texts.Texts\"; } If configured like this, it means that the .properties files will be located in the same plug-in at the location: /resources/texts/Texts.properties (default) /resources/texts/Texts_fr.properties (french) /resources/texts/Texts_de.properties (german) …​ (additional languages) If you decide to store your translated texts in .properties files, you migth want to use the NLS Editor to edit them. You need to respect the format defined by the Java Properties class. In particular the encoding of a .properties file is ISO-8859-1 (also known as Latin-1). All non-Latin-1 characters must be encoded. Examples: 'à' => \"\\u00E0\" 'ç' => \"\\u00E7\" 'ß' => \"\\u00DF\" The encoding is the \"Unicode escape characters\": \\uHHHH where HHHH is a hexadecimal id of the character in the Unicode character table. Read more on the .properties File on wikipedia. The NlsFileWatcher observes changes in text property files. If a change in a text property file occurs, the nls resource bundle cache will be invalidated. This means that there is no need to restart the server when working on texts and translations. The file watcher is only active if scout.devMode=true is set and can be disabled with scout.dev.texts.fileWatcherEnabled=false. By default, the file watcher is enabled in development mode.","title":"Texts","component":"scout-docs","version":"22","name":"texts","url":"/scout-docs/22/technical-guide/user-interface/texts.html","titles":[{"text":"Text properties files","hash":"text-properties-files","id":1},{"text":"Text Provider Service","hash":"text-provider-service","id":2},{"text":"Localization using .properties files","hash":"localization-using-properties-files","id":3},{"text":"File Watcher","hash":"file-watcher","id":4}]},"58":{"id":58,"text":"This document is referring to a past Scout release. Please click here for the recent version. A value field extends the form field by the ability to store a value. Typical form fields are StringField, NumberField, DateField or SmartField. All these fields provide a value which is accessible using field.value and may be set using field.setValue(value). The value always has the target data type of the field. When using a StringField the type is string, when using a NumberField the type is number, when using a DateField the type is date. This means you don’t have to care about how to parse the value from the user input, this will be done by the field for you. The field also validates the value, meaning if the user entered an invalid value, an error is shown. Furthermore, if you already have the value and want to show it in the field, you don’t have to format the value by yourself. This process of parsing, validating and formatting is provided by every value field. The responsible functions are parseValue, validateValue and formatValue. If a user enters text, it will be parsed to get the value with the correct type. The value will then be validated to ensure it is allowed to enter that specific value. Afterwards it will be formatted again to make sure the input looks as expected (e.g. if the user enters 2 it may be formatted to 2.0). If you set the vaue programmatically using setValue it is expected that the value already has the correct type, this means parse won’t be executed. But the value will be validated, formatted and eventually displayed in the field. Even though the fields already provide a default implementation of this functionality, you may want to extend or replace it. For that purpose you may set a custom parser and formatter or one or more validators. Typically you don’t have to add a custom parser or formatter for a NumberField or DateField. They work with a DecimalFormat or DateFormat which means you can specify a pattern how the number or date should be represented. By default, it uses the pattern of the current locale, so you don’t even have to specify anything. For a StringField on the other hand, adding a custom parser or formatter could make sense. Let’s say you want to group the text into 4 digit blocks, so that if the user inputs 1111222233334444 it should be converted to 1111-2222-3333-4444. This could be done using the following formatter. Listing 1. Example of a formatter function formatter(value, defaultFormatter) { var displayText = defaultFormatter(value); if (!displayText) { return displayText; } return displayText.match(/.{4}/g).join('-'); }; Keep in mind that you should call the default formatter first unless you want to replace it completely. To make your formatter active, just use the corresponding setter. Listing 2. Setting the formatter field.setFormatter(formatter); Formatting the value is most of the time only half the job. You probably want to set a parser as well, so that if the user enters the text with the dashes it will be converted to a string without dashes. Listing 3. Example of a parser function parser(displayText, defaultParser) { if (displayText) { return displayText.replace(/-/g, ''); } return defaultParser(displayText); }; Use the corresponding setter to activate the parser. Listing 4. Setting the parser field.setParser(parser); The purpose of a validator is to only allow valid values. This mostly depends on your business rules, this is why the default validators don’t do a whole lot of things. See the following example of a validator used by a DateField. Listing 5. Example of a validator import {dates} from '@eclipse-scout/core'; function(value) { if (dates.isSameDay(value, new Date())) { throw 'You are not allowed to select the current date'; } return value; }; This validator ensures that the user may not enter the current date. If he does, en error status will be shown on the right side of the date field saying 'You are not allowed to select the current date'. Figure 1. Validation error of a date field As you can see in the example, in order to mark a value as invalid just throw the error message you want to show to the user. You could also throw an error or a Status object. In that case a generic error message will be displayed. In order to activate your validator, you can either call setValidator to replace the existing validator. In that case you should consider calling the default validator first, like you did it for the formatter or parser. Or you can use addValidator which adds the validator to the list of validators of the field. Listing 6. Adding a validator field.addValidator(validator); Compared to parse and format you may have multiple validators. When the value is validated, every validator is called and has to aggree. If one validation fails, the value is not accepted. This should make it easier to reuse existing validators or separate your validation into tiny validators according to your business rules. If you now ask yourself, why this is not possible for parsing and formatting, consider the following: Validate takes a value and returns a value, the data type is the same for input and output. Parse takes a text and creates a value, format takes a value and creates a text. The data type is likely not the same (besides for the StringField). If you had multiple parsers, the output of the previous parser would be the input of the next one, so depending on the index of your parser you would either get the text or the already parsed value as input. Confusing, isn’t it? So in order to keep it simple, there is only one parser and only one formatter for each field.","title":"Value Field","component":"scout-docs","version":"22","name":"value-field","url":"/scout-docs/22/technical-guide/user-interface/value-field.html","titles":[{"text":"Parser, Validator, Formatter","hash":"parser-validator-formatter","id":1},{"text":"Custom Parser and Formatter","hash":"custom-parser-and-formatter","id":2},{"text":"Custom Validator","hash":"custom-validator","id":3}]},"59":{"id":59,"text":"This document is referring to a past Scout release. Please click here for the recent version. This chapter describes some of the widgets available in Scout. At the moment most of the widgets are not described yet, but they are already available at the Scout JS Widgets Application. With this application you can try the widgets out and get a feel of what they are capable of and how they are used. A Smart Field provides a list of proposals the user can choose from to pick one single value. In contrast to a common drop down list, the Smart Field provides search as you type which is especially useful for large lists. A very common case is to call a REST service and lookup the proposals while typing. This combination of a drop down list and a search field is the reason why it is called smart. Figure 1. Smart Field If you don’t need the search as you type feature, you can switch it off by setting the property displayHint to dropdown so that it behaves like a regular drop down list. This means the user cannot filter the values anymore using key board and can choose the values only by mouse / touch. Figure 2. Smart Field with display style set to 'dropdown' Another type of Smart Field is the so called Proposal Field. A Proposal Field does not require the user to choose from the available proposals but allows him to enter custom text as well. Figure 3. Proposal Field In order to provide the proposals you can either use a Lookup Call or a Code Type. In a Scout JS application you can use SmartFields like in a classic Scout application. Any REST service can be used to provide results for a SmartField lookup call. However, the SmartField expects the result to have a defined structure. If the REST service API is in your hands, you can simply return a JSON response with the right structure. This means less work to do for you in the JavaScript layer, because you don’t have to transform the response to a structure the SmartField can process. If you must use a service which API you cannot change, you have no other choice than doing some kind of transformation in JavaScript. Here’s how the response for a lookup call should look like in order to be processed by the SmartField: { \"queryBy\": \"ALL|TEXT|KEY|REC\", # lookup type, as requested by the client \"text\": \"foo\", # [optional] only set when queryBy=TEXT, contains the requested search text \"key\": \"123\", # [optional] only set when queryBy=KEY, contains the key of the requested lookup row \"rec\": \"234\", # [optional] only set when queryBy=REC, contains the key of the requested parent lookup row \"lookupRows\": [ # the result set of this lookup, contains 0-n lookup rows { # key and text are mandatory properties, all other properties are optional \"key\": \"unique lookup row key\", \"text\": \"lookup row text\", \"iconId\": \"person.svg\", \"tooltipText\": \"foo\", \"enabled\": false, \"active\": false, \"cssClass\": \"special-format\", \"backgroundColor\": \"#cc00ee\", # deprecated, use cssClass instead \"foregroundColor\": \"#333333\", # deprecated, use cssClass instead \"font\": \"Dialog-PLAIN-12\", # deprecated, use cssClass instead \"parentKey\": \"234\", # only used for hierarchical smart fields \"additionalTableRowData\": [ # only used for table like lookup results with multiple columns # contains 0-n objects with arbitrary properties { \"foo\": \"bar\" } ] } ], \"exception\": \"something went wrong\" # [optional] only set when an error occurred during the lookup request } Here’s how the request for a Scout JS SmartField lookup call could look like. Your request to a REST API can look completely different. This example just gives you an idea of how to implement your own LookupCall. { \"type\": \"lookupByAll|Text|Key|Rec\", # lookup type \"text\": \"foo\", # [optional] only set when type=lookupByText, contains the requested search text \"key\": \"123\", # [optional] only set when type=lookupByKey, contains the key of the requested lookup row \"rec\": \"234\", # [optional] only set when type=lookupByRec, contains the key of the requested parent lookup } A Chart visualizes data in several ways like bars, lines or a pie. The Chart has two main properties, a data and a config object. Imagine you are an ice cream shop, and you want to display how many scoops you sold in which month. The data object holds the data about the sold scoops, their flavours and the date you sold them. The config object defines how your chart should be styled, e.g. it should be a bar chart and the axes should get an extra label like 'month' and 'flavour'. Depending on the type that is set on the config object the Chart picks a renderer to display the chart. The renderer is now creating a - or -element and renders the chart. Each time you update the data or the config it is rerendered. Most of the charts are rendered using chart.js and the config object is handed over so you can use all properties chart.js provides to style your chart. In addition to the chart.js-properties we added custom properties, some of them only have an impact on certain charts: options.autoColor Whether the colors should be computed automatically. options.colorScheme A specific color scheme for the colors, also inverted ones are possible for dark backgrounds. options.transparent Whether the chart should be transparent or opaque. options.maxSegments Max. number of segments for radial charts like pie, doughnut, radar, polar area. options.clickable Whether a chart is clickable. options.checkable Whether a chart is checkable. options.otherSegmentClickable Whether the consolidated others segment is clickable. options.plugins.legend.clickable Whether the legend is clickable. options.xLabelMap and options.yLabelMap Label mapping for discrete values. options.handleResize Whether the chart should handle resizing itself (not necessary if the containers size is updated). options.numberFormatter A custom number formatter, e.g. 1000000 → 1 Mio. €. options.reformatLabels Whether the data labels should be reformatted. It is assumed that data labels (incl. numeric labels) are correctly formatted. If one wants to have the data labels formatted using the number formatter, this flag can be used. Consider a bar chart and the x-axis displays the years 2010-2020, these labels should not be reformatted. However, if the x-axis displays the prices 250, 500, 750 and 1000, these labels should be reformatted to 250 €, 500 €, 750 € and 1.000 €. options.plugins.tooltip.cssClass Custom css class for additional styling of the tooltip Bubble: options.bubble.sizeOfLargestBubble The size to which the largest bubble is scaled. options.bubble.minBubbleSize Min. size of a bubble. Fulfillment: options.fulfillment.startValue Where the animation should start. Salesfunnel: options.salesfunnel.normalized Defines if the bars should be rendered smaller from top to bottom or if they get a size according to their values. options.salesfunnel.calcConversionRate Whether the conversion rate should be rendered. Speedo: options.speedo.greenAreaPosition Define where the green area is located. Venn: options.venn.numberOfCircles Between 1 and 3. The colors used for grid lines, axes, etc. and the auto colors for datasets can be overridden using CSS. For a more detailed example see How to Create a Chart for Scout JS resp. How to Create a Chart for Scout Classic The widgets Table.js, Tree.js, TileGrid.js and TileAccordion.js share a common filter API which includes a filter field. This filter field is enabled by default and can be turned off using the property textFilterEnabled. Figure 4. Filter field This filter field will filter the rows, nodes or tiles by their display text. This is simple for rows and nodes but quite complicated for tiles due to the large number of different types of tiles. Therefore, it is possible to provide a strategy to the TileGrid.js and TileAccordion.js how to create a text filter for the tile type used in this case and how to update the text this filter accepts. Consider a tile CustomTile with a property relevantTextForFilter. A filter for this tile type might look like this: import {objects, strings} from '@eclipse-scout/core'; class CustomTileFilter { constructor() { this.acceptedText = null; } setAcceptedText(acceptedText) { acceptedText = (acceptedText || '').trim().toLowerCase(); if (objects.equals(this.acceptedText, acceptedText)) { return false; } this.acceptedText = acceptedText; return true; } accept(tile) { if (strings.empty(this.acceptedText)) { return true; } let filterText = strings.toLowerCase(tile.relevantTextForFilter); if (strings.empty(filterText)) { return false; } return filterText.indexOf(this.acceptedText) > -1; } } This CustomTileFilter is now passed to a TileGrid via tileGrid.createTextFilter = () => scout.create('CustomTileFilter'); tileGrid.updateTextFilterText = (filter, text) => filter.setAcceptedText(text); The common filter API which Table.js, Tree.js, TileGrid.js and TileAccordion.js share can also be implemented by all other widgets. A minimal example of a widget implementing the filter API looks like this class FilterWidget extends Widget { constructor() { super(); this.elements = []; this.filters = []; this.textFilterEnabled = true; this.filterSupport = this._createFilterSupport(); this.filteredElementsDirty = false; } _init(model) { super._init(model); this.setElements(this.elements); this.setFilters(this.filters); } _createKeyStrokeContext() { return new KeyStrokeContext(); } _render() { this.$container = this.$parent.appendDiv(); this.htmlComp = HtmlComponent.install(this.$container, this.session); } _renderProperties() { super._renderProperties(); this._renderTextFilterEnabled(); } _remove() { this.filterSupport.remove(); super._remove(); } setElements(elements) { this.setProperty('elements', elements); this.filter(); } setTextFilterEnabled(textFilterEnabled) { this.setProperty('textFilterEnabled', textFilterEnabled); } _renderTextFilterEnabled() { this.filterSupport.renderFilterField(); } isTextFilterFieldVisible() { return this.textFilterEnabled; } /** * @returns {FilterSupport} */ _createFilterSupport() { return new FilterSupport({ widget: this, $container: () => this.$container, getElementsForFiltering: () => this.elements, getElementText: element => element.text }); } addFilter(filter, applyFilter = true) { this.filterSupport.addFilter(filter, applyFilter); } removeFilter(filter, applyFilter = true) { this.filterSupport.removeFilter(filter, applyFilter); } setFilters(filters, applyFilter = true) { this.filterSupport.setFilters(filters, applyFilter); } filter() { this.filterSupport.filter(); } updateFilteredElements(result, opts) { this.filteredElementsDirty = false; } } class Element { constructor() { this.text = null; this.filterAccepted = true; } setFilterAccepted(filterAccepted) { this.filterAccepted = filterAccepted; } } The widget creates a FilterSupport and passes all filter-related calls to this object. This FilterSupport manages the filters and the filter field. It only needs a small amount of information from the widget: widget Widget that created the support $container jQuery element that will be used for the visualization. It may be a function to resolve the container later. If this property is not set the $container of the widget is used by default. getElementsForFiltering Get all elements to which the filters should be applied. getElementText Get text of an element. There are several other options that can be passed to the FilterSupport, e.g. a strategy to create a custom text filter. For a complete list of the options please see the JS-Doc of the FilterSupport. The methods addFilter(filter, applyFilter = true), removeFilter(filter, applyFilter = true) and setFilters(filters, applyFilter = true) of the FilterSupport work with filter objects containing an accept-function and accept-functions directly. These methods will check if the list of filters really changed and then apply the new filters if applyFilter is set to true. The filters are stored in the widgets filters property. The widget needs to implement a updateFilteredElements(result, opts) method, which is called after the filters were applied if the list of filtered elements changed. Before this method is called the widgets filteredElementsDirty is set to false and the values passed are result An object containing the newlyHidden and newlyShown elements. opts An object containing additional information, e.g. the text from the text filter. The elements that are filtered needs to have a setFilterAccepted(filterAccepted)-method which is used by the FilterSupport to indicate whether this element is accepted by the filters or not. In order to use the filter field the widget needs an isTextFilterFieldVisible()-method and a KeyStrokeContext. The isTextFilterFieldVisible()-method is used to determine whether the filter field needs to be added to or removed from the $container when filterSupport.renderFilterField() is called. The KeyStrokeContext is needed to register KeyStrokes that move the focus towards the filter field while typing.","title":"Widget Reference","component":"scout-docs","version":"22","name":"widget-reference","url":"/scout-docs/22/technical-guide/user-interface/widget-reference.html","titles":[{"text":"Smart Field","hash":"smart-field","id":1},{"text":"Chart","hash":"chart","id":2},{"text":"Filter Field","hash":"filter-field","id":3}]},"60":{"id":60,"text":"This document is referring to a past Scout release. Please click here for the recent version. A widget is a component which may be rendered. It may be simple like a label, or more complex like a tree or table. A form is a widget and a form field, too. A widget contains the model, which represents the state of the widget. In a Scout Classic application, that model will be sent from the UI server to the browser and the Scout UI will use that model to create the widget. In a Scout JS app, the model may be provided using JSON or directly with JavaScript. Every widget has a lifecycle. After a widget is instantiated, it has to be initialized using init. If you want to display it, you have to call the render method. If you want to remove it from the DOM, call the remove method. Removing a widget is not the same as destroying it. You can still use it, you can for example change some properties and then render it again. If it is really not needed anymore, the destroy method is called (typically by Scout itself). So you see the widget actually has 3 important states: initialized rendered destroyed The big advantage of this concept is that the model of the widget may be changed any time, even if the widget is not rendered.This means you can prepare a widget like a form, prepare all its child widgets like the form fields, and then render them at once.If you want to hide the form, just remove it.It won’t be displayed anymore, but you can still modify it, like changing the label of a field or adding rows to a table.The next time it is rendered the changes will be reflected.If you do such a modification when it is rendered, it will be reflected immediately. Destroying a widget means it will detach itself from the parent and destroy all its children.Typically this is done by Scout itself e.g. when closing a form. If you want to destroy a widget yourself, it is recommended to do that by deleting it in its owner or parent (e.g. a GroupBox has a method deleteField which will destroy the field if the GroupBox is its owner). If you have attached listeners to other widgets at initialization time, now is the time to detach them.After a widget is destroyed it cannot be used anymore.Every attempt will result in a Widget is destroyed error. A widget may be created using the constructor function or scout.create.Best practice is to always use scout.create which gives you two benefits: You don’t have to call init by yourself. The widget may be extended (see Object Factory for details). The following example creates a StringField. Listing 1. Creating a string field var field = scout.create('StringField', { parent: groupBox, label: 'hello', value: 'world' }); The first parameter is the object type, which typically is the name of the constructor function preceded by the name space. StringField belongs to the scout name space which is the default and may be omitted. If the string field belonged to another name space called mynamespace, you would have to write the following: Listing 2. Creating a field considering the name space scout.create('mynamespace.StringField', {}) The second parameter of scout.create is the model.The model is the specification for your widget.In case of the StringField you can specify the label, the max length, whether it is enabled and visible and more.If you don’t specify them, the defaults are used.The only needed property is the parent.To see what the defaults are, have a look at the source code of the widget constructor. Every widget needs a parent.The parent is responsible to render (and remove) its children.In the example above, the parent is a group box.This group box has a property called fields.If the group box is rendered, it will render its fields too. You don’t need a group box to render the string field, you could render it directly onto the desktop.But if you want to use a form, you need a group box and create the form, group box and the field.Doing this programmatically, meaning creating each widget separately using scout.create, is time consuming, that is why we suggest to use the declarative approach. Have a look at the above example again.The second parameter, the model, defines some properties of the string field.This actually already is the declarative approach, because you could also set each property manually after creating the string field using the according methods.In order to create a form, we need to specify multiple widgets, respectively a widget hierarchy, at once.The following example defines a form with a group box and a string field. Listing 3. A form model defined declaratively export default { title: 'My first form!', rootGroupBox: { id: 'MainBox', objectType: 'GroupBox', fields: [ { id: 'MyStringField', objectType: 'StringField', label: 'hello', value: 'world' } ] } } To keep things nice and clean we separate the model from the code by putting this description of the form in a separate file called MyFormModel.js. Typically you would create a file called MyForm.js as well, which contains the logic to interact with the fields. But since we just want to open the form it is not necessary. Instead you can use the following code to create the form: import model from './MyFormModel'; var form = scout.create('Form', $.extend({parent: desktop}, model)); Now you can open the form using form.open() and it will look like this: Figure 1. First form As soon as you would like to add some code that interacts with the fields or maybe just want to not always load the model manually when creating the form, you should create a file called MyForm.js. The content of that file would be a class MyForm that extends the Form from Scout and a method called _jsonModel that returns our model. import {Form} from '@eclipse-scout/core'; import model from './MyFormModel'; export default class MyForm extends Form { _jsonModel() { return model; } } Creating the form is now possible using the following code (assuming your namespace is called 'example' and you’ve added the file MyForm.js to your index.js). var form = scout.create('example.MyForm', {parent: desktop}); In previous Scout versions, the model was defined in a JSON file. Even though it is still possible, it is not recommended anymore, because writing the model using JavaScript is much more convenient. One advantage is, that you can use constants the same way as in your regular JavaScript code. import {FormField} from '@eclipse-scout/core'; export default { ... labelPosition: FormField.LabelPosition.TOP } If you use a JSON based model, you cannot reference Scout’s JavaScript enums/constants and you’d have to write the following to assign the constant value: { \"labelPosition\": 2 } Obviously this makes the JSON code harder to read and understand and the developer has to lookup the enum/constant definition first. This is where the ${const:NAME} tag comes to help. A widget can define a list of properties that can be used with the const-tag. The widget defines in which enum/constant the name provided by the tag is resolved. Using the const-tag, the JSON example now looks like this: { \"labelPosition\": \"${const:ON_FIELD}\" } When you want to provide const-tag support for a custom widget, you need to call scout.Widget#resolveConsts in the _init function of your widget and for each supported property specifiy the property name and the object that contains the enum/constant definition. In the example from the previous chapter we have seen how to create a widget, in that specific case we created a form. Typically it is not sufficient to just create a form, you most likely want to interact with the fields, like reading the values the user entered. In order to do that you need access to the fields. The easiest way is to use the IDs specified in the JSON. Let’s have a look at our example form again: export default { title: 'My first form!', rootGroupBox: { id: 'MainBox', objectType: 'GroupBox', fields: [ { id: 'MyStringField', objectType: 'StringField', label: 'hello', value: 'world' } ] } } In this example we have 3 widgets: the form, the root group box and a string field. These widgets are linked to each other which enables us to find the string field starting from the form. This can be done by using the following command: var stringField = form.widget('MyStringField'); Now you can read its value, change properties, add event handlers and so on. As seen before, every widget has a model representing its state. This model is written onto the widget at the time it is being instantiated. The properties of that model are now available as properties of the widget. So in order to access such a property, just call widget.yourProperty. If you want to modify the property, just call widget.setYourProperty(value). Listing 4. Accessing and modifying a property var field = scout.create('StringField', { parent: parent, labelVisible: false }); console.log(field.labelVisible); // prints false field.setLabelVisible(true); console.log(field.labelVisible); // prints true It is important to always use the setter to modify a property, because calling it does not just change the value. Instead it will call the method setProperty(propertyName, value) which does the following: It will check if the property has changed at all. If the value is still the same, nothing happens. To compare the values objects.equals is used, which uses === to compare and if that returns false, uses the equals methods of the given objects, if available. If the values are not equal, the model is updated using the method _setProperty (notice the _). Beside setting the value it also notifies every listener about the property change. So if another widget is interested in that property it may attach a listener and will be informed on every property change (see also the Events for details). In order to reflect the property change in the UI, the _render method is called, if available. The name of this method depends on the property name, it always starts with _render and ends with the property name. Example: _renderLabelVisible. If the widget does not implement such a method, nothing happens. It is worth to mention that the behavior of step 2 may be influenced by the widget. If the widget provides a method called _setPropertyName (e.g. _setLabelVisible, notice the _), that method will be called instead of _setProperty. This may be useful if something other should be done beside setting the property. If that is the case, that new function is responsible to call _setProperty by itself in order to set the property and inform the listeners. That method may also be called by the _init method to make sure the additional code is also executed during initialization (calling the public setter in _init would not have any effect due to the equals check at the beginning). A widget property is a special kind of a property which references another widget. Defining a property as widget property has the benefit that the widget is created automatically. Lets take the group box as an example. A group box has a widget property called fields. The fields are widgets, namely form fields. If you create a group box, you may specify its fields directly: Listing 5. Creating the string field automatically using a widget property import {StringField} from '@eclipse-scout/core'; var groupBox = scout.create('GroupBox', { parent: parent, label: 'My Group Box', fields: [{ objectType: 'StringField', label: 'My String Field' }] }); // check if the string field was created as well console.log(groupBox.fields[0] instanceof StringField); In the above example the group box is created using scout.create. After creating the group box you can access the property fields and you will notice that the string field was created as well, even though scout.create has not been called explicitly for the string field. This is because the property fields is defined as widget property. During the initialization of the group box it sets the property fields and because the value is not a widget yet (resp. the elements in the array), scout.create will be called. This will also happen if you use a setter of a widget property. You can either call the setter with a previously created widget, or just pass the model and the widget will be created automatically. In addition to creating widgets, calling such a setter will also make sure that obsolete widgets are destroyed. This means if the widget was created using the setter, it will be destroyed when the setter is called with another widget which replaces the previous one. If the widget was created before calling the setter, meaning the owner is another widget, it won’t be destroyed. So if a property is defined as widget property, calling a setter will do the following: It checks if the property has changed at all (same as for regular properties). If the values are not equal, _prepareWidgetProperty is called which checks if the new value already is a widget and if not creates it. It also destroys the old widget unless the property should not be preserved (see _preserveOnPropertyChangeProperties). If the value is an array, it does so for each element in the array (only widgets which are not part of the new array will be destroyed). If the widget is rendered, the old widget is removed unless the property should not be preserved. If there is a custom remove function (e.g. _removeXY where XY is the property name), it will be called instead of removing the widgets directly. Note that the widget may have already been removed by the destroy function at the prepare phase. The model is updated (same as for regular properties). The render method is called (same as for regular properties). Every widget supports event handling by using the class EventSupport. This allows the widgets to attach listeners to other widgets and getting informed when an event happens. The 3 most important methods are the following: on: adds a listener off: removes a listener trigger: triggers an event So if a widget is interested in an event of another widget, it calls the function on with a callback function as parameter. If it is not interested anymore, it uses the function off with the same callback function as parameter. The following example shows how to handle a button click event. Listing 6. Handling an event var button = scout.create('Button', { parent: parent, label: 'click me!' }); button.render(); button.on('click', function(event) { // print 'Button \"click me!\" has been clicked' console.log('Button \"' + event.source.label + '\" has been clicked'); }); Every click on the button will execute the callback function. To stop listening, you could call button.off('click'), but this would remove every listener listening to the 'click' event. Better is to pass the same reference to the callback used with on as parameter for off. Listing 7. Stop listening for an event var button = scout.create('Button', { parent: parent, label: 'click me!' }); button.render(); var callback = function(event) { // print 'Button \"click me!\" has been clicked' console.log('Button \"' + event.source.label + '\" has been clicked'); // stop listening, a second click won't print anything button.off('click', callback); }; button.on('click', callback); If the callback function is bound using bind(), the bound function has to be used when removing the listener using off. This is because bind() returns a new function wrapping the original callback. In order to trigger an event rather than listening to one, you would use the function trigger. This is what the button in the above example does. When it is being clicked, it calls this.trigger('click') (this points to the instance of the button). With the second parameter you may specify additional data which will be copied onto the event. By default the event contains the type (e.g. 'click') and the source which triggered it (e.g. the button). Listing 8. Triggering an event with custom event data trigger('click', { foo: 'bar' }); // callback function(event) { console.log(event.foo); // prints bar } A special kind of event is the property change event. Whenever a property changes, such an event is triggered. The event has the following properties: type: the type of the event which is always propertyChange source: the widget which triggered the event name: the name of the property newValue: the new value of the property oldValue: the old value of the property Listening to such an event works in the same way as for other events, just use the type propertyChange. The listening below shows how to handle the property change event if the selected property of a toggle button changes. Listing 9. Example of a property change event import {Button} from '@eclipse-scout/core'; var button = scout.create('Button', { parent: parent, label: 'click me!', displayStyle: Button.DisplayStyle.TOGGLE }); button.render(); button.on('propertyChange', function(event) { if (event.propertyName == 'selected') { // prints 'Property selected changed from false to true' console.log('Property ' + event.propertyName + ' changed from ' + event.oldValue + ' to ' + event.newValue); } }); button.setSelected(true); The above propertyChange handler ist executed for ALL property changes of that button. This makes it necessary to check for the right property name inside the listener as it is done here with the if statement at the start of the listener. Because this is a very common pattern there is a shortcut available. You can listen for a specific property change with the following notation: propertyChange:propertyName. Listing 10. Listen for specific property changes button.on('propertyChange:selected', function(event) { // This listener is only executed when the 'selected' property changes console.log('Property ' + event.propertyName + ' changed from ' + event.oldValue + ' to ' + event.newValue); }); button.setSelected(true); See chapter Icons for a general introduction to icons in Scout. Widgets that have a property iconId (for instance Menu) can display an icon. This iconId references an icon which can be either a bitmap image (GIF, PNG, JPEG, etc.) or a character from an icon-font. An example for an icon-font is the scoutIcons.ttf which comes shipped with Scout. Depending on the type (image, font-icon) the iconId property references: Image: iconId is an URL which points to an image resource accessible via HTTP. Example: /icons/person.png Font-icon: iconId has the format font:[UTF-character]. Example: font:\\uE043, references a character in scoutIcons.ttf Example: font:fooIcons \\uE109, references a character in custom font fooIcons.ttf Icon Constants: iconId has the format: ${iconId:[constant]}, where constant is a constant in the module icons.js. This format is especially useful when you configure a Scout widget with a JSON model. The value of the constant is again either an image or a font-icon as described above. Example: ${iconId:ANGLE_UP} uses icons.ANGLE_UP, icons predefined by Scout Example: ${iconId:foo.BAR} uses foo.icons.BAR, use this for custom icon constant objects As seen in the previous chapters, the creation of a widget requires a parent. This establishes a link between the child and the parent widget which is necessary for several actions. Rendering a widget into the container of the parent If you call widget.render() you don’t have to specify the HTML container to which the widget should be appended. It takes the container of the parent widget by default which is parent.$container. You can still pass a custom $parent if you like. Removing a widget and its children If widget.remove() is called, the widget will be removed from the DOM. Even though removing the parent HTML node would be sufficient in order to make the children disappear from the screen, every child widget will be removed as well. This gives the child widgets the possibility to clean up their rendering state and detach listeners. This is necessary because the widgets still exist after removal and their data can still be updated. Such cleanup actions are typically done by overriding widget._remove(). Remember to call the _remove of the super class as well. Finding child widgets This is something you will have to do very often if you specified your widgets in a JSON file. If you want to access these widgets from JavaScript you need to get them first. This is easy due to the linkage of the widgets. You can just use the function widget(id). See also chapter Finding a Widget for more details. Establishing a link independent of the DOM structure Normally a child widget contains HTML elements which are children of the parent’s HTML elements. Even though this is the regular case it is not a must. Amongst others the following widgets have HTML elements appended to the HTML element of the desktop rather than their actual parents: dialogs, popups, tooltips. The main reason is because these widgets lay on top of every other widget. In order to not get into the z-index hell it is a lot easier to put these widgets on the top level of the DOM structure. But since the HTML elements are now separated, the only link is the parent/child hierarchy. Imagine you have a string field which displays a tooltip. The parent of the tooltip is the string field but the HTML element is appended to the HTML element of the desktop. Removing the string field will now remove the tooltip as well even though their HTML elements are not linked. Or think about the following case: there is a popup open which contains a smart field. The smart field shows a popup by itself displaying the proposals. The HTML elements of the main popup and the smart field popup are siblings meaning they are on the same level in the DOM. Normally a popup gets closed when an element not belonging to the popup is clicked. But why is the main popup not closed if the user clicks into the smart field popup even though their HTML elements are not linked? Exactly, because the smart field popup is a child of the smart field and therefore a child of the main popup. So far we have learned what the parent is. But what is the owner? The owner is the only one which is allowed to destroy its children. Normally, the parent and the owner are the same, that is why you don’t have to specify the owner explicitly when creating a widget. The owner will be different if you specify it explicitly or if you use setParent() to temporarily change the parent of a widget. In that case the owner points to the old parent. This means if the new parent were destroyed, the newly linked child would not be destroyed, only removed from the DOM. This comes in handy if you want to temporarily give the control over rendering/removal to another widget (like a popup) but don’t let the other widget destroy your widget (e.g. when the popup is closed) because you want to use your widget again (e.g. display it on another popup).","title":"Widget","component":"scout-docs","version":"22","name":"widget","url":"/scout-docs/22/technical-guide/user-interface/widget.html","titles":[{"text":"Lifecycle","hash":"lifecycle","id":1},{"text":"Creating a Widget","hash":"creating-a-widget","id":2},{"text":"Creating a Widget Declaratively","hash":"creating-a-widget-declaratively","id":3},{"text":"Using constants in a JSON model","hash":"using-constants-in-a-json-model","id":4},{"text":"Finding a Widget","hash":"finding-a-widget","id":5},{"text":"Properties","hash":"properties","id":6},{"text":"Widget Properties","hash":"widget-properties","id":7},{"text":"Events","hash":"events","id":8},{"text":"Property Change Event","hash":"property-change-event","id":9},{"text":"Icons","hash":"icons","id":10},{"text":"Parent and Owner","hash":"parent-and-owner","id":11}]},"61":{"id":61,"text":"This document is referring to a past Scout release. Please click here for the recent version. In a scout application, typically, the scout client requests some data from the scout server. Sometimes, however, the communication needs to go the other way: The scout server needs to inform the scout client about something. With client notifications it is possible to do so. Figure 1. Client Notifications Example scenarios for client notifications are: some data shared by client and server has changed (e.g. a cache on the client is no longer up-to-date, or a shared variable has changed) a new incoming phone call is available for a specific client and should be shown in the GUI a user wants to send a message to another user Scout itself uses client notifications to synchronize code type and permission caches and session shared variables. A client notification message is just a serializable object. It is published on the server and can be addressed either to all client nodes or only to a specific session or user. On the UI server side, handlers can be used to react upon incoming notifications. Client notification handlers may change the state of the client model. In case of visible changes in the UI, these changes are automatically reflected in the UI. In case of multiple server nodes, the client notifications are synchronized using cluster notifications to ensure that all UI servers receive the notifications. Figure 2. Long Polling Client notifications are implemented using long polling as described below, because long polling works reliably in most corporate networks with proxy servers between server and client as well as with security policies that do not allow server push. With long polling, the client requests notifications from the server repeatedly. If no new notifications are available on the server, instead of sending an empty response, the server holds the request open and waits until new notifications are available or a timeout is reached. In addition to the long polling mechanism, pending client notifications are also transferred to the client along with the response of regular client requests. A client notification can be published on the server using the ClientNotificationRegistry. Publishing can be done either in a non-transactional or transactional way (only processed, when the transaction is committed). The UI Server either receives the notifications via the ClientNotificationPoller or in case of transactional notifications together with the response of a regular service request. The notification is then dispatched to the corresponding handler. When a client notifications is published on the server, it is automatically synchronized with the other server nodes (by default). Figure 3. Client Notification Big Picture Figure 4. Client Notification Multiple Server Nodes In order to deal with multiple ui-server nodes, the server holds a single notifications queue per ui-server node. In these queues only the relevant notifications need to be kept: If a client notification is addressed to a session or user, that does not exist on a ui-server node, it is not added to the queue. Sessions and corresponding users are registered on the server upon creation (and de-registered after destruction). Listing 1. Publishing Client Notifications BEANS.get(ClientNotificationRegistry.class).putForUser(\"admin\", new PersonTableChangedNotification()); There are several options to choose from when publishing a new client notification: The ClientNotificationAddress determines which how the client notification needs to be dispatched and handled. A client notification can be addressed to all nodes all sessions one or more specific session one or more specific user Client notifications can be published in a transactional or non-transactional way. Transactional means that the client notifications are only published once the transaction is committed. If the transaction fails, client notifications are disregarded. Non-transactional means that client notifications are published immediately without considering any transactions. Generally, it makes sense to distribute the client notifications automatically to all other server cluster nodes (if available). This is achieved using ClusterNotifications. It is however also possible to publish client notifications without cluster distribution. E.g. in case of client notifications already received from other cluster nodes. It is possible that a service generates a lot of client notifications that are obsolete once a newer notification is created. In this case a coalescer can be created to reduce the notifications: Listing 2. Client Notification Coalescer public class BookmarkNotificationCoalescer implements ICoalescer { @Override public List coalesce(List notifications) { // reduce to one return CollectionUtility.arrayList(CollectionUtility.firstElement(notifications)); } } The ClientNotificationDispatcher is responsible for dispatching the client notifications to the correct handler. To create a new client notification handler for a specific client notification, all you need to do is creating a class implementing org.eclipse.scout.rt.shared.notification.INotificationHandler, where T is the type (or subtype) of the notification to handle. The new handler does not need to be registered anywhere. It is available via jandex class inventory. Listing 3. Notification Handler for MessageNotifications public class MessageNotificationHandler implements INotificationHandler { @Override public void handleNotification(final MessageNotification notification) { Sometimes it is necessary to start and stop handling notification dynamically, (e.g. when a form is opened) in this case AbstractObservableNotificationHandler can be used to add and remove listeners. Dispatching is always done asynchronously. However, in case of transactional notifications, a service call blocks until all transactional notifications returned with the service response are handled. This behavior was implemented to simplify for example the usage of shared caches: Listing 4. Blocking until notification handling completed CodeService cs = BEANS.get(CodeService.class); cs.reloadCodeType(UiThemeCodeType.class); //client-side reload triggered by client notifications is finished List> reloadedCodes = cs.getCodeType(UiThemeCodeType.class).getCodes(); In the example above, it is guaranteed, that the codetype is up-to-date as soon as reloadCodeType is finished. Notification handlers are never called from a scout model thread. If the scout model needs to be updated when handling notifications, a model job needs to be created for that task. Listing 5. Notification Handler Creating Model Job @Override public void handleNotification(final MessageNotification notification) { ModelJobs.schedule(() -> { IDesktop desktop = ClientSessionProvider.currentSession().getDesktop(); // e.g. send dataChanged event to UI listeners desktop.dataChanged(notification.getMessage()); }, ModelJobs.newInput(ClientRunContexts.copyCurrent())); } Make sure to always run updates to the scout models in a model job (forms, pages, …​): Use ModelJobs.schedule(…​) where necessary in notification handlers.","title":"Client Notifications","component":"scout-docs","version":"22","name":"client-notification","url":"/scout-docs/22/technical-guide/working-with-data/client-notification.html","titles":[{"text":"Examples","hash":"examples","id":1},{"text":"Data Flow","hash":"data-flow","id":2},{"text":"Push Technology","hash":"push-technology","id":3},{"text":"Components","hash":"components","id":4},{"text":"Multiple Server Nodes","hash":"multiple-server-nodes","id":5},{"text":"Publishing","hash":"publishing","id":6},{"text":"ClientNotificationAddress","hash":"clientnotificationaddress","id":7},{"text":"Transactional vs. Non-transactional","hash":"transactional-vs-non-transactional","id":8},{"text":"Distributing to all Cluster Nodes","hash":"distributing-to-all-cluster-nodes","id":9},{"text":"Coalescing Notifications","hash":"coalescing-notifications","id":10},{"text":"Handling","hash":"handling","id":11},{"text":"Creating a Client Notification Handler","hash":"creating-a-client-notification-handler","id":12},{"text":"Handling Notifications Temporarily","hash":"handling-notifications-temporarily","id":13},{"text":"Asynchronous Dispatching","hash":"asynchronous-dispatching","id":14},{"text":"Updating Scout Model","hash":"updating-scout-model","id":15}]},"62":{"id":62,"text":"This document is referring to a past Scout release. Please click here for the recent version. A CodeType is a structure to represent a tree key-code association. They are used in SmartField and SmartColumn. implements: ICodeType extends: AbstractCodeType CodeTypes are used in SmartField to let the user choose between a finite list of values. The value stored by the field corresponds to the key of the selected code. A CodeType can be seen as a tree of Codes. Each code associates to the key (the Id) other properties: among others a Text and an IconId. In order to have the same resolving mechanism (getting the display text of a key), CodeTypes are also used in SmartColumns. To choose multiple values in the list, the fields ListBox (flat CodeType) and TreeBox (hierarchical CodeType) can be used. The codes are organized in a tree. Therefore, a CodeType can have one or more child codes at the root level, and each code can have other child codes. In a lot of cases a list of codes (meaning a tree containing only leaves at the first level) is sufficient to cover most of the need. Child codes are ordered in their parent code. This is realized with the order annotation. The type of the key is defined by its generic parameter . It is very common to use a type from the java.lang.* package (like Integer or String), but any Java Object is suitable. It must: implement Serializable have correctly implemented equals() and hashCode() functions be present in the server and the client There is no obligation to have the same type for the Id between the codes of a CodeType (meaning the same generic type parameter for the codes inner-class). However, it is a good practice to have the same type between the codes of a CodeType, because the Id are used as value of SmartFields. Therefore, the generic parameter describing the type of value of a SmartField must be compatible with the type of the codes contained in the CodeType. CodeType in a SmartField (or SmartColumn). @ClassId(\"08ccc68e-7b72-4fe0-b666-245ddb8b8441\") public class YesOrNoSmartField extends AbstractSmartField { // other configuration of properties. @Override protected Class> getConfiguredCodeType() { return YesOrNoCodeType.class; } } If the SmartField (or SmartColumn) works with a CodeType, a specific LookupCall is instantiated to get the LookupRows based on the Codes contained in a CodeType. Scout-runtime will handle the instantiation and the caching of CodeTypes. This function returns the text corresponding to the key using a CodeType: public String getCodeText(boolean key) { ICode c = BEANS.get(YesOrNoCodeType.class).getCode(key); if (c != null) { return c.getText(); } return null; } The common way to define a CodeType is to extend AbstractCodeType. Each code is an inner-class extending AbstractCode. Like usual the properties of Codes and CodeTypes can be set using the getConfiguredXxxxxx() methods. See the Java Code of a simple YesOrNoCodeType having just two codes: YesOrNoCodeType.YesCode YesOrNoCodeType.NoCode The SDK provides some help to generate CodeTypes and Codes. Use File → New → Scout → Scout Code Type to generate a new code. Code types are not necessarily hardcoded. It is possible to implement other mechanisms to load a CodeType dynamically. The description of the Codes can come from a database or from an XML files. If you want to do so, you just need to implement the method corresponding to the event LoadCodes. It is possible to use the static and the dynamic approach together. In this case, if there is a conflict (2 codes for the same id) the event OverwriteCode is triggered. Note for advanced users: Each CodeType is instantiated for each language each partition Note: A drawback is that the CodeType class is not aware of the language and the partition it is instantiated for. Only the CodeTypeStore that manages the CodeType instances knows for which language and which partition they have been instantiated.","title":"Code Type","component":"scout-docs","version":"22","name":"code-type","url":"/scout-docs/22/technical-guide/working-with-data/code-type.html","titles":[{"text":"Description","hash":"description","id":1},{"text":"Organisation of the codes","hash":"organisation-of-the-codes","id":2},{"text":"Type of the key","hash":"type-of-the-key","id":3},{"text":"Using a CodeType","hash":"using-a-codetype","id":4},{"text":"SmartField or SmartColumn","hash":"smartfield-or-smartcolumn","id":5},{"text":"Accessing a code directly","hash":"accessing-a-code-directly","id":6},{"text":"Static CodeType","hash":"static-codetype","id":7},{"text":"Java Code and structure","hash":"java-code-and-structure","id":8},{"text":"With the SDK","hash":"with-the-sdk","id":9},{"text":"Dynamic CodeType","hash":"dynamic-codetype","id":10}]},"63":{"id":63,"text":"This document is referring to a past Scout release. Please click here for the recent version. The Java API for XML-Based Web Services (JAX-WS) is a Java programming language API for creating web services. JAX-WS is one of the Java XML programming APIs, and is part of the Java EE platform. Scout facilitates working with webservices, supports you in the generation of artifacts, and provides the following functionality: ready to go Maven profile for easy webservice stub and artifact generation full JAX-WS 2.3 compliance JAX-WS implementor independence provides an up front port type EntryPoint to enforce for authentication, and to run web requests in a RunContext adds cancellation support for on-going webservice requests provides a port cache for webservice consumers allows to participate in 2PC protocol for webservice consumers allows to provide 'init parameters' to handlers The JAX-WS Scout integration provides a thin layer on top of JAX-WS implementors to facilitate working with webservices. It depends on the JAX-WS 2.3.x API as specified in JSR 224. It is implementor neutral, and was tested with with the following implementations: JAX-WS RI (reference implementation) JAX-WS METRO Apache CXF The integration does not require you to bundle the JAX-WS implementor with your application, which is a prerequisite for running in an EE container. A servlet container like Apache Tomcat typically does not ship with a JAX-WS implementor. As the actual implementor, you can either use JAX-WS RI as shipped with the JRE, or provide a separate implementor like JAX-WS METRO or Apache CXF in the form of a Maven dependency. However, JAX-WS RI does not provide a servlet based entry point, because the Servlet API is not part of the Java SE specification. When publishing webservices, it therefore is easiest to ship with a separate implementor: Declare a respective Maven dependency in your webbapp project - that is the Maven module typically containing the application’s web.xml. When running in an EE container, the container typically ships with a JAX-WS implementor. It is highly recommended to use that implementor, primarily to avoid classloading issues, and to further profit from the container’s monitoring and authentication facility. Refer to the containers documentation for more information. JAX-WS Scout integration is prepared to run with different implementors. Unfortunately, some implementors do not implement the JSR exactly, or some important functionality is missing in the JSR. To address this fact without loosing implementor independence, the delegate bean JaxWsImplementorSpecifics exists. As of now, Scout ships with three such implementor specific classes, which are activated via config.properties by setting the property scout.jaxws.implementor with its fully qualified class name. By default, JAX-WS METRO implementor is installed. For instance, support for Apache CXF implementor is activated as following: scout.jaxws.implementor=org.eclipse.scout.rt.server.jaxws.implementor.JaxWsCxfSpecifics class description JaxWsRISpecifics implementor specifics for JAX-WS Reference Implementation (RI) as contained in JRE JaxWsMetroSpecifics implementor specifics for JAX-WS METRO implementation JaxWsCxfSpecifics implementor specifics for Apache JAX-WS CXF implementation Of course, other implementors can be used as well. For that to work, install your own JaxWsImplementorSpecifics class, and reference its fully qualified name in config.properties. This class encapsulates functionality that is defined in JAX-WS JSR 224, but may diverge among JAX-WS implementors. As of now, the following points are addressed: missing support in JSR to set socket connect and read timeout; proprietary 'property' to set response code in Apache CXF; when working with Apache CXF, response header must be set directly onto Servlet Response, and not via MessageContext; when working with JAX-WS METRO or JAX-WS RI, the handler’s return value is ignored in one-way communication; instead, the chain must be exited by throwing a webservice exception; Learn more about how to configure a JAX-WS implementor: Configure JAX-WS implementor The effective dependency to the JAX-WS implementor is to be specified in the pom.xml of the webapp module (not the server module). That allows for running with a different implementor depending on the environment, e.g. to provide the implementor yourself when starting the application from within your IDE in Jetty, or to use the container’s implementor when deploying to an EE enabled application server. Even if providing the very same implementor for all environments yourself, it is good practice to do the configuration in the webapp module. A generally applicable configuration cannot be given, because the effective configuration depends on the implementor you choose, and whether it is already shipped with the application server you use. However, if JAX-WS RI is sufficient, you do not have to specify an implementor at all because already contained in JRE. If running in an EE application server, refer to the containers documentation for more information. Listing 1 provides sample configuration for shipping with JAX_WS METRO and Listing 2 does the same for Apache CXF Listing 1. Maven dependency for JAX-WS METRO com.sun.xml.ws jaxws-rt ... Listing 2. Maven dependency for Apache CXF org.apache.cxf cxf-rt-frontend-jaxws ... org.apache.cxf cxf-rt-transports-http ... org.springframework spring-web ... This section describes the configuration of the entry point Servlet to publish webservices. If working with webservice consumers only, no configuration is required. Similar to the pom.xml as described in Configure JAX-WS Maven dependency in pom.xml, the web.xml differs from implementor to implementor, and whether the implementor is already shipped with the application server. Nevertheless, the following Listing 3 show a sample configuration for JAX-WS METRO and Listing 4 for Apache CXF. Listing 3. web.xml for JAX-WS METRO Servlet com.sun.xml.ws.server.http.publishStatusPage true com.sun.xml.ws.server.http.publishWSDL true com.sun.xml.ws.transport.http.servlet.WSServletContextListener jaxws com.sun.xml.ws.transport.http.servlet.WSServlet jaxws /jaxws/* (1) 1 the base URL where to publish the webservice endpoints Listing 4. web.xml for Apache CXF Servlet CXF Servlet jaxws org.apache.cxf.transport.servlet.CXFServlet config-location /WEB-INF/cxf-jaxws.xml (1) 1 jaxws /jaxws/* (2) 1 Apache CXF specific configuration file for endpoints to be published. See Apache CXF for more information. 2 the base URL where to publish the webservice endpoints But, if running in an EE container, it is most likely that a Servlet configuration must not be configured, because the endpoints are discovered by the application server, or registered in a vendor specific way. Refer to the containers documentation for more information. Some application servers like Oracle WebLogic Server (WLS) allow the port types to be registered as a Servlet in web.xml. However, this is vendor specific, and works despite the fact that port type does not implement 'javax.servlet.Servlet'. Do not forget to exclude the webservice’s Servlet URL pattern from authentication filter. Scout JAX-WS integration does not prescribe how to organize your webservices in terms of Maven modules. You could either put all your webservices directly into the server module, or create a separate jaxws module containing all webservices, or even create a separate jaxws module for each webservice. Most often, the second approach of a single, separate jaxws module, which the server module depends on, is chosen. This is mainly because of the following benefits: annotation processing must not be enabled for the entire server module one module to build all webservice artifacts at once easier to work with shared element types among webservices Figure 1. typical modularization It is important to note, that the server depends on the jaxws module, and not vice versa. The jaxws module is primarily of technical nature, meaning that it knows how to generate its WS artifacts, and also contains those. However, implementing port type beans and even implementing handler beans are typically put into the server module to the access service and database layer. On the other hand, WS clients may be put into jaxws module, because they rarely contain any project specific business logic. You may ask yourself, how the jaxws module can access the implementing port type and handlers located in the server module. That works because of the indirection via bean manager, and because there is a flat classpath at runtime. See WebServiceEntryPoint for more information. The Maven plugin 'com.sun.xml.ws:jaxws-maven-plugin' with the goal 'wsimport' is used to generate a webservice stub from a WSDL file and its referenced XSD schema files. If your Maven module inherits from the Scout module 'maven_rt_plugin_config-master', the 'jaxws' profile is available, which activates automatically upon the presence of a 'WEB-INF/wsdl' folder. Instead of inheriting from that module, you can alternatively copy the 'jaxws' profile into your projects parent POM module. This profile is for convenience purpose, and provides a ready-to-go configuration to generate webservice stubs and webservice provider artifacts. It configures the 'jaxws-maven-plugin' to look for WSDL and XSD files in the folder 'src/main/resources/WEB-INF/wsdl', and for binding files in the folder '/src/main/resources/WEB-INF/binding'. Upon generation, the stub will be put into the folder 'target/generated-sources/wsimport'. The profiles requires the Scout runtime version to be specified, and which is used to refer to org.eclipse.scout.jaxws.apt module to generate webservice provider artifacts. However, this version is typically defined in pom.xml of the parent module, because also used to refer to other Scout runtime artifacts. Listing 5. Scout version defined as Maven property 5.2.0-SNAPSHOT If your project design envisions a separate JAR module per WSDL, you simply have to set the property 'jaxws.wsdl.file' with the name of your WSDL file in the module’s pom.xml (example in Listing 6). Listing 6. wsimport configuration in pom.xml if working with a single WSDL file per JAR module YourWebService.wsdl (1) 1 name of the wsdl file Otherwise, if having multiple WSDL files in your JAR module, some little more configuration is required, namely a respective execution section per WSDL file. Thereby, the 'id' of the execution section must be unique. Scout 'jaxws' profile already provides one such section, which is used to generate the stub for a single WSDL file (see such configuration in Listing 6), and names it 'wsimport-1'. It is simplest to name the subsequent execution sections 'wsimport-2', 'wsimport-3', and so on. For each execution section, you must configure its unique id, the goal 'wsimport', and in the configuration section the respective wsdlLocation and wsdlFile. For 'wsimport' to work, wsdlLocation is not required. However, that location will be referenced in generated artifacts to set the wsdl location via @WebService and @WebServiceClient. The complete configuration is presented in Listing 7. If you decide to configure multiple WSDL files in your POM as described in Listing 7, the configuration defined in the parent POM (maven_rt_plugin_config-master) and expecting a configuration as presented in Listing 6 needs to be overridden, therefore one of your execution id needs to be wsimport-1. Listing 7. wsimport configuration in pom.xml if working with multiple WSDL files per JAR module com.sun.xml.ws jaxws-maven-plugin (1) wsimport-1 (2) wsimport (3) WEB-INF/wsdl/YourFirstWebService.wsdl (4) YourFirstWebService.wsdl (5) (6) wsimport-2 wsimport WEB-INF/wsdl/YourSecondWebService.wsdl YourSecondWebService.wsdl ... 1 declare an execution section for each WSDL file 2 give the section a unique id (wsimport-1, wsimport-2, wsimport-3, …​) 3 specify the goal 'wsimport' to build the webservice stub 4 specify the project relative path to the WSDL file 5 specify the relative path to the WSDL file (relative to 'WEB-INF/wsdl') 6 declare an execution section for the next WSDL file Further, you can overwrite any configuration as defined by 'jaxws-maven-plugin'. See http://www.mojohaus.org/jaxws-maven-plugin/ for supported configuration properties. Also, it is good practice to create a separate folder for each WSDL file, which also contains all its referenced XSD schemas. Then, do not forget to change the properties wsdlLocation and wsdlFile accordingly. By default, all XML files contained in folder 'WEB-INF/binding' are used as binding files. But, most often, you will have a global binding file, which applies to all your WSDL files, and some custom binding files different per WSDL file and XSD schema files. See how to explicitly configure binding files in Listing 8. Listing 8. explicit configuration of binding files ... ... global-bindings.xml (1) your-first-webservice-ws-bindings.xml (2) your-first-webservice-xs-bindings.xml (3) ... ... global-bindings.xml (1) your-second-webservice-ws-bindings.xml (2) your-second-webservice-xs-bindings.xml (3) 1 global binding file which applies to all XSD schema elements. See Listing 9 for an example. 2 custom binding file to customize the webservice’s WSDL components in the namespace http://java.sun.com/xml/ns/jaxws. See Listing 10 for an example. 3 custom binding file to customize the webservice’s XSD schema elements in the namespace http://java.sun.com/xml/ns/jaxb. See Listing 11 for an example. With binding files in place, you can customize almost every WSDL component and XSD element that can be mapped to Java, such as the service endpoint interface class, packages, method name, parameter name, exception class, etc. The global binding file typically contains some customization for common data types like java.util.Date or java.util.Calendar, whereas the custom binding files are specific for a WSDL or XSD schema. See XML adapters to work with java.util.Date and java.util.Calendar. Listing 9. example of global binding file in the namespace http://java.sun.com/xml/ns/jaxb By default, generated artifacts are put into the package corresponding to the element’s namespace. Sometimes, you like to control the package names, but you want to do that on a per-namespace basis, and not put all the artifacts of a webservice into the very same package. That is mainly to omit collisions, and to have artifacts shared among webservices not duplicated. Two separate binding files are required to customize WSDL components and XSD schema elements. That is because WSDL component customization is to be done in 'jaxws' namespace http://java.sun.com/xml/ns/jaxws, whereas XSD schema element customization in 'jaxb' namespace http://java.sun.com/xml/ns/jaxb. Listing 10. example of jaxws component customization in the namespace http://java.sun.com/xml/ns/jaxws (1) (2) 1 customization via jaxws namespace: http://java.sun.com/xml/ns/jaxws 2 instructs to put all webservice components (port type, service) into package org.eclipse.ws.yourfirstwebservice Listing 11. example of xsd schema element customization in the namespace http://java.sun.com/xml/ns/jaxb (1) (2) (3) 1 customization via jaxb namespace: http://java.sun.com/xml/ns/jaxb 2 instructs to put all XSD schema elements in namespace http://eclipse.org/public/services/ws/soap into package org.eclipse.ws.yourfirstwebservice 3 instructs to put all XSD schema elements in namespace http://eclipse.org/public/services/ws/common/soap into package org.eclipse.ws.common wsimport allows to directly configure the package name for files to be generated (packageName). However, this is discouraged, because all artifacts are put into the very same package. Use package customization on a per-namespace basis instead. For shared webservice artifacts, you can also use XJC binding compiler to generate those artifacts in advance, and then provide the resulting episode binding file (META-INF/sun-jaxb.episode) to wsimport. See https://www.mojohaus.org/jaxb2-maven-plugin/Documentation/v2.4/example_xjc_basic.html for more information. Annotation Processing (APT) is a tool which can be enabled to fire for annotated types during compilation. In JAX-WS Scout integration, it is used as a trigger to generate webservice port type implementations. Such an auto-generated port type implementation is called an entry point. It is to be published as the webservice’s endpoint, and acts as an interceptor for webservice requests. It optionally enforces for authentication, and makes the request to be executed in a RunContext. Then, it handles the web request to the effectively implementing port type bean for actual processing. The entry point generated simplifies the actual port type implementation by removing lot of glue code to be written by hand otherwise. Of course, this entry point is just for convenience purpose, and it is up to you to make use of this artifact. When using 'jaxws' Scout Maven profile, annotation processing is enabled for that module by default. But, an entry point for a webservice port type will only be generated if enabled for that port type, meaning that a class annotated with WebServiceEntryPoint pointing to that very endpoint interface is found in this module. Anyway, for a sole webservice consumer, it makes no sense to generate an entry point at all. In Eclipse IDE, the workspace build ignores annotation processing as configured in pom.xml. Instead, it must be enabled separately with the following files. Nevertheless, to simply run Maven build with annotation support from within Eclipse IDE, those files are not required. file description .settings/org.eclipse.jdt.core.prefs Enables APT for this module via the property org.eclipse.jdt.core.compiler.processAnnotations=enabled .settings/org.eclipse.jdt.apt.core.prefs Enables APT for this module via the property org.eclipse.jdt.apt.aptEnabled=true .factorypath Specifies the annotation processor to be used (JaxWsAnnotationProcessor) and dependent artifacts Simply run mvn clean compile on the project. If you are experiencing some problems, run with -X debug flag to get a more detailed error message. In the Eclipse IDE, there are three ways to generate webservice stubs and APT artifacts. the implicit way on behalf of the workspace build and m2e integration (automatically, but sometimes not reliable) the explicit but potentially slow way by doing a 'Update Maven Project' with 'clean projects' checked (Alt+F5) the explicit and faster way by running a Maven build for that project. Thereto, right-click on the project or pom.xml, then select the menu 'Run As | Maven build…​', then choose 'clean compile' as its goal and check 'Resolve workspace artifacts', and finally click 'Run'. Afterwards, do not forget to refresh the project by pressing F5. If the webservice stub(s) or APT artifacts are not generated (anew or at all), delete the target folder manually, and continue according to procedure number three. A possible reason might be the presence of 'target\\jaxws\\wsartifact-hash'. Then, for each webservice, a 'hash file' is computed by 'wsimport', so that regeneration only occurs upon a change of WSDL or XSD files. Stub and APT artifacts are derived resources, and should be excluded from version control. When working with Eclipse IDE, this is done automatically by eGit, because it adds derived resources to .gitignore (if configured to do so). JaxWsAnnotationProcessor is an annotation processor provided by Scout JAX-WS integration to generate an entry point for an endpoint interface during compilation. The instructions how to generate the entry point is given via a Java class or Java interface annotated with WebServiceEntryPoint annotation. In this chapter, you will learn how to publish a webservice provider via an entry point. An entry point implements the endpoint interface (or port type interface), and is published as the webservice endpoint for that endpoint interface. The entry point itself is auto generated by JaxWsAnnotationProcessor during compile time, based on instructions as given by the respective class/interface annotated with WebServiceEntryPoint annotation. The entry point is responsible to enforce authentication and to run the web request in a RunContext. In turn, the request is propagated to the bean implementing the endpoint interface. Figure 2 illustrates the endpoint’s class hierarchy and the message flow for a web request. Figure 2. Interaction of entry point and port type As you can see, both, entry point and port type implement the endpoint interface. But it is the entry point which is actually installed as the webservice endpoint, and which receives web requests. However, the webservice itself is implemented in the implementing bean, which typically is located in server module. See Modularization for more information. Upon a web request, the entry point simply intercepts the web request, and then invokes the web method on the implementing bean for further processing. See an example of an implementing port type bean, which is invoked by entry point. Do not forget to annotate the implementing bean with ApplicationScoped annotation in order to be found by bean manager. This section describes the steps required to generate an entry point. For demonstration purposes, a simple ping webservice is used, which provides a single method 'ping' to accept and return a String object. See the WSDL file of ping webservice: PingWebService.wsdl See the endpoint interface of ping webservice: PingWebServicePortType.java To generate an entry point for the webservice’s endpoint interface, create an interface as following in your jaxws project. @WebServiceEntryPoint(endpointInterface = PingWebServicePortType.class) (2) interface PingWebServiceEntryPointDefinition { (1) } 1 Create an interface or class to act as an anchor for the WebServiceEntryPoint annotation. This class or interface has no special meaning, except that it declares the annotation to be interpreted by annotation processor. 2 Reference the endpoint interface for which an entry point should be generated for. Typically, the endpoint interface is generated by 'wsimport' and is annotated with WebService annotation. It is important to understand, that the interface PingWebServiceEntryPointDefinition solely acts as the anchor for the WebServiceEntryPoint annotation. This class or interface has no special meaning, except that it declares the annotation to be interpreted by annotation processor. Typically, this class is called Entry Point Definition. If running mvn clean compile, an entry point is generated for that endpoint interface. See the entry point as generated for ping webservice: PingWebServicePortTypeEntryPoint.java If you should experience some problems in the entry point generation, refer to Build webservice stubs and APT artifacts from within Eclipse IDE, or Build webservice stubs and APT artifacts from console. This section gives an overview on how to configure the entry point to be generated. attribute description endpointInterface (mandatory) Specifies the endpoint interface for which to generate an entry point for. An endpoint interface defines the service’s abstract webservice contract, and is also known as port type interface. Also, the endpoint interface is annotated with WebService annotation. entryPointName Specifies the class name of the entry point generated. If not set, the name is like the name of the endpoint interface suffixed with EntryPoint. entryPointPackage Specifies the package name of the entry point generated. If not set, the package name is the same as of the element declaring this WebServiceEntryPoint annotation. serviceName Specifies the service name as declared in the WSDL file, and must be set if publishing the webservice via auto discovery in an EE container. Both, 'serviceName' and 'portName' uniquely identify a webservice endpoint to be published. See for valid service names in the WSDL: …​ portName Specifies the name of the port as declared in the WSDL file, and must be set if publishing the webservice via auto discovery in an EE container. Both, 'serviceName' and 'portName' uniquely identify a webservice endpoint to be published. See for valid port names in the WSDL: wsdlLocation Specifies the location of the WSDL document. If not set, the location is derived from WebServiceClient annotation which is typically initialized with the 'wsdlLocation' as provided to 'wsimport'. authentication Specifies the authentication mechanism to be installed, and in which RunContext to run authenticated requests. By default, authentication is disabled. If enabled, an AuthenticationHandler is generated and registered in the handler chain as very first handler. However, the position of that handler can be changed via order field on Authentication annotation. See Configure Authentication for more information. handlerChain Specifies the handlers to be installed. The order of the handlers is as declared. A handler is looked up as a bean, and must implement javax.xml.ws.handler.Handler interface. See Configure JAX-WS Handlers for more information. Besides the instructions which can be set via WebServiceEntryPoint annotation, it is further possible to contribute other annotations to the entry point. Simply declare the annotation of your choice as a sibling annotation to WebServiceEntryPoint annotation. In turn, this annotation will be added to the entry point as well. This may be useful to enable some vendor specific features, or e.g. to enable MTOM to efficiently send binary data to a client. That also applies for WebService annotation to overwrite values as declared in the WSDL file. Further, you can also provide your own handler chain binding file. However, handlers and authentication as declared via WebServiceEntryPoint annotation are ignored then. Handlers registered via handlerChain must be beans, meaning either annotated with @Bean or @ApplicationScoped. The binding to the concrete endpoint is done via 'endpointInterface' attribute. If a WSDL declares multiple services, create a separate entry point definition for each service to be published. Annotate the Entry Point Definition class with `IgnoreWebServiceEntryPoint' to not generate an entry point for that definition. This is primarily used while developing an entry point, or for documenting purpose. Some fields require you to provide a Java class. Such fields are mostly of the annotation type Clazz, which accepts either the concrete Class, or its 'fully qualified name'. Use the latter if the class is not visible from within jaxws module. However, if ever possible specify a Class. Because most classes are looked up via bean manager, this can be achieved with an interface located in 'jaxws' module, but with an implementation in 'server' module. The field 'authentication' on WebServiceEntryPoint configures what authentication mechanism to install on the webservice endpoint, and in which RunContext to run authenticated webservice requests. It consists of the IAuthenticationMethod to challenge the client to provide credentials, and the ICredentialVerifier to verify request’s credentials against a data source. By default, authentication is disabled. If enabled, an AuthenticationHandler is generated and registered in the handler chain as very first handler. The position can be changed via order field on Authentication annotation. The following properties can be set. method (mandatory) Specifies the authentication method to be used to challenge the client to provide credentials. By default, NullAuthenticationMethod is used to disable authentication. See IAuthenticationMethod for more information. verifier Specifies against which data source credentials are to be verified. By default, ForbiddenCredentialVerifier is used to reject any webservice request. See ICredentialVerifier for more information. order Specifies the position where to register the authentication handler in the handler chain. By default, it is registered as the very first handler. principalProducer Indicates the principal producer to use to create principals to represent authenticated users. By default, SimplePrincipalProducer is used. runContextProducer Indicates which RunContext to use to run authenticated webservice requests. By default, ServerRunContextProducer is used, which is based on a session cache, and enforces to run in a new transaction. If using container based authentication (authentication enforced by the application server), use ContainerBasedAuthenticationMethod as authentication method, and do not configure a credential verifier. Listing 12. Example configuration for an entry point definition @WebServiceEntryPoint( endpointInterface = PingWebServicePortType.class, (1) entryPointName = \"PingWebServiceEntryPoint\", entryPointPackage = \"org.eclipse.scout.docs.ws.ping\", serviceName = \"PingWebService\", portName = \"PingWebServicePort\", handlerChain = {(2) @Handler(@Clazz(CorrelationIdHandler.class)), (3) @Handler(value = @Clazz(IPAddressFilter.class), initParams = { (4) @InitParam(key = \"rangeFrom\", value = \"192.200.0.0\"), @InitParam(key = \"rangeTo\", value = \"192.255.0.0\")}), @Handler(@Clazz(LogHandler.class)), (5) }, authentication = @Authentication( (6) order = 2, (7) method = @Clazz(BasicAuthenticationMethod.class), (8) verifier = @Clazz(ConfigFileCredentialVerifier.class))) (9) @MTOM (10) 1 References the endpoint interface for which to generate an entry point for. 2 Declares the handlers to be installed on that entry point. The order is as declared. 3 Registers the 'CorrelationIdHandler' as the first handler to set a correlation ID onto the current message context. See Propagate state among Handlers and port type for more information about state propagation. 4 Registers the 'IpAddressFilter' as the second handler to filter for IP addresses. Also, this handler is parameterized with 'init params' to configure the valid IP range. 5 Registers the LogHandler as the third handler to log SOAP messages. 6 Configures the webservice’s authentication. 7 Configures the 'AuthHandler' to be put at position 2 (0-based), meaning in between of IpAddressFilter and LogHandler. By default, AuthHandler would be the very first handler in the handler chain. 8 Configures to use BASIC AUTH as authentication method. 9 Configures to verify user’s credentials against 'config.properties' file. 10 Specification of an MTOM annotation to be added to the entry point. This configuration generates the following artifacts: Figure 3. generated artifacts All artifacts are generated into the package 'org.eclipse.scout.docs.ws.ping', as specified by the definition. The entry point itself is generated into 'PingWebServiceEntryPoint.java'. Further, for each handler, a respective handler delegate is generated. That allows handlers to be looked up via bean manager, and to run the handlers on behalf of a RunContext. Also, an AuthHandler is generated to authenticate web requests as configured. The handler-chain XML file generated looks as following. As specified, the authentication handler is installed as the third handler. Listing 13. PingWebServiceEntryPoint_handler-chain.xml org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_LogHandler org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_AuthHandler org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_IPAddressFilter org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_CorrelationIdHandler The following listing shows the beginning of the entry point generated. As you can see, the handler-chain XML file is referenced via HandlerChain annotation, and the MTOM annotation was added as well. Listing 14. PingWebServiceEntryPoint.java @WebService(name = \"PingWebServicePortType\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", endpointInterface = \"org.eclipse.scout.docs.snippets.JaxWsSnippet.PingWebServicePortType\", serviceName = \"PingWebService\", portName = \"PingWebServicePort\") @MTOM @HandlerChain(file = \"PingWebServiceEntryPoint_handler-chain.xml\") public class PingWebServiceEntryPoint implements PingWebServicePortType { See listing for an example of how to configure JAX-WS handlers. JAX-WS handlers are configured directly on the entry point definition via the array field handlerChain. In turn, JaxWsAnnotationProcessor generates a 'handler XML file' with the handler’s order preserved, and which is registered in entry point via annotation handlerChain. A handler can be initialized with static 'init parameters', which will be injected into the handler instance. For the injection to work, declare a member of the type Map in the handler class, and annotate it with javax.annotation.Resource annotation. Because handlers are looked up via bean manager, a handler must be annotated with ApplicationScoped annotation. If a handler requires to be run in a RunContext, annotate the handler with RunWithRunContext annotation, and optionally specify a RunContextProducer. If the web request is authenticated upon entering the handler, the RunContext is run on behalf of the authenticated user. Otherwise, if not authenticated yet, it is invoked with the Subject as configured in scout.jaxws.provider.user.handler config property. Listing 15. Example of a JAX-WS Handler @ApplicationScoped (1) @RunWithRunContext (2) public class IPAddressFilter implements SOAPHandler { @Resource private Map m_initParams; (3) @Override public boolean handleMessage(SOAPMessageContext context) { String rangeForm = m_initParams.get(\"rangeFrom\"); (4) String rangeTo = m_initParams.get(\"rangeTo\"); // ... return true; } @Override public boolean handleFault(SOAPMessageContext context) { return true; } @Override public Set getHeaders() { return Collections.emptySet(); } @Override public void close(MessageContext context) { } } 1 Annotate the Handler with ApplicationScoped annotation, so it can be looked up via bean manager 2 Optionally annotate the Handler with RunWithRunContext annotation, so the handler is invoked in a RunContext 3 Declare a Map member annotated with Resource annotation to make injection of 'init parameters' work 4 Access injected 'init parameters' Sometimes it is useful to share state among handlers, and even with the port type. This can be done via javax.xml.ws.handler.MessageContext. By default, a property put onto message context is only available in the handler chain. To make it available to the port type as well, set its scope to 'APPLICATION' accordingly. The following listings gives an example of how to propagate state among handlers and port type. Listing 16. This handler puts the correlation ID onto message context to be accessible by subsequent handlers and the port type. @ApplicationScoped public class CorrelationIdHandler implements SOAPHandler { @Override public boolean handleMessage(SOAPMessageContext context) { context.put(\"cid\", UUID.randomUUID().toString()); (1) context.setScope(\"cid\", Scope.APPLICATION); (2) return true; } @Override public boolean handleFault(SOAPMessageContext context) { return true; } @Override public Set getHeaders() { return Collections.emptySet(); } @Override public void close(MessageContext context) { } } 1 Put the 'correlation ID' onto message context. 2 Set scope to APPLICATION to be accessible in port type. By default, the scope if HANDLER only. Listing 17. This handler accesses the 'correlation ID' as set by the previous handler. @ApplicationScoped public class CorrelationIdLogger implements SOAPHandler { @Override public boolean handleMessage(SOAPMessageContext context) { String correlationId = (String) context.get(\"cid\"); (1) // ... return true; } @Override public boolean handleFault(SOAPMessageContext context) { return true; } @Override public void close(MessageContext context) { } @Override public Set getHeaders() { return Collections.emptySet(); } } 1 Get the 'correlation ID' from message context. Listing 18. This port type accesses the 'correlation ID' as set by the previous handler. @ApplicationScoped public class CorrelationIdPortType implements PingWebServicePortType { @Override public String ping(String ping) { MessageContext currentMsgCtx = IWebServiceContext.CURRENT.get().getMessageContext(); (1) String correlationId = (String) currentMsgCtx.get(\"cid\"); (2) // ... return ping; } } 1 Get the current message context via thread local IWebServiceContext 2 Get the 'correlation ID' from message context. Scout’s JAX-WS integration already provides complete support for reading a correlation ID from the HTTP header named X-Scout-Correlation-Id of the incoming web service request and propagates it to the RunContext that executes the actual service operation. A new correlation ID is created if the HTTP header is empty or missing. The CorrelationIdHandler example above just illustrates the capabilities of a SOAPHandler. You have to implement your own handler if the consumer provides a correlation ID in another header parameter or as part of the request’s payload. Listing 19. Add Scout’s WsProviderCorrelationIdHandler to the handler chain @WebServiceEntryPoint( endpointInterface = PingWebServicePortType.class, entryPointName = \"PingWebServiceEntryPoint\", entryPointPackage = \"org.eclipse.scout.docs.ws.ping2\", serviceName = \"PingWebService\", portName = \"PingWebServicePort\", handlerChain = { @Handler(@Clazz(WsProviderCorrelationIdHandler.class)), (1) @Handler(@Clazz(LogHandler.class)), }, authentication = @Authentication( method = @Clazz(BasicAuthenticationMethod.class), verifier = @Clazz(ConfigFileCredentialVerifier.class))) 1 Add the correlation ID handler at the beginning of the handler chain to ensure that all handlers can use its value (especially the LogHandler has to be added after the correlation ID handler). The registration of webservice endpoints depends on the implementor you use, and whether you are running in an EE container with webservice auto discovery enabled. When running in an EE container, webservice providers are typically found by their presence. In order to be found, such webservice providers must be annotated with WebService annotation, and must have the coordinates 'serviceName' and 'portName' set. Still, most application servers allow for manual registration as well. E.g. if using Oracle WebLogic Server (WLS), endpoints to be published can be registered directly in 'web.xml' as a Servlet. However, this is vendor specific. Refer to the container’s documentation for more information. If not running in an EE container, the registration is implementor specific. In the following, an example for JAX-WS METRO and Apache CXF is given. During startup, JAX-WS METRO looks for the file '/WEB-INF/sun-jaxws.xml', which contains the endpoint definitions. Listing 20. WEB-INF/sun-jaxws.xml During startup, Apache CXF looks for the config file as specified in 'web.xml' via 'config-location'. See Listing 4 for more information. Listing 21. WEB-INF/cxf-jaxws.xml As the webservice endpoint, specify the fully qualified name to the entry point, and not to the implementing port type. Depending on the implementor, a HTML page may be provided to see all webservices published. For JAX-WS METRO, enter the URL to a concrete webservice, e.g. http://localhost:8080/jaxws/PingWebService. For Apache CXF, enter the base URL where the webservices are published, e.g. http://localhost:8080/jaxws. Communication with a webservice endpoint is done based on the webservice’s port generated by 'wsimport'. Learn more how to generate a webservice stub from a WSDL file. To interact with a webservice endpoint, create a concrete 'WebServiceClient' class which extends from AbstractWebServiceClient, and specify the endpoint’s coordinates ('service' and 'port') via its bounded type parameters. Listing 22. Example of a WS-Client public class PingWebServiceClient extends AbstractWebServiceClient { (1) } 1 Specify 'service' and 'port' via bounded type parameters A WS-Client can be configured with some default values like the endpoint URL, credentials, timeouts and more. However, the configuration can also be set or overwritten later when creating the InvocationContext. See also Default configuration of WS-Clients. Listing 23. Example of a WS-Client configuration public class PingWebServiceClient1 extends AbstractWebServiceClient { @Override protected Class> getConfiguredEndpointUrlProperty() { return JaxWsPingEndpointUrlProperty.class; (1) } @Override protected Class> getConfiguredUsernameProperty() { return JaxWsPingUsernameProperty.class; (2) } @Override protected Class> getConfiguredPasswordProperty() { return JaxWsPingPasswordProperty.class; (2) } @Override protected Class> getConfiguredConnectTimeoutProperty() { return JaxWsPingConnectTimeoutProperty.class; (3) } @Override protected Class> getConfiguredReadTimeoutProperty() { return JaxWsPingReadTimeoutProperty.class; (3) } } 1 Specifies the endpoint URL 2 Specifies credentials 3 Specifies timeouts A webservice operation is invoked on behalf of an invocation context, which is associated with a dedicated port, and which specifies the data to be included in the web request. Upon a webservice call, the invocation context should be discarded. Listing 24. Example of a webservice call PingWebServicePortType port = BEANS.get(PingWebServiceClient.class).newInvocationContext().getPort(); (1) port.ping(\"Hello world\"); (2) 1 Obtain a new invocation context and port via WS-Client 2 Invoke the webservice operation Invoking newInvocationContext() returns a new context and port instance. The context returned inherits all properties as configured for the WS-Client (endpoint URL, credentials, timeouts, …​), but which can be overwritten for the scope of this context. The following listing illustrates how to set/overwrite properties. Listing 25. Configure invocation context with data to be included in the web request final InvocationContext context = BEANS.get(PingWebServiceClient.class).newInvocationContext(); PingWebServicePortType port = context .withUsername(\"test-user\") (1) .withPassword(\"secret\") .withConnectTimeout(10, TimeUnit.SECONDS) (2) .withoutReadTimeout() (3) .withHttpRequestHeader(\"X-ENV\", \"integration\") (4) .getPort(); port.ping(\"Hello world\"); (5) 1 Set the credentials 2 Change the connect timeout to 10s 3 Unset the read timeout 4 Add a HTTP request header 5 Invoke the webservice operation The WS-Client provides port instances via a preemptive port cache. This cache improves performance because port creation may be an expensive operation due to WSDL/schema validation. The cache is based on a 'corePoolSize', meaning that that number of ports is created on a preemptive basis. If more ports than that number are required, they are created on demand, and additionally added to the cache until expired, which is useful at a high load. The JAX-WS specification does not specify thread safety of a port instance. Therefore, a port should not be used concurrently among threads. Further, JAX-WS API does not support to reset the Port’s request and response context, which is why a port should only be used for a single webservice call. The WS-Client supports for cancellation of webservice requests. Internally, every web request is run in another thread, which the calling thread waits for to complete. Upon cancellation, that other thread is interrupted, and the calling thread released with a WebServiceRequestCancelledException. However, depending on the JAX-WS implementor, the web request may still be running, because JAX-WS API does not support the cancellation of a web request. The invocation context allows you to access HTTP status code and HTTP headers of the last web request. final InvocationContext context = BEANS.get(PingWebServiceClient.class).newInvocationContext(); String pingResult = context.getPort().ping(\"Hello world\"); // Get HTTP status code int httpStatusCode = context.getHttpStatusCode(); // Get HTTP response header List httpResponseHeader = context.getHttpResponseHeader(\"X-CUSTOM-HEADER\"); An invocation context can be associated with request context properties, which are propagated to handlers and JAX-WS implementor. BEANS.get(PingWebServiceClient.class).newInvocationContext() .withRequestContextProperty(\"cid\", UUID.randomUUID().toString()) (1) .getPort().ping(\"Hello world\"); (2) 1 Propagate the correlation ID 2 Invoke the web operation Learn more how to access context properties from within a handler in Listing 17. To install a handler, overwrite execInstallHandlers and add the handler to the given List. The handlers are invoked in the order as added to the handler-chain. By default, there is no handler installed. The method execInstallHandlers is invoked upon preemptive creation of the port. Consequently, you cannot do any assumption about the calling thread. If a handler requires to run in another RunContext than the calling context, annotate it with RunWithRunContext annotation, e.g. to start a new transaction to log into database. If the endpoint requires to authenticate requests, an authentication handler is typically added to the list, e.g. BasicAuthenticationHandler for 'Basic authentication', or WsseUsernameTokenAuthenticationHandler for 'Message Level WS-Security authentication', or some other handler to provide credentials. public class PingWebServiceClient2 extends AbstractWebServiceClient { @Override protected void execInstallHandlers(List> handlerChain) { handlerChain.add(new BasicAuthenticationHandler()); handlerChain.add(BEANS.get(LogHandler.class)); } } The credentials as provided via InvocationContext can be accessed via request context with the property InvocationContext.PROP_USERNAME and InvocationContext.PROP_PASSWORD. The current context’s correlation ID can be forwarded to the consumed web service. Scout provides a handler that sets the X-Scout-Correlation-Id HTTP header on the outgoing request. public class PingWebServiceClient3 extends AbstractWebServiceClient { @Override protected void execInstallHandlers(List> handlerChain) { handlerChain.add(new BasicAuthenticationHandler()); handlerChain.add(BEANS.get(LogHandler.class)); handlerChain.add(BEANS.get(WsConsumerCorrelationIdHandler.class)); (1) } } 1 The handler can be at any position in the handler chain. The following properties can be set globally for all WS-Clients. However, a WS-Client can overwrite any of these values. property description default value scout.jaxws.consumer.portCache.enabled To indicate whether to use a preemptive port cache for WS-Clients. Depending on the implementor used, cached ports may increase performance, because port creation is an expensive operation due to WSDL and schema validation. The cache is based on a 'corePoolSize', meaning that that number of ports is created on a preemptive basis. If more ports than that number is required, they are created on demand and also added to the cache until expired, which is useful at a high load. true scout.jaxws.consumer.portCache.corePoolSize Number of ports to be preemptively cached to speed up webservice calls. 10 scout.jaxws.consumer.portCache.ttl Maximum time in seconds to retain ports in the cache if the 'corePoolSize' is exceeded. That typically occurs at high load, or if 'corePoolSize' is undersized. 15 minutes scout.jaxws.consumer.connectTimeout Connect timeout in milliseconds to abort a webservice request, if establishment of the HTTP connection takes longer than this timeout. A timeout of null means an infinite timeout. infinite scout.jaxws.consumer.readTimeout Read timeout in milliseconds to abort a webservice request, if it takes longer than this timeout for data to be available for read. A timeout of null means an infinite timeout. infinite Scout ships with some XML adapters to not have to work with XMLGregorianCalendar, but with java.util.Date instead. It is recommended to configure your global binding file accordingly. See Listing 9 for an example. See the adapter’s JavaDoc for more detailed information. Table 1. UTC Date adapters adapter description UtcDateAdapter Use this adapter to work with UTC xsd:dates. A UTC date is also known as 'zulu' date, and has 'GMT+-00:00'. Unlike UtcDateTimeAdapter, this adapter truncates hours, minutes, seconds and milliseconds. UtcTimeAdapter Use this adapter to work with UTC xsd:times. A UTC time is also known as 'zulu' time, and has 'GMT+-00:00'. Unlike UtcDateTimeAdapter, this adapter sets year, month and day to the epoch, which is defined as 1970-01-01 in UTC. UtcDateTimeAdapter Use this adapter to work with UTC xsd:dateTimes. A UTC time is also known as 'zulu' time, and has 'GMT+-00:00'. This adapter converts xsd:dateTime into UTC milliseconds, by respecting the timezone as provided. If the timezone is missing, the date is interpreted as UTC-time, and not local to the default JVM timezone. To convert a Date into xsd:dateTime, the date’s milliseconds are used as UTC milliseconds from the epoch, and are formatted as 'zulu' time. Table 2. Calendar adapters adapter description CalendarDateAdapter Use this adapter to work with Calendar xsd:dates without loosing timezone information. Unlike CalendarDateTimeAdapter, this adapter truncates hours, minutes, seconds and milliseconds. CalendarTimeAdapter Use this adapter to work with Calendar xsd:times without loosing timezone information. Unlike CalendarDateTimeAdapter, this adapter sets year, month and day to the epoch, which is defined as 1970-01-01 in UTC. CalendarDateTimeAdapter Adapter to convert a xsd:dateTime to a Calendar and vice versa. For both directions, the timezone information is not lost. Use this adapter if you expect to work with dates from various timezones without losing the local time. If the UTC (Zulu-time) is sufficient, use UtcDateTimeAdapter instead. Table 3. Default timezone Date adapters adapter description DefaultTimezoneDateAdapter Use this adapter to work with xsd:dates in the default timezone of the Java Virtual Machine. Depending on the JVM installation, the timezone may differ: 'GMT+-XX:XX'. Unlike DefaultTimezoneDateTimeAdapter, this adapter truncates hours, minutes, seconds and milliseconds. Whenever possible, use UtcDateAdapter or CalendarDateAdapter instead. DefaultTimezoneTimeAdapter Use this adapter to work with xsd:times in the default timezone of the Java Virtual Machine. Depending on the JVM installation, the timezone may differ: 'GMT+-XX:XX'. Unlike DefaultTimezoneDateTimeAdapter, this adapter sets year, month and day to the epoch, which is defined as 1970-01-01 in UTC. Whenever possible, use UtcTimeAdapter or CalendarTimeAdapter instead. DefaultTimezoneDateTimeAdapter Use this adapter to work with xsd:dateTimes in the default timezone of the Java Virtual Machine. Depending on the JVM installation, the timezone may differ: 'GMT+-XX:XX'. Whenever possible, use UtcDateTimeAdapter or CalendarDateTimeAdapter instead. @FunctionalInterface @WebService(name = \"PingWebServicePortType\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\") @SOAPBinding(parameterStyle = ParameterStyle.BARE) public interface PingWebServicePortType { @WebMethod(action = \"http://scout.eclipse.org/docs/ws/PingWebService/ping\") @WebResult(name = \"pingResponse\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", partName = \"parameters\") String ping(@WebParam(name = \"pingRequest\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", partName = \"ping\") String ping); } @Generated(value = \"org.eclipse.scout.jaxws.apt.JaxWsAnnotationProcessor\", date = \"2016-01-25T14:22:58:583+0100\", comments = \"EntryPoint to run webservice requests on behalf of a RunContext\") @WebService(name = \"PingWebServicePortType\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", endpointInterface = \"org.eclipse.scout.docs.ws.pingwebservice.PingWebServicePortType\") public class PingWebServicePortTypeEntryPoint implements org.eclipse.scout.docs.ws.pingwebservice.PingWebServicePortType { @Resource protected WebServiceContext m_webServiceContext; @Override public String ping(final String ping) { try { return lookupRunContext().call(new Callable() { @Override public final String call() throws Exception { return BEANS.get(PingWebServicePortType.class).ping(ping); } }, DefaultExceptionTranslator.class); } catch (Exception e) { throw handleUndeclaredFault(e); } } protected RuntimeException handleUndeclaredFault(final Exception e) { throw BEANS.get(JaxWsUndeclaredExceptionTranslator.class).translate(e); } protected RunContext lookupRunContext() { return BEANS.get(JaxWsRunContextLookup.class).lookup(m_webServiceContext); } } @ApplicationScoped public class PingWebServicePortTypeBean implements PingWebServicePortType { @Override public String ping(String ping) { return \"ping: \" + ping; } } ... org.eclipse.jdt.core.compiler.processAnnotations=enabled ... org.eclipse.jdt.apt.aptEnabled=true org.eclipse.jdt.apt.genSrcDir=target/generated-sources/annotations org.eclipse.jdt.apt.processorOptions/consoleLog=true org.eclipse.jdt.apt.reconcileEnabled=true The authentication method specifies the protocol to challenge the webservice client to provide credentials. Scout provides an implementation for BASIC and WSSE_UsernameToken. You can implement your own authentication method by implementing IAuthenticationMethod interface. Authentication method to apply Basic Access Authentication. This requires requests to provide a valid user name and password to access content. User’s credentials are transported in HTTP headers. Basic authentication also works across firewalls and proxy servers. However, the disadvantage of Basic authentication is that it transmits unencrypted base64-encoded passwords across the network. Therefore, you only should use this authentication when you know that the connection between the client and the server is secure. The connection should be established either over a dedicated line or by using Secure Sockets Layer (SSL) encryption and Transport Layer Security (TLS). Authentication method to apply Message Level WS-Security with UsernameToken Authentication. This requires requests to provide a valid user name and password to access content. User’s credentials are included in SOAP message headers. However, the disadvantage of WSSE UsernameToken Authentication is that it transmits unencrypted passwords across the network. Therefore, you only should use this authentication when you know that the connection between the client and the server is secure. The connection should be established either over a dedicated line or by using Secure Sockets Layer (SSL) encryption and Transport Layer Security (TLS). Use this authentication method when using container based authentication, meaning that webservice requests are authenticated by the application server, or a Servlet filter. Verifies user’s credentials against a data source like database, config.properties, Active Directory, or others. Scout provides an implementation for verification against users in config.properties. You can implement your own verifier by implementing ICredentialVerifier interface. If you require to run in a specific RunContext like a transaction for user’s verification, annotate the verifier with RunWithRunContext annotation, and specify a RunContextProducer accordingly. Credential verifier against credentials configured in config.properties file. By default, this verifier expects the passwords in 'config.properties' to be a hash produced with SHA-512 algorithm. To support you in password hash generation, ConfigFileCredentialVerifier provides a static Java main method. Credentials are loaded from property scout.auth.credentials. Multiple credentials are separated with the semicolon, username and password with the colon. If using hashed passwords (by default), the password’s salt and hash are separated with the dot. To work with plaintext passwords, set the property scout.auth.credentialsPlaintext to true. Example of hashed passwords: scott:SALT.PASSWORD-HASH;jack:SALT.PASSWORD-HASH;john:SALT.PASSWORD-HASH Example of plaintext passwords: scott:*;jack:;john:*","title":"Webservices with JAX-WS","component":"scout-docs","version":"22","name":"jax-ws","url":"/scout-docs/22/technical-guide/working-with-data/jax-ws.html","titles":[{"text":"Functionality","hash":"functionality","id":1},{"text":"JAX-WS implementor and deployment","hash":"jax-ws-implementor-and-deployment","id":2},{"text":"JAX-WS version and implementor","hash":"jax-ws-version-and-implementor","id":3},{"text":"Running JAX-WS in a servlet container","hash":"running-jax-ws-in-a-servlet-container","id":4},{"text":"Running JAX-WS in a EE container","hash":"running-jax-ws-in-a-ee-container","id":5},{"text":"Configure JAX-WS implementor","hash":"jaxws.implementor.configuration","id":6},{"text":"JaxWsImplementorSpecifics","hash":"JaxWsImplementorSpecifics","id":7},{"text":"Configure JAX-WS Maven dependency in pom.xml","hash":"jaxws.implementor.dependency","id":8},{"text":"Configure JAX-WS servlet in web.xml","hash":"configure-jax-ws-servlet-in-web-xml","id":9},{"text":"Modularization","hash":"jaxws.modularization","id":10},{"text":"Build webservice stubs and artifacts","hash":"build-webservice-stubs-and-artifacts","id":11},{"text":"Configure webservice stub generation via wsimport","hash":"jaxws.stub.generation","id":12},{"text":"Customize WSDL components and XSD schema elements via binding files","hash":"customize-wsdl-components-and-xsd-schema-elements-via-binding-files","id":13},{"text":"Annotation Processing Tool (APT)","hash":"annotation-processing-tool-apt","id":14},{"text":"Enable Annotation Processing Tool (APT) in Eclipse IDE","hash":"enable-annotation-processing-tool-apt-in-eclipse-ide","id":15},{"text":"Build webservice stubs and APT artifacts from console","hash":"generate_artifacts_from_console","id":16},{"text":"Build webservice stubs and APT artifacts from within Eclipse IDE","hash":"generate_artifacts_from_eclipse","id":17},{"text":"Exclude derived resources from version control","hash":"exclude-derived-resources-from-version-control","id":18},{"text":"JaxWsAnnotationProcessor","hash":"jaxwsannotationprocessor","id":19},{"text":"Provide a webservice","hash":"provide-a-webservice","id":20},{"text":"The concept of an Entry Point","hash":"WebServiceEntryPoint","id":21},{"text":"Generate an Entry Point as an endpoint interface","hash":"generate-an-entry-point-as-an-endpoint-interface","id":22},{"text":"Instrument the Entry Point generation","hash":"instrument-the-entry-point-generation","id":23},{"text":"Configure Authentication","hash":"jaxws.provider.authentication","id":24},{"text":"Example of an Entry Point definition","hash":"example.entrypoint.definition","id":25},{"text":"Configure JAX-WS Handlers","hash":"jaxws.provider.handlerChain","id":26},{"text":"Propagate state among Handlers and port type","hash":"jaxws.provider.statepropagation","id":27},{"text":"JAX-WS Correlation ID Propagation","hash":"jax-ws-correlation-id-propagation","id":28},{"text":"Registration of webservice endpoints","hash":"registration-of-webservice-endpoints","id":29},{"text":"JAX-WS METRO","hash":"jax-ws-metro","id":30},{"text":"Apache CXF","hash":"jaxws.registration.endpoints.cxf","id":31},{"text":"Consume a webservice","hash":"consume-a-webservice","id":32},{"text":"Invoke a webservice","hash":"invoke-a-webservice","id":33},{"text":"Cancel a webservice request","hash":"cancel-a-webservice-request","id":34},{"text":"Get information about the last web request","hash":"get-information-about-the-last-web-request","id":35},{"text":"Propagate state to Handlers","hash":"propagate-state-to-handlers","id":36},{"text":"Install handlers and provide credentials for authentication","hash":"install-handlers-and-provide-credentials-for-authentication","id":37},{"text":"JAX-WS Client Correlation ID Propagation","hash":"jax-ws-client-correlation-id-propagation","id":38},{"text":"Default configuration of WS-Clients","hash":"jaxws.consumer.configuration","id":39},{"text":"XML adapters to work with java.util.Date and java.util.Calendar","hash":"jaxws.xmladapters","id":40},{"text":"JAX-WS Appendix","hash":"jax-ws-appendix","id":41},{"text":"PingWebService.wsdl","hash":"PingWebService.wsdl","id":42},{"text":"PingWebServicePortType.java","hash":"PingWebServicePortType.java","id":43},{"text":"PingWebServicePortTypeEntryPoint.java","hash":"PingWebServicePortTypeEntryPoint.java","id":44},{"text":"PingWebServicePortTypeBean.java","hash":"PingWebServicePortTypeBean.java","id":45},{"text":".settings/org.eclipse.jdt.core.prefs file to enable APT in Eclipse IDE","hash":"settings_org.eclipse.jdt.core.prefs","id":46},{"text":".settings/org.eclipse.jdt.apt.core.prefs file to enable APT in Eclipse IDE","hash":"settings_org.eclipse.jdt.apt.core.prefs","id":47},{"text":".factorypath file to enable APT in Eclipse IDE","hash":"factorypath","id":48},{"text":"Authentication Method","hash":"IAuthenticationMethod","id":49},{"text":"BasicAuthenticationMethod","hash":"basicauthenticationmethod","id":50},{"text":"WsseUsernameTokenMethod","hash":"wsseusernametokenmethod","id":51},{"text":"ContainerBasedAuthenticationMethod","hash":"containerbasedauthenticationmethod","id":52},{"text":"Credential Verifier","hash":"ICredentialVerifier","id":53},{"text":"ConfigFileCredentialVerifier","hash":"configfilecredentialverifier","id":54}]},"64":{"id":64,"text":"This document is referring to a past Scout release. Please click here for the recent version. Data objects are Scout beans, which are used as data transfer objects for synchronous REST and asynchronous MOM interfaces. Furthermore, they can be used as domain objects within business logic. A data object extends the DoEntity base class and declares each attribute as a single accessor method. Attributes of two kinds are available: Value attribute of type T List attribute of type List The name of the accessor method defines the attribute name. The return value of the accessor method defines the attribute type. Listing 1. Example: ExampleEntityDo @TypeName(\"lorem.ExampleEntity\") @TypeVersion(Lorem_1_2_0.class) public class ExampleEntityDo extends DoEntity { public DoValue name() { (1) return doValue(\"name\"); } public DoList values() { (2) return doList(\"values\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityDo withName(String name) { name().set(name); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public String getName() { return name().get(); } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityDo withValues(Collection values) { values().updateAll(values); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityDo withValues(Integer... values) { values().updateAll(values); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public List getValues() { return values().get(); } } 1 Example attribute of type String 2 Example attribute of type List For convenience reasons when working with the data objects it is recommended to add a getter and a with (e.g. setter) method. Using the convenience with methods, new data objects can be created with fluent-style API: Listing 2. Example: Create ExampleEntityDo instance ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); Using the IDataObjectMapper interface a data object can be converted from and to its string representation. The marshalling strategy is generic and replaceable. The Scout platform defines the IDataObjectMapper interface, at runtime a Scout bean implementing the interface must be available. The Scout module org.eclipse.scout.rt.jackson provides a default implementation serializing data objects from and to JSON using the Jackson library. Listing 3. Example: Serialize ExampleEntityDo String string = BEANS.get(IDataObjectMapper.class).writeValue(entity); The data object ExampleEntityDo serialized to JSON: Listing 4. Example: ExampleEntityDo as JSON { \"_type\" : \"lorem.ExampleEntity\", \"_typeVersion\": \"lorem-1.2.0\", \"name\" : \"example\", \"values\" : [1,2,3,4,5] } Listing 5. Example: Deserialize ExampleEntityDo ExampleEntityDo marhalled = BEANS.get(IDataObjectMapper.class) .readValue(string, ExampleEntityDo.class); A data object is annotated with a logical type name using the @TypeName annotation. Declaring a logical type name using the @TypeName annotation for each data object is mandatory. The annotation value is added to the serialized JSON object as top-level _type property. Using the type property the data object marshaller is able to find and instantiate the matching data object class, without having to rely on a fully classified class name. It avoids a 1:1 dependency between the serialized JSON String and the fully classified class name. A stable type name is required in order to be able to change the data object structure without breaking the API. A data object may be annotated with a type version using the @TypeVersion annotation. The type version represents the version of the structure of the data object and not the version of the data within the data object. The type version value should be incremented, each time, the data object class is modified (add/remove/rename attributes). If a version is required for versioning the values of a data object, consider add a version attribute, incrementing its value, every time a value of the data object is modified. The annotation value is added to the serialized JSON object as top-level _typeVersion property. The serialized _typeVersion value is not deserialized into an attribute, since the deserializer creates a concrete data object class at runtime, having the @TypeVersion annotation providing the type version value. Declaring a logical type version using the `@TypeVersion`annotation is highly recommended if a data object is persisted as JSON document to a file or database. A namespace (implementation of INamespace) represents a container for data objects. Each data object must have a unique type name within a namespace. Scout has its own namespace (with ID scout), your project should use an own one. Listing 6. Example: LoremNamespace public final class LoremNamespace implements INamespace { public static final String ID = \"lorem\"; public static final double ORDER = 9000; @Override public String getId() { return ID; } @Override public double getOrder() { return ORDER; } } A class implementing ITypeVersion is used within the @TypeVersion annotation. Several type versions for one namespace may be bundled in a container class. There are a few different constructors provided by AbstractTypeVersion that simplify the definition of such a type version. The default constructor extracts the namespace and version based on the class name. Listing 7. Example: LoremTypeVersions public final class LoremTypeVersions { private LoremTypeVersions() { } public static final class Lorem_1_0_0 extends AbstractTypeVersion { } public static final class Lorem_1_2_0 extends AbstractTypeVersion { } } AbstractDataObjectSignatureTest provides an abstract implementation of a test that creates a signature of all data object annotated with a type version including additional signatures (e.g. referenced IEnum with their values). A signature test enables to detect changes in data object that might need a migration. Each module containing data objects with type version annotation should implement a data object signature test. Listing 8. Example: DocsSnippetsDataObjectSignatureTest public class DocsSnippetsDataObjectSignatureTest extends AbstractDataObjectSignatureTest { @Override protected String getFilenamePrefix() { return \"docs-snippets\"; } @Override protected String getPackageNamePrefix() { return \"org.eclipse.scout.docs.snippets\"; } } Scout objects use the following naming conventions: A data object class should use the `Do' suffix. The value of the @TypeName annotation corresponds to the simple class name without Do suffix A namespace prefix (separated by a dot) is recommended in order to avoid duplicated type names across different modules (e.g. scout.Bookmark, helloworld.MyDataObject) The default attribute name within the serialized string corresponds to the name of the attribute accessor method defined in the data object. To use a custom attribute name within the serialized string, the attribute accessor method can be annotated by @AttributeName providing the custom attribute name. Listing 9. Example: Custom Attribute Name @AttributeName(\"myCustomName\") public DoValue name() { return doValue(\"myCustomName\"); (1) } 1 Important: The annotation value must be equals to the string constant used for the doValue() or doList() attribute declaration. Listing 10. Example: Custom Attribute Name as JSON { \"_type\" : \"CustomAttributeNameEntity\", \"myCustomName\" : \"example\" } Using the ValueFormat annotation a data type dependent format string may be provided, which is used for the marshalling. Listing 11. Example: Custom Attribute Format @ValueFormat(pattern = IValueFormatConstants.DATE_PATTERN) public DoValue date() { return doValue(\"date\"); } The IValueFormatConstants interface declares a set of default format pattern constants. Attributes with type java.util.Date accept the format pattern specified by SimpleDateFormat class (see https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html) The @JsonIgnore annotation included in the Jackson library is currently not supported for data objects. To ignore an attribute when serializing a data object, the attribute must be removed from the data object by either not setting a value for the desired attribute or by explicitly removing the attribute before a data object is serialized: Listing 12. Example: Remove an attribute from a data object ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); // remove by attribute accessor method reference entity.remove(entity::name); // remove by attribute node entity.remove(entity.name()); // remove by attribute name entity.remove(entity.name().getAttributeName()); // remove by attribute name raw entity.remove(\"name\"); Instead of data objects, a REST or MOM interface could be built using simple plain old Java objects (POJOs). Compared to POJOs a Scout data object offers additional support and convenience when working with attributes. A JSON attribute may have three different states: Attribute available with a value Attribute available with value null Attribute not available These three states cannot be represented with a POJO object which is based on a single variable with a pair of getter/setter. In order to differ between value not available and value is null, a wrapper type is required, which beside the value stores the information, if the attribute is available. Scout data objects solve this issue: Data objects internally use a Map> where the abstract DoNode at runtime is represented by a DoValue or a DoList object instance wrapping the value. Value: DoNode.get() returns the (wrapped) value of the attribute Listing 13. Example: ExampleEntityDo Access the Attribute Value ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); // access using attribute accessor String name1 = entity.name().get(); List values1 = entity.values().get(); // access using generated attribute getter String name2 = entity.getName(); List values2 = entity.getValues(); Existence: Using the DoNode.exists() method, each attribute may be checked for existence Listing 14. Example: ExampleEntityDo Attribute Existence // check existence of attribute boolean hasName = entity.name().exists(); A simple data objects is implemented by subclassing the DoEntity class. For a complex hierarchy of data objects the base class may be abstract and extend the DoEntity class, further subclasses extend the abstract base class. The abstract base data object class does not need to specify a @TypeName annotation since there are no instances of the abstract class which are serialized or deserialized directly. Each non-abstract subclass must specify a unique @TypeName annotation value. Listing 15. Example: Abstract class AbstractExampleEntityDo with one attribute public abstract class AbstractExampleEntityDo extends DoEntity { public DoValue name() { return doValue(\"name\"); } Listing 16. Example: Subclass 1 with an additional attribute and a unique type name @TypeName(\"ExampleEntity1\") public class ExampleEntity1Do extends AbstractExampleEntityDo { public DoValue name1Ex() { return doValue(\"name1Ex\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity1Do withName1Ex(String name1Ex) { name1Ex().set(name1Ex); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public String getName1Ex() { return name1Ex().get(); } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity1Do withName(String name) { name().set(name); return this; } } Listing 17. Example: Subclass 2 with an additional attribute and a unique type name @TypeName(\"ExampleEntity2\") public class ExampleEntity2Do extends AbstractExampleEntityDo { public DoValue name2Ex() { return doValue(\"name2Ex\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity2Do withName2Ex(String name2Ex) { name2Ex().set(name2Ex); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public String getName2Ex() { return name2Ex().get(); } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity2Do withName(String name) { name().set(name); return this; } } Listing 18. Example: Class with attributes of type AbstractExampleEntityDo public class ExampleDoEntityListDo extends DoEntity { public DoList listAttribute() { return doList(\"listAttribute\"); } public DoValue singleAttribute() { return doValue(\"singleAttribute\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleDoEntityListDo withListAttribute(Collection listAttribute) { listAttribute().updateAll(listAttribute); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleDoEntityListDo withListAttribute(AbstractExampleEntityDo... listAttribute) { listAttribute().updateAll(listAttribute); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public List getListAttribute() { return listAttribute().get(); } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleDoEntityListDo withSingleAttribute(AbstractExampleEntityDo singleAttribute) { singleAttribute().set(singleAttribute); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public AbstractExampleEntityDo getSingleAttribute() { return singleAttribute().get(); } } Listing 19. Example: Using the ExampleDoEntityListDo class with different kinds of AbstractExampleEntityDo sub classes ExampleDoEntityListDo entity = BEANS.get(ExampleDoEntityListDo.class); entity.withListAttribute( BEANS.get(ExampleEntity1Do.class) .withName1Ex(\"one-ex\") .withName(\"one\"), BEANS.get(ExampleEntity2Do.class) .withName2Ex(\"two-ex\") .withName(\"two\")); entity.withSingleAttribute( BEANS.get(ExampleEntity1Do.class) .withName1Ex(\"single-one-ex\") .withName(\"single-one\")); If an instance of ExampleDoEntityListDo is serialized, each attribute is serialized using its runtime data type, adding an appropriate _type attribute to each serialized object. Therefore, the deserializer knows which concrete class to instantiate while deserializing the JSON document. This mechanism is used for simple value properties and list value properties. To each object which is part of a list value property the _type property is added to support polymorphism within single elements of a list. Listing 20. Example: ExampleDoEntityListDo as JSON { \"_type\" : \"ExampleDoEntityListDo\", \"listAttribute\" : [ { \"_type\" : \"ExampleEntity1\", \"name\" : \"one\", \"name1Ex\" : \"one-ex\" }, { \"_type\" : \"ExampleEntity2\", \"name\" : \"two\", \"name2Ex\" : \"two-ex\" } ], \"singleAttribute\" : { \"_type\" : \"ExampleEntity1\", \"name\" : \"single-one\", \"name1Ex\" : \"single-one-ex\" } } To rename a data object attribute in a subclass, override the attribute accessor method and annotate it with @AttributeName using the new attribute name as value. Additionally the overridden method must call the doValue() method providing the new attribute name as argument. Listing 21. Example: Rename attribute in a data object subclass @TypeName(\"ExampleEntityEx\") public class ExampleEntityExDo extends ExampleEntityDo { @Override @AttributeName(\"nameEx\") public DoValue name() { (1) return doValue(\"nameEx\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityExDo withName(String name) { name().set(name); return this; } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityExDo withValues(Collection values) { values().updateAll(values); return this; } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityExDo withValues(Integer... values) { values().updateAll(values); return this; } } 1 Rename name attribute of superclass to nameEx Use the basic data object interface IDoEntity to model a data object hierarchy with own base interfaces and a set of implementing classes. Interfaces extending IDataObject do not need a @TypeName annotation, since they are never directly serialized or deserialized. The interfaces may be used as types for attributes within a data object. At runtime the concrete classes implementing the interfaces are serialized and their @TypeName annotation value is used. The Data Object base class DoEntity defines a generic equals() and hashCode() implementation considering all attributes of a data object for equality. A data object is equals to another data object, if the Java class of both data objects is identical and the attribute maps (including their nested values) of both data objects are equals. For futher details see: org.eclipse.scout.rt.dataobject.DoEntity.equals(Object) org.eclipse.scout.rt.dataobject.DoNode.equals(Object) An instance of the DoEntity class can represent any kind of JSON document. If the JSON document contains no type attributes or no matching data object class exists at runtime, the JSON document is deserialized into a raw DoEntity instance holding all attributes. To access the attributes of the data object a set of generic getter methods may be used by specifying the attribute name. A generic JSON document is deserialized into a generic tree-like structure of nested DoEntity instances. If the serialized JSON document contains a _type and/or _typeVersion attribute, the attribute and its value is added as attribute to the generic raw DoEntity instance. Listing 22. Example: ExampleEntityDo accessing attribute \"by name\" ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); // access name attribute by its attribute name Object name1 = entity.get(\"name\"); (1) String name2 = entity.get(\"name\", String.class); (2) String name3 = entity.getString(\"name\"); (3) // access values attribute by its attribute name List values1 = entity.getList(\"values\"); (4) List values2 = entity.getList(\"values\", String.class); (5) List values3 = entity.getStringList(\"values\"); (6) // optional list attribute access by its attribute name Optional> values4 = entity.optList(\"values\"); (7) Optional> values5 = entity.optList(\"values\", String.class); (8) 1 Accessing value attribute, default type is Object 2 Accessing value attribute, specify the type as class object if known 3 Accessing value attribute, convenience method for a set of common types 4 Accessing list attribute, default type is Object 5 Accessing list attribute, specify the type as class object if known 6 Accessing list attribute, convenience method for a set of common types 7 Accessing optional list attribute, default type is Object 8 Accessing optional list attribute, specify the type as class object if known If a list attribute is not available, using one of the getList(…​) getters adds an empty list as attribute value into the entity and returns the list. Use optList(…​) in order to get an optionally available list without adding a new empty list as attribute. Apart of the convenience methods available directly within the DoEntity class, the DataObjectHelper class contains a set of further convenience methods to access raw values of a data object. If a generic JSON document is deserialized to a DoEntity class without using a subclass specifying the attribute types, all attributes of type JSON number are deserialized into the smallest possible Java type. For instance the number value 42 is deserialized into an Integer value, a large number may be deserialized into a BigInteger or BigDecimal if it is a floating point value. Using the convenience method DoEntity.getDecimal(…​) each number attribute is converted automatically into a BigDecimal instance on access. If a generic JSON document is deserialized, only a set of basic Java types like String, Number, Double are supported. Every JSON object is deserialized into a (nested) DoEntity structure, which internally is represented by a nested structure of Map. To build map-like a data object (corresponds to Map), the DoMapEntity base class may be used. Listing 23. Example: Map as ExampleMapEntityDo data object @TypeName(\"ExampleMapEntity\") public class ExampleMapEntityDo extends DoMapEntity { } The example JSON document of ExampleMapEntityDo instance with two elements: Listing 24. Example: ExampleMapEntityDo with two elements: { \"_type\" : \"ExampleMapEntity\", \"mapAttribute1\" : { \"_type\" : \"ExampleEntity\", \"name\" : \"example-1\", \"values\" : [1,2,3,4,5] }, \"mapAttribute2\" : { \"_type\" : \"ExampleEntity\", \"name\" : \"example-2\", \"values\" : [6,7,8,9] } } Listing 25. Example: Accessing attributes ExampleMapEntityDo mapEntity = BEANS.get(ExampleMapEntityDo.class); mapEntity.put(\"mapAttribute1\", BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5)); mapEntity.put(\"mapAttribute2\", BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(6, 7, 8, 9)); ExampleEntityDo attr1 = mapEntity.get(\"mapAttribute1\"); (1) Map allAttributes = mapEntity.all(); (2) 1 Accessing attribute using get method returns the attribute of declared type T 2 Accessing all attributes using all method returns a map with all attributes of type T A DoMapEntity subclass may declare custom attributes of another type than T (e.g. an integer size attribute). If attributes of other types are used, using the all method results in a ClassCastException since not all attributes are of the same type any longer. According to the JSON specification a JSON document at top level may contain a object or an array. If a JSON string of unknown structure is deserialized, the common super interface IDataObject may be used as target type for the call to the deserializer: Listing 26. Example: Deserialize a JSON document with unknown structure String json = \"\"; IDataObjectMapper mapper = BEANS.get(IDataObjectMapper.class); IDataObject dataObject = mapper.readValue(json, IDataObject.class); if (dataObject instanceof IDoEntity) { // handle object content } else if (dataObject instanceof DoList) { // handle array content } The DoEntityBuilder may be used to build ad-hoc data objects without a concrete Java class defining its attributes. Listing 27. Example: DoEntityBuilder IDoEntity entity = BEANS.get(DoEntityBuilder.class) .put(\"attr1\", \"foo\") .put(\"attr2\", \"bar\") .putList(\"listAttr\", 1, 2, 3) .build(); (1) String entityString = BEANS.get(DoEntityBuilder.class) .put(\"attr1\", \"foo\") .put(\"attr2\", \"bar\") .putList(\"listAttr\", 1, 2, 3) .buildString(); (2) 1 Builder for a DoEntity object 2 Builder for the string representation of a DoEntity objects The Scout data object implementation does not reference any specific Java serialization library or framework. The basic building blocs of data objects are part of the Scout platform and to not reference any thirdparty libraries. At runtime an implementation of the IDataObjectMapper interface must be provided. The Scout default implementation based on the JSON library Jackson is provided by adding a maven dependency to the module org.eclipse.scout.rt.jackson. The dependency to this module must be added in the top-level .dev/.app module. A dependency within the program code is not necessaray as long as no specific Jackson features should be used within the application code. The class org.eclipse.scout.rt.dataobject.DataObjectInventory provides access to all available data objects at runtime. For each data object all available attributes and their properties (name, type, accessor method and format pattern) are available: Listing 28. Example: Accessing data object inventory Map attributes = BEANS.get(DataObjectInventory.class).getAttributesDescription(ExampleEntityDo.class); attributes.forEach( (key, value) -> System.out.println(\"Attribute \" + key + \" type \" + value.getType())); Apart from attribute descriptions, the inventory provides access to type name and type version of each data object class. The application scoped beans DataObjectSerializers resp. DataObjectDeserializers define the available serializer and deserializer classes used to marshal the data objects. Own custom serializer and deserializer implementations can be added by replacing the corresponding base class and register its own custom serializer or deserializer. Implementations of org.eclipse.scout.rt.dataobject.enumeration.IEnum add a stringValue() method to each enumeration value, guaranteeing a constant, fixed string value for each enumeration value. An arbitrary Java enum may be used within a data object, but does not guarantee a stable serialized value, if an enumeration value is changed in future. Additionally implementations of IEnum can be annotated with @EnumName to support being referenced in a data object signature test. All instances of IEnum may be used within data objects and are automatically serialized to their JSON string value representation and deserialized back to the correct Java class instance. The default resolver mechanism for IEnum (see org.eclipse.scout.rt.dataobject.enumeration.EnumResolver) matches the given string with the available string values in the current enumeration implementation to look up the matching enumeration value. An optional static resolve() method handles the resolve of a given string value into the correct enumeration value allowing to support even string values, whose enumeration values where changed or deleted. Listing 29. Example IEnum implementation @EnumName(\"scout.ExampleEnum\") public enum ExampleEnum implements IEnum { ONE(\"one\"), TWO(\"two\"), THREE(\"three\"); private final String m_stringValue; ExampleEnum(String stringValue) { m_stringValue = stringValue; } @Override public String stringValue() { return m_stringValue; } public static ExampleEnum resolve(String value) { (1) // custom null handling if (value == null) { return null; } switch (value) { // custom handling of old values (assuming 'old' was used in earlier revisions) case \"one\": return ONE; case \"two\": return TWO; case \"three\": return THREE; case \"four\": return THREE; default: // custom handling of unknown values throw new AssertionException(\"unsupported status value '{}'\", value); } } } 1 Optional resolve method Implementations of org.eclipse.scout.rt.dataobject.id.IId interface wrap an arbitrary value adding a concrete Java type to a scalar value. E.g. the key of an example entity which technically is a UUID becomes an instance of the ExampleId class. All instances of IId may be used within data objects and are automatically serialized to their JSON string representation of the wrapped value and deserialized back to the correct Java class instance. An exampleId instance may then be used as type-safe parameter for further referencing a given example entity record, for instance as attribute value within a data object. Listing 30. Example ID implementation wrapping a UUID @IdTypeName(\"scout.ExampleId\") public static final class ExampleId extends AbstractUuId { private static final long serialVersionUID = 1L; public static ExampleId create() { return new ExampleId(UUID.randomUUID()); } public static ExampleId of(UUID id) { if (id == null) { return null; } return new ExampleId(id); } public static ExampleId of(String id) { if (id == null) { return null; } return new ExampleId(UUID.fromString(id)); } private ExampleId(UUID id) { super(id); } } A set of utility methods for unit tests with data objects are provided within the DataObjectTestHelper class. Commonly used are a set of assert methods (e.g. assertEquals(Object expected, Object actual)) for testing data objects for (deep) equality.","title":"Data Objects","component":"scout-docs","version":"22","name":"data-object","url":"/scout-docs/22/technical-guide/working-with-data/data-object.html","titles":[{"text":"Data Object Definition","hash":"data-object-definition","id":1},{"text":"Marshalling","hash":"marshalling","id":2},{"text":"Type Name","hash":"type-name","id":3},{"text":"Type Version","hash":"type-version","id":4},{"text":"Namespace and ITypeVersion","hash":"cha-namespace-and-itypeversion","id":5},{"text":"Signature Test","hash":"signature-test","id":6},{"text":"Data Object Naming Convention","hash":"data-object-naming-convention","id":7},{"text":"Attribute Name","hash":"attribute-name","id":8},{"text":"Attribute Format","hash":"attribute-format","id":9},{"text":"Ignoring an Attribute","hash":"ignoring-an-attribute","id":10},{"text":"Handling of DoEntity Attributes","hash":"handling-of-doentity-attributes","id":11},{"text":"Access Data Object Attributes","hash":"access-data-object-attributes","id":12},{"text":"Abstract Data Objects & Polymorphism","hash":"abstract-data-objects-polymorphism","id":13},{"text":"Rename an attribute of a data object in a subclass","hash":"rename-an-attribute-of-a-data-object-in-a-subclass","id":14},{"text":"Interfaces to Data Objects","hash":"interfaces-to-data-objects","id":15},{"text":"Equals and Hashcode","hash":"equals-and-hashcode","id":16},{"text":"Generic DoEntity","hash":"generic-doentity","id":17},{"text":"Accessing number values","hash":"accessing-number-values","id":18},{"text":"Map of objects","hash":"map-of-objects","id":19},{"text":"IDataObject Interface - Data Objects with unknown structure","hash":"idataobject-interface-data-objects-with-unknown-structure","id":20},{"text":"Ad-Hoc Data Objects","hash":"ad-hoc-data-objects","id":21},{"text":"Maven Dependencies","hash":"maven-dependencies","id":22},{"text":"Data Object Inventory","hash":"data-object-inventory","id":23},{"text":"Extending with custom serializer and deserializer","hash":"extending-with-custom-serializer-and-deserializer","id":24},{"text":"Enumerations within Data Objects","hash":"enumerations-within-data-objects","id":25},{"text":"Typed IDs within Data Objects","hash":"typed-ids-within-data-objects","id":26},{"text":"Unit Testing","hash":"sec-unit-testing","id":27}]},"65":{"id":65,"text":"This document is referring to a past Scout release. Please click here for the recent version. A Lookup Call is used to lookup a single or multiple Lookup Rows. Several widgets like Smart Field, List Box or Tree Box take advantage of that concept in order to provide their proposals. The most important parts of a Lookup Row are the key and the value. The key can be of any type, the text must be of type String. In addition to the key and the text a Lookup Row can also define an icon, a tooltip text, CSS classes and more. Each Smart Field in Scout references a LookupCall class. The lookup call is in charge of querying a data source and returning results for that query. Example: when you type \"f\" into a Smart Field, a lookup call could return a result which contains lookup rows starting with \"F\", like \"Faz\" and \"Foo\". The lookup call may return static (hard-coded) data which is already available in the browser, or may fetch an external data-source via HTTP, typically some kind of REST API. Depending on how your Smart Field is configured and used, the Smart Field will call different methods on the LookupCall instance and pass data to that method, like the search text the user has typed into the field. These methods are: getAll, getByText, getByKey and getByRec. getByKey(): Retrieves a single lookup row for a specific key value. Used by Smart Fields and Smart Columns to get the display text for a given key value. getByText(): Retrieve multiple lookup rows which match a certain String. Used by Smart Fields when the user starts to enter some text in the field. getAll(): Retrieves all available lookup rows. Used by Smart Fields when the user clicks on the field. getByRec(): This can only be used for hierarchical lookup calls. It retrieves all available sub-tree lookup rows for a given parent. You must implement these methods. Start with creating a sub class of LookupCall(.js). Sub class StaticLookupCall(.js) when you need a simple lookup call that operates on data that is available locally. Sub class RemoteLookupCall(.js) when you must fetch lookup data from a remote server. This class is also used in Scout Classic to start a lookup on the Scout UI Server. Note that the lookup call works with Deferreds. This means the lookup call runs in the background and does not block the UI. When the lookup call is done eventually the Deferred is resolved and the Smart Field will process the result returned by the lookup call. Lookup calls provide different method to compute the set of LookupRows : getDataByKey(): Retrieves a single lookup row for a specific key value. Used by SmartFields and SmartColumns to get the display text for a given key value. getDataByText(): Retrieve multiple lookup rows which match a certain String. Used by SmartFields when the user starts to enter some text in the field. getDataByAll(): Retrieves all available lookup rows. Used by SmartFields when the user clicks on the browse icon. getDataByRec(): This can only be used for hierarchical lookup calls. It retrieves all available sub-tree lookup rows for a given parent. The Lookup call contains attributes (accessible with getter and setter) that can be used to compute the list of lookups rows. Out of the box you have: key: contains the key value when the lookup is queried by key. text: contains the text input in case of a text lookup (typically this is the text entered by the user smart field). all: contains the browse hint in case of a lookup by all (typically when a user click on the button to see all proposal in a smart field). rec: contains the key of the parent entry, in when the children of a node are loaded. master: contains the value of the master field (if a master field is associated to the field using the lookup call). It is possible to add you own additional attributes, for example validityFrom, validityTo as date parameter. Just add them as field with getter and setter: @ClassId(\"6154090e-86ac-4c08-9769-bf3ef61c1b4b\") public class LanguageLookupCall extends LookupCall { // other stuff like serialVersionUID, Lookup Service definition... private static final long serialVersionUID = 1L; private Date m_validityFrom; private Date m_validityTo; @Override protected Class> getConfiguredService() { return ILanguageLookupService.class; } public Date getValidityFrom() { return m_validityFrom; } public void setValidityFrom(Date validityFrom) { this.m_validityFrom = validityFrom; } public Date getValidityTo() { return m_validityTo; } public void setValidityTo(Date validityTo) { this.m_validityTo = validityTo; } } In this case, you might want to set your properties before the lookup call query is sent. This can be done with the PrepareLookup event of the SmartField or the ListBox: @Override protected void execPrepareLookup(ILookupCall call) { LanguageLookupCall c = (LanguageLookupCall) call; c.setValidityFrom(DateUtility.parse(\"2012-02-26\", \"yyyy-mm-dd\")); c.setValidityTo(DateUtility.parse(\"2013-02-27\", \"yyyy-mm-dd\")); } If you follow this pattern, you will consume the values on the server by casting the call: @Override public List> getDataByAll(ILookupCall call) { LanguageLookupCall c = (LanguageLookupCall) call; Date validityFrom = c.getValidityFrom(); Date validityTo = c.getValidityTo(); List> result = new ArrayList<>(); //compute result: corresponding lookup rows (depending on validityFrom and validityTo). return result; } Delegation to the Lookup Service on server side. They are not necessarily restricted to a fix number of records. Instead, they should be favoured if the set of records is rather large. Such a LookupCall is used if the data can be provided directly without the need to make a backend call. An example of this approach is when a SmartField or a SmartColumn is configured to be used with a CodeType. The code types are cached, so it is not necessary to fetch them using a lookup service. Instead, a LocalLookupCall, in that case the CodeLookupCall, may be used to load the data. It creates the LookupRows corresponding to the codes in the CodeType. Defined with getConfiguredXxxxxx() methods. Service: Defines which service is used to retrieve lookup rows MasterRequired: Defines whether a master value must be set in order to query for multiple lookup rows Using a LookupCall in a SmartField: @Override protected Class> getConfiguredLookupCall() { return LanguageLookupCall.class; } Accessing a LookupRow directly: It is possible to access a LookupRow directly. In this example the input is a key (thisKey) and the method getDataByKey() is used. Before accessing the text, we ensure that a LookupRow has been retrieved. //Execute the LookupCall (using DataByKey) LookupCall call = new LanguageLookupCall(); call.setKey(thisKey); List> rows = call.getDataByKey(); //Get the text (with a null check) String text = null; if (rows != null && !rows.isEmpty()) { text = rows.get(0).getText(); }","title":"Lookup Call","component":"scout-docs","version":"22","name":"lookup-call","url":"/scout-docs/22/technical-guide/working-with-data/lookup-call.html","titles":[{"text":"Scout JS","hash":"scout-js","id":1},{"text":"Scout Classic","hash":"scout-classic","id":2},{"text":"Members","hash":"members","id":3},{"text":"Type of Lookup Calls","hash":"type-of-lookup-calls","id":4},{"text":"With a Lookup Service","hash":"with-a-lookup-service","id":5},{"text":"Local Lookup Call","hash":"local-lookup-call","id":6},{"text":"Overview","hash":"overview","id":7},{"text":"Properties","hash":"properties","id":8},{"text":"Code examples","hash":"code-examples","id":9}]},"66":{"id":66,"text":"This document is referring to a past Scout release. Please click here for the recent version. Table 1. HTTP Methods for RESTful Services HTTP Method CRUD Description POST Create Is most-often used to create new resources. POST is not idempotent. Making two identical POST requests will most-likely result in two resources containing the same information or the action executed twice. GET Read Only used to read or retrieve a representation of a resource. According to the HTTP specification GET (and HEAD) requests are used to read data and must not change anything! If a REST API wants to violate the specification, such requests must be protected against CSRF which is not enabled for GET and HEAD requests by default. See the Scout Bean org.eclipse.scout.rt.rest.csrf.AntiCsrfHelper for more details. GET requests are idempotent, which means that making multiple identical requests ends up having the same result as a single request (assuming the data has not been changed in the meantime). PUT Update/Replace Is most-often used to update resources. PUT expects to send the complete resource (not like PATCH) and is idempotent. In other words, if you create or update a resource using PUT and then make that same call again, the resource is still there and still has the same state as it did with the first call. If, for instance, calling PUT on a resource increments a counter within the resource, the call is no longer idempotent. In such a scenario it is strongly recommended to use POST for non-idempotent requests. PATCH Update PATCH is used to update resources. The PATCH request typically only contains the changes to the resource, not the complete resource. PATCH is not required to be idempotent. But it is possible to implement it in a way to be idempotent, which also helps prevent bad outcomes from collisions between multiple requests on the same resource. DELETE Delete Used to delete a resource. DELETE operations are idempotent concerning the result but may return another status code after the first deletion (e.g. 404 NOT FOUND). A REST resource using the JAX-RS API is implemented by a POJO class annotated with a set of annotations. The Scout module org.eclipse.scout.rt.rest contains the basic IRestResource marker interface which integrates REST resources within the Scout framework. The interface is annotated by @Bean allowing the Scout platform to load and register all REST resources automatically at startup using the Jandex class inventory. Listing 1. Example: REST resource @Path(\"example\") public class ExampleResource implements IRestResource { @GET @Path(\"{id}\") @Produces(MediaType.APPLICATION_JSON) public ExampleEntityDo getExamlpeEntity(@PathParam(\"id\") String id) { return BEANS.get(ExampleEntityDo.class) .withName(\"example-\" + id) .withValues(1); } } All available REST resources are automatically registered by the RestApplication class while the Scout platform startup. Add the following snippet to your web.xml file to expose your REST API using the /api context path: Listing 2. web.xml api org.glassfish.jersey.servlet.ServletContainer javax.ws.rs.Application org.eclipse.scout.rt.rest.RestApplication 1 api /api/* The JAX-RS application API (javax.ws.rs.core.Application) allows a REST application implementation to specify a set of classes, a set of singleton instances and a map of custom properties to be registered. The Scout implementation of the REST application class org.eclipse.scout.rt.rest.RestApplication allows contributing classes, singletons and properties without needing to extend the RestApplication class. Three different contributor interfaces are available for contributions: IRestApplicationClassesContributor to contribute any classes IRestApplicationSingletonsContributor to contribute any object instances (singletons) IRestApplicationPropertiesContributor to contribute key/value properties Listing 3. Example class contributor public static class ExampleClassContributor implements IRestApplicationClassesContributor { @Override public Set> contribute() { return Collections.singleton(MyCustomExample.class); } } Scout data objects may be used as request and response objects for REST APIs. See Data Objects] for details and examples. A REST API may be used by non-Java consumers. In order to communicate using a platform-independent format, usually REST services use JSON as transport format. The marshaller between Java data objects and JSON is abstracted in the JAX-RS specification. Using the @Produces(MediaType.APPLICATION_JSON) annotation, each REST service method specifies the produced data format. The Scout REST integration uses the popular Jackson library as default marshaller. Like a usual service call using the Scout service tunnel a REST request must ensure that processing of the request takes place within a RunContext. The HttpServerRunContextFilter or HttpRunContextFilter can be used to intercept incoming REST requests and wrap them within a Scout RunContext. HttpServerRunContextFilter can be used if a Scout server dependency is available. Optionally this filter also supports the creation of a Scout server session if this should be required (stateful). Refer to the javadoc for more details. The HttpRunContextFilter on the other hand does not provide session support and is always stateless. Therefore, a REST resource implementation is not required to deal with setting up a RunContext to wrap the request within each method. The filter must be added in the web.xml configuration file and should be configured to be called after the authentication filter. The filter expects that the authentication has been performed and that a subject is available (JAAS context). All following filters and servlets and thus also the REST resources run automatically in the correct context. Listing 4. web.xml registration example for HttpServerRunContextFilter. HttpServerRunContextFilter org.eclipse.scout.rt.server.context.HttpServerRunContextFilter session false HttpServerRunContextFilter /api/* Beside the subject and other attributes the HttpServerRunContextFilter and HttpRunContextFilter setup the Correlation ID, as well as the locale. Both values are read from the incoming request header, the caller must ensure that the headers Accept-Language and X-Scout-Correlation-Id are set accordingly. Scout REST services based on JAX-RS using the Jersey library and the Jackson JSON marshaller need a maven dependency to jersey-media-json-jackson in the application pom.xml. This enables the use of Jackson as JAX-RS marshaller with the Jersey JAX-RS implementation. Additionally, a dependency to the Scout module org.eclipse.scout.rt.rest.jackson is necessary. This module adds a set of Jackson additions in order to use the Jackson library together with Scout data objects. Listing 5. Dependency section of pom.xml to use Scout REST services with Jackson & Jersey org.glassfish.jersey.containers jersey-container-servlet-core org.glassfish.jersey.inject jersey-hk2 org.glassfish.jersey.media jersey-media-json-jackson org.eclipse.scout.rt org.eclipse.scout.rt.rest.jackson The Scout module org.eclipse.scout.rt.rest offers a set of helper classes in order to call REST services. Each REST service endpoint is represented by a specific REST resource client helper class. The (usually application scoped bean) class is used to specify the resource URL and additional properties used to build up the connection (authentication, additional headers,…​). Further it provides a call-back method for transforming unsuccessful responses into appropriate exception. At least the REST resource’s base URI must be specified: Listing 6. Example: REST resource client helper public class ExampleRestClientHelper extends AbstractRestClientHelper { @Override protected String getBaseUri() { return \"https://api.example.org/\"; (1) } @Override protected void configureClientBuilder(ClientBuilder clientBuilder) { super.configureClientBuilder(clientBuilder); clientBuilder.property(RestClientProperties.COOKIE_SPEC, CookieSpecs.STANDARD); clientBuilder.property(RestClientProperties.PROXY_URI, \"http://my.proxy.com\"); } @Override protected RuntimeException transformException(RuntimeException e, Response response) { (2) if (response != null && response.hasEntity()) { ErrorDo error = response.readEntity(ErrorResponse.class).getError(); throw new VetoException(error.getMessage()) .withTitle(error.getTitle()); } return e; } } 1 Declare base uri. 2 Custom exception transformer that is used as default strategy for all invocations prepared by this helper. (This is just for demonstration. Better extend org.eclipse.scout.rt.rest.client.proxy.AbstractEntityRestClientExceptionTransformer). Based on the helper class, an example REST resource client may be implemented: Listing 7. Example: REST resource client public class ExampleResourceClient implements IRestResourceClient { protected static final String RESOURCE_PATH = \"example\"; protected ExampleRestClientHelper helper() { return BEANS.get(ExampleRestClientHelper.class); } public ExampleEntityDo getExampleEntity(String id) { WebTarget target = helper().target(RESOURCE_PATH) .property(RestClientProperties.FOLLOW_REDIRECTS, false) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .get(ExampleEntityDo.class); (1) } public ExampleEntityDo updateExampleEntity(String id, ExampleEntityDo entity) { WebTarget target = helper().target(RESOURCE_PATH) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .post(Entity.json(entity), ExampleEntityDo.class); (2) } public void deleteExampleEntity(String id) { WebTarget target = helper().target(RESOURCE_PATH) .path(\"/{id}\") .resolveTemplate(\"id\", id); Response response = target.request().delete(); (3) response.close(); } public ExampleEntityDo getExampleEntityCustomExceptionHandling(String id) { WebTarget target = helper().target(RESOURCE_PATH, this::transformCustomException) (4) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .get(ExampleEntityDo.class); } protected RuntimeException transformCustomException(RuntimeException e, Response r) { if (r != null && r.hasEntity() && MediaType.TEXT_PLAIN_TYPE.equals(r.getMediaType())) { String message = r.readEntity(String.class); throw new VetoException(message); } return e; } } 1 HTTP GET example: Directly read response into an object. Exceptions are transformed transparently and the underlying resources are released (e.g. HTTP client). 2 HTTP POST example: Again, directly read the response into an object. 3 HTTP DELETE example: This delete operation does not send a response if it was successful. Hence close the returned Response explicitly to release underlying resources (see next line). Note: Unsuccessful responses are already handled by the REST client proxy. 4 Use custom exception transformer. The Scout REST Client implementation offers a set of properties to customize the underlying REST- and HTTP client, see org.eclipse.scout.rt.rest.client.RestClientProperties for a list of supported properties. Properties can be set on the REST client during initialization (valid for all requests): Listing 8. Setting properties for REST Client for all requests @Override protected void configureClientBuilder(ClientBuilder clientBuilder) { super.configureClientBuilder(clientBuilder); clientBuilder.property(RestClientProperties.COOKIE_SPEC, CookieSpecs.STANDARD); clientBuilder.property(RestClientProperties.PROXY_URI, \"http://my.proxy.com\"); } Some properties (see JavaDoc for details) may also be set on a request level: Listing 9. Setting properties for REST Client for a single requests, e.g. setting FOLLOW_REDIRECTS to false public ExampleEntityDo getExampleEntity(String id) { WebTarget target = helper().target(RESOURCE_PATH) .property(RestClientProperties.FOLLOW_REDIRECTS, false) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .get(ExampleEntityDo.class); (1) } There are multiple possibilities to configure a REST client to use a HTTP proxy: Directly on REST client instance: see org.eclipse.scout.rt.rest.client.RestClientProperties.PROXY_URI (and PROXY_USER / PROXY_PASSWORD properties) Using the dynamic Scout org.eclipse.scout.rt.shared.http.proxy.ConfigurableProxySelector, see example configuration: Listing 10. Setting HTTP proxy for outgoing requests to *.example.com scout.http.proxyPatterns[0]=.*\\.example.com(:\\d+)?=127.0.0.1:8888 In order to use the configurable proxy selector property, make sure to enable the new Scout Apache HTTP client connector, either using the REST client property org.eclipse.scout.rt.rest.client.RestClientProperties.USE_SCOUT_APACHE_CONNECTOR or by setting the config property scout.rest.useScoutApacheConnector=true. REST and the underlying HTTP protocol do not provide an explicit way to cancel running requests. Typically, a client terminates its connection to the HTTP server if it is no longer interested in the response. REST resources would have to monitor TCP connections and interpret a close as cancellation. Depending on the abstraction of the REST framework, connection events are not passed through and the cancellation is only recognized when the response is written to the closed connection. Until this happens, however, backend resources are used unnecessarily. Scout’s standard REST integration implements the described approach by closing the connection without any further action. It is not possible to react to this on the resource side. In order to enable a real cancellation, Scout also provides all necessary elements to assign an ID to a request, to manage these IDs in the backend during execution and to cancel transactions in the event of a cancellation. The following steps must be taken for their use: Scout does not impose nor provide a cancellation resource. It must be implemented by the project: Listing 11. Example: REST cancellation Resource @Path(\"cancellation\") public class CancellationResource implements IRestResource { @PUT @Path(\"{requestId}\") public void cancel(@PathParam(\"requestId\") String requestId) { String userId = BEANS.get(IAccessControlService.class).getUserIdOfCurrentSubject(); (1) BEANS.get(RestRequestCancellationRegistry.class).cancel(requestId, userId); (2) } } 1 Resolve the userId of the current user. This is optional and may depend on the current project. 2 Invoke the cancellation registry for the given requestId and userId. Listing 12. Example: REST cancellation Resource Client public class CancellationResourceClient implements IRestResourceClient { protected static final String RESOURCE_PATH = \"cancellation\"; protected CancellationRestClientHelper helper() { return BEANS.get(CancellationRestClientHelper.class); } public void cancel(String requestId) { WebTarget target = helper().target(RESOURCE_PATH) .path(\"{requestId}\") .resolveTemplate(\"requestId\", requestId); Response response = target.request() .put(Entity.json(\"\")); response.close(); } } To assign an ID to each request, an appropriate client request filter must be registered: Listing 13. Example: Register Client Request Cancellation Filter in REST Client Helper public class CancellationRestClientHelper extends AbstractRestClientHelper { @Override protected String getBaseUri() { return \"https://api.example.org/\"; } @Override protected void registerRequestFilters(ClientBuilder clientBuilder) { super.registerRequestFilters(clientBuilder); clientBuilder.register(new RestRequestCancellationClientRequestFilter(this::cancelRequest)); (1) } protected void cancelRequest(String requestId) { BEANS.get(CancellationResourceClient.class).cancel(requestId); (2) } } 1 Register the RestRequestCancellationClientRequestFilter that assigns a UUID to every request, which is sent as an HTTP header named X-ScoutRequestId. 2 Binds the actual cancel-operation to the cancel Method (in this case the cancellation rest resource client from above). Requests arriving at the backend need to be registered in the cancellation registry. This is done by a servlet filter (Note: REST container filters would have two issues: 1. there is no real interceptor around the resource call, but only a ContainerRequestFilter that is invoked before and a ContainerResponseFilter which is invoked after the the request is passed to the resource. 2. Cancellation in Scout is tied to an ITransaction that are managed by a RunContext and observed and controlled by a RunMonitor. Depending on sub-RunContexts and their transaction isolation it might happen, that the transaction visible in a container filter is not controlled by the currently active RunMonitor. Therefore, a cancel request would not cancel the transaction.) Listing 14. Example: Register client request cancellation filter in Rest Client Helper public class RestRequestCancellationServletFilter extends AbstractRestRequestCancellationServletFilter { @Override protected Object resolveUserId(HttpServletRequest request) { return BEANS.get(IAccessControlService.class).getUserIdOfCurrentSubject(); (1) } } 1 Implement the same userId Lookup as in the CancellationResource. Finally, declare the servlet filter in your web.xml: Listing 15. web.xml registration example for RestRequestCancellationFilter. RestRequestCancellationFilter org.eclipse.scout.docs.snippets.rest.RestRequestCancellationServletFilter RestRequestCancellationFilter /api/* Make sure the cancellation filter is registered after the HttpServerRunContextFilter.","title":"REST","component":"scout-docs","version":"22","name":"rest","url":"/scout-docs/22/technical-guide/working-with-data/rest.html","titles":[{"text":"REST Resource Conventions","hash":"rest-resource-conventions","id":1},{"text":"REST Resource Provider","hash":"rest-resource-provider","id":2},{"text":"REST Resource Registration","hash":"rest-resource-registration","id":3},{"text":"Extend REST Application","hash":"extend-rest-application","id":4},{"text":"Data Objects","hash":"data-objects","id":5},{"text":"Marshaller","hash":"marshaller","id":6},{"text":"RunContext","hash":"runcontext","id":7},{"text":"Dependency Management","hash":"dependency-management","id":8},{"text":"REST Client","hash":"rest-client","id":9},{"text":"REST Client Properties","hash":"rest-client-properties","id":10},{"text":"REST Client HTTP Proxy","hash":"rest-client-http-proxy","id":11},{"text":"REST Cancellation Support","hash":"rest-cancellation-support","id":12},{"text":"Cancellation Resource and Resource Client","hash":"cancellation-resource-and-resource-client","id":13},{"text":"Install Cancellation Request Filter","hash":"install-cancellation-request-filter","id":14},{"text":"Implement Cancellation Servlet Filter","hash":"implement-cancellation-servlet-filter","id":15}]},"67":{"id":67,"text":"These pages document Eclipse Scout. Here you will find all Scout 23.1 related documentation, from getting started to architecture details to release upgrades. If you are interested in the documentation of another Scout version, use the version selector on the bottom left of this page. For older versions, please see Archived Versions. Read the Get Started Guide first to learn the difference between Scout Classic and Scout JS. This will help you to decide whether you should do the Scout Classic or Scout JS tutorials. Scout Classic Tutorials Hello Scout Classic Deploy to Tomcat One Day Tutorial Scout JS Tutorials Hello Scout JS Hello Scout JS Full Stack Hello Scout JS with CDN If you want to get serious about Scout, you should definitely have a look at the following documents. Technical Guide Documents best practices and architecture details. Scout SDK Describes the functionality of the Scout plugins for various IDEs. How-Tos Contains various small technical guides to very specific Scout subjects. Please read the following documents when doing a Scout release upgrade. The Release Notes describe the new features of the release. The Migration Guide explains how to migrate your code for a proper upgrade. Release Notes Migration Guide Scout is a mature framework and since we release at least one major version once a year, there are quite a few versions out there. This documentation describes Version 22 and newer. Older Scout Versions are not part of this documentation platform and have been archived. You’ll find them under the following links: Version 11 Browse Version 10 Browse Version 9 Browse Version 8 Browse Version 7 Browse Version 6 Browse Version 5.2 Browse Version 5 Browse Version 4 Browse Version 3.9 Browse","title":"Overview","component":"scout-docs","version":"23.1","name":"index","url":"/scout-docs/stable/index.html","titles":[{"text":"Get Started","hash":"get-started","id":1},{"text":"Deepen Your Knowledge","hash":"deepen-your-knowledge","id":2},{"text":"Upgrade Your Version","hash":"upgrade-your-version","id":3},{"text":"Archived Versions","hash":"archived-versions","id":4}]},"68":{"id":68,"text":"This guide gets you through the “Hello World” Eclipse Scout application and shows you how to import the Scout demo application into your Eclipse IDE. In the second part, the Scout tooling available in the Eclipse IDE is described. Getting Started Scout Tooling Do you want to improve this document? Have a look at the sources on GitHub.","title":"Eclipse Scout User Guide","component":"scout-docs","version":"23.1","name":"scout_user_guide","url":"/scout-docs/stable/eclipse-help/scout_user_guide.html","titles":[]},"69":{"id":69,"text":"The Eclipse Scout package also includes Scout specific tooling, the Scout SDK that is available for the Eclipse IDE. The Scout Tooling provides wizards to create new project and application components, adds code assistance to the Java Editor and comes with a NLS editor to manage all translated text entries of the application. Thanks to this tooling, developing Scout applications is made simpler, more productive and also more robust. Initially, a solid understanding of Java (and JavaScript for Scout JS) is sufficient to start developing Scout applications and only a rough understanding of the underlying Maven/Web technologies is required. The Scout SDK also helps developers to become more productive. Many repetitive and error prone tasks run automatically in the background or are taken care of by the component wizards of the Scout SDK. The application code created by the Scout SDK wizards helps to ensure that the resulting Scout application has a consistent and robust code base and is well aligned with the application model defined by the Scout runtime framework. To learn more about the wizards and the editor support follow the links provided below. Scout Wizards Java Editor Support NLS Editor Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk","url":"/scout-docs/stable/eclipse-help/sdk.html","titles":[{"text":"Scout Tooling","hash":"_scout_tooling","id":1},{"text":"Effects on Productivity and Code Quality","hash":"effects-on-productivity-and-code-quality","id":2},{"text":"Learn More","hash":"learn-more","id":3}]},"70":{"id":70,"text":"Scout uses the standard Java Editor of the Eclipse IDE. To ease the development, the Scout SDK provides additional features for the Java Editor. To create new Scout components that are represented by inner classes in the Scout framework, the Scout tooling extends the Java content assist of the Eclipse Java editor. The offered proposals are context specific. Depending on the current cursor position in the Java editor, possible Scout components are added to the proposal list. In a class representing a group box in a form, the Scout content assist adds proposals for various form fields. In a table class the content assist adds proposals to add table columns or context menus. Those proposals trigger the creation of inner classes for form fields, table columns or codes. The Eclipse content assist can be started by typing Ctrl+Space. To add additional form fields to a form the current edit position needs to be inside of a Scout group box. Typing Ctrl+Space then provides access to the most frequently used Scout widgets as shown in Figure 1. Figure 1. Proposals to create new form fields in a GroupBox When a template is selected, it is possible to customize it by navigating between the different Edit-Groups with the Tab Key (this works exactly like other templates in the Eclipse Editor). With this mechanism you can quickly define the class name, the parent class and other properties. To exit the Edit-Mode just press Enter. For adding new columns in a table set the current edit position inside a Scout table. The Scout table itself may be located inside of a TableField as shown in Figure 2 or can also be located inside of a Scout TablePage. Figure 2. Proposals to create new columns in a Table Next to adding columns the content assist shown in Figure 2 can also be used to add key stroke actions and menus to tables. Adding new Codes to an existing CodeType is supported by the content assist as shown in Figure 3. Figure 3. Proposals to create new codes in a CodeType When the the current edit position is inside the String parameter of the TEXTS.get() code, the content assist (opened with Ctrl + Space) provides support for the NLS entries as shown in Figure 4. Figure 4. Proposals corresponding to NLS Support. Selecting one of proposal entries (like \"DateOfBirth\" in the example) shows the available translations on the right side. To select a specific proposal entry you may double click on the entry or hit the Enter key. To create a new text entry select New text…​ at the end of the proposal list. Selecting \"New text…​\" then opens the NLS Entry Wizard. Go back to the Scout Tooling. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_editor_java","url":"/scout-docs/stable/eclipse-help/sdk_editor_java.html","titles":[{"text":"Additions to the Java Editor","hash":"_additions_to_the_java_editor","id":1},{"text":"Create new Form Fields","hash":"sec-sdk_new_form_field","id":2},{"text":"Create new Table Columns","hash":"sec-sdk_new_table_column","id":3},{"text":"Create new Codes","hash":"create-new-codes","id":4},{"text":"NLS-Entry support","hash":"nls-entry-support","id":5}]},"71":{"id":71,"text":"The NLS Editor allows to edit the different properties files containing the translated text entries. It is a efficient way to edit all the property files for multilingual texts in one go. Search for the *.nls files in the shared projects. Select Open With NLS Editor in the context menu The screenshot below shows the opened NLS editor. In the first column the key values are shown that are used in accessing translations through TEXTS.get(\"key\"). The second columns holds the default translations followed by columns holding the translations for other translated languages. Actions on the top right corner: Refresh NLS Project Reload the content of the editor. Show NLS entry usage For each row, search in the Java code where the NLS Key is used. Results are displayed in the first column. New entry…​ Opens the New Text Entry Wizard New language…​ Opens the Add a Language Wizard Import…​ Import the NLS entries of an external file Export…​ Export the NLS entries to an external file Import and Export requires additional components. Hide inherited rows checkbox On the top of each column, the text fields allow you to filter the entries in the table. With the Reset button on the right you will empty those filters. The entries in the table can be directly edited by pressing F2 or double-clicking into a text cell. On each row it is possible to call following context menu: Modify Entry Opens the New Text Entry Wizard Find references to 'Xxx' Search in the Java code where the NLS Key is used. Remove Xxx Delete the NLS Entry from the files The mapping between the properties files is registered in the \"Text Provider Service\" class. Per default the files follow this pattern: .shared/src/main/resources//texts/Texts.properties where: is a chain of folders following the same convention as the Java source files with the package name. For example the org.eclipse.contacts.shared project uses org/eclipse/scout/contacts/shared as path. is an identifier of the language and the country. Some possible file names: Texts.properties is the default language Texts_de.properties is for German Texts_fr_BE will be for French in Belgium If NLS keys are used in the code that do not exist in a properties file, an ugly placeholder is displayed to the user. To find such missing translations the Menu Scout → Search missing text keys…​ may be handy. The result is listed in the Eclipse Search view. The search also takes the scope of each NLS key into account. So that the key is considered to be available there must be a TextProviderService with that key on the classpath of that module. Reported false positives can be suppressed using the following comment at the end of the corresponding line: NO-NLS-CHECK. Matches on that line are then not reported in future searches anymore. Go back to the Scout Tooling. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_editor_nls","url":"/scout-docs/stable/eclipse-help/sdk_editor_nls.html","titles":[{"text":"NLS Editor","hash":"_nls_editor","id":1},{"text":"Accessing the NLS Editor","hash":"accessing-the-nls-editor","id":2},{"text":"The NLS Editor","hash":"the-nls-editor","id":3},{"text":"Action Buttons","hash":"action-buttons","id":4},{"text":"Default Mapping to Properties Files","hash":"default-mapping-to-properties-files","id":5},{"text":"Find missing NLS Keys","hash":"find-missing-nls-keys","id":6}]},"72":{"id":72,"text":"The Scout SDK provides a set of wizards to create new Scout projects and various components for your Scout applications. To start any of these wizards press Ctrl+N or use menu File New Other…​. In the first wizard step type \"Scout\" into the Wizards field as shown in Figure 1. Figure 1. Selecting Scout Wizards in the Eclipse wizard dialog With the New Project Wizard a new Scout client server application project is created from scratch. To create new components such as Scout forms or pages the following component wizards are provided by the Scout SDK. New Form Wizard, includes creation of a form, a form data, a service and permissions. New Page Wizard, includes creation of a page and a page data. New LookupCall Wizard, includes creation of a lookup call and a lookup service. New CodeType Wizard New Permission Wizard For the Scout NLS support two additional wizards are provided by the Scout SDK. Content assistance for the String parameter in TEXTS.get() is added to the Java editor. There, the New Text Entry Wizard can be used to add translated texts. Adding additional translated languages with the Add a Language Wizard is handled in the NLS Editor. Go back to the Scout Tooling. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_wizard","url":"/scout-docs/stable/eclipse-help/sdk_wizard.html","titles":[{"text":"Scout Wizards","hash":"_scout_wizards","id":1},{"text":"New Project Wizard","hash":"new-project-wizard","id":2},{"text":"Wizards for Scout Components","hash":"wizards-for-scout-components","id":3},{"text":"NLS Wizards","hash":"nls-wizards","id":4}]},"73":{"id":73,"text":"The New Scout CodeType wizard can be used to create a new code type classes. To start the wizard use File New Other…​ or press Ctrl+N as described in section Scout Wizards. Figure 1. The new CodeType wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.shared.helloworld has been selected in the Package Explorer. The wizard fields that then needs to be filled in manually are the Name, the First Argument and the Second Argument fields. By clicking on the Finish button the wizard is started and the specified component is created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven shared module used for the creation of the code type class. The default value is the src/main/java folder in the Maven shared module. Package The Java package that will contain the code type class. The Scout SDK will try to guess the package name from the current context. Name The name of the code type class. According to Scout conventions the class name ends with the suffix CodeType. Super Class The super class for the form. AbstractCodeType is the default value. First Argument The class used to identify this code type. Second Argument The class to identify individual codes within this code type. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.shared The MyCodeType class in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_wizard_code-type","url":"/scout-docs/stable/eclipse-help/sdk_wizard_code-type.html","titles":[{"text":"New CodeType Wizard","hash":"_new_codetype_wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"74":{"id":74,"text":"The New Form wizard is be used to create a new form including a form data, permissions and and related service. To start the wizard use File New Other…​ or press Ctrl+N. Figure 1. The new Form Wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the form class. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the form class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared and server modules. Name The name of the form class. According to Scout conventions the class name ends with the suffix Form. Super Class The super class for the form. AbstractForm is the default value. Create FormData If ticked, a form data class will be created in the shared module. Create Service If ticked, a service interface is created in the shared module and a service implementation is created in the Maven server module. Create Permissions If ticked, read and update permissions are created in the Maven shared module. Shared Source Folder The source folder of the Maven shared module used for creation of the form data, the service interface and the permission classes. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for the service class creation. The default value is the src/main/java folder in the Maven server module. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyForm form class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared In folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld The IMyService service interface The ReadMyPermission permission class The UpdateMyPermission permission class The MyFormData form data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService service class in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_wizard_form","url":"/scout-docs/stable/eclipse-help/sdk_wizard_form.html","titles":[{"text":"New Form Wizard","hash":"new-form-wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"75":{"id":75,"text":"The Add a Language wizard can be used to create additional translation files in order to localize the user interface. It can be started from the The NLS Editor. It is possible to crate one translation file that corresponds to the user locale, which are specified by a language and optionally a country (de, de_DE, de_CH and so on). Language The language of the locale. Country (optional) The country of the locale. Folder The location where the Texts properties file will be created. Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_wizard_language","url":"/scout-docs/stable/eclipse-help/sdk_wizard_language.html","titles":[{"text":"Add a Language Wizard","hash":"_add_a_language_wizard","id":1}]},"76":{"id":76,"text":"The New Scout Lookup Call wizard can be used to create a lookup call and a corresponding lookup service. To start the wizard use File New Other…​ or press Ctrl+N as described in section Scout Wizards. Figure 1. The new LookupCall wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.shared.helloworld has been selected in the Package Explorer. The only wizard fields that then needs to be filled in manually are the Name and the Key Class fields. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven shared module used for the creation of the lookup call class. The default value is the src/main/java folder in the Maven shared module. Package The Java package that will contain the lookup call class. The Scout SDK will try to guess the package name from the current context and derive a matching package names for the Maven server module. Name The name of the lookup call class. According to Scout conventions the class name ends with the suffix LookupCall. Super Class The super class for the form. LookupCall is the default value. Key Class The class to be used for key values of the lookup call. Server Source Folder The source folder of the Maven server module used for the service class creation. The default value is the src/main/java folder in the Maven server module. Service Super Class The super class for the lookup service associated with this lookup call. The default value is AbstractLookupService. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.shared In folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld The MyLookupCall class The IMyLookupService interface In Maven module helloworld.server The MyLookupService service class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.server.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_wizard_lookupcall","url":"/scout-docs/stable/eclipse-help/sdk_wizard_lookupcall.html","titles":[{"text":"New LookupCall Wizard","hash":"_new_lookupcall_wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"77":{"id":77,"text":"The NLS Entry wizard can be used to create or to modify a text entry that will be displayed to the user and the needs to be localized. It can be opened from: The NLS Editor by selecting \"New Entry\" or \"Modify Entry\". The Java Editor by using the proposal editor inside the string parameter of the TEXTS.get(\"\") code. Figure 1. Adding a new text with the New Entry wizard. Key Name This field holds the text key that is used to access translated text. default This field holds the default translated text for the key. Make sure to at least provide a translated text in this tab. French (France) Additional tabs to enter translations for other languages may be present. Adding additional languages is described in the text for the NLS editor. Copy key to the clipboard Select this checkbox to copy the key name to the clipboard and paste it later in your code. Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_wizard_nls-entry","url":"/scout-docs/stable/eclipse-help/sdk_wizard_nls-entry.html","titles":[{"text":"NLS Entry Wizard","hash":"nls-entry-wizard","id":1}]},"78":{"id":78,"text":"The New Scout Page wizard can be used to create a new page and related classes. To start the wizard use File New Other…​ or press Ctrl+N. Figure 1. The new Page Wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the page. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the page class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared module. Name The name of the page class. According to Scout conventions the class name ends with the suffix TablePage (for subclasses of AbstractPageWithTable) or NodePage (for AbstractPageWithNodes). Super Class The super class for the form. AbstractPageWithTable is the default value. Shared Source Folder The source folder of the Maven shared module used for creation of the page data and the service interface. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for creation of the service implementation. The default value is the src/main/java folder in the Maven server module. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyTablePage page class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared The IMyService service interface in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld MyTablePageData page data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService implementation in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_wizard_page","url":"/scout-docs/stable/eclipse-help/sdk_wizard_page.html","titles":[{"text":"New Page Wizard","hash":"new-page-wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"79":{"id":79,"text":"The New Scout Permission wizard can be used to create a new permission classes. To start the wizard use File New Other…​ or press Ctrl+N as described in section Scout Wizards. Figure 1. The new Permission wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.shared.helloworld has been selected in the Package Explorer. The only wizard fields that then needs to be filled in manually is the Name fields. By clicking on the Finish button the wizard is started and the specified component is created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven shared module used for the creation of the permission class. The default value is the src/main/java folder in the Maven shared module. Package The Java package that will contain the permission class. The Scout SDK will try to guess the package name from the current context. Name The name of the permission class. According to Scout conventions the class name ends with the suffix Permission. Super Class The super class for the form. BasicPermission is the default value. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.shared The MyPermission class in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_wizard_permission","url":"/scout-docs/stable/eclipse-help/sdk_wizard_permission.html","titles":[{"text":"New Permission Wizard","hash":"_new_permission_wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"80":{"id":80,"text":"The New Scout Project wizard can be used to create a new Scout project from scratch. To open the wizard press Ctrl+N or use File New Other…​ and type \"Scout\" into the Wizards search field. Then, select the entry \"Scout Project\" and click on Next. This leads to the initial dialog of the New Scout Project wizard as shown in Figure 1. Figure 1. The new Project Wizard A detailed description of the indiviudal wizard fields of Figure 1 is provided in the next section. By clicking on the Finish button the wizard is started and a new Scout client server application is created in the form of a Maven multi-module project. All fields of the Figure 1 are initially filled with default values. Group Id Maven groupId used for all created projects. The default value is org.eclipse.scout.apps. Artifact Id Maven artifactId for the parent project. The additional projects are derived from this name. The default value is helloworld. Display Name The name of the application presented to the user. This name is shown in the Browser title bar. The default value is \"My Application\" With the Project Location group box, you can control where the project will be created. Unchecked the Use default Workspace location checkbox to enter an other value in the Target Directory Field. The Browse…​ button can help you to find the appropriate path. With the Figure 1 wizard a complete Maven multi-module project is created. Using the default artifact Id helloworld the following Maven modules are created. Maven module helloworld Contains the project’s parent pom.xml file Maven module helloworld.client Contains model components of the client application in src/main/java and model tests in src/test/java. The class HelloWorldForm in package org.eclipse.scout.apps.helloworld.client.helloworld is an example of a model class. Maven module helloworld.shared Contains components needed in both the client and the server application. For examples see the IHelloWorldService interface in src/main/java and class HelloWorldFormData in src/generated/java. The Texts.nls file that can be opened in the Scout NLS Editor. Maven module helloworld.server Contains the model components of the server application in src/main/java and model tests in src/test/java. The class HelloWorldService in package org.eclipse.scout.apps.helloworld.server.helloworld is an example of such a model class. Maven module helloworld.server.app.dev Contains all components to run the Scout server application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the Scout server application. The file pom.xml bundles the Jetty web server with the server application. The file [webapp] dev server.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.server.app.war Contains all components to create a Scout server WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the server configuration. The file pom.xml is used to build the Scout server WAR file. Maven module helloworld.ui.html Contains servlet filters and the HTML pages as well as custom CSS and JavaScript files for the Scout UI Server. See class UiServletFilter in src/main/java and folder WebContent in source/main/resources. The file js build.launch contains the launch configuration for the Eclipse IDE that executes the JavaScript build. Maven module helloworld.ui.html.app.dev Contains all components to run the Scout UI application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the application. The file web.xml in folder src/main/webapp contains the web configuration for the application. The file pom.xml bundles the Jetty web server with the application. The file [webapp] dev ui.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.ui.html.app.war Contains all components to create a Scout UI WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the application configuration. The file web.xml in folder src/main/webapp contains the web configuration. The file pom.xml is used to build the Scout UI WAR file. Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"sdk_wizard_project","url":"/scout-docs/stable/eclipse-help/sdk_wizard_project.html","titles":[{"text":"New Scout Project Wizard","hash":"new-scout-project-wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"81":{"id":81,"text":"To get started with Eclipse Scout, we propose that you first go through the “Hello World” tutorial and then follow the tutorial to import the existing Scout demo applications. Hello World Tutorial Import the Scout Demo Applications Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"tutorial","url":"/scout-docs/stable/eclipse-help/tutorial.html","titles":[{"text":"Getting Started","hash":"getting-started","id":1}]},"82":{"id":82,"text":"With this tutorial you will learn how to import the Scout Demo applications into your workspace. The tutorial consists of the following two parts: Install the Scout Demo applications Run the Scout demo from your IDE In the first part of the tutorial we import the demo applications using the Oomph Eclipse installer tool. In the Eclipse IDE open the Import wizard with menu File Import…​. This opens the dialog shown in Figure 1. Next, under folder Oomph select the node Projects into Workspace and click the Next button. Figure 1. The Import Wizard in Eclipse. Now select Scout Demo App, check in the table below that 'Stream' shows the desired Scout version and click Next. Figure 2. Select Scout Demo App On the next wizard page, select the Show all variables check box in the bottom left corner. Figure 3. \"Variables\" Step of the Importer. Before you proceed make sure that all shown variables are set appropriately for your use case. Git clone location rule: “Located in a folder named '.git/' within the workspace folder” Target Platform: “None” JRE Location: Path to your Java 11 or 17 JRE Scout Demo App Github repository: “HTTPS (read-only, anonymous)” Once you finished setting the variables click Next. This leads to the Confirmation dialog. This last step can be completed by clicking on Finish. The Oomph installer first makes sure that all necessary Scout components and M2E connectors are available. In case one or more components are missing, Oomph will first download and install them. This triggers a restart request as shown in Figure 4. If the dialog does not automatically appear, click on the small icon in the status bar on the bottom as shown in Figure 5. Figure 4. Restart of the IDE after installation. Figure 5. Status icon To complete the installation click Finish. If your IDE needs to be restarted, select the same workspace in the Eclipse Launcher dialog. After the restart Oomph will continue to download and install the Scout demo applications showing the progress in the Eclipse importer dialog. Once the download and installation has completed you can close the dialog with clicking the Finish button. After the Setup of the \"Scout Demo App\", a lot of projects are materialized in the workspace (see the screenshot in Figure 6). The projects are organized in three working sets: Demo App: Contacts The projects corresponding to the Scout Demo Application \"Contacts\". Demo App: Widgets The projects corresponding to the Scout Demo Applications \"Widgets\" and \"JSWidgets\". Demo Docs The scout documentation and the project containing most of the code snippets included in the documentation. Figure 6. Projects in the workspace after the \"Scout Demo App\" setup. If you do not see the workingsets, you might need to select \"Top Level Elements Working Sets\" from the Menu as displayed in Figure 7 Figure 7. Select \"Working Sets\" as \"Top Level Elements\" in the \"Package Explorer\". With the Scout demo installed in our workspace we are now ready to start the applications from within our IDE. Open the Run As menu as shown in Figure 8. There are 3 launch groups available, one for each application. Each launch group will start all the necessary builds and servers. Now select [contacts] all (Windows or Unix variant) to run the Contacts application. Figure 8. Start the Contacts application. Once the startup sequence of the Contacts application has completed the console view in your Eclipse IDE should look like Figure 9. Figure 9. Console view after starting the Contacts demo. With the Contacts demo running in the IDE open the application in your favorite browser via URL http://localhost:8082. To get the screen shown in Figure 10 first click on the [folder]_Persons node and then double click on the ''Alice'' row. Figure 10. The Contacts application. Play with the Contacts application. This provides a good overview of a typical Scout application. You can browse through the data, open different forms and add/change entities. Also have a quick look at the code. The list on the left side of the application containing the nodes Persons and Organizations is implemented in class ContactOutline as shown in Listing 1. Listing 1. ContactOutline implementation. @ClassId(\"303c0267-3c99-4736-a7f5-3097c5e011b6\") public class ContactOutline extends AbstractOutline { @Override protected void execCreateChildPages(List> pageList) { // pages to be shown in the navigation area of this outline pageList.add(new PersonTablePage()); (1) pageList.add(new OrganizationTablePage()); } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Contacts\"); } @Override protected String getConfiguredIconId() { return Icons.Folder; } } If you have clicked on the Persons node a page with all available persons is shown. This page is implemented in class PersonTablePage and the dialog to show/edit persons is implemented in class PersonForm. This is the end of the getting started guide. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"tutorial_existingdemo","url":"/scout-docs/stable/eclipse-help/tutorial_existingdemo.html","titles":[{"text":"Import the Scout Demo Applications","hash":"_import_the_scout_demo_applications","id":1},{"text":"Install the Scout Demo Applications","hash":"install-the-scout-demo-applications","id":2},{"text":"Setup result","hash":"setup-result","id":3},{"text":"Run the Contacts Demo Application","hash":"run-the-contacts-demo-application","id":4},{"text":"Start the application in the IDE","hash":"start-the-application-in-the-ide","id":5},{"text":"Use the Contacts Demo in a Browser","hash":"use-the-contacts-demo-in-a-browser","id":6},{"text":"What’s Next?","hash":"whats-next","id":7}]},"83":{"id":83,"text":"With this tutorial you will learn how to create your first Scout application. First, Node.js needs to be installed as Scout uses it to build web assets. So if you don’t have it yet, visit the Node.js download site, choose the package for your platform and install it on your local machine. Make sure the Node.js installation is on the PATH. You can verify it by using your command line: c:\\> node -v v18.12.1 Scout uses pnpm 7 as package manager. Therefore, install it into your Node installation by using your command line: npm install -g pnpm@7.16.0 and verify that it was installed successfully with: c:\\> pnpm -v 7.16.0 Start your Eclipse IDE and select an empty directory for your workspace as shown in Figure 1. This workspace directory will then hold all the project code for the Hello Scout application. Once the Eclipse IDE is running, it will show the Java perspective. Figure 1. Select a new empty folder to hold your project workspace To create a new Scout project, select the menu File New Project…​ and type Scout Project in the wizard search field. Select the Scout Project wizard and press Next. The New Scout Project wizard is then started as shown in Figure 2. Figure 2. The new Scout project wizard. In the New Scout Project wizard you have to enter a Group Id, Artifact Id and a Display Name for your Scout project. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). For the Hello Scout application just use the already pre-filled values and ensure the user interface programming language is set to Java as sown in Figure 2. Then click the Finish button to let the Scout SDK create the initial project code for you. Depending on your Eclipse installation, some Maven plugin connectors may initially be missing. In that case, a dialog as shown in Figure 3 appears. In order to resolve the selected connectors and continue, click on Finish. Afterwards, confirm the installation, accept the license and the message that some content has not been signed. Finally, the installation of the maven plugin connectors requires a restart of the Eclipse IDE. Figure 3. The Maven plugin connector installation dialog. After the New Scout Project wizard has created the Maven modules for the Hello Scout application, the code is compiled by the Eclipse IDE. You can see the created Maven modules in the Package Explorer as shown in Figure 4. Figure 4. The initial set of Maven modules created for the Hello Scout application. After the compilation, you can start the Scout application for the first time. Since the Hello Scout app consists of a backend and a frontend, two servers need to be started. Before the frontend server can deliver any JavaScript code to the browser, the JavaScript build needs to be executed as well. You could start each launch configuration separately, but for the sake of convenience there is a launch group available which starts all at once. To start the launch group use the Run As menu as shown in Figure 5. Figure 5. Starting the Hello Scout application. The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites. Once the JS build has been completed successfully, the frontend and backend servers will be started automatically. The servers are ready as soon as the console shows Server ready. You can now access the Hello Scout application by navigating to http://localhost:8082/ in your favorite web browser. The Hello Scout application is then presented as shown in Figure 6. Figure 6. The Hello Scout application in the browser. In the next tutorial, you will learn how to import the Scout demo applications into your workspace. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.1","name":"tutorial_helloworld","url":"/scout-docs/stable/eclipse-help/tutorial_helloworld.html","titles":[{"text":"Hello World Tutorial","hash":"_hello_world_tutorial","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Add pnpm","hash":"add-pnpm","id":3},{"text":"Create a Scout Project","hash":"create-a-scout-project","id":4},{"text":"What’s Next?","hash":"whats-next","id":5}]},"84":{"id":84,"text":"At some point during the application development you will want to install your software on a machine that is intended for productive use. This is the moment where you need to be able to build and package your Scout application in a way that can be deployed to an application server. As Scout applications just need a servlet container to run, Scout applications can be deployed to almost any Java application server. For the purpose of this tutorial we will use Apache Tomcat. First you need a Tomcat installation. If you do not yet have such an installation, you may want to read and follow the instructions provided in Appendix A. Second you need to decide if the users of your application should communicate with the Scout frontend server using HTTPS. We strongly recommend to use HTTPS for any productive environment. This is why the Hello Scout applications are configured to use HTTPS for production by default. In case you don’t want to use HTTPS the application must be slightly modified. Then you can skip the next section and instead follow the instructions in section Update the Scout Application to work with HTTP. As a default Tomcat installation is configured to use HTTP only, you need to verify if the installation is properly configured for HTTPS too. In case HTTPS support is already enabled for your Tomcat installation, you may skip the next section. More details on the SSL configuration can be found in the Tomcat Documentation to enable SSL/TLS. This section describes the creation and usage of a self-signed certificate in a localhost setting. Create a keystore file with a self-signed certificate. Adapt the HTTPS connector port in Tomcat’s server.xml configuration. Export the self-signed certificate from the keystore. Import the self-signed certificate into the Java certificate store. The first step is to create a self-signed certificate using the keytool provided with the Java runtime. The example command line below will create such a certificate using the alias tomcat_localhost and place it into the keystore file tomcat_localhost.jks keytool.exe -genkey -keyalg RSA -dname CN=localhost -alias tomcat_localhost -keystore tomcat_localhost.jks -keypass changeit -storepass changeit The second step is to uncomment the HTTPS connector element in the Tomcat’s server.xml configuration file. Make sure parameter keystoreFile points to your newly created keystore file (if you are using a Windows box, make sure not to use the backslash characters in the path to the keystore). After a restart of Tomcat you should then be able to access Tomcat on https://localhost:8443/manager/html. The third step is to export the newly created self-signed certificate from the tomcat_localhost.jks keystore file into the tomcat_localhost.der certificate file. keytool.exe -exportcert -alias tomcat_localhost -storepass changeit -keystore tomcat_localhost.jks -file tomcat_localhost.der In the last step add the self-signed certificate to the known certificates of the Java runtime. Make sure you modify the cacerts file of the Java runtime that is used in your Tomcat installation and modify the path to the cacerts file accordingly. keytool.exe -import -alias tomcat_localhost -trustcacerts -storepass changeit -keystore C:\\java\\jdk11\\lib\\security\\cacerts -file tomcat_localhost.der Your Tomcat installation is now properly configured for HTTPS. In case the Scout frontend server cannot access the Scout backend server, your self-signed certificate might be missing in the Java installation used by Tomcat. To verify that the certificate has been included in the file cacerts file use the following command. keytool.exe -list -storepass changeit -keystore C:\\java\\jdk11\\lib\\security\\cacerts | find \"localhost\" Once you no longer need the self-signed certificate file in your Java installation make sure to remove the certificate again: keytool.exe -delete -alias tomcat_localhost -storepass changeit -keystore C:\\java\\jdk11\\lib\\security\\cacerts If you prefer to work with HTTP only, you need to modify the security settings of your Scout application. This can be done with the steps described below. In file config.properties (in the folder helloscout.ui.html.app.war/src/main/resources): Add the property scout.auth.cookieSessionValidateSecure=false to disable the check for an encrypted channel (HTTPS). Change the scout.backendUrl property to use HTTP instead of HTTPS and change the port according to your Tomcat setup, typically 8080. In file web.xml (in the folder helloscout.ui.html.app.war/src/main/webapp/WEB-INF) delete the true flag in the element. In file web.xml (in the folder helloscout.server.app.war/src/main/webapp/WEB-INF) delete the true flag in the element. More on this topic can be found in the Scout Architecture Documentation. You are now ready to move the Hello Scout application from our development environment to a productive setup. The simplest option to move our application into the 'wild' is to build it using Maven. This produces two WAR files [1]. The first WAR file contains the Scout backend server with all business logic. The second WAR file contains the Scout frontend server that is responsible for communicating with the web browser of the user. To start the build open the directory containing the module helloscout in the command line and execute the Maven command mvn clean verify. This starts the compilation, executes all test cases and bundles the result into two WAR files. As soon as the build is reporting success (this may take a few minutes) you can find the built WAR files: The Scout backend WAR file org.eclipse.scout.apps.helloscout.server.war in folder helloscout/helloscout.server.app.war/target The Scout frontend WAR file org.eclipse.scout.apps.helloscout.ui.html.war in folder helloscout/helloscout.ui.html.app.war/target To see the new files within Eclipse you may need to refresh the target folder below each project using the F5 keystroke. As the final step of this tutorial, you have to deploy the two WAR files representing your Hello Scout application to a Tomcat web server. To verify a running Tomcat instance, type http://localhost:8080/ into the address bar of the web browser of your choice. You should then see the page shown in Figure 1. Figure 1. The Tomcat shown after a successful installation. After clicking on the Manager App button (highlighted in red) the login box is shown in front. A successful login shows the \"Tomcat Web Application Manager\". Once the web browser displays the successful running of your Tomcat instance, switch to its Manager App by clicking on the button highlighted in Figure 1. After entering user name and password the browser will display the Tomcat Web Application Manager as shown in Figure 2. If you don’t know the credentials, you may look it up in the file tomcat-users.xml as described in Directories and Files. Figure 2. The “Tomcat Web Application Manager”. The WAR files to be deployed can then be selected using button “Choose File” highlighted in red. After logging into Tomcat’s manager application, you can select the WAR files to be deployed using the button Choose File as shown in Figure 2. Then pick your just built org.eclipse.scout.apps.helloscout.server.war, close the file chooser and click on the button Deploy (the one located directly below button Choose File) to deploy the application to the Tomcat web server. Then repeat this step with the second WAR file org.eclipse.scout.apps.helloscout.ui.html.war. This will copy the selected WAR files into Tomcat’s webapps directory and unpack its contents into subdirectories with the same name as the WAR file. You can now connect to the application using the browser of your choice by navigating to: http://localhost:8080/org.eclipse.scout.apps.helloscout.ui.html/ or https://localhost:8443/org.eclipse.scout.apps.helloscout.ui.html/ if you have chosen to configure HTTPS for the Tomcat installation. In this case you might need to accept your self-signed certificate as the browser does not yet trust it. Figure 3. The \"Hello Scout\" login page. Then you will see the login page as shown in Figure 3. Two users have been predefined: admin with password admin and scott with password tiger. You can find this configuration in the config.properties file of the application. In a productive environment it is recommended to deploy the server and the user interface into two different servlet containers running on dedicated machines. This is because these two tiers have different requirements on resources, load balancing and access protection. Furthermore, it is strongly recommended using an encrypted connection (e.g. TLS 1.3 [2]) between client browsers and the Scout frontend server AND between the Scout frontend and backend server! Apache Tomcat is an open source servlet container that is a widely used. In case you are interested in getting some general context around Tomcat you could start with the Wikipedia article.[3]. Then get introduced to its core component “Tomcat Catalina”.[4]. before you switch to the official Tomcat homepage.[5]. This section is not really a step by step download and installation guide. Rather, it points you to the proper places for downloading and installing Tomcat. We recommend to work with Tomcat version 9.0. Start your download from the official download site.[6]. Figure 4. A successful Tomcat installation. Once you have downloaded and installed Tomcat 9 (see the sections below for plattform specific guidelines) you can start the corresponding service or daemon. To verify that Tomcat is actually running open a web browser of your choice and type http://localhost:8080 into the address bar. You should then see a confirmation of the successful installation according to Figure 4. According to the Tomcat setup installation for Windows.[7] download the package “32-bit/64-bit Windows Service Installer” from the Tomcat 9 download site. Then, start the installer and accept the proposed default settings. For installing Tomcat on OS X systems download the “tar.gz” package from the Tomcat 9 download site. Then, follow the installation guide.[8] provided by Wolf Paulus. For Linux systems download the “tar.gz” package from the Tomcat 9 download site. Then, follow the description of the Unix setup.[9] to run Tomcat as a daemon. If you use Ubuntu, you may want to follow the tutorial.[10] for downloading and installing Tomcat provided by Lars Vogel. Tomcat’s installation directory follows the same organisation on all platforms. Here, we will only introduce the most important aspects of the Tomcat installation for the purpose of this tutorial. Figure 5. The organisation of a Tomcat installation including specific files of interest. As an example, a web app called \"helloworld_server\" is contained in subdirectory \"webapps\". Note that some folders and many files of a Tomcat installation are not represented in Figure 5. We just want to provide a basic understanding of the most important parts to operate the web server in the context of this tutorial. In the bin folder, the executable programs are contained, including scripts to start and stop the Tomcat instance. The conf folder contains a set of XML and property configuration files. The file server.xml represents Tomcat’s main configuration file. It is used to configure general web server aspects such as the port number of its connectors for the client server communication. For the default setup, port number 8080 is used for the communication between client applications and the web server. The file tomcat-users.xml contains a database of users, passwords and associated roles. Folder logs contains various logfiles of Tomcat itself as well as host and web application log files. The folder needed for deploying web applications into a Tomcat instance is called webapps. It can be used as the target for copying WAR files into the web server. The installation of the WAR file then extracts its content into the corresponding directory structure as shown in Figure 5. Finally, the folder work contains Tomcat’s runtime cache for the deployed web applications. Tomcat comes with the pre installed Manager App. This application is useful to manage web applications and perform tasks such as deploying a web application from a WAR file, or starting and stopping installed web applications. A comprehensive documentation for the Manager App can be found on the Tomcat homepage.[11]. Here we only show how to start this application from the homepage of a running Tomcat installation. To access this application you can switch to the Manager App with a click on the corresponding button on the right side as shown in Figure 4. Before you are allowed to access this application, you need to provide credentials of a user associated with Tomcats’s manager-gui role. Listing 1. Tomcat Users configuration file \"tomcat-users.xml\". To get at user names and passwords you can open file tomcat-users.xml located in Tomcat’s conf directory. In this file the active users with their passwords and associated roles are stored. See Listing 1 for an example. From the content of this file, you see that user admin has password s3cret and possesses the necessary role manager-gui to access the Manager App. If file tomcat-users.xml does not contain any user with this role, you can simply add new user with this role to the existing users. Alternatively, you also can add the necessary role to an existing user. Just append a comma to the existing roles followed by the string manager-gui. You will need to restart your Tomcat application after adapting the content of file tomcat-users.xml. 1. Web application Archive (WAR): http://en.wikipedia.org/wiki/WAR_file_format_%28Sun%29 2. TLS: https://en.wikipedia.org/wiki/Transport_Layer_Security 3. Apache Tomcat Wikipedia: http://en.wikipedia.org/wiki/Apache_Tomcat. 4. Mulesoft’s introduction to Tomcat Catalina: http://www.mulesoft.com/tomcat-catalina. 5. Apache Tomcat Homepage: http://tomcat.apache.org/ 6. Tomcat 9 Downloads: http://tomcat.apache.org/download-90.cgi 7. Tomcat Windows setup: http://tomcat.apache.org/tomcat-9.0-doc/setup.html#Windows 8. Installing Tomcat on macOS: https://wolfpaulus.com/?s=tomcat 9. Tomcat Linux setup: http://tomcat.apache.org/tomcat-9.0-doc/setup.html#Unix_daemon 10. Apache Tomcat Tutorial: http://www.vogella.com/articles/ApacheTomcat/article.html 11. The Tomcat Manager Application: http://tomcat.apache.org/tomcat-9.0-doc/manager-howto.html.","title":"Build Scout App and Deploy to Tomcat","component":"scout-docs","version":"23.1","name":"deploy-to-tomcat","url":"/scout-docs/stable/getstarted/deploy-to-tomcat.html","titles":[{"text":"Verify the Container Security Settings","hash":"verify-the-container-security-settings","id":1},{"text":"Create and Install a Self-Signed Certificate","hash":"create-and-install-a-self-signed-certificate","id":2},{"text":"Update the Scout Application to work with HTTP","hash":"update-the-scout-application-to-work-with-http","id":3},{"text":"Create WAR Files","hash":"create-war-files","id":4},{"text":"Deploy to Tomcat","hash":"sec-helloworld_deploy","id":5},{"text":"Appendix A: Apache Tomcat Installation","hash":"apx-install_tomcat","id":6},{"text":"Platform Specific Instructions","hash":"platform-specific-instructions","id":7},{"text":"Directories and Files","hash":"apx-tomcat_dirs_and_files","id":8},{"text":"The Tomcat Manager Application","hash":"apx-tomcat_manager_app","id":9}]},"85":{"id":85,"text":"Eclipse Scout is a framework that can be used in several ways. Before you can start, you should decide which way you want to take. First of all, you need to decide which programming language you want to use for the user interface. Do you prefer Java or JavaScript? If you choose Java, your user interface code runs on a Java server. Scout takes care of sending your UI to the browser and displaying it. It also automatically directs the user interactions to the Java server and lets you process them. This approach is called Scout Classic. If you choose JavaScript, your user interface code runs in the browser. You still don’t work with HTML elements directly. Instead, you use the same widget model as a Scout Java developer without needing a Java server. This approach is called Scout JS. No matter what you choose, you can always adjust the existing widgets or write completely new widgets using HTML, CSS and JavaScript. In addition to the programming language, you should think about whether you want to go full stack (frontend, backend) or just focus on one tier. For example, you could use Scout JS on the frontend, Scout on the backend and a REST api for the communication. Or maybe you prefer to use an existing REST api and just want to use the powerful Scout widgets for the frontend. Or maybe you don’t need a backend at all because you plan to implement an offline app. Have you made your decision? Great! Then it’s now time to really get started. Depending on your decision regarding the programming language, we recommend that you start with one of the following tutorials. Both tutorials guide you through the installation process, and you will learn how to setup your first Scout Classic or Scout JS project. Hello Scout Classic Hello Scout JS Even though an IDE is not required to work with Scout it is recommended to use one because it makes your developer life easier. There are Scout plugins available for IntelliJ and Eclipse. For Scout Classic either one is fine. For Scout JS we recommend IntelliJ because the JavaScript support of Eclipse is very poor. Unfortunately, the IntelliJ Community Edition does not contain JavaScript support, so you would need IntelliJ Ultimate. There is a trial if you want to try it. You can also use Visual Studio code or any other IDE or editor but there are no official Scout plugins for these editors. All Scout artifacts are published on public repositories. The Scout Java packages are Maven modules and available on Maven Central. The Scout JavaScript packages are npm modules and available on npmjs. Just include these dependencies in your project and import the required Java or JavaScript classes. The Scout npm modules contain prebuilt scripts, stylesheets and other necessary resources in the dist folder. There are several CDNs out there that serve the content of all npm modules. A popular one is jsDelivr. Thanks to such CDNs you can easily download the prebuilt Scout assets or directly include them in your HTML files. https://www.jsdelivr.com/package/npm/@eclipse-scout/core?path=dist Even though this is a convenient way to get the Scout assets, we still recommend getting the artifacts via npm, because it gives you more control and flexibility to work with. If you want to learn more about using a CDN, please see Hello Scout for CDN.","title":"Get Started with Eclipse Scout","component":"scout-docs","version":"23.1","name":"getstarted","url":"/scout-docs/stable/getstarted/getstarted.html","titles":[{"text":"Choose Wisely","hash":"choose-wisely","id":1},{"text":"Installation","hash":"installation","id":2},{"text":"IDE","hash":"ide","id":3},{"text":"Artifacts","hash":"artifacts","id":4},{"text":"CDN","hash":"cdn","id":5}]},"86":{"id":86,"text":"A typical approach to work with Scout JS is to use a package manager (e.g. pnpm) to download the modules and a bundler (e.g. webpack) to build them. Thanks to the Scout CLI this task is straightforward. The main advantage is the simplified development process. You can use Less variables from Scout (e.g. the color palette). Individual source files can be imported directly which facilitates code completion. It also enables you to use modern code but still target older browsers by the usage of Babel. If you don’t need all that and just want to include Scout as a script in your html page (as in the early days), you can do so, too! This article shows how to achieve this. A live demo of the app we’ll create is published on CodePen. First, you need to get the prebuilt Scout assets like scripts, stylesheets, fonts etc. These assets are part of the Scout npm modules and located in the dist folder. To get them you can either install the Scout modules using a package manager and take the necessary resources from the dist folder. Or you could use a CDN and download them manually from there or even link to that CDN in your html files. In this example we are going to use a CDN directly. There are several CDNs out there that serve the content of all npm modules. Popular are jsDelivr or unpkg which we will use here. Using such a CDN you can easily access all Scout assets: @eclipse-scout/core/dist. Now let’s create a new html file called index.html and paste the following content: Hello Scout CDN (1) (3) (2) (2) (1) (4) 1 As you can see, we include the Scout assets, namely eclipse-scout-core-theme.css and eclipse-scout-core.js. 2 Additionally, we need to include all dependencies, which are jquery and sourcemapped-stacktrace.js. These are the dependencies listed in the package.json of @eclipse-scout/core. 3 Finally, we need to add an empty scout where the html content generated by Scout will be placed. 4 The script hello.js contains the code of our application. Now create a file called hello.js and paste the following code: class Desktop extends scout.Desktop { constructor() { super(); } _jsonModel() { return { objectType: 'Desktop', navigationHandleVisible: false, navigationVisible: false, headerVisible: false, views: [ { objectType: 'Form', displayHint: 'view', modal: false, rootGroupBox: { objectType: 'GroupBox', borderDecoration: scout.GroupBox.BorderDecoration.EMPTY, fields: [ { id: 'NameField', objectType: 'StringField', label: 'Name' }, { id: 'GreetButton', objectType: 'Button', label: 'Say Hello', keyStroke: 'enter', processButton: false } ] } } ] }; } _init(model) { super._init(model); this.widget('GreetButton').on('click', event => { let name = this.widget('NameField').value || 'stranger'; scout.MessageBoxes.openOk(this.session.desktop, `Hello ${name}!`); }); } } scout.addObjectFactories({ 'Desktop': () => new Desktop() }); new scout.App().init({ bootstrap: { textsUrl: 'https://unpkg.com/@eclipse-scout/core@{node-version}/dist/texts.json', localesUrl: 'https://unpkg.com/@eclipse-scout/core@{node-version}/dist/locales.json' } }); As you can see, there are no imports at the top. Instead, we are using the global variable scout, that is automatically put on the window object, to reference Scout classes. Furthermore, we have to include the texts.json. This file needs to be included to make sure the texts used by Scout can be resolved for the language the user is using. In this case it is necessary for the text Ok which is visible on the message box when you click the button. Optionally the locales.json from Scout can be imported so that the application knows about locale dependent formatting (e.g. for numbers or dates). That’s it. This is all you need to do to use Scout in a plain html site without the need of build tools. If you like you could adjust the example to use the dark theme by using eclipse-scout-core-theme-dark.css instead of eclipse-scout-core-theme.css. Or you could try to add a Chart by including the @eclipse-scout/chart module. The procedure is the same: link to the @eclipse-scout/chart assets (script, stylesheet, texts) and include its dependencies, that are referenced by its package.json. The result could look like this: Eclipse Scout Chart on CodePen. Have fun!","title":"Hello Scout JS with a CDN","component":"scout-docs","version":"23.1","name":"helloscout-cdn","url":"/scout-docs/stable/getstarted/helloscout-cdn.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Preparation","hash":"preparation","id":2},{"text":"Include Assets","hash":"include-assets","id":3},{"text":"Add your Code","hash":"add-your-code","id":4},{"text":"Summary","hash":"summary","id":5}]},"87":{"id":87,"text":"In this tutorial we will create a Scout JS application consisting of a JavaScript frontend connected using REST to a Java backend that stores the data in a database. If you don’t know what Scout JS is yet, please read the Get Started Guide first. We will create the application using IntelliJ. The generated application can display persons loaded from a database. These persons can be edited or deleted and new persons can be added. This section guides you through the installation of the tools required to start the Hello Scout JS Full Stack application. First, Node.js needs to be installed as Scout uses it to build web assets. So if you don’t have it yet, visit the Node.js download site, choose the package for your platform and install it on your local machine. Make sure the Node.js installation is on the PATH. You can verify it by using your command line: c:\\> node -v v18.12.1 Scout uses pnpm 7 as package manager. Therefore, install it into your Node installation by using your command line: npm install -g pnpm@7.16.0 and verify that it was installed successfully with: c:\\> pnpm -v 7.16.0 If you have no IntelliJ yet, you can download it from the JetBrains download site. We recommend selecting the Ultimate edition to have the JavaScript support included in the IDE. There is a 30-day trial if you have no licence. For this tutorial you can also use the free Community Edition, but it requires some extra steps indicated. Install or extract the package and start IntelliJ (see Run IntelliJ IDEA for the first time for instructions). Follow the instructions until the Welcome to IntelliJ IDEA screen is shown. On the left side switch to Plugins, search for Eclipse Scout and press the green Install button. In case a Third-Party Plugins Privacy Notice is shown, press Accept. The Scout plugin does not collect or process any personal data. Afterwards, the plugin is being downloaded from the JetBrains Marketplace and installed locally. As soon as this is completed, press the Restart IDE button. The same can also be achieved by navigating to File | Settings | Plugins in case you already have an existing IntelliJ project running. Congratulations! You have successfully set up IntelliJ IDEA for Scout development. Start your IntelliJ (if not already running) and in the Welcome to IntelliJ IDEA screen click on New Project. The New Project wizard starts. The same can also be achieved from the menu File | New | Project…​ if an existing project is open already. On the left side select the Scout type. You have to enter a Group Id, Artifact Id and a Display Name for your Scout project as shown in Figure 1. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). Figure 1. The new Scout project wizard. For the Hello Scout JS Full Stack application use helloscoutjs as the artifact id and ensure the user interface programming language is set to JavaScript as sown in Figure 1. You can keep the other default values. Then click the Next button. Figure 2. Specify name and location of the new project. On the second page please specify project name and location and press Finish. The Scout plugin then creates the initial project content for you (you will see some Maven build output). Wait until all tasks have completed. Afterwards, you will find the created Scout modules in the Project view as shown in Figure 3. Figure 3. The initial set of Maven modules created for the Hello Scout application. If the modules are not automatically created as indicated in Figure 3, right click on the root pom.xml and click Add as Maven Project. The Hello Scout JS Full Stack application’s backend accesses a local Derby database using jOOQ. For this to work, you first have to setup the local database. This is done be executing the database setup application. For this click the Add Configuration…​ menu on the top as shown in Figure 4. In the dialog, expand the Application type on the left side, select the prepared run configuration Setup local dev database and confirm with Ok. Then click on the green triangle symbol directly right of the Add Configuration…​ menu. This will launch the db setup application which creates a new Derby database in the helloscoutjs.app.dev/db folder. Figure 4. Selecting the db setup run configuration Now you are ready to start the Scout JS application. This includes downloading the necessary JavaScript dependencies, executing the Java and JavaScript builds and launching the Scout development server. It serves the JavaScript assets to the browser and acts as backend for the REST calls coming from the user interface. You could start each step separately, but for the sake of convenience, there is a compound run configuration available which performs all these tasks (IntelliJ Ultimate only, see below for instructions if using the Community Edition). To use it switch the run configuration by clicking the run configuration menu on the top again. Now there is no need to open the dialog as the available run configurations are shown in a dropdown menu. Select the launch all compound and run it using the green triangle button. The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites and check the IntelliJ settings in File | Settings | Languages & Frameworks | Node.js and NPM. The launch all compound uses JavaScript run configurations which are only available in IntelliJ Ultimate. If using the Community Edition, follow these instructions instead: Execute npm run pnpm-install on the command line in the root of your project (next to the pnpm-workspace.yaml) to install all JavaScript dependencies. Then execute npm run build:dev:watch in the helloscoutjs.app module to start the JavaScript build and watcher. The watcher keeps on running and will continuously update the JavaScript assets as you change your JavaScript source files (hot-code-replace). Finally start the run configuration Launch helloscoutjs dev server. Once the JS build has been completed (this may take a while for the first time as some dependencies need to be downloaded) and the server has been started, the Hello Scout JS Full Stack application can be accessed by navigating to http://localhost:8084/ in your favorite web browser. The Hello Scout JS Full Stack application is then presented as shown in Figure 5. Figure 5. The Hello Scout JS Full Stack application in the browser. To learn more about Scout JS, we recommend having a look at the other Scout JS Hello World tutorials and the Technical Guide. To see more example code of Scout JS, you should have a look at the Scout JS Widgets application and its source code. In case you should get stuck somewhere and need help, contact us on the Scout Forum or on Stack Overflow.","title":"Hello Scout JS Full Stack","component":"scout-docs","version":"23.1","name":"helloscout-js-fullstack","url":"/scout-docs/stable/getstarted/helloscout-js-fullstack.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Node.js","hash":"node-js","id":3},{"text":"Add pnpm","hash":"add-pnpm","id":4},{"text":"IntelliJ","hash":"intellij","id":5},{"text":"Create the Project","hash":"create-the-project","id":6},{"text":"What’s Next?","hash":"whats-next","id":7}]},"88":{"id":88,"text":"In this tutorial we will create your first Scout JS application. If you don’t know what Scout JS is yet, please read the Get Started Guide first. The application will simply show a text field and a button. Once the user enters some text and presses the button, the application displays a message box including that text. The application does not require Maven or Java, only Node.js. Also, the tutorial does not require any specific IDE. The goal of this tutorial is to provide a first impression of the Scout JS framework. We will start by getting the application running and then take a look at the code. Make sure you have Node.js 18 installed. Clone the helloscoutjs repository and checkout the branch releases/23.1. Alternatively, you can also download and extract a ZIP file of the repository. After that, the file and folder structure of your local copy should look like this (apart from a few more files): Listing 1. Files and folders of the application . │ package.json │ webpack.config.js │ ├───res │ index.html │ └───src │ helloworld.js │ helloworld.less │ ├───desktop │ Desktop.js │ DesktopModel.js │ └───greeting HelloForm.js HelloFormModel.js In the main folder, where the file package.json is located, open a terminal and execute npm install --ignore-scripts. This creates a folder node_modules, containing all (direct and transitive) dependencies, as well as a file package-lock.json, listing all the specific versions of these dependencies. If the dependencies defined in package.json change, run npm install again to update the node_modules folder. Now execute npm run build:dev. This creates a dist folder that contains the transpiled and bundled files to be served to the browser. Use npm run build:dev:watch to have these files automatically updated when the corresponding source files change. Use the same or start a new terminal in the main folder and execute npm run serve. This starts a little development server and opens the URL http://127.0.0.1:8080/ in your default browser. The server has live reload capability, that is, as soon as files in the dist folder change, the browser tab will reload automatically. Type some text in the field and press the button to test the application. Also check out how the layout changes when you narrow the browser window (or e.g. use Google Chrome’s DevTools to emulate a smaller device). Let’s now have a closer look at the files that were needed to build this application. In the main folder there are files containing information for the build, e.g. dependencies and entry points. In the subfolder res/ there are static resources that are just copied to dist/ in the build. And in the subfolder src/ you find the source files that are transformed and bundled by webpack. For npm commands like npm install or npm run , the file package.json provides the necessary information. Listing 2. package.json { \"scripts\": { \"build:dev\": \"scout-scripts build:dev\", \"build:dev:watch\": \"scout-scripts build:dev:watch\", \"serve\": \"live-server --mount=/:dist\" }, \"devDependencies\": { \"@eclipse-scout/cli\": \"^23.1.2\", \"live-server\": \"^1.2.2\" }, \"dependencies\": { \"@eclipse-scout/core\": \"^23.1.2\" } } The scripts define what npm run should execute. They work a bit like aliases in Bash. To have all needed files available at http://127.0.0.1:8080/, we need to mount the folder dist to the root path / when starting the development server. Modules defined in devDependencies and dependencies are downloaded to the node_modules folder on npm install. The dependency versions are prefixed with a ^ (caret), which means compatible version. That is, when running npm install, the newest version with the same major-level will be downloaded, unless another compatible version already exists in the node_modules folder or is already defined in the package-lock.json file. For more detailed and general information about package.json and package-lock.json, see the official documentation on Node.js: The package.json guide and The package-lock.json file. As defined in package.json, the script build:dev executes scout-scripts build:dev. scout-scripts is a command provided by the @eclipse-scout/cli module. With the build:dev argument, this command uses webpack to transform and bundle the source files and write the results to the dist folder. Scout provides a default webpack configuration which we use and adjust as follows. Listing 3. webpack.config.js const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { args.resDirArray = [ './res', './node_modules/@eclipse-scout/core/res', './node_modules/@eclipse-scout/core/dist/locales.json', './node_modules/@eclipse-scout/core/dist/texts.json' ]; const config = baseConfig(env, args); config.entry = { 'helloworld': './src/helloworld.js', 'helloworld-theme': './src/helloworld.less' }; return config; }; The args.resDirArray defines the files or folders with static resources to be copied to dist. In addition to the static resources of our application, we also need Scout’s static resources in node_modules/@eclipse-scout/core/. In config.entry, the entry points for bundling JavaScript and CSS files are defined. For our application, the target files helloworld.js and helloworld-theme.css (defined without the file extension) are generated from the source files src/helloworld.js and src/helloworld.less, respectively. The -theme suffix of the target CSS file is important for Scout’s post-processing to work properly. Also, make sure that you don’t use exactly the same name as for the target JS file. Other than that, you can name the target files whatever you want, just make sure you also adjust the references in index.html accordingly (see next section). For more details on the build, see Build Stack. For an HTML file to be valid (see The W3C Markup Validation Service), it has to define a DOCTYPE, a default language and a title. Furthermore, to allow for responsive web design, we include the viewport element. Listing 4. res/index.html Hello World The and elements include the CSS and JavaScript files generated by the build. The order of these elements is important. In particular, the element with the class \"scout\" has to be placed before the inclusion of the scripts, since it is used to build the final DOM for our application. The other file in our res/ folder, helloworld-texts.json, contains your own texts used in the application. Listing 5. src/helloworld.js import { scout, App } from '@eclipse-scout/core'; import { Desktop } from './desktop/Desktop' scout.addObjectFactories({ 'Desktop': () => new Desktop() }); new App().init({ bootstrap: { textsUrl: 'texts.json', localesUrl: 'locales.json' } }); In our main JavaScript file, we import the scout namespace object as well as the class App. Before we initialize an instance of the Scout application (passing the location of the text urls and the locales url) we do two other things: Use scout.addObjectFactories to register a function (identified by 'Desktop') that provides an instance of our Desktop class. The desktop is the main widget of a Scout application and the root of every other widget. On application initialization, Scout is using that factory to create the desktop of our application. Define our own namespace object, helloworld, and put our HelloForm class in it, so Scout can use it to build modular widgets at runtime (see DesktopModel.js). Listing 6. src/helloworld.less @import \"~@eclipse-scout/core/src/index\"; Since we don’t need any custom styling for our application, we just import Scout’s LESS module as is in our LESS file. To try out Scout’s dark theme, just import index-dark instead of index. We follow the best practice of separating model (layout, structure) and behavior code. This also makes it easier to e.g. reuse a form that should look similar elsewhere but behave differently. A typical model definition for a Scout widget defines an objectType. This is specified as a string containing the corresponding class, prefixed with the namespace in which it is accessible. Without a namespace prefix, the namespace scout is used as default. Other object properties are used to configure the widget based on the specified objectType. Listing 7. src/greeting/DesktopModel.js import {HelloForm} from \"../greeting/HelloForm\"; import {Desktop} from \"./Desktop\"; export default () => ({ objectType: Desktop, navigationHandleVisible: false, navigationVisible: false, headerVisible: false, views: [ { objectType: HelloForm } ] }); The default desktop consists of a navigation, a header and a bench. We only need the bench for our application, so we hide the other parts, including the handle to toggle the navigation. A desktop can contain outlines and/or views. We provide an instance of our HelloForm as a view on our desktop. Listing 8. src/greeting/Desktop.js import {Desktop as ScoutDesktop} from '@eclipse-scout/core'; import DesktopModel from './DesktopModel'; export class Desktop extends ScoutDesktop { _jsonModel() { return DesktopModel(); } } Our desktop doesn’t have any custom behavior, so we only import the DesktopModel here, in the _jsonModel() function. Listing 9. src/greeting/HelloFormModel.js import {Button, Form, GroupBox, StringField} from '@eclipse-scout/core'; export default () => ({ objectType: Form, displayHint: Form.DisplayHint.VIEW, modal: false, rootGroupBox: { objectType: GroupBox, borderDecoration: GroupBox.BorderDecoration.EMPTY, fields: [ { id: 'NameField', objectType: StringField, label: 'Name' }, { id: 'GreetButton', objectType: Button, label: 'Say Hello', keyStroke: 'enter', processButton: false } ] } }) Our form is defined to be non-modal and displayed as a view (rather than a dialog). It consists of a string field and a button. These are in a group box inside the form. We define an empty border decoration around this group box to have a little padding. The Enter key is defined as the keyboard shortcut for our button and we set processButton: false to place the button next to our field instead of above it. Listing 10. src/greeting/HelloForm.js import {Form, MessageBoxes} from '@eclipse-scout/core'; import HelloFormModel from './HelloFormModel'; export class HelloForm extends Form { _jsonModel() { return HelloFormModel(); } _init(model) { super._init(model); this.widget('GreetButton').on('click', event => { let name = this.widget('NameField').value || 'stranger'; MessageBoxes.openOk(this.session.desktop, `Hello ${name}!`); }); } } As in Desktop.js, we import the model but additionally add an event handler in the _init(model) function to implement the desired behavior when the button is clicked. To accomplish this, we can access our button and field by their respective id (see HelloFormModel.js). An OK message box with the desired text is displayed using the convenience class MessageBoxes from Scout. If you want to add the created application to a Git repository, it is recommended to exclude some files from the SCM. As a starting point, use the file you cloned/downloaded from the helloscoutjs repository. Listing 11. .gitignore # Git *.orig # Node node_modules/ dist/ test-results/ package-lock.json # Do not check in any log files *.log # IDEs .idea See the gitignore Documentation for details. Now that you have successfully created your first Scout JS application, you might want to learn more about Scout JS. If you are interested in adding a REST backend you should have a look at Hello Scout JS Full Stack Tutorial. To see more example code of Scout JS, we recommend looking at the Scout JS Widgets application and its source code. If you are interested in Scout’s concepts, architecture and features you probably want to have a look at the Technical Guide. In case you should get stuck somewhere and need help, contact us on the Scout Forum or on Stack Overflow. We wish you all the best on your journey with Scout.","title":"Hello Scout JS","component":"scout-docs","version":"23.1","name":"helloscout-js","url":"/scout-docs/stable/getstarted/helloscout-js.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Get the Code","hash":"get-the-code","id":3},{"text":"Build the Application","hash":"build-the-application","id":4},{"text":"Run the Application","hash":"run-the-application","id":5},{"text":"Understand the Code","hash":"understand-the-code","id":6},{"text":"Build Information","hash":"build-information","id":7},{"text":"npm","hash":"npm","id":8},{"text":"webpack","hash":"webpack","id":9},{"text":"Static Resources","hash":"static-resources","id":10},{"text":"Source Files","hash":"source-files","id":11},{"text":"Entry Points","hash":"entry-points","id":12},{"text":"Widgets","hash":"widgets","id":13},{"text":"Git configuration","hash":"git-configuration","id":14},{"text":"What’s Next?","hash":"whats-next","id":15}]},"89":{"id":89,"text":"In this tutorial we will create your first Scout Classic application. If you don’t know what Scout Classic is yet, please read the Get Started Guide first. We will create the application using Eclipse or IntelliJ. The generated application will consist of a client and server part and simply display a text sent from the server. This section guides you through the installation of the tools required to start the Hello Scout application. Currently there is IDE support for Scout application development for IntelliJ IDEA and Eclipse. Such an IDE is not required but makes the development much easier. This tutorial describes the setup for both IDEs. Please choose the one you prefer. First, Node.js needs to be installed as Scout uses it to build web assets. So if you don’t have it yet, visit the Node.js download site, choose the package for your platform and install it on your local machine. Make sure the Node.js installation is on the PATH. You can verify it by using your command line: c:\\> node -v v18.12.1 Scout uses pnpm 7 as package manager. Therefore, install it into your Node installation by using your command line: npm install -g pnpm@7.16.0 and verify that it was installed successfully with: c:\\> pnpm -v 7.16.0 If you have no IntelliJ yet, you can download it from the JetBrains download site. We recommend selecting the Ultimate edition to have the JavaScript support included in the IDE. There is a 30-day trial if you have no licence. For this tutorial you can also use the free Community Edition, but it requires some extra steps indicated. Install or extract the package and start IntelliJ (see Run IntelliJ IDEA for the first time for instructions). Follow the instructions until the Welcome to IntelliJ IDEA screen is shown. On the left side switch to Plugins, search for Eclipse Scout and press the green Install button. In case a Third-Party Plugins Privacy Notice is shown, press Accept. The Scout plugin does not collect or process any personal data. Afterwards, the plugin is being downloaded from the JetBrains Marketplace and installed locally. As soon as this is completed, press the Restart IDE button. The same can also be achieved by navigating to File | Settings | Plugins in case you already have an existing IntelliJ project running. Congratulations! You have successfully set up IntelliJ IDEA for Scout development. Then download the Eclipse IDE for Scout Developers package for your platform by visiting the official Eclipse download page. After the package selection, confirm the suggested mirror and extract the downloaded archive to your local disk. Congratulations! You have successfully installed Eclipse for Scout development. The Scout project creation depends on the IDE chosen. Therefore, please follow the instructions in the corresponding section below. Start your IntelliJ (if not already running) and in the Welcome to IntelliJ IDEA screen click on New Project. The New Project wizard starts. The same can also be achieved from the menu File | New | Project…​ if an existing project is open already. On the left side select the Scout type. You have to enter a Group Id, Artifact Id and a Display Name for your Scout project as shown in Figure 1. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). Figure 1. The new Scout project wizard. For the Hello Scout application just use the already pre-filled values and ensure the user interface programming language is set to Java as sown in Figure 1. Then click the Next button. Figure 2. Specify name and location of the new project. On the second page please specify project name and location and press Finish. The Scout plugin then creates the initial project content for you (you will see some Maven build output). Wait until all tasks have completed. Afterwards, you will find the created Scout modules in the Project view as shown in Figure 3. Figure 3. The initial set of Maven modules created for the Hello Scout application. If the modules are not automatically created as indicated in Figure 3, right click on the root pom.xml and click Add as Maven Project. Then you can start the Scout application for the first time. Since the Hello Scout app consists of a backend and a frontend, two servers need to be started. Before the frontend server can deliver any JavaScript code to the browser, the JavaScript build needs to be executed as well. You could start each run configuration separately, but for the sake of convenience there is a compound run configuration available which starts all at once. To start the launch configuration, use the Add Configuration…​ menu on the top as shown in Figure 4. In the dialog, expand the Compound type on the left side, select the prepared run configuration [webapp] all and confirm with Ok. Finally, click on the green triangle symbol directly right of the Add Configuration…​ menu. This will execute the Java build and start the Java frontend server and backend server afterwards. On IntelliJ Ultimate this will furthermore download all necessary JavaScript dependencies and execute the JavaScript build. If using the Community Edition, additionally execute the following commands on the command line manually: npm run pnpm-install in the root of your project (next to the pnpm-workspace.yaml) to install all JavaScript dependencies. npm run build:dev:watch in the helloscout.ui.html module to start the JavaScript build and watcher. The watcher keeps on running and will continuously update the JavaScript assets as you change your JavaScript source files (hot-code-replace). Figure 4. Selecting the compound run configuration The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites and check the IntelliJ settings in File | Settings | Languages & Frameworks | Node.js and NPM. Once the JS build has been completed (this may take a while for the first time as some dependencies need to be downloaded) and the two servers have been started, the Hello Scout application can be accessed by navigating to http://localhost:8082/ in your favorite web browser. The Hello Scout application is then presented as shown in Figure 5. Figure 5. The Hello Scout application in the browser. Start your Eclipse IDE and select an empty directory for your workspace as shown in Figure 6. This workspace directory will then hold all the project code for the Hello Scout application. Once the Eclipse IDE is running, it will show the Java perspective. Figure 6. Select a new empty folder to hold your project workspace To create a new Scout project, select the menu File New Project…​ and type Scout Project in the wizard search field. Select the Scout Project wizard and press Next. The New Scout Project wizard is then started as shown in Figure 7. Figure 7. The new Scout project wizard. In the New Scout Project wizard you have to enter a Group Id, Artifact Id and a Display Name for your Scout project. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). For the Hello Scout application just use the already pre-filled values and ensure the user interface programming language is set to Java as sown in Figure 7. Then click the Finish button to let the Scout SDK create the initial project code for you. Depending on your Eclipse installation, some Maven plugin connectors may initially be missing. In that case, a dialog as shown in Figure 8 appears. In order to resolve the selected connectors and continue, click on Finish. Afterwards, confirm the installation, accept the license and the message that some content has not been signed. Finally, the installation of the maven plugin connectors requires a restart of the Eclipse IDE. Figure 8. The Maven plugin connector installation dialog. After the New Scout Project wizard has created the Maven modules for the Hello Scout application, the code is compiled by the Eclipse IDE. You can see the created Maven modules in the Package Explorer as shown in Figure 9. Figure 9. The initial set of Maven modules created for the Hello Scout application. After the compilation, you can start the Scout application for the first time. Since the Hello Scout app consists of a backend and a frontend, two servers need to be started. Before the frontend server can deliver any JavaScript code to the browser, the JavaScript build needs to be executed as well. You could start each launch configuration separately, but for the sake of convenience there is a launch group available which starts all at once. To start the launch group use the Run As menu as shown in Figure 10. Figure 10. Starting the Hello Scout application. The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites. Once the JS build has been completed successfully, the frontend and backend servers will be started automatically. The servers are ready as soon as the console shows Server ready. You can now access the Hello Scout application by navigating to http://localhost:8082/ in your favorite web browser. The Hello Scout application is then presented as shown in Figure 11. Figure 11. The Hello Scout application in the browser. Congratulations! You have successfully created your first Scout Classic application. To gain experience working with Scout, we recommend going through the One Day Tutorial. If you are interested in Scout’s concepts, architecture and features you probably want to have a look at the Technical Guide. In case you should get stuck somewhere and need help, contact us on the Scout Forum or on Stack Overflow. We wish you all the best on your journey with Scout.","title":"Hello Scout Classic","component":"scout-docs","version":"23.1","name":"helloscout","url":"/scout-docs/stable/getstarted/helloscout.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Node.js","hash":"node-js","id":3},{"text":"Add pnpm","hash":"add-pnpm","id":4},{"text":"IntelliJ","hash":"intellij","id":5},{"text":"Eclipse","hash":"eclipse","id":6},{"text":"Create a Scout Project","hash":"create-a-scout-project","id":7},{"text":"IntelliJ","hash":"intellij-2","id":8},{"text":"Eclipse","hash":"eclipse-2","id":9},{"text":"What’s Next?","hash":"whats-next","id":10}]},"90":{"id":90,"text":"In this tutorial we will create the “Contacts” Scout application. The goal of this application is to learn about the most prominent features of the Eclipse Scout framework using a fully functional application. The application is kept small enough to complete this tutorial within less than a day. An extended version of “Contacts” is available as a Scout sample application on Github. For this tutorial you can use IntelliJ or Eclipse IDE with installed Scout SDK plugins. If you have successfully completed the Hello Scout Tutorial you should have a running Eclipse Scout installation. If not, then you should do the Hello Scout Tutorial now. The “One Day Tutorial” is organized as follows. In the first section, the finished “Contacts” application is explained from the user perspective. The remaining sections focus on the individual steps to implement the “Contacts” tutorial application. The “Contacts” demo application is a client server application to manage personal contacts, organizations and events. The persistence of entered data is achieved via simple JDBC access to a Derby database. It is recommended that you first import the full “Contacts” demo application into a separate workspace. This gives you the possibility to check your source code against the full implementation during the various steps of the tutorial. To do so, just clone the Scout demo repository and import it into your IDE. git clone https://github.com/bsi-software/org.eclipse.scout.docs.git Alternatively, you can also view the source code of the “Contacts” demo application on Github. Figure 1. The “Contacts” application with the person page. The “Contacts” application shows the basic user interface layout of a typical Scout application. The main areas of this layout are briefly introduced below. Outline Button In Figure 1 the top left area shows a folder icon that represents the \"Contacts\" outline. The small down arrow at the folder icon indicates that additional outlines are available when clicking on this view button. On the right of the button with the folder icon is a second outline button that activates a search outline (not implemented yet). Navigation Tree The navigation tree on the left side of the layout shows the pages that are available for the selected outline. For the \"Contacts\" outline, the navigation tree provides access to the pages \"Persons\", \"Organizations\" and \"Events\". Selecting a page then shows associated information on the right side in the bench area. In the case of the selected \"Persons\" page the bench area shows a list of persons in the form of a table. Header The header area is located at the top and holds the available top level menus. In this example these are the \"Quick access\", \"Options\" menu points as well as a user menu that shows the username of the currently logged in user \"mzi\". Bench The bench represents the main display area of a Scout application. When selecting the \"Persons\" page, a table provides access to all available persons as shown in Figure 1. Selecting a specific person provides access to all actions that are available for the selected person. The selected person can then be opened with the Edit menu which opens the person in a view that is displayed in the bench area again as shown in Figure 2. For entering and editing of data in Scout applications views are used in most cases. Views are displayed in the bench area of a Scout application. Several views can also be opened simultaneously. To show a specific view the user has to click on the view button associated with the desired view. An example of an opened view is shown for person \"Verónica\" in Figure 2. Figure 2. The “Contacts” application with a person opened in a form. This tutorial walks you through the implementation of a Scout application consisting of a frontend and a backend application. The frontend application contains outlines with navigation trees, pages to present information in tabular form, and forms to view and edit data. In the backend application the tutorial shows how to implement services, logging, database access, and several other aspects of Scout applications. The tutorial is organized as a sequence of consecutive steps as listed below. Each step is described in a individual section that results in a executable application that can be tested and compared against the full \"Contacts\" demo application. Step 1: Setting up the Initial Project (Setting up the Initial Project) We will create a new project and prepare the generated code base by adapting existing components and deleting unnecessary components. At the end of step one we have a project setup that allows us to start adding new components to the application. Step 2: Adding the Person and Organization Page (Adding the Person and Organization Page) The second step adds the user interface components to display persons and organizations. For this a \"Persons\" page and an \"Organizations\" page are created and added to the \"Contacts\" outline as shown in Figure 1. Step 3: Creating and Accessing the Database (Creating and Accessing the Database) This step concentrates on the backend of the \"Contacts\" application. The covered topics include dealing with application properties, setup and access of a database and using the database to provide data for the person and organization page created in the previous step. Step 4: Adding a Form to Create/Edit Persons (Adding a Form to Create/Edit Persons) After having access to the database the components that allow a user to create and edit persons and organizations in the user interface of the \"Contacts\" application can be added. In addition, this tutorial step also demonstrates how to design and implement complex form layouts with the Scout framework. Step 5: Form Field Validation and Template Fields (Form Field Validation and Template Fields) This step provides an introduction into form field validation and the creation of template fields. Validation of user input is important for many business applications and template fields help to improve code quality with a mechanism to reuse application specific user interface components. Step 6: Adding the Company Form (Adding the Company Form) We create the organization form to create and enter organizations in the \"Contacts\" application. As we can reuse many of the components developed so far this is the shortest tutorial step. Step 7: Linking Organizations and Persons (Linking Organizations and Persons) In this step we modify the user interface to implement a 1:n relationship between organizations and persons. This includes the creation of a hierarchical page structure for organization, adding an organization column to the person page and adding an organization field to the person form to manage the association of a person to an organization. This section deals with setting up the initial workspace and code base for the \"Contacts\" application. The creation up of the initial project setup consists of the tasks listed below. Creating the initial Codebase (Creating the initial Codebase) Removing unnecessary Components (Removing unnecessary Components) Changes to Class WorkOutline (Changes to Class WorkOutline) Changes to Class Desktop (Changes to Class Desktop) This first step of the \"Contacts\" tutorial ends with a review of the results of this first tutorial step in What have we achieved?. If you are using Eclipse and your workspace contains modules from the “Hello World” tutorial, you may want to multi-select them and to either close them by invoking the context menu “Close Projects” or to delete them by invoking the context menu “Delete”. The initial code for the “Contacts” application is then generated using the New Scout Project wizard. For the wizard fields you may use the values below and as shown in Figure 3 (IntelliJ) and Figure 4 (Eclipse). Group Id: org.eclipse.scout Artifact Id: contacts Display Name: \"Contacts Application\" Figure 3. The creation of the initial \"Contacts\" application in IntelliJ. Figure 4. The creation of the initial \"Contacts\" application in Eclipse. To create this initial application click on Next/Finish. The project wizard then creates a number of Maven modules as shown in Figure 5 (IntelliJ) and Figure 6 (Eclipse). Figure 5. The package explorer with the initial Maven modules created for the \"Contacts\" application in IntelliJ. Figure 6. The package explorer with the initial Maven modules created for the \"Contacts\" application in Eclipse. We start with removing the *.helloworld and \\*.settings packages in all Maven modules of the \"Contacts\" application. To delete packages, first select an individual package or packages in the package explorer as shown in Figure 6 (IntelliJ) and Figure 6 (Eclipse) and then hit the Delete key. The packages to delete is provided per Maven module in the list below. Client Module contacts.client In folder src/main/java Delete package org.eclipse.scout.contacts.client.helloworld Delete package org.eclipse.scout.contacts.client.settings In folder src/test/java Delete package org.eclipse.scout.contacts.client.helloworld Server Module contacts.server In folder src/main/java Delete package org.eclipse.scout.contacts.server.helloworld In folder src/test/java Delete package org.eclipse.scout.contacts.server.helloworld Shared Module contacts.shared In folder src/main/java Delete package org.eclipse.scout.contacts.shared.helloworld In folder src/generated/java Delete package org.eclipse.scout.contacts.shared.helloworld The deletion of these outlines results in a number of compile errors in classes WorkOutline and Desktop. All these errors will be resolved in the following two sections where we modify the two classes to our needs. Instead of adding a new \"Contacts\" outline to the application we reuse the generated code and rename the \"Work\" outline into \"Contacts\" outline. For this, we perform the following modifications to class WorkOutline. Rename the class package to org.eclipse.scout.contacts.client.contact Rename the class to ContactOutline Change the outline title to \"Contacts\" Change the outline icon to Icons.Folder To quickly find the class WorkOutline we first open the Open Type dialog by hitting Ctrl+Shift+N in IntelliJ or Ctrl+Shift+T in Eclipse and enter \"workoutline\" into the search field as shown in Figure 7 (IntelliJ) and Figure 8 (Eclipse). In the result list, we select the desired class and click the OK button to open the file WorkOutline.java in the Java editor of your IDE. Figure 7. Use the Open Type dialog to quickly find java types in IntelliJ. Figure 8. Use the Open Type dialog to quickly find java types in Eclipse. We start with the package rename. To rename the package org.eclipse.scout.contacts.client.work to org.eclipse.scout.contacts.client.contact click into the word \"work\" of the package name and hit Shift+F6 (Eclipse: Alt+Shift+R). This opens the package rename dialog as shown in Figure 9 (IntelliJ) and Figure 10 (Eclipse), where we replace \"work\" by \"contact\" in the New name field. After pressing the Ok button your IDE informs the programmer that the code modification may not be accurate as the resource has compile errors. This warning can be acknowledged by clicking Continue. Figure 9. Use the IntelliJ Rename Package dialog to rename a Java package in IntelliJ. Figure 10. Use the Eclipse Rename Package dialog to rename a Java package in Eclipse. In next step we rename class WorkOutline to ContactOutline. In the Java editor we can rename the class by clicking into the class identifier WorkOutline and hitting Shift+F6 (Eclipse: Alt+Shift+R). Inside the edit box we can then change the class name to ContactOutline and hit the Enter key to execute the change. If your IDE shows a Rename Type dialog just hit button Continue to complete the rename operation. To get rid of the compile error in method execCreateChildPages we simply delete the content in the method body. Next, we change the outline title in method getConfiguredTitle. Replace the string \"Work\" with \"Contacts\". Set the cursor at the end of the word \"Contacts\" and hit Ctrl+Space. For Eclipse: Double-click on the proposal New text…​ to open the Scout new entry wizard as shown in Figure 12 and Figure 13. Enter the text \"Contacts\" as shown in Figure 11 (IntelliJ) and Figure 13 (Eclipse) and click Ok. Figure 11. Use the Scout new entry wizard to add translated texts to the application in IntelliJ. Figure 12. Use the Scout content assist to add new translations. Figure 13. Use the Scout new entry wizard to add translated texts to the application in Eclipse. As the last modification we change the return value of method getConfiguredIconId to value Icons.Folder and end with the code shown in Listing 1. In IntelliJ, the import for the Icons class should be added automatically. If not, check your settings for auto import or use Alt enter to import it manually. In Eclipse, you can use Ctrl+Shift+O to add the imports manually. Listing 1. Initial implementation of class ContactOutline. @ClassId(\"303c0267-3c99-4736-a7f5-3097c5e011b6\") public class ContactOutline extends AbstractOutline { @Override protected void execCreateChildPages(List> pageList) { } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Contacts\"); } @Override protected String getConfiguredIconId() { return Icons.Folder; } } The second class to adapt for the \"Contacts\" application is the Desktop class. This class is implemented exactly once in each Scout application and holds the available outlines and top level menus of the application in the form of inner classes. For the \"Contacts\" application we adapt the initial implementation to have outline view buttons for the \"Contacts\" and \"Search\" outlines. The top level menus are then adapted to hold the menus \"Quick Access\", \"Options\" and a menu for the logged in user. Start with opening the class in the Java editor using Ctrl+Shift+N (Eclipse: Ctrl+Shift+T) to quickly access the class. In the source code of method getConfiguredOutlines remove SettingsOutline.class from the list of return values as shown in Listing 2. Listing 2. Method getConfiguredOutlines defines the outlines associated with the desktop of the application. @Override protected List> getConfiguredOutlines() { return CollectionUtility.> arrayList(ContactOutline.class, SearchOutline.class); } Then, perform the following changes in class Desktop Delete the inner class SettingOutlineViewButton Delete the inner class UserProfileMenu. Rename inner class WorkOutlineViewButton to ContactOutlineViewButton Create a new inner class called QuickAccessMenu after the SearchOutlineViewButton. For this navigate the cursor after the SearchOutlineViewButton class, press Ctrl+Space and select the Menu entry. Adapt the created code until it matches the template as shown in Listing 3. Note that in your implementation, the menu should extend AbstractMenu instead of AbstractFormMenu in contrast to what is shown in Listing 3. As a consequence, the method getConfiguredForm from Listing 3 is obsolete. Create another menu called OptionsMenu right after the newly created QuickAccessMenu according to Listing 3. Create a last menu called UserMenu after the OptionsMenu according to Listing 3. Delete the method onThemeChanged. Remove the statement in the body of the constructor. Note that it is not necessary to organize the imports since you have registered the organization of imports as a save action earlier in this tutorial. At the end of these changes the inner class structure of class Desktop will look similar to the sample shown in Listing 3. Listing 3. Structure of class Desktop with outline buttons and top level menus. @ClassId(\"70eda4c8-5aed-4e61-85b4-6098edad8416\") public class Desktop extends AbstractDesktop { // outline buttons of the application @Order(1) @ClassId(\"9405937b-66e8-491a-831d-69adca724b90\") public class ContactOutlineViewButton extends AbstractOutlineViewButton { } @Order(2) @ClassId(\"55febc84-ad6d-4ee8-9963-d1d40169a63a\") public class SearchOutlineViewButton extends AbstractOutlineViewButton { } // top level menus for the header area of the application @Order(10) @ClassId(\"50df7a9d-dd3c-40a3-abc4-4619eff8d841\") public class QuickAccessMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"QuickAccess\"); } } @Order(20) @ClassId(\"4fce42bf-85f9-4892-96a2-2e89e18eeaee\") public class OptionsMenu extends AbstractFormMenu { (1) @Override protected String getConfiguredText() { return TEXTS.get(\"Options\"); } @Override protected String getConfiguredIconId() { return Icons.Gear; } @Override protected Class getConfiguredForm() { return OptionsForm.class; } } @Order(30) @ClassId(\"8dbfbe9d-0382-471a-ae43-3178f7a9e720\") public class UserMenu extends AbstractFormMenu { (2) @Override protected String getConfiguredIconId() { return Icons.PersonSolid; } @Override protected String getConfiguredCssClass() { return \"profile-menu\"; } @Override protected Class getConfiguredForm() { return UserForm.class; } } } 1 In your implementation OptionsMenu should extend AbstractMenu and the method getConfiguredForm should be deleted. 2 In your implementation UserMenu should extend AbstractMenu and the method getConfiguredForm should be deleted. In the first step of the \"Contacts\" tutorial we have created the initial project setup that will serve as the basis for all the following tutorial steps. As the \"Contacts\" application is in a clean state you can now test the application using the following steps. The user interface of the application will now look as shown in Figure 14. Activate the launch group [webapp] all to start the JS build, the frontend and the backend Open address http://localhost:8082/ in your browser Figure 14. The \"Contacts\" application at the end of tutorial step 1. From the coding perspective we now have all necessary maven Modules for the \"Contacts\" application including Java package and class names to match with the complete Scout \"Contacts\" demo application. This point is important as it simplifies the comparison of intermediate stages of the tutorial application with the Scout demo application. The same is true for the user perspective: The layout of the current state of the tutorial matches with the complete \"Contacts\" sample application. In the second step of the Scout tutorial the components to display persons and organizations are added to the \"Contacts\" outline of the user interface of the Scout application. Specifically, a \"Persons\" page and an \"Organizations\" page are created and added to the navigation tree of the \"Contacts\" outline. Database access and populating the pages with actual data from the database is not part of this section but will be covered in the next tutorial step (Creating and Accessing the Database). The addition of the \"Persons\" page is described in detail in the sections listed below. Creating additional Packages (Creating additional Packages) Creating the Country Lookup Call (Creating the Country Lookup Call) Creating the Person Page (Creating the Person Page) Adding Table Columns to the Page (Adding Table Columns to the Page) Link the Person Page to the Contacts Outline (Link the Person Page to the Contacts Outline) The addition of the company page is described in Adding the Company Page. Finally, the state of the \"Contacts\" application is summarized in What have we achieved?. A substantial part of the \"Contacts\" application deals with persons. In addition to the \"Persons\" page we will also add a Scout form to enter/edit persons in a later tutorial step. For the \"Contacts\" application we use this fact to justify the addition of a specific Java package that will hold all classes related to persons. This person package can be created with the following steps. Open the \"Contacts\" Maven module contacts.client in the Eclipse Package Explorer Select the Java package org.eclipse.scout.contacts.client in folder src/main/java For IntelliJ: Create a package by right-clicking on the Java package and selecting New → Package as shown in Figure 15 Enter org.eclipse.scout.contacts.client.person and press Enter as shown in Figure 16. For Eclipse: Press Ctrl+N, enter \"package\" into the search field and select the Package wizard in the proposal box and click Next Press Finish as shown in Figure 17. Figure 15. Create the person package in IntelliJ. Figure 16. Add the person package to the \"Contacts\" application in IntelliJ. Figure 17. Add the person package to the \"Contacts\" application in Eclipse. We will also need a separate package for organizations and some common elements. Add package org.eclipse.scout.contacts.client.organization Add package org.eclipse.scout.contacts.client.common The pages for the persons and the organizations will also display country information. To display country names we will be using a special column, that maps the country codes received from the backend application to translated country names. As the Java class Locale already contains both country codes and country names we can take advantage of this class and use it in a Scout local lookup call. In package org.eclipse.scout.contacts.client.common create a new class CountryLookupCall according to the implementation provided in Listing 4. Listing 4. The Scout lookup call for countries. This lookup call will be used for the address field. @ClassId(\"37736ea5-e861-43d8-a6bc-144dad3c208f\") public class CountryLookupCall extends LocalLookupCall { (1) private static final long serialVersionUID = 1L; @Override protected List> execCreateLookupRows() { (2) List> rows = new ArrayList<>(); for (String countryCode : Locale.getISOCountries()) { Locale country = new Locale(\"\", countryCode); rows.add(new LookupRow<>(countryCode, country.getDisplayCountry())); (3) } return rows; } } 1 Makes the CountryLookupCall to work with key type String 2 Defines the set of lookup rows to be used 3 Add a row with the country code as key and the country name as display value In this section we create the Scout page that will be used to list all entered persons to the user of the \"Contacts\" application. Out-of-the box this page will support the sorting and filtering of all the persons. This \"Persons\" page is then added to the navigation tree below the \"Contacts\" outline. We can now add the Scout person page as described below. Select the newly created package org.eclipse.scout.contacts.client.person in the Package Explorer For IntelliJ Create a new Scout page by right-clicking on the package and selecting New → Scout Element → Page as shown in Figure 18 For Eclipse Press Ctrl+N, enter \"scout page\" into the search field and select the Scout Page wizard in the proposal box and click [button]. Un-check the Create an Abstract Super Page option, as we don’t need an additional abstract super class for our new page. Enter PersonTablePage as the class name and click Finish as shown in Figure 20 Figure 18. Create the person page in IntelliJ. Figure 19. Add the person page to the \"Contacts\" application in IntelliJ. Figure 20. Add the person page to the \"Contacts\" application in Eclipse. The Scout New Page Wizard then creates an initial implementation for the PersonTablePage class very similar to the listing provided in Listing 5 below. Listing 5. Initial implementation of class PersonTablePage. @PageData(PersonTablePageData.class) @ClassId(\"23c10251-66b1-4bd6-a9d7-93c7d1aedede\") public class PersonTablePage extends AbstractPageWithTable { @Override protected String getConfiguredTitle() { return TEXTS.get(\"Persons\"); (1) } @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IPersonService.class) .getPersonTableData(filter, getOrganizationId())); (2) } @Override (3) protected boolean getConfiguredLeaf() { return true; } @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { // container class to hold columns and other elements for this table page (4) } } Before we start to add the columns to the table of the page we need to do some minor adaptations to Listing 5. 1 Specify the title \"Persons\" for the page using the Scout NLS tooling. 2 You don’t need to update method execLoadData to match this listing for now. 3 Add method getConfiguredLeaf to specify that the person page will not have any child pages. 4 We will add the columns in the next section of this tutorial. We are now ready to populate the inner class Table of the person page with the columns to display various person attributes. Table pages are an important UI element of Scout applications as they frequently play a central role in the interactions of a user with the application. Out of the box table pages offer powerful options to sort, filter and re-arrange the data contained in the table. This functionality offers a good starting point to decide which columns to add to a table page. To decide about the columns to add the following criteria have been useful in practice. Unique identifier of an element Attributes that are most frequently used in searches Category attributes that are useful for filtering Fewer columns are better As the visible data of all users is held in the memory of the frontend server it is good practice to keep the number of columns as low as possible. Not taking this advice into account can substantially increase the memory footprint of the frontend server in production. For the person page of the \"Contacts\" application we will add the following columns. PersonId: Hidden attribute of type string to hold the person key. Class name: PersonIdColumn First Name: String column. Class name: FirstNameColumn Last Name String column. Class name: LastNameColumn City: String column. Class name: CityColumn Country: Smart column. Class name: CountryColumn Phone: String column, not visible per default. Class name: PhoneColumn Mobile Phone: String column, not visible per default. Class name: MobileColumn Email: String column, not visible per default. Class name: EmailColumn Organization: String column, not visible per default. Class name: OrganizationColumn Make sure to use column class names exactly as indicated above. Working with different names is possible but requires additional work later in the tutorial when the data retrieved from the database is mapped to these column class names. To add the first column PersonIdColumn we open class PersonTablePage in the Java editor and place the cursor inside of the body of the inner Table class. We then open the Scout content assist with Ctrl+Space and select the Column proposal as shown in Figure 21 (IntelliJ) and Figure 22 (Eclipse). Figure 21. Adding a column to the person page table in IntelliJ. Figure 22. Adding a column to the person page table in Eclipse. In the first edit box we type \"PersonId\" as shown in Figure 23 (IntelliJ) and Figure 24 (Eclipse) and press Enter. Figure 23. Adding a column to the person page table in IntelliJ. Figure 24. Adding a column to the person page table in Eclipse. To configure this column as an invisible primary key we modify the newly created column class according to Listing 6. Listing 6. Implementation of the person primary key column PersonIdColumn. @Order(1) @ClassId(\"1cbc9059-caef-4684-b013-bfa3bc0d0642\") public class PersonIdColumn extends AbstractStringColumn { @Override (1) protected boolean getConfiguredDisplayable() { return false; } @Override (2) protected boolean getConfiguredPrimaryKey() { return true; } } 1 Returning false here makes this column invisible. As this column will be excluded from the table control the user is not aware of the existence of this column. 2 Returning true marks this attibute as a primary key (or part of a primary key) We can now add the additional columns FirstNameColumn, LastNameColumn, CityColumn below. After entering the class name press Tab twice to move the cursor to the label text of the field. In the case of the first name enter \"FirstName\" and hit Ctrl+Space to open the wizard to add the translated text \"First Name\". For these three columns the default implementation is fine and does not need any adaptations. Listing 7 below provides an example for this type of columns. Listing 7. Implementation of the first name column. @Order(2) @ClassId(\"99df594a-6731-4757-a799-aacdbb4788d3\") public class FirstNameColumn extends AbstractStringColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"FirstName\"); } @Override protected int getConfiguredWidth() { return 120; } } For column CountryColumn we will use a smart column. We again use Ctrl+Space to open the wizard and enter \"Country\" for the class name box and press Tab once and select AbstractSmartColumn as column type. Next we press Tab again to enter \"Country\" as the translated text. In the created class CountryColumn we need to add the generic type parameter to the super class declaration (AbstractSmartColumn) and add the method getConfiguredLookupCall according to Listing 8. Listing 8. Implementation of the country smart column. @Order(5) @ClassId(\"a39ad408-b5e5-4794-b86a-ddc13025862e\") public class CountryColumn extends AbstractSmartColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"Country\"); } @Override protected int getConfiguredWidth() { return 120; } @Override (1) protected Class> getConfiguredLookupCall() { return CountryLookupCall.class; } } 1 The configured lookup call is used to map country codes to the country names used in the user interface. After the country column we add the four columns PhoneColumn, MobileColumn, EmailColumn and OrganizationColumn that are initially not visible in the user interface. As an example for such a column Listing 9 is provided below. Listing 9. Implementation of the (initially invisible) phone column. @Order(6) @ClassId(\"fa879506-d38c-46a6-990c-1f1ae4b74d4e\") public class PhoneColumn extends AbstractStringColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"Phone\"); } @Override (1) protected boolean getConfiguredVisible() { return false; } @Override protected int getConfiguredWidth() { return 120; } } 1 Returning false hides the column initially. Using the table control the user can then make this column visible in the user interface. Use the content assist to efficiently add method getConfiguredVisible. Place the cursor after method getConfiguredHeaderText, type \"getConVis\" and hit Ctrl+Space and the method is inserted for you. We have now created a person page with corresponding table columns. However, this new UI component is not yet visible in the user interface. What is missing is the link from the application’s contacts outline class to the newly created PersonTablePage class. This is what we will do in the following section. In this section we add the person page to the contacts outline created during the initial project setup of the first step of this tutorial. This will make the person page visible in the navigation area below the \"Contacts\" outline. For this we have to add a single line of code to method execCreateChildPages of class ContactOutline according to Listing 10 Listing 10. Adding the PersonTable to the ContactOutline. @Override protected void execCreateChildPages(List> pageList) { // pages to be shown in the navigation area of this outline pageList.add(new PersonTablePage()); (1) } 1 A new instance of the PersonTable is added to this outline. This makes the person page visible in the navigation area below the contacts outline. The application is now in a state where we can restart the backend and the frontend server to verify our changes in the user interface. This section creates and adds a table page for organization to the \"Contacts\" outline. To create an organizations page the same steps are required as for the creation of the person page. The description is therefore kept on a higher level and in the text below only the main steps are described. Where appropriate, pointers are provided to the detailed descriptions for the creation of the person page. Add page OrganizationTablePage with title \"Organizations\" using the Scout new page wizard Listing 11. Initial implementation of class OrganizationTablePage. @PageData(OrganizationTablePageData.class) @ClassId(\"18f7a78e-0dd0-4e4e-9234-99892bb4459f\") public class OrganizationTablePage extends AbstractPageWithTable { @Override protected String getConfiguredTitle() { return TEXTS.get(\"Organizations\"); (1) } @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IOrganizationService.class).getOrganizationTableData(filter)); } @ClassId(\"54f3d730-7a62-462b-99ec-78fd1e6bb69d\") public class Table extends AbstractTable { // container class to hold columns and other elements for this table page } } 1 Make sure to add a translated text entry for \"Organizations\" using the Scout NLS tooling The implementation of class OrganizationTablePage using the Scout new page wizard then looks as shown in Listing 11. As in the case of the person page you can now add the columns for the inner Table class. For the organization page add the columns according to the specification provided below. OrganizationId: Hidden attribute of type string to hold the organization key. Class name: OrganizationIdColumn Name: String column. Class name: NameColumn City: String column. Class name: CityColumn Country: Smart column. Class name: CountryColumn Homepage: String column, not visible per default. Class name: HomepageColumn As in the case of the person page we have to add the newly created class OrganizationTablePage in method execCreateChildPages of the outline class ContactOutline as shown in Listing 12. Listing 12. Adding the OrganizationTablePage to the ContactOutline. @Override protected void execCreateChildPages(List> pageList) { // pages to be shown in the navigation area of this outline pageList.add(new PersonTablePage()); (1) pageList.add(new OrganizationTablePage()); } 1 The pages will appear in the user interface according to the order in which they are added to the outline. In the second step of the \"Contacts\" tutorial we have created a person page and an organization page to display data of persons and organizations. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the user interface in your browser. The user interface should look like the screenshot provided in Figure 25. Figure 25. The \"Contacts\" application with the person and organization pages at the end of tutorial step 2. When comparing the state of the \"Contacts\" tutorial application with the Scout demo application in Figure 1 the main difference is the missing person data. Adding access to a database is the focus of the next tutorial step. This tutorial step shows how Scout applications can interact with databases via JDBC. Due to the clean layering implemented in the \"Contacts\" application only the Scout backend server connects to the database. We therefore focus on the Scout backend in this part of the tutorial. For the \"Contacts\" application we will work with a Derby database. The choice of Derby is based on the fact that no additional installation is required and it is possible to work with in-memory databases. We start this tutorial step with copying the classes that handle the database creation/access from the full \"Contacts\" demo application as described in Adding the Infrastructure. The setup is then explained in the following sections. Scout Config Properties (Scout Config Properties) The SQL Service and SQL Statements (The SQL Service and SQL Statements) The Database Setup Service (The Database Setup Service) With the basic infrastructure in place we review the existing \"Contacts\" backend to answer the question What is missing?. In Fetching Organization and Person Data we then add the missing pieces. At the end of this tutorial step the \"Contacts\" backend server provides person and organization data to the frontend server as summarized in What have we achieved?. This section describes the installation of the necessary components and classes that handle the database creation/access of the \"Contacts\" application. To add the support for the Scout JDBC components and the Derby database we first need to declare the corresponding dependencies in the pom.xml file of the Maven server module. This can be done using the following steps. Expanding the Maven module contacts.server in the Eclipse Package Explorer Open the pom.xml file (use a double click on the file in the package explorer) and switch to the \"pom.xml\" tab in the Maven POM Editor. Add the database related dependencies according to Listing 13 Listing 13. The additional dependencies needed in the server pom.xml to use the derby database 4.0.0 org.eclipse.scout.contacts org.eclipse.scout.contacts 23.1-SNAPSHOT ../org.eclipse.scout.contacts org.eclipse.scout.contacts.server (1) org.eclipse.scout.rt org.eclipse.scout.rt.server.jdbc org.apache.derby derby 10.15.2.0 org.apache.derby derbytools 10.15.2.0 1 Add the derby and the org.eclipse.scout.rt.server.jdbc dependencies to the pom.xml of your \"Contacts\" server module. After adding the database dependencies to the server’s pom.xml file we need to update all Maven server modules for the \"Contacts\" app. To do this: For IntelliJ, press the Maven button on the right side as shown in Figure 26 to open up the Maven modules and then press the refresh button on the left side as shown in Figure 27. For Eclipse, select the three modules org.eclipse.scout.contacts.server.* and hit Alt+F5 as shown in Figure 28 and start the update with OK. Figure 26. Locate the Maven server modules in IntelliJ. Figure 27. Update the Maven server modules for the \"Contacts\" application in IntelliJ. Figure 28. Update the Maven server modules for the \"Contacts\" application in Eclipse. The next step is to create the org.eclipse.scout.contacts.server.sql package. Expand folder src/main/java of Maven module contacts.server Select the existing package org.eclipse.scout.contacts.server For IntelliJ: Right click on it and select New → Package Enter org.eclipse.scout.contacts.server.sql into the Name field and hit Enter For Eclipse: Hit Ctrl+N on it This opens the dialog to select a wizard. Enter \"package\" into the search field Select the New Java Package wizard with a double click on the Java Package proposal Enter org.eclipse.scout.contacts.server.sql into the Name field of the wizard and click Finish We are now ready to copy the classes related to the database infrastructure from the \"Contacts\" demo application to our tutorial workspace. The simplest way to do this is to open a second Eclipse IDE with the workspace where you have imported the Scout demo applications. If you have not done this yet go to the beginning of this tutorial [cha-large_example] and catch up now. In the demo application workspace navigate to the same package org.eclipse.scout.contacts.server.sql and copy over all its classes. After copying these classes make sure that the structure of your server Maven module looks as shown in Figure 29 (IntelliJ) and Figure 30 (Eclipse). Figure 29. The copied database classes in the tutorial workspace in IntelliJ. Figure 30. The copied database classes in the tutorial workspace in Eclipse. The imported classes are described in the following sections. Additional information is provided where these classes are relying on Scout concepts that have not previously been introduced. Scout Config properties can greatly improve the flexibility of Scout applications. For the \"Contacts\" application this feature is used to keep its database setup configurable. Moving from a in-memory setup to a disk based database is then possible without any reprogramming. The Scout backend (and frontend) applications initialize config properties from matching values found in file config.properties. For missing property values the default values defined in the config property classes are used. In the case of the \"Contacts\" application the config property files are located in the subfolder src/main/resources of the Maven modules that specify the frontend and the backend application. Expand Maven module contacts.server.app.dev Expand subfolder src/main/resources Open file config.properties in the text editor Append all properties defined in Listing 14 to the file Listing 14. Properties relevant for creating and accessing the database. ### Database contacts.database.jdbc.mappingName=jdbc:derby:memory:contacts-database contacts.database.autocreate=true contacts.database.autopopulate=true ### Application specific contacts.superuser=system These added property values then match the config properties defined in the class DatabaseProperties provided in Listing 15. Remember that this is one of the database infrastructure classes we have copied before. Listing 15. Typed properties for the \"Contacts\" application public class DatabaseProperties { public static class DatabaseAutoCreateProperty extends AbstractBooleanConfigProperty { // defines default value and key @Override public Boolean getDefaultValue() { return Boolean.TRUE; (1) } @Override public String getKey() { return \"contacts.database.autocreate\"; (2) } @Override public String description() { return \"Specifies if the contacts database should automatically be created if it does not exist yet. The default value is true.\"; } } public static class DatabaseAutoPopulateProperty extends AbstractBooleanConfigProperty { // defines default value and key } public static class JdbcMappingNameProperty extends AbstractStringConfigProperty { // defines default value and key } public static class SuperUserSubjectProperty extends AbstractSubjectConfigProperty { // defines default value and key } } 1 Defines the default value of the property that is used if the property is not defined in file config.properties 2 Defines the key to be used in file config.properties In the Scout framework config properties are always typed and need to implement interface IConfigProperty. For commonly used types Scout already provides classes. A boolean property may be created by extending Scout class AbstractBooleanConfigProperty. Accessing the actual property values in the code is demonstrated in the next section. Accessing databases with the Scout framework is implemented with SQL services that extend base class AbstractSqlService. As the \"Contacts\" application will be working with a Derby database we also need a Derby specific SQL service. This is why we have copied over class DerbySqlService. The only project specific method is getConfiguredJdbcMappingName as implemented in Listing 16. Listing 16. The Derby SQL service to connect to the database public class DerbySqlService extends AbstractDerbySqlService { @Override protected String getConfiguredJdbcMappingName() { return CONFIG.getPropertyValue(JdbcMappingNameProperty.class); } public void createDB() { String mappingName = CONFIG.getPropertyValue(JdbcMappingNameProperty.class); try { runDerbyCommand(mappingName + \";create=true\"); (1) } catch (SQLException e) { throw BEANS.get(PlatformExceptionTranslator.class).translate(e); } } } 1 Check the Derby documentation for additional attributes. This listing also demonstrates how to use the config properties in the code. With the property values defined in the previous section the \"Contacts\" application is working with an in-memory database. To change the setup to a disk based version, we would have to change the value for the property contacts.database.jdbc.mappingName from jdbc:derby:memory:contacts-database to jdbc:derby:. For a Windows box a concrete example could look like this: jdbc:derby:c:\\\\derby\\\\contacts-database. Now we look at how the actual SQL statements of the \"Contacts\" application work. For our application all statements are collected into a single class. While there are many more options how to organize SQL and Java code this setup has its own advantages. Efficient maintenance as all SQL statements are located in a single place Code completion support in the Eclipse IDE when using the statements The setup is easy to explain The SQL statements related to the database structure are provided in Listing 17. The statements (or building blocks of statements) in interface SQLs are plain SQL in many cases. In the other cases the statement texts include Scout specific syntax extensions with : as a prefix character. Examples are : and :{.}. Listing 17. Interface SQLs with the SQL commands for the creation of the database tables. public interface SQLs { String SELECT_TABLE_NAMES = \"\" + \"SELECT UPPER(tablename) \" + \"FROM sys.systables \" + \"INTO :result\"; (1) String ORGANIZATION_CREATE_TABLE = \"\" + \"CREATE TABLE ORGANIZATION \" + \" (organization_id VARCHAR(64) NOT NULL CONSTRAINT ORGANIZATION_PK PRIMARY KEY,\" + \" name VARCHAR(64), \" + \" logo_url VARCHAR(512), \" + \" url VARCHAR(64), \" + \" street VARCHAR(64), \" + \" city VARCHAR(64), \" + \" country VARCHAR(2), \" + \" phone VARCHAR(20), \" + \" email VARCHAR(64), \" + \" notes VARCHAR(1024)\" + \" )\"; String PERSON_CREATE_TABLE = \"\" + \"CREATE TABLE PERSON \" + \" (person_id VARCHAR(64) NOT NULL CONSTRAINT PERSON_PK PRIMARY KEY, \" + \" first_name VARCHAR(64), \" + \" last_name VARCHAR(64), \" + \" picture_url VARCHAR(512), \" + \" date_of_birth DATE, \" + \" gender VARCHAR(1), \" + \" street VARCHAR(64), \" + \" city VARCHAR(64), \" + \" country VARCHAR(2), \" + \" phone VARCHAR(20), \" + \" mobile VARCHAR(20), \" + \" email VARCHAR(64), \" + \" organization_id VARCHAR(64), \" + \" position VARCHAR(512), \" + \" phone_work VARCHAR(20), \" + \" email_work VARCHAR(64), \" + \" notes VARCHAR(1024), \" + \" CONSTRAINT ORGANIZATION_FK FOREIGN KEY (organization_id) REFERENCES ORGANIZATION (organization_id)\" + \" )\"; } 1 The syntax ':identifier' adds convenience and is supported by the Scout framework The next section discusses how the components introduced above are used by the \"Contacts\" appliction to create an initial \"Contacts\" database during the startup phase of the application. The database setup service is responsible to create the \"Contacts\" database during the startup of the application. In order to implement such a service, a number of Scout concepts are combined into class DatabaseSetupService. Access config properties using class CONFIG Executing SQL statements via class SQL Logging via class LOG Scout platform with the annotations @ApplicationScoped, @CreateImmediately and @PostConstruct How these elements are used in class DatabaseSetupService is shown in Listing 18. The actual creation of the \"Contacts\" database is performed by the method autoCreateDatabase. At the time of the database creation no user is yet logged into the application. This is why we use a run context associated with the super user. The context is then used to execute the runnable that creates the organization and person tables. Listing 18. Class DatabaseSetupService to create the database tables for the \"Contacts\" application. @ApplicationScoped @CreateImmediately public class DatabaseSetupService implements IDataStoreService { private static final Logger LOG = LoggerFactory.getLogger(DatabaseSetupService.class); @PostConstruct public void autoCreateDatabase() { if (CONFIG.getPropertyValue(DatabaseAutoCreateProperty.class)) { try { BEANS.get(DerbySqlService.class).createDB(); RunContext context = BEANS.get(SuperUserRunContextProducer.class).produce(); IRunnable runnable = () -> { createOrganizationTable(); createPersonTable(); }; context.run(runnable); } catch (RuntimeException e) { BEANS.get(ExceptionHandler.class).handle(e); } } } public void createOrganizationTable() { if (!getExistingTables().contains(\"ORGANIZATION\")) { SQL.insert(SQLs.ORGANIZATION_CREATE_TABLE); LOG.info(\"Database table 'ORGANIZATION' created\"); if (CONFIG.getPropertyValue(DatabaseAutoPopulateProperty.class)) { SQL.insert(SQLs.ORGANIZATION_INSERT_SAMPLE + SQLs.ORGANIZATION_VALUES_01); SQL.insert(SQLs.ORGANIZATION_INSERT_SAMPLE + SQLs.ORGANIZATION_VALUES_02); LOG.info(\"Database table 'ORGANIZATION' populated with sample data\"); } } } public void createPersonTable() { if (!getExistingTables().contains(\"PERSON\")) { SQL.insert(SQLs.PERSON_CREATE_TABLE); LOG.info(\"Database table 'PERSON' created\"); if (CONFIG.getPropertyValue(DatabaseAutoPopulateProperty.class)) { SQL.insert(SQLs.PERSON_INSERT_SAMPLE + SQLs.PERSON_VALUES_01); SQL.insert(SQLs.PERSON_INSERT_SAMPLE + SQLs.PERSON_VALUES_02); LOG.info(\"Database table 'PERSON' populated with sample data\"); } } } private Set getExistingTables() { StringArrayHolder tables = new StringArrayHolder(); SQL.selectInto(SQLs.SELECT_TABLE_NAMES, new NVPair(\"result\", tables)); (1) return CollectionUtility.hashSet(tables.getValue()); } } 1 The existing tables are stored in the StringArrayHolder object named \"result\". The usage of CONFIG is already covered by the previous section. Introductions for SQL, LOG and the Scout platform annotations are provided below. Logging Scout uses the SLF4J framework for logging. For the actual implementation of the loggers Scout uses Logback per default. To use logging a local logger is first created using the SLF4J LoggerFactory class. Additional information regarding the logging configuration is provided below. Executing SQL Statements For the execution of SQL statements Scout provides the convenience class SQL. The various methods can be used with a simple SQL command as in SQL.insert(mySqlCommand) or using additional named objects as in SQL.insertInto(mySqlCommand, myHolder). The Scout class NVPair is frequently used to create such named objects. Make sure that the identifiers (using the Scout : syntax) provided in the SQL commands always match with the names associated with the named objects. Scout Platform The Scout platform provides the basic infrastructure and a number of services to a Scout application. Services are represented by Scout beans that are registered at startup with the platform and created once they are needed. For class DatabaseSetupService we can use the Scout annotation @ApplicationScoped to register the service and to make sure that there will only be a single instance of this class. To force the creation of a bean DatabaseSetupService at startup time we also add Scout annotation @CreateImmediately. Finally, the annotation @PostConstruct executes our method autoCreateDatabase as soon as the DatabaseSetupService bean is created. Changing the basic log level of an application is a frequently used scenario. As Scout is using Logback per default we can adapt the log level in the logback.xml configuration files as shown in Listing 19. For the \"Contacts\" application these configuration files are located in folder src/main/resources of the Maven modules that define the frontend and the backend applications. More information regarding these configuration files is provided in the Logback manual. Listing 19. Setting the log level in the logback.xml configuration file. (1) 1 The level attribute of the element is used as the basic log level. Try \"DEBUG\" or \"WARN\" as alternative values. This section reviews the backend infrastructure that has been created so far and identifies the pieces that are missing to fetch person and organization data to send it to the frontend server of the \"Contacts\" application. During the creation of the person page and the organization page the Scout wizards created more than just Scout pages that are visible in the user interface. It also added corresponding classes in the shared module and the server module of the \"Contacts\" application. The new page wizard basically added the complete round trip from the client (frontend server) to the server (backend server) and back. Using the organization page as an example, the setup created by the page wizard involves the following classes. Class OrganizationTablePage with method execLoadData in the client module The service interface IOrganizationService and class OrganizationTablePageData in the shared module Class OrganizationService with the method stub getOrganizationTableData in the server module On the client side the server roundtrip is implemented in method execLoadData as shown in Listing 20. Listing 20. Accessing the \"Contacts\" backend server to fetch organization data. @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IOrganizationService.class).getOrganizationTableData(filter)); } This roundtrip between class OrganizationTablePage and OrganizationService works through the following steps. BEANS.get(IOrganizationService.class) returns a reference to a client proxy service Method getOrganizationTableData(filter) is executed on the corresponding server service This method returns the organization data in the form of an OrganizationTablePageData object Method importPageData transfers the data from the page data into the table of the user interface On the server side fetching the data from the database will be implemented in class OrganizationService according to Listing 21. Listing 21. Method getTableData to access the database and map the data into a pageData object. public class OrganizationService implements IOrganizationService { @Override public OrganizationTablePageData getOrganizationTableData(SearchFilter filter) { OrganizationTablePageData pageData = new OrganizationTablePageData(); return pageData; } } In the next section we will implement the database access logic in the getOrganizationTableData methods of the server classes OrganizationService and PersonService. We are now ready to fetch data from the Derby database using the available infrastructure and the SQL statements prepared in class SQLs. For the implementation of method getOrganizationTableData in class OrganizationService we will use the two SQL snippets provided in Listing 22. Listing 22. Interface SQLs with the SQL to fetch the list of organizations with their attributes. public interface SQLs { String ORGANIZATION_PAGE_SELECT = \"\" + \"SELECT organization_id, \" + \" name, \" + \" city, \" + \" country, \" + \" url \" + \"FROM ORGANIZATION \"; String ORGANIZATION_PAGE_DATA_SELECT_INTO = \"\" + \"INTO :{page.organizationId}, \" (1) + \" :{page.name}, \" + \" :{page.city}, \" + \" :{page.country}, \" + \" :{page.homepage}\"; } 1 The syntax ':{identifier.attribute}' adds convenience to map SQL result sets to Scout page data objects. Taking advantage of the SQL convenience offered by the Scout framework, we can add the missing functionality with two lines of code. See Listing 23 for the full listing of method getOrganizationTableData. After adding the two additional lines, we update the imports of the classes with pressing Ctrl+Shift+O. Listing 23. Method getTableData to access the database and map the data into a pageData object. public class OrganizationService implements IOrganizationService { @Override public OrganizationTablePageData getOrganizationTableData(SearchFilter filter) { OrganizationTablePageData pageData = new OrganizationTablePageData(); String sql = SQLs.ORGANIZATION_PAGE_SELECT + SQLs.ORGANIZATION_PAGE_DATA_SELECT_INTO; (1) SQL.selectInto(sql, new NVPair(\"page\", pageData)); (2) return pageData; } } 1 Added line 1: Assembling of the SQL statement 2 Added line 2: Fetching the data from the database and storing the result in pageData Note that the identifier \"page\" in the NVPair object will be mapped to the same identifier used in the ORGANIZATION_PAGE_DATA_SELECT_INTO statement. Finally, we have to also implement the loading of the person data in class PersonService. The implementation of method getPersonTableData is provided in Listing 24. Listing 24. Method getPersonTableData to access the database and map the data into a page data object. public class PersonService implements IPersonService { @Override public PersonTablePageData getPersonTableData(SearchFilter filter) { PersonTablePageData pageData = new PersonTablePageData(); String sql = SQLs.PERSON_PAGE_SELECT + SQLs.PERSON_PAGE_DATA_SELECT_INTO; SQL.selectInto(sql, new NVPair(\"page\", pageData)); return pageData; } } In the third step of the \"Contacts\" tutorial we have added the infrastructure to work with a Derby database. The infrastructure is used to create and populate the initial database. In addition person and organization data is now fetched from the database on the \"Contacts\" backend server and handed to the \"Contacts\" frontend server via a page data object. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. Person and company data is now visible in the user interface as shown in Figure 31. Figure 31. The \"Contacts\" application displaying person data at the end of tutorial step 3. In this tutorial step we add the Scout forms that are used to create and edit persons and organizations in the user interface. This tutorial step also provides an introduction into the design and implementation of complex form layouts with the Scout framework. Before we start with the actual implementation of the form Designing the Person Form provides an introduction to the layouting concepts of the Scout framework. Based on this information we design a hierarchical form layout for the person form and can then dive into the creation of the person form. Implementing the Form (Implementing the Form) Adding a Gender Code Type (Adding a Gender Code Type) Adding Form Fields (Adding Form Fields) Person Form Handler and Person Service (Person Form Handler and Person Service) The tutorial step concludes with a summary in What have we achieved?. We start with the sketch of the form layout as shown in Figure 32. Figure 32. A sketch of the target layout for the person form. The upper half of the form shows a picture of the person and contains some primary attributes such as first name and the gender of the person. The lower half of the form contains tab boxes. A \"Contact Info\" tab provides contact details of the person and adding notes for the person in the form of free text is possible in the \"Notes\" tab. Figure 33 below shows how the sketched form can fit with the logical grid layout of the Scout framework. Scout containers have two columns (indicated in red) per default and as many rows (indicated in yellow) as needed. Figure 33. Logical columns and rows of the Scout form layout. Scout containers have two columns per default. Individual form fields consist of a label part and a field part and occupy a single cell in the logical grid. Examples for fields using the default configuration are the first name field or the email field. When needed, fields can be configured to occupy several columns or rows. An example for this case is the image field that will hold the picture of the person. This field is configured to occupy 5 logical rows. With Scout’s container widgets such as group boxes, tab boxes and sequence boxes complex layouts can be achieved. Containers provide a lot of flexibility as these widgets can be nested hierarchically as shown in Figure 34 Figure 34. The hierarchical organization of the form including Scout group boxes, tab boxes and a sequence box. The sketch above details the organization of the container components to match the desired layout for the person form. The different container widgets can all be used with their default settings except for the address box. For the address box we will have to modify its size and its inner organization. As group boxes occupy two columns per default we will need to reduce the width of the address box to a single column. The second change is to the inner layout of the address box. To force the location box to come below the street field we have to change the inner layout of the group box to a single column as well. Otherwise, the location box would be shown next to the street field. In the next section we will start to implement the person form with the layout described above. In this section we implement the person form with its container widgets as described in the previous section. To be able to use the form to create and edit persons we will add \"New\" and \"Edit\" context menus to the table in the person page. Finally, we will also add a \"Create Person\" entry to the \"Quick Access\" top level menu of the application. Start the form creation with the Scout new form wizard following the steps listed below. Expand the Maven module contacts.client in the package explorer Select package org.eclipse.scout.contacts.client.person in folder src/main/java For IntelliJ: Create a new Scout form by right-clicking on the package and selecting New → Scout Element → Form as shown in Figure 35 Enter \"Person\" into the Name as shown in Figure 36 and then hit Enter For Eclipse: Press Ctrl+N and enter \"form\" into the search field of the wizard selection dialog Select the Scout Form proposal and click the Next button Enter \"Person\" into the Name and verify that the field contents match Figure 37 Click Finish to start the creation of the form and its related components Figure 35. Create a New Scout Form in IntelliJ. Figure 36. Use the New Scout Form to create the person form in IntelliJ. Figure 37. Use the New Scout Form to create the person form in Eclipse. Now open the newly created class PersonForm in the Java editor and perform the changes listed below as shown in Listing 25. Add property personId with the corresponding getter and setter methods Add method computeExclusiveKey Add method getConfiguredDisplayHint Verify the translated text entry in method getConfiguredTitle Listing 25. Add getConfiguredDisplayHint and the methods related to the person’s primary key. @ClassId(\"1cde38c1-da32-4fdd-92e7-28d82a5d7bf9\") @FormData(value = PersonFormData.class, sdkCommand = SdkCommand.CREATE) (1) public class PersonForm extends AbstractForm { // represents the person's primary key private String personId; @FormData (2) public String getPersonId() { return personId; } @FormData (2) public void setPersonId(String personId) { this.personId = personId; } @Override public Object computeExclusiveKey() { (3) return getPersonId(); } @Override protected int getConfiguredDisplayHint() { (4) return IForm.DISPLAY_HINT_VIEW; } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Person\"); } } 1 Links the form with its form data class PersonFormData. 2 The annotation @FormData on the getter and setter method define the personId as a property that will be included in the form data. 3 The object returned by this method is used by the framework to verify if a specific entity is already opened in some other form. 4 Configure this form to be opened in the view mode. Views are opened in the bench area of the user interface. We are now going to add the layout containers according to Listing 26. First add class GeneralBox using the Scout content assist selecting the Group Box proposal. Delete method getConfiguredLabel, as we are only using this group box to organize fields. After the general box add a tab box container class by choosing the Tab Box proposal in the Scout content assist. Inside of class DetailsBox create the individual tab containers \"Contact Info\", \"Work\" and \"Notes\" as inner classes of the details box according to Listing 26. Listing 26. The layouting structure of the person form using Scout container widgets. public class PersonForm extends AbstractForm { @Order(10) @ClassId(\"27a040ac-eac5-47c6-a826-572633b9d4ef\") public class MainBox extends AbstractGroupBox { (1) @Order(10) @ClassId(\"08832a97-8845-4ff4-8dfd-c29366c22742\") public class GeneralBox extends AbstractGroupBox { (2) } @Order(20) @ClassId(\"3469046e-ee95-4e86-b0c9-a8ed01fbf664\") public class DetailsBox extends AbstractTabBox { (3) @Order(10) @ClassId(\"2081b483-3d6e-4239-b7da-b6e2d2aa3b7a\") public class ContactInfoBox extends AbstractGroupBox { (4) @Order(10) @ClassId(\"736450dd-ba89-43cd-ba52-bcd31196b462\") public class AddressBox extends AbstractGroupBox { } } @Order(20) @ClassId(\"8e18a673-aca5-44a2-898f-60a744e4467a\") public class WorkBox extends AbstractGroupBox { } @Order(30) @ClassId(\"fcb5b155-2c89-4ef8-9a96-ac41e9032107\") public class NotesBox extends AbstractGroupBox { } } @Order(30) @ClassId(\"e54548b8-601e-41a4-842c-db25b5f1cad1\") public class OkButton extends AbstractOkButton { } @Order(40) @ClassId(\"26612eb9-1832-4284-ac5a-9f450dc7ff9b\") public class CancelButton extends AbstractCancelButton { } } } 1 Every Scout form has a class MainBox. It contains all visible UI components. 2 The GeneralBox will hold the picture field, first name and last names, the date of birth and the gender. 3 The DetailsBox tab box will contain the various tabs implemented in inner group boxes. 4 The containers ContactInfoBox, WorkBox and Notes represent the three tabs of the tab box. To actually open the person form the form needs to be integrated in the user interface. In Scout application forms are typically opened by first selecting a specific row in a page and then using a context menu. For the \"Contacts\" application we will follow this pattern too. Open class PersonTablePage in the Java editor and create the context menus \"New\" and \"Edit\" in the inner class Table according to Listing 27. Listing 27. The page context menus to open the person form. @PageData(PersonTablePageData.class) @ClassId(\"23c10251-66b1-4bd6-a9d7-93c7d1aedede\") public class PersonTablePage extends AbstractPageWithTable { @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { @Override protected Class getConfiguredDefaultMenu() { (1) return EditMenu.class; } @Order(10) @ClassId(\"4a8f5e0e-6eb8-4296-8ad7-012151f572f2\") public class EditMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"Edit\"); } @Override protected void execAction() { PersonForm form = new PersonForm(); form.setPersonId(getPersonIdColumn().getSelectedValue()); (2) form.addFormListener(new PersonFormListener()); // start the form using its modify handler form.startModify(); } } @Order(20) @ClassId(\"8ac358f2-de17-4b2b-93f3-73e21a7415d8\") public class NewMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"New\"); } @Override protected Set getConfiguredMenuTypes() { (3) return CollectionUtility. hashSet( TableMenuType.EmptySpace, TableMenuType.SingleSelection); } @Override protected void execAction() { PersonForm form = new PersonForm(); form.addFormListener(new PersonFormListener()); // start the form using its new handler form.startNew(); } } private class PersonFormListener implements FormListener { @Override public void formChanged(FormEvent e) { // reload page to reflect new/changed data after saving any changes if (FormEvent.TYPE_CLOSED == e.getType() && e.getForm().isFormStored()) { reloadPage(); } } } } } 1 This action gets executed when the user presses Enter on a table row or double clicks on a table row. 2 Transfer the primary key of the selected person row to the person form. 3 Including TableMenuType.EmptySpace in the return value activates the \"New\" menu even when no row is selected. In addition to the context menus defined for the person page we also add a \"Create new person\" menu on the desktop under the \"Quick Access\" top level menu. To do this open class Desktop in the Java editor and navigate to the inner class QuickAccessMenu. We can then add a NewPersonMenu using the Scout content assist and selecting the Menu proposal entry. The final implementation for the \"Create new person\" menu is provided in Listing 28. Listing 28. The \"Create new person\" menu on the desktop. @ClassId(\"70eda4c8-5aed-4e61-85b4-6098edad8416\") public class Desktop extends AbstractDesktop { @Order(10) @ClassId(\"50df7a9d-dd3c-40a3-abc4-4619eff8d841\") public class QuickAccessMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"QuickAccess\"); } @Order(10) @ClassId(\"effb3b69-f488-4aed-8923-d430a5f1fd97\") public class NewPersonMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"NewPersonMenu\"); } @Override protected void execAction() { new PersonForm().startNew(); } } } } We have now created the initial implementation of the person form including context menus to open the form from the person page and the \"Quick Access\" top level menu of the \"Contacts\" application. At this point it is already possible to verify that the person form can be opened on the user interface via the context menus. A screenshot of the current state is shown in Figure 38. Figure 38. The initial person form and the top level menu \"Create new person\". This initial implementation of the person form is also ready to add the individual form fields into the container boxes. For the fields of the person form we can directly extend the abstract form field classes offered by the Scout framework. Only for the implementation of the gender field we need a Scout code type that represents the possible values for the radio buttons. In this section we will add a gender code type for the \"Contacts\" application. As code types can be used for the specification of the options of a radio button group, we will be able to implement the gender field by providing a reference to the code type. To keep things simple, the gender code type will contain a \"Male\" code and a \"Female\" code. Code types are frequently used in both the frontend and the backend of an application. This implies that code type classes need to be implemented in the application’s shared module. As the gender code type is related to persons we will implement this class in the person package. Follow the steps described below to create the gender code type. Expand the Maven module contacts.shared in the package explorer Select package org.eclipse.scout.contacts.shared.person in folder src/main/java For IntelliJ: Create a new Scout code type by right-clicking on the package and selecting New → Scout Element → Code Type as shown in Figure 39 Enter \"Gender\" into the Name as shown in Figure 40 and then hit Enter In the generated code type, change the generics from to . For Eclipse: Press Ctrl+N and enter \"code\" into the search field of the wizard selection dialog Select the Scout CodeType proposal and click the Next button Enter \"Gender\" into the Name field and use the type String for the first and second type argument according to Figure 41 Click Finish. Figure 39. Create the gender code in IntelliJ. Figure 40. Create the gender code using the Scout new code wizard in IntelliJ. Figure 41. Create the gender code using the Scout new code wizard in Eclipse. Then, open the newly created class GenderCodeType in the Java editor and set the ID constant to \"Gender\". The created class will then look like Listing 29 except for the missing inner code classes. We will add these inner codes as the next step. Listing 29. The Scout code type to represent the gender of a person. This code type will be used for the gender field. @ClassId(\"bbe8fae2-4923-42bc-9745-3bb3ef592b12\") public class GenderCodeType extends AbstractCodeType { private static final long serialVersionUID = 1L; public static final String ID = \"Gender\"; @Override public String getId() { return ID; } @Order(1000) @ClassId(\"8893e1e4-7b6c-46c2-8c84-42c914ec29d5\") public static class MaleCode extends AbstractCode { private static final long serialVersionUID = 1L; public static final String ID = \"M\"; @Override protected String getConfiguredText() { return TEXTS.get(\"Male\"); } @Override public String getId() { return ID; } } @Order(2000) @ClassId(\"23e1540e-2914-401f-9f42-e409ac2fb605\") public static class FemaleCode extends AbstractCode { private static final long serialVersionUID = 1L; public static final String ID = \"F\"; @Override protected String getConfiguredText() { return TEXTS.get(\"Female\"); } @Override public String getId() { return ID; } } } To add an inner class MaleCode code to the gender code type perform the steps below. Press Ctrl+Space and select the Code proposal with a double click Enter \"Male\" into the first box to be used in the MaleCode class name Tab to the value for the ID constant and set it to \"M\" Tab to the value in TEXTS.get and add \"Male\" and its translated text Hit Enter to finish Then repeat the steps above for the female code. In this section we will add the form fields to the layout containers of the person form. We will start with filling the general box with the picture field, followed by the other fields in the upper part of the person form. Finally, we fill the individual tab boxes into the details box in the lower part of the person form. As the first field we add the field that will show the picture of the person to the GeneralBox container. Open class PersonForm in the Java editor Place the cursor in the body of the inner class GeneralBox. Copy the code provided in Listing 30 into the general box. Add for each field a getter method above the MainBox (where all other getters are). Alternatively you could use the SDK to create both fields (including getters) and add the code from Listing 30. Listing 30. The picture field for the person form. @Order(10) @ClassId(\"617ffd40-0d69-4d02-b4f8-90c28c68c6ce\") public class PictureUrlField extends AbstractStringField { @Override (1) protected boolean getConfiguredVisible() { return false; } } @Order(20) @ClassId(\"6366a23e-f8ba-4b50-b814-202e63daffc8\") public class PictureField extends AbstractImageField { @Override (2) protected Class getConfiguredMasterField() { return PictureUrlField.class; } @Override (3) protected void execChangedMasterValue(Object newMasterValue) { updateImage((String) newMasterValue); } @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected int getConfiguredGridH() { return 5; } @Override protected boolean getConfiguredAutoFit() { return true; } @Override protected String getConfiguredImageId() { return Icons.User; } protected void updateImage(String url) { setImageUrl(url); } } 1 Sets the field invisible. An invisible field does not occupy space in the user interface. 2 Declares PictureUrlField as the master field of the picture field. 3 This method will be called when the value of the master field has changed. Using the combination of the PictureField and PictureUrlField as its master field has two benefits. First, having a field that contains the the URL makes sure that this information is also stored in the form data and second, the method execChangedMasterValue can then be used to trigger the refresh of the actual picture when the picture URL is changed. For security reasons, the browser is not allowed to load content from other servers by default. For our demo images, we add a well-considered exception. Open the config.properties file of your UI server project and make sure it contains the following line: Listing 31. Content Security Policy Configuration (config.properties) scout.cspDirective[img-src]='self' www.gravatar.com wiki.eclipse.org upload.wikimedia.org The remaining fields for the general box can then be added using the Scout content assist or by copying Listing 32 into the code below the picture field, again not forgetting the getters above the MainBox. Listing 32. The other fields in the general box. @Order(30) @ClassId(\"359be835-439f-456e-9b0d-c832b034a298\") public class FirstNameField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"FirstName\"); } } @Order(40) @ClassId(\"8679ade5-21fb-470e-8f00-13bd15199101\") public class LastNameField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"LastName\"); } } @Order(50) @ClassId(\"7c602360-9daa-44b8-abb6-94ccf9b9db59\") public class DateOfBirthField extends AbstractDateField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"DateOfBirth\"); } } @Order(60) @ClassId(\"b9d0593e-3938-4f97-bdca-fdb6a1ce1d77\") public class GenderGroup extends AbstractRadioButtonGroup { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Gender\"); } @Override (1) protected Class> getConfiguredCodeType() { return GenderCodeType.class; } } 1 The codes defined in GenderCodeType will be used to determine the actual radio buttons to add to the gender field. Whenever we add several fields to a Scout container field the individual fields will be displayed according to their order specified by the @Order annotation in the source code. Using the default two column layout, the Scout layouting engine uses the first fields to fill up the first column before the remaining fields are assigned to the second column. In general the Scout layouting engine tries to balance the number of fields over all available columns. For the general box this rule has the effect that the picture field (this is the first field according to its order value) is assigned to the left column and all other fields are assigned to the right column. After having added all the fields to the general box of the person form we can now fill the individual tabs of the DetailsBox container. We start with adding the content to the tabs \"Work\" and \"Notes\" as described below. Now add the string fields listed below to the \"Work\" tab as inner classes of the container field WorkBox. Use the Scout content assist to add the fields and select String Field as the type of each field. Class PositionField, using label \"Position\" Class OrganizationField, using label \"Organization\" Class PhoneWorkField, using label \"Phone\" Class EmailWorkField, using label \"E-Mail\" The \"Notes\" tab represented by the container field NotesBox only contains a single string field. This field will not need a label, span 4 rows of the logical grid and hold a multi line text according to Listing 33. Listing 33. The notes tab box with its multi line text field. @Order(30) @ClassId(\"fcb5b155-2c89-4ef8-9a96-ac41e9032107\") public class NotesBox extends AbstractGroupBox { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Notes\"); } @Order(10) @ClassId(\"ce791f14-fca6-4f11-8476-89cbf905eb2e\") public class NotesField extends AbstractStringField { @Override protected int getConfiguredGridH() { return 4; } @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected boolean getConfiguredMultilineText() { return true; } } } } Next is the implementation of the address box in the \"Contact Info\" tab. The address box is realized as a single column group box that holds a street field, a city field and a country field. According to the form layout defined in Designing the Person Form the city field and the country field will be located on the same logical row and in the same cell of the logical grid. In the Scout default layout each form field uses up a single cell of the logical grid. Whenever we like to be more economical with the space occupied by several fields, we can work with a Scout sequence box. Inner fields of a sequence box will be arranged on a single row from left to right and the spacing between the inner fields will be minimal. Taking advantage of these properties we implement the location box as a sequence field according to Listing 34. To further optimize screen real estate we also switch to on-field labels for the city field and the country field. Listing 34. The content of the address box. @Order(10) @ClassId(\"736450dd-ba89-43cd-ba52-bcd31196b462\") public class AddressBox extends AbstractGroupBox { @Override protected boolean getConfiguredBorderVisible() { return false; } @Override protected int getConfiguredGridH() { (1) return 3; } @Override protected int getConfiguredGridW() { (1) return 1; } @Override protected int getConfiguredGridColumnCount() { (2) return 1; } @Order(10) @ClassId(\"a9137ad1-af9d-4fef-a69d-3e3d9ce48f21\") public class StreetField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Street\"); } } // use a sequence box for horizontal layout (3) @Order(20) @ClassId(\"a278333c-057e-4c1d-a442-0c1dd62fdca7\") public class LocationBox extends AbstractSequenceBox { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Location\"); } @Override protected boolean getConfiguredAutoCheckFromTo() { (4) return false; } @Order(10) @ClassId(\"3ea6ac2a-976e-4c7f-b04b-ec0d7d1ae5ec\") public class CityField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"City\"); } @Override protected byte getConfiguredLabelPosition() { return LABEL_POSITION_ON_FIELD; (5) } } @Order(20) @ClassId(\"d4dfce4f-019b-4a61-ba78-347ef67cf80f\") public class CountryField extends AbstractSmartField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Country\"); } @Override protected byte getConfiguredLabelPosition() { return LABEL_POSITION_ON_FIELD; } @Override protected Class> getConfiguredLookupCall() { return CountryLookupCall.class; } } } } 1 Makes the address box to occupy 1 column and 3 rows. 2 The content in the address box will use a single column layout. 3 Extending a Scout sequence box will place the inner fields of the LocationBox on a single row. 4 Disables the default check if the value of the first field in the sequence box is less than the value in the second field. 5 On field labels do not take any additional space and are shown in the field itself. While string fields are used for the street field and the city field, the country field is implemented as a smart field. Scout smart fields can be viewed as a powerful drop down lists with search-as-you-type support. In the case of the country field the smart field is backed by the lookup class CountryLookupCall that we already used for the country smart column in the person page. After the address box the \"Contact Info\" box contains the three fields mentioned below. Use the Scout content assist to add the fields and select String Field as the type of each field. Class PhoneField, using label \"Phone\" Class MobileField, using label \"Mobile\" Class EmailField, using label \"E-Mail\" We have now completed the implementation of the form layout and added all form fields of the person form. You might not have enough permissions yet to access the person form. For simplicity we will give all permissions to anyone. Follow the steps described below. Expand the Maven module contacts.server in the Eclipse package explorer Navigate to the package org.eclipse.scout.contacts.server.security in folder src/main/java Adjust the file ServerAccessControlService.java according to Listing 35. Listing 35. The content of the class ServiceAccessControlService. @Replace public class ServerAccessControlService extends AccessControlService { @Override protected IPermissionCollection execLoadPermissions(String userId) { return BEANS.get(AllPermissionCollection.class); } } The application is now in a state where we can verify the layout of the person form and check the handling of the different input fields. (Re)start the application and enter some values into the various fields of the person form. To view and enter person data with the form we have yet to add the interaction with the database in the backend of the \"Contacts\" application. This is the topic of the next section. This section shows how we can integrate the person form created in the previous sections with the \"Contacts\" backend application to load and store person data with the database. Most of the necessary infrastructure such as the transfer objects between the frontend and the backend application has already been created by the Scout form wizard. In the text below we will first discuss the setup created by the new form wizard and then add the missing code snippets to interact with the database. On the frontend side, the Scout new form wizard has also created the two form handler classes ModifyHandler and NewHandler. By convention a ModifyHandler is used to change existing data and a NewHandler implements the creation of new data. Form handler classes provide a number of callback methods that are invoked at various stages during the life cycle of the form. The implementation created by the Scout wizard includes the methods execLoad and execStore for each form handler. In these methods the form fetches data from the Scout backend application and/or sends new data to the backend server. Adapt the default implementation of the form handlers according to Listing 36. Listing 36. The new handler and modify handler for the person form. public class PersonForm extends AbstractForm { public class ModifyHandler extends AbstractFormHandler { @Override protected void execLoad() { IPersonService service = BEANS.get(IPersonService.class); (1) PersonFormData formData = new PersonFormData(); exportFormData(formData); (2) formData = service.load(formData); (3) importFormData(formData); (4) getForm().setSubTitle(calculateSubTitle()); (5) } @Override protected void execStore() { IPersonService service = BEANS.get(IPersonService.class); PersonFormData formData = new PersonFormData(); exportFormData(formData); service.store(formData); (6) } } public class NewHandler extends AbstractFormHandler { @Override protected void execStore() { IPersonService service = BEANS.get(IPersonService.class); PersonFormData formData = new PersonFormData(); exportFormData(formData); formData = service.create(formData); (7) importFormData(formData); } } protected String calculateSubTitle() { return StringUtility.join(\" \", getFirstNameField().getValue(), getLastNameField().getValue()); } } 1 Obtains a reference to the person service located on the Scout backend application. 2 All form field values are transferred to the form data. In this case the person primary key property will be transferred to the form data. Remember that we have set this key in the \"Edit\" context menu. 3 The form data (including the person primary key) is sent to the load method. The load method returns the person data from the backend. 4 The field values in the form data are loaded into the form fields of the person form. 5 The sub title on the view tab of the form is updated to reflect the name of the person. 6 Calls the store method of the person service providing the updated person data. 7 Calls the create method of the person service providing the new person data. With the implementation provided in Listing 36 the classes ModifyHandler and NewHandler orchestrate the complete roundtrip between the frontend and the backend of the \"Contacts\" application. The only part that is now missing is the implementation of the form service methods create, load and store on the backend of the \"Contacts\" application. For these methods we can again rely on the default implementations created by the Scout new form wizard. Modify the person service methods according to Listing 37. Listing 37. The PersonService methods to load, create and update person data. public class PersonService implements IPersonService { @Override public PersonFormData create(PersonFormData formData) { if (!ACCESS.check(new CreatePersonPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } // add a unique person id if necessary if (StringUtility.isNullOrEmpty(formData.getPersonId())) { formData.setPersonId(UUID.randomUUID().toString()); } SQL.insert(SQLs.PERSON_INSERT, formData); (1) return store(formData); (2) } @Override public PersonFormData load(PersonFormData formData) { if (!ACCESS.check(new ReadPersonPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.selectInto(SQLs.PERSON_SELECT, formData); (3) return formData; } @Override public PersonFormData store(PersonFormData formData) { if (!ACCESS.check(new UpdatePersonPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.update(SQLs.PERSON_UPDATE, formData); (4) return formData; } } 1 The SQL insert statement adds a new person entry in the database. Only the primary key is used to create this entry. 2 To save all other person attributes provided in the form data, the store method is reused. 3 The SQL select into transfers the person data from the database into the form data. 4 The SQL update statement transfers all person attributes provided in the form data to the person table. In the fourth step of the \"Contacts\" tutorial we have added the person form to add, view and change persons. Using the person form as an example we have learned how to implement complex form layouts using the Scout layouting mechanism, Scout container fields and individual form field properties. We have also seen how we can use context menus to integrate the forms in the user interface of the application and have implemented the interaction of the frontend with the backend application including the persistance of person data in the database. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. We can now verify the creation of new person entries and the modification of existing person data in the current state of the \"Contacts\" application. The created person form is shown in Figure 42. In case you copied some code snippets from the tutorial, you may see the text \"undefined text {…​}\" in some labels in the person field. You may want to define these texts using the Scout content assist for defining new texts as was already presented earlier in this tutorial. Figure 42. The \"Contacts\" application with the person form at the end of tutorial step 4. This tutorial step introduces two additional concepts that are used in most Scout applications. Form field validation and template fields. Form field validation helps to keep data quality high and template fields are used to increase the code quality of a Scout application. In addition to just retrieving and storing new data, a business application should also help the user to maintain the quality of the entered data. To validate user input, the Scout framework offers form field validation. Simple input validation is possible on the level of individual fields as shown in Simple Form Field Validation. Scout also offers mechanisms to validate field values on the level of container fields or on the level of a form as shown in Complex Form Field Validation. In the text below we add a number of form field validations that implement this approach for the person form. In Creating Template Fields we refactor the picture field code into a template field that can later be re-used for the organization form. To edit the image URL we add a simple edit form to the refactored picture field in Adding a simple URL Input Form to the Picture Field. In More Template Fields we outline the creation of additional template fields and provide a summary of this tutorial step in What have we achieved?. This section explains the form field validation on the level of a single field. As an example we will use the email address field defined in the \"Contact Info\" tab. The validation implemented in Listing 38 checks the length and the format of the entered email address. Listing 38. The validation of the email field @Order(40) @ClassId(\"5f9d9363-8e57-4151-b281-7d401e64702c\") public class EmailField extends AbstractStringField { private static final String EMAIL_PATTERN = (1) \"^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@\" + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\"; @Override protected String getConfiguredLabel() { return TEXTS.get(\"Email\"); } @Override (2) protected int getConfiguredMaxLength() { return 64; } @Override (3) protected String execValidateValue(String rawValue) { if (rawValue != null && !Pattern.matches(EMAIL_PATTERN, rawValue)) { throw new VetoException(TEXTS.get(\"BadEmailAddress\")); (4) } return rawValue; (5) } } 1 Email verification is performed against a simple regular expression. 2 This prevents the field from accepting more than 64 characters. The return value should match the size of the corresponding table column. 3 Method execValidateValue is called during validation of the new field value. 4 If the value violates any business rules, a VetoException should be thrown. 5 If the new value passes all business rules the method returns the value. In the next section we use the address box to demonstrate the joint validation of several fields. Often the values of several fields have to be considered jointly to evaluate if the entered data is actually valid. As an example we will add a more complex form field validation on the level of the AddressBox group box widget that takes into account the data entered into the street, city, and country fields. The implemented validation for the address box example should enforce the following set of business rules. Only valid countries should be allowed If a city is provided a country must also be provided If street information is provided, both a city and a country must be provided The address may be empty The simplest rule is about entering only valid countries. This rule is already implemented as the country smart field only allows the user to select a single entry of the list of valid countries. A possible implementation to enforce the other rules is provided in Listing 39. Listing 39. The validation of the fields in the address box @Order(10) @ClassId(\"736450dd-ba89-43cd-ba52-bcd31196b462\") public class AddressBox extends AbstractGroupBox { @Order(10) @ClassId(\"a9137ad1-af9d-4fef-a69d-3e3d9ce48f21\") public class StreetField extends AbstractStringField { @Override (1) protected void execChangedValue() { validateAddressFields(); (2) } } @Order(20) @ClassId(\"a278333c-057e-4c1d-a442-0c1dd62fdca7\") public class LocationBox extends AbstractSequenceBox { @Order(10) @ClassId(\"3ea6ac2a-976e-4c7f-b04b-ec0d7d1ae5ec\") public class CityField extends AbstractStringField { @Override protected void execChangedValue() { validateAddressFields(); (2) } } @Order(20) @ClassId(\"d4dfce4f-019b-4a61-ba78-347ef67cf80f\") public class CountryField extends AbstractSmartField { @Override protected void execChangedValue() { validateAddressFields(); (2) } } } protected void validateAddressFields() { boolean hasStreet = StringUtility.hasText(getStreetField().getValue()); boolean hasCity = StringUtility.hasText(getCityField().getValue()); getCityField().setMandatory(hasStreet); (3) getCountryField().setMandatory(hasStreet || hasCity); } } 1 This method is called after the value of this field has been changed. 2 After changing the street, the city or the country recompute which address fields are mandatory. 3 The city becomes mandatory if the street field is not empty. The country is mandatory if the street or the city is not empty. Whenever the content of the street field, the city field, or the country field is changed the mechanism implemented above triggers a re-evaluation of the mandatory status of the city field and the country field. As the Scout default form validation ensures that every mandatory field receives some content the application prevents the user from entering address data that does not satisfy the business rules mentioned above. The verification of user input can also be triggered before the form is closed. This behavior can be implemented by overriding method execValidate on the form level. As an example we use this mechanism to make sure that a user can only enter persons that have at least some name information. Now add this validation to the person form using the implementation provided in Listing 40. Listing 40. The validation of the first and last names on the form level public class PersonForm extends AbstractForm { @Override (1) protected boolean execValidate() { boolean noFirstName = StringUtility.isNullOrEmpty(getFirstNameField().getValue()); boolean noLastName = StringUtility.isNullOrEmpty(getLastNameField().getValue()); if (noFirstName && noLastName) { getFirstNameField().requestFocus(); (2) throw new VetoException(TEXTS.get(\"MissingName\")); (3) } return true; (4) } } 1 This method is called during the form validation and before the form is stored/closed. 2 Place the focus on the first name field. 3 In case both the first name and the last name fields are empty throw a VetoException, this will fail the validation. 4 The return value indicates if the validation has passed successfully or not. As we have now implemented a number of form field validations we are now ready to test the result in the running application. Re-start the \"Contacts\" application and try to trigger the different validation rules. Figure 43 shows the response of the user interface when trying to save invalid person data. Figure 43. The form field validation implemented for the person form. In this section we show how to refactor a group of fields into a Scout template field that is ready for reuse. As an example we refactor the picture field into a template field. Later in tutorial step Adding the Company Form we can then reuse this field in the company form to show the company’s logo. The generic approach to refactor a form field into a template field is listed below. Create an empty field data class in the shared module Create the template field class in the client module Copy the existing field code to the template field Let the original field extend the new template field and fix imports For refactoring the picture field we can exactly follow these steps. To create the empty field data class perform the following steps. Expand the shared module of the \"Contacts\" application Navigate into folder src/generated/java Add a new package org.eclipse.scout.contacts.shared.common Create class AbstractUrlImageFieldData in this package as shown in Listing 41 Listing 41. The empty form data class for the picture template field. package org.eclipse.scout.contacts.shared.common; public abstract class AbstractUrlImageFieldData { } We are now ready to implement the template field class according to the following steps. Navigate to the client module of the \"Contacts\" application Select package org.eclipse.scout.contacts.client.common in folder src/main/java Create a new Java class called AbstractUrlImageField and update the implementation according to Listing 42 Listing 42. The refactored picture field. @ClassId(\"73a4276f-77b2-4ad2-b414-7f806284bdb3\") @FormData(value = AbstractUrlImageFieldData.class, (1) sdkCommand = SdkCommand.CREATE, defaultSubtypeSdkCommand = DefaultSubtypeSdkCommand.CREATE) public abstract class AbstractUrlImageField extends AbstractImageField { private String url; (2) @FormData (2) public String getUrl() { return url; } @FormData (2) public void setUrl(String url) { this.url = url; updateImage(); } @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected int getConfiguredGridH() { return 5; } @Override protected boolean getConfiguredAutoFit() { return true; } @Override protected String getConfiguredImageId() { return Icons.User; } protected void updateImage() { setImageUrl(this.url); } } 1 The link to the corresponding field data class. 2 Field PictureUrlField is refactored into the property url value. To transfer the content of this property to the field data object we need to add annotation @FormData to its getter and setter methods. The next step is to replace the original code of the picture field with the newly created template field. Delete the field PictureUrlField and remove all the code from the field PictureField and let PictureField extend the newly created template field as shown in Listing 43. Listing 43. The refactored picture field. @Order(10) @ClassId(\"e7efc084-fe7a-462f-ba23-914e58f7b82d\") public class MainBox extends AbstractGroupBox { @Order(10) @ClassId(\"b20aad47-e070-4f3c-bafc-ddbaa3ae2a4c\") public class GeneralBox extends AbstractGroupBox { @Order(10) @ClassId(\"d80625e3-b548-47e4-9cae-42d70aaa568f\") public class PictureField extends AbstractUrlImageField { (1) } // additional form field } } 1 The implementation of the picture field is now provided by the template field AbstractUrlImageField. As the last step we need to slightly modify the SQL statement that loads and stores the picture URL information. The reason for the change is the replacement of the picture url field by an url property defined as a member of the picture field. For this change perform the steps listed below. Open class SQLs in the Java editor. In string PERSON_SELECT change the token ':pictureUrl' with ':picture.url' In string PERSON_UPDATE change the token ':pictureUrl' with ':picture.url' Based on the picture field example we have now walked through the complete process to turn normal fields into template fields. This process remains the same for refactoring container fields into template fields. Using the refactored picture template field we want the user to be able to enter and update the URL of the shown picture. We create a new form called PictureUrl as we’ve done before as shown in Figure 44 (IntelliJ) or Figure 45 (Eclipse). For Eclipse: Verify that you use the correct source folder and package name. In the Name field enter \"PictureUrl\". In section Additional Components deselect all checkboxes. Click Finish to let the wizard implement the form. Figure 44. Creating the picture URL form with the new form wizard in IntelliJ. Figure 45. Creating the picture URL form with the new form wizard in Eclipse. Now adapt the content of the URL form according to Listing 44. As you can see, there is no roundtrip to a backend server and the form only contains a single editable field. Listing 44. The form to edit the picture URL @ClassId(\"3b30ebf1-e8fe-4dd3-8124-5f5038b1d47c\") public class PictureUrlForm extends AbstractForm { @Override protected String getConfiguredTitle() { return TEXTS.get(\"PictureURL\"); } public void startModify() { startInternal(new ModifyHandler()); } public UrlField getUrlField() { return getFieldByClass(UrlField.class); } public InfoField getInfoField() { return getFieldByClass(InfoField.class); } @Order(10) @ClassId(\"6c5e0da2-cf04-402f-9784-43e3a138796b\") public class MainBox extends AbstractGroupBox { @Order(10) @ClassId(\"fdcc7087-a693-45e8-a889-3725b0995558\") public class UrlBox extends AbstractGroupBox { @Order(10) @ClassId(\"32b71aa6-1109-4b39-996f-f35a677faa06\") public class UrlField extends AbstractStringField { @Override protected boolean getConfiguredLabelVisible() { (1) return false; } @Override protected boolean getConfiguredStatusVisible() { return false; } @Override protected int getConfiguredGridW() { return 2; } } @Order(20) @ClassId(\"999c32e9-ca87-4b5c-a907-29d7a7400abf\") public class InfoField extends AbstractHtmlField { @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected boolean getConfiguredStatusVisible() { return false; } @Override protected int getConfiguredGridW() { return 2; } @Override protected boolean getConfiguredGridUseUiHeight() { return true; } @Override protected void execInitField() { setValue(HTML.fragment(HTML.icon(Icons.Info), HTML.bold(\" \" + TEXTS.get(\"PleaseNote\") + \": \"), TEXTS.get(\"SecurityUrlRestrictedMsg\")).toHtml()); } } } @Order(20) @ClassId(\"4e15ce0e-502c-4290-aeca-e83359f3bc5b\") public class OkButton extends AbstractOkButton { } @Order(30) @ClassId(\"f278815a-f4cf-4e86-a057-66cb7ce43fc3\") public class CancelButton extends AbstractCancelButton { } } public class ModifyHandler extends AbstractFormHandler { (2) } } 1 No label is needed as the name of the field is already provided by the title of the form. 2 As no round trip to the backend is required the modify handler can remain empty. We can now add an \"Edit URL\" menu to the picture template field. The implementation of the edit context menu is provided in Listing 45. Listing 45. The \"Edit URL\" menu for the refactored picture field public abstract class AbstractUrlImageField extends AbstractImageField { @Order(10) @ClassId(\"99c1c12a-84d4-4c1a-a009-dfd2b7b55ded\") public class EditURLMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"EditURL\"); } @Override protected Set getConfiguredMenuTypes() { return CollectionUtility. hashSet( ImageFieldMenuType.ImageUrl, ImageFieldMenuType.ImageId, ImageFieldMenuType.Null); } @Override protected void execAction() { PictureUrlForm form = new PictureUrlForm(); String oldUrl = getUrl(); if (StringUtility.hasText(oldUrl)) { (1) form.getUrlField().setValue(oldUrl); } form.startModify(); form.waitFor(); (2) if (form.isFormStored()) { (3) setUrl(form.getUrlField().getValue()); getForm().touch(); } } } } 1 If we already have an URL for the picture prefill the url field in the form with its value. 2 Method waitFor makes the application wait until the user has closed the form. 3 Only store the new URL if the user has saved a new value. Storing the value will refresh the picture in the user interface. Based on the example with the picture field we have now walked through the complete process to turn normal fields into template fields. This process remains the same for refactoring container fields into template fields. To reduce the amount of copy & paste for the implementation of the company form in the next tutorial step, we recommend that you refactor the following fields into templates. Email field Address group box field Notes group box field You can follow the steps described in the previous section for the picture field. To be able to copy & paste the code in the following tutorial step you may use the following class names. AbstractEmailField for the email template field AbstractAddressBox for the address group template field AbstractNotesBox for the notes tab template field Note that both the AbstractAddressBox and the AbstractNotesBox need their own form data object, whereas the AbstractEmailField does not. Replacing the concrete fields with the template fields in the person form will result in a number of compile errors in the field getter methods of the person form. In the case of the \"Contacts\" application these getter methods are not needed and can simply be deleted. Moving from concrete fields to template fields also implies some minor changes as we have seen with the picture template field. Therefore make sure to modify the SQL statements in class SQLs accordingly. Replace token ':street' by ':addressBox.street' Replace token ':city' by ':addressBox.city' Replace token ':country' by ':addressBox.country' Replace token ':notes' by ':notesBox.notes' In this step of the \"Contacts\" tutorial we have covered two important concepts for implementing business applications. Validation of user input on the level of fields, components and the complete form Creation and usage of template fields to minimize copy & paste where possible The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. Using the created picture template field we can now update the image in the picture form as shown in Figure 46. Figure 46. The person form with the refactored picture template field including a menu (red square) and a URL edit form. In the next tutorial step we are going to implement the company form to enter and edit company information. For the creation of this form we can reuse the template fields that we have created. This section describes the implementation of the organization form. For the implementation of the organization form we can apply many of the concepts we have learned in the previous sections. As a result, the descriptions of this section can be kept on a much higher level. Figure 47. The sketch of the organization form layout. Considering the layout sketch for the organization form shown in Figure 47 we can already see how we can reuse the following fields / templates. The picture field The address box with street, city and country including its validation The email field with its validation The complete \"Notes\" tab For the remaining fields \"Name\", \"Homepage\" and \"Phone\" we will use simple string fields with matching label texts. We can now implement the company form according to the following steps. Expand folder src/main/java in the client module in the package explorer Select package org.eclipse.scout.contacts.client.organization and create a new form called \"OrganizationForm\" as we’ve done before Hit Enter for IntelliJ or click Finish for Eclipse After creating the initial form class using Scout’s new form wizard the form layout can be implemented according to Listing 46. Listing 46. The layout implementation of the organization form public class OrganizationForm extends AbstractForm { private String organizationId; @FormData public String getOrganizationId() { return organizationId; } @FormData public void setOrganizationId(String organizationId) { this.organizationId = organizationId; } @Override public Object computeExclusiveKey() { return getOrganizationId(); } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Organization\"); } @Override protected int getConfiguredDisplayHint() { return IForm.DISPLAY_HINT_VIEW; } @Order(10) @ClassId(\"e7efc084-fe7a-462f-ba23-914e58f7b82d\") public class MainBox extends AbstractGroupBox { @Order(10) @ClassId(\"b20aad47-e070-4f3c-bafc-ddbaa3ae2a4c\") public class GeneralBox extends AbstractGroupBox { @Order(10) @ClassId(\"d80625e3-b548-47e4-9cae-42d70aaa568f\") public class PictureField extends AbstractUrlImageField { (1) @Override protected int getConfiguredGridH() { (2) return 4; } @Override protected double getConfiguredGridWeightY() { (3) return 0; } } @Order(20) @ClassId(\"4c1a0dea-6c04-4cad-b26b-8d5cc1b786a9\") public class NameField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Name\"); } @Override protected boolean getConfiguredMandatory() { (4) return true; } } @Order(30) @ClassId(\"68008603-257f-45dc-b8ea-d1e066682205\") public class HomepageField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Homepage\"); } } } @Order(20) @ClassId(\"4e48c196-22e4-4e22-965a-5e305af5e6a9\") public class DetailsBox extends AbstractTabBox { @Order(10) @ClassId(\"c6c9e644-2ab3-436e-9d8a-bdcc5482eb5b\") public class ContactInfoBox extends AbstractGroupBox { @Override protected String getConfiguredLabel() { return TEXTS.get(\"ContactInfo\"); } @Order(10) @ClassId(\"2a10bd00-de56-4a97-a5b2-6a8a0aae925f\") public class AddressBox extends AbstractAddressBox { (5) } @Order(20) @ClassId(\"504a4845-d307-4238-a2e9-9e785c1477ac\") public class PhoneField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Phone\"); } } @Order(30) @ClassId(\"0b4d059d-ec81-4e93-9a99-2512d734ebac\") public class EmailField extends AbstractEmailField { (6) } } @Order(20) @ClassId(\"85f4dfb0-f375-4e90-be92-b59e9bc2ebcf\") public class NotesBox extends AbstractNotesBox { (7) } } @Order(30) @ClassId(\"97c3ceed-d005-47da-b44d-def4b07f92ab\") public class OkButton extends AbstractOkButton { } @Order(40) @ClassId(\"d63bfcd6-7464-4e4f-a07e-eb1173a77f8c\") public class CancelButton extends AbstractCancelButton { } } } 1 We reuse the picture template field to display the company logo. 2 We reduce the number of rows for the company logo compared to the person picture. 3 We do not allow the general box to grow or shrink vertically 4 We configure the company name field to be mandatory for an organization. 5 As-is reuse of the address template box. 6 As-is reuse of the email template field. 7 As-is reuse of the notes tab box. To be able to open the organization form we need to link the form to the user interface. Following the pattern for the person form we define the context menus \"Edit\" and \"New\" for the organization table and a menu \"Create new organization\" under the \"Quick access\" top level menu. The implementation of the organization form is completed by providing the logic to interact with the database in the organization service according to Listing 47. The technical setup exactly follows the implementation of the person service. Listing 47. The OrganizationService methods to load, create and update organization data. public class OrganizationService implements IOrganizationService { @Override public OrganizationFormData create(OrganizationFormData formData) { if (!ACCESS.check(new CreateOrganizationPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } if (StringUtility.isNullOrEmpty(formData.getOrganizationId())) { formData.setOrganizationId(UUID.randomUUID().toString()); } SQL.insert(SQLs.ORGANIZATION_INSERT, formData); return store(formData); } @Override public OrganizationFormData load(OrganizationFormData formData) { if (!ACCESS.check(new ReadOrganizationPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.selectInto(SQLs.ORGANIZATION_SELECT, formData); return formData; } @Override public OrganizationFormData store(OrganizationFormData formData) { if (!ACCESS.check(new UpdateOrganizationPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.update(SQLs.ORGANIZATION_UPDATE, formData); return formData; } } Method prepareCreate is not needed for the creation of a new organization and we can remove it from OrganizationService and IOrganizationService. Therefore, the implementation of the method execLoad in the new handler of the organization form can also be removed. With these implementations of the organization form and organization service the \"Contacts\" application can now also be used to maintain a list of organizations. In the sixth step of the \"Contacts\" tutorial we have added the Scout form to edit and create organizations. The focus of this part of the tutorial was on re-using previous work and applying the concepts that have been introduced in previous tutorial steps. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. As shown in Figure 48 company data can now be viewed and entered in the user interface. Figure 48. The \"Contacts\" application with the newly created organization form. In this step we modify the user interface to represent the 1:n relationship between organizations and persons. For the implementation of this 1:n relation we follow the Scout standard pattern. In the \"Contacts\" application any person can be assigned to a single organization. This fact is represented in the database schema created using the statement SQLs.PERSON_CREATE_TABLE. We will therefore need to be able to assign a person to an existing organization by selecting an existing organization in the field. For this we modify the organization field on the person to a smart field. To display the assigned organizations we will also modify the person page accordingly. In addition we would like to be able to easily access all persons assigned to a specific organization. Using the existing organization page we will add a child page that will then show all associated persons. This will result in a drill-down functionality for the organization page. The implementation of the features described above can be achieved by the the following steps. Creating an Organization Lookup Call (Creating an Organization Lookup Call) Using the Lookup Call in the Person Form and the Person Table (Using the Lookup Call in the Person Form and the Person Table) Link the Person Page to Organizations (Link the Person Page to Organizations) This last tutorial step ends with a short review in What have we achieved? Before we can change the organization field on the person form from a string field to a smart field we need a organization lookup call that provides the necessary data to the smartfield. We have been using this approach for the country field already. The difference to the lookup call for countries lies in the fact that we no longer have a static list of entries but need to fetch possible the organizations dynamically. We will therefore need to access the database to provide the data to the lookup call. As this is a common requirement the Scout framework comes with the base class AbstractSqlLookupService and a default mechanism to route lookup calls from the frontend sever to database calls on the backend server. The necessary infrastructure can be created using the Scout lookup wizard according to the steps described below. Expand folder src/main/java in the shared module in the package explorer Select package org.eclipse.scout.contacts.shared.organization For IntelliJ Create a new Scout lookup call by right-clicking on the package and selecting New → Scout Element → Lookup Call as shown in Figure 49 Enter \"Organization\" into the name field as shown in Figure 50 and press Enter. In the generated lookup call, change the generic from to . For Eclipse Hit Ctrl+N Enter \"lookup\" into the search field of the wizard selection and double click on proposal Scout LookupCall Use \"OrganizationLookupCall\" as class name Enter \"String\" as the key class and use service super class \"AbstractSqlLookupService\" in the wizard Verify that the fields in the wizard match the values provided in Figure 51 Click Finish Figure 49. Creating the OrganizationLookupCall in IntelliJ. Figure 50. Using the Scout lookup call wizard for creating class OrganizationLookupCall in IntelliJ. Figure 51. Using the Scout lookup call wizard for creating class OrganizationLookupCall in Eclipse. The Scout wizard creates the lookup class OrganizationLookupCall and the corresponding lookup service with the interface IOrganizationLookupService and its initial implementation OrganizationLookupService. Beside making sure the generic uses the correct data type (String), the service interface and the lookup call class can be used as provided by the Scout wizard. We will only need to provide some implementation for the lookup service. Listing 48 shows the generated code for the lookup call. Listing 48. The OrganizationLookupCall implemented by the Scout wizard. @ClassId(\"22789824-ad89-4208-bc11-5c08b56ce998\") public class OrganizationLookupCall extends LookupCall { private static final long serialVersionUID = 1L; @Override protected Class> getConfiguredService() { return IOrganizationLookupService.class; } } We are now ready to implement method getConfiguredSqlSelect of the organization lookup service. Open class OrganizationLookupService in the Java editor and change the implementation according to Listing 49. Listing 49. The OrganizationService methods to load, create and update organization data. public class OrganizationLookupService extends AbstractSqlLookupService implements IOrganizationLookupService { @Override protected String getConfiguredSqlSelect() { return SQLs.ORGANIZATION_LOOKUP; (1) } } 1 We only need to return a single SQL statement for lookup services that extend AbstractSqlLookupService The SQL statement that backs the lookup service is provided in Listing 50. Lookup services can provide data for three different use cases. The most straightforward case is the mapping of a key to a specific lookup row. Next is the case where the lookup service returns a number of lookup rows that match a provided substring and finally the case where the lookup service simply returns all available rows. Listing 50. The SQL statement to provide the data for the organization lookup service. String ORGANIZATION_LOOKUP = \"\" + \"SELECT organization_id, \" + \" name \" + \"FROM ORGANIZATION \" + \"WHERE 1 = 1 \" + \" AND organization_id = :key \" (1) + \" AND UPPER(name) LIKE UPPER(:text||'%') \" (2) + \"\"; (3) 1 The where clause to be used for a search for a specific key 2 The where clause to be used when some search text is provided 3 The where clause that defines the full set of lookup rows Now we can use the organization lookup call to transform the organization field in the \"Work\" tab of the person form into a smart field. To do this we open class PersonForm in the Java editor and navigate to its inner class WorkBox. Then, update the implementation of the OrganizationField according to Listing 51 Listing 51. The organization smart field in the \"Work\" tab backed by the OrganizationLookupCall. @Order(20) @ClassId(\"8e18a673-aca5-44a2-898f-60a744e4467a\") public class WorkBox extends AbstractGroupBox { @Order(20) @ClassId(\"cd4a7afd-e0ac-4c79-bf2e-819aa491db27\") public class OrganizationField extends AbstractSmartField { (1) @Override protected String getConfiguredLabel() { return TEXTS.get(\"Organization\"); } @Override (2) protected Class> getConfiguredLookupCall() { return OrganizationLookupCall.class; } } } 1 The OrganizationField now extends a Scout smart field 2 The smart field is backed by the newly created organization lookup call This change has the effect, that now we can assign an organization in the person form by typing a substring of the organizations name into the organization field. The conversion of the field into a smart field has the additional benefit that only valid organizations can be selected that respect the referential integrity defined by the database. As a next step we also modify the organization column of the person page. For this open class PersonTablePage in the Java editor and navigate to its inner class Table. Then, change the implementation of OrganizationColumn according to Listing 52. Listing 52. The organization smart column in the person page. @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { @Order(9) @ClassId(\"2e53e50e-5bd5-421e-8bca-fc50f27d790b\") public class OrganizationColumn extends AbstractSmartColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"Organization\"); } @Override protected Class> getConfiguredLookupCall() { return OrganizationLookupCall.class; } } } Using the created organization lookup calls we have now completed the modifications on the person form and also used the lookup call to display the a person’s organization in the person page. The next section will focus on the necessary modifications and new components to re-use the person page as a sub page of the organization page. In this section we will implement a drill-down functionality on the organization page. The goal is to let the user of the application expand a row in the organization page to provide access to the persons of the organization. Scout node pages are useful when we want to display different entities that are related to a specific entry in a parent page. In the \"Contacts\" demo application this mechanism is used to link both persons and events to an organization as shown in Figure 52. Note that this is a screenshot of the \"Contacts\" demo application, not the tutorial application that we are building here. Figure 52. A drill-down on an organization in the \"Contacts\" demo application provides access to related persons and events. In the \"Contacts\" demo application this hierarchical page structure is implemented as follows. Organization page implemented in class OrganizationTablePage A node page implemented in class OrganizationNodePage Person page implemented in class OrganizationTablePage Event page implemented in class EventTablePage For the \"Contacts\" tutorial application we will create the exact same structure but only add the person page as child page to the organization node page. To implement this sequence of linked pages we will follow the dependencies of the linked classes. We start with adapting method getPersonTableData in the person service by adding an organization id parameter. Using this parameter we can then restrict the person search to the subset that is linked to the specified organization. For this change we first update the person service interface as shown in Listing 53. Listing 53. The updated method getPersonTableData for the person service interface. @ApplicationScoped @TunnelToServer public interface IPersonService { PersonTablePageData getPersonTableData(SearchFilter filter, String organizationId); (1) PersonFormData create(PersonFormData formData); PersonFormData load(PersonFormData formData); PersonFormData store(PersonFormData formData); } 1 Add parameter organizationId We now adapt the method implementation in the person service according to Listing 54. Listing 54. Method getPersonTableData to access the database and map the data into a page data object. public class PersonService implements IPersonService { @Override public PersonTablePageData getPersonTableData(SearchFilter filter, String organizationId) { PersonTablePageData pageData = new PersonTablePageData(); StringBuilder sql = new StringBuilder(SQLs.PERSON_PAGE_SELECT); // if an organization is defined, restrict result set to persons that are linked to it if (StringUtility.hasText(organizationId)) { sql.append(String.format(\"WHERE LOWER(organization_id) LIKE LOWER('%s') \", organizationId)); } sql.append(SQLs.PERSON_PAGE_DATA_SELECT_INTO); SQL.selectInto(sql.toString(), new NVPair(\"page\", pageData)); return pageData; } } Having modified the person service we add a organization id property to the person page. We can then populate this property when the person page is attached to the organization node page. Finally, we can use in method execLoadData according to Listing 55. Listing 55. Add the possibility to restrict the list of persons to those assigned to a specific organization. @PageData(PersonTablePageData.class) @ClassId(\"23c10251-66b1-4bd6-a9d7-93c7d1aedede\") public class PersonTablePage extends AbstractPageWithTable { private String organizationId; (1) public String getOrganizationId() { return organizationId; } public void setOrganizationId(String organizationId) { this.organizationId = organizationId; } @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IPersonService.class) .getPersonTableData(filter, getOrganizationId())); (2) } @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { @Order(20) @ClassId(\"8ac358f2-de17-4b2b-93f3-73e21a7415d8\") public class NewMenu extends AbstractMenu { @Override protected void execAction() { PersonForm form = new PersonForm(); form.getOrganizationField().setValue(getOrganizationId()); (3) form.addFormListener(new PersonFormListener()); // start the form using its new handler form.startNew(); } } } } 1 This property lets the person page remember an organization key 2 Provides the organization key to the person search on the backend server 3 If the user creates a new person below an organization pre-fill the corresponding field In the cases where the modified person page is shown as a child page of the organization page we can now improve the usability of the page’s new menu. When creating a person under an existing organization we create the new person with a pre-filled organization id. See the modified execAction method in NewMenu of Listing 55. The next step in the setup of the page hierarchy is the creation of the organization node page. Node pages allow to define a list of child pages that typically represent different entities. As mentioned before we will only have the person page as a child page in the \"Contacts\" tutorial application. To create the organization node page follow the steps listed below. Expand folder src/main/java in the client module in the package explorer Select package org.eclipse.scout.contacts.client.organization For IntelliJ Create a new Scout page by right-clicking on the package and selecting New → Scout Element → Page as we’ve done before Enter \"OrganizationNode\" into the name field and press Enter Finally, rename \"OrganizationNodeTablePage\" to \"OrganizationNodePage\" For Eclipse Hit Ctrl+N and enter \"scout page\" into the search field of the wizard selection and double click on proposal Scout Page Add \"Organization\" to the class name field Switch the super class field to \"AbstractPageWithNodes\" Verify that the fields in the wizard match the values provided in Figure 53 Click Finish Figure 53. Creating the organization node page. After the wizard has created the initial implementation of the node page, open class OrganizationNodePage in the Java editor and adapt its implementation according to Listing 56. Listing 56. The complete implementation of the class OrganizationNodePage. @ClassId(\"f074181d-462a-40dc-b7cd-46bb4e50e7fb\") public class OrganizationNodePage extends AbstractPageWithNodes { private String organizationId; (1) public String getOrganizationId() { return organizationId; } public void setOrganizationId(String organizationId) { this.organizationId = organizationId; } @Override (2) protected void execCreateChildPages(List> pageList) { PersonTablePage personTablePage = new PersonTablePage(); personTablePage.setOrganizationId(getOrganizationId()); (3) pageList.add(personTablePage); } } 1 The organization id property that represents the selected organization in the parent page 2 Method execCreateChildPages defines the list of child pages 3 Define the organization id property for the person child page We have now created an organization node page that contains a person page as its child page. The only missing step to create the discussed page hierarchy is the link between the organization page with the organization node page. Create this missing link by adding method execCreateChildPage to the organization page as shown in Listing 57. Listing 57. Add the organization node page as a child page to the organization page. @PageData(OrganizationTablePageData.class) @ClassId(\"18f7a78e-0dd0-4e4e-9234-99892bb4459f\") public class OrganizationTablePage extends AbstractPageWithTable { @Override protected IPage execCreateChildPage(ITableRow row) { OrganizationNodePage childPage = new OrganizationNodePage(); childPage.setOrganizationId(getTable().getOrganizationIdColumn().getValue(row)); return childPage; } } The difference between Scout table pages and node pages is also reflected in the different signatures of AbstractPageWithTable.execCreateChildPage and AbstractPageWithNodes.execCreateChildPages. Table pages can have a single child page while node pages may contain a list of child pages. In the seventh step of the \"Contacts\" tutorial we have introduced a typical Scout user interface pattern for 1:n relationships. We have created a dynamic lookup call and used the lookup call to provide the data for a smart field and a smart column. To implement a drill-down functionality for the organization table we have created a page hierarchy using the existing organization page and person page. To link the two table pages we have also created and integrated a Scout node page. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. As shown in Figure 54 the organization specific person data is now presented in a hierarchical form in the navigation area of the application. Figure 54. The linked person page only shows persons related to the parent organization page. If you want to add the created application to a Git repository there might some configurations be helpful. If there are no plans to use Git, this chapter can be skipped. E.g. it is best practice to exclude some files from adding to a Git repository. These exclusions can be configured by creating a file named .gitignore in the root folder of the repository (see the Git Documentation for details). Here is a sample file that might be used as starting point: # Git *.orig # Maven target/ .surefire-* .flattened-pom.xml # Node node_modules/ test-results/ # Do not check in any log files *.log","title":"Eclipse Scout One Day Tutorial","component":"scout-docs","version":"23.1","name":"one-day-tutorial","url":"/scout-docs/stable/getstarted/one-day-tutorial.html","titles":[{"text":"The “Contacts” Application","hash":"sec-my_contacts_guide","id":1},{"text":"Tutorial Overview","hash":"sec-contacts_overview","id":2},{"text":"Setting up the Initial Project","hash":"sec-contacts_initial_project","id":3},{"text":"Creating the initial Codebase","hash":"sec-contacts_initial_codebase","id":4},{"text":"Removing unnecessary Components","hash":"sec-contacts_remove_stuff","id":5},{"text":"Changes to Class WorkOutline","hash":"sec-contacts_change_workoutline","id":6},{"text":"Changes to Class Desktop","hash":"sec-contacts_change_desktop","id":7},{"text":"What have we achieved?","hash":"sec-contacts_summary","id":8},{"text":"Adding the Person and Organization Page","hash":"sec-contacts_pages","id":9},{"text":"Creating additional Packages","hash":"sec-contacts_creating_person_package","id":10},{"text":"Creating the Country Lookup Call","hash":"sec-contacts_country_lookup_call","id":11},{"text":"Creating the Person Page","hash":"sec-contacts_creating_person_page","id":12},{"text":"Adding Table Columns to the Page","hash":"sec-contacts_adding_page_columns","id":13},{"text":"Link the Person Page to the Contacts Outline","hash":"sec-contacts_link_person_page","id":14},{"text":"Adding the Company Page","hash":"sec-contacts_adding_company_page","id":15},{"text":"What have we achieved?","hash":"sec-contacts_summary_step_2","id":16},{"text":"Creating and Accessing the Database","hash":"sec-contacts_jdbc","id":17},{"text":"Adding the Infrastructure","hash":"sec-contacts_jdbc_infra","id":18},{"text":"Scout Config Properties","hash":"sec-contacts_jdbc_properties","id":19},{"text":"The SQL Service and SQL Statements","hash":"sec-contacts_jdbc_sql","id":20},{"text":"The Database Setup Service","hash":"sec-contacts_jdbc_initial_db","id":21},{"text":"What is missing?","hash":"sec-contacts_jdbc_starting","id":22},{"text":"Fetching Organization and Person Data","hash":"sec-contacts_jdbc_fetching_data","id":23},{"text":"What have we achieved?","hash":"sec-contacts_jdbc_summary","id":24},{"text":"Adding a Form to Create/Edit Persons","hash":"sec-contacts_forms","id":25},{"text":"Designing the Person Form","hash":"sec-contacts_form_design","id":26},{"text":"Implementing the Form","hash":"sec-contacts_form_implement","id":27},{"text":"Adding a Gender Code Type","hash":"sec-contacts_form_code","id":28},{"text":"Adding Form Fields","hash":"sec-contacts_form_add_fields","id":29},{"text":"Person Form Handler and Person Service","hash":"sec-contacts_form_integrate_service","id":30},{"text":"What have we achieved?","hash":"sec-contacts_forms_summary","id":31},{"text":"Form Field Validation and Template Fields","hash":"sec-contacts_fields","id":32},{"text":"Simple Form Field Validation","hash":"sec-contacts_field_validation","id":33},{"text":"Complex Form Field Validation","hash":"sec-contacts_field_validation_complex","id":34},{"text":"Creating Template Fields","hash":"sec-contacts_form_templatefields","id":35},{"text":"Adding a simple URL Input Form to the Picture Field","hash":"sec-contacts_form_urleditform","id":36},{"text":"More Template Fields","hash":"sec-contacts_form_templatefields_more","id":37},{"text":"What have we achieved?","hash":"sec-contacts_form_templatefields_summary","id":38},{"text":"Adding the Company Form","hash":"sec-contacts_form_add_company","id":39},{"text":"What have we achieved?","hash":"sec-contacts_form_rest_summary","id":40},{"text":"Linking Organizations and Persons","hash":"sec-contacts_link_organization_person","id":41},{"text":"Creating an Organization Lookup Call","hash":"sec-contacts_company_lookup_call","id":42},{"text":"Using the Lookup Call in the Person Form and the Person Table","hash":"sec-contacts_modify_person_form_and_page","id":43},{"text":"Link the Person Page to Organizations","hash":"sec-contacts_organization_node_page","id":44},{"text":"What have we achieved?","hash":"sec-contacts_link_person_organization_summary","id":45},{"text":"Git configuration","hash":"sec-source_control","id":46}]},"91":{"id":91,"text":"This chapter provides various small technical guides to very specific Scout subjects.","title":"How-Tos","component":"scout-docs","version":"23.1","name":"how-tos","url":"/scout-docs/stable/howtos/how-tos.html","titles":[]},"92":{"id":92,"text":"This document describes all relevant changes from Eclipse Scout 22.0 to Eclipse Scout 23.1. If existing code has to be migrated, instructions are provided here. Scout Runtime artifacts for Java are distributed using Maven Central: 23.1.8 on Maven Central 23.1.8 on mvnrepository.com Usage example in the parent POM of your Scout application: org.eclipse.scout.rt org.eclipse.scout.rt 23.1.8 pom import Scout Runtime artifacts for JavaScript are distributed using npm: Scout Core Runtime All official Scout JavaScript packages Usage example in your package.json: { \"name\": \"my-module\", \"version\": \"1.0.0\", \"devDependencies\": { \"@eclipse-scout/cli\": \"23.1.8\", \"@eclipse-scout/releng\": \"^22.0.0\" }, \"dependencies\": { \"@eclipse-scout/core\": \"23.1.8\", \"jquery\": \"3.6.0\" } } The pre-built Scout JavaScript assets are also available using a CDN (e.g. to be directly included in a html document): https://www.jsdelivr.com/package/npm/@eclipse-scout/core?path=dist Scout officially supports IntelliJ IDEA and Eclipse for Scout Developers. You can download the Scout plugin for IntelliJ IDEA from the JetBrains Plugin Repository or you can use the plugins client built into IntelliJ IDEA. Please refer to the IntelliJ Help on how to install and manage plugins. You can download the complete Eclipse IDE with Scout SDK included here: Eclipse for Scout Developers To install the Scout SDK into your existing Eclipse IDE, use this P2 update site: https://download.eclipse.org/scout/releases Scout 23.1 requires at least Node 18.12.1. Older versions will not work. A new version can be obtained from the Node download page. Scout now requires at least pnpm 7.16.0. You can install it as described on the pnpm installation page. To update your application the following steps might be required: Update the version of the maven_rt_plugin_config-master in your pom.xml files to the newest 23.1.x release. See Maven central for a list of versions available. Update the Scout versions (package.json and pom.xml) as shown in Obtaining the Latest Version. If you are using Eclipse and web-service providers, update the .factorypath files as shown in JAX-WS Appendix. The support for the Maven build plugin org.kuali.maven.plugins:properties-maven-plugin has been replaced with org.codehaus.mojo:properties-maven-plugin. Update the groupId accordingly. Please consult the plugin documentation for the old and the new plugin for instruction on how to migrate the plugin configuration. The dependency to org.jboss:jandex has been renamed to io.smallrye:jandex and the corresponding build plugin from org.jboss.jandex:jandex-maven-plugin to io.smallrye:jandex-maven-plugin. In case one of these artifacts is used in your code, update the groupId accordingly. Perform the following migration in all your package.json files: If you specify the minimum engines versions, please update them as follows: { \"engines\": { \"node\": \">=18.12.1\", \"npm\": \">=9.1.1\", \"pnpm\": \">=7.16.0\" } } Update the following dependencies (if existing in your application): \"jasmine-core\": \"4.5.0\" \"karma\": \"6.4.1\" \"eslint\": \"8.27.0\" Remove the following dependencies: \"@babel/core\" \"@babel/eslint-parser\" \"@babel/eslint-plugin\" Replace the content of your .eslintrc.js with the following: module.exports = { extends: '@eclipse-scout' }; In all your index.js files, replace the last line as follows: Listing 1. From window.yourNamespace = Object.assign(window.yourNamespace || {}, self); Listing 2. To ObjectFactory.get().registerNamespace('yourNamespace', self); See the JsDoc of the registerNamespace method if you are curious what it does. As described in the Eclipse Scout Release Notes, it is now possible to use class references for the objectType. Even though the string based style still works and a migration is not necessary, the class reference style is the preferred way for the future. We highly recommend you migrate your code, so you can benefit of the improved type safety and code completion. To do so, you can use the Scout migration tool, which migrates the strings and also tries to add the required imports automatically. Alternatively, you can do it by yourself using your IDE and Find/Replace. To use the migration tool, follow the steps described here: @eclipse-scout/migrate If the above script somehow does not work for you, you can do the migration by yourself as follows: Find and replace all occurrences of scout.create(), objectType:, lookupCall: and logicalGrid: (use Ctrl-Shift-R in IntelliJ and enable Regex). Find: scout.create\\('(.*\\.)?(.*)' Replace: scout.create\\($2 Find: objectType: '(.*\\.)?(.*)' Replace: objectType: $2 Find: lookupCall: '(.*\\.)?(.*)' Replace: lookupCall: $2 Find: logicalGrid: '(.*\\.)?(.*)' Replace: logicalGrid: $2 The regex considers objectTypes with and without namespace. Add imports Now we need to add the required imports. You can either manually add them, but with a lot of files it is a tedious task. Unfortunately, IntelliJ does not provide a possibility to automatically add all missing imports. But there is a trick: resolve multiple inspections at once using code analysis. Start the action Run inspection by name and select the inspection Unresolved JavaScript variable. Figure 1. Start Action Figure 2. Select inspection Select Uncommitted files and disable all inspection options, because the inspection is not limited to missing imports. Click OK to run the analysis. Figure 3. Run Action In the result view, select one or more problems and click the button Missing import statement. Note: Sometimes Missing import statement is located in a drop down called Apply quick fixes to all the problems. Note: Even though we disabled all inspection options, there may still be problems other than Missing import statement. If that is the case, resolving multiple problems is not possible unless you unselect these problems including theirs parent node. Figure 4. Resolve problems Figure 5. Button in drop down Finally, you need to verify, whether the imports are correct. Please make sure all imports are present for every object type and the classes are imported from a module and not a single file. Listing 3. Good import import {Button, GroupBox} from '@eclipse-scout/core'; Listing 4. Bad import import Button from '@eclipse-scout/core/src/form/fields/button/Button.js'; Since there are now constants for menu types, you can replace the string literals and use these constants. The migration can be done automatically using the migration tool. If you already used it to migrate the object type (ObjectType as Class Reference (Scout JS)), the menu types have probably already been migrated. Otherwise, follow the instructions described here: @eclipse-scout/migrate Along with the TypeScript migration, we had to adjust the API a little and removed some obsolete code. Please check if your JavaScript uses the mentioned methods and adjust it accordingly. The widget property of WidgetTooltip has been renamed to content. Together with the property itself the corresponding setter has been renamed from setWidget to setContent. The widget property on WidgetPopup classes (and all its subclasses) has been renamed to content: Scout JS Update the widget property in all JS models creating WidgetPopups from widget to content. Rename the _renderWidget method on subclasses of WidgetPopup to _renderContent. setWidget on WidgetPopups has been renamed to setContent. Scout Classic IWidgetPopup#PROP_WIDGET has been renamed to IWidgetPopup#PROP_CONTENT. IWidgetPopup#getWidget has been renamed to IWidgetPopup#getContent. AbstractWidgetPopup#getConfiguredWidget as been renamed to AbstractWidgetPopup#getConfiguredContent. AbstractWidgetPopup#createWidget as been renamed to AbstractWidgetPopup#createContent. AbstractWidgetPopup#setWidget as been renamed to AbstractWidgetPopup#setContent. The model property on ProposalChooser class (and all its subclasses) has been renamed to content: Scout JS Rename the _createModel method on subclasses of ProposalChooser to _createContent. Rename the _renderModel method on subclasses of ProposalChooser to _renderContent. The methods filter and filterAccordingToSelection in menus.js now have an options-parameter. This parameter combines the former parameters onlyVisible, enableDisableKeyStrokes and notAllowedTypes. The following are two migration examples: Listing 5. Old let allowedTypes = ['Example.MenuType'], onlyVisible = true, enableDisableKeyStrokes = false; // example 1 menus.filter(this.menus, allowedTypes, true, false); // example 2 menus.filter(this.menus, allowedTypes, onlyVisible, enableDisableKeyStrokes); Listing 6. New let allowedTypes = ['Example.MenuType'], onlyVisible = true, enableDisableKeyStrokes = false; // example 1 menus.filter(this.menus, allowedTypes, { onlyVisible: true, enableDisableKeyStrokes: false }); // example 2 menus.filter(this.menus, allowedTypes, {onlyVisible, enableDisableKeyStrokes}); The following functions have been removed because they are not in use anymore. removeThis suppressEventIfDisabled colorOpacity copyCssIfGreater backupSelection restoreSelection onSingleOrDoubleClick The following functions have been renamed widthToContent → cssWidthToContentAnimated TableFilter.js has been removed because it has no benefits. With TypeScript, the interface Filter should be used instead. With JavaScript, extends from TableFilter can be removed. The following functions have been removed because they are not in use anymore. createAdapterModel stripCommentsFromJson definedProperty sameProperty JQuery.triggerMouseMove JQuery.triggerWithPosition The following functions have been renamed. widgetCloneProperty → toHaveClonedWidgetProperty The jquery-plugin jqueryExtensions has been refactored to a ES6 module to avoid pollution (of code completion) of the JQuery object outside test environment. In the rare case you used these functions for testing, you need to import them now, the JQuery-object does not contain them anymore. The following model properties have been removed because they are not in use. WidgetModel.loadJsonModel TooltipSupportOptions.$parent Scout JS files cannot be imported directly anymore and need to be imported from the scout module. You are probably using the correct import style already, since file based import was bad practise anyway. In case there are file based imports, just adjust them as follows: Listing 7. Old import Table from '@eclipse-scout/core/src/table/Table' Listing 8. New import {Table} from '@eclipse-scout/core' The following modules are affected: @eclipse-scout/core/src → @eclipse-scout/core @eclipse-scout/core/src/testing → @eclipse-scout/core/testing This applies only to imports of js files. Imports to less files should stay untouched (for now). Up to release 2022 the support for typed identifiers (IId) was limited to root ids wrapping one specific Java identifier. The support was extended to include composite ids wrapping multiple java identifiers. As part of this new feature a refactoring of the existing id classes was done which may require some migration steps: IId was typed with a generic parameter which was removed and moved to AbstractRootId. If you need this generic parameter, change your code to use AbstractRootId instead of IId or consider removing the generic parameter at interface-level in your code as well. IId up to release 2022 were limited to wrap a single value. If your code rely on a single wrapped value, replace IId by IRootId and AbstractId by AbstractRootId. If you don’t change your code type and use IId you implicitly add support for composite types in your APIs. Some factory methods for building ids and serialization where moved between classes and/or renamed (the serialized string representation is identical): IdExternalFormatter.getTypeName() → IdInventory.getTypeName() IdExternalFormatter.getIdClass() → IdInventory.getIdClass() IdExternalFormatter.toExternalForm() → IdCodec.toQualified() IdExternalFormatter.fromExternalForm() → IdCodec.fromQualified() IdExternalFormatter.fromExternalFormLenient() → IdCodec.fromQualifiedLenient() IId.unwrapAsString() → IdCodec.toUnqualified() (Note: Unwrap as string is still available for IRootId but according to the javadoc should only be used for logging and debugging purpose) IdFactory.createFromString() → IdCodec.fromUnqualified() Completeness test for ids was improved. Use AbstractIdStructureTest as base for id completeness tests in own maven modules. Implementations of AbstractStringId are required to create a null-id instance if invoked with an empty string (e.g. use if (StringUtility.isNullOrEmpty(id)) { return null; } in your static of() method, see FixtureStringId as example) The former base classes AbstractUuIdStructureTest and AbstractStringIdStructureTest were integrated and removed Because the DoStructureMigrator executes value migrations too (IDoValueMigrationHandler), several renamings were applied. Classes: DoStructureMigrationContext → DataObjectMigrationContext DoStructureMigrationCountingPassThroughLogger → DataObjectMigrationCountingPassThroughLogger DoStructureMigrationInventory → DataObjectMigrationInventory DoStructureMigrationPassThroughLogger → DataObjectMigrationPassThroughLogger DoStructureMigrationStatsContextData → DataObjectMigrationStatsContextData DoStructureMigrator → DataObjectMigrator IDoStructureMigrationGlobalContextData → IDataObjectMigrationGlobalContextData IDoStructureMigrationLocalContextData → IDataObjectMigrationLocalContextData IDoStructureMigrationLogger → IDataObjectMigrationLogger Test classes: TestDoStructureMigrationInventory → TestDataObjectMigrationInventory TestDoStructureMigrator → TestDataObjectMigrator Methods: DataObjectMigrationInventory#getMigrationHandlers → #getStructureMigrationHandlers DataObjectMigrationInventory#getDoMigrationContextValues → #getDoStructureMigrationTargetContextDatas Removals (see deprecation warning in 22.0 for further information): DoStructureMigrator#migrateDataObject(DataObjectMigrationContext, IDataObject) DoStructureMigrator#migrateDataObject(DataObjectMigrationContext, IDataObject, IDataObjectMigrationLocalContextData…​) DoStructureMigrator#migrateDataObject(DataObjectMigrationContext, IDataObject, NamespaceVersion, IDataObjectMigrationLocalContextData…​) TestDoStructureMigrationInventory#TestDoStructureMigrationInventory(List, Collection, Collection>, IDoStructureMigrationHandler…​) The property scout.rest.useScoutApacheConnector was removed in release 23.1. The ScoutApacheConnector implementation is the new default handler to connect the Apache HTTP client for Jersey REST calls. Remove config property scout.rest.useScoutApacheConnector=…​ from all your config files.","title":"Eclipse Scout Migration Guide","component":"scout-docs","version":"23.1","name":"migration-guide","url":"/scout-docs/stable/migration/migration-guide.html","titles":[{"text":"About This Document","hash":"about-this-document","id":1},{"text":"Obtaining the Latest Version","hash":"obtaining-the-latest-version","id":2},{"text":"Scout Runtime for Java","hash":"scout-runtime-for-java","id":3},{"text":"Scout Runtime for JavaScript","hash":"scout-runtime-for-javascript","id":4},{"text":"IDE Tooling (Scout SDK)","hash":"ide-tooling-scout-sdk","id":5},{"text":"IntelliJ IDEA","hash":"intellij-idea","id":6},{"text":"Eclipse","hash":"eclipse","id":7},{"text":"New 3rd Party requirements","hash":"new-3rd-party-requirements","id":8},{"text":"Update of other 3rd Party JavaScript libraries","hash":"update-of-other-3rd-party-javascript-libraries","id":9},{"text":"RegisterNamespace","hash":"registernamespace","id":10},{"text":"ObjectType as Class Reference (Scout JS)","hash":"objecttype-as-class-reference-scout-js","id":11},{"text":"Alternative Way to Migrate ObjectType","hash":"alternative-way-to-migrate-objecttype","id":12},{"text":"MenuTypes as Constants (Scout JS)","hash":"menutypes-as-constants-scout-js","id":13},{"text":"Scout JS API Changes","hash":"scout-js-api-changes","id":14},{"text":"Rename WidgetTooltip.widget","hash":"rename-widgettooltip-widget","id":15},{"text":"Rename WidgetPopup.widget (Scout JS & Scout Classic)","hash":"rename-widgetpopup-widget-scout-js-scout-classic","id":16},{"text":"Rename ProposalChooser.model","hash":"rename-proposalchooser-model","id":17},{"text":"Options-parameter for filter-methods in menus.js","hash":"options-parameter-for-filter-methods-in-menus-js","id":18},{"text":"JQuery-Scout","hash":"jquery-scout","id":19},{"text":"Table","hash":"table","id":20},{"text":"Testing / karma-jasmine-scout","hash":"testing-karma-jasmine-scout","id":21},{"text":"Various Clean Up","hash":"various-clean-up","id":22},{"text":"JS Build Improvements","hash":"js-build-improvements","id":23},{"text":"Imports","hash":"imports","id":24},{"text":"IId types, IdFactory and IdExternalFormatter","hash":"iid-types-idfactory-and-idexternalformatter","id":25},{"text":"Renaming of DoStructureMigration to DataObjectMigration","hash":"renaming-of-dostructuremigration-to-dataobjectmigration","id":26},{"text":"Scout REST Client: Removed property scout.rest.useScoutApacheConnector","hash":"scout-rest-client-removed-property-scout-rest-usescoutapacheconnector","id":27}]},"93":{"id":93,"text":"The latest version of this release is: 23.1.8. You can see the detailed change log on GitHub. Coming from an older Scout version? Check out the Eclipse Scout Migration Guide for instructions on how to obtain the new version and upgrade existing applications. The demo applications for this version can be found on the features/version/23.1.8 branch of our docs repository on GitHub. If you just want to play around with them without looking at the source code, you can always use the deployed versions: https://scout.bsi-software.com/contacts/ https://scout.bsi-software.com/widgets/ https://scout.bsi-software.com/jswidgets/ Scout has changed its license from the deprecated EPL-1.0 license to EPL-2.0. Usually this has no impact for your project. For details please consult the EPL FAQ in particular the section with the major changes. Scout 23.1 contains many improvements for Scout JS developers. The goal was to make the development easier, more efficient and more fun. Please read the following chapters to learn how we did it. One major addition in this release is TypeScript support. We migrated the complete Scout JS code base to TypeScript. This means the Scout API is now fully typed. We enhanced the JS build, so you can write TypeScript yourself in your project. This gives you many benefits: More efficient development Typing allows your IDE to better assist with code completion during development and to only suggest methods and properties for an object that actually exist. Figure 1. Better Code Completion Easier entry With better code completion and clear method signatures, a not-so-experienced JavaScript developer can more easily get up to speed and understand the relationships in the code. More confidence when updating If a used API has changed, the code turns red and the build fails. More confidence during development Incorrect use of an API or code in general is detected at an early stage. The developer gets more confidence that his code will work. Figure 2. Compile Errors Widgets can be configured in many ways using the available properties. Until now, it was not obvious which properties were available and what they do. To improve that, every widget now comes with a well-defined model which contains all available properties including a description. The model is a TypeScript interface and named after the widget with the suffix Model. For example, you will find the model of a Menu under the name MenuModel. Figure 3. Widget Model The models can not only be used for documentation purposes, TypeScript and Scout SDK use them as well for code completion and type checks. Figure 4. Widget Model Code Completion Most of the widgets can trigger events that can be used to react to user interactions. Until now, it was not obvious which events were available. To improve that, every widget now comes with a well-defined event map which contains all available events. The event map is a TypeScript interface and named after the widget with the suffix EventMap. For example, you will find the event map of a Menu under the name MenuEventMap. These event maps are used by TypeScript to provide code completion for the event name when adding an event handler: Figure 5. Event Name Completion You also get the correct type of the event itself including its members in the handler: Figure 6. Typed Event Retrieving a widget is typically done by using this.widget('id'). The result of that function is a generic Widget, so it is not possible to call a method of a specific widget without casting (at least with TypeScript). To do the type casting, you can either specify the return type directly at the time of usage. Listing 1. Using the second parameter import {Menu} from '@eclipse-scout/core'; let menu = this.widget('YourId', Menu); Listing 2. Cast manually (TypeScript) import {Menu} from '@eclipse-scout/core'; let menu = this.widget('YourId') as Menu; Or you can use widget maps. A widget map is an interface that maps the ids of the widgets to their type. This allows TypeScript to determine the return type automatically. Figure 7. Typed widget function Scout SDK takes care of creating the widget maps, so you don’t have to write them manually. It is now possible to use a class reference as objectType. An objectType is typically used when creating a new object using scout.create(objectType) or when defining a model. Using a class reference instead of a string will make the development easier because the IDE knows about the actual type and can provide code completion and other assistance. It may even improve the tree shaking process of the bundler (webpack). Because using a class reference requires an import, the bundler automatically includes the imported module. So, scout.create('Button', {parent: this}); becomes this: import {Button} from '@eclipse-scout/core'; scout.create(Button, {parent: this}); And this export default () => ({ objectType: 'Form', rootGroupBox: { objectType: 'GroupBox' } }); becomes this: import {Form, GroupBox} from '@eclipse-scout/core'; export default () => ({ objectType: Form, rootGroupBox: { objectType: GroupBox } }); Please see the Migration Guide for migration assistance. Constants have been added for all menu types of Calendar ImageField Planner TabBox Table Tree ValueField Instead of using string literals in e.g. a MenuModel one can use these constants now. Therefore, this import {Menu} from '@eclipse-scout/core'; { id: 'ExampleMenu', text: 'Example', objectType: Menu, menuTypes: [ 'Table.SingleSelection' ] } becomes this: import {Menu, Table} from '@eclipse-scout/core'; { id: 'ExampleMenu', text: 'Example', objectType: Menu, menuTypes: [ Table.MenuTypes.SingleSelection ] } Menu type support has been added to the ValueField and the ImageField. This means that e.g. the ValueField will display different menus whether a value is set or not. For more information about the menuType support of ValueField and ImageField see Menu Types. It is normal that code changes from time to time even on a larger scale. Since code migration is often a tedious task, any automation is welcome. With this release there are several code migration tasks, which are mostly optional, but recommended. That is why we tried to automate as much as possible and created a tool you can use as well. The main purpose of the tool is to migrate your JavaScript code to TypeScript, but other migration tasks make use of the tool as well. Instructions for these tasks can be found in the Eclipse Scout Migration Guide. If you would like to migrate your existing code to TypeScript, the migration tool will certainly help you. But be aware, that the majority of the work, which is adding types, will need to be done manually. Migrating to TypeScript is not required, you can still use JavaScript or write only new code with TypeScript. However, if you are a library developer, we recommend migrating to TypeScript to make the usage of the library easier. Detailed instruction for the migration can be found here: @eclipse-scout/migrate If you plan to use TypeScript for new code without migrating your existing code base, you just need to add a tsconfig.json like described here: @eclipse-scout/tsconfig If code is written with TypeScript, it needs to be transpiled to JavaScript before it can be used. Because this task takes some time, it should not be done by the project using a TypeScript library but by the library itself. This is true for Scout as well. Therefore, Scout 23.1 is shipped with prebuilt JavaScript code. To make sure your build uses the prebuilt version, your import statements need to be correct. Please have a look at the migration guide for details: Migration Guide. If you are a library developer, you should consider doing the same. To do so, you can use the support provided by Scout’s build tooling as described here: Authoring Libraries. The Scout build now uses ESBuild for the minification process. This reduces the duration and memory consumption of the production build a lot, which is especially beneficial if your build runs in a cloud environment with limited hardware. As already mentioned in TypeScript Support, you can now use TypeScript for your Scout JS project or when writing custom widgets for Scout Classic. All you have to do is to create a tsconfig.json that extends from the default configuration provided by Scout as explained here: @eclipse-scout/tsconfig The Scout build will transpile all files ending with *.ts and will start a separate process to check if the types are correct. That way you will not be blocked by the type checking, but you will still be informed if some types are wrong. We added linting support for TypeScript files. If you are already using Scout’s eslint module (@eclipse-scout/eslint), you’ll get the linting automatically. In previous versions several ways were used to create/use a node identfier (e.g. to identify a specific client/backend server): A typed class NodeId existed, the current identifier was accessed using org.eclipse.scout.rt.dataobject.id.NodeId.current() Node identifiers could be accessed as String using org.eclipse.scout.rt.platform.context.NodeIdentifier.get() And another node identifier (default implementation random UUID) could be accessed using org.eclipse.scout.rt.shared.INode#ID As of version 23.1 the typed org.eclipse.scout.rt.dataobject.id.NodeId is used wherever possible, the application scoped bean org.eclipse.scout.rt.platform.context.NodeIdentifier is still used for the computation of this typed NodeId. The get() method returning a String has been deprecated, the interface org.eclipse.scout.rt.shared.INode has been removed. In previous versions the IId interface was typed with a generic WRAPPED_TYPE extends Comparable. To be able to use the IId interface as general root for any kind of identifiers without having to deal with a concrete generic type, the generic type definition was removed and moved to the default implementation AbstractRootId and the typed sub-interfaces IUuid, IStringId and ILongId. As new feature IIds may consist of multiple wrapped components (e.g. composite ids). Use ICompositeId and AbstractCompositeId as base to build own composite types. Based on the adapted serialization mechanism (see IdFactory and IdCodec` classes) composite ids may also be used in data objects and REST APIs like the existing root ids. Listing 3. Example composite id based on an example string id and an example uuid @IdTypeName(\"example.ExampleCompositeId\") public final class ExampleCompositeId extends AbstractCompositeId { private static final long serialVersionUID = 1L; private ExampleCompositeId(ExampleStringId c1, ExampleUuId c2) { super(c1, c2); } @RawTypes public static ExampleCompositeId of(String c1, UUID c2) { if (StringUtility.isNullOrEmpty(c1) || c2 == null) { return null; } return new ExampleCompositeId(ExampleStringId.of(c1), ExampleUuId.of(c2)); } public static ExampleCompositeId of(ExampleStringId c1, ExampleUuId c2) { if (c1 == null || c2 == null) { return null; } return new ExampleCompositeId(c1, c2); } } The calendar component item of the calendar widget has new attributes: subjectIconId - icon is showed in the calendar component in front of the subject subjectLabel - label in tooltip on top of the subject subjectAppLink - appLink in tooltip of calendar component descriptionElements - list of ICalendarItemDescriptionElement which is displayed in the body of the tooltip of the calendar component Figure 8. Calendar Component Further the calendar provides now a time range selection in the day, work week and week mode. By default, this feature is disabled, it can be configured with the rangeSelectionAllowed property. The start point and end point of the current selected time range can be accessed with the selectedRange property. For the health check servlet org.eclipse.scout.rt.server.commons.healthcheck.AbstractHealthCheckServlet a new query parameter category has been introduced to create the possibility to check only some specific health checkers for a specific category. If a category is supplied using the parameter, the actual IHealthChecker checkers are filtered using the method org.eclipse.scout.rt.server.commons.healthcheck.IHealthChecker.acceptCategory(HealthCheckCategoryId). If no category is provided there is no change in behavior and all checkers are executed. If an invalid category is provided an error is logged and the same behavior is executed as no category was provided. New method org.eclipse.scout.rt.server.commons.healthcheck.IHealthChecker.acceptCategory(HealthCheckCategoryId) was added, default implementation always returns true Parameter HealthCheckCategoryId was added for org.eclipse.scout.rt.server.commons.healthcheck.IHealthChecker.checkHealth(RunContext, HealthCheckCategoryId); if health check itself does not rely on a specific category ignore this parameter Parameter HealthCheckCategoryId was added for org.eclipse.scout.rt.server.commons.healthcheck.AbstractHealthChecker.execCheckHealth(HealthCheckCategoryId); if health check itself does not rely on a specific category ignore this parameter The JsForm is a Java-form that wraps a form implemented in JS. This allows a Scout Classic application to open a Scout JS form. For more information about the JsForm see How to open a Scout JS form in a Scout Classic application. The return type of NumberFormatProvider#getIntegerInstance was changed from java.text.NumberFormat to java.text.DecimalFormat to align the return type of all getXyzInstance() methods.","title":"Eclipse Scout Release Notes","component":"scout-docs","version":"23.1","name":"release-notes","url":"/scout-docs/stable/releasenotes/release-notes.html","titles":[{"text":"About This Release","hash":"about-this-release","id":1},{"text":"Demo Applications","hash":"demo-applications","id":2},{"text":"Re-license from EPL-1.0 to EPL-2.0","hash":"re-license-from-epl-1-0-to-epl-2-0","id":3},{"text":"Improved Developer Experience for Scout JS","hash":"improved-developer-experience-for-scout-js","id":4},{"text":"TypeScript Support","hash":"typescript-support","id":5},{"text":"Well-Defined and Typed Widget Models","hash":"well-defined-and-typed-widget-models","id":6},{"text":"Well-Defined and Typed Widget Events","hash":"well-defined-and-typed-widget-events","id":7},{"text":"Typed Return Values When Finding Widgets","hash":"typed-return-values-when-finding-widgets","id":8},{"text":"ObjectType as Class Reference","hash":"objecttype-as-class-reference","id":9},{"text":"MenuTypes","hash":"menutypes","id":10},{"text":"Constants","hash":"constants","id":11},{"text":"Menu type support for ValueField and ImageField","hash":"menu-type-support-for-valuefield-and-imagefield","id":12},{"text":"JavaScript Code Migration Tool","hash":"javascript-code-migration-tool","id":13},{"text":"JavaScript Build Improvements","hash":"javascript-build-improvements","id":14},{"text":"Library Build","hash":"library-build","id":15},{"text":"Faster and more Efficient Minification","hash":"faster-and-more-efficient-minification","id":16},{"text":"TypeScript Build","hash":"typescript-build","id":17},{"text":"ESLint for TypeScript","hash":"eslint-for-typescript","id":18},{"text":"Typed NodeId for Node Identifier","hash":"typed-nodeid-for-node-identifier","id":19},{"text":"IId Interface, new IRootId and ICompositeId","hash":"iid-interface-new-irootid-and-icompositeid","id":20},{"text":"New Calendar Tooltip","hash":"new-calendar-tooltip","id":21},{"text":"Categories for Health Checkers","hash":"categories-for-health-checkers","id":22},{"text":"API Changes","hash":"api-changes","id":23},{"text":"JsForm","hash":"jsform","id":24},{"text":"NumberFormatProvider","hash":"numberformatprovider","id":25}]},"94":{"id":94,"text":"After installing the Eclipse Scout package you are ready for testing the SDK version Before executing the SDK tests described below, make sure that you already have (at least) checked that the Scout Hello World is working properly. Eclipse must be launched with a JDK! Check this in the Eclipse About Dialog → Installation Details → Configuration. Otherwise many operations (especially the generation of webservices) will fail. This can be set in the eclipse.ini file. Windows: The -vm parameter pointing to the JDK subdirectory …​\\jre\\bin\\server\\jvm.dll Open Eclipse About dialog Click on Eclipse Scout project button Check Scout SDK feature version Click on button Plug-in Details Check Scout SDK plug-in version (same as feature version) SDK Version Check: Scout SDK version matches expected version for testing. Open HelloWorld Form and create a new form field using Ctrl+Space. Ensure the Scout Templates (E.g. StringField, TableField) are available. Select a Template. The corresponding code is inserted and edit locations can be switched using Tab key. When moving to a super class by using the Tab key, ensure the possible super class proposals are displayed (see screenshot below). Create a new Form using the New Form wizard. As soon as the Form is opened, directly invoke the code completion in a group box without closing the file and ensure the template can be inserted. Figure 1. Select the desired super class proposal Ensure the newly created form field (test before) is reflected in the corresponding form data (DTO auto update). When pressing Ctrl+Space in a TEXTS.get(\"\") statement ensure the NLS proposals are displayed and that a new one can be created Open the *.nls file and test that the NLS Editor opens and that new entries can be created. Press the menu Scout → Create all missing @Classid Annotations and ensure they are correctly created (all types that implement ITypeWithClassId should have a class id after this step) Create a new Form (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Table Page (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new CodeType (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Form (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new LookupCall (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Table Page (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Permission (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Web Service (Ctrl+N) Consumer for WSDL http://services.nexus6studio.com/StockQuoteService.asmx?wsdl and verify that it is created correctly (no compilation errors)","title":"Scout SDK Testing Procedure","component":"scout-docs","version":"23.1","name":"scout-sdk-testing","url":"/scout-docs/stable/sdk/scout-sdk-testing.html","titles":[{"text":"Precondition","hash":"precondition","id":1},{"text":"Verify Version","hash":"verify-version","id":2},{"text":"Test Code Completion","hash":"test-code-completion","id":3},{"text":"Test DTO update","hash":"test-dto-update","id":4},{"text":"Test NLS","hash":"test-nls","id":5},{"text":"Test ClassId creation","hash":"test-classid-creation","id":6},{"text":"Test Wizards Small Set","hash":"test-wizards-small-set","id":7},{"text":"Test Wizards Full Set","hash":"test-wizards-full-set","id":8}]},"95":{"id":95,"text":"This chapter presents the Scout SDK plugins available for the Eclipse IDE. The Scout SDK provides wizards to create new project and application components, adds code assistance to the Java Editor and comes with a NLS editor to manage all translated text entries of the application. The chapter is organized as follows: Because the Scout Tooling is based on the Eclipse IDE, Eclipse IDE tooling provides a short overview of frequently used Eclipse features. A high level description of the Scout tooling is provided in Scout SDK Overview. Scout Wizards, Scout Content Assistance and Scout NLS Tooling then provide detailed descriptions of the functionality offered by the Scout SDK. The Scout tooling is an extension of the Eclipse IDE. The goal of this section is not to provide a complete overview on the features contained in the Eclipse IDE. It provides a short overview of the important eclipse features, frequently used during the development of a Scout Application. Experienced Eclipse IDE users might skip this section. To start the New Wizard wizard press Ctrl+N or use menu File New Other…​. In the first wizard step type the name of the object you want to create into the Wizards field as shown in Figure 1. Figure 1. \"New\" Wizard Start the New Wizard and type Class in the Wizards field. Select Class Click on Next to open the New class wizard Figure 2. \"New Java Class\" Wizard You can choose define the following properties: Source folder: Click on Browse to choose the project where the class belongs. Package: Click on Browse to choose the package in the given project. If the package does not exist it will be created a new one automatically. Name: Type the class name Modifiers: Choose public or default. Or abstract and/or final. Superclass: Choose the parent class clicking on Browse Interfaces: Click on Add to add the list of interfaces your class implements. Method stubs: Include methods in your class. Comments: Generate predefine comments. Click on Finish when you are done with the class definition. The java editor will open and you can start editing. Start the New Wizard and type Package in the Wizards field. Select Package Click on Next to open the New package wizard In the New package wizard you can define the following properties: Source folder: Click on Browse to choose the project where the package belongs. Name: Write the name of the package. Package info: Choose the checkbox if you want package-info Click on Next to create the project. The Project Browser The import section of a java class needs to be kept up-to-date. New imports need to be added and no longer used ones should be removed. Eclipse offers a the shortcut Ctrl+Shift+O to accomplish this task. In case an import cannot be resolved because several candidates exist, a selection list is displayed. Renaming a class without SDK support is not so easy. The class and possibly the compilation unit need to be renamed. Then every reference to the class within the workspace needs to be updated. All this work is accomplished by using the Class rename Wizard. Open the Wizard using one of the following methods Alt+Shift+R Context Menu Refactor Rename…​ Select the class in the tree and press F2 Choose the new name for the class Specify which references need to be updated Click [Finish] or [Next] to continue A class can be renamed by select the class name anywhere in code and pressing Ctrl+1. The option [Rename in Workspace] will rename the class without using a the wizard. Renaming a package without SDK support would be a tedious undertaking. All classes in the package and its subpackages would have to be modified as well as the directory structure on disk. Then every reference to the package within the workspace needs to be updated. All this work is accomplished by using the Package rename Wizard. Open the Wizard using one of the following methods Alt+Shift+R Context Menu Refactor Rename…​ Select the package in the tree and press F2 Choose the new name for the package Specify which references need to be updated Click [OK] or [Prview] to continue The Scout SDK tooling helps the Scout developer to quickly create frequently used Scout components. This Scout Tooling is implemented as extensions of the Eclipse IDE in the form of wizards, content assist extension to the Eclipse Java editor and support for dealing with translated texts called NLS support. Scout Wizards The Scout SDK tooling includes a number of wizards for the creation of frequently used Scout components. In many cases the execution of such wizards involves the creation/editing of several source files. In the case of the creation of a new Scout form this includes the form class in the client module of the Scout application, a form data class and a service that communicates Descriptions for the individual wizards are provided in Scout Wizards. Content Assist In the Scout framework the hierarchical organization of Scout components if frequently reflected in the form of inner classes. This allows the Scout tooling to provide context specific proposals in the form of content assist proposals offered in the Java editor of the Eclipse IDE. Examples for this form of the tooling includes the creation of form fields or adding columns and context menus to tables. Content assist support is described in detail in Scout Content Assistance. NLS Tooling Eclipse Scout comes with NLS (National Language Support). To support Scout developers in using Scout’s NLS (National Language Support) the Scout SDK offers corresponding tooling to work with translated texts. This tooling is described in Scout NLS Tooling. The Scout SDK provides a set of wizards to create new Scout projects and various components for your Scout applications. To start any of these wizards press Ctrl+N or use menu File New Other…​. In the first wizard step type \"Scout\" into the Wizards field as shown in Figure 3. Figure 3. Selecting Scout Wizards in the Eclipse wizard dialog The wizards provided by the Scout SDK are introduced and described in the sections listed below. New Project Wizard (New Project Wizard) New Page Wizard (New Page Wizard) New Form Wizard (New Form Wizard) The New Scout Project wizard can be used to create a new Scout project from scratch. To open the wizard press Ctrl+N or use File New Other…​ and type \"Scout\" into the Wizards search field. Then, select the entry \"Scout Project\" and click on Next. This leads to the initial dialog of the New Scout Project wizard as shown in Figure 4. Figure 4. The new Project Wizard A detailed description of the indiviudal wizard fields of Figure 4 is provided in the next section. By clicking on the Finish button the wizard is started and a new Scout client server application is created in the form of a Maven multi-module project. All fields of the Figure 4 are initially filled with default values. Group Id Maven groupId used for all created projects. The default value is org.eclipse.scout.apps. Artifact Id Maven artifactId for the parent project. The additional projects are derived from this name. The default value is helloworld. Display Name The name of the application presented to the user. This name is shown in the Browser title bar. The default value is \"My Application\" With the Project Location group box, you can control where the project will be created. Unchecked the Use default Workspace location checkbox to enter an other value in the Target Directory Field. The Browse…​ button can help you to find the appropriate path. With the Figure 4 wizard a complete Maven multi-module project is created. Using the default artifact Id helloworld the following Maven modules are created. Maven module helloworld Contains the project’s parent pom.xml file Maven module helloworld.client Contains model components of the client application in src/main/java and model tests in src/test/java. The class HelloWorldForm in package org.eclipse.scout.apps.helloworld.client.helloworld is an example of a model class. Maven module helloworld.shared Contains components needed in both the client and the server application. For examples see the IHelloWorldService interface in src/main/java and class HelloWorldFormData in src/generated/java. The Texts.nls file that can be opened in the Scout NLS Editor. Maven module helloworld.server Contains the model components of the server application in src/main/java and model tests in src/test/java. The class HelloWorldService in package org.eclipse.scout.apps.helloworld.server.helloworld is an example of such a model class. Maven module helloworld.server.app.dev Contains all components to run the Scout server application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the Scout server application. The file pom.xml bundles the Jetty web server with the server application. The file [webapp] dev server.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.server.app.war Contains all components to create a Scout server WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the server configuration. The file pom.xml is used to build the Scout server WAR file. Maven module helloworld.ui.html Contains servlet filters and the HTML pages as well as custom CSS and JavaScript files for the Scout UI Server. See class UiServletFilter in src/main/java and folder WebContent in source/main/resources. The file js build.launch contains the launch configuration for the Eclipse IDE that executes the JavaScript build. Maven module helloworld.ui.html.app.dev Contains all components to run the Scout UI application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the application. The file web.xml in folder src/main/webapp contains the web configuration for the application. The file pom.xml bundles the Jetty web server with the application. The file [webapp] dev ui.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.ui.html.app.war Contains all components to create a Scout UI WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the application configuration. The file web.xml in folder src/main/webapp contains the web configuration. The file pom.xml is used to build the Scout UI WAR file. The New Scout Page wizard can be used to create a new page and related classes. To start the wizard use File New Other…​ or press Ctrl+N. Figure 5. The new Page Wizard In the case of Figure 5 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 5 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the page. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the page class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared module. Name The name of the page class. According to Scout conventions the class name ends with the suffix TablePage (for subclasses of AbstractPageWithTable) or NodePage (for AbstractPageWithNodes). Super Class The super class for the form. AbstractPageWithTable is the default value. Shared Source Folder The source folder of the Maven shared module used for creation of the page data and the service interface. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for creation of the service implementation. The default value is the src/main/java folder in the Maven server module. In the Figure 5 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyTablePage page class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared The IMyService service interface in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld MyTablePageData page data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService implementation in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld The New Form wizard is be used to create a new form including a form data, permissions and and related service. To start the wizard use File New Other…​ or press Ctrl+N. Figure 6. The new Form Wizard In the case of Figure 6 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 6 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the form class. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the form class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared and server modules. Name The name of the form class. According to Scout conventions the class name ends with the suffix Form. Super Class The super class for the form. AbstractForm is the default value. Create FormData If ticked, a form data class will be created in the shared module. Create Service If ticked, a service interface is created in the shared module and a service implementation is created in the Maven server module. Create Permissions If ticked, read and update permissions are created in the Maven shared module. Shared Source Folder The source folder of the Maven shared module used for creation of the form data, the service interface and the permission classes. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for the service class creation. The default value is the src/main/java folder in the Maven server module. In the Figure 6 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyForm form class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared In folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld The IMyService service interface The ReadMyPermission permission class The UpdateMyPermission permission class The MyFormData form data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService service class in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld To create new Scout components that are represented by inner classes in the Scout framework, the Scout tooling extends the Java content assist of the Eclipse Java editor. The offered proposals are context specific. Depending on the current cursor position in the Java editor, possible Scout components are added to the proposal list. In a class representing a group box in a form, the Scout content assist adds proposals for various form fields. In a table class the content assist adds proposals to add table columns or context menus. Those proposals trigger the creation of inner classes for form fields, table columns or codes. The Eclipse content assist can be started by typing Ctrl+Space. To add additional form fields to a form the current edit position needs to be inside of a Scout group box. Typing Ctrl+Space then provides access to the most frequently used Scout widgets as shown in Figure 7. Figure 7. Proposals to create new form fields in a GroupBox When a template is selected, it is possible to customize it by navigating between the different Edit-Groups with the Tab Key (this works exactly like other templates in the Eclipse Editor). With this mechanism you can quickly define the class name, the parent class and other properties. To exit the Edit-Mode just press Enter. For adding new columns in a table set the current edit position inside a Scout table. The Scout table itself may be located inside of a TableField as shown in Figure 8 or can also be located inside of a Scout TablePage. Figure 8. Proposals to create new columns in a Table Next to adding columns the content assist shown in Figure 8 can also be used to add key stroke actions and menus to tables. Adding new Codes to an existing CodeType is supported by the content assist as shown in Figure 9. Figure 9. Proposals to create new codes in a CodeType Translated text entries are most frequently added when working in the Java editor view. When the the current edit position is inside the String parameter of the TEXTS.get() code, the content assist (opened with Ctrl + Space) provides support for the NLS entries as shown in Figure 10. Figure 10. Proposals corresponding to NLS Support. Selecting one of proposal entries (like \"DateOfBirth\" in the example) shows the available translations on the right side. To select a specific proposal entry you may double click on the entry or hit the Enter key. To create a new text entry select New text…​ at the end of the proposal list. Adding a translated text can then be done in the New Entry wizard provided by the Scout SDK as shown in Figure 11. Figure 11. Adding a new text with the New Entry wizard. Key Name This field holds the text key that is used to access translated text. default This field holds the default translated text for the key. Make sure to at least provide a translated text in this tab. French (France) Additional tabs to enter translations for other languages may be present. Adding additional languages is described in the text for the NLS editor. Copy key to the clipboard Select this checkbox to copy the key name to the clipboard and paste it later in your code. To manage translated application texts for different languages the Scout SDK includes a NLS editor. This editor helps to efficiently deal to edit all the property files that are used with the default setup of Scout. The NLS editor can be accessed for each text provider service of a Scout application via the *.nls files of the shared Maven modules of the application. In the case of the \"Hello World\" application you will find the Texts.nls file in module org.eclipse.scout.helloworld.shared. To open the editor for the \"Hello World\" application select the Texts.nls file first and then use context menu Open With NLS Editor. The screenshot below shows the opened NLS editor. In the first column the key values are shown that are used in accessing translations through TEXTS.get(\"key\"). The second columns holds the default translations followed by columns holding the translations for other translated languages. Actions on the top right corner: Refresh NLS Project Reload the content of the editor. Show NLS entry usage For each row, search in the Java code where the NLS Key is used. Results are displayed in the first column. New entry…​ Opens the New Text Entry Wizard New language…​ Opens the Add a Language Wizard Import…​ Import the NLS entries of an external file Export…​ Export the NLS entries to an external file Import and Export requires additional components. Hide inherited rows checkbox On the top of each column, the text fields allow you to filter the entries in the table. With the Reset button on the right you will empty those filters. The entries in the table can be directly edited by pressing F2 or double-clicking into a text cell. On each row it is possible to call following context menu: Modify Entry Opens the New Text Entry Wizard Find references to 'Xxx' Search in the Java code where the NLS Key is used. Remove Xxx Delete the NLS Entry from the files The mapping between the properties files is registered in the \"Text Provider Service\" class. Per default the files follow this pattern: .shared/src/main/resources//texts/Texts.properties where: is a chain of folders following the same convention as the Java source files with the package name. For example the org.eclipse.contacts.shared project uses org/eclipse/scout/contacts/shared as path. is an identifier of the language and the country. Some possible file names: Texts.properties is the default language Texts_de.properties is for German Texts_fr_BE will be for French in Belgium If NLS keys are used in the code that do not exist in a properties file, an ugly placeholder is displayed to the user. To find such missing translations the Menu Scout → Search missing text keys…​ may be handy. The result is listed in the Eclipse Search view. The search also takes the scope of each NLS key into account. So that the key is considered to be available there must be a TextProviderService with that key on the classpath of that module. Reported false positives can be suppressed using the following comment at the end of the corresponding line: NO-NLS-CHECK. Matches on that line are then not reported in future searches anymore. This chapter walks you through the installation of the Eclipse Scout SDK. There are two ways to install it. Install a prepackaged Eclipse IDE tailored for Scout developers. Install the Scout SDK plugins into an existing Eclipse IDE. The installation process for the Eclipse package containing Scout is described in the Hello Scout Tutorial. This section describes the installation of Scout into an existing Eclipse installation. As the audience of this section is assumed to be familiar with Eclipse, we do not describe how you got your Eclipse installation in the first place. For the provided screenshots we start from the popular package Eclipse IDE for Java EE Developers. Figure 12. Eclipse menu to install additional software To add Scout to your existing Eclipse installation, you need to start Eclipse. Then select the Help Install New Software…​ menu as shown in Figure 12 to open the install dialog. Figure 13. Select the Scout features to add to the Eclipse installation In the install dialog, select the update site matching your Eclipse installation. Type Scout into the filter field below and select Eclipse Scout SDK (Binary only). Then, move through the installation with the Next button. On the last installation step, accept the presented EPL terms by clicking on the appropriate radio button. To complete the installation, click the Finish button and accept the request for a restart of Eclipse. After the restart of the Eclipse IDE the Scout SDK is ready to use! The simplest way to verify your Scout installation is to create a “Hello World” Scout project and run the corresponding Scout application as described in Hello Scout.","title":"Scout SDK for Eclipse","component":"scout-docs","version":"23.1","name":"sdk-eclipse","url":"/scout-docs/stable/sdk/sdk-eclipse.html","titles":[{"text":"Eclipse IDE tooling","hash":"sec-eclipse_ide_tooling","id":1},{"text":"Start the New Wizard","hash":"start-the-new-wizard","id":2},{"text":"Create a new Java class","hash":"create-a-new-java-class","id":3},{"text":"Create a new Java package","hash":"create-a-new-java-package","id":4},{"text":"Organize Java imports","hash":"organize-java-imports","id":5},{"text":"Rename a class","hash":"rename-a-class","id":6},{"text":"Alternative Method","hash":"alternative-method","id":7},{"text":"Rename a package","hash":"rename-a-package","id":8},{"text":"Scout SDK Overview","hash":"sec-sdk_overview","id":9},{"text":"Scout Wizards","hash":"sec-sdk_wizard","id":10},{"text":"New Project Wizard","hash":"sec-wizard_project","id":11},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":12},{"text":"Created Components","hash":"created-components","id":13},{"text":"New Page Wizard","hash":"sec-wizard_page","id":14},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values-2","id":15},{"text":"Created Components","hash":"created-components-2","id":16},{"text":"New Form Wizard","hash":"sec-wizard_form","id":17},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values-3","id":18},{"text":"Created Components","hash":"created-components-3","id":19},{"text":"Scout Content Assistance","hash":"sec-sdk_content_assist","id":20},{"text":"Create new Form Fields","hash":"sec-sdk_new_form_field","id":21},{"text":"Create new Table Columns","hash":"sec-sdk_new_table_column","id":22},{"text":"Create new Codes","hash":"create-new-codes","id":23},{"text":"Scout NLS Tooling","hash":"sec-sdk_nls","id":24},{"text":"Adding a new Translated Text Entry","hash":"sec-add_text_entry","id":25},{"text":"The NLS Editor","hash":"sec-nls_editor","id":26},{"text":"Action Buttons","hash":"action-buttons","id":27},{"text":"Default Mapping to Properties Files","hash":"default-mapping-to-properties-files","id":28},{"text":"Find missing NLS Keys","hash":"find-missing-nls-keys","id":29},{"text":"Appendix A: Scout SDK Installation","hash":"apx-install_scout","id":30},{"text":"Install Eclipse IDE for Scout Developers","hash":"install-eclipse-ide-for-scout-developers","id":31},{"text":"Add Scout to your Existing Eclipse IDE","hash":"add-scout-to-your-existing-eclipse-ide","id":32},{"text":"Verifying the Installation","hash":"verifying-the-installation","id":33}]},"96":{"id":96,"text":"The Scout SDK plugin for IntelliJ is available at the JetBrains Marketplace. Please see the Installation Guide on how to install it. Make sure to check out https://plugins.jetbrains.com/plugin/13393-eclipse-scout to learn what the plugin contains.","title":"Scout SDK for IntelliJ","component":"scout-docs","version":"23.1","name":"sdk-intellij","url":"/scout-docs/stable/sdk/sdk-intellij.html","titles":[]},"97":{"id":97,"text":"Scout provides plugins for IntelliJ and Eclipse that support developing Eclipse Scout applications. The Scout SDK plugins helps to create a new project and application components, improve code completion and come with a NLS editor to manage all translated text entries of the application. Thanks to this tooling, developing Scout applications is made simpler, more productive and also more robust. Initially, a solid understanding of Java (and JavaScript for Scout JS) is sufficient to start developing Scout applications and only a rough understanding of the underlying Maven/Web technologies is required. The Scout SDK also helps developers to become more productive. Many repetitive and error prone tasks run automatically in the background or are taken care of by the component wizards of the Scout SDK. The application code created by the Scout SDK wizards helps to ensure that the resulting Scout application has a consistent and robust code base and is well aligned with the application model defined by the Scout runtime framework.","title":"Scout SDK","component":"scout-docs","version":"23.1","name":"sdk","url":"/scout-docs/stable/sdk/sdk.html","titles":[{"text":"Motivation for the Tooling","hash":"sec-sdk_motivation","id":1}]},"98":{"id":98,"text":"Scout is a framework for creating modern business applications. Such applications are typically separated into multiple tiers where each tier is responsible for a specific part of the application like presenting information to the user or processing business logic and persisting data. Scout solves these requirements by providing a separation of such tiers out of the box. A typical Scout Classic application consists of the following parts: A server layer responsible for persisting data on a database and possibly providing and consuming webservices. The scout server layer provides utilities to simplify the most common tasks. A client layer responsible for handling the Java UI code. It consists of a model represented by plain Java classes as well as services and utilities to implement behaviour associated with client code. The scout client layer provides utilities to simplify the most common tasks. For simplicity, the client model is processed in a single threaded way to avoid synchronization. Callbacks, e.g. for validating a field or calling services when opening a form run inside a Model Job. A UI layer responsible for rendering the client model in the browser. Since the scout UI layer already provides JavaScript/HTML/CSS code for many common UIs, the project specific code in this layer is typically quite small. Examples are specific CSS styling or a new custom input field for special purposes. Server and client both run in a servlet container, such as Apache Tomcat. They are usually deployed as separate war files in order to be able to scale them differently. However, it is also possible to create a single war file. Scout JS is used to build the user interface of an Eclipse Scout application. It consists of a large widget library including simple widgets like buttons or menu items and more complex widgets like tables, tile grids or trees. Beside the widget library itself, Scout JS also helps to interact with the widgets, from accessing a widget, to configuring data binding or adding input validation. But with the widgets alone you cannot create an application. You need a frame to put the widgets into, a setup to easily write tests and prevent errors, a centralized error handling to analyze errors, possibilities to customize the look of your app and tooling to build it, so it can be published and used. For all these topics Scout JS provides solutions with the goal to make developing a user interface as easy as possible. This means, with Scout JS you’ll create your user interface of an Eclipse Scout application using JavaScript or TypeScript. Compared to using Scout Classic, you don’t need a UI server which helps to create stateless applications. Scout JS is used in classic Scout applications as well to render the client model written in Java. So, if you understand the concepts of Scout JS, writing custom widgets for Scout Classic will be a lot easier.","title":"Technical Guide","component":"scout-docs","version":"23.1","name":"technical-guide","url":"/scout-docs/stable/technical-guide/technical-guide.html","titles":[{"text":"Scout Classic","hash":"scout-classic","id":1},{"text":"Scout JS","hash":"scout-js","id":2}]},"99":{"id":99,"text":"This cheat sheet shows how to create your own chart for a Scout application. In this example we will visualize the sold scoops of an ice cream shop. We assume the ice cream shop already has a running Scout application and a place where it wants to create the chart. Everything related to charts has its own Maven and npm modules and is not part of Scout core. Therefore, the following Maven dependencies need to be added to the client-, shared- and ui.html-module of the ice cream shop app. org.eclipse.scout.rt org.eclipse.scout.rt.chart.client org.eclipse.scout.rt org.eclipse.scout.rt.chart.shared org.eclipse.scout.rt org.eclipse.scout.rt.chart.ui.html A npm dependency to @eclipse-scout/chart needs to be added in the package.json of the ice cream shop app and in addition, an import needs to be added to the entry-files icecream.js, import * as chart from '@eclipse-scout/chart'; Object.assign({}, chart); // workaround so that the imports are not unused icecream-theme.less and icecream-theme-dark.less. @import \"~@eclipse-scout/chart/src/index\"; @import \"~@eclipse-scout/chart/src/index-dark\"; The chart is created using an AbstractChartField and placed inside a GroupBox. public class ChartField extends AbstractChartField { public class Chart extends AbstractChart { } } The ice cream shop has sold the following amount of scoops: Table 1. Table Scoops per month and flavor Jan. Feb. Mar. Apr. May Jun. Jul. Aug. Sept. Oct. Nov. Dec. Vanilla 0 0 0 94 162 465 759 537 312 106 0 0 Chocolate 0 0 0 81 132 243 498 615 445 217 0 0 Strawberry 0 0 0 59 182 391 415 261 75 31 0 0 We create a data object and pass it to the chart (e.g. in the execLoad method of our FormHandler). ChartData data = new ChartData(); List axis = new ArrayList<>(); Stream.of(\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May\", \"Jun.\", \"Jul.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\") .forEach(label -> axis.add(new ChartAxisBean(label, label))); data.getAxes().add(axis); MonupleChartValueGroupBean vanilla = new MonupleChartValueGroupBean(); vanilla.setGroupName(\"Vanilla\"); IntStream.of(0, 0, 0, 94, 162, 465, 759, 537, 312, 106, 0, 0) .forEach(value -> vanilla.getValues().add(new BigDecimal(value))); data.getChartValueGroups().add(vanilla); MonupleChartValueGroupBean chocolate = new MonupleChartValueGroupBean(); chocolate.setGroupName(\"Chocolate\"); IntStream.of(0, 0, 0, 81, 132, 243, 498, 615, 445, 217, 0, 0) .forEach(value -> chocolate.getValues().add(new BigDecimal(value))); data.getChartValueGroups().add(chocolate); MonupleChartValueGroupBean strawberry = new MonupleChartValueGroupBean(); strawberry.setGroupName(\"Strawberry\"); IntStream.of(0, 0, 0, 59, 182, 391, 415, 261, 75, 31, 0, 0) .forEach(value -> strawberry.getValues().add(new BigDecimal(value))); data.getChartValueGroups().add(strawberry); getFieldByClass(ChartField.class).getChart().setData(data); The chart will now look like this: It looks like this, because the default type is pie, the default value of maxSegments is 5 and the first three segments in each dataset are 0. Let’s change it to a bar chart and use another color scheme: IChartConfig config = BEANS.get(IChartConfig.class) .withType(IChartType.BAR) .withColorScheme(ColorScheme.RAINBOW); getFieldByClass(ChartField.class).getChart().setConfig(config); Now we add labels to the scales and set some custom colors. vanilla.setColorHexValue(\"#fdf2d1\"); chocolate.setColorHexValue(\"#94654c\"); strawberry.setColorHexValue(\"#f89fa1\"); config.withAutoColor(false) .withXAxisLabelDisplay(true) .withXAxisLabel(\"Month\") .withYAxisLabelDisplay(true) .withYAxisLabel(\"Scoops\"); getFieldByClass(ChartField.class).getChart().setData(data); getFieldByClass(ChartField.class).getChart().setConfig(config); Finally, we want to make the chart interactive. getFieldByClass(ChartField.class).getChart().extendConfig(BEANS.get(IChartConfig.class) .withClickable(true) .withCheckable(true) .withLegendClickable(true), true); The chart is now clickable and checkable and datasets can be hidden via the legend. Figure 1. The dataset \"Vanilla\" is hidden and some segments are checked. Each time a segment is clicked an event is triggered. This event can be handled by overriding execValueClick on the chart. @Override protected void execValueClick(BigDecimal xIndex, BigDecimal yIndex, Integer datasetIndex) { System.out.println(\"Segment clicked\\n\" + \" - datasetIndex: \" + datasetIndex + \"\\n\" + \" - xIndex: \" + xIndex + \"\\n\" + \" - yIndex: \" + yIndex); } Even if some charts are rendered on a -element the colors can be changed via CSS. We add a custom grey color scheme for the bubble chart, which is rendered on a . To achieve this, we need to add a LESS file with the following content: @chart-grey-1: #191919; @chart-grey-2: #4C4C4C; @chart-grey-3: #737373; @chart-grey-4: #999999; @chart-grey-5: #BFBFBF; @chart-grey-6: #D8D8D8; .color-scheme-grey > .bubble-chart { & > .elements { > .label { fill: black; } > .grid { fill: lightslategrey; } > .tooltip-border { fill: black; } #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 20); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 35, @additional-classes: ~\".hover\"); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".legend\"); } &.checkable > .elements { #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".checked\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover.checked\"); } } This color scheme can now be used in a config object: BEANS.get(IChartConfig.class) .withType(IChartType.BUBBLE) .withColorScheme(() -> \"color-scheme-grey\"); Figure 2. A checkable bubble chart using the custom grey color scheme.","title":"How to Create a Chart","component":"scout-docs","version":"23.1","name":"chart-how-to","url":"/scout-docs/stable/howtos/scout-classic/chart-how-to.html","titles":[{"text":"Prerequisites","hash":"prerequisites","id":1},{"text":"Minimal Code for a New Chart","hash":"minimal-code-for-a-new-chart","id":2},{"text":"Add data to the chart","hash":"add-data-to-the-chart","id":3},{"text":"Chart configuration","hash":"chart-configuration","id":4},{"text":"Events","hash":"events","id":5},{"text":"Change colors using CSS","hash":"change-colors-using-css","id":6}]},"100":{"id":100,"text":"A Scout Classic application is able to open a form implemented in Scout JS. This works via the JsForm, a Java form wrapping a form implemented in JS. The next few code snippets demonstrate how to use the JsForm. Listing 1. Example of a simple JsForm package example.client; import org.eclipse.scout.rt.client.ui.form.js.AbstractJsForm; public class ExampleJsForm extends AbstractJsForm { @Override protected String getConfiguredJsFormObjectType() { return \"example.ExampleJsForm\"; } } The form can be started handing over some input data in the form of an IDoEntity and the whole lifecycle (close, cancel, save, …​) of this form will be handled by Scout JS. If the form is saved the data of the Scout JS form will be available on to the Java form as output data. Listing 2. Use of a JsForm ExampleJsForm exampleJsForm = new ExampleJsForm(); exampleJsForm.setInputData(getExampleJsFormInputData()); exampleJsForm.start(); exampleJsForm.waitFor(); if (exampleJsForm.isFormStored()) { ExampleJsFormDo outputData = exampleJsForm.getOutputData(); // ... } The complete form and its business logic is implemented in JS in the same way a form is implemented in a Scout JS application. The only property that needs to be set in Java is the displayHint of the form. Listing 3. Implementation of the form in Scout JS import {Form, models, StringField} from '@eclipse-scout/core'; import ExampleJsFormModel from './ExampleJsFormModel'; export class ExampleJsForm extends Form { declare data: ExampleJsFormDo; exampleId: string; exampleField: StringField; constructor() { super(); this.exampleId = null; this.exampleField = null; } protected override _jsonModel(): FormModel { return models.get(ExampleJsFormModel); } protected override _init(model: InitModelOf) { super._init(model); this.exampleField = this.widget('ExampleField'); } override importData() { if (!this.data) { return; } this.exampleId = this.data.exampleId; this.exampleField.setValue(this.data.example); } override exportData(): ExampleJsFormDo { return { exampleId: this.exampleId, example: this.exampleField.value }; } } export type ExampleJsFormDo = { exampleId: string; example: string; };","title":"How to open a Scout JS form in a Scout Classic application","component":"scout-docs","version":"23.1","name":"js-form-how-to","url":"/scout-docs/stable/howtos/scout-classic/js-form-how-to.html","titles":[]},"101":{"id":101,"text":"When a user selects a lookup-row from the proposal chooser in Scout versions ⇐ 6.0, the properties foregroundColor, backgroundColor, font and tooltipText have been automatically copied from the lookup-row to the field. In some cases this was exactly what a specific application needed, but in other cases it was hard to implement a specific behavior without overriding internal methods from the SmartField. For instance it was not possible to have a lookup-row with background-color red in the proposal-chooser and at the same time avoid the background-color of the field changing to red, when that row was being selected. Since that automatic behavior didn’t fit every business requirement, we removed it completely. This means a programmer must now implement specific code to read properties from the lookup-row and set them on the field. The following example is from the Scout widgets app. It changes the background-color of the field. Listing 1. Java example, set the background-color of the lookup-row on the field @Override protected void execChangedValue() { updateFieldBackgroundColor(); } /** * Sets the color of the field to the color of the selected lookup row. */ protected void updateFieldBackgroundColor() { ILookupRow lookupRow = getLookupRow(); String bgColor = lookupRow == null ? null : lookupRow.getBackgroundColor(); setBackgroundColor(bgColor); } Since Scout 8.0 the property cssClass from the lookup-row is automatically applied to the .form-field DIV. This gives the programmer the flexibility to style either both, lookup-row and field, or only the lookup-row in the proposal-chooser via CSS/LESS. Here’s a LESS example from the Scout widget app that sets the background-color of lookup-row and field. It is used for the EventTypeCodeType which defines 3 codes with the CSS classes public, private and external: Listing 2. LESS example, style lookup-row and field with the same CSS class .form-field.public > .field, .table-row.public { background-color: @palette-green-0; } .form-field.private > .field, .table-row.private { background-color: @palette-orange-1; } .form-field.external > .field, .table-row.external { background-color: @palette-gray-3; } Conclusion: older Scout apps that rely on the automatic behavior for the properties mentioned above, should use CSS classes instead of the properties back-/foregroundColor or font. If that’s not possible you should implement logic as shown in the example above where required, possibly moving that code in a class that extends AbstractSmartField, if the same code is required in multiple places.","title":"SmartField: How to Apply Colors and Styles From a Lookup Row","component":"scout-docs","version":"23.1","name":"smart-field-how-to","url":"/scout-docs/stable/howtos/scout-classic/smart-field-how-to.html","titles":[]},"102":{"id":102,"text":"This cheat sheet shows how to create your own chart for a ScoutJS application. In this example we will visualize the sold scoops of an ice cream shop. We assume the ice cream shop already has a running ScoutJS application and a place where it wants to create the chart. Everything related to charts has its own Maven and npm modules and is not part of Scout core. Therefore, the following Maven dependencies need to be added to the ui.html-module of the ice cream shop app. org.eclipse.scout.rt org.eclipse.scout.rt.chart.ui.html A npm dependency to @eclipse-scout/chart needs to be added in the package.json of the ice cream shop app and in addition, an import needs to be added to the entry-files icecream.js, import * as chart from '@eclipse-scout/chart'; Object.assign({}, chart); // workaround so that the imports are not unused icecream-theme.less and icecream-theme-dark.less. @import \"~@eclipse-scout/chart/src/index\"; @import \"~@eclipse-scout/chart/src/index-dark\"; The chart is created by scout.create('Chart', { parent: this }); The ice cream shop has sold the following amount of scoops: Table 1. Table Scoops per month and flavor Jan. Feb. Mar. Apr. May Jun. Jul. Aug. Sept. Oct. Nov. Dec. Vanilla 0 0 0 94 162 465 759 537 312 106 0 0 Chocolate 0 0 0 81 132 243 498 615 445 217 0 0 Strawberry 0 0 0 59 182 391 415 261 75 31 0 0 We create a data object and pass it to the chart. let data = { axes: [ [{label: 'Jan.'}, {label: 'Feb.'}, {label: 'Mar.'}, {label: 'Apr.'}, {label: 'May'}, {label: 'Jun.'}, {label: 'Jul.'}, {label: 'Aug.'}, {label: 'Sept.'}, {label: 'Oct.'}, {label: 'Nov.'}, {label: 'Dec.'}] ], chartValueGroups: [ { groupName: 'Vanilla', values: [0, 0, 0, 94, 162, 465, 759, 537, 312, 106, 0, 0] }, { groupName: 'Chocolate', values: [0, 0, 0, 81, 132, 243, 498, 615, 445, 217, 0, 0] }, { groupName: 'Strawberry', values: [0, 0, 0, 59, 182, 391, 415, 261, 75, 31, 0, 0] } ] }; chart.setData(data); The chart will now look like this: It looks like this, because the default type is pie, the default value of maxSegments is 5 and the first three segments in each dataset are 0. Let’s change it to a bar chart and use another color scheme: let config = { type: Chart.Type.BAR, options: { colorScheme: colorSchemes.ColorSchemeId.RAINBOW } }; chart.setConfig(config); Now we add labels to the scales and set some custom colors. data.chartValueGroups[0].colorHexValue = '#fdf2d1'; data.chartValueGroups[1].colorHexValue = '#94654c'; data.chartValueGroups[2].colorHexValue = '#f89fa1'; config.options.autoColor = false; config.options.scales = { x: { title: { display: true, text: 'Month' } }, y: { title: { display: true, text: 'Scoops' } } }; chart.setData(data); chart.setConfig(config); Finally, we want to make the chart interactive. config.options = $.extend(true, {}, config.options, { clickable: true, checkable: true, plugins: { legend: { clickable: true } } }); chart.setConfig(config); The chart is now clickable and checkable and datasets can be hidden via the legend. Figure 1. The dataset \"Vanilla\" is hidden and some segments are checked. Each time a segment is clicked an event is triggered. This event can be handled by let clickHandler = event => { let clickObject = event.data, datasetIndex = clickObject.datasetIndex, dataIndex = clickObject.dataIndex, xIndex = clickObject.xIndex, yIndex = clickObject.yIndex; console.log('Segment clicked\\n' + ' - datasetIndex: ' + datasetIndex + '\\n' + ' - dataIndex: ' + dataIndex + '\\n' + ' - xIndex: ' + xIndex + '\\n' + ' - yIndex: ' + yIndex); }; chart.on('valueClick', clickHandler); A list of all checked segments is held in chart.checkedItems. Even if some charts are rendered on a -element the colors can be changed via CSS. We add a custom grey color scheme for the bubble chart, which is rendered on a . To achieve this, we need to add a LESS file with the following content: @chart-grey-1: #191919; @chart-grey-2: #4C4C4C; @chart-grey-3: #737373; @chart-grey-4: #999999; @chart-grey-5: #BFBFBF; @chart-grey-6: #D8D8D8; .color-scheme-grey > .bubble-chart { & > .elements { > .label { fill: black; } > .grid { fill: lightslategrey; } > .tooltip-border { fill: black; } #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 20); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 35, @additional-classes: ~\".hover\"); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".legend\"); } &.checkable > .elements { #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".checked\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover.checked\"); } } This color scheme can now be used in a config object: let config = { type: Chart.Type.BUBBLE, options: { colorScheme: 'color-scheme-grey' } }; Figure 2. A checkable bubble chart using the custom grey color scheme.","title":"How to Create a Chart","component":"scout-docs","version":"23.1","name":"chart-how-to","url":"/scout-docs/stable/howtos/scout-js/chart-how-to.html","titles":[{"text":"Prerequisites","hash":"prerequisites","id":1},{"text":"Minimal Code for a New Chart","hash":"minimal-code-for-a-new-chart","id":2},{"text":"Add data to the chart","hash":"add-data-to-the-chart","id":3},{"text":"Chart configuration","hash":"chart-configuration","id":4},{"text":"Events","hash":"events","id":5},{"text":"Change colors using CSS","hash":"change-colors-using-css","id":6}]},"103":{"id":103,"text":"This cheat sheet shows how to implement your own custom field for a ScoutJS application. In this example we will write a FlipCard field that will show a playing card. Clicking on the card will flip it from one side to the other. For this example we use the helloscout git repository, but you can easily create the field in your own code base as well. In case you want to use the helloscout repo, clone and import it into your favourite IDE: git clone https://github.com/bsi-software/helloscout.git Read the readme and start the hellojs application to make sure it works. Create the following files in the folder org.eclipse.scout.hellojs.ui.html src/main/js/flipcard/FlipCardField.js The JavaScript file representing the field. src/main/js/flipcard/FlipCardField.less The LESS file containing the styles of the field. Listing 1. index.js ... export {default as FlipCardField} from './flipcard/FlipCardField'; ... Listing 2. index.less ... @import \"flipcard/FlipCardField\"; ... The FlipCard will inherit from FormField. Every form field consists of a container, a label, the actual field, a mandatory-indicator and a status. Listing 3. FlipCardField.js import {FormField} from '@eclipse-scout/core'; export default class FlipCardField extends FormField { _render() { // Create the container this.addContainer(this.$parent, 'flip-card-field'); // Add a label this.addLabel(); // Create the actual field. This will be your flip card. var $field = this.$parent.appendDiv('content'); // add the field to the form field. this.addField($field); // Add other required form field elements this.addMandatoryIndicator(); this.addStatus(); }; } Don’t forget to add the import for your FlipCardField. Listing 4. HelloFormModel.js { id: \"hellojs.HelloForm\", ... rootGroupBox: { ... fields: [ { id: 'DetailBox', ... fields: [ { id: 'NameField', ... }, (1) { id: 'FlipCardField', objectType: FlipCardField, label: 'Flip the card', gridDataHints: { h: 5, weightY: 0 } }, { id: 'GreetButton', ... } ] } ] } } 1 The FlipCard field Now reload your browser and you should get the following result: Result Minimal Form Field Listing 5. FlipCard.js import {FormField} from '@eclipse-scout/core'; export default class FlipCardField extends FormField { constructor() { super(); this.$card = null; this.$front = null; this.$back = null; this.flipped = false; this.frontImage = null; this.backImage = null; } _render() { // Create the container this.addContainer(this.$parent, 'flip-card-field'); // Add a label this.addLabel(); // Create the actual field (1) var $field = this.$parent.appendDiv('content'); // Create the card inside the field this.$card = $field.appendDiv('card') .on('mousedown', this._onCardMouseDown.bind(this)); //(2) this.$front = this.$card.appendDiv('front'); this.$back = this.$card.appendDiv('back'); // Add the field to the form field. It will be available as this.$field. this.addField($field); // Add other required form field elements this.addMandatoryIndicator(); this.addStatus(); } _renderProperties() { (3) super._renderProperties(); this._renderFrontImage(); this._renderBackImage(); this._renderFlipped(); } _renderFrontImage() { if (this.frontImage) { this.$front.append(''); } } _renderBackImage() { if (this.backImage) { this.$back.append(''); } } _remove() { (4) super._remove(); this.$card = null; this.$front = null; this.$back = null; } _onCardMouseDown() { (2) this.setFlipped(!this.flipped); } setFlipped(flipped) { this.setProperty('flipped', flipped); } _renderFlipped() { this.$card.toggleClass('flipped', this.flipped); } } 1 Create the dom elements in the render function. 2 Add event handler which toggles the CSS class flipped. 3 Initial rendering of the properties. Applies the state to the DOM. 4 Keep the references clean. Reset DOM references when the field has been removed. Listing 6. HelloForm.json import {FlipCardField} from '../index'; export default { id: 'hellojs.HelloForm', ... rootGroupBox': { ... fields: [ { id: 'DetailBox', ... fields: [ { id: 'NameField', ... }, (1) { id: 'FlipCardField', objectType: FlipCardField, label: 'Flip the card', frontImage: 'img/card-back.jpg', backImage: 'img/card-front.jpg', gridDataHints: { h: 5, weightY: 0 } }, { id: 'GreetButton', ... } ] } ] } } 1 FlipCard field is inserted after the name field. Listing 7. FlipCardField.less .flip-card-field { .card { position: absolute; cursor: pointer; height: 100%; width: 152px; transition: transform 1s; (1) transform-style: preserve-3d; &.flipped { transform: rotateY( 180deg ); } & > div { display: block; height: 100%; width: 100%; position: absolute; backface-visibility: hidden; (2) &.back { transform: rotateY( 180deg ); (3) } & > img { height: 100%; width: 100%; } } } } 1 Animation of the card. 2 Ensure back side is not visible. 3 Rotation to back side. Finally, create a folder img in the WebContent folder (org.eclipse.scout.hellojs.ui.html.app/src/main/resources/WebContent) and paste the two images of the card into that folder. You should be able to find the images using Google ;-) Result Flip Card","title":"How to Create a Custom Field","component":"scout-docs","version":"23.1","name":"flip-card-how-to","url":"/scout-docs/stable/howtos/scout-js/flip-card-how-to.html","titles":[{"text":"Setup","hash":"setup","id":1},{"text":"Add Empty JS and CSS Files","hash":"add-empty-js-and-css-files","id":2},{"text":"Add the JS file to the JS index","hash":"add-the-js-file-to-the-js-index","id":3},{"text":"Add the LESS file to the LESS index","hash":"add-the-less-file-to-the-less-index","id":4},{"text":"Minimal Code for a New FormField","hash":"minimal-code-for-a-new-formfield","id":5},{"text":"Create a Minimal FormField","hash":"create-a-minimal-formfield","id":6},{"text":"Add the FlipCard to the HelloForm","hash":"add-the-flipcard-to-the-helloform","id":7},{"text":"Full Featured Flip Card Field","hash":"full-featured-flip-card-field","id":8}]},"104":{"id":104,"text":"This how-to shows how to provide JAX-RS RESTful services and consume them from a Scout JS Single Page Application. The goal is to provide a ServerState service in the org.eclipse.scout.hellojs.ui.html module. Add the following dependencies to the org.eclipse.scout.hellojs.ui.html module. org.eclipse.scout.hellojs.ui.html/pom.xml ... org.eclipse.scout.rt org.eclipse.scout.rt.rest org.glassfish.jersey.containers jersey-container-servlet-core org.glassfish.jersey.inject jersey-hk2 org.glassfish.jersey.media jersey-media-json-jackson Register the REST servlet in the web.xml of org.eclipse.scout.hellojs.ui.html.app.dev and org.eclipse.scout.hellojs.ui.html.app.war. org.eclipse.scout.hellojs.ui.html.app.dev/src/main/webapp/WEB-INF/web.xml org.eclipse.scout.hellojs.ui.html.app.war/src/main/webapp/WEB-INF/web.xml ... apiServlet org.glassfish.jersey.servlet.ServletContainer javax.ws.rs.Application org.eclipse.scout.rt.rest.RestApplication 1 ... apiServlet /api/* ... Create the server state service in the org.eclipse.scout.hellojs.ui.html module. The service returns a OK status whenever it is accessible. org.eclipse.scout.hellojs.ui.html/src/main/java/org/eclipse/scout/hellojs/ui/html/helloworld/ServerStateService.java package org.eclipse.scout.hellojs.ui.html.helloworld; import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.Produces; import javax.ws.rs.core.MediaType; import org.eclipse.scout.rt.platform.status.IStatus; import org.eclipse.scout.rt.platform.status.Status; import org.eclipse.scout.rt.rest.IRestResource; /** * {@link HelloWorldService} */ @Path(\"serverstatus\") (1) public class ServerStateService implements IRestResource { @GET @Produces(MediaType.APPLICATION_JSON) public Status getStatus() { return new Status(IStatus.OK); } } 1 The path under which the service will be provided. Note: the full path is /api/serverstatus since the apiServlet is mapped to /api/* in the web.xml. Start the dev ui application org.eclipse.scout.hellojs.ui.html.app.dev/[org.eclipse.scout.hellojs] dev ui.launch. Connect to the url http:localhost:[ui server port]/api/serverstatus and ensure the service is up an running. var ajaxOptions = { type: 'GET', dataType: 'json', contentType: 'application/json; charset=UTF-8', cache: false, url: 'api/serverstatus', timeout: 0 }; this.ajaxCall = scout.create('AjaxCall', { ajaxOptions: ajaxOptions, name: 'server status request' }, { ensureUniqueId: false }); this.ajaxCall.retryIntervals = []; (1) this.ajaxCall.call() (2) .done(function(result) { (3) // TODO handle the success state. result.severity if filled with the severity code. }.bind(this)) .fail( (4) function() { // TODO handle the failure case. }.bind(this) ); 1 The ajax call retries by default 4 times for our example it is not needed to retry at all. 2 The ajax call 3 Success callback 4 Error callback","title":"How to Use a REST Service","component":"scout-docs","version":"23.1","name":"rest-service-how-to","url":"/scout-docs/stable/howtos/scout-js/rest-service-how-to.html","titles":[{"text":"Maven Dependencies","hash":"maven-dependencies","id":1},{"text":"REST Servlet","hash":"rest-servlet","id":2},{"text":"Provide a RESTful service","hash":"provide-a-restful-service","id":3},{"text":"Test if the service is up an running","hash":"test-if-the-service-is-up-an-running","id":4},{"text":"Use the service from Scout JS","hash":"use-the-service-from-scout-js","id":5}]},"105":{"id":105,"text":"Exceptions can be logged via SLF4J Logger, or given to exception handler for centralized, consistent exception handling, or translated into other exceptions. Scout provides some few exceptions/errors, which are used by the framework. All scout throwables are unchecked and typically implementing the IThrowableWithContextInfo interface, which provides functionality for associating context information with the occurred error. Most scout throwables are runtime exceptions, and typically inherit from PlatformException. See Scout Runtime Exceptions for more information. Some scout throwables are instances of java.lang.Error by extending PlatformError. Those errors usually provide functionality to interrupt Jobs, for example when a user is canceling a long running operation. Note: PlatformErrors should never be catched by business logic! See Scout Runtime Errors for more information. Base runtime exception of the Scout platform, which allows for message formatting anchors and context information to be associated. There is a single constructor which accepts the exception’s message, and optionally a variable number of arguments. Typically, a potential cause is given as its argument. The message allows further the use of formatting anchors in the form of {} pairs. The respective formatting arguments are provided via the constructor’s varArg parameter. If the last argument is of the type Throwable and not referenced as formatting anchor in the message, that Throwable is used as the exception’s cause. Internally, SLF4J MessageFormatter is used to provide substitution functionality. Hence, The format is the very same as if using SLF4j Logger. Further, PlatformException allows to associate context information, which are available in SLF4J diagnostic context map (MDC) upon logging the exception. Listing 1. PlatformException examples Exception cause = new Exception(); // Create a PlatformException with a message new PlatformException(\"Failed to persist data\"); // Create a PlatformException with a message and cause new PlatformException(\"Failed to persist data\", cause); // Create a PlatformException with a message with formatting anchors new PlatformException(\"Failed to persist data [entity={}, id={}]\", \"person\", 123); // Create a PlatformException with a message containing formatting anchors and a cause new PlatformException(\"Failed to persist data [entity={}, id={}]\", \"person\", 123, cause); // Create a PlatformException with context information associated new PlatformException(\"Failed to persist data\", cause) .withContextInfo(\"entity\", \"person\") .withContextInfo(\"id\", 123); Represents a PlatformException and is thrown in case of a processing failure, and which can be associated with an exception error code and severity. Represents a ProcessingException with VETO character. If thrown server-side, exceptions of this type are transported to the client and typically visualized in the form of a message box. Represents a PlatformException and indicates an assertion error about the application’s assumptions about expected values. Represents a PlatformException and is thrown if a ServerRunContext requires a transaction to be available. Runtime Errors are used to indicate an error, that shouldn’t be catched/treated by business logic and therefore bubble up to the appropriate exception handler in the scout framework. Because those errors are handled by the framework internals, they should never be catched on the server (Services etc.) nor on the client side (Pages, Forms, etc.). All Scout Runtime Errors extend PlatformError. Like PlatformException, PlatformErrors implement IThrowableWithContextInfo for associating context information with the occurred error. See PlatformException for usage and example code. Represents a PlatformError and indicates that a thread was interrupted while waiting for some condition to become true, e.g. while waiting for a job to complete. Unlike java.lang.InterruptedException, the thread’s interrupted status is not cleared when catching this exception. Represents a PlatformError and indicates that the result of a job cannot be retrieved, or the IFuture’s completion not be awaited because the job was cancelled. Represents a PlatformError and indicates that the maximal wait time elapsed while waiting for some condition to become true, e.g. while waiting a job to complete. An exception handler is the central point for exception handling. It provides a single method 'handle' which accepts a Throwable, and which never throws an exception. It is implemented as a bean, meaning managed by the bean manager to allow easy replacement, e.g. to use a different handler when running client or server side. By default, a ProcessingException is logged according to its severity, a VetoException, ThreadInterruptedError or FutureCancelledError logged in DEBUG level, and any other exception logged as an ERROR. If running client side, exceptions are additionally visualized and showed to the user. Exception translators are used to translate an exception into another exception. Also, they unwrap the cause of wrapper exceptions, like UndeclaredThrowableException, or InvocationTargetException, or ExecutionException. If the exception is of the type Error, it is normally not translated, but re-thrown instead. That is because an Error indicates a serious problem due to an abnormal condition. Use this translator to work with checked exceptions and runtime exceptions, but not with Throwable. If given an Exception, or a RuntimeException, or if being a subclass thereof, that exception is returned as given. Otherwise, a PlatformException is returned which wraps the given Throwable. Use this translator to work with runtime exceptions. When working with RunContext] or IFuture, some methods optionally accept a translator. If not specified, this translator is used by default. If given a RuntimeException, it is returned as given. For a checked exception, a PlatformException is returned which wraps the given checked exception. Use this translator to work with PlatformExceptions. If given a PlatformException, it is returned as given. For all other exceptions (checked or unchecked), a PlatformException is returned which wraps the given exception. Typically, this translator is used if you require to add some context information via IThrowableWithContextInfo.withContextInfo(String, Object, Object). Listing 2. PlatformException examples try { // do something } catch (Exception e) { throw BEANS.get(PlatformExceptionTranslator.class).translate(e) .withContextInfo(\"cid\", \"12345\") .withContextInfo(\"user\", Subject.getSubject(AccessController.getContext())) .withContextInfo(\"job\", IFuture.CURRENT.get()); } Use this translator to work with Throwable as given. Also, if given a wrapped exception like UndeclaredThrowableException, InvocationTargetException or ExecutionException, that exception is returned as given without unwrapping its cause. For instance, this translator can be used if working with the Job API, e.g. to distinguish between a FutureCancelledError thrown by the job’s runnable, or because the job was effectively cancelled. The Scout framework logs via SLF4J (Simple Logging Facade for Java). It serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging or logback) allowing the end user to plug in the desired logging framework at deployment time. SLF4J allows the use of formatting anchors in the form of {} pairs in the message which will be replaced by the respective argument. If the last argument is of the type Throwable and not referenced as formatting anchor in the message, that Throwable is used as the exception. Listing 3. Logging examples Exception e = new Exception(); Logger logger = LoggerFactory.getLogger(getClass()); // Log a message logger.error(\"Failed to persist data\"); // Log a message with exception logger.error(\"Failed to persist data\", e); // Log a message with formatting anchors logger.error(\"Failed to persist data [entity={}, id={}]\", \"person\", 123); // Log a message and exception with a message containing formatting anchors logger.error(\"Failed to persist data [entity={}, id={}]\", \"person\", 123, e);","title":"Working with exceptions","component":"scout-docs","version":"23.1","name":"exception-handling","url":"/scout-docs/stable/technical-guide/common-concepts/exception-handling.html","titles":[{"text":"Scout Throwables","hash":"scout-throwables","id":1},{"text":"Scout Runtime Exceptions","hash":"scout-runtime-exceptions","id":2},{"text":"PlatformException","hash":"platformexception","id":3},{"text":"ProcessingException","hash":"processingexception","id":4},{"text":"VetoException","hash":"vetoexception","id":5},{"text":"AssertionException","hash":"assertionexception","id":6},{"text":"TransactionRequiredException","hash":"transactionrequiredexception","id":7},{"text":"Scout Runtime Errors","hash":"scout-runtime-errors","id":8},{"text":"PlatformError","hash":"platformerror","id":9},{"text":"ThreadInterruptedError","hash":"threadinterruptederror","id":10},{"text":"FutureCancelledError","hash":"futurecancellederror","id":11},{"text":"TimedOutError","hash":"timedouterror","id":12},{"text":"Exception handling","hash":"exception-handling","id":13},{"text":"Exception translation","hash":"exception-translation","id":14},{"text":"DefaultExceptionTranslator","hash":"defaultexceptiontranslator","id":15},{"text":"DefaultRuntimeExceptionTranslator","hash":"default-runtime-exception-translator","id":16},{"text":"PlatformExceptionTranslator","hash":"platformexceptiontranslator","id":17},{"text":"NullExceptionTranslator","hash":"nullexceptiontranslator","id":18},{"text":"Exception Logging","hash":"exception-logging","id":19}]},"106":{"id":106,"text":"Scout provides a job manager based on Java Executors framework to run tasks in parallel, and on Quartz Trigger API to support for schedule plans and to compute firing times. A task (aka job) can be scheduled to commence execution either immediately upon being scheduled, or delayed some time in the future. A job can be single executing, or recurring based on some schedule plan. The job manager itself is implemented as an application scoped bean, meaning that it is a singleton which exists once in the web application. immediate, delayed or timed execution single (one-shot) or repetitive execution (based on Quartz schedule plans) listen for job lifecycle events wait for job completion job cancellation limitation of the maximal concurrently level among jobs RunContext based execution configurable thread pool size (core pool size, max pool size) association of job execution hints to select jobs (e.g. to cancel or await job’s completion) named jobs and threads to ease debugging A job is defined as some work to be executed asynchronously and is associated with a JobInput to describe how to run that work. The work is given to the job manager in the form of a Runnable or Callable. The only difference is, that a Runnable represents a 'fire-and-forget' action, meaning that the submitter of the job does not expect the job to return a result. On the other hand, a Callable returns the computation’s result, which the submitter can await for. Of course, a runnable’s completion can also be waited for. Listing 1. Work that does not return a result public class Work implements IRunnable { @Override public void run() throws Exception { // do some work } } Listing 2. Work that returns a computation result public class WorkWithResult implements Callable { @Override public String call() throws Exception { // do some work return \"result\"; } } Upon scheduling a job, the job manager returns a IFuture to interact with the job, e.g. to cancel its execution, or to await its completion. The job itself can also access its IFuture, namely via IFuture.CURRENT() ThreadLocal. Listing 3. Accessing the Future from within the job public class Job implements IRunnable { @Override public void run() throws Exception { IFuture myFuture = IFuture.CURRENT.get(); } } The job manager provides two scheduling methods, which only differ in the work they accept for execution (callable or runnable). IFuture schedule(IRunnable runnable, JobInput input); (1) IFuture schedule(Callable callable, JobInput input); (2) 1 Use to schedule a runnable which does not return a result to the submitter 2 Use to schedule a callable which does return a result to the submitter The second and mandatory argument to be provided is the JobInput, which tells the job manager how to run the job. Learn more about JobInput. The following snippet illustrates how a job is actually scheduled. Listing 4. Schedule a job IJobManager jobManager = BEANS.get(IJobManager.class); (1) (2) jobManager.schedule(() -> { // do something }, BEANS.get(JobInput.class)); (3) 1 Obtain the job manager via bean manager (application scoped bean) 2 Provide the work to be executed (either runnable or callable) 3 Provide the JobInput to instrument job execution This looks a little clumsy, which is why Scout provides you with the Jobs class to simplify dealing with the job manager, and to support you in the creation of job related artifacts like JobInput, filter builders and more. Most importantly, it allows to schedule jobs in a shorter and more readable form. Listing 5. Schedule a job via Jobs helper class Jobs.schedule(() -> { // do something }, Jobs.newInput()); The job input tells the job manager how to run the job. It further names the job to ease debugging, declares in which context to run the job, and how to deal with unhandled exceptions. The job input itself is a bean, useful if adding some additional features to the job manager. The API of JobInput supports for method chaining for reduced and more solid code. Listing 6. Schedule a job and control execution via JobInput Jobs.schedule(() -> { // do something }, Jobs.newInput() .withName(\"job name\") (1) .withRunContext(ClientRunContexts.copyCurrent()) (2) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(10, TimeUnit.SECONDS) (3) .withSchedule(FixedDelayScheduleBuilder.repeatForever(5, TimeUnit.SECONDS))) (4) .withExceptionHandling(new ExceptionHandler() { (5) @Override public void handle(Throwable t) { System.err.println(t); } }, true)); This snippet instructs the job manager to run the job as following: 1 Give the job a name. 2 Run the job in the current calling context, meaning in the very same context as the submitter is running when giving this job to the job manager. By copying the current context, the job will also be cancelled upon cancellation of the current RunContext. 3 Commence execution in 10 seconds (delayed execution). 4 Execute the job repeatedly, with a delay of 5 seconds between the termination of one and the commencement of the next execution. Also, repeat the job infinitely, until being cancelled. 5 Print any uncaught exception to the error console, and do not propagate the exception to the submitter, nor cancel the job upon an uncaught exception. The following paragraphs describe the functionality of JobInput in more detail. To optionally specify the name of the job, which is used to name the worker thread (only in development environment) and for logging purpose. Optionally, formatting anchors in the form of {} pairs can be used in the name, which will be replaced by the respective argument. Jobs.newInput() .withName(\"Sending emails [from={}, to={}]\", \"frank\", \"john@eclipse.org, jack@eclipse.org\"); To optionally specify the RunContext to be installed during job execution. The RunMonitor associated with the RunContext will be used as the job’s monitor, meaning that cancellation requests to the job future or the context’s monitor are equivalent. If no context is given, the job manager ensures a monitor to be installed, so that executing code can always query its cancellation status via RunMonitor.CURRENT.get().isCancelled(). To optionally set the trigger to define the schedule upon which the job will commence execution. If not set, the job will commence execution immediately after being scheduled, and will execute exactly once. The trigger mechanism is provided by Quartz Scheduler, meaning that you can profit from the powerful Quartz schedule capabilities. For more information, see http://www.quartz-scheduler.org. Use the static factory method Jobs.newExecutionTrigger() to get an instance: // Schedules a delayed single executing job Jobs.newInput() .withName(\"job\") .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(10, TimeUnit.SECONDS)); // Schedules a repeatedly running job at a fixed rate (every hour), which ends in 24 hours Jobs.newInput() .withName(\"job\") .withExecutionTrigger(Jobs.newExecutionTrigger() .withEndIn(1, TimeUnit.DAYS) .withSchedule(SimpleScheduleBuilder.repeatHourlyForever())); // Schedules a job which runs at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday Jobs.newInput() .withName(\"job\") .withExecutionTrigger(Jobs.newExecutionTrigger() .withSchedule(CronScheduleBuilder.cronSchedule(\"0 15 10 ? * MON-FRI\"))); Learn more about ExecutionTrigger. To optionally control the maximal concurrently level among jobs assigned to the same semaphore. With a semaphore in place, this job only commences execution, once a permit is free or gets available. If free, the job commences execution immediately at the next reasonable opportunity, unless no worker thread is available. A semaphore initialized to one allows to run jobs in a mutually exclusive manner, and a semaphore initialized to zero to run no job at all. The number of total permits available can be changed at any time, which allows to adapt the maximal concurrency level to some dynamic criteria like time of day or system load. However, a semaphore can be sealed, meaning that the number of permits cannot be changed anymore, and any attempts will be rejected. A new semaphore instance can be obtained via Jobs class. IExecutionSemaphore semaphore = Jobs.newExecutionSemaphore(5); (1) for (int i = 0; i { // doing something }, Jobs.newInput() .withName(\"job-{}\", i) .withExecutionSemaphore(semaphore)); (3) } 1 Create a new ExecutionSemaphore via Jobs class. The semaphore is initialized with 5 permits, meaning that at any given time, there are no more than 5 jobs running concurrently. 2 Schedule 100 jobs in a row. 3 Set the semaphore to limit the maximal concurrency level to 5 jobs. Learn more about ExecutionSemaphore. To associate the job with an execution hint. An execution hint is simply a marker to mark a job, and can be evaluated by filters to select jobs, e.g. to listen to job lifecycle events of some particular jobs, or to wait for some particular jobs to complete, or to cancel some particular jobs. A job may have multiple hints associated. Further, hints can be registered directly on the future via IFuture.addExecutionHint(hint), or removed via IFuture.removeExecutionHint(hint). To control how to deal with uncaught exceptions. By default, an uncaught exception is handled by ExceptionHandler bean and then propagated to the submitter, unless the submitter is not waiting for the job to complete via IFuture.awaitDoneAndGet(). This method expects two arguments: an optional exception handler, and a boolean flag indicating whether to swallow exceptions. 'Swallow' is independent of the specified exception handler, and indicates whether an exception should be propagated to the submitter, or swallowed otherwise. If running a repetitive job with swallowing set to true, the job will continue its repetitive execution upon an uncaught exception. If set to false, the execution would exit. To set the thread name of the worker thread that will execute the job. To set the maximal expiration time upon which the job must commence execution. If elapsed, the job is cancelled and does not commence execution. By default, a job never expires. For a job that executes once, the expiration is evaluated just before it commences execution. For a job with a repeating schedule, it is evaluated before every single execution. In contrast, the trigger’s end time specifies the time at which the trigger will no longer fire. However, if fired, the job may not be executed immediately at this time, which depends on whether having to compete for an execution permit first. So the end time may already have elapsed once commencing execution. In contrast, the expiration time is evaluated just before starting execution. A future represents the result of an asynchronous computation, and is returned by the job manager upon scheduling a job. The future provides functionality to await for the job to complete, or to get its computation result or exception, or to cancel its execution, and more. Learn more about job cancellation in Job cancellation. Learn more about listening for job lifecycle events in Subscribe for job lifecycle events. Learn more about awaiting the job’s completion in Awaiting job completion. Upon scheduling a job, the job transitions different states. The current state of a job can be queried from its associated IFuture. state description SCHEDULED Indicates that a job was given to the job manager for execution. REJECTED Indicates that a job was rejected for execution. This might happen if the job manager has been shutdown, or if no more worker threads are available. PENDING Indicates that a job’s execution is pending, either because scheduled with a delay, or because of being a repetitive job while waiting for the commencement of the next execution. RUNNING Indicates that a job is running. DONE Indicates that a job finished execution, either normally or because it was cancelled. Use IFuture.isCancelled() to check for cancellation. WAITING_FOR_PERMIT Indicates that a semaphore aware job is competing for a permit to become available. WAITING_FOR_BLOCKING_CONDITION Indicates that a job is blocked by a blocking condition, and is waiting for it to fall. The state 'done' does not necessarily imply that the job already finished execution. That is because a job also enters 'done' state upon cancellation, but may still continue execution. A future filter is a filter which can be passed to various methods of the job manager to select some futures. The filter must implement IFilter interface, and has a single method to accept futures of interest. Listing 7. Example of a future filter public class FutureFilter implements Predicate> { @Override public boolean test(IFuture future) { // Accept or reject the future return false; } } Scout provides you with FutureFilterBuilder class to ease building filters which match multiple criteria joined by logical 'AND' operation. Listing 8. Usage of FutureFilterBuilder Predicate> filter = Jobs.newFutureFilterBuilder() (1) .andMatchExecutionHint(\"computation\") (2) .andMatchNotState(JobState.PENDING) (3) .andAreSingleExecuting() (4) .andMatchNotFuture(IFuture.CURRENT.get()) (5) .andMatchRunContext(ClientRunContext.class) (6) .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) (7) .toFilter(); (8) 1 Returns an instance of the future filter builder 2 Specifies to match only futures associated with execution hint 'computation' 3 Specifies to match only jobs not in state pending 4 Specifies to match only single executing jobs, meaning no recurring jobs 5 Specifies to exclude the current future (if any) 6 Specifies to match only jobs running on behalf of a ClientRunContext 7 Specifies to match only jobs of the current session 8 Builds the filters to get a Filter instance Fore more information, refer to the JavaDoc of FutureFilterBuilder. A job event filter is a filter which can be given to job manager to subscribe for job lifecycle events. The filter must implement IFilter interface, and has a single method to accept events of interest. Listing 9. Example of an event filter public class EventFilter implements Predicate { @Override public boolean test(JobEvent event) { // Accept or reject the event return false; } } Scout provides you with JobEventFilterBuilder class to ease building filters which match multiple criteria joined by logical 'AND' operation. Listing 10. Usage of JobEventFilterBuilder Predicate filter = Jobs.newEventFilterBuilder() (1) .andMatchEventType(JobEventType.JOB_STATE_CHANGED) (2) .andMatchState(JobState.RUNNING) (3) .andMatch(new SessionJobEventFilter(ISession.CURRENT.get())) (4) .andMatchExecutionHint(\"computation\") (5) .toFilter(); (6) 1 Returns an instance of the job event filter builder 2 Specifies to match all events representing a job state change 3 Specifies to match only events for jobs which transitioned into running state 4 Specifies to match only events for jobs of the current session 5 Specifies to match only events for jobs which are associated with the execution hint 'computation' 6 Builds the filters to get a Filter instance Fore more information, refer to the JavaDoc of JobEventFilterBuilder. A job can be cancelled in two ways, either directly via its IFuture, or via job manager. Both expect you to provide a boolean flag indicating whether to interrupt the executing working thread. Upon cancellation, the job immediately enters 'done' state. Learn more about Job states. If cancelling via job manager, a future filter must be given to select the jobs to be cancelled. Learn more about Future filter The cancellation attempt will be ignored if the job has already completed or was cancelled. If not running yet, the job will never run. If the job has already started, then the interruptIfRunning parameter determines whether the thread executing the job should be interrupted in an attempt to stop the job. In the following some examples: Listing 11. Cancel a job via its future // Schedule a job IFuture future = Jobs.schedule(new Work(), Jobs.newInput()); // Cancel the job via its future future.cancel(false); Listing 12. Cancel multiple jobs via job manager Jobs.getJobManager().cancel(Jobs.newFutureFilterBuilder() .andMatchFuture(future1, future2, future3) .toFilter(), false); Listing 13. Cancel multiple jobs which match a specific execution hint and the current session Jobs.getJobManager().cancel(Jobs.newFutureFilterBuilder() .andMatchExecutionHint(\"computation\") .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), false); A job can query its current cancellation status via RunMonitor.CURRENT.get().isCancelled(). If doing some long-running operations, it is recommended for the job to regularly check for cancellation. A job which is scheduled to run on a copy of the submitting RunContext, it gets also cancelled once the RunMonitor of that context gets cancelled. Sometimes it is useful to register for some job lifecycle events. The following event types can be subscribed for: state description JOB_STATE_CHANGED Signals that a job transitioned to a new JobState, e.g. form JobState.SCHEDULED to JobState.RUNNING. JOB_EXECUTION_HINT_ADDED Signals that an execution hint was added to a job. JOB_EXECUTION_HINT_REMOVED Signals that an execution hint was removed from a job. JOB_MANAGER_SHUTDOWN Signals that the job manager was shutdown. The listener is registered via job manager as following: Listing 14. Subscribe for global job events Jobs.getJobManager().addListener(Jobs.newEventFilterBuilder() (1) .andMatchEventType(JobEventType.JOB_STATE_CHANGED) .andMatchState(JobState.RUNNING) .andMatch(new SessionJobEventFilter(ISession.CURRENT.get())) .toFilter(), event -> { IFuture future = event.getData().getFuture(); (2) System.out.println(\"Job commences execution: \" + future.getJobInput().getName()); }); 1 Subscribe for all events related to jobs just about to commence execution, and which belong to the current session 2 Get the future this event was fired for If interested in only events of a single future, the listener can be registered directly on the future. Listing 15. Subscribe for local job events future.addListener(Jobs.newEventFilterBuilder() .andMatchEventType(JobEventType.JOB_STATE_CHANGED) .andMatchState(JobState.RUNNING) .toFilter(), event -> System.out.println(\"Job commences execution\")); A job’s completion can be either awaited on its IFuture, or via job manager - the first optionally allows to consume the job’s computation result, whereas the second allows multiple futures to be awaited for. When awaiting futures, the definition of 'done' and 'finished' state should be understood - 'done' means that the future completed either normally, or was cancelled. But, if cancelled while running, the job may still continue its execution, whereas a job which not commenced execution yet, will never do so. The latter typically applies for jobs scheduled with a delay. However, 'finished' state differs from 'done' state insofar as a cancelled, currently running job enters 'finished' state only upon its actual completion. Otherwise, if not cancelled, or cancelled before executing, it is equivalent to 'done' state. In most situations, it is sufficient to await for the future’s done state, especially because a cancelled job cannot return a result to the submitter anyway. Besides of some overloaded methods, IFuture basically provides two methods to wait for a future to enter 'done' state, namely awaitDone and awaitDoneAndGet, with the difference that the latter additionally returns the job’s result or exception. If the future is already done, those methods will return immediately. For both methods, there exists an overloaded version to wait for at most a given time, which once elapsed results in a TimedOutError thrown. Further, awaitDoneAndGet allows to specify an IExceptionTranslator to control exception translation. By default, DefaultRuntimeExceptionTranslator is used, meaning that a RuntimeException is propagated as it is, whereas a checked exception would be wrapped into a PlatformException. If you require checked exceptions to be thrown as they are, use DefaultExceptionTranslator instead, or even NullExceptionTranslator to work with the raw ExecutionException as being thrown by Java Executor framework. Listing 16. Examples of how to await done state on a future IFuture future = Jobs.schedule(() -> { // doing something return \"computation result\"; }, Jobs.newInput()); // Wait until done without consuming the result future.awaitDone(); (1) future.awaitDone(10, TimeUnit.SECONDS); (2) // Wait until done and consume the result String result = future.awaitDoneAndGet(); (3) result = future.awaitDoneAndGet(10, TimeUnit.SECONDS); (4) // Wait until done, consume the result, and use a specific exception translator result = future.awaitDoneAndGet(DefaultExceptionTranslator.class); (5) result = future.awaitDoneAndGet(10, TimeUnit.SECONDS, DefaultExceptionTranslator.class); (6) 1 Waits if necessary for the job to complete, or until cancelled. This method does not throw an exception if cancelled or the computation failed, but throws ThreadInterruptedError if the current thread was interrupted while waiting. 2 Waits if necessary for at most 10 seconds for the job to complete, or until cancelled, or the timeout elapses. This method does not throw an exception if cancelled, or the computation failed, but throws TimedOutError if waiting timeout elapsed, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 3 Waits if necessary for the job to complete, and then returns its result, if available, or throws its exception according to DefaultRuntimeExceptionTranslator, or throws FutureCancelledError if cancelled, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 4 Waits if necessary for at most 10 seconds for the job to complete, and then returns its result, if available, or throws its exception according to DefaultRuntimeExceptionTranslator, or throws FutureCancelledError if cancelled, or throws TimedOutError if waiting timeout elapsed, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 5 Waits if necessary for the job to complete, and then returns its result, if available, or throws its exception according to the given DefaultExceptionTranslator, or throws FutureCancelledError if cancelled, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 6 Waits if necessary for at most the given time for the job to complete, and then returns its result, if available, or throws its exception according to the given DefaultExceptionTranslator, or throws FutureCancelledError if cancelled, or throws TimedOutError if waiting timeout elapsed, or throws ThreadInterruptedError if the current thread was interrupted while waiting. It is further possible to await asynchronously on a future to enter done state by registering a callback via whenDone method. The advantage over registering a listener is that the callback is invoked even if the future already entered done state upon registration. Listing 17. Example of when-done callback future.whenDone(event -> { // invoked upon entering done state. }, ClientRunContexts.copyCurrent()); Because invoked in another thread, this method optionally accepts a RunContext] to be applied when being invoked. Use the method awaitFinished to wait for the job to finish, meaning that the job either completed normally or by an exception, or that it will never commence execution due to a premature cancellation. To learn more about the difference between 'done' and 'finished' state, click here. Please note that this method does not return the job’s result, because by Java Future definition, a cancelled job cannot provide a result. Listing 18. Examples of how to await finished state on a future IFuture future = Jobs.schedule(() -> { // doing something return \"computation result\"; }, Jobs.newInput()); // Wait until finished future.awaitFinished(10, TimeUnit.SECONDS); Job Manager allows to await for multiple futures at once. The filter to be provided limits the futures to await for. This method requires you to provide a maximal time to wait. Filters can be plugged by using logical filters like AndFilter or OrFilter, or negated by enclosing a filter in NotFilter. Also see Future filter to create a filter to match multiple criteria joined by logical 'AND' operation. Listing 19. Examples of how to await done state of multiple futures // Wait for some futures Jobs.getJobManager().awaitDone(Jobs.newFutureFilterBuilder() (1) .andMatchFuture(future1, future2, future3) .toFilter(), 1, TimeUnit.MINUTES); // Wait for all futures marked as 'reporting' jobs of the current session Jobs.getJobManager().awaitDone(Jobs.newFutureFilterBuilder() (2) .andMatchExecutionHint(\"reporting\") .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), 1, TimeUnit.MINUTES); 1 Waits if necessary for at most 1 minute for all three futures to complete, or until cancelled, or the timeout elapses. 2 Waits if necessary for at most 1 minute until all jobs marked as 'reporting' jobs of the current session complete, or until cancelled, or the timeout elapses. Use the method awaitFinished to wait for multiple jobs to finish, meaning that the jobs either completed normally or by an exception, or that they will never commence execution due to a premature cancellation. To learn more about the difference between 'done' and 'finished' state, click here. Listing 20. Examples of how to await finish state of multiple futures // Wait for some futures Jobs.getJobManager().awaitFinished(Jobs.newFutureFilterBuilder() (1) .andMatchFuture(future1, future2, future3) .toFilter(), 1, TimeUnit.MINUTES); // Wait for all futures marked as 'reporting' jobs of the current session Jobs.getJobManager().awaitFinished(Jobs.newFutureFilterBuilder() (2) .andMatchExecutionHint(\"reporting\") .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), 1, TimeUnit.MINUTES); 1 Waits if necessary for at most 1 minute for all three futures to finish, or until cancelled, or the timeout elapses. 2 Waits if necessary for at most 1 minute until all jobs marked as 'reporting' jobs of the current session finish, or until cancelled, or the timeout elapses. If a job throws an exception, that exception is handled by ExceptionHandler, and propagated to the submitter. However, the exception is only propagated if having a waiting submitter. Also, an uncaught exception causes repetitive jobs to terminate. This default behavior as described can be changed via JobInput.withExceptionHandling(..). A blocking condition allows a thread to wait for a condition to become true. That is similar to the Java Object’s 'wait/notify' mechanism, but with some additional functionality regarding semaphore aware jobs. If a semaphore aware job enters a blocking condition, it releases ownership of the permit, which allows another job of that same semaphore to commence execution. Upon the condition becomes true, the job then must compete for a permit anew. A condition can be used across multiple threads to wait for the same condition. Also, a condition is reusable upon invalidation. And finally, a condition can be used even if not running within a job. A blocking condition is often used by model jobs to wait for something to happen, but to allow another model job to run while waiting. A typical use case would be to wait for a MessageBox to be closed. You are running in a semaphore aware job and require to do some long-running operation. During that time you do not require to be the permit owner. A simple but wrong approach would be the following: // Schedule a long running operation. IFuture future = Jobs.schedule(new LongRunningOperation(), Jobs.newInput()); // Wait until done. future.awaitDone(); The problem with this approach is, that you still are the permit owner while waiting, meaning that you possibly prevent other jobs from running. Instead, you could use a blocking condition for that to achieve: // Create a blocking condition. final IBlockingCondition operationCompleted = Jobs.newBlockingCondition(true); // Schedule a long running operation. IFuture future = Jobs.schedule(new LongRunningOperation(), Jobs.newInput()); // Register done callback to unblock the condition. future.whenDone(event -> { // Let the waiting job re-acquire a permit and continue execution. operationCompleted.setBlocking(false); }, null); // Wait until done. Thereby, the permit of the current job is released for the time while waiting. operationCompleted.waitFor(); Represents a fair counting semaphore used in Job API to control the maximal number of jobs running concurrently. Jobs which are assigned to the same semaphore run concurrently until they reach the maximal concurrency level defined for that semaphore. Subsequent tasks then wait in the queue until a permit becomes available. A semaphore initialized to one allows to run jobs in a mutually exclusive manner, and a semaphore initialized to zero to run no job at all. The number of total permits available can be changed at any time, which allows to adapt the maximal concurrency level to some dynamic criteria like time of day or system load. However, once calling seal(), the number of permits cannot be changed anymore, and any attempts will result in an AssertionException. By default, a semaphore is unbounded. Component that defines the schedule upon which a job will commence execution. A trigger can be as simple as a 'one-shot' execution at some specific point in time in the future, or represent a schedule which executes a job on a repeated basis. The latter can be configured to run infinitely, or to end at a specific point in time. It is further possible to define rather complex triggers, like to execute a job every second Friday at noon, but with the exclusion of all the business’s holidays. See the various schedule builders provided by Quartz Scheduler: SimpleScheduleBuilder, CronScheduleBuilder, CalendarIntervalScheduleBuilder, DailyTimeIntervalScheduleBuilder. The most powerful builder is CronScheduleBuilder. Cron is a UNIX tool with powerful and proven scheduling capabilities. For more information, see http://www.quartz-scheduler.org. Additionally, Scout provides you with FixedDelayScheduleBuilder to run a job with a fixed delay between the termination of one execution and the commencement of the next execution. Use the static factory method 'Jobs.newExecutionTrigger()' to get an instance. Regardless of the schedule used, job manager guarantees no concurrent execution of the same job. That may happen, if using a repeated schedule with the job not terminated its last execution yet, but the schedule’s trigger would like to fire for the next execution already. Such a situation is called a misfiring. The action to be taken upon a misfiring is configurable via the schedule’s misfiring policy. A policy can be to run the job immediately upon termination of the previous execution, or to just ignore that missed firing. See the JavaDoc of the schedule for more information. Upon stopping the platform, the job manager will also be shutdown.If having a IPlatformListener to perform some cleanup work, and which requires the job manager to be still functional, that listener must be annotated with an @Order less than IJobManager.DESTROY_ORDER, which is 5'900. If not specifying an @Order explicitly, the listener will have the default order of 5, meaning being invoked before job manager shutdown anyway. Model jobs exist client side only, and are used to interact with the Scout client model to read and write model values in a serial manner per session.That enables no synchronization to be used when interacting with the model. By definition, a model job requires to be run on behalf of a ClientRunContext with a IClientSession set, and must have the session’s model job semaphore set as its ExecutionSemaphore.That causes all such jobs to be run in sequence in the model thread.At any given time, there is only one model thread active per client session. The class ModelJobs is a helper class, and is for convenience purpose to facilitate the creation of model job related artifacts, and to schedule model jobs. Listing 21. Running work in model thread (1) ModelJobs.schedule(() -> { // doing something in model thread }, ModelJobs.newInput(ClientRunContexts.copyCurrent()) (2) .withName(\"Doing something in model thread\")); 1 Schedules the work to be executed in the model thread 2 Creates the JobInput to become a model job, meaning with the session’s model job semaphore set For model jobs, it is also allowed to run according to a Quartz schedule plan, or to be executed with a delay. Then the model permit is acquired just before each execution, and not upon being scheduled. Furthermore, the class ModelJobs provides some useful static methods: // Returns true if the current thread represents the model thread for the current client session. At any given time, there is only one model thread active per client session. ModelJobs.isModelThread(); // Returns true if the given Future belongs to a model job. ModelJobs.isModelJob(IFuture.CURRENT.get()); // Returns a builder to create a filter for future objects representing a model job. ModelJobs.newFutureFilterBuilder(); // Returns a builder to create a filter for JobEvent objects originating from model jobs. ModelJobs.newEventFilterBuilder(); // Instructs the job manager that the current model job is willing to temporarily yield its current model job permit. It is rarely appropriate to use this method. It may be useful for debugging or testing purposes. ModelJobs.yield(); Job manager can be configured with properties starting with scout.jobmanager. See Scout Config Properties. Job manager is implemented as an application scoped bean, and which can be replaced. To do so, create a class which extends JobManager, and annotate it with @Replace annotation. Most likely, you like to use the EE container’s ThreadPoolExecutor, or to contribute some behavior to the callable chain which finally executes the job. To change the executor, overwrite createExecutor method and return the executor of your choice. But do not forget to register a rejection handler to reject futures upon rejection. Also, overwrite shutdownExecutor to not shut down the container’s executor. To contribute some behavior to the callable chain, overwrite the method interceptCallableChain and contribute your decorator or interceptor. Refer to the method’s JavaDoc for more information. This sections contains some common scheduling examples. Listing 22. Schedule a one-shot job Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running once\") .withRunContext(ClientRunContexts.copyCurrent())); Listing 23. Schedule a job with a delay Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running in 10 seconds\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(10, TimeUnit.SECONDS))); // delay of 10 seconds Listing 24. Schedule a repetitive job at a fixed rate Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running every minute\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(SimpleScheduleBuilder.simpleSchedule() (2) .withIntervalInMinutes(1) (3) .repeatForever()))); (4) 1 Configure to fire in 1 minute for the first time 2 Use Quartz simple schedule to achieve fixed-rate execution 3 Repetitively fire every minute 4 Repeat forever Listing 25. Schedule a repetitive job which runs 60 times at every minute Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running every minute for total 60 times\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(SimpleScheduleBuilder.simpleSchedule() (2) .withIntervalInMinutes(1) (3) .withRepeatCount(59)))); (4) 1 Configure to fire in 1 minute for the first time 2 Use Quartz simple schedule to achieve fixed-rate execution 3 Repetitively fire every minute 4 Repeat 59 times, plus the initial execution Listing 26. Schedule a repetitive job at a fixed delay Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running forever with a delay of 1 minute between the termination of the previous and the next execution\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(FixedDelayScheduleBuilder.repeatForever(1, TimeUnit.MINUTES)))); (2) 1 Configure to fire in 1 minute for the first time 2 Use fixed delay schedule Listing 27. Schedule a repetitive job which runs 60 times, but waits 1 minute between the termination of the previous and the commencement of the next execution Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running 60 times with a delay of 1 minute between the termination of the previous and the next execution\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(FixedDelayScheduleBuilder.repeatForTotalCount(60, 1, TimeUnit.MINUTES)))); (2) 1 Configure to fire in 1 minute for the first time 2 Use fixed delay schedule Listing 28. Running at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withSchedule(CronScheduleBuilder.cronSchedule(\"0 15 10 ? * MON-FRI\")))); (1) 1 Cron format: [second] [minute] [hour] [day_of_month] [month] [day_of_week] [year]? Listing 29. Running every minute starting at 14:00 and ending at 14:05, every day Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running every minute starting at 14:00 and ending at 14:05, every day\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withSchedule(CronScheduleBuilder.cronSchedule(\"0 0-5 14 * * ?\")))); (1) 1 Cron format: [second] [minute] [hour] [day_of_month] [month] [day_of_week] [year]? Listing 30. Limit the maximal concurrency level among jobs IExecutionSemaphore semaphore = Jobs.newExecutionSemaphore(5); (1) for (int i = 0; i { // doing something }, Jobs.newInput() .withName(\"job-{}\", i) .withExecutionSemaphore(semaphore)); (2) } 1 Create the execution semaphore initialized with 5 permits 2 Set the execution semaphore to the job subject for limited concurrency Listing 31. Cancel all jobs of the current session Jobs.getJobManager().cancel(Jobs.newFutureFilterBuilder() .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), true); Listing 32. Query for cancellation public class CancellableWork implements IRunnable { @Override public void run() throws Exception { // do first chunk of operations if (RunMonitor.CURRENT.get().isCancelled()) { return; } // do next chunk of operations if (RunMonitor.CURRENT.get().isCancelled()) { return; } // do next chunk of operations } } Listing 33. Release current semaphore permit while executing // Create a blocking condition. final IBlockingCondition operationCompleted = Jobs.newBlockingCondition(true); // Schedule a long running operation. IFuture future = Jobs.schedule(new LongRunningOperation(), Jobs.newInput()); // Register done callback to unblock the condition. future.whenDone(event -> { // Let the waiting job re-acquire a permit and continue execution. operationCompleted.setBlocking(false); }, null); // Wait until done. Thereby, the permit of the current job is released for the time while waiting. operationCompleted.waitFor();","title":"JobManager","component":"scout-docs","version":"23.1","name":"job-manager","url":"/scout-docs/stable/technical-guide/common-concepts/job-manager.html","titles":[{"text":"Functionality","hash":"functionality","id":1},{"text":"Job","hash":"job","id":2},{"text":"Scheduling a Job","hash":"scheduling-a-job","id":3},{"text":"JobInput","hash":"jobinput","id":4},{"text":"JobInput.withName","hash":"jobinput-withname","id":5},{"text":"JobInput.withRunContext","hash":"jobinput-withruncontext","id":6},{"text":"JobInput.withExecutionTrigger","hash":"jobinput-withexecutiontrigger","id":7},{"text":"JobInput.withExecutionSemaphore","hash":"jobinput-withexecutionsemaphore","id":8},{"text":"JobInput.withExecutionHint","hash":"jobinput-withexecutionhint","id":9},{"text":"JobInput.withExceptionHandling","hash":"jobinput-withexceptionhandling","id":10},{"text":"JobInput.withThreadName","hash":"jobinput-withthreadname","id":11},{"text":"JobInput.withExpirationTime","hash":"jobinput-withexpirationtime","id":12},{"text":"IFuture","hash":"ifuture","id":13},{"text":"Job states","hash":"job-states","id":14},{"text":"Future filter","hash":"future-filter","id":15},{"text":"Event filter","hash":"event-filter","id":16},{"text":"Job cancellation","hash":"job-cancellation","id":17},{"text":"Subscribe for job lifecycle events","hash":"subscribe-for-job-lifecycle-events","id":18},{"text":"Awaiting job completion","hash":"awaiting-job-completion","id":19},{"text":"Difference between 'done' and 'finished' state","hash":"difference-between-done-and-finished-state","id":20},{"text":"Awaiting a single future’s 'done' state","hash":"awaiting-a-single-futures-done-state","id":21},{"text":"Awaiting a single future’s 'finished' state","hash":"awaiting-a-single-futures-finished-state","id":22},{"text":"Awaiting multiple future’s 'done' state","hash":"awaiting-multiple-futures-done-state","id":23},{"text":"Awaiting multiple future’s 'finished' state","hash":"awaiting-multiple-futures-finished-state","id":24},{"text":"Uncaught job exceptions","hash":"uncaught-job-exceptions","id":25},{"text":"Blocking condition","hash":"blocking-condition","id":26},{"text":"Example of a blocking condition","hash":"example-of-a-blocking-condition","id":27},{"text":"ExecutionSemaphore","hash":"executionsemaphore","id":28},{"text":"ExecutionTrigger","hash":"executiontrigger","id":29},{"text":"Misfiring","hash":"misfiring","id":30},{"text":"Stopping the platform","hash":"stopping-the-platform","id":31},{"text":"Model Jobs","hash":"model-jobs","id":32},{"text":"Configuration","hash":"configuration","id":33},{"text":"Extending job manager","hash":"extending-job-manager","id":34},{"text":"Scheduling examples","hash":"scheduling-examples","id":35}]},"107":{"id":107,"text":"Scout contains a platform which provides basic functionality required by many software applications. The following list gives some examples for which tasks the platform is responsible for: Application Lifecycle Management Object Instance Management (Bean Management) Configuration Management Application Inventory The lifecycle of a Scout application is controlled by implementations of org.eclipse.scout.rt.platform.IPlatform. This interface contains methods to start and stop the application and to retrieve the Bean Manager associated with this application. The class org.eclipse.scout.rt.platform.Platform provides access to the current platform instance. On first access the platform is automatically created and started. During its startup, the platform transitions through several states. Depending on the state of the platform some components may already be initialized and ready to use while others are not available yet. See enum org.eclipse.scout.rt.platform.IPlatform.State for a description of each state and what may be used in a certain state. To participate in the application startup or shutdown a platform listener can be created. For this a class implementing org.eclipse.scout.rt.platform.IPlatformListener must be created. The listener is automatically a bean and must therefore not be registered anywhere. See Bean Manager to learn more about bean management in Scout and how the listener becomes a bean. As soon as the state of the platform changes the listener will be notified. Listing 1. A listener that will do some work as soon as the platform has been started. public class MyListener implements IPlatformListener { @Override public void stateChanged(PlatformEvent event) { if (event.getState() == State.PlatformStarted) { // do some work as soon as the platform has been started completely } } } As platform listeners may run as part of the startup or shutdown not the full Scout platform may be available. Depending on the state some tasks cannot be performed or some platform models are not available yet! Scout applications use an inventory containing the classes available together with some meta data about them. This allows finding classes available on the classpath by certain criteria: All subclasses of a certain base class (also known as type hierarchy) All classes having a specific annotation. This class inventory can be accessed as described in listing Listing 2. Listing 2. Access the Scout class inventory. IClassInventory classInventory = ClassInventory.get(); // get all classes below IService Set services = classInventory.getAllKnownSubClasses(IService.class); // get all classes having a Bean annotation (directly on them self). Set classesHavingBeanAnnot = classInventory.getKnownAnnotatedTypes(Bean.class); In its static initializer, the ClassInventory collects classes in projects containing a resource called META-INF/scout.xml. Scanning all classes would be unnecessarily slow and consume too much memory. The file scout.xml is just an empty xml file. Scout itself also includes scout.xml files in all its projects. The format XML was chosen to allow adding exclusions in large projects, but this feature is not implemented right now. It is recommended to add an emtpy scout.xml file into the META-INF folder of your projects, such that the classes are available in the 'ClassInventory'. Scout uses Jandex [1] to build the class inventory. The meta data to find classes can be pre-computed during build time into an index file describing the contents of the jar file. See the jandex project for details. The Scout bean manager is a dynamic registry for beans. Beans are normal Java classes usually having some meta data describing the characteristics of the class. The bean manager can be changed at any time. This means beans can be registered or unregistered while the application is running. For this the bean manager contains methods to register and unregister beans. Furthermore methods to retrieve beans are provided. The next sections describe how beans are registered, the different meta data of beans, how instances are created, how they can be retrieved and finally how the bean decoration works. Usually beans are registered during application startup. The application startup can be intercepted using platform listeners as described in Platform Listener. Listing 3. A listener that registers a bean (direct class or with meta data). public class RegisterBeansListener implements IPlatformListener { @Override public void stateChanged(PlatformEvent event) { if (event.getState() == State.BeanManagerPrepared) { // register the class directly BEANS.getBeanManager().registerClass(BeanSingletonClass.class); // Or register with meta information BeanMetaData beanData = new BeanMetaData(BeanClass.class).withApplicationScoped(true); BEANS.getBeanManager().registerBean(beanData); } } } There is also a predefined bean registration built into the Scout runtime. This automatically registers all classes having an org.eclipse.scout.rt.platform.@Bean annotation. Therefore it is usually sufficient to only annotate a class with @Bean to have it available in the bean manager as shown in listing Listing 4. Listing 4. A normal bean @Bean public class BeanClass { } As the @Bean annotation is an java.lang.annotation.@Inherited annotation, this automatically registers all child classes too. This means that also interfaces may be @Bean annotated making all implementations automatically available in the bean manager! Furthermore other annotations may be @Bean annotated making all classes holding these annotations automatically to beans as well. If you inherit a @Bean annotation from one of you super types but don’t want to be automatically registered into the bean manger you can use the org.eclipse.scout.rt.platform.@IgnoreBean annotation. Those classes will then be skipped. There is a built in annotation org.eclipse.scout.rt.shared.@TunnelToServer. Interfaces marked with this annotation are called on the server. The server itself ignores this annotation. To achieve this a bean is registered on client side for each of those interfaces. Because the platform cannot directly create an instance for these beans a specific producer is registered which creates a proxy that delegates the call to the server. Please note that this annotation is not inherited. Therefore if an interface extends a tunnel-to-server interface and the new methods of this interface should be called on the server as well the new child interface has to repeat the annotation! The proxy is created only once for a specific interface bean. The most important meta data of a bean is the scope. It describes how many instances of a bean can exist in a single application. There are two different possibilities: Unlimited instances: Each bean retrieval results in a new instance of the bean. This is the default. Only one instance: There can only be one instance by Scout platform. From an application point of view this can be seen as singleton. The instance is created on first use and each subsequent retrieval of the bean results in this same cached instance. As like all bean meta data this characteristic can be provided in two different ways: With a Java annotation on the bean class as shown in the listing Listing 5. With bean meta data as shown in listing Listing 3. Listing 5. An application scoped bean using annotations @ApplicationScoped public class BeanSingletonClass { } So the Java annotation org.eclipse.scout.rt.platform.@ApplicationScoped describes a bean having singleton characteristics. Also @ApplicationScoped is an @Inherited annotation. Therefore all child classes automatically inherit this characteristic like with the @Bean annotation. It is not only possible to influence the number of instances to be created (see Bean Scopes), but also to create beans eagerly, execute methods after creation (like constructors) or to delegate the bean creation completely. These topics are described in the next sections. By default beans are created on each request. An exception are the beans marked to be application scoped (as shown in Bean Scopes). Those beans are only created on first request (lazy). This means if a bean is never requested while the application is running, there will never be an instance of this class. But sometimes it is necessary to create beans already at the application startup (eager). This can be done by marking the bean as org.eclipse.scout.rt.platform.@CreateImmediately. All classes holding this annotation must also be marked as @ApplicationScoped! These beans will then be created as part of the application startup. Beans must have empty constructors so that the bean manager can create instances. But furthermore it is possible to mark methods with the javax.annotation.@PostConstruct annotation. Those methods must have no parameters and will be called after instances have been created. When querying the bean manager for an application scoped bean, it will always return the same instance. However, the constructor of an application scoped bean may run more than once, whereas a method annotated with @PostConstruct in an application scoped been is guaranteed to run exactly once. To retrieve a bean the class org.eclipse.scout.rt.platform.BEANS should be used. This class provides (amongst others) the following methods: Listing 6. How to get beans. BeanSingletonClass bean = BEANS.get(BeanSingletonClass.class); BeanClass beanOrNull = BEANS.opt(BeanClass.class); The get() method throws an exception if there is not a single bean result. So if no bean can be found or if multiple equivalent bean candidates are available this method fails! The opt() method requires a single or no bean result. It fails if multiple equivalent bean candidates are available and returns null if no one can be found. The all() method returns all beans in the correct order. The list may also contain no beans at all. There are now two more annotations that have an effect on which beans are returned if multiple beans match a certain class. Consider the following example bean hierarchy: Figure 1. A sample bean hierarchy. In this situation 4 bean candidates are available: MyServiceImpl, MyServiceMod, MySpecialVersion and AnotherVersion. But which one is returned by BEANS.get(IMyService.class)? Or by BEANS.get(MySpecialVersion.class)? This can be influenced with the org.eclipse.scout.rt.platform.@Order and org.eclipse.scout.rt.platform.@Replace annotations. The next sections describe the idea behind these annotations and gives some examples. This annotation works exactly the same as in the Scout user interface where it brings classes into an order. It allows to assign a double value to a class. All beans of a certain type are sorted according to this value in ascending order. This means a low order value is equivalent with a low position in a list (come first). Please note that the @Order annotation is not inherited so that each bean must declare its own value where it fits in. The @Order annotation value may be inherited in case it replaces. See the next section for details. If a bean does not declare an order value, the default of 5000 is used. Scout itself uses orders from 4001 to 5999. So for user applications the value 4000 and below can be used to declare more important beans. For testing bean mocks the value -10'000 can be used which then usually comes before each normal Scout or application bean. The @Replace annotation can be set to beans having another bean as super class. This means that the original bean (the super class) is no longer available in the Scout bean manager and only the new child class is returned. If the replacing bean (the child class) has no own @Order annotation defined but the replaced bean (the super class) has an @Order value, this order is inherited to the child. This is the only special case in which the @Order annotation value is inherited! The next examples use the bean situation as shown in figure Figure 1. In this situation the bean manager actually contains 3 beans: AnotherVersion with @Order of 4000. This bean has no own order and would therefore get the default order of 5000. But because it is replacing another bean it inherits its order. MyServiceMod with @Order of 4500. This bean declares its own order. MyServiceImpl with @Order of 5000. This bean gets the default order of 5000 because it does not declare an order. The bean MySpecialVersion is not part of the bean manager because it has been replaced by AnotherVersion. BEANS.get(IMyService.class): Returns AnotherVersion instance. The result cannot be an exact match because the requested type is an interface. Therefore of all candidates there is one single candidate with lowest order (comes first). BEANS.get(MyServiceImpl.class): Returns MyServiceImpl because there is an exact match available. BEANS.get(MySpecialVersion.class): Returns AnotherVersion. The result cannot be an exact match because there is no exact bean with this class in the bean manager (MySpecialVersion has been replaced). Therefore only AnotherVersion remains as candidate in the hierarchy below MySpecialVersion. BEANS.get(MyServiceMod.class): Returns MyServiceMod because there is no other candidate. BEANS.all(IMyService.class): Returns a list with all beans sorted by @Order. This results in: AnotherVersion, MyServiceMod, MyServiceImpl. If MyServiceMod would have no @Order annotation, there would be two bean candidates available with the same default order of 5000: MyServiceImpl and MyServiceMod. In this case a call to BEANS.get(IMyService.class) would fail because there are several equivalent candidates. Equivalent candidates means they have the same @Order value and the system cannot decide which one is the right one. Bean decorations allow to wrap interfaces with a proxy to intercept each method call to the interface of a bean and apply some custom logic. For this a IBeanDecorationFactory has to be implemented. This is one single factory instance for the entire application. It decides which decorators are created for a bean request. The factory is asked for decorators on every bean retrieval. This allows to write bean decoration factories depending on dynamic conditions. As bean decoration factories are beans themselves, it is sufficient to create an implementation of org.eclipse.scout.rt.platform.IBeanDecorationFactory and to ensure this implementation is used (see Bean Retrieval). This factory receives the bean to be decorated and the originally requested bean class to decide which decorators it should create. In case no decoration is required the factory may return null. Then the original bean is used without decorations. Decorations are only supported if the class obtained by the bean manager (e.g. by using BEANS.get()) is an interface! It is best practice to mark all annotations that are interpreted in the bean decoration factory with the annotation org.eclipse.scout.rt.platform.@BeanInvocationHint. However this annotation has no effect at runtime and is only for documentation reasons. The sample in listing Listing 7 wraps each call to the server with a profiler decorator that measures how long a server call takes. Listing 7. Bean decoration example. @Replace public class ProfilerDecorationFactory extends SimpleBeanDecorationFactory { @Override public IBeanDecorator decorate(IBean bean, Class queryType) { return new BackendCallProfilerDecorator<>(super.decorate(bean, queryType)); } } public class BackendCallProfilerDecorator implements IBeanDecorator { private final IBeanDecorator m_inner; public BackendCallProfilerDecorator(IBeanDecorator inner) { m_inner = inner; } @Override public Object invoke(IBeanInvocationContext context) { final String className; if (context.getTargetObject() == null) { className = context.getTargetMethod().getDeclaringClass().getSimpleName(); } else { className = context.getTargetObject().getClass().getSimpleName(); } String timerName = className + '.' + context.getTargetMethod().getName(); TuningUtility.startTimer(); try { if (m_inner != null) { // delegate to the next decorator in the chain return m_inner.invoke(context); } // forward to real bean return context.proceed(); } finally { TuningUtility.stopTimer(timerName); } } } Application scoped beans can declare methods annotated with javax.annotation.@PreDestroy. These methods will be called when the Scout platform is stopping. The methods may have any visibility modifier but must not be static and must not declare any parameters. If such a pre-destroy method throws an exception, the platform will continue to call all other pre-destroy methods (even methods on the same bean). Please note that pre-destroy methods are only called for application-scoped beans that already have created their instance. Pre-destroy methods inherited from super classes are always called after the ones from the class itself. Methods that are overridden are only called on the leaf class. Private methods are always called (because they cannot be overridden). The order in which multiple methods in the same declaring class are called is undefined. Applications usually require some kind of configuration mechanism to use the same binaries in a different environment or situation. Scout applications provide a configuration mechanism using properties files [2]. For each property a class cares about default values and value validation. These classes share the org.eclipse.scout.rt.platform.config.IConfigProperty interface and are normal application scoped beans providing access to a specific configuration value as shown in listing Listing 8. If the property class is an inner class it has to be defined as a static class with the static modifier. Listing 8. A configuration property of type Long. import org.eclipse.scout.rt.platform.config.AbstractLongConfigProperty; /** * Property of data type {@link Long} with key 'my.custom.timeout' and default value '3600L'. */ public class MyCustomTimeoutProperty extends AbstractLongConfigProperty { @Override public String getKey() { return \"my.custom.timeout\"; (1) } @Override public String description() { return \"Description of the custom timeout property. The default value is 3600.\"; } @Override public Long getDefaultValue() { return 3600L; (2) } } 1 key 2 default value To read the configured value you can use the CONFIG class as demonstrated in Listing 9. Listing 9. Read the configured value in your code. Long value = CONFIG.getPropertyValue(MyCustomTimeoutProperty.class); The given property key is searched in the following environments: In the system properties (java.lang.System.getProperty(String)). In the environment variables of the system (java.lang.System.getenv(String)). In the properties file. The properties file can be a file on the local filesystem where the system property with key config.properties holds an absolute URL to the file or a file on the classpath with path /config.properties (recommended). If none of the above is found, the default value of the property is applied. Supported formats are simple key-value pairs, list values and map values. For more details about the format please refer to the JavaDoc of the org.eclipse.scout.rt.platform.config.PropertiesHelper class. Since the environment variable names are more restrictive in many shells and systems than the property names in Java, overriding a property containing a dot/period (.) with an environment variable would not be possible. To still allow overriding of such properties, the following lookup rules are applied in-order to find a matching environment variable: An exact match of your property key (my.property) A match where periods are replaced by underscores (my_property) An uppercase match of your property key (MY.PROPERTY) An uppercase match where periods are replaced by underscores (MY_PROPERTY) When it comes to working with mapped config properties (subclasses of org.eclipse.scout.rt.platform.config.AbstractMapConfigProperty), there’s also some special mechanic to consider in terms of providing or overriding property map values using environment variables. Since it is not possible to reliably retrieve the original map key from an environment variable (again, due to the restrictions mentioned above), property map values may be supplied using environment variables whose value is a JSON object string: my_map_property={\"map-key-01\": \"value-01\", \"map-key-02\": \"value-02\", \"map-key-03\": null} The following rules apply, when such environment variables are read: * property map key/value pairs are added from the JSON object to the property map, overriding keys already being defined by sources of lower precedence (e.g. config.properties file) * a JSON object attribute value of \"null\" will remove a key potentially being defined by sources of lower precedence The parsing of JSON object strings is abstracted away using the new org.eclipse.scout.rt.platform.config.IJsonPropertyReader interface as parsing JSON strings is not implemented in the platform itself. However, there is a default implementation of this interface available in org.eclipse.scout.rt.dataobject which uses the org.eclipse.scout.rt.platform.dataobject.IDataObjectMapper feature to deserialize the JSON string into a Java Map. In order to use this, an implementation of the IDataObjectMapper interface is also required (e.g. org.eclipse.scout.rt.jackson.dataobject.JacksonDataObjectMapper). So in case you want to use this feature, you have to define * org.eclipse.scout.rt:org.eclipse.scout.rt.dataobject * org.eclipse.scout.rt:org.eclipse.scout.rt.jackson as new dependencies of your application aggregator module (if they are not already present). A properties file may import other config files from the classpath or any other absolute URL. This is done using the special key import. It can be a single value or a list or map (e.g. import[anyKey or number]: import[0]=classpath:myConfigs/other.properties import[1]=file:/C:/path/to/my/settings.properties import[2]=file:${catalina.base}/conf/db_connection.properties Scout already has some config properties. For a list and the corresponding documentation see Scout Config Properties. Because the property classes are managed by the bean manager, you can use all the mechanisms to change the behavior (@Replace in particular). Listing 10 demonstrates how you can use the replace annotation to change the existing ApplicationNameProperty class. The value is no longer fetched via the config mechanism, because the getValue(String) method is overridden. In this case a fixed value is returned. Listing 10. Property class providing a constant value. import org.eclipse.scout.rt.platform.IgnoreBean; import org.eclipse.scout.rt.platform.Replace; import org.eclipse.scout.rt.platform.config.PlatformConfigProperties.ApplicationNameProperty; @Replace public class ApplicationNameConstant extends ApplicationNameProperty { @Override protected String readFromSource(String namespace) { return \"Contacts Application\"; } } The next example presented in Listing 11 uses the same idea. In this case, the getKey() method is overridden to read the value from an other key as demonstrated is the Listing 12. Listing 11. Property class reading the value from an other key. import org.eclipse.scout.rt.platform.IgnoreBean; import org.eclipse.scout.rt.platform.Replace; import org.eclipse.scout.rt.platform.config.PlatformConfigProperties.ApplicationNameProperty; @Replace public class ApplicationNamePropertyRedirection extends ApplicationNameProperty { @Override public String getKey() { return \"myproject.applicationName\"; } } Listing 12. Read the configured value in your code. ### Redirected Application Config myproject.applicationName=My Project Application During the Platform startup all classes implementing the interface org.eclipse.scout.rt.platform.config.IConfigurationValidator are asked to validate configuration provided in the config.properties files. If there is at least one IConfigurationValidator that accepts a given key-value-pair the configuration is considered to be valid. Otherwise the platform will not start. The concrete implementation org.eclipse.scout.rt.platform.config.ConfigPropertyValidator will also check if a configured value matches the default value. In case it does an info message (warn in development mode) will be logged but the platform will still start. To minimize configuration files such entries should be removed from config.properties files. Table 1. Config Properties Key Description Data Type Kind scout.application.name The display name of the application. Used e.g. in the info form and the diagnostic views. The default value is unknown. String Config Property scout.application.version The application version as displayed to the user. Used e.g. in the info form and the diagnostic views. The default value is 0.0.0. String Config Property scout.auth.anonymousEnabled Specifies if the AnonymousAccessController is enabled. Therefore, if a security filter uses this controller no login is required. Boolean Config Property scout.auth.cookieEnabled Specifies if the CookieAccessController is enabled. Boolean Config Property scout.auth.cookieMaxAge If the CookieAccessController is enabled, specifies the maximum age in seconds for the cookie. A positive value indicates that the cookie will expire after that many seconds have passed. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted. The default value is 10 hours. Long Config Property scout.auth.cookieName If the CookieAccessController is enabled, specifies the name for the cookie. The name must conform to RFC 2109. However, vendors may provide a configuration option that allows cookie names conforming to the original Netscape Cookie Specification to be accepted. By default sso.user.id is used as cookie name. String Config Property scout.auth.cookieSessionValidateSecure Specifies if the UI server should ensure a secure cookie configuration of the webapp. If enabled the application validates that the httpOnly and Secure flags are set in the cookie configuration in the web.xml. This property should be disabled if no secure connection (https) is used to the client browser (not recommended). The default value is true. Boolean Config Property scout.auth.credentials Specifies the known credentials (username & passwords) of the org.eclipse.scout.rt.platform.security.ConfigFileCredentialVerifier. Credentials are separated by semicolon. Username and password information are separated by colon. Usernames are case-insensitive, and it is recommended that they should only consist of ASCII characters. Plain text passwords are case-sensitive. By default the password information consists of Base64 encoded salt followed by a dot followed by the Base64 encoded SHA-512 hash of the password (using UTF-16). Example: username1:base64EncodedSalt.base64EncodedPasswordHash;username2:base64EncodedSalt.base64EncodedPasswordHash To create a salt and hash tuples based on a clear text password use the org.eclipse.scout.rt.platform.security.ConfigFileCredentialVerifier.main() method that can be invoked from the command line. If scout.auth.credentialsPlaintext is set to true the password information just consists of the cleartext password. String Config Property scout.auth.credentialsPlaintext Specifies if the passwords specified in property scout.auth.credentials is plaintext (not recommended) or hashed. A value of false indicates hashed passwords which is the default. Boolean Config Property scout.auth.privateKey Specifies the Base64 encoded private key for signing requests from the UI server to the backend server. By validating the signature the server can ensure the request is trustworthy. Furthermore, the CookieAccessController uses this private key to sign the cookie. New public-private-key-pairs can be created by invoking the class org.eclipse.scout.rt.platform.security.SecurityUtility on the command line. Base64 encoded String Config Property scout.auth.publicKey Specifies the Base64 encoded public key used to validate signed requests on the backend server. The public key must match the private key stored in the property scout.auth.privateKey on the UI server. New public-private-key-pairs can be created by invoking the class org.eclipse.scout.rt.platform.security.SecurityUtility on the command line. Base64 encoded String Config Property scout.auth.tokenTtl Number of milliseconds a signature on a request from the UI server to the backend server is valid (TTL for the authentication token). If a request is not received within this time, it is rejected. By default this property is set to 10 minutes. Long >= 0 Config Property scout.backendUrl The URL of the scout backend server (without any servlets). E.g.: http://localhost:8080 By default this property is null. String Config Property scout.client.jobCompletionDelayOnSessionShutdown Specifies the maximal time (in seconds) to wait until running jobs are cancelled on session shutdown. The default value is 10 seconds. Long >= 0 Config Property scout.client.memoryPolicy Specifies how long the client keeps fetched data before it is discarded. One of small, medium or large. The default value is large. String Config Property scout.client.notificationSubject Technical subject under which received client notifications are executed. By default notification-authenticator is used. Subject name as String Config Property scout.client.testingSessionTtl Testing client session expiration in milliseconds. The default value is 1 day. Long >= 0 Config Property scout.client.userArea User data area (e.g. in the user home) to store user preferences. If nothing is specified the user home of the operating system is used. By default no user home is set. String Config Property scout.clientnotification.chunkSize The maximum number of client notifications that are consumed at once. The default is 30. Integer >= 0 Config Property scout.clientnotification.maxNotificationBlockingTimeOut The maximum amount of time in millisecons a consumer blocks while waiting for new notifications. The default is 10 seconds. Integer >= 0 Config Property scout.clientnotification.nodeQueueCapacity Capacity of the client notification queue. If maximum capacity is reached, notification messages are dropped. The default value is 200. Integer >= 0 Config Property scout.clientnotification.notificationQueueExpireTime If no message is consumed for the specified number of milliseconds, client notification queues (with possibly pending notifications) are removed. This avoids overflows and unnecessary memory consumption. Old queues may exist if a node does not properly unregister (e.g. due to a crash). The default value is 10 minutes. Integer >= 0 Config Property scout.clustersync.user Technical subject under which received cluster sync notifications are executed. The default value is system. String Config Property scout.createTunnelToServerBeans Specifies if the Scout platform should create proxy beans for interfaces annotated with TunnelToServer. Calls to beans of such types are then tunneled to the Scout backend. By default this property is enabled if the property scout.servicetunnel.targetUrl is set. Boolean Config Property scout.cspDirective Configures individual Content Security Policy (CSP) directives. See https://www.w3.org/TR/CSP2/ and the Bean org.eclipse.scout.rt.server.commons.servlet.ContentSecurityPolicy for more details. The value must be provided as a Map. Example: scout.cspDirective[img-src]=self data: https: http://localhost:8086 Map Config Property scout.cspEnabled Enable or disable Content Security Policy (CSP) headers. The headers can be modified by replacing the bean org.eclipse.scout.rt.server.commons.servlet.ContentSecurityPolicy or using the property scout.cspDirective. Boolean Config Property scout.cspExclusions A list of regex strings. If the pathInfo of the request matches one of these strings the csp headers won`t be set. This property only has an effect if csp is enabled, see scout.cspEnabled. List Config Property scout.devMode Property to specify if the application is running in development mode. Default is false. Boolean Config Property scout.externalBaseUrl Absolute URL to the deployed http(s):// base of the web-application. The URL should include proxies, redirects, etc. Example: https://www.my-company.com/my-scout-application/. This URL is used to replace tags. String Config Property scout.healthCheckRemoteUrls Comma separated list of URLs the RemoteHealthChecker should access. By default no URLs are set. List Config Property scout.http.connectionTtl Specifies the maximum life time in milliseconds for kept alive connections of the Apache HTTP client. The default value is 1 hour. Integer Config Property scout.http.ignoreProxyPatterns Configure the proxy ignore list for the ConfigurableProxySelector. If an URI matches the pattern no proxy connection is used. By default no proxy is configured. Example: scout.http.ignoreProxyPatterns[0]=https?://localhost(?::\\d+)?(?:/.*)? scout.http.ignoreProxyPatterns[1]=…​ List Config Property scout.http.keepAlive Enable/disable HTTP keep-alive connections. The default value is defined by the system property http.keepAlive or true if the system property is undefined. Boolean Config Property scout.http.maxConnectionsPerRoute Configuration property to define the default maximum connections per route of the Apache HTTP client. The default value is 32. Integer Config Property scout.http.maxConnectionsTotal Specifies the total maximum connections of the Apache HTTP client. The default value is 128. Integer Config Property scout.http.proxyPatterns Configure proxies for the ConfigurableProxySelector. If an URI matches a pattern the corresponding proxy will be used. By default no proxy is used. The property value is of the format REGEXP_FOR_URI=PROXY_HOST:PROXY_PORT Example: scout.http.proxyPatterns[0]=.\\.example.com(:\\d+)?=127.0.0.1:8888 scout.http.proxyPatterns[1]=.\\.example.org(:\\d+)?=proxy.company.com List Config Property scout.http.redirectPost Enable redirect of POST requests (includes non-idempotent requests). The default value is true Boolean Config Property scout.http.retryOnNoHttpResponseException Enable retry of request (includes non-idempotent requests) on NoHttpResponseException Assuming that the cause of the exception was most probably a stale socket channel on the server side. For apache tomcat see http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d5e659 The default value is true Boolean Config Property scout.http.retryOnSocketExceptionByConnectionReset Enable retry of request (includes non-idempotent requests) on {@link SocketException} with message Connection reset Assuming that the cause of the exception was most probably a stale socket channel on the server side. For apache tomcat see http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d5e659 The default value is true Boolean Config Property scout.http.transportFactory Fully qualified class name of the HTTP transport factory the application uses. The class must implement org.eclipse.scout.rt.shared.http.IHttpTransportFactory. By default org.eclipse.scout.rt.shared.http.ApacheHttpTransportFactory is used. Fully qualified class name. The class must have org.eclipse.scout.rt.shared.http.IHttpTransportFactory in its super hierarchy. Config Property scout.jandex.rebuild Specifies if Jandex indexes should be rebuilt. Is only necessary to enable during development when the class files change often. The default value is false. RebuildStrategy Config Property scout.jaxws.consumer.connectTimeout Connect timeout in milliseconds to abort a webservice request, if establishment of the connection takes longer than this timeout. A timeout of null means an infinite timeout. The default value is null. Integer >= 0 Config Property scout.jaxws.consumer.portCache.corePoolSize Number of ports to be preemptively cached to speed up webservice calls. The default value is 10. Integer >= 0 Config Property scout.jaxws.consumer.portCache.enabled Indicates whether to use a preemptive port cache for webservice clients. Depending on the implementor used, cached ports may increase performance, because port creation is an expensive operation due to WSDL and schema validation. The cache is based on a corePoolSize, meaning that that number of ports is created on a preemptive basis. If more ports than that number is required, they are are created on demand and also added to the cache until expired, which is useful at a high load. The default value is true. Boolean Config Property scout.jaxws.consumer.portCache.ttl Maximum time in seconds to retain ports in the cache if the value of scout.jaxws.consumer.portCache.corePoolSize is exceeded. That typically occurs at high load, or if scout.jaxws.consumer.portCache.corePoolSize is undersized. The default value is 15 minutes. Long >= 0 Config Property scout.jaxws.consumer.portPoolEnabled To indicate whether to pool webservice clients. Creating new service and Port instances is expensive due to WSDL and schema validation. Using the pool helps to reduce these costs. The default value is true. The pool size is unlimited but its elements are removed after a certain time (configurable) If this value is true, the value of property scout.jaxws.consumer.portCache.enabled has no effect. Boolean Config Property scout.jaxws.consumer.readTimeout Read timeout in milliseconds to abort a webservice request, if it takes longer than this timeout for data to be available for read. A timeout of null means an infinite timeout. The default value is null. Integer >= 0 Config Property scout.jaxws.implementor Fully qualified class name of the JAX-WS implementor to use. The class must extend org.eclipse.scout.rt.server.jaxws.implementor.JaxWsImplementorSpecifics. By default JAX-WS Metro (not bundled with JRE) is used. For that to work, add the Maven dependency to JAX-WS Metro to your server application`s pom.xml: com.sun.xml.ws:jaxws-rt:2.3.5. Fully qualified class name. The class must have org.eclipse.scout.rt.server.jaxws.implementor.JaxWsImplementorSpecifics in its super hierarchy. Config Property scout.jaxws.loghandlerDebug Indicates whether to log SOAP messages in debug or info level. The default value is false. Boolean Config Property scout.jaxws.provider.authentication.basicRealm Security Realm used for Basic Authentication; used by org.eclipse.scout.rt.server.jaxws.provider.auth.method.BasicAuthenticationMethod. The default value is JAX-WS. String Config Property scout.jaxws.provider.user.authenticator Technical Subject used to authenticate webservice requests. The default value is jaxws-authenticator. Subject name as String Config Property scout.jaxws.provider.user.handler Technical subject used to invoke JAX-WS handlers if the request is not authenticated yet; used by org.eclipse.scout.rt.server.jaxws.provider.handler.HandlerDelegate. The default value is jaxws-handler. Subject name as String Config Property scout.jetty.port The port under which the jetty will be running. Integer between 1 and 65535 Config Property scout.jobmanager.allowCoreThreadTimeOut Specifies whether threads of the core-pool should be terminated after being idle for longer than the value of property scout.jobmanager.keepAliveTime. The defautl value is false. Boolean Config Property scout.jobmanager.corePoolSize The number of threads to keep in the pool, even if they are idle. The default value is 25. Integer >= 0 Config Property scout.jobmanager.keepAliveTime The time limit (in seconds) for which threads, which are created upon exceeding the scout.jobmanager.corePoolSize limit, may remain idle before being terminated. The default value is 1 minute. Long >= 0 Config Property scout.jobmanager.maximumPoolSize The maximal number of threads to be created once the value of scout.jobmanager.corePoolSize is exceeded. The default value is unlimited (which means limited by the resources of the machine). Integer >= 0 Config Property scout.jobmanager.prestartCoreThreads Specifies whether all threads of the core-pool should be started upon job manager startup, so that they are idle waiting for work. By default this is disabled in development mode (property scout.devMode is true) and enabled otherwise. Boolean Config Property scout.loadWebResourcesFromFilesystem Specifies if the application should look for web resources (like .js, .html or .css) on the local filesystem. If true, the resources will be searched in modules that follow the Scout naming conventions (e.g. name.ui.app.dev, name.ui.app, name.ui) on the local filesystem first and (if not found) on the classpath second. If false, the resources are searched on the Java classpath only. By default this property is true in dev mode and false otherwise. Boolean Config Property scout.mail.bouncedetector.heuristic.contents Non standard email bounce detection: content is checked against the provided list of heuristic contents (partial match, case-insensitive) List Config Property scout.mail.bouncedetector.heuristic.senderPrefixes Non standard email bounce detection: sender is checked against the provided list of heuristic sender prefixes (prefix match, case-insensitive) List Config Property scout.mail.bouncedetector.heuristic.subjects Non standard email bounce detection: subject is checked against the provided list of heuristic subjects (partial match, case-insensitive) List Config Property scout.malwareScanner.path Path to a malware scanner checked directory. The default value is null which means the system temp path is used. String Config Property scout.mom.cluster.destination.clusterNotificationTopic Name of the topic for cluster notifications published by scout application. IDestination Config Property scout.mom.cluster.environment Contains the configuration to connect to the network or broker. This configuration is specific to the MOM implementor Example to connect to a peer based cluster, which is useful in development mode because there is no central broker: scout.mom.cluster.environment[scout.mom.name]=Scout Cluster MOM scout.mom.cluster.environment[scout.mom.connectionfactory.name]=ClusterMom scout.mom.cluster.environment[java.naming.factory.initial]=org.apache.activemq.jndi.ActiveMQInitialContextFactory scout.mom.cluster.environment[java.naming.provider.url]=failover:(peer://mom/cluster?persistent=false) scout.mom.cluster.environment[connectionFactoryNames]=ClusterMom Map Config Property scout.mom.cluster.implementor Specifies the MOM implementor. Example to work with a JMS based implementor: scout.mom.cluster.implementor=org.eclipse.scout.rt.mom.jms.JmsMomImplementor Fully qualified class name. The class must have org.eclipse.scout.rt.mom.api.IMomImplementor in its super hierarchy. Config Property scout.mom.failover.connectionRetryCount Specifies the connection retry count for connection failover. Default is 15. The value 0 disables connection failover. Integer Config Property scout.mom.failover.connectionRetryIntervalMillis Specifies the connection retry interval in milliseconds. Default is 2000ms. Integer Config Property scout.mom.failover.sessionRetryIntervalMillis Specifies the session retry interval in milliseconds. Default is 5000ms. Integer Config Property scout.mom.marshaller Specifies the default Marshaller to use if no marshaller is specified for a MOM or a destination. By default the JsonDataObjectMarshaller is used. Fully qualified class name. The class must have org.eclipse.scout.rt.mom.api.marshaller.IMarshaller in its super hierarchy. Config Property scout.mom.requestreply.cancellationTopic Specifies the default topic to receive cancellation request for request-reply communication. By default a defined topic with the name scout.mom.requestreply.cancellation is used. IDestination Config Property scout.mom.requestreply.enabled Specifies if request-reply messaging is enabled by default. This value can also be configured individually per MOM. The default value is true. Boolean Config Property scout.nodeId Specifies the cluster node name. If not specified a default id is computed. String Config Property scout.remotefileRootPath Absolute path to the root directory of the RemoteFileService. The default value is null. String Config Property scout.serverSessionTtl Server sessions that have not been accessed for the specified number of milliseconds are removed from the cache. The default value is one day. Long >= 0 Config Property scout.servicetunnel.compress Specifies if the service tunnel should compress the data. If null, the response decides which is default to true. Boolean Config Property scout.servicetunnel.maxConnectionsPerRoute Specifies the default maximum connections per route property for the HTTP service tunnel. Overrides the value from scout.http.maxConnectionsPerRoute for the service tunnel. Default value is 2048. Integer Config Property scout.servicetunnel.maxConnectionsTotal Specifies the default total maximum connections property for the HTTP service tunnel. Overrides the value from scout.http.maxConnectionsTotal for the service tunnel. The default value is 2048. Integer Config Property scout.servicetunnel.targetUrl Specifies the URL to the ServiceTunnelServlet on the backend server. By default this property points to the value of property scout.backendUrl with /process appended. String Config Property scout.smtp.connectionTimeout Socket connection timeout value in milliseconds. Integer >= 0 Config Property scout.smtp.debugReceiverEmail If specified all emails are sent to this address instead of the real one. This may be useful during development to not send emails to real users by accident. String Config Property scout.smtp.pool.maxConnectionLifetime Max. lifetime of pooled connections in seconds. Integer >= 0 Config Property scout.smtp.pool.maxIdleTime Max. idle time for pooled connections in seconds. Integer >= 0 Config Property scout.smtp.pool.waitForConnectionTimeout Max. wait time for SMTP connection in seconds. If the value is 0, callers will wait infinitely long for SMTP connections. Integer >= 0 Config Property scout.smtp.readTimeout Socket read timeout value in milliseconds. Integer >= 0 Config Property scout.sql.directJdbcConnection If true a direct JDBC connection is created. Otherwise a JNDI connection is used. The default value is true. Boolean Config Property scout.sql.jdbc.driverName The driver name to use. By default oracle.jdbc.OracleDriver is used. String Config Property scout.sql.jdbc.mappingName The JDBC mapping name. By default jdbc:oracle:thin:@localhost:1521:ORCL is used. String Config Property scout.sql.jdbc.pool.connectionBusyTimeout Connections will be closed after this timeout in milliseconds even if the connection is still busy. The default value is 6 hours. Long >= 0 Config Property scout.sql.jdbc.pool.connectionIdleTimeout Idle connections will be closed after this timeout in milliseconds. The default value is 5 minutes. Long >= 0 Config Property scout.sql.jdbc.pool.size The maximum number of connections to create. The default pool size is 25. Integer >= 0 Config Property scout.sql.jdbc.properties Semicolon separated list of properties to pass to the JDBC connection. The default value is null. E.g.: key1=val1;key2=val2 String Config Property scout.sql.jdbc.statementCacheSize Maximum number of cached SQL statements. The default value is 25. Integer >= 0 Config Property scout.sql.jndi.initialContextFactory The name of the object to lookup in the JNDI context. Default is null. String Config Property scout.sql.jndi.name The name of the object to lookup in the JNDI context. Default is null. String Config Property scout.sql.jndi.providerUrl JNDI provider url (e.g. ldap://somehost:389). Default is null. String Config Property scout.sql.jndi.urlPkgPrefixes A colon-separated list of package prefixes for the class name of the factory class that will create a URL context factory. Default is null. String Config Property scout.sql.password The password to connect to the database (JDBC or JNDI) String Config Property scout.sql.transactionMemberId Id of the transaction member on which the connection is available. String Config Property scout.sql.username The username to connect to the database (JDBC or JNDI) String Config Property scout.texts.showKeys If this property is set to true, the TextKeyTextProviderService will be registered with high priority, and each call to TEXTS.get() will return the given text key instead of the translation. This is useful for debug/testing purposes or exporting forms to JSON. By default this property is false. Boolean Config Property scout.tiles.dataLoadQueueTimeoutSeconds Maximum number of seconds a tile load job can execute until it is automatically cancelled. The default value is 2 minutes. Integer >= 0 Config Property scout.tiles.maxConcurrentDataLoadThreads Maximum number of threads per server that can be created to load tiles. The default value is 25. Integer >= 0 Config Property scout.trustedCertificates URIs to DER (Base64) encoded certificate files that should be trusted. The URI may refer to a local file or a resource on the classpath (use classpath: prefix). The default value is an empty list. List Config Property scout.ui.backgroundPollingMaxWaitTime The polling request (which waits for a background job to complete) stays open until a background job has completed or the specified number of seconds elapsed. This property must have a value between 3 and the value of property scout.ui.maxUserIdleTime. By default this property is set to 1 minute. Long >= 0 Config Property scout.ui.locales Contains a comma separated list of supported locales (e.g. en,en-US,de-CH). This is only relevant if locales.json and texts.json should be sent to the client, which is not the case for remote apps. So this property is only used for JS only apps. By default no locales are supported. List Config Property scout.ui.maxUserIdleTime If a user is inactive (no user action) for the specified number of seconds, the session is stopped and the user is logged out. By default this property is set to 4 hours. Long >= 0 Config Property scout.ui.modelJobTimeout The maximal timeout in seconds to wait for model jobs to complete during a UI request. After that timeout the model jobs will be aborted so that the request may return to the client. By default this property is set to 1 hour. Long >= 0 Config Property scout.ui.sessionstore.housekeepingDelay Number of seconds before the housekeeping job starts after a UI session has been unregistered from the store. By default this property is set to 30 seconds. Integer >= 0 Config Property scout.ui.theme The name of the UI theme which is activated when the application starts. String Config Property scout.urlHints.enabled Enable or disable changing UrlHints using URL parameters in the browser address line. By default has the same value as the config property scout.devMode meaning it is by default only enabled in development mode. Boolean Config Property scout.util.defaultDecimalSupportProvider Specifies the default DefaultDecimalSupportProvider to use. By default the DefaultDecimalSupportProvider is used. Fully qualified class name. The class must have org.eclipse.scout.rt.platform.util.DECIMAL$DefaultDecimalSupportProvider in its super hierarchy. Config Property 1. https://github.com/wildfly/jandex 2. https://en.wikipedia.org/wiki/.properties","title":"Platform","component":"scout-docs","version":"23.1","name":"platform","url":"/scout-docs/stable/technical-guide/common-concepts/platform.html","titles":[{"text":"Application Lifecycle","hash":"sec-app.lifecycle","id":1},{"text":"Platform Listener","hash":"platform-listener","id":2},{"text":"Class Inventory","hash":"sec-class.inventory","id":3},{"text":"scout.xml","hash":"scout-xml","id":4},{"text":"Bean Manager","hash":"sec-bean.manager","id":5},{"text":"Bean registration","hash":"bean-registration","id":6},{"text":"@TunnelToServer","hash":"tunneltoserver","id":7},{"text":"Bean Scopes","hash":"bean-scopes","id":8},{"text":"Bean Creation","hash":"bean-creation","id":9},{"text":"Eager Beans","hash":"eager-beans","id":10},{"text":"Constructors","hash":"constructors","id":11},{"text":"Bean Retrieval","hash":"bean-retrieval","id":12},{"text":"@Order","hash":"order","id":13},{"text":"@Replace","hash":"replace","id":14},{"text":"Examples","hash":"examples","id":15},{"text":"Bean Decoration","hash":"bean-decoration","id":16},{"text":"Destroy Beans","hash":"destroy-beans","id":17},{"text":"Configuration Management","hash":"sec-config.management","id":18},{"text":"Property resolution","hash":"property-resolution","id":19},{"text":"Additional examples","hash":"additional-examples","id":20},{"text":"Configuration validation","hash":"configuration-validation","id":21},{"text":"Scout Config Properties","hash":"sec-app.configProperties","id":22}]},"108":{"id":108,"text":"A RunMonitor allows the registration of ICancellable objects, which are cancelled upon cancellation of this monitor. A RunMonitor is associated with every RunContext and IFuture, meaning that executing code can always query its current cancellation status via RunMonitor.CURRENT.get().isCancelled(). A RunMonitor itself is also of the type ICancellable, meaning that it can be registered within another monitor as well. That way, a monitor hierarchy can be created with support of nested cancellation. That is exactly what is done when creating a copy of the current calling context, namely that the new monitor is registered as ICancellable within the monitor of the current calling context. Cancellation only works top-down, and not bottom up, meaning that a parent monitor is not cancelled once a child monitor is cancelled. When registering a ICancellable and this monitor is already cancelled, the ICancellable is cancelled immediately. Furthermore, a job’s Future is linked with the job’s RunMonitor, meaning that cancellation requests targeted to the Future are also propagated to the RunMonitor, and vice versa. The following Figure 1 illustrates the RunMonitor and its associations. Figure 1. RunMonitor and its associations","title":"RunMonitor","component":"scout-docs","version":"23.1","name":"run-monitor","url":"/scout-docs/stable/technical-guide/common-concepts/run-monitor.html","titles":[]},"109":{"id":109,"text":"The org.eclipse.scout.rt.mail.smtp.SmtpHelper is an @ApplicationScoped Bean that provides means of sending emails described by javax.mail.internet.MimeMessage objects via SMTP. The SMTP connection can either be provided as a org.eclipse.scout.rt.mail.smtp.SmtpServerConfig object containing all the required connection parameters or as an already created javax.mail.Session object. The SmtpHelper also supports pooling of SMTP connections as described in the section Connection Pooling. The org.eclipse.scout.rt.mail.smtp.SmtpServerConfig class allows to specify details of an SMTP connection to be made. It supports the following properties: Property Description Example host The hostname or ip address of the SMTP server to use. localhost or 192.168.10.199. port The TCP port the SMTP server listens on. E.g. 25 or 465. username The username to use for authentication. - password The password to use for authentication. - useAuthentication Whether to use authentication or not. This setting is only effective, if a username has been provided. - useSmtps If true, the protocol will be 'smtps', else the protocol will be 'smtp'. - useStartTls If true, STARTTLS will be used to create the connection to the SMTP server. - sslProtocols Limits the SSL protocols to support when connecting to the SMTP server. The value is a space separated list of protocol names returned by the javax.net.ssl.SSLSocket.getSupportedProtocols() method. E.g. \"TLSv1.1 TLSv1.2\" additionalSessionProperties Can be used to specify any other property for the javax.mail.Session that is created from org.eclipse.scout.rt.mail.smtp.SmtpServerConfig. These additional properties are applied after all the other properties, thus may override already specified properties. \"mail.smtp.socketFactory.class\": \"com.example.net.SocketFactory\" poolSize Allows to specify the size of the connection pool for this SmtpServerConfig. The Default value is 0 which effectively deactives connection pooling. 4 maxMessagesPerConnection Allows to specify the max number of messages to be sent per connection when using connection pooling (poolSize > 0). The default value is 0 which effectively disables limiting the maximum number of messages sent per connection. You should consult with the operator of the SMTP server you are using to define this value. Local mail servers probably allow less than 20 messages per connection, bigger white mailers may allow up to 100 or even more. 20 Listing 1 demonstrates how to use the SmtpServerConfig class. Listing 1. Create and configure an instance of org.eclipse.scout.rt.mail.smtp.SmtpServerConfig @SuppressWarnings(\"unused\") SmtpServerConfig smtpServerConfig = BEANS.get(SmtpServerConfig.class) .withHost(\"mail.example.com\") .withPort(465) .withUsername(\"smtpuser\") .withPassword(\"smtpuserpwd\") .withUseAuthentication(true) .withUseSmtps(true) .withUseStartTls(true); Messages can be sent using the sendMessage Methods of the SmtpHelper class. In Order to prepare the message to be sent, Scout provides a number of classes and helpers: Class Description org.eclipse.scout.rt.mail.MailMessage Encapsulates all the information about a single mail message (sender, recipient, carbon-copy recipients, subject, body, attachments, etc.). org.eclipse.scout.rt.mail.MailParticipant Defines email address and name of a mail participant. A participant can be a recipient, a carbon-copy recipient, a blind-carbon-copy recipient, the sender and a replyTo contact. org.eclipse.scout.rt.mail.MailAttachment Contains information about an email attachment. org.eclipse.scout.rt.mail.MailHelper Provides various helper methods around email bodies, attachments, etc. Listing 2 shows the usage of the mentioned classes Scout provides in order to create a MimeMessage object. Listing 2. Create org.eclipse.scout.rt.mail.CharsetSafeMimeMessage object // create BinaryResource for an attachment. BinaryResource screenshotResource = BinaryResources.create() .withFilename(\"screenshot.jpg\") .withContentType(\"image/jpeg\") .withContent(bytes) .build(); // wrap BinaryResource in MailAttachment MailAttachment screenshotAttachment = new MailAttachment(screenshotResource); // prepare Scout MailMessage MailMessage mailMessage = BEANS.get(MailMessage.class) .withSender(BEANS.get(MailParticipant.class).withName(\"sender\").withEmail(\"me@example.com\")) .addToRecipient(BEANS.get(MailParticipant.class).withName(\"recipient\").withEmail(\"somebody@example.com\")) .withAttachment(screenshotAttachment) .withSubject(\"Screenshot\") .withBodyPlainText(\"Dear recipient,\\n\\nPlease have a look at my screenshot!\\n\\nRegards,\\nsender\"); // convert MailMessage to MimeMessage CharsetSafeMimeMessage mimeMessage = BEANS.get(MailHelper.class).createMimeMessage(mailMessage); In order to send the message you can either use a org.eclipse.scout.rt.mail.smtp.SmtpServerConfig object or an existing javax.mail.Session object as demonstrated in Listing 3 and Listing 4. Listing 3. Send email using an org.eclipse.scout.rt.mail.smtp.SmtpServerConfig object. BEANS.get(SmtpHelper.class).sendMessage(smtpServerConfig, mimeMessage); Listing 4. Send email using an existing javax.mail.Session object. // The password has to be provided additionally as it is not stored in the session object. BEANS.get(SmtpHelper.class).sendMessage(session, password, mimeMessage); The SmtpHelper provides some config properties that allow to modify certain behaviour. Key Description Example scout.smtp.debugReceiverEmail If this property is set, the SmtpHelper sends all emails to the specified email address instead of the recipients specified in the MimeMessage object. This is useful for development and testing environments. debug-receiver@example.com scout.smtp.connectionTimeout Specifies the connection timeout for SMTP connections in milliseconds. Default is 60 seconds. 30000 scout.smtp.readTimeout Specifies the read timeout for SMTP connections in milliseconds. Default is 60 seconds. 30000 Normally, the SmtpHelper opens a new connection for every email which is then closed after the email has been sent. If you want to send a lot of emails, this behaviour is rather inefficient as opening a new SMTP connection takes a long time compared to sending the email especially when using encrypted connections. To mitigate this overhead, the SmtpHelper supports pooling of SMTP connections which is activated using the poolSize property of SmtpServerConfig objects. If you set the pool size property to a value > 0, the SmtpHelper will create parallel connections up to the specified number. This means, that connection pooling is not possible when you use the sendMessage method accepting an already prepared javax.mail.Session object. Pooling in this context means the following: All SMTP server connections sharing the same SmtpServerConfig object (by same meaning being equal according to SmtpServerConfig.equals()) belong to the same pool For each different SmtpServerConfig object (again using SmtpServerConfig.equals()) up to the specified pool size connections are created Connections are not immediately closed after an email has been sent, instead they are returned to the pool as idle connections. Before creating new connections, idle connections are reused. When trying to send an email while all the SMTP connections are currently in use and the pool size has already been reached, the calling thread is blocked until a connection is returned as idle to the pool or as soon as the wait-for-connection-timeout has exceeded. As long as connections are open, a background job monitors their state and closes idle and old connections. The following config properties allow to modify the behavior of the connection pool implementation at the global level: key Description Example scout.smtp.pool.maxIdleTime Specifies how long in seconds a connection can be idle before it is closed by the background cleanup job. Default is 60 seconds. 30 scout.smtp.pool.maxConnectionLifetime Specifies how long in seconds a connection can be open before it is closed. This is to prevent connections from being open forever when sending emails on a regular basis. Default is 1h. 7200 scout.smtp.pool.waitForConnectionTimeout Max. wait time for SMTP connection in seconds. If the value is 0, callers will wait infinitely long for SMTP connections. Default is 300 seconds. 100","title":"SmtpHelper","component":"scout-docs","version":"23.1","name":"smtp-helper","url":"/scout-docs/stable/technical-guide/common-concepts/smtp-helper.html","titles":[{"text":"SmtpServerConfig","hash":"smtpserverconfig","id":1},{"text":"Sending messages","hash":"sending-messages","id":2},{"text":"SmtpHelper Configuration","hash":"smtphelper-configuration","id":3},{"text":"Connection Pooling","hash":"connection-pooling-chapter","id":4},{"text":"SmtpConnectionPool Configuration","hash":"smtpconnectionpool-configuration","id":5}]},"110":{"id":110,"text":"All Scout HTTP servlets delegate to a central authority to append HTTP response headers. This is the bean HttpServletControl. It enables developers to control which headers that should be added to the HTTP response for each servlet and request. The next sections describe the headers that are added to any response by default. Beside these also the following headers may be of interest for an end user application (consider adding them to your application if possible): Public Key Pinning Strict Transport Security (HSTS) X-Content-Type-Options Please note that not all headers are supported in all user agents! The X-Frame-Options HTTP response header [1] can be used to indicate whether a user agent should be allowed to render a page in a , or . Sites can use this to avoid clickjacking [2] attacks, by ensuring that their content is not embedded into other sites. The X-Frame-Options header is described in RFC 7034 [3]. In Scout this header is set to SAMEORIGIN which allows the page to be displayed in a frame on the same origin (scheme, host and port) as the page itself only. This header enables the XSS [4] filter built into most recent user agents. It’s usually enabled by default anyway, so the role of this header is to re-enable the filter for the website if it was disabled by the user. The X-XSS-Protection header is described in controlling-the-xss-filter. In Scout this header is configured to enable XSS protections and instructs the user-agent to block a page from loading if reflected XSS is detected. Content Security Policy is an HTTP response header that helps you reduce XSS risks on modern user agents by declaring what dynamic resources are allowed to load [5]. The CSP header is described in Level 1 and Level 2. There is also a working draft for a Level 3. Scout makes use of Level 1 (and one directive from Level 2) and sets by default the following settings: JavaScript [6]: Only accepts JavaScript resources from the same origin (same scheme, host and port). Inline JavaScript is allowed and unsafe dynamic code evaluation (like eval(string), setTimeout(string), setInterval(string), new Function(string)) is allowed as well. Stylesheets (CSS) [7]: Only accepts Stylesheet resources from the same origin (same scheme, host and port). Inline style attributes are allowed. Frames [8]: All sources are allowed because the iframes created by the Scout BrowserField run in the sandbox mode and therefore handle the security policy on their own. All other types (Image, WebSocket [9], EventSource [10], AJAX calls [11], fonts, [12], [13], [14], [15] and [16]) only allow resources from the same origin (same scheme, host and port). If a resource is blocked because it violates the CSP a report is created and logged on server side using level warning. This is done in the class ContentSecurityPolicyReportHandler. This enables admins to monitor the application and to react if a CSP violation is detected. The UiServlet checks if the session cookie is configured safely. The validation is only performed on first access to the UiServlet. There is no automatic validation on the backend server side or on any custom servlets! If the validation fails, a corresponding error message is logged to the server and an exception is thrown making the UiServlet inaccessible. Because of security reasons the exception shown to the user includes no details about the error. These can only be seen on the server side log. First the existence of the HttpOnly flag is checked. The servlet container will then add this flag to the Set-Cookie HTTP response header. If the user agent supports this flag, the cookie cannot be accessed through a client side script. As a result even if a cross-site scripting (XSS) flaw exists and a user accidentally accesses a link that exploits this flaw, the user agent will not reveal the cookie to a third party. For a list of user agents supporting this feature please refer to OWASP. It is recommended to always enable this flag. Since Java Servlet 3.0 specification this property can be set in the configuration in the deployment descriptor WEB-INF/web.xml: ... ... true (1) ... ... ... 1 The HttpOnly flag activated Second the existence of the Secure flag is checked. The servlet container will then add this flag to the Set-Cookie HTTP response header. The purpose of the secure flag is to prevent cookies from being observed by unauthorized parties due to the transmission of a cookie in clear text. Therefore, setting this flag will prevent the user agent from transmitting the session id over an unencrypted channel. Since Java Servlet 3.0 specification this property can be set in the configuration in the deployment descriptor WEB-INF/web.xml: ... ... true (1) ... ... ... 1 The Secure flag activated This of course only makes sense if the application is exposed to the end user using an encrypted channel like HTTPS (which is strongly recommended). Unfortunately for the UI server it is not possible to detect if an application uses a secured channel. Consider the following example: The servlet container is protected by a reverse proxy. The communication between the user agent and the proxy is encrypted while the channel between the proxy and the servlet container is not. In this scenario the container cannot know that from a user agent point of view the channel is secured. Because of this the validation assumes that the channel from the user agent to the entering node is secured and by default checks for the Secure flag. In case this assumption is not true and an unencrypted channel must be used this validation step can be disabled by setting the following property in the config.propertis file: scout.auth.cookieSessionValidateSecure=false This skips the Secure flag check completely. In this scenario (not using https) it is also required to remove the secure tag from the cookie config in the WEB-INF/web.xml. This chapter describes how HTML Output can be handled in a secure way. Scout applications often display potentially dangerous data, e.g. user input or data from other systems. Encoding this input in such a way, that it can not be executed, prevents security vulnerabilities like cross-site scripting. By default, all input in the Scout model is encoded. Examples are values/labels in value fields, cells in tables, message in message box. The reason behind this default choice is that developers do not have to think about output encoding in the standard case and are therefore less likely to forget output encoding and introduce a security vulnerability. Example: In the following label field, the HTML tag is encoded as bold text: public class LabelField extends AbstractLabelField { @Override protected void execInitField() { setValue(\"...Bold text...\"); } Sometimes developers may want to use HTML in the Scout model. Examples are Simple styling of dynamic content, such as addresses or texts in message boxes Text containing application-internal or external links Html or XML content received from other systems, such as e-mails or html pages Html input should only partially be encoded or not at all. To disable the encoding of the whole value, the property HtmlEnabled can be used: public class NoEncodingLabelField extends AbstractLabelField { @Override protected boolean getConfiguredHtmlEnabled() { return true; } @Override protected void execInitField() { setValue(\"...Bold text...\"); } There are several ways to implement the use cases above. Some typical implementations are described in the following sections. Often using HTML in value fields or table cells is not necessary for styling. Very basic styling can be done for example by setting the CSS class. For creating simple HTML files or fragments with encoded user input, the class org.eclipse.scout.rt.platform.html.HTML can be used. It is also easily possible to create application internal and external link with this approach. For more complex HTML, using IBeanField in the scout model and implementing the styling in the UI-Layer is often the preferred way. Links are possible as well. It is also possible to encode any String manually using StringUtility.htmlEncode(String). org.eclipse.scout.rt.platform.html.HTML uses this method internally for encoding. However, using HTML is recommended, where possible, because it is more concise and leads to less errors. If HTML or XML from external sources or more complex HTML are used in the Scout model, using a white-list filter might be the best way to avoid security bugs. Libraries, such as JSoup provide such a white-list filter. Scout currently does not include any services or utilities for using white-list filters, because the configuration and usage is very use-case-specific and would therefore not add much benefit. Scout uses the java.security API principles to grant access to a specific resource. Each user has a set of granted java.security.Permission instances. This set is a java.security.PermissionCollection. A call to PermissionCollection.implies(Permission p) does the access check. The argument p in this call is a new permission instance for which we want to do the access check and which is compared against the granted permissions. Usually, the permission collection implementation iterates through all granted permissions and calls on each Permission.implies(Permission p) until one call returns true. Scout adds some concepts and helpers to this API: IPermission Unlike other permissions, a permission implementing this interface can only be implied by another IPermission with the same name. A permission used together with scouts security API does not have to implement the IPermission interface, but it is recommended. PermissionLevel An IPermission, which is part of an IPermissionCollection has always a granted access level assigned (IPermission.getLevel()). If the granted level is PermissionLevel.NONE, any access checks will fail. IAccessControlService This service is responsible to provide and manage a users set of granted permissions. A scout application usually extends AbstractAccessControlService and implements #execLoadPermissions. ACCESS Provides a set of convenience methods to check access. Let us assume you require a permission to allow a user to access companies. public class ReadCompanyPermission extends AbstractPermission { private static final long serialVersionUID = 1L; public ReadCompanyPermission() { super(\"scoutdoc.ReadCompany\"); } } To check access one can use ACCESS. if (ACCESS.check(new ReadCompanyPermission())) { (1) throw new AccessForbiddenException(TEXTS.get(\"YouAreNotAllowedToReadThisData\")); } ACCESS.checkAndThrow(new ReadCompanyPermission()); (2) 1 Checks permission against granted permissions of current user. 2 Checks permission and if this check fails, throw an AccessForbiddenException with a default message. We can define a default access check failed message for a permission. public class CreateCompanyPermission extends AbstractPermission { private static final long serialVersionUID = 1L; public CreateCompanyPermission() { super(\"scoutdoc.CreateCompany\"); } @Override public String getAccessCheckFailedMessage() { return TEXTS.get(\"YouAreNotAllowedToRegisterThisData\"); } } ACCESS allows to check multiple permissions at once. ACCESS.checkAllAndThrow(new ReadCompanyPermission(), new CreateCompanyPermission()); ACCESS.checkAnyAndThrow(new ReadCompanyPermission(), new CreateCompanyPermission()); We have seen some simple permission checks. Now let us assume, that some users may modify a company only if they have registered the company by themselves. For this use case we introduce a new permission level ScoutdocPermissionLevels.OWN. This is the permission level which is granted for those users. public final class ScoutdocPermissionLevels { private ScoutdocPermissionLevels() { } public static final int LEVEL_NONE = PermissionLevel.LEVEL_NONE; public static final int LEVEL_OWN = 10; public static final int LEVEL_ALL = PermissionLevel.LEVEL_ALL; public static final PermissionLevel NONE = PermissionLevel.NONE; public static final PermissionLevel OWN = PermissionLevel.register(LEVEL_OWN, \"OWN\", true, () -> TEXTS.get(\"Own\")); public static final PermissionLevel ALL = PermissionLevel.ALL; public static void init() { // ensures all static initializers have been called } } In order to check access for this new level we have to override AbstractPermission#evalPermission. public class UpdateCompanyPermission extends AbstractPermission { private static final long serialVersionUID = 1L; private final UUID m_companyId; public UpdateCompanyPermission() { this(null); } public UpdateCompanyPermission(UUID companyId) { super(\"scoutdoc.UpdateCompany\"); m_companyId = companyId; } public UUID getCompanyId() { return m_companyId; } @Override protected boolean evalPermission(IPermission p) { // Precondition: p.getClass() == getClass() && getName().equals(p.getName()) && // getLevel() != PermissionLevel.NONE if (ScoutdocPermissionLevels.OWN == getLevel()) { UUID companyId = ((UpdateCompanyPermission) p).getCompanyId(); return BEANS.get(ICompanyService.class).isOwnCompany(companyId); } return true; // ScoutdocPermissionLevels.ALL == getLevel() } @Override public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((m_companyId == null) ? 0 : m_companyId.hashCode()); return result; } @Override public boolean equals(Object obj) { if (this == obj) { return true; } if (!super.equals(obj)) { return false; } if (getClass() != obj.getClass()) { return false; } UpdateCompanyPermission other = (UpdateCompanyPermission) obj; if (m_companyId == null) { if (other.m_companyId != null) { return false; } } else if (!m_companyId.equals(other.m_companyId)) { return false; } return true; } } ACCESS.checkAndThrow(new UpdateCompanyPermission(companyId)); If such a service call would be expensive, one may cache the result of such a permission check. You have to implement this by yourself. A recommended solution is to create a wrapper around IPermissionCollection and this wrapper caches calls to IPermissionCollection#implies if required. 1. https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options 2. https://en.wikipedia.org/wiki/Clickjacking 3. https://tools.ietf.org/html/rfc7034 4. https://en.wikipedia.org/wiki/Cross-site_scripting 5. http://content-security-policy.com/ 6. https://en.wikipedia.org/wiki/JavaScript 7. https://en.wikipedia.org/wiki/Cascading_Style_Sheets 8. https://en.wikipedia.org/wiki/Framing_(World_Wide_Web) 9. https://en.wikipedia.org/wiki/WebSocket 10. https://developer.mozilla.org/en-US/docs/Web/API/EventSource 11. https://en.wikipedia.org/wiki/Ajax_%28programming%29 12. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object 13. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed 14. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/applet 15. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio 16. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video","title":"Security","component":"scout-docs","version":"23.1","name":"security","url":"/scout-docs/stable/technical-guide/common-concepts/security.html","titles":[{"text":"Default HTTP Response Headers","hash":"default-http-response-headers","id":1},{"text":"X-Frame-Options","hash":"x-frame-options","id":2},{"text":"X-XSS-Protection","hash":"x-xss-protection","id":3},{"text":"Content Security Policy","hash":"content-security-policy","id":4},{"text":"Session Cookie (JSESSIONID Cookie) Configuration Validation","hash":"session-cookie-jsessionid-cookie-configuration-validation","id":5},{"text":"HttpOnly","hash":"httponly","id":6},{"text":"Secure","hash":"secure","id":7},{"text":"Secure Output","hash":"secure-output","id":8},{"text":"Encoding by Default","hash":"encoding-by-default","id":9},{"text":"Html Enabled","hash":"html-enabled","id":10},{"text":"CSS Class and Other Model Properties","hash":"css-class-and-other-model-properties","id":11},{"text":"HTML Builder","hash":"html-builder","id":12},{"text":"Styling in the UI-Layer","hash":"styling-in-the-ui-layer","id":13},{"text":"Manual Encoding","hash":"manual-encoding","id":14},{"text":"Using a White-List Filter","hash":"using-a-white-list-filter","id":15},{"text":"Authorization (Granting)","hash":"authorization-granting","id":16}]},"111":{"id":111,"text":"Mostly, code is run on behalf of some semantic context, for example as a particular Subject and with some context related ThreadLocals set, e.g. the user’s session and its Locale. Scout provides you with different RunContexts, such as ClientRunContext or ServerRunContext. They all share some common characteristics like Subject, Locale and RunMonitor, but also provide some additional functionality like transaction boundaries if using ServerRunContext. Also, a RunContext facilitates propagation of state among different threads. In order to ease readability, the 'setter-methods' of the RunContext support method chaining. All a RunContext does is to provide some setter methods to construct the context, and a run and call method to run an action on behalf of that context. Thereby, the only difference among those two methods is their argument. Whereas run takes a IRunnable instance, call takes a Callable to additionally return a result to the caller. The action is run in the current thread, meaning that the caller is blocked until completion. By default, a RunContext is associated with a RunMonitor, and the monitor’s cancellation status can be queried via RunMonitor.CURRENT.get().isCancelled(). The monitor allows for hard cancellation, meaning that the executing thread is interrupted upon cancellation. For instance if waiting on an interruptible construct like Object.wait() or IFuture.awaitDone(), the waiting thread returns with an interruption exception. Typically, a RunContext is created from a respective factory like RunContexts to create a RunContext, or ServerRunContexts to create a ServerRunContext, or ClientRunContexts to create a ClientRunContext. Internally, the BeanManager is asked to provide a new instance of the RunContext, which allows you to replace the default implementation of a RunContext in an easy way. The factories declare two factory methods: empty() and copyCurrent(). Whereas empty() provides you an empty RunContext, copyCurrent() takes a snapshot of the current calling context and initializes the RunContext accordingly. That is useful if only some few values are to be changed, or, if using ServerRunContext, to run the code on behalf of a new transaction. The following Listing 1 illustrates the creation of an empty RunContext initialized with a particular Subject and Locale. Listing 1. Creation of an empty RunContext Subject subject = new Subject(); (1) subject.getPrincipals().add(new SimplePrincipal(\"john\")); subject.setReadOnly(); (2) RunContexts.empty() .withSubject(subject) .withLocale(Locale.US) .run(() -> { // run some code (3) System.out.println(NlsLocale.CURRENT.get()); // > Locale.US System.out.println(Subject.getSubject(AccessController.getContext())); // > john }); 1 create the Subject to do some work on behalf 2 Create and initialize the RunContext 3 This code is run on behalf of the RunContext The following Listing 2 illustrates the creation of a 'snapshot' of the current calling RunContext with another Locale set. Listing 2. Create a copy of the current calling RunContext RunContexts.copyCurrent() .withLocale(Locale.US) .run(() -> { // run some code }); An important difference is related to the RunMonitor. By using the copyCurrent() factory method, the context’s monitor is additionally registered as child monitor of the monitor of the current calling context. That way, a cancellation request to the calling context is propagated down to this context as well. Of course, that behavior can be overwritten by providing another monitor yourself. The following properties are declared on a RunContext and are inherited by ServerRunContext and ClientRunContext. property description accessibility runMonitor Monitor to query the cancellation status of the context. * must not be null * is automatically set if creating the context by its factory * is automatically registered as child monitor if creating the context by copyCurrent() factory method RunMonitor.CURRENT.get() subject Subject to run the code on behalf Subject.getSubject(AccessController.getContext()) locale Locale to be bound to the Locale ThreadLocal NlsLocale.CURRENT.get() propertyMap Properties to be bound to the Property ThreadLocal PropertyMap.CURRENT.get() A ServerRunContext controls propagation of server-side state and sets the transaction boundaries, and is a specialization of RunContext. property description accessibility session Session to be bound to Session ThreadLocal ISession.CURRENT.get() transactionScope To control transaction boundaries. By default, a new transaction is started, and committed or rolled back upon completion. * Use TransactionScope.REQUIRES_NEW to run the code in a new transaction (by default). * Use TransactionScope.REQUIRED to only start a new transaction if not running in a transaction yet. * Use TransactionScope.MANDATORY to enforce that the caller is already running in a transaction. Otherwise, a TransactionRequiredException is thrown. ITransaction.CURRENT.get() transaction Sets the transaction to be used to run the runnable. Has only an effect, if transaction scope is set to TransactionScope.REQUIRED or TransactionScope.MANDATORY. Normally, this property should not be set manually. ITransaction.CURRENT.get() clientNotificationCollector To associate the context with the given ClientNotificationCollector, meaning that any code running on behalf of this context has that collector set in ClientNotificationCollector.CURRENT thread-local. That collector is used to collect all transactional client notifications, which are to be published upon successful commit of the associated transaction, and which are addressed to the client node which triggered processing (see withClientNodeId(String)). That way, transactional client notifications are not published immediately upon successful commit, but included in the client’s response instead (piggyback). Typically, that collector is set by ServiceTunnelServlet for the processing of a service request. ClientNotificationCollector.CURRENT.get() clientNodeId Associates this context with the given 'client node ID', meaning that any code running on behalf of this context has that id set in IClientNodeId.CURRENT thread-local. Every client node (that is every UI server node) has its unique 'node ID' which is included with every 'client-server' request, and is mainly used to publish client notifications. If transactional client notifications are issued by code running on behalf of this context, those will not be published to that client node, but included in the request’s response instead (piggyback). However, transactional notifications are only sent to clients upon successful commit of the transaction. Typically, this node ID is set by ServiceTunnelServlet for the processing of a service request. IClientNodeId.CURRENT.get() A ClientRunContext controls propagation of client-side state, and is a specialization of RunContext. property description accessibility session Session to be bound to Session ThreadLocal ISession.CURRENT.get() form Associates this context with the given IForm, meaning that any code running on behalf of this context has that IForm set in IForm.CURRENT thread-local. That information is mainly used to determine the current calling model context, e.g. when opening a message-box to associate it with the proper IDisplayParent. Typically, that information is set by the UI facade when dispatching a request from UI, or when constructing UI model elements. IForm.CURRENT.get() outline Associates this context with the given IOutline, meaning that any code running on behalf of this context has that IOutline set in IOutline.CURRENT thread-local. That information is mainly used to determine the current calling model context, e.g. when opening a message-box to associate it with the proper IDisplayParent. Typically, that information is set by the UI facade when dispatching a request from UI, or when constructing UI model elements. IOutline.CURRENT.get() desktop Associates this context with the given IDesktop, meaning that any code running on behalf of this context has that IDesktop set in IDesktop.CURRENT thread-local. That information is mainly used to determine the current calling model context, e.g. when opening a message-box to associate it with the proper IDisplayParent. Typically, that information is set by the UI facade when dispatching a request from UI, or when constructing UI model elements. IDesktop.CURRENT.get()","title":"RunContext","component":"scout-docs","version":"23.1","name":"run-context","url":"/scout-docs/stable/technical-guide/common-concepts/run-context.html","titles":[{"text":"Factory methods to create a RunContext","hash":"factory-methods-to-create-a-runcontext","id":1},{"text":"Properties of a RunContext","hash":"properties-of-a-runcontext","id":2},{"text":"Properties of a ServerRunContext","hash":"properties-of-a-serverruncontext","id":3},{"text":"Properties of a ClientRunContext","hash":"properties-of-a-clientruncontext","id":4}]},"112":{"id":112,"text":"The Scout HTML UI requires a web browser with modern built-in technologies: HTML 5, CSS 3, JavaScript (ECMAScript 5). Scout does its best to support all browsers widely in use today by making use of vendor-specific prefixes, polyfills or other workarounds. However, some older or obscure browsers are not supported deliberately, simply because they are lacking basic capabilities or the required effort would be beyond reason. Here is a non-exhaustive list of supported browsers: Desktop Mozilla Firefox >= 69 Chromium (like Google Chrome, Microsoft Edge, Brave or Opera) >= 71 Apple Safari >= 12.1 Mobile (Due to the nature of mobile operating systems, it is hard to specify exact versions of supported browsers. Usually, the screen size and the device speed are the limiting factors.) iOS >= 13 Android >= 5","title":"Browser Support","component":"scout-docs","version":"23.1","name":"browser-support","url":"/scout-docs/stable/technical-guide/user-interface/browser-support.html","titles":[]},"113":{"id":113,"text":"JavaScript and CSS assets of a typical Scout application are built by Webpack using npm and Node.js. In order to make the building as easy as possible for you, there is a CLI module available. That module contains a default webpack and karma configuration and several build scripts you can use. The goal is to reduce the time you need to setup your build to a minimum. If you have created your Scout project using a Scout archetype, it should all be already setup for you. Nevertheless, you will get to a point where it is important to know how the building works in detail and how the several build tools are wired together. If you are there, this chapter should help you out. In every modern application you will have dependencies to other modules, either modules you created to separate your code, or third party modules like Scout. Such dependencies to other JavaScript modules are managed by the Node Package Manager (npm). So every module containing JavaScript or Less code needs to be a Node module with a package.json file that defines its dependencies. This setup gives you the possibility to easier integrate and update 3rd party JavaScript frameworks available in the huge npm registry. Scout itself is also published to that registry and will therefore be downloaded automatically once you execute npm install, as long as your package.json contains a Scout dependency. You will recognize a Scout module based on its name: all official Scout modules are published using the scope @eclipse-scout. The most important one is @eclipse-scout/core which contains the core runtime functionality. Other modules are @eclipse-scout/cli for the building support, @eclipse-scout/eslint-config for our ESLint rules, or @eclipse-scout/karma-jasmine-scout for enhanced testing support. In addition to Node module dependencies, a Scout application uses ES6 imports to define dependencies between each JavaScript files. So if you want to use a class or utility from @eclipse-scout/core, you’ll need to import that class or utility in your own JavaScript file. Listing 1. Importing ES6 modules import PersonFormModel from './PersonFormModel'; import {Form, models} from '@eclipse-scout/core'; export default class PersonForm extends Form { _jsonModel() { return models.get(PersonFormModel); } } In the code above there are two imports defined: the first one imports the file PersonFormModel into the variable PersonFormModel. The second one imports the class Form and the utility models from the scout core module. Notice that the first import directly addresses a specific file while the second import addresses the node module itself. This is possible because Scout provides an index file specifying all available exports. That file is linked in the package.json. If your application contains more than one Node modules as well, you can do the same. Scout provides a default Webpack configuration containing all the necessary settings for Webpack and the plugins needed for a typical Scout application setup. To make your application use the Scout defaults, you need to create a file called webpack.config.js in your Node module and reexport the Scout configuration. Listing 2. Using Scout’s default Webpack config const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { return baseConfig(env, args); }; If you don’t like the defaults you can easily adjust them by customizing the object returned by the baseConfig(env, args) call. Beside using the default configuration, you’ll need to configure some small things in order to make your application work. In this chapter we’ll have a look at these things you have to configure and the things that are provided by default. The main purpose of Webpack is to bundle the many small source files into one or a few larger JavaScript or CSS files which are included in the HTML files as resp. tags and therefore loaded by the browser. Scout does not provide any special bundling rules, but relies on the Webpack default configuration. It is optimized for best performance and user experience on modern browsers. If you want to customize the bundling please have a look at the SplitChunksPlugin of Webpack. To let Webpack know about your entry files you need to specify them in your webpack.config.js. Listing 3. Using Scout’s default Webpack config const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { const config = baseConfig(env, args); config.entry = { 'helloworld': './src/main/js/index.js', 'helloworld-theme': './src/main/js/theme.less', 'helloworld-theme-dark': './src/main/js/theme-dark.less' }; return config; }; In this example the application is called helloworld and there is a bundle created with the same name. In order to create the bundle, Webpack uses the entry file, which is index.js in this case, follows all the ES 6 imports and includes these files. It then extracts chunks into separate files based on the predefined Webpack default rules. So you don’t have to care about these chunks unless you want to customize it. Also notice that the same applies to CSS files. The above example defines 2 CSS bundles in addition to the JavaScript bundle: helloworld-theme.css and helloworld-theme-dark.css. There are no predefined chunks for CSS files, we just put all the CSS code in one big file. In addition to JavaScript and CSS resources bundled by webpack, your application will probably also require resources like images or fonts. Such resources should be placed in a resource folder, e.g. src/main/resources/WebContent if you use the Maven module structure, or just res otherwise. Because there are multiple modules that could provide such resources, you need to specify them in your webpack.config.js using the resDir array. Listing 4. Specifying res folders const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { args.resDirArray = ['src/main/resources/WebContent', 'node_modules/@eclipse-scout/core/res']; return baseConfig(env, args); }; In the snippet above the resDir array contains a folder of your module and a folder of Scout itself. The resource folder of Scout mainly contains the scoutIcons.woff, which is the icon font used by some Scout widgets. When the build runs all the folders specified by the resDir array are visited and the resources collected. These resources are then available under / (if you use the Scout backend). If you want to know how to start the build, have a look at the Command Line Interface (CLI). In order to use the latest EcmaScript features like the ES6 Modules but still support older browsers, Scout uses Babel to transpile ES6+ code into ES5. The transpiler is enabled by default if you use the Webpack configuration provided by Scout, so you don’t have to configure it by yourself. The CSS preprocessor used by Scout is Less, so the default webpack configuration already supports it by using the less-loader plugin. In order to profit from Scout`s less variables (see Styling]) we recommend to use Less as well. Since it is already configured, you won’t have to do anything but to write your CSS rules. Scout uses Karma as test runner for its unit tests. The tests itself are written with the test framework Jasmine. We also use some plugins like karma-jasmine-jquery, karma-jasmine-ajax or karma-jasmine-scout to make writing tests for a Scout application even easier. All this is configured in the file karma-defaults.js. If you want to use them too, you need to provide your own Karma file called karma.conf.js and import the defaults, similar to the Webpack Configuration. You can now adjust or override the defaults or just leave them as they are. To let Karma know about your tests, you need to define the entry point. Listing 5. karma.conf.js const baseConfig = require('@eclipse-scout/cli/scripts/karma-defaults'); module.exports = config => baseConfig(config, './src/test/js/test-index.js'); In the snippet above you see two things: The Scout defaults are imported and the entry point test-index.js is defined. This is all you need to do in this file if you are fine with the defaults. The file test-index.js defines where your unit tests are and what the context is for the Webpack build. Because a unit test is called a spec when using Jasmine, a typical test-index.js looks like this: Listing 6. karma.conf.js import {JasmineScout} from '@eclipse-scout/core/testing'; let context = require.context('./', true, /[sS]pec\\.js$/); JasmineScout.runTestSuite(context); This code tells the karma-webpack plugin to require all files ending in Spec.js. This will generate one big test bundle, but since source maps are enabled, you can debug the actual test files easily. The last line installs the given context and also runs a Scout app so that the Scout environment is properly set up. After running the tests, all results are put in a folder called test-results. There is a sub folder for each browser that executed the tests containing a file called test-results.xml. Since the karma-defaults.js uses the junit reporter, the file can be interpreted by any tool supporting the junit format, e.g. Jenkins. The Scout CLI is a bunch of npm-scripts that help you building and testing your application. In order to use them you need to add a devDependency to @eclipse-scout/cli to the package.json of your module. We also suggest to add some scripts to make the execution easier. If you use the Scout archetype, the following will be created for you. Listing 7. CLI dependency and scripts in package.json \"scripts\": { \"testserver:start\": \"scout-scripts test-server:start\", \"testserver:stop\": \"scout-scripts test-server:stop\", \"test:ci\": \"scout-scripts test:ci\", \"build:dev\": \"scout-scripts build:dev\", \"build:prod\": \"scout-scripts build:prod\", \"build:all\": \"scout-scripts build:dev && scout-scripts build:prod\", \"build:dev:watch\": \"scout-scripts build:dev:watch\" }, \"devDependencies\": { \"@eclipse-scout/cli\": \"10.0.0\" } Before you can open your application in the browser, you need to build it. The build takes all your source code and resources and creates the artifacts needed for the browser according to your Webpack Configuration. Once the build is complete all the produced artifacts are put in the target/dist folder. The target/dist folder contains three sub folders: dev: contains not minified versions of the JS and CSS bundles with Source Maps. The source maps are necessary to map the bundles to the actual source files which makes debugging a lot easier. The Scout server delivers such bundles if it runs in dev mode (scout.devMode=true). prod: contains minified versions of the JS and CSS bundles with restricted source maps (the maps don’t contain the actual source code, only the information necessary to create meaningful stack traces, see also the devtool property nosources-source-map). Content hashes are generated and added to the bundles for optimal cashing. The Scout server delivers such bundles if it runs in production mode (scout.devMode=false). res: contains all static resources from the various resource folders specified by the resDir array, see Static Web Resources. If the property scout.urlHints.enabled is set to true, the dev files can be requested on the fly even if the server does not run in devMode. Just add the query parameter ?debug=true and the files in the dev folder instead of the ones in the prod folder are delivered. This can be very useful to debug a deployed application. In order to start the build, use the following command: npm run build:dev This will fill the dev and res folders with the appropriate files. To make the files available to your browser you need to start a webserver. When using the Scout backend just start the class JettyServer. Once the build is complete and Jetty runs, you can open your application in the browser. If you now make adjustments on your JS or CSS files, you would have to rerun the buid script, which could be time consuming and annoying. To make your developer life easier you can run the following script instead: npm run build:dev:watch This will also build your application but additionally starts a watcher that watches your source code. As soon as you change your code that watcher will notice and start a build. Since it knows which files changed, only these files need to be rebuilt which makes it a lot faster. The build commands accept some arguments you can use to adjust the build without modifying your webpack config file. The following arguments are available: mode: development or production. This argument is set automatically when using build:dev or build:prod. clean: true, to clean the target/dist folder before each build. Default is false if watcher is enabled (build:dev:watch), otherwise true. progress: true, to show build progress in percentage. Default is true. profile: true, to show timing information for each build step. Default is false. resDirArray: an array containing directories which should be copied to dist/res. stats: object to control the build output. There are some presets available as shortcuts (e.g. 'detailed' or 'errors-only'), see also: https://webpack.js.org/configuration/stats/. In order to set an argument make sure to separate the arguments using -- from the command. Example: npm run build:dev -- --progress false All arguments are passed to the webpack config file as parameter args which is the second parameter. The first parameter called env is actually just a convenience accessor to args.env and does not contain system environment variables. If you want to access them just use the regular node syntax process.env. Before you can run your unit tests you need to properly setup the files as described in Karma Configuration. If all is setup correctly, you can run your tests using the following command: npm run test:ci This will execute all unit tests with the headless browser. The default headless browser is Chrome, so you need to make sure Chrome is installed. This includes your Continuous Integration Environment, if you plan to automatically run the tests on a regular basis (e.g. with Jenkins). The above command will execute the tests once and does not watch for changes. This is typically not desired during development. When you are actively developing a component and want to run your tests while you are developing, you can use the following command: npm run testserver:start This will start a real browser and enable the watch mode. This means every time you adjust your code and save it, the web pack build is started, the browser reloaded and your tests executed. If you don’t like the automatic browser reloading, you can press debug on the top right corner of the browser or manually navigate to http://localhost:9876/debug.html. The test commands accept some arguments you can use to adjust the karma runner without modifying your karma config file. All passed arguments are merged with the karma config object, so all karma configuration options are available (see http://karma-runner.github.io/4.0/config/configuration-file.html). Example usage: npm run test:ci -- --junitReporter.outputDir=custom-out-dir Please note that no type conversion happens which is especially relevant for boolean arguments. If you for example want to disable the watcher, you cannot use --auto-watch false. Instead, you would have to use --no-auto-watch. In addition to the karma configuration options you can also pass the webpack arguments (checkout Arguments for a list of available arguments). To do that, you need to use the argument called webpackArgs. Example: npm run testserver:start -- --webpackArgs.progress=false test:ci automatically disables the webpack progress because you don’t want the progress when the tests run on a continuous integration server. In case you need to test the files built by build:prod locally, follow this procedure: Stop the UI server. Run npm run build:prod, this script will copy minified script files to the /dist folder. Start the UI server. Stopping and starting the UI server makes sure the server-side script cache is cleared. Start the application with the URL parameter /?debug=false. Check your index.html in the browser. Each referenced script or CSS file should have a fingerprint, example: yourapp-2c6053b2fdf5b816fae5.min.js. If you set the config property scout.devMode to false instead of using the URL parameter, the resources will be loaded from the Java classpath. In that case you need to additionally copy the content of the dist folder to target/classes before starting the UI server. Or you can also set scout.loadWebResourcesFromFilesystem to true to disable classpath loading (see also LoadWebResourcesFromFilesystemConfigProperty). For the Scout code base we use ESLint to analyze the JavaScript and TypeScript code. The configuration we use is stored in the module @eclipse-scout/eslint-config. If you like, you can use the same configuration for your application, but you don’t have to. You can use your custom config or even a different linter. When using the Scout archetype to generate your app, the ESLint configuration is already setup for you and you don’t need to do the following steps. In order to use the Scout eslint-config, you need to add devDependencies to the modules @eclipse-scout/eslint-config and eslint in your package.json. Listing 8. ESLint Dependencies \"devDependencies\": { \"@eclipse-scout/eslint-config\": \"23.1.0\", \"eslint\": \"8.27.0\" } Then create a file called .eslintrc.js with the following content: Listing 9. .eslintrc.js module.exports = { extends: '@eclipse-scout' }; This tells ESLint to inherit the configuration from the Scout module. In order to run the analysis, you can either use an IDE that supports it (e.g. IntelliJ), or the command line. npx eslint . If the command takes very long and prints a lot of errors, you may have to ignore the target/dist folder, see ESLint Ignore. The command above will analyze your current directory including all sub-directories. Depending on your environment, it is likely that you’ll see some errors regarding linebreaks. This is because the Scout config enforces the UNIX format (LF). You can now either convert the linebreaks of your files to that format and adjust your editor to always use the UNIX format, or you can disable the rule. To do that, just add the following to your .eslintrc.js: Listing 10. Disabling the linebreak rule rules: { 'linebreak-style': 'off' } Now run the command again to make the linebreak errors disappear. If you plan to configure your IDE to use the UNIX linebreak format, we recommend having a look at Editor Config. The file can be interpreted by various IDEs. Just add end_of_line=lf to that file and you are done. Similar to .gitignore, you can create a file called .eslintignore to exclude specific files or directories from the analysis. Because analyzing the build output probably does not make any sense, we recommend to at least ignore the target folder. The only thing you need to do is to create that file and add a line with the word target. For more details please see the official ESLint documentation at https://eslint.org/docs/user-guide/configuring#eslintignore. If you are writing a Scout JS library module, you probably want to prebuild your JavaScript code so the consumer of your library don’t have to do it. This is especially important if you write your module in TypeScript because the Scout build does not transpile TypeScript code of libraries by default. Basically, the following things are necessary to create a library: Edit your webpack.config.js or create a new one if you don’t have one already. Create a new entry point and define a name for your library. Use the libraryConfig function provided by Scout to create a library configuration. The library config takes care of defining the externals (the code that won’t be bundled into your library) based on the dependencies of your package.json. This means, if an import points to code from a dependency (or dev-, optional-, bundled- or peer-dependency), the code won’t be bundled and the import is preserved. The library itself will be an ESM module and provide an export so it can be imported by consumers. Link the entry point (main) of your package.json to the entry point of your library. Define where your entry point and your type declarations are in a bundled module using publishConfig. The library will be created in the dist folder, as well as the type declarations (see the outDir property of your tsconfig.json). The attributes in the publishConfig will replace the regular attributes when the library is published. During development, the publishConfig has no effect. Ensure the dist folder will be part of the bundled module by adding it to the list of files in package.json. Consult the Webpack Guide if you want to learn more about authoring libraries in general. Listing 11. Library Webpack Config const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { args.resDirArray = []; const config = baseConfig(env, args); return { entry: { 'your-library': './src/main/js/index.ts' (2) }, ...baseConfig.libraryConfig(config) (3) }; }; Listing 12. package.json for a library { \"main\": \"./src/main/js/index.ts\", \"publishConfig\": { \"main\": \"./target/dist/dev/your-library.js\", \"types\": \"./target/dist/d.ts/index.d.ts\" }, \"files\": [ \"src/main/js\", \"target/dist\" ] } If you need to build multiple libraries in a single npm module, you can use the run argument of Scout`s webpack build to control which library should be built. Scout itself for example uses it to build a testing library (@eclipse-scout/core/testing) with some utilities for writing tests. For each library specified by the run argument a new webpack build is started, so the libraries are built consecutively which is ideal for the memory consumption. To use this feature, just check for the run args in your webpack config and load another config instead. module.exports = (env, args) => { args.resDirArray = []; if (args.run == 'other') { return require('./webpack.config.other.js')(env, args); } // ... default config }; In the webpack.config.other.js define your other library. If it should only contain a part of the source code, make sure to specify the externals correctly. The function rewriteIndexImports of the base config may help you to externalize all imports to the index file. const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { const config = baseConfig(env, args); let otherConfig = { entry: { 'other-library': './src/main/js/folder-with-other-library/index.ts' }, ...baseConfig.libraryConfig(config) }; otherConfig.externals = [ baseConfig.rewriteIndexImports('@your/core', 'folder-with-other-library'), otherConfig.externals ]; return otherConfig; }; Then, make sure every library will be built by specifying the run argument in the package.json: { \"scripts\": { \"build:dev\": \"scout-scripts build:dev --run default other\", \"build:prod\": \"scout-scripts build:prod --run default other\" } } Finally, you need to define the entry points in your package.json. You can do so using the exports attribute. Listing 13. package.json for a library { \"exports\": { \".\": \"./src/main/js/index.ts\", \"./other\": \"./src/main/js/folder-with-other-library/index.ts\", \"./src/main/js/*\": \"./src/main/js/*\" }, \"main\": \"./src/main/js/index.ts\", \"publishConfig\": { \"exports\": { \".\": \"./target/dist/dev/your-library.js\", \"./testing\": \"./target/dist/dev/other-library.js\", \"./src/main/js/*\": \"./src/main/js/*\" }, \"main\": \"./target/dist/dev/your-library.js\" } } Important: As soon as the exports attribute is used, consumers of the module can only import code that is explicitly exported. In order to still allow imports to individual source files directly (e.g. for CSS Files), you can export them using wildcard syntax (./src/main/js/*). If you don’t need or want that, just omit this configuration.","title":"Build Stack","component":"scout-docs","version":"23.1","name":"build-stack","url":"/scout-docs/stable/technical-guide/user-interface/build-stack.html","titles":[{"text":"Dependency Management","hash":"dependency-management","id":1},{"text":"ES6 Modules","hash":"es6-modules","id":2},{"text":"Webpack Configuration","hash":"webpack-configuration","id":3},{"text":"Bundling","hash":"bundling","id":4},{"text":"Static Web Resources","hash":"static-web-resources","id":5},{"text":"EcmaScript Transpiler","hash":"ecmascript-transpiler","id":6},{"text":"CSS Preprocessor","hash":"css-preprocessor","id":7},{"text":"Karma Configuration","hash":"karma-configuration","id":8},{"text":"Reporting","hash":"reporting","id":9},{"text":"Command Line Interface (CLI)","hash":"command-line-interface-cli","id":10},{"text":"Building","hash":"building","id":11},{"text":"Arguments","hash":"webpack-arguments","id":12},{"text":"Testing","hash":"testing","id":13},{"text":"Arguments","hash":"arguments","id":14},{"text":"Test prod scripts on your local machine","hash":"test-prod-scripts-on-your-local-machine","id":15},{"text":"ESLint","hash":"eslint","id":16},{"text":"ESLint Ignore","hash":"eslint-ignore","id":17},{"text":"Authoring Libraries","hash":"authoring-libraries","id":18},{"text":"Multiple Libraries in a Single Module","hash":"multiple-libraries-in-a-single-module","id":19}]},"114":{"id":114,"text":"The Desktop Layout can be configured using the IDesktop.setBenchLayoutData method. This property is observed and might be changed during the application lifecycle. The desktop consists out of 9 view stacks (see Figure 1). Each form can be assigned to a single view stack using the property DisplayViewId (IForm.getConfiguredDisplayViewId). If multiple forms are assigned to the same view stack the views will be displayed as tabs where the top form is visible and the corresponding tab selected. Tabs are only visible if the form does have a title, subtitle or an image. Figure 1. Desktop Bench overview The east, center and west columns are separated with splitters which can be moved according to the layout data properties. Each column is split into a north, center and south part. Within a column the north, center and south parts can not differ in their width. The modifications (splitter movements) are cached when a cache key (BenchLayoutData.withCacheKey) is set. In case the cache key is null the layout starts always with the initial values. An example of a bench layout data configuration with a fixed north (N) view stack and a south (S) view stack with a minimal size. See org.eclipse.scout.rt.client.ui.desktop.bench.layout.FlexboxLayoutData API for the documentation of the properties. desktop.setBenchLayoutData( (1) new BenchLayoutData() .withCacheKey(\"a-cache-key\") (2) .withCenter( (3) new BenchColumnData() .withNorth(new FlexboxLayoutData().withGrow(0).withShrink(0).withInitial(280).withRelative(false)) (4) .withCenter(new FlexboxLayoutData()) (5) .withSouth(new FlexboxLayoutData().withShrink(0).withInitial(-1)))); (6) 1 set the BenchLayoutData to the desktop. 2 set a cache key to store the layout modifications (dragging splitters) to the session store. Aware the settings are stored to the browsers session store they are not transferred over different browsers nor systems. 3 configure the center column (N, C, S). 4 The north part is fixed in size so the splitter between north (N) and center © view stack is disabled. The size is fixed to 280 pixel. 5 Use default for the center © view stack. 6 The south part is using the UI height as initial size and is growable but not shrinkable.","title":"Desktop","component":"scout-docs","version":"23.1","name":"desktop","url":"/scout-docs/stable/technical-guide/user-interface/desktop.html","titles":[{"text":"Desktop Bench Layout","hash":"desktop-bench-layout","id":1}]},"115":{"id":115,"text":"The extensibility concepts of Scout allow you to extend or even replace methods of Scout widgets or objects. You can also use it to extend your own objects or objects from a Scout based third party library. There are mainly two ways to extend an object: Extension by Sub-Classing Extension by Composition Extending an object using sub-classing is simple and straight forward. It can either be used to create a custom widget and only use it for certain cases. And it can even be used to replace a specific widget completely, so your widget will be used every time the original widget is requested. To extend from a widget, just create a new class, extend from the desired widget class and override the methods you want to adjust. Listing 1. SpecialStringField.js import {StringField} from '@eclipse-scout/core'; export default class SpecialStringField extends StringField { // Override desired methods } Then, register it in your index file as usual and use it in your code by creating a new instance with scout.create('yournamespace.SpecialStringField') or as part of a model: Listing 2. index.js // ... export {default as SpecialStringField} from './SpecialStringField'; // ... window.yournamespace = Object.assign(window.yournamespace || {}, self); Listing 3. ExampleFormModel.js export default () => ({ rootGroupBox: { objectType: 'GroupBox', fields: [ { id: 'SpecialField', objectType: 'yournamespace.SpecialStringField', label: 'Your special field' } ] } }); If you want to replace every StringField in your application with SpecialStringField, you need to register a new object factory for the objectType StringField as follows: Listing 4. Adding a new object factory registration import {SpecialStringField} from './index'; import {scout} from '@eclipse-scout/core'; scout.addObjectFactories({ 'StringField': () => new SpecialStringField() }); More details can be found in the chapter [Object Factory]. If you need to extend a widget that uses a model (see [Creating a Widget Declaratively]), you may have to extend that model as well. To do so, extend the widget as described above and either adjust the widgets in the init function directly. Listing 5. ExtendedForm.js import ExampleForm from './ExampleForm'; export default class ExtendedForm extends ExampleForm { _init(model) { super._init(model); this.widget('SpecialField').setLabel('New label for the special field'); } } Or, for more complex cases, you can put your model adjustments in a separate file and use the declarative approach. To do so, override the _jsonModel method and use models.extend to adapt the original model. Listing 6. ExtendedForm.js with separate model import {models} from '@eclipse-scout/core'; import ExampleForm from './ExampleForm'; import ExtendedFormModel from './ExtendedFormModel'; export default class ExtendedForm extends ExampleForm { _jsonModel() { let baseModel = super._jsonModel(); return models.extend(ExtendedFormModel, baseModel); } } Then, create a new file that will contain your model extensions. Use the target keyword to specify which widget should be adjusted. With the operation keyword you define, whether properties should be adjusted (appendTo) or new objects should be inserted (insert). The following example contains an extension for the field with the id SpecialField that sets a new value for the label. Listing 7. ExtendedFormModel.js export default () => ({ type: 'extension', extensions: [ { operation: 'appendTo', target: { id: 'SpecialField' }, extension: { label: 'New label for the special field' } } ] }); Extension by Composition allows to have multiple, independent extensions of a Scout object. It also allows the adjustment of super classes of objects from which it is not possible to inherit, e.g. FormField or even Widget. This extension feature works by wrapping functions on the prototype of a Scout object with a wrapper function which is provided by an extension. The extension feature doesn’t rely on subclassing, instead we simply register one or more extensions for a single Scout class. When a function is called on an extended object, the functions are called on the registered extensions first. Since a Scout class can have multiple extensions, we speak of an extension chain, where the last element of the chain is the original (extended) object. The base class for all extensions is Extension. This class is used to extend an existing Scout object. In order to use the extension feature you must subclass Extension and implement an init function, where you register the functions you want to extend. Example: import {Extension, StringField} from '@eclipse-scout/core'; export default class MyExtension extends Extension { init() { this.extend(StringField.prototype, '_init'); } } Then you implement functions with the same name and signature on the extension class. Example: _init(model) { // Call the original _init() method of the StringField class this.next(model); // Extend the instance with a new property called bar with the value foo // -> EVERY string field now has this new property this.extended.setProperty('bar', 'foo'); } The extension feature sets two properties on the extension instance before the extended method is called. These two properties are described below. The function scope (this) is set to the extension instance when the extended function is called. next is a reference to the next extended function or the original function of the extended object, in case the current extension is the last extension in the extension chain. extended is the extended or original object. All extensions must be registered in the _installExtensions function of your App (make sure to use the namespace which is defined in your index.js instead of yournamespace). You can find your app in your entrypoint file that is linked in your webpack.config.js. If you already have a custom App, just override _installExtensions and register the extension. Otherwise, you need to create a custom App first by extending from the Scout App (or RemoteApp for Scout Classic) and make sure this new app is initialized rather than the default one. Listing 8. CustomApp.js import {App, Extension} from '@eclipse-scout/core'; export default class CustomApp extends App { _installExtensions() { Extension.install([ 'yournamespace.MyExtension' ]); } } Listing 9. Entry point file import CustomApp from './CustomApp'; let app = new CustomApp(); app.init(); Required version: The API described here requires Scout version 4.2 or newer. When working with large business applications it is often required to split the application into several modules. Some of those modules may be very basic and can be reused in multiple applications. For those it makes sense to provide them as binary library. But what if you have created great templates for your applications but in one special case you want to include one more column in a table or want to execute some other code when a pre-defined context menu is pressed? You cannot just modify the code because it is a general library used everywhere. This is where the extensibility concept helps. To achieve this two new elements have been introduced: Extension Classes: Contains modifications for a target class. Modifications can be new elements or changed behavior of existing elements. Extension Registry: Service holding all Extensions that should be active in the application. The Scout extensibility concept offers three basic possibilites to extend existing components: Extensions Changing behavior of a class Contributions Add new elements to a class Moves Move existing elements within a class The following chapers will introduce this concepts and present some examples. Extensions contain modifications to a target class. This target class must be extensible. All elements that implement org.eclipse.scout.rt.shared.extension.IExtensibleObject are extensible. And for all extensible elements there exists a corresponding abstract extension class. Examples: AbstractStringField is extensible. Therefore, there is a class AbstractStringFieldExtension. AbstractCodeType is extensible. Therefore, there is a class AbstractCodeTypeExtension. Target classes can be all that are instanceof those extensible elements. This means an AbstractStringFieldExtension can be applied to AbstractStringField and all child classes. Extensions contain methods for all Scout Operations (see Exec Methods). Those methods have the same signature except that they have one more input parameter. This method allows you to intercept the given Scout Operation and execute your own code even though the declaring class exists in a binary library. It is then your decision if you call the original code or completely replace it. To achieve this the Chain Pattern is used: All extensions for a target class are called as part of a chain. The order is given by the order in which the extensions are registered. And the original method of the Scout element is an extension as well. Extensions to specific types of elements are prepared as abstract classes: AbstractGroupBoxExtension AbstractImageFieldExtension The following image visualizes the extension chain used to intercept the default behavior of a component: The following example changes the initial value of a StringField called NameField: Listing 10. Extension for NameField public class NameFieldExtension extends AbstractStringFieldExtension { public NameFieldExtension(NameField owner) { super(owner); } @Override public void execInitField(FormFieldInitFieldChain chain) { chain.execInitField(); // call the original exec init. whatever it may do. getOwner().setValue(\"FirstName LastName\"); // overwrite the initial value of the name field } } Note: The type parameter of the extension (e.g. NameField) denotes the element which is extended. The extension needs to be registeres when starting the application: Listing 11. Register extension for NameField Jobs.schedule(() -> BEANS.get(IExtensionRegistry.class).register(NameFieldExtension.class), Jobs.newInput() .withRunContext(ClientRunContexts.copyCurrent()) .withName(\"register extension\")); The section before explained how to modify the behavior of existing Scout elements. This section will describe how to contribute new elements into existing containers. This is done by using the same mechanism as before. It is required to create an Extension too. But instead of overwriting any Scout Operation we directly define the new elements within the Extension. A lot of new elements can be added this way: Fields, Menus, Columns, Codes, …​ Some new elements may also require a new DTO (FormData, TablePageData, TableData) to be filled with data from the server. The corresponding DTO for the extension is automatically created when using the SDK 4.2 or newer and having the @Data annotation specified on your extension. As soon as the DTO extension has been registered in the IExtensionRegistry service it is automatically created when the target DTO is created and will also be imported and exported automatically! The following example adds two new fields for salary and birthday to a PersonForm. Please note the @Data annotation which describes where the DTO for this extension should be created. Listing 12. Extension for PersonForm /** * Extension for the MainBox of the PersonForm */ @Data(PersonFormMainBoxExtensionData.class) public class PersonFormMainBoxExtension extends AbstractGroupBoxExtension { public PersonFormMainBoxExtension(MainBox ownerBox) { super(ownerBox); } @Order(2000) @ClassId(\"fda7cd67-0df1-4194-9d70-22a9b3ce890d\") public class SalaryField extends AbstractBigDecimalField { } @Order(3000) @ClassId(\"478037fb-759f-4fa1-b737-c77f903c6881\") public class BirthdayField extends AbstractDateField { } } Beware: Field names must be unique throughout form and extensions (e.g. there may not be a field on the form or another extension contributing to the same form with the same field name). However, it is possible to create templates (e.g. a group box as container with its own @FormData annotation) which is added multiple times through a form or extensions. The extension data must be registered manually in the job like in the example before: Listing 13. Register extension for PersonForm BEANS.get(IExtensionRegistry.class).register(PersonFormMainBoxExtension.class); Then the SDK automatically creates the extension DTO which could look as follows. Please note: The DTO is generated automatically, but you have to register the generated DTO manually! Listing 14. Extension Data for PersonForm @Extends(PersonFormData.class) @Generated(value = \"org.eclipse.scout.docs.snippets.person.PersonFormMainBoxExtension\", comments = \"This class is auto generated by the Scout SDK. No manual modifications recommended.\") public class PersonFormMainBoxExtensionData extends AbstractFormFieldData { private static final long serialVersionUID = 1L; public Birthday getBirthday() { return getFieldByClass(Birthday.class); } public Salary getSalary() { return getFieldByClass(Salary.class); } @ClassId(\"478037fb-759f-4fa1-b737-c77f903c6881-formdata\") public static class Birthday extends AbstractValueFieldData { private static final long serialVersionUID = 1L; } @ClassId(\"fda7cd67-0df1-4194-9d70-22a9b3ce890d-formdata\") public static class Salary extends AbstractValueFieldData { private static final long serialVersionUID = 1L; } } You can also access the values of the DTO extension as follows: Listing 15. Access extended fields // create a normal FormData // contributions are added/imported/exported automatically PersonFormData data = new PersonFormData(); // access the data of an extension PersonFormMainBoxExtensionData c = data.getContribution(PersonFormMainBoxExtensionData.class); c.getSalary().setValue(new BigDecimal(\"200.0\")); Extending a AbstractForm and one (or more) of its AbstractFormHandlers that can be achieved as follows: Listing 16. Extension for PersonForm public class PersonFormExtension extends AbstractFormExtension { public PersonFormExtension(PersonForm ownerForm) { super(ownerForm); } @Override public void execInitForm(FormInitFormChain chain) { chain.execInitForm(); // Example logic: Access the form, disable field getOwner().getNameField().setEnabled(false, true, true); } public void testMethod() { MessageBoxes.create().withHeader(\"Extension method test\").withBody(\"A method from the form extension was called\").show(); } public static class NewFormHandlerExtension extends AbstractFormHandlerExtension { public NewFormHandlerExtension(NewHandler owner) { super(owner); } @Override public void execPostLoad(FormHandlerPostLoadChain chain) { chain.execPostLoad(); // Example logic: Show a message box after load MessageBoxes.create().withHeader(\"Extension test\").withBody(\"If you can read this, the extension works correctly\").show(); // Access element from the outer extension. PersonFormExtension extension = ((AbstractForm) getOwner().getForm()).getExtension(PersonFormExtension.class); extension.testMethod(); } } } There are a few things to note about this example: It is only necessary to register the outer form extension, not the inner handler extension as well. The inner handler extension must be static, otherwise an Exception will occur when the extended form is being started! You can access the element you are extending by calling getOwner(). Since you cannot access elements from your form extension directly from the inner handler extension (because it is static), you will need to retrieve the form extension via the getExtension(Class>) method on the extended object, as done here to retrieve the form extension from the form handler extension. You can also move existing Scout elements to other positions. For this you have to register a move command in the IExtensionRegistry. As with all extension registration it is added to the extension registration Job in your Activator class: Listing 17. Move NameField to LastBox BEANS.get(IExtensionRegistry.class).registerMove(NameField.class, 20d, LastBox.class); The new extensibility concept is added on top of all existing extension possibilities like injection or sub-classing. Therefore, it works together with the current mechanisms. But for some use cases (like modifying template classes) it offers a lot of benefits. Therefore no migration is necessary. The concepts do exist alongside each others. However there is one impact: Because the Scout Operation methods are now part of a call chain they may no longer be invoked directly. So any call to e.g. execValidateValue() is no longer allowed because this would exclude the extensions for this call. The Scout SDK marks such calls with error markers in the Eclipse Problems view. If really required the corresponding intercept-Method can be used. So instead directly calling myField.execChangedValue you may call myField.interceptChangedValue().","title":"Extensibility","component":"scout-docs","version":"23.1","name":"extensibility","url":"/scout-docs/stable/technical-guide/user-interface/extensibility.html","titles":[{"text":"Scout JS Extensibility","hash":"scout-js-extensibility","id":1},{"text":"Extension by Sub-Classing","hash":"extension-by-sub-classing","id":2},{"text":"Extending a Model","hash":"extending-a-model","id":3},{"text":"Extension by Composition","hash":"extension-by-composition","id":4},{"text":"Scout Classic Extensibility","hash":"scout-classic-extensibility","id":5},{"text":"Overview","hash":"overview","id":6},{"text":"Extensions","hash":"extensions","id":7},{"text":"Extending a StringField example","hash":"extending-a-stringfield-example","id":8},{"text":"Contributions","hash":"contributions","id":9},{"text":"Extending a form and a handler","hash":"extending-a-form-and-a-handler","id":10},{"text":"Move elements","hash":"move-elements","id":11},{"text":"Migration","hash":"migration","id":12}]},"116":{"id":116,"text":"A form field is a special kind of a widget. It is mainly used on forms but may actually be added to any other widget. Every form field contains of the following parts: Figure 1. Parts of a form field Typical form fields are StringField, DateField or TableField. All these fields have the API of FormField in common (like setLabel(), setErrorStatus(), etc.) but also provide additional API. Some form fields are actually just a wrapper for another widget. This is for example the case for the TableField. The Table itself may be used stand-alone, just call scout.create(Table, {}). But if you want to use it in a GroupBox, which is a form field, you have to use a TableField wrapping the Table.","title":"Form Field","component":"scout-docs","version":"23.1","name":"form-field","url":"/scout-docs/stable/technical-guide/user-interface/form-field.html","titles":[]},"117":{"id":117,"text":"A form is typically used for two purposes: Allowing the user to enter data in a structured way Displaying the data in a structured way This is achieved by using Form Field]s. Every form has one root group box (also called main box) which has 1:n form fields. The form fields are layouted using the logical grid layout, unless no custom layout is used. This makes it easy to arrange the fields in a uniform way. A form may be displayed in various ways, mainly controlled by the property displayHint. The following display hints are available by default: view: the form will be opened in a tab and will take full width and height of the bench dialog: the form will be opened as overlaying dialog and will be as width and height as necessary popup-window: the form will be opened in a separate browser window (please note that this feature does not work properly with Internet Explorer) To display the form, just set one of the above display hints and call form.open(). Beside opening the form as separate dialog or view, you can also embed it into any other widget because it is actually a widget by itself. Just call form.render() for that purpose. When working with forms, you likely want to load, validate and save data as well. The form uses a so called FormLifecycle to manage the state of that data. The lifecycle is installed by default, so you don’t have to care about it. So whenever the user enters some data and presses the save button, the data is validated and if invalid, a message is shown. If it is valid the data will be saved. The following functions of a form may be used to control that behavior. open: calls load and displays the form once the loading is complete. load: calls _load and importData which you can implement to load the data and then marks the fields as saved to set their initial values. Finally, a postLoad event is fired. save: validates the data by checking the mandatory and validation state of the fields. If every mandatory field is filled and every field contains a valid value, the exportData and _save functions are called which you can implement to save the data. After that every field is marked as saved and the initial value set to the current value. reset: resets the value of every field to its initial value marking the fields as untouched. ok: saves and closes the form. cancel: closes the form if there are no changes made. Otherwise, it shows a message box asking to save the changes. close: closes the form and discards any unsaved changes. abort: called when the user presses the \"x\" icon. It will call close if there is a close menu or button, otherwise cancel. If you need to perform form validation which is not related to a particular form-field, you can implement the _validate function. This function is always called, even when there is no touched field. If you embed the form into another widget, you probably don’t need the functions open, ok, close, cancel and abort. But load, reset and save may come in handy as well. Because it is quite common to have a button activating one of these functions (like an 'ok' or 'cancel' button), the following buttons (resp. menus because they are used in the menu bar) are available by default: OkMenu, CancelMenu, SaveMenu, ResetMenu, CloseMenu.","title":"Form","component":"scout-docs","version":"23.1","name":"form","url":"/scout-docs/stable/technical-guide/user-interface/form.html","titles":[{"text":"Form Lifecycle","hash":"form-lifecycle","id":1}]},"118":{"id":118,"text":"The HTML document parser is only available in the Scout UI server. If your Scout JS application uses a different backend, you cannot use the features described in this chapter. The class HtmlDocumentParser is used by the Scout UI server in order to create dynamic HTML output on the server-side. Like JSP the parser supports a set of tags that are processed by the sever. The main purpose of the parser is to provide functions used for login.html and index.html, like bootstrapping and localization before JavaScript can be executed in the browser. Note: some tags like scout-version and scout-text will be removed from the DOM once the Scout App is initialized. Outputs the context-path (or the root-directory) of the deployed web application as base tag in the HTML document. Example: Output: This tag is used for server-side inlcudes, which means you can embed the HTML content of another file into the current HTML document. This avoids unnecessary code duplication by referencing the same fragement in multiple HTML documents. Example: Depending on the current user language provided by the browser, this tag outputs a list of localized text strings. The texts are used to display error-messages during login in the correct language, because at this point we don’t have a Scout session and thus no user language. The parser replaces the message tag through scout-text tags. These tags will be read by scout.texts#readFromDOM. Example: Output: Converts the tag to a regular script tag in the HTML document so that the referenced JavaScript bundle can be loaded by the browser. Prior to that, the file name will be augmented depending on Scout’s runtime properties: if caching is enabled an additional fingerprint is added to the filename. If minifying is enabled the suffix \".min\" is appended to the filename. This tag may be used if custom chunks are defined in webpack.config.js and names of these chunks are known at development time. Example: Output: Writes all script tags in the HTML document which contain the webpack entryPoint name given. This requires that no custom splitChunks are defined. It automatically includes all chunks that are required by the given entry point. The entry point name must match the name in the entry section of the webpack.config.js file. Example: Output: Converts the tag to a regular style tag in the HTML document so that the referenced CSS bundle can be loaded by the browser. Prior to that, the file name will be augmented depending on Scout’s runtime properties: if caching is enabled an additional fingerprint is added to the filename. If minifying is enabled the suffix \"-min\" is appended to the filename. Example: Output: Writes all link tags in the HTML document which contain the webpack entryPoint name given. This requires that no custom splitChunks are defined. It automatically includes all chunks that are required by the given entry point. The entry point name must match the name in the entry section of the webpack.config.js file. Example: Output: Outputs the current version of the Scout application as scout-version tag in the HTML document. This tag is read by scout.App#_initVersion. Example: Output:","title":"HTML Document Parser","component":"scout-docs","version":"23.1","name":"html-document-parser","url":"/scout-docs/stable/technical-guide/user-interface/html-document-parser.html","titles":[{"text":"scout:base","hash":"scoutbase","id":1},{"text":"scout:include","hash":"scoutinclude","id":2},{"text":"scout:message","hash":"scoutmessage","id":3},{"text":"scout:script","hash":"scoutscript","id":4},{"text":"scout:scripts","hash":"scoutscripts","id":5},{"text":"scout:stylesheet","hash":"scoutstylesheet","id":6},{"text":"scout:stylesheets","hash":"scoutstylesheets","id":7},{"text":"scout:version","hash":"scoutversion","id":8}]},"119":{"id":119,"text":"A lot of Scout widgets support icons. For instance a menu item can show an icon next to the menu text. Icons in Scout can be either a bitmap image (GIF, PNG, JPEG, etc.), an SVG or a character from an icon-font. An example for an icon-font is the scoutIcons.woff which comes shipped with Scout. It’s a good practice to define the available icons in your application in a class that defines each icon as a constant. Create a class Icons in the shared module of your project. These constants should be references, when you set the IconId property in your code. For bitmap images you simply specify the filename of the image file without the file extension. Place all your icon files in the resource folder of your client module. Assuming your project name is \"org.scout.hello\", the correct location to store icon files would be: org.scout.hello.client/ # Client project directory src/main/resources/ # Resources directory org/scout/hello/client/icons/ # Path to icons application_logo.png person.png ... Listing 1. Icons.java // Bitmap image (references icons/application_logo.png) public static final String ApplicationLogo = \"application_logo\"; // Character from icon-font scoutIcons.woff (default) public static final String Calendar =\"font:\\uE003\"; // Character from a custom icon-font public static final String Phone =\"font:awesomeIcons \\uF095\"; Listing 2. Usage of iconId in a Scout widget @Override protected String getConfiguredIconId(){ return Icons.Calendar; } The icons used by Scout itself are mainly font icons. Even though font icons are scalable, an icon can get very thick when the size is increased, which is not always desired. To overcome that, Scout icons come in 2 flavors: regular and light. The regular icons can be used, if the icon is displayed at about 16px. This is the case for most widgets (menu, button etc.) If the icon should be displayed larger, the light icons can be used. To use a light icon for your custom widget, just set the font-weight to @icon-font-weight-light. If you create a custom icon font (or use an existing one), you may want to use icons that are compatible with the Scout icons in terms of line width. This allows you to use the Scout icons and your custom icons side by side. Alternatively, only use your custom icons and forget about the Scout icons. The scout icons use the following dimensions: Regular: 1.5px line width and 24px artboard height Light: 1px line width and 24px artboard height You can use your own icon font. The required file format for an icon font is .woff. For the following examples we assume the name of your font file is awesomeIcons.woff. The following steps are required: Place the font file in the WebContent/fonts directory of your html.ui module. This makes it available for http requests on the URL http://[base]/fonts/awesomeIcons.woff. Create a CSS/LESS definition to reference the icon font in stylesheets (e.g. in a file called fonts.less). Make sure the definition is added to the index.less of your project. Listing 3. The CSS/LESS font definition should look like this: @font-face { font-family: awesomeIcons; font-weight: normal; src: url('fonts/awesomeIcons.woff') format('woff'); } /* Overrides definitions in fonts.css > .font-icon * Use iconId 'font:awesomeIcons [character]' in Scout model. * See icons.js and usage of this class to see how iconId is used. */ .font-awesomeIcons { font-family: awesomeIcons, @font-default-family; } To check if your CSS definition is correct, you should download the CSS file directly via URL and check if the CSS file contains the required font definition. Have a look at your index.html to find the path to your CSS (e.g. http://[base]/yourapp-theme.css). When you request resources from the WebContent folder via http, Scout will find resources from other modules on the classpath too. Thus the scoutIcons.woff is always available in a Scout project. However, you must avoid naming conflicts, since at runtime all files exist on the same classpath. Here’s what we do to create and maintain our own icon font scoutIcons.woff. There may be other methods to achieve the same. To create and modify our icon font we use the online application IcoMoon. IcoMoon allows you to assemble a set of icons from various sources (e.g. FontAwesome or custom SVG graphics) and create a font file from that set. You can export/import your icon set from and to IcoMoon, and you should store the files exported from IcoMoon in a SCM system like GIT. IcoMoon stores all important data in the file selection.json. Make sure you also store the raw SVG graphics you’ve uploaded to IcoMoon in your SCM, in case you have to change a single icon later. To edit the icon font in IcoMoon follow these steps: Import selection.json in IcoMoon, click on the \"Import Icons\" button. With the Select tool (arrow) you select the icons you want to add to your set. You can also add one or more characters from other icon fonts like FontAwesome by choosing Add Icons From Library…​ Your can import your custom SVG graphics with Import to Set, which you find in the hamburger menu on the icon set. The SVG graphic should have the same size as the other icons in the set and must use only a single color, black. The background must be transparent. Hint: the filename of the SVG graphic should contain the unicode of the character in the font in order to simplify maintencance. Only use unicodes from the Private Use Area from U+E000 to U+F8FF. When you’re happy with your icon set, you hit the Generate Font button in the footer in IcoMoon. On the following page you can set the unicode of each icon/character. Click on the prefences button (cog icon), to set the name of your icon font (e.g. scoutIcons). Finally click on Download and you receive a ZIP file which contains the new selection.json, and font files like .ttf and .woff. When you’ve added new unicodes to the icon font, you should also update Icons.java and add constants for the new characters. When you’re using Scout JS you should also update icons.js and icons.less. Important! don’t forget to check in the new selection.js to your SCM. Windows tool Character Map: first you must install your custom TrueType Font .ttf in Windows. Simply double-click on the .ttf file and choose Install. After that you can start Character Map and browse through the font. The ZIP archive from IcoMoon contains a file demo.html. This file shows a preview of your icon font. Works in Chrome, but we had trouble viewing the font with Firefox. This tool from Wikipedia also creates a preview for an icon font: Vorlage:Private-Use-Area-Test. Icon font must be installed first.","title":"Icons","component":"scout-docs","version":"23.1","name":"icons","url":"/scout-docs/stable/technical-guide/user-interface/icons.html","titles":[{"text":"Font Icons","hash":"font-icons","id":1},{"text":"Using a custom icon font","hash":"using-a-custom-icon-font","id":2},{"text":"How to create a custom icon font","hash":"how-to-create-a-custom-icon-font","id":3},{"text":"Tools","hash":"tools","id":4}]},"120":{"id":120,"text":"Figure 1. Scout apps run on desktops, tablets and mobile phones Scout applications are mobile capable, meaning that they can be used on portable touch devices like smartphones and tablets. This capability is based on 2 main parts: Responsive and Touch Capable Widgets Device Transformation Responsive design in context of a web application means that the design reacts to screen size changes. A Scout application does not use responsive design for the whole page, but many widgets itself may change the appearance when they don’t fit into screen. One example is the menu bar that stacks all menus which don’t fit into an ellipsis menu. Figure 2. Responsive menu bar Beside being responsive, the widgets may deal with touch devices as well. This means they are big enough to be used with the finger. And they don’t need a mouse, especially the right mouse button. One example is the tooltip of a form field which is reflected by an info icon on the right side of the field. Instead of hovering over the field the user can press that info icon to bring up the tooltip. This approach not only provides an indicator where tooltips are available, it also works for mouse and touch based devices. Figure 3. Touch friendly widgets Another widget that will react to changing sizes is the group box. Once a group box becomes smaller than its preferred width it will transform its internal fields. Example: For all internal fields the labelPosition will be set to 'top' to give the field more horizontal space. Figure 4. Responsive group box Those transformations are handled by scout.GroupBoxResponsiveHandler and managed by scout.ResponsiveManager. The manager decides when to switch to a responsive mode and back. If desired, the responsive transformations can be completely disabled by calling scout.responsiveManager.setActive(false). By default, all the main boxes will be responsive. In order to exclude a group box from the responsive transformations you could do the following: @Order(20) @ClassId(\"98af1bc6-2d62-4132-9953-55e08492f65f\") public class MyGroupBox extends AbstractGroupBox { @Override protected TriState getConfiguredResponsive() { return TriState.FALSE; } } The handler is called when the manager detects a changed responsive state to perform its transformations. There are three responsive modes, of which only the first two are supported in scout classic. Normal (e.g. width >= 500): Regular case, no transformations are applied. Condensed (e.g. 300 ⇐ width { CompactBean bean = new CompactBean(); bean.setTitle(\"custom title\"); bean.addContentLine(new CompactLine(\"label\", \"text\")); return bean; }); } } If the MobileDeviceTransformer is active, the responsive feature of the GroupBox will be disabled. Instead, some transformations will be applied like moving the label and status to top, reducing the column count to one, disabling cancel confirmation and more. Have a look at MobileDeviceTransformation and at MobileDeviceTransformer to learn more about it. Figure 9. Form on Mobile Since the transformers are plain Scout beans, you can easily replace them and adjust their behavior. To disable some transformations just get the configuration and disable the unwanted ones. @Replace public class CustomMobileDeviceTransformer extends MobileDeviceTransformer { @Override protected void initTransformationConfig() { super.initTransformationConfig(); getDeviceTransformationConfig().disableTransformation(MobileDeviceTransformation.MOVE_FIELD_LABEL_TO_TOP); } } Have a look at the class MobileDeviceTransformation to get a list of all available transformations. All these transformations are triggered by extensions to components like form fields or the desktop. These extensions are registered by DeviceTransformationPlatformListener. If you don’t want any of these transformers to be active you could simply replace that listener and do nothing. @Replace public class CustomDeviceTransformationPlatformListener extends DeviceTransformationPlatformListener { @Override public void stateChanged(PlatformEvent event) { // Do nothing to not register any extension so no transformation will happen } } The device transformers take care of global transformations which should be applied for most of the components. If you need to adapt a specific component you can do it at the component itself. Let’s say you want to hide a field if the application is running on a smart-phone, you could do the following. @Order(20) @ClassId(\"032f5ffb-bb1a-477a-95c8-f185e930a977\") public class MyField extends AbstractStringField { @Override protected void execInitField() { if (UserAgentUtility.isMobileDevice()) { setVisibleGranted(false); } } } Sometimes a transformation done by a device transformer is not desired, but you don’t want to turn it off globally. If that is the case you can disable that transformation for a specific form or form field. @Override protected void execInitField() { BEANS.get(IDeviceTransformationService.class).excludeFieldTransformation(this, MobileDeviceTransformation.REDUCE_GROUPBOX_COLUMNS_TO_ONE); } Or you can exclude a specific form or form field from all transformations. @Override protected void execInitField() { BEANS.get(IDeviceTransformationService.class).excludeField(this); } Once you have done your adjustments on the model and transformations, and you are still not pleased how your app looks, you still have the possibility to add some custom CSS. To do so, just add a CSS class to your component and define the rules in a Less file. Also have a look at the Java file CssClasses. Scout provides a few predefined css classes for some specific use cases. @Override protected void execInitField() { if (UserAgentUtility.isMobileDevice()) { addCssClass(\"mobile\"); } } For details on how to write the Less code please see Styling. If you just want to reduce some padding maybe it is sufficient to adjust the gaps of a group box. To do so just override the method getConfiguredBodyLayoutConfig of your group box and do the adjustments. @Override protected LogicalGridLayoutConfig getConfiguredBodyLayoutConfig() { return super.getConfiguredBodyLayoutConfig() .withVGap(0); } The class UserAgent is essential for the mobile support. It stores information about the running device like the used browser or OS. The user agent is available on the UI server as well as on the backend server and can be accessed using the static method UserAgent.get(). The class UserAgentUtility provides some useful helper methods to check which type of device is running, like if it’s a mobile phone, a tablet, or a desktop device. When creating a Scout application which should run on touch devices as well, the following tipps may help you. Focus on the essential. Even though most of the application should run fine on a mobile device, some parts may not make sense. Identify those parts and make them invisible using setVisibleGranted(false). The advantage of using setVisibleGranted over setVisible is that the model of the invisible components won’t be sent to the client at all, which might increase the performance a little. But remember: The users nowadays might expect every functionality to be available even on a mobile phone, so don’t take them away too much. Limit the usage of custom HTML. Custom HTML cannot be automatically transformed, so you need to do it by yourself. Example: You created a table with several columns using HTML. On a small screen this table will be too large, so you have to make sure that your table is responsive, or provide other HTML code when running on a mobile device. Don’t use too large values for gridH. GridH actually is the minimum grid height, so if you set gridH to 10 the field will always be at least 10 logical grid rows height. This may be too big on a mobile device. Use appropriate values for table column width. Tables are displayed the same way on a mobile phone as on the desktop device (unless compact is set to true), if the content is not fully visible the user can scroll. If you have tables with autoResizeColumns set to true, you should make sure that the column widths are set properly. Just check how the table looks on a small screen and adjust the values accordingly. Know the difference between small screens and touch capable. If you do checks against different device types, you should be aware that a touch device is not necessarily a small device. That means UserAgentUtility.isTouchDevice() may be true on a laptop as well, so use it with care. If you use filler fields for layouting purpose, make sure you use the official IPlaceholderField. Such filler fields normally waste space on a one column layout, so the mobile transformer will make them invisible.","title":"Mobile Support","component":"scout-docs","version":"23.1","name":"mobile","url":"/scout-docs/stable/technical-guide/user-interface/mobile.html","titles":[{"text":"Responsive and Touch Capable Widgets","hash":"responsive-and-touch-capable-widgets","id":1},{"text":"GroupBox","hash":"ResponsiveGroupBox","id":2},{"text":"Add a Custom Handler","hash":"add-a-custom-handler","id":3},{"text":"Device Transformation","hash":"device-transformation","id":4},{"text":"Compact Desktop","hash":"compact-desktop","id":5},{"text":"Adjusting Summary Cells","hash":"adjusting-summary-cells","id":6},{"text":"Compact Table","hash":"compact-table","id":7},{"text":"Form Transformation","hash":"form-transformation","id":8},{"text":"Disable Transformations","hash":"disable-transformations","id":9},{"text":"Adapt Specific Components","hash":"adapt-specific-components","id":10},{"text":"Optimize the Look","hash":"optimize-the-look","id":11},{"text":"User Agent","hash":"user-agent","id":12},{"text":"Best Practices","hash":"best-practices","id":13}]},"121":{"id":121,"text":"Several components support multiple dimensions for visibility or enabled flags. This means the component is only visible or enabled if all dimensions are set to true. This gives developers the flexibility to e.g. use a dimension for granting and one for the business logic. A total of 8 dimensions are available for a certain component type and attribute. This means you e.g. have a total of 8 dimensions for Form Field visibility in your application. And 8 dimensions for enabled-states of Actions. So the dimensions are not consumed by component instance but by component type. This means you have to be careful in defining new dimensions as all components of the same type share these dimensions. Some of these dimensions are already used internally. Refer to the implementation and JavaDoc of the component for details about how many dimensions are available for custom use. menu.setEnabled(false); (1) menu.setEnabledGranted(false); (2) menu.setVisible(false, IDimensions.VISIBLE_CUSTOM); (3) formField.setVisible(true, false, true, \"MyCustomDimension\"); (4) formField2.setVisible(true, true, true); (5) formField3.isEnabled(IDimensions.ENABLED_CUSTOM); (6) formField3.isEnabled(IDimensions.ENABLED); (7) formField3.isEnabled(); (8) formField3.isEnabledIncludingParents(); (9) 1 Disables the menu using the internal default dimension 2 Disables the menu using the internal granted dimension 3 Hides the menu with a third custom dimension 4 Form Fields also support the propagation of new values to children and parents. This sets the custom dimension of this field and all of its children to true. 5 This sets the internal default enabled dimension of this field and all of its parents and children to true. 6 Checks if the custom dimension is set to true 7 Checks if the internal default dimension is set to true 8 Checks if all dimensions of formField2 are true 9 Checks if all dimensions of formField2 and all dimensions of all parent Form Fields are enabled. In the example above the instance 'formField3' uses 4 dimensions for the enabled attribute: ENABLED_CUSTOM because it is explicitly used and the 3 dimensions that are used internally (ENABLED, ENABLED_GRANTED, ENABLED_SLAVE). Even though the instance 'formField2' makes no use of the custom dimension it is consumed for this instance as well because the dimensions do not exist by instance but by attribute (as explained above).","title":"Multiple Dimensions Support (Scout Classic)","component":"scout-docs","version":"23.1","name":"multi-dimensions","url":"/scout-docs/stable/technical-guide/user-interface/multi-dimensions.html","titles":[]},"122":{"id":122,"text":"As seen in the Creating a Widget, a widget may be created using scout.create. When using this function, the call is delegated to the ObjectFactory. The ObjectFactory is responsible to create and initialize a Scout object. A typical Scout object has an objectType and an init function. But actually any kind of object with a constructor function may be created. If you use a string based object type, objects are created using naming convention by default. This means when calling scout.create('scout.Table', model), the scout namespace is searched for a class called Table. Since scout is the default namespace, it may be omitted. So calling scout.create('Table', model) has the same effect. If there is such a class found, it will be instantiated and the init function called, if there is one. The model is passed to that init function. So instead of using scout.create you could also use the following code: Listing 1. Creating an object without the ObjectFactory import {Table} from '@eclipse-scout/core'; var table = new Table(); table.init(model); This will work fine, but you will lose the big benefit of the ObjectFactory: the ability to replace existing classes. So if you want to customize the default Table, you would likely extend that table and override some functions. In that case you need to make sure every time a table is created, your class is used instead of the default. To do that you have to register your class in the ObjectFactory with the objectType Table. If scout.create('Table') is called the object factory will check if there is a class registered for the type Table and, if yes, that class is used. Only if there is no registration found, the default approach using the naming convention is performed. In order to register you class, you need a file called objectFactories and add that to your JavaScript module (e.g. index.js). The content of that file may look as following: Listing 2. Adding a new object factory registration import {CustomTable} from './index'; import {scout} from '@eclipse-scout/core'; scout.addObjectFactories({ 'Table': () => new CustomTable() }); This will simply add a new factory for the type Table the the list of existing factories. From now on yourproject.CustomTable will be instantiated every time a Table should be created. This replacement also works if scout.create is used with class references (which is the recommended approach). So, scout.create('Table') as well as scout.create(Table) will return a new CustomTable.","title":"Object Factory","component":"scout-docs","version":"23.1","name":"object-factory","url":"/scout-docs/stable/technical-guide/user-interface/object-factory.html","titles":[]},"123":{"id":123,"text":"Beside JavaScript for business logic and for the models, every Scout JS app probably needs some CSS code at some point in time. If you are writing custom widgets, you need it for sure. But also if you are just using the given widgets you might have the need to adjust the look here and there. Scout uses LESS as CSS preprocessor. It has a lot of advantages to pure CSS: variables, mixins, functions, imports etc. If you use the default build infrastructure provided by Scout, you cannot only use LESS easily without getting a headache on how to integrate it in your build system, you get access to all the LESS constructs used by Scout itself. This means you can use variables for colors, icons and sizes, mixins for animations and to avoid browser specific prefixes. You can import whole Scout LESS files for your custom themes, and you get a lot of sample code in the Scout code base because Scout itself uses the same concepts. In order to get started you need a place to put all your LESS code. The recommendation is to create one LESS file for each widget. That means if your widget is called MyWidget.js you would create a file called MyWidget.less. Even if you adjust the look of an existing widget you can create a file called let’s say StringField.less and put the rules there. If you only have a few rules or non widget specific rules you can create a file called main.less and put them there. However, these are only recommendations, you can always do it as you like. The creation of these files won’t make them load automatically. You have to register them in your index file. This file should be put into your src/main/js folder and named index.less. Just include your new files using the LESS @import keyword. Listing 1. Include a LESS file @import \"style/colors\"; In addition to this index file you normally also have a theme file which will be used as entry point in your webpack.config.js and included in the index.html. The intention of the theme file is to group individual index files and make one file in order to load all rules at once within one request. Now that we have all the infrastructure set up, we can start adding some rules. As already said, you can use all the LESS variables from Scout. The variables can be found in the scout/style folder of the @eclipse-scout/core module. If you have a look at the file colors.less you find all the colors you can use or customize. Let’s say you want to change the background color of the header, you can redefine the variable @desktop-header-background-color. Listing 2. Changing the background color of the header @desktop-header-background-color: @palette-red-4; That’s it! As you can see, changing this variable not only changes the background color of the header, it also changes the background color of the view-buttons on the top left, because they are supposed to have the same color. You could do the same by using CSS rules, but you would have to write several selectors to achieve the same. Figure 1. Helloworld default and with a custom header background color In this example a color from the Scout color palette is used. You can also use a custom hex code instead of @palette-red-4 or define a custom color palette, if you want to use the same colors for different rules. Beside colors there are some other files in the style folder of the Scout module: animations.less, fonts.less, icons.less, mixins.less and sizes.less. All these files contain variables or mixins which are used by various Scout widgets and may be used by your project as well. In the above example to change the header background color, we adjusted a specific less variable to only change the header. As you may have noticed on the screenshot, the pencil on the top left, the title below and the text on the tile are still blue. This is expected, because they are not related to the header background color. If you want to change these colors as well, you could do it in the same way: Look for the LESS variables and adjust them. But you could also try to adjust the accent colors. Scout has a dedicated color palette for accent colors. Accent colors are used by many widgets, for titles, for links, for hover states etc. The default accent color of Scout is blue. So, instead of changing specific colors, you can try to change the accent color palette. For this example we use the slightly adjusted red palette, but you can use your own colors of course: @accent-color-0: @palette-red-0; @accent-color-1: @palette-red-1; @accent-color-2: @palette-red-2; @accent-color-3: @palette-red-4; @accent-color-4: @palette-red-5; @accent-color-5: darken(@palette-red-5, 10%); Figure 2. Accent color change Redefining a LESS variable is the simplest way of customizing. If you need more control you can always write a custom CSS rule. Keep in mind that these rules need to be more specific than the default CSS rules of Scout, otherwise they won’t be executed (see https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity for details). We cannot guarantee that your custom rules will still work when migrating to a newer Scout version, because changing only a small part of the rule might make it more specific so that your rule won’t work anymore. That only applies to custom rules which are supposed to change existing look or behavior. If you are writing a custom widget without overriding default Scout rules there shouldn’t be any problems regarding migration. Scout applications support styling via CSS/LESS themes. Scout comes with two themes by default: the default theme with blue colors and the dark theme with gray/black colors. Technically a theme has a name and a set of LESS files. In Scout Classic a theme is activated by calling the method AbstractDesktop#setTheme(String name). This causes the browser to reload the page and loads the CSS theme for that name, like myapp-theme.css for the default theme or myapp-theme-dark.css for the dark theme. The default theme is activated by passing a null value as name. In Scout JS you do the same thing by calling the method Desktop#setTheme(name). If you have multiple themes and you want to start with a defined theme by default, you can set a property in the config.properties file on the Scout UI server. In the following example the theme rainbow will be activated, which means the Scout application tries to load the CSS file myapp-theme-rainbow.css on start-up: config.properties scout.ui.theme=rainbow Note that Scout only provides an API to switch between themes. If the user of your Scout application should switch between various themes, your application must provide an UI element to do that. Scout provides no standard UI element for that. However, the Widgets apps for Scout Classic and Scout JS give you an idea of how you could implement that feature. You have two options to customize CSS styles in your Scout project: Change CSS properties (or LESS variables) by overriding styles from the default theme Provide your own theme with a unique name like rainbow If your Scout application should have only a single theme, option 1 is the way to go. If users should have the option to switch between various themes, you should go with option 2. In this chapter we will focus on the latter option. In order to understand Scout themes, take a look at the myapp-theme.less file which has been generated for your project by the Scout archetype. In the following examples we assume that the name of your project is myapp. Listing 3. myapp-theme.less @import \"~@eclipse-scout/core/src/index\"; @import \"./src/main/js/index\"; As you can see the theme bundles various LESS modules. Line 1 imports the LESS module from the Scout core. This module contains style definitions for all UI elements provided by Scout. Line 2 imports the LESS module from your application. This module contains style definitions for custom widgets used in your project. The build creates a single CSS file myapp-theme.css, which is used as theme for your project. We recommend making an index file for each Scout module. These index files import each single LESS file which belongs to that module. This excerpt from Scouts index.less shows how we import all distinct LESS files required to style the desktop or the LESS variable definitions for all colors used in the stylesheet: Listing 4. Excerpt from Scout core index.less @import \"desktop/Desktop\"; @import \"desktop/DesktopLogo\"; @import \"desktop/DesktopDense\"; @import \"desktop/bench/DesktopBench\"; @import \"desktop/bench/BenchColumn\"; @import \"style/colors\"; How does the dark theme for your Scout application look like? Like for the default theme, we create a LESS file myapp-theme-dark.less, but this time we import the index-dark modules. Listing 5. myapp-theme-dark.less @import \"~@eclipse-scout/core/src/index-dark\"; @import \"./src/main/js/index-dark\"; Let’s take a look at the details in the index-dark.less file from the Scout core: Listing 6. index-dark.less @import \"index\"; @import \"style/colors-dark\"; @import \"style/sizes-dark\"; As you see, the first thing we do on line 1 is to import the default theme 'index'. This means the dark theme inherits all style definitions from the default theme. The dark theme only extends new additional style and LESS variables or overrides styles or LESS variables from the default theme. This is what happens on line 2: colors-dark.less overrides some variables defined in the colors.less file from the default theme, like the gray colors: Listing 7. Excerpt from Scout core index-dark.less @palette-gray-0: @palette-white; @palette-gray-1: #F5F5F5; @palette-gray-2: #E9EBEB; @palette-gray-3: #BFC2C3; @palette-gray-4: #A7ACAD; @palette-gray-5: #7E8588; Scout uses Webpack to run the LESS parser and build the CSS themes. Your application needs at least one default theme. The Scout archetype adds this theme to your webpack.config.js. If your application needs to work with multiple themes you must add them to the list of config entries. In this example we add the two themes dark and rainbow: Listing 8. Excerpt from webpack.config.js config.entry = { 'bsicrm': './src/main/js/myapp.js', 'login': './src/main/js/login.js', 'logout': './src/main/js/logout.js', 'myapp-theme': './src/main/js/myapp-theme.less', 'myapp-theme-dark': './src/main/js/myapp-theme-dark.less', 'myapp-theme-rainbow': './src/main/js/myapp-theme-rainbow.less' }; When you use a Scout UI server as backend for your Scout JS application the class WebResourceLoader is responsible for supplying the requested CSS theme file to the browser. This class uses the current theme name as provided by the UiThemeHelper, which checks if a theme name is set by a cookie, the HTTP session or by an HTTP request parameter. These are good starting points for debugging, in case something unexpected happens while developing themes.","title":"Styling","component":"scout-docs","version":"23.1","name":"styling","url":"/scout-docs/stable/technical-guide/user-interface/styling.html","titles":[{"text":"Setup Less Files","hash":"setup-less-files","id":1},{"text":"Basic Customization","hash":"basic-customization","id":2},{"text":"Accent Colors","hash":"accent-colors","id":3},{"text":"Advanced Customization","hash":"advanced-customization","id":4},{"text":"Themes","hash":"themes","id":5},{"text":"Build and Runtime","hash":"build-and-runtime","id":6}]},"124":{"id":124,"text":"Eclipse Scout is written in TypeScript and therefore comes with a fully typed TypeScript API. This gives you many benefits: More efficient development Typing allows your IDE to better assist with code completion during development and to only suggest methods and properties for an object that actually exists. Figure 1. Better Code Completion Easier entry With better code completion and clear method signatures, a not-so-experienced JavaScript developer can more easily get up to speed and understand the relationships in the code. More confidence when updating If a used API has changed, the code turns red and the build fails. More confidence during development Incorrect use of an API or code in general is detected at an early stage. The developer gets more security that his code will work. In addition to the TypeScript API, Scout also tries to make it as easy as possible for you so you can write TypeScript yourself in your project. This includes: An enhanced build stack that can transpile TypeScript code to JavaScript. An improved Scout SDK so IntelliJ can handle Scout code written in TypeScript. Predefined TypeScript configuration and ESLint rules for TypeScript. To use TypeScript in your Project, you need to create a tsconfig.json that extends from the Scout tsconfig.json. Follow the instructions at @eclipse-scout/tsconfig to create one. Now, just create a TypeScript file (a new file ending with .ts) and start writing TypeScript! The build automatically processes these files, so you don’t have to adjust the build unless you are writing a JavaScript library. If that is the case, see technical-guide:user-interface/build-stack.adoc#authoring-libraries. To enable code linting for TypeScript files just ensure your ESLint configuration is correctly setup as described in technical-guide:user-interface/build-stack.adoc#eslint. The Scout default configuration can handle JavaScript as well as TypeScript code, so there is no separate configuration needed. Note: if you are using third party libraries, we suggest you check if they include types. Some libraries contain the types directly in the package, for others the types are often available as a separate npm module from DefinitelyTyped which you need to add as devDependency to your package.json. If there are no types available at all, you will have to provide at least some types for the library by yourself in order to work efficiently with it. To get started with TypeScript or to learn more about it, we recommend visiting https://www.typescriptlang.org/. If you would like to migrate your existing code base to TypeScript, you can use the Scout Migration Tool for an initial automatic migration. But be aware, that the majority of the work, which is adding types, will need to be done manually. Migrating to TypeScript is not required, you can still use JavaScript or write only new code with TypeScript. However, if you are a library developer, we recommend migrating to TypeScript to make the usage of the library easier. Detailed instruction for the migration can be found here: @eclipse-scout/migrate","title":"TypeScript Support","component":"scout-docs","version":"23.1","name":"typescript","url":"/scout-docs/stable/technical-guide/user-interface/typescript.html","titles":[{"text":"Project Setup for TypeScript","hash":"project-setup-for-typescript","id":1},{"text":"TypeScript Migration","hash":"typescript-migration","id":2}]},"125":{"id":125,"text":"The TEXTS class is a convenience class to access the default Text Provider Service used for the localization of the texts in the user interface. Listing 1. Text lookup TEXTS.get(\"persons\"); Its also possible to use some parameters: Listing 2. Text lookup String name = \"Bob\"; int age = 13; TEXTS.get(\"NameWithAge\", name, age); In this case, some placeholders for the parameters are needed in the translated text: Listing 3. Text lookup NameWithAge={0} is {1} years old; Scout uses the java.util.ResourceBundle mechanism for native language support. So whatever language files you have in your .shared/resources/texts/*.properties are taken as translation base. Example setup: .shared/resources/texts/Texts.properties .shared/resources/texts/Texts_fr.properties If your application starts with the -vmargs -Duser.language=fr or eclipse.exe -nl=fr the translations in Texts_fr.properties are considered. In case of any other user language the translations in Texts.properties are considered. It is possible to edit these files in the Eclipse Scout SDK with the NLS Editor. Text Provider Services are services responsible to provide localization for texts in the user interface. A typical application contains a such service contributed by the Shared Project. implements: ITextProviderService extends: AbstractDynamicNlsTextProviderService (default, translations are stored in properties files) Using Text Provider Services developers can decide to store the translations in a custom container like a database or XML files. Furthermore using TextProviderServices it is very easy to overwrite any translated text in the application (also texts used in Scout itself) using the service ranking. The mechanism is aligned with the icon retrieval which is also managed using Icon Provider Services. By default the internationalization mechanism relies on .properties files using a reference implementation of the TextProviderServices: Service extending the AbstractDynamicNlsTextProviderService class. A Text Provider Service working with the default implementation need to define where the properties files are located. This is realized by overriding the getter getDynamicNlsBaseName(). Here an example: Listing 4. Text lookup @Override protected String getDynamicNlsBaseName() { return \"resources.texts.Texts\"; } If configured like this, it means that the .properties files will be located in the same plug-in at the location: /resources/texts/Texts.properties (default) /resources/texts/Texts_fr.properties (french) /resources/texts/Texts_de.properties (german) …​ (additional languages) If you decide to store your translated texts in .properties files, you migth want to use the NLS Editor to edit them. You need to respect the format defined by the Java Properties class. In particular the encoding of a .properties file is ISO-8859-1 (also known as Latin-1). All non-Latin-1 characters must be encoded. Examples: 'à' => \"\\u00E0\" 'ç' => \"\\u00E7\" 'ß' => \"\\u00DF\" The encoding is the \"Unicode escape characters\": \\uHHHH where HHHH is a hexadecimal id of the character in the Unicode character table. Read more on the .properties File on wikipedia. The NlsFileWatcher observes changes in text property files. If a change in a text property file occurs, the nls resource bundle cache will be invalidated. This means that there is no need to restart the server when working on texts and translations. The file watcher is only active if scout.devMode=true is set and can be disabled with scout.dev.texts.fileWatcherEnabled=false. By default, the file watcher is enabled in development mode.","title":"Texts","component":"scout-docs","version":"23.1","name":"texts","url":"/scout-docs/stable/technical-guide/user-interface/texts.html","titles":[{"text":"Text properties files","hash":"text-properties-files","id":1},{"text":"Text Provider Service","hash":"text-provider-service","id":2},{"text":"Localization using .properties files","hash":"localization-using-properties-files","id":3},{"text":"File Watcher","hash":"file-watcher","id":4}]},"126":{"id":126,"text":"A value field extends the form field by the ability to store a value. Typical form fields are StringField, NumberField, DateField or SmartField. All these fields provide a value which is accessible using field.value and may be set using field.setValue(value). The value always has the target data type of the field. When using a StringField the type is string, when using a NumberField the type is number, when using a DateField the type is date. This means you don’t have to care about how to parse the value from the user input, this will be done by the field for you. The field also validates the value, meaning if the user entered an invalid value, an error is shown. Furthermore, if you already have the value and want to show it in the field, you don’t have to format the value by yourself. This process of parsing, validating and formatting is provided by every value field. The responsible functions are parseValue, validateValue and formatValue. If a user enters text, it will be parsed to get the value with the correct type. The value will then be validated to ensure it is allowed to enter that specific value. Afterwards it will be formatted again to make sure the input looks as expected (e.g. if the user enters 2 it may be formatted to 2.0). If you set the vaue programmatically using setValue it is expected that the value already has the correct type, this means parse won’t be executed. But the value will be validated, formatted and eventually displayed in the field. Even though the fields already provide a default implementation of this functionality, you may want to extend or replace it. For that purpose you may set a custom parser and formatter or one or more validators. Typically, you don’t have to add a custom parser or formatter for a NumberField or DateField. They work with a DecimalFormat or DateFormat which means you can specify a pattern how the number or date should be represented. By default, it uses the pattern of the current locale, so you don’t even have to specify anything. For a StringField on the other hand, adding a custom parser or formatter could make sense. Let’s say you want to group the text into 4 digit blocks, so that if the user inputs 1111222233334444 it should be converted to 1111-2222-3333-4444. This could be done using the following formatter. Listing 1. Example of a formatter function formatter(value, defaultFormatter) { var displayText = defaultFormatter(value); if (!displayText) { return displayText; } return displayText.match(/.{4}/g).join('-'); }; Keep in mind that you should call the default formatter first unless you want to replace it completely. To make your formatter active, just use the corresponding setter. Listing 2. Setting the formatter field.setFormatter(formatter); Formatting the value is most of the time only half the job. You probably want to set a parser as well, so that if the user enters the text with the dashes it will be converted to a string without dashes. Listing 3. Example of a parser function parser(displayText, defaultParser) { if (displayText) { return displayText.replace(/-/g, ''); } return defaultParser(displayText); }; Use the corresponding setter to activate the parser. Listing 4. Setting the parser field.setParser(parser); The purpose of a validator is to only allow valid values. This mostly depends on your business rules, this is why the default validators don’t do a whole lot of things. See the following example of a validator used by a DateField. Listing 5. Example of a validator import {dates} from '@eclipse-scout/core'; function(value) { if (dates.isSameDay(value, new Date())) { throw 'You are not allowed to select the current date'; } return value; }; This validator ensures that the user may not enter the current date. If he does, en error status will be shown on the right side of the date field saying 'You are not allowed to select the current date'. Figure 1. Validation error of a date field As you can see in the example, in order to mark a value as invalid just throw the error message you want to show to the user. You could also throw an error or a Status object. In that case a generic error message will be displayed. In order to activate your validator, you can either call setValidator to replace the existing validator. In that case you should consider calling the default validator first, like you did it for the formatter or parser. Or you can use addValidator which adds the validator to the list of validators of the field. Listing 6. Adding a validator field.addValidator(validator); Compared to parse and format you may have multiple validators. When the value is validated, every validator is called and has to agree. If one validation fails, the value is not accepted. This should make it easier to reuse existing validators or separate your validation into tiny validators according to your business rules. If you now ask yourself why this is not possible for parsing and formatting, consider the following: Validate takes a value and returns a value, the data type is the same for input and output. Parse takes a text and creates a value, format takes a value and creates a text. The data type is likely not the same (besides for the StringField). If you had multiple parsers, the output of the previous parser would be the input of the next one, so depending on the index of your parser you would either get the text or the already parsed value as input. Confusing, isn’t it? So in order to keep it simple, there is only one parser and only one formatter for each field.","title":"Value Field","component":"scout-docs","version":"23.1","name":"value-field","url":"/scout-docs/stable/technical-guide/user-interface/value-field.html","titles":[{"text":"Parser, Validator, Formatter","hash":"parser-validator-formatter","id":1},{"text":"Custom Parser and Formatter","hash":"custom-parser-and-formatter","id":2},{"text":"Custom Validator","hash":"custom-validator","id":3}]},"127":{"id":127,"text":"This chapter describes some of the widgets available in Scout. At the moment most of the widgets are not described yet, but they are already available at the Scout JS Widgets Application. With this application you can try the widgets out and get a feel of what they are capable of and how they are used. A Smart Field provides a list of proposals the user can choose from to pick one single value. In contrast to a common drop down list, the Smart Field provides search as you type which is especially useful for large lists. A very common case is to call a REST service and lookup the proposals while typing. This combination of a drop down list and a search field is the reason why it is called smart. Figure 1. Smart Field If you don’t need the search as you type feature, you can switch it off by setting the property displayHint to dropdown so that it behaves like a regular drop down list. This means the user cannot filter the values anymore using key board and can choose the values only by mouse / touch. Figure 2. Smart Field with display style set to 'dropdown' Another type of Smart Field is the so called Proposal Field. A Proposal Field does not require the user to choose from the available proposals but allows him to enter custom text as well. Figure 3. Proposal Field In order to provide the proposals you can either use a Lookup Call or a Code Type. In a Scout JS application you can use SmartFields like in a classic Scout application. Any REST service can be used to provide results for a SmartField lookup call. However, the SmartField expects the result to have a defined structure. If the REST service API is in your hands, you can simply return a JSON response with the right structure. This means less work to do for you in the JavaScript layer, because you don’t have to transform the response to a structure the SmartField can process. If you must use a service which API you cannot change, you have no other choice than doing some kind of transformation in JavaScript. Here’s how the response for a lookup call should look like in order to be processed by the SmartField: { \"queryBy\": \"ALL|TEXT|KEY|REC\", # lookup type, as requested by the client \"text\": \"foo\", # [optional] only set when queryBy=TEXT, contains the requested search text \"key\": \"123\", # [optional] only set when queryBy=KEY, contains the key of the requested lookup row \"rec\": \"234\", # [optional] only set when queryBy=REC, contains the key of the requested parent lookup row \"lookupRows\": [ # the result set of this lookup, contains 0-n lookup rows { # key and text are mandatory properties, all other properties are optional \"key\": \"unique lookup row key\", \"text\": \"lookup row text\", \"iconId\": \"person.svg\", \"tooltipText\": \"foo\", \"enabled\": false, \"active\": false, \"cssClass\": \"special-format\", \"backgroundColor\": \"#cc00ee\", # deprecated, use cssClass instead \"foregroundColor\": \"#333333\", # deprecated, use cssClass instead \"font\": \"Dialog-PLAIN-12\", # deprecated, use cssClass instead \"parentKey\": \"234\", # only used for hierarchical smart fields \"additionalTableRowData\": [ # only used for table like lookup results with multiple columns # contains 0-n objects with arbitrary properties { \"foo\": \"bar\" } ] } ], \"exception\": \"something went wrong\" # [optional] only set when an error occurred during the lookup request } Here’s how the request for a Scout JS SmartField lookup call could look like. Your request to a REST API can look completely different. This example just gives you an idea of how to implement your own LookupCall. { \"type\": \"lookupByAll|Text|Key|Rec\", # lookup type \"text\": \"foo\", # [optional] only set when type=lookupByText, contains the requested search text \"key\": \"123\", # [optional] only set when type=lookupByKey, contains the key of the requested lookup row \"rec\": \"234\", # [optional] only set when type=lookupByRec, contains the key of the requested parent lookup } A Chart visualizes data in several ways like bars, lines or a pie. The Chart has two main properties, a data and a config object. Imagine you are an ice cream shop, and you want to display how many scoops you sold in which month. The data object holds the data about the sold scoops, their flavours and the date you sold them. The config object defines how your chart should be styled, e.g. it should be a bar chart and the axes should get an extra label like 'month' and 'flavour'. Depending on the type that is set on the config object the Chart picks a renderer to display the chart. The renderer is now creating a - or -element and renders the chart. Each time you update the data or the config it is rerendered. Most of the charts are rendered using chart.js and the config object is handed over so you can use all properties chart.js provides to style your chart. In addition to the chart.js-properties we added custom properties, some of them only have an impact on certain charts: options.autoColor Whether the colors should be computed automatically. options.colorScheme A specific color scheme for the colors, also inverted ones are possible for dark backgrounds. options.transparent Whether the chart should be transparent or opaque. options.maxSegments Max. number of segments for radial charts like pie, doughnut, radar, polar area. options.clickable Whether a chart is clickable. options.checkable Whether a chart is checkable. options.otherSegmentClickable Whether the consolidated others segment is clickable. options.plugins.legend.clickable Whether the legend is clickable. options.xLabelMap and options.yLabelMap Label mapping for discrete values. options.handleResize Whether the chart should handle resizing itself (not necessary if the containers size is updated). options.numberFormatter A custom number formatter, e.g. 1000000 → 1 Mio. €. options.reformatLabels Whether the data labels should be reformatted. It is assumed that data labels (incl. numeric labels) are correctly formatted. If one wants to have the data labels formatted using the number formatter, this flag can be used. Consider a bar chart and the x-axis displays the years 2010-2020, these labels should not be reformatted. However, if the x-axis displays the prices 250, 500, 750 and 1000, these labels should be reformatted to 250 €, 500 €, 750 € and 1.000 €. options.plugins.tooltip.cssClass Custom css class for additional styling of the tooltip Bubble: options.bubble.sizeOfLargestBubble The size to which the largest bubble is scaled. options.bubble.minBubbleSize Min. size of a bubble. Fulfillment: options.fulfillment.startValue Where the animation should start. Salesfunnel: options.salesfunnel.normalized Defines if the bars should be rendered smaller from top to bottom or if they get a size according to their values. options.salesfunnel.calcConversionRate Whether the conversion rate should be rendered. Speedo: options.speedo.greenAreaPosition Define where the green area is located. Venn: options.venn.numberOfCircles Between 1 and 3. The colors used for grid lines, axes, etc. and the auto colors for datasets can be overridden using CSS. For a more detailed example see How to Create a Chart for Scout JS resp. How to Create a Chart for Scout Classic The widgets Table.js, Tree.js, TileGrid.js and TileAccordion.js share a common filter API which includes a filter field. This filter field is enabled by default and can be turned off using the property textFilterEnabled. Figure 4. Filter field This filter field will filter the rows, nodes or tiles by their display text. This is simple for rows and nodes but quite complicated for tiles due to the large number of different types of tiles. Therefore, it is possible to provide a strategy to the TileGrid.js and TileAccordion.js how to create a text filter for the tile type used in this case and how to update the text this filter accepts. Consider a tile CustomTile with a property relevantTextForFilter. A filter for this tile type might look like this: import {objects, strings} from '@eclipse-scout/core'; class CustomTileFilter { constructor() { this.acceptedText = null; } setAcceptedText(acceptedText) { acceptedText = (acceptedText || '').trim().toLowerCase(); if (objects.equals(this.acceptedText, acceptedText)) { return false; } this.acceptedText = acceptedText; return true; } accept(tile) { if (strings.empty(this.acceptedText)) { return true; } let filterText = strings.toLowerCase(tile.relevantTextForFilter); if (strings.empty(filterText)) { return false; } return filterText.indexOf(this.acceptedText) > -1; } } This CustomTileFilter is now passed to a TileGrid via tileGrid.createTextFilter = () => scout.create(CustomTileFilter); tileGrid.updateTextFilterText = (filter, text) => filter.setAcceptedText(text); The common filter API which Table.js, Tree.js, TileGrid.js and TileAccordion.js share can also be implemented by all other widgets. A minimal example of a widget implementing the filter API looks like this class FilterWidget extends Widget { constructor() { super(); this.elements = []; this.filters = []; this.textFilterEnabled = true; this.filterSupport = this._createFilterSupport(); this.filteredElementsDirty = false; } _init(model) { super._init(model); this.setElements(this.elements); this.setFilters(this.filters); } _createKeyStrokeContext() { return new KeyStrokeContext(); } _render() { this.$container = this.$parent.appendDiv(); this.htmlComp = HtmlComponent.install(this.$container, this.session); } _renderProperties() { super._renderProperties(); this._renderTextFilterEnabled(); } _remove() { this.filterSupport.remove(); super._remove(); } setElements(elements) { this.setProperty('elements', elements); this.filter(); } setTextFilterEnabled(textFilterEnabled) { this.setProperty('textFilterEnabled', textFilterEnabled); } _renderTextFilterEnabled() { this.filterSupport.renderFilterField(); } isTextFilterFieldVisible() { return this.textFilterEnabled; } /** * @returns {FilterSupport} */ _createFilterSupport() { return new FilterSupport({ widget: this, $container: () => this.$container, getElementsForFiltering: () => this.elements, getElementText: element => element.text }); } addFilter(filter, applyFilter = true) { this.filterSupport.addFilter(filter, applyFilter); } removeFilter(filter, applyFilter = true) { this.filterSupport.removeFilter(filter, applyFilter); } setFilters(filters, applyFilter = true) { this.filterSupport.setFilters(filters, applyFilter); } filter() { this.filterSupport.filter(); } updateFilteredElements(result, opts) { this.filteredElementsDirty = false; } } class Element { constructor() { this.text = null; this.filterAccepted = true; } setFilterAccepted(filterAccepted) { this.filterAccepted = filterAccepted; } } The widget creates a FilterSupport and passes all filter-related calls to this object. This FilterSupport manages the filters and the filter field. It only needs a small amount of information from the widget: widget Widget that created the support $container jQuery element that will be used for the visualization. It may be a function to resolve the container later. If this property is not set the $container of the widget is used by default. getElementsForFiltering Get all elements to which the filters should be applied. getElementText Get text of an element. There are several other options that can be passed to the FilterSupport, e.g. a strategy to create a custom text filter. For a complete list of the options please see the JS-Doc of the FilterSupport. The methods addFilter(filter, applyFilter = true), removeFilter(filter, applyFilter = true) and setFilters(filters, applyFilter = true) of the FilterSupport work with filter objects containing an accept-function and accept-functions directly. These methods will check if the list of filters really changed and then apply the new filters if applyFilter is set to true. The filters are stored in the widgets filters property. The widget needs to implement a updateFilteredElements(result, opts) method, which is called after the filters were applied if the list of filtered elements changed. Before this method is called the widgets filteredElementsDirty is set to false and the values passed are result An object containing the newlyHidden and newlyShown elements. opts An object containing additional information, e.g. the text from the text filter. The elements that are filtered needs to have a setFilterAccepted(filterAccepted)-method which is used by the FilterSupport to indicate whether this element is accepted by the filters or not. In order to use the filter field the widget needs an isTextFilterFieldVisible()-method and a KeyStrokeContext. The isTextFilterFieldVisible()-method is used to determine whether the filter field needs to be added to or removed from the $container when filterSupport.renderFilterField() is called. The KeyStrokeContext is needed to register KeyStrokes that move the focus towards the filter field while typing. A menu type provides a way to control the visibility of a menu for common use cases. For example: a menu should be displayed only if an item is selected or a value present. Menu types are context specific and interpreted by the menu container (e.g. by a table or value field). Please refer to the respective container for the available menu types and their functions. The ValueField support the menu types ValueField.MenuTypes.Null and ValueField.MenuTypes.NotNull. This means that the ValueField will only display menus with ValueField.MenuTypes.Null if the value is null or those with ValueField.MenuTypes.NotNull if the value is set. Menus added to a ValueField that need to be visible all the time do not need to specify all possible menu types. The ValueField will treat a menu without menu types as if it had set all menu types and therefore will always display it. import {Menu, ValueField} from '@eclipse-scout/core'; [ { id: 'AlwaysVisibleMenu', text: 'Always visible', objectType: Menu }, { id: 'VisibleIfNullMenu', text: 'Visible if value is null', objectType: Menu, menuTypes: [ ValueField.MenuTypes.Null ] } ] The ImageField supports the menu types ImageField.MenuTypes.ImageUrl and ImageField.MenuTypes.Null.","title":"Widget Reference","component":"scout-docs","version":"23.1","name":"widget-reference","url":"/scout-docs/stable/technical-guide/user-interface/widget-reference.html","titles":[{"text":"Smart Field","hash":"smart-field","id":1},{"text":"Chart","hash":"chart","id":2},{"text":"Filter Field","hash":"filter-field","id":3},{"text":"MenuTypes","hash":"menu-types","id":4},{"text":"ValueField","hash":"valuefield","id":5},{"text":"ImageField","hash":"imagefield","id":6}]},"128":{"id":128,"text":"A widget is a component which may be rendered. It may be simple like a label, or more complex like a tree or table. A form is a widget and a form field, too. A widget contains the model, which represents the state of the widget. In a Scout Classic application, that model will be sent from the UI server to the browser and the Scout UI will use that model to create the widget. In a Scout JS app, the model may be provided using JSON or directly with JavaScript. Every widget has a lifecycle. After a widget is instantiated, it has to be initialized using init. If you want to display it, you have to call the render method. If you want to remove it from the DOM, call the remove method. Removing a widget is not the same as destroying it. You can still use it, you can for example change some properties and then render it again. If it is really not needed anymore, the destroy method is called (typically by Scout itself). So you see the widget actually has 3 important states: initialized rendered destroyed The big advantage of this concept is that the model of the widget may be changed any time, even if the widget is not rendered. This means you can prepare a widget like a form, prepare all its child widgets like the form fields, and then render them at once. If you want to hide the form, just remove it. It won’t be displayed anymore, but you can still modify it, like changing the label of a field or adding rows to a table. The next time it is rendered the changes will be reflected. If you do such a modification when it is rendered, it will be reflected immediately. Destroying a widget means it will detach itself from the parent and destroy all its children. Typically this is done by Scout itself e.g. when closing a form. If you want to destroy a widget yourself, it is recommended to do that by deleting it in its owner or parent (e.g. a GroupBox has a method deleteField which will destroy the field if the GroupBox is its owner). If you have attached listeners to other widgets at initialization time, now is the time to detach them. After a widget is destroyed it cannot be used anymore. Every attempt will result in a Widget is destroyed error. A widget may be created using the constructor function or scout.create. Best practice is to always use scout.create which gives you two benefits: You don’t have to call init by yourself. The widget may be extended (see Object Factory for details). The following example creates a StringField. Listing 1. Creating a string field import {scout, StringField} from '@eclipse-scout/core'; let field = scout.create(StringField, { parent: groupBox, label: 'hello', value: 'world' }); The first parameter is the object type. Typically, it is a class reference pointing to the widget you want to create. When using a class reference, the return value will be typed, so the IDE can assist you with code completion. For this reason, this syntax is recommended. The object type can also be a string, like the name of the class. Listing 2. Creating a string field by string based object type let field = scout.create('StringField', { parent: groupBox, label: 'hello', value: 'world' }); In that case, the ObjectFactory will look for the class in the namespace object, which is put on the window. StringField belongs to the scout namespace which is the default and can therefore be omitted. If the string field belonged to another name space called mynamespace, you would have to write the following: Listing 3. Creating a field considering the name space scout.create('mynamespace.StringField', {}) The second parameter of scout.create is the model. The model is the specification for your widget. In case of the StringField you can specify properties like the label, the max length, whether it is enabled and visible and more. If you don’t specify them, the defaults are used. The only needed property is the parent. To get a list of all available StringField properties, have a look at the interface StringFieldModel. Such a model definition is available for every widget. Just add the suffix Model to the widget name and you’ll find it. Figure 1. Widget Model Definition Every widget needs a parent. The parent is responsible to render (and remove) its children. In the example above, the parent is a group box. This group box has a property called fields. If the group box is rendered, it will render its fields too. You don’t need a group box to render the string field, you could render it directly onto the desktop. But if you want to use a form, you need a group box and create the form, group box and the field. Doing this programmatically, meaning creating each widget separately using scout.create, is time consuming, that is why we suggest to use the declarative approach. Have a look at the above example again. The second parameter, the model, defines some properties of the string field. This actually already is the declarative approach, because you could also set each property manually after creating the string field using the according methods. In order to create a form, we need to specify multiple widgets, respectively a widget hierarchy, at once. The following example defines a form with a group box and a string field. Listing 4. A form model defined declaratively import {GroupBox, StringField} from '@eclipse-scout/core'; export default { title: 'My first form!', rootGroupBox: { id: 'MainBox', objectType: GroupBox, fields: [ { id: 'MyStringField', objectType: StringField, label: 'hello', value: 'world' } ] } } To keep things nice and clean we separate the model from the code by putting this description of the form in a separate file called MyFormModel.js. Typically, you would create a file called MyForm.js as well, which contains the logic to interact with the fields. But since we just want to open the form it is not necessary. Instead, you can use the following code to create the form: import {Form, scout} from '@eclipse-scout/core'; import model from './MyFormModel'; let form = scout.create(Form, $.extend({parent: desktop}, model)); Now you can open the form using form.open() and it will look like this: Figure 2. First form As soon as you would like to add some code that interacts with the fields or maybe just want to not always load the model manually when creating the form, you should create a file called MyForm.js. The content of that file would be a class MyForm that extends the Form from Scout and a method called _jsonModel that returns our model. import {Form} from '@eclipse-scout/core'; import model from './MyFormModel'; export default class MyForm extends Form { _jsonModel() { return model; } } Creating the form is now possible using the following code. let form = scout.create(MyForm, {parent: desktop}); In previous Scout versions, the model was defined in a JSON file. Even though it is still possible, it is not recommended anymore, because writing the model using JavaScript is much more convenient. One advantage is, that you can use constants the same way as in your regular JavaScript code. import {FormField} from '@eclipse-scout/core'; export default { ... labelPosition: FormField.LabelPosition.TOP } If you use a JSON based model, you cannot reference Scout’s JavaScript enums/constants, and you’d have to write the following to assign the constant value: { \"labelPosition\": 2 } Obviously this makes the JSON code harder to read and understand and the developer has to lookup the enum/constant definition first. This is where the ${const:NAME} tag comes to help. A widget can define a list of properties that can be used with the const-tag. The widget defines in which enum/constant the name provided by the tag is resolved. Using the const-tag, the JSON example now looks like this: { \"labelPosition\": \"${const:ON_FIELD}\" } When you want to provide const-tag support for a custom widget, you need to call scout.Widget#resolveConsts in the _init function of your widget and for each supported property specify the property name and the object that contains the enum/constant definition. In the example from the previous chapter we have seen how to create a widget, in that specific case we created a form. Typically, it is not sufficient to just create a form, you most likely want to interact with the fields, like reading the values the user entered. In order to do that you need access to the fields. The easiest way is to use the IDs specified in the JSON. Let’s have a look at our example form again: export default { title: 'My first form!', rootGroupBox: { id: 'MainBox', objectType: GroupBox, fields: [ { id: 'MyStringField', objectType: StringField, label: 'hello', value: 'world' } ] } } In this example we have 3 widgets: the form, the root group box and a string field. These widgets are linked to each other which enables us to find the string field starting from the form. This can be done by using the following command: let stringField = form.widget('MyStringField'); Now you can read its value, change properties, add event handlers and so on. The result of the widget function to find a widget is a generic Widget, so it is not possible to call a method of a specific widget without casting (at least with TypeScript). To do the type casting, you can either specify the return type directly at the time of usage. Listing 5. Using the second parameter import {Menu} from '@eclipse-scout/core'; let menu = this.widget('YourId', Menu); Listing 6. Cast manually (TypeScript) import {Menu} from '@eclipse-scout/core'; let menu = this.widget('YourId') as Menu; Or you can use widget maps. A widget map is a type that maps the ids of the widgets to their object type. This allows TypeScript to determine the return type automatically. Figure 3. Typed widget function Scout SDK takes care of creating the widget maps, so you don’t have to write them manually. But there is one precondition: your model has to be in a TypeScript file. Nevertheless, here is how you would do it manually for our example form from above. Create a type called 'MyFormWidgetMap' in the file 'MyFormModel.ts' Link it to the form by re declaring the type of widgetMap. Listing 7. Create Widget Map export type MyFormWidgetMap = { 'MainBox': GroupBox; 'MyStringField': StringField; } Listing 8. Link Widget Map import {Form} from '@eclipse-scout/core'; import {MyFormWidgetMap} from './MyFormModel'; export class MyForm extends Form { declare widgetMap: MyFormWidgetMap; } If you’re using JavaScript for your form, you can use JSDoc to link the widgetMap: Listing 9. Link Widget Map in JavaScript import {Form} from '@eclipse-scout/core'; import {MyFormWidgetMap} from './MyFormModel'; export default class MyForm extends Form { constructor() { super(); /** @type MyFormWidgetMap */ this.widgetMap = null; } } As seen before, every widget has a model representing its state. This model is written onto the widget at the time it is being instantiated. The properties of that model are now available as properties of the widget. So in order to access such a property, just call widget.yourProperty. If you want to modify the property, just call widget.setYourProperty(value). Listing 10. Accessing and modifying a property import {scout, StringField} from '@eclipse-scout/core'; var field = scout.create(StringField, { parent: parent, labelVisible: false }); console.log(field.labelVisible); // prints false field.setLabelVisible(true); console.log(field.labelVisible); // prints true It is important to always use the setter to modify a property, because calling it does not just change the value. Instead it will call the method setProperty(propertyName, value) which does the following: It will check if the property has changed at all. If the value is still the same, nothing happens. To compare the values objects.equals is used, which uses === to compare and if that returns false, uses the equals methods of the given objects, if available. If the values are not equal, the model is updated using the method _setProperty (notice the _). Beside setting the value it also notifies every listener about the property change. So if another widget is interested in that property it may attach a listener and will be informed on every property change (see also the Events for details). In order to reflect the property change in the UI, the _render method is called, if available. The name of this method depends on the property name, it always starts with _render and ends with the property name. Example: _renderLabelVisible. If the widget does not implement such a method, nothing happens. It is worth to mention that the behavior of step 2 may be influenced by the widget. If the widget provides a method called _setPropertyName (e.g. _setLabelVisible, notice the _), that method will be called instead of _setProperty. This may be useful if something other should be done beside setting the property. If that is the case, that new function is responsible to call _setProperty by itself in order to set the property and inform the listeners. That method may also be called by the _init method to make sure the additional code is also executed during initialization (calling the public setter in _init would not have any effect due to the equals check at the beginning). A widget property is a special kind of a property which references another widget. Defining a property as widget property has the benefit that the widget is created automatically. Lets take the group box as an example. A group box has a widget property called fields. The fields are widgets, namely form fields. If you create a group box, you may specify its fields directly: Listing 11. Creating the string field automatically using a widget property import {scout, StringField, GroupBox} from '@eclipse-scout/core'; var groupBox = scout.create(GroupBox, { parent: parent, label: 'My Group Box', fields: [{ objectType: StringField, label: 'My String Field' }] }); // check if the string field was created as well console.log(groupBox.fields[0] instanceof StringField); In the above example the group box is created using scout.create. After creating the group box you can access the property fields and you will notice that the string field was created as well, even though scout.create has not been called explicitly for the string field. This is because the property fields is defined as widget property. During the initialization of the group box it sets the property fields and because the value is not a widget yet (resp. the elements in the array), scout.create will be called. This will also happen if you use a setter of a widget property. You can either call the setter with a previously created widget, or just pass the model and the widget will be created automatically. In addition to creating widgets, calling such a setter will also make sure that obsolete widgets are destroyed. This means if the widget was created using the setter, it will be destroyed when the setter is called with another widget which replaces the previous one. If the widget was created before calling the setter, meaning the owner is another widget, it won’t be destroyed. So if a property is defined as widget property, calling a setter will do the following: It checks if the property has changed at all (same as for regular properties). If the values are not equal, _prepareWidgetProperty is called which checks if the new value already is a widget and if not creates it. It also destroys the old widget unless the property should not be preserved (see _preserveOnPropertyChangeProperties). If the value is an array, it does so for each element in the array (only widgets which are not part of the new array will be destroyed). If the widget is rendered, the old widget is removed unless the property should not be preserved. If there is a custom remove function (e.g. _removeXY where XY is the property name), it will be called instead of removing the widgets directly. Note that the widget may have already been removed by the destroy function at the prepare phase. The model is updated (same as for regular properties). The render method is called (same as for regular properties). Every widget supports event handling by using the class EventSupport. This allows the widgets to attach listeners to other widgets and getting informed when an event happens. The 3 most important methods are the following: on: adds a listener off: removes a listener trigger: triggers an event So if a widget is interested in an event of another widget, it calls the function on with a callback function as parameter. If it is not interested anymore, it uses the function off with the same callback function as parameter. The following example shows how to handle a button click event. Listing 12. Handling an event import {scout, Button} from '@eclipse-scout/core'; let button = scout.create(Button, { parent: parent, label: 'click me!' }); button.render(); button.on('click', event => { // print 'Button \"click me!\" has been clicked' console.log('Button \"' + event.source.label + '\" has been clicked'); }); Every click on the button will execute the callback function. To stop listening, you could call button.off('click'), but this would remove every listener listening to the 'click' event. Better is to pass the same reference to the callback used with on as parameter for off. Listing 13. Stop listening for an event import {scout, Button} from '@eclipse-scout/core'; let button = scout.create(Button, { parent: parent, label: 'click me!' }); button.render(); let callback = event => { // print 'Button \"click me!\" has been clicked' console.log('Button \"' + event.source.label + '\" has been clicked'); // stop listening, a second click won't print anything button.off('click', callback); }; button.on('click', callback); If the callback function is bound using bind(), the bound function has to be used when removing the listener using off. This is because bind() returns a new function wrapping the original callback. In order to trigger an event rather than listening to one, you would use the function trigger. This is what the button in the above example does. When it is being clicked, it calls this.trigger('click') (this points to the instance of the button). With the second parameter you may specify additional data which will be copied onto the event. By default, the event contains the type (e.g. 'click') and the source which triggered it (e.g. the button). Listing 14. Triggering an event with custom event data trigger('click', { foo: 'bar' }); // callback function(event) { console.log(event.foo); // prints bar } A special kind of event is the property change event. Whenever a property changes, such an event is triggered. The event has the following properties: type: the type of the event which is always propertyChange source: the widget which triggered the event name: the name of the property newValue: the new value of the property oldValue: the old value of the property Listening to such an event works in the same way as for other events, just use the type propertyChange. The listening below shows how to handle the property change event if the selected property of a toggle button changes. Listing 15. Example of a property change event import {scout, Button} from '@eclipse-scout/core'; let button = scout.create(Button, { parent: parent, label: 'click me!', displayStyle: Button.DisplayStyle.TOGGLE }); button.render(); button.on('propertyChange', event => { if (event.propertyName == 'selected') { // prints 'Property selected changed from false to true' console.log('Property ' + event.propertyName + ' changed from ' + event.oldValue + ' to ' + event.newValue); } }); button.setSelected(true); The above propertyChange handler ist executed for ALL property changes of that button. This makes it necessary to check for the right property name inside the listener as it is done here with the if statement at the start of the listener. Because this is a very common pattern there is a shortcut available. You can listen for a specific property change with the following notation: propertyChange:propertyName. Listing 16. Listen for specific property changes button.on('propertyChange:selected', event => { // This listener is only executed when the 'selected' property changes console.log('Property ' + event.propertyName + ' changed from ' + event.oldValue + ' to ' + event.newValue); }); button.setSelected(true); If you want to know what events are available for a specific widget, you can have a look at its event map. The event map is a TypeScript interface and named after the widget with the suffix EventMap. For example, you will find the event map of a Menu under the name MenuEventMap. Beside having a complete list of the available events, these event maps are also used by TypeScript to provide code completion for the event name when adding an event handler: Figure 4. Event Name Completion You also get the correct type of the event itself including its members in the handler: Figure 5. Typed Event See chapter Icons for a general introduction to icons in Scout. Widgets that have a property iconId (for instance Menu) can display an icon. This iconId references an icon which can be either a bitmap image (GIF, PNG, JPEG, etc.) or a character from an icon-font. An example for an icon-font is the scoutIcons.ttf which comes shipped with Scout. Depending on the type (image, font-icon) the iconId property references: Image: iconId is an URL which points to an image resource accessible via HTTP. Example: /icons/person.png Font-icon: iconId has the format font:[UTF-character]. Example: font:\\uE043, references a character in scoutIcons.ttf Example: font:fooIcons \\uE109, references a character in custom font fooIcons.ttf Icon Constants: iconId has the format: ${iconId:[constant]}, where constant is a constant in the module icons.js. This format is especially useful when you configure a Scout widget with a JSON model. The value of the constant is again either an image or a font-icon as described above. Example: ${iconId:ANGLE_UP} uses icons.ANGLE_UP, icons predefined by Scout Example: ${iconId:foo.BAR} uses foo.icons.BAR, use this for custom icon constant objects As seen in the previous chapters, the creation of a widget requires a parent. This establishes a link between the child and the parent widget which is necessary for several actions. Rendering a widget into the container of the parent If you call widget.render() you don’t have to specify the HTML container to which the widget should be appended. It takes the container of the parent widget by default which is parent.$container. You can still pass a custom $parent if you like. Removing a widget and its children If widget.remove() is called, the widget will be removed from the DOM. Even though removing the parent HTML node would be sufficient in order to make the children disappear from the screen, every child widget will be removed as well. This gives the child widgets the possibility to clean up their rendering state and detach listeners. This is necessary because the widgets still exist after removal and their data can still be updated. Such cleanup actions are typically done by overriding widget._remove(). Remember to call the _remove of the super class as well. Finding child widgets This is something you will have to do very often if you specified your widgets in a JSON file. If you want to access these widgets from JavaScript you need to get them first. This is easy due to the linkage of the widgets. You can just use the function widget(id). See also chapter Finding a Widget for more details. Establishing a link independent of the DOM structure Normally a child widget contains HTML elements which are children of the parent’s HTML elements. Even though this is the regular case it is not a must. Amongst others the following widgets have HTML elements appended to the HTML element of the desktop rather than their actual parents: dialogs, popups, tooltips. The main reason is because these widgets lay on top of every other widget. In order to not get into the z-index hell it is a lot easier to put these widgets on the top level of the DOM structure. But since the HTML elements are now separated, the only link is the parent/child hierarchy. Imagine you have a string field which displays a tooltip. The parent of the tooltip is the string field but the HTML element is appended to the HTML element of the desktop. Removing the string field will now remove the tooltip as well even though their HTML elements are not linked. Or think about the following case: there is a popup open which contains a smart field. The smart field shows a popup by itself displaying the proposals. The HTML elements of the main popup and the smart field popup are siblings meaning they are on the same level in the DOM. Normally a popup gets closed when an element not belonging to the popup is clicked. But why is the main popup not closed if the user clicks into the smart field popup even though their HTML elements are not linked? Exactly, because the smart field popup is a child of the smart field and therefore a child of the main popup. So far we have learned what the parent is. But what is the owner? The owner is the only one which is allowed to destroy its children. Normally, the parent and the owner are the same, that is why you don’t have to specify the owner explicitly when creating a widget. The owner will be different if you specify it explicitly or if you use setParent() to temporarily change the parent of a widget. In that case the owner points to the old parent. This means if the new parent were destroyed, the newly linked child would not be destroyed, only removed from the DOM. This comes in handy if you want to temporarily give the control over rendering/removal to another widget (like a popup) but don’t let the other widget destroy your widget (e.g. when the popup is closed) because you want to use your widget again (e.g. display it on another popup).","title":"Widget","component":"scout-docs","version":"23.1","name":"widget","url":"/scout-docs/stable/technical-guide/user-interface/widget.html","titles":[{"text":"Lifecycle","hash":"lifecycle","id":1},{"text":"Creating a Widget","hash":"creating-a-widget","id":2},{"text":"Creating a Widget Declaratively","hash":"creating-a-widget-declaratively","id":3},{"text":"Using constants in a JSON model","hash":"using-constants-in-a-json-model","id":4},{"text":"Finding a Widget","hash":"finding-a-widget","id":5},{"text":"Widget Maps","hash":"widget-maps","id":6},{"text":"Properties","hash":"properties","id":7},{"text":"Widget Properties","hash":"widget-properties","id":8},{"text":"Events","hash":"events","id":9},{"text":"Property Change Event","hash":"property-change-event","id":10},{"text":"Event Maps","hash":"event-maps","id":11},{"text":"Icons","hash":"icons","id":12},{"text":"Parent and Owner","hash":"parent-and-owner","id":13}]},"129":{"id":129,"text":"In a scout application, typically, the scout client requests some data from the scout server. Sometimes, however, the communication needs to go the other way: The scout server needs to inform the scout client about something. With client notifications it is possible to do so. Figure 1. Client Notifications Example scenarios for client notifications are: some data shared by client and server has changed (e.g. a cache on the client is no longer up-to-date, or a shared variable has changed) a new incoming phone call is available for a specific client and should be shown in the GUI a user wants to send a message to another user Scout itself uses client notifications to synchronize code type and permission caches and session shared variables. A client notification message is just a serializable object. It is published on the server and can be addressed either to all client nodes or only to a specific session or user. On the UI server side, handlers can be used to react upon incoming notifications. Client notification handlers may change the state of the client model. In case of visible changes in the UI, these changes are automatically reflected in the UI. In case of multiple server nodes, the client notifications are synchronized using cluster notifications to ensure that all UI servers receive the notifications. Figure 2. Long Polling Client notifications are implemented using long polling as described below, because long polling works reliably in most corporate networks with proxy servers between server and client as well as with security policies that do not allow server push. With long polling, the client requests notifications from the server repeatedly. If no new notifications are available on the server, instead of sending an empty response, the server holds the request open and waits until new notifications are available or a timeout is reached. In addition to the long polling mechanism, pending client notifications are also transferred to the client along with the response of regular client requests. A client notification can be published on the server using the ClientNotificationRegistry. Publishing can be done either in a non-transactional or transactional way (only processed, when the transaction is committed). The UI Server either receives the notifications via the ClientNotificationPoller or in case of transactional notifications together with the response of a regular service request. The notification is then dispatched to the corresponding handler. When a client notifications is published on the server, it is automatically synchronized with the other server nodes (by default). Figure 3. Client Notification Big Picture Figure 4. Client Notification Multiple Server Nodes In order to deal with multiple ui-server nodes, the server holds a single notifications queue per ui-server node. In these queues only the relevant notifications need to be kept: If a client notification is addressed to a session or user, that does not exist on a ui-server node, it is not added to the queue. Sessions and corresponding users are registered on the server upon creation (and de-registered after destruction). Listing 1. Publishing Client Notifications BEANS.get(ClientNotificationRegistry.class).putForUser(\"admin\", new PersonTableChangedNotification()); There are several options to choose from when publishing a new client notification: The ClientNotificationAddress determines which how the client notification needs to be dispatched and handled. A client notification can be addressed to all nodes all sessions one or more specific session one or more specific user Client notifications can be published in a transactional or non-transactional way. Transactional means that the client notifications are only published once the transaction is committed. If the transaction fails, client notifications are disregarded. Non-transactional means that client notifications are published immediately without considering any transactions. Generally, it makes sense to distribute the client notifications automatically to all other server cluster nodes (if available). This is achieved using ClusterNotifications. It is however also possible to publish client notifications without cluster distribution. E.g. in case of client notifications already received from other cluster nodes. It is possible that a service generates a lot of client notifications that are obsolete once a newer notification is created. In this case a coalescer can be created to reduce the notifications: Listing 2. Client Notification Coalescer public class BookmarkNotificationCoalescer implements ICoalescer { @Override public List coalesce(List notifications) { // reduce to one return CollectionUtility.arrayList(CollectionUtility.firstElement(notifications)); } } The ClientNotificationDispatcher is responsible for dispatching the client notifications to the correct handler. To create a new client notification handler for a specific client notification, all you need to do is creating a class implementing org.eclipse.scout.rt.shared.notification.INotificationHandler, where T is the type (or subtype) of the notification to handle. The new handler does not need to be registered anywhere. It is available via jandex class inventory. Listing 3. Notification Handler for MessageNotifications public class MessageNotificationHandler implements INotificationHandler { @Override public void handleNotification(final MessageNotification notification) { Sometimes it is necessary to start and stop handling notification dynamically, (e.g. when a form is opened) in this case AbstractObservableNotificationHandler can be used to add and remove listeners. Dispatching is always done asynchronously. However, in case of transactional notifications, a service call blocks until all transactional notifications returned with the service response are handled. This behavior was implemented to simplify for example the usage of shared caches: Listing 4. Blocking until notification handling completed CodeService cs = BEANS.get(CodeService.class); cs.reloadCodeType(UiThemeCodeType.class); //client-side reload triggered by client notifications is finished List> reloadedCodes = cs.getCodeType(UiThemeCodeType.class).getCodes(); In the example above, it is guaranteed, that the codetype is up-to-date as soon as reloadCodeType is finished. Notification handlers are never called from a scout model thread. If the scout model needs to be updated when handling notifications, a model job needs to be created for that task. Listing 5. Notification Handler Creating Model Job @Override public void handleNotification(final MessageNotification notification) { ModelJobs.schedule(() -> { IDesktop desktop = ClientSessionProvider.currentSession().getDesktop(); // e.g. send dataChanged event to UI listeners desktop.dataChanged(notification.getMessage()); }, ModelJobs.newInput(ClientRunContexts.copyCurrent())); } Make sure to always run updates to the scout models in a model job (forms, pages, …​): Use ModelJobs.schedule(…​) where necessary in notification handlers.","title":"Client Notifications","component":"scout-docs","version":"23.1","name":"client-notification","url":"/scout-docs/stable/technical-guide/working-with-data/client-notification.html","titles":[{"text":"Examples","hash":"examples","id":1},{"text":"Data Flow","hash":"data-flow","id":2},{"text":"Push Technology","hash":"push-technology","id":3},{"text":"Components","hash":"components","id":4},{"text":"Multiple Server Nodes","hash":"multiple-server-nodes","id":5},{"text":"Publishing","hash":"publishing","id":6},{"text":"ClientNotificationAddress","hash":"clientnotificationaddress","id":7},{"text":"Transactional vs. Non-transactional","hash":"transactional-vs-non-transactional","id":8},{"text":"Distributing to all Cluster Nodes","hash":"distributing-to-all-cluster-nodes","id":9},{"text":"Coalescing Notifications","hash":"coalescing-notifications","id":10},{"text":"Handling","hash":"handling","id":11},{"text":"Creating a Client Notification Handler","hash":"creating-a-client-notification-handler","id":12},{"text":"Handling Notifications Temporarily","hash":"handling-notifications-temporarily","id":13},{"text":"Asynchronous Dispatching","hash":"asynchronous-dispatching","id":14},{"text":"Updating Scout Model","hash":"updating-scout-model","id":15}]},"130":{"id":130,"text":"A CodeType is a structure to represent a tree key-code association. They are used in SmartField and SmartColumn. implements: ICodeType extends: AbstractCodeType CodeTypes are used in SmartField to let the user choose between a finite list of values. The value stored by the field corresponds to the key of the selected code. A CodeType can be seen as a tree of Codes. Each code associates to the key (the Id) other properties: among others a Text and an IconId. In order to have the same resolving mechanism (getting the display text of a key), CodeTypes are also used in SmartColumns. To choose multiple values in the list, the fields ListBox (flat CodeType) and TreeBox (hierarchical CodeType) can be used. The codes are organized in a tree. Therefore, a CodeType can have one or more child codes at the root level, and each code can have other child codes. In a lot of cases a list of codes (meaning a tree containing only leaves at the first level) is sufficient to cover most of the need. Child codes are ordered in their parent code. This is realized with the order annotation. The type of the key is defined by its generic parameter . It is very common to use a type from the java.lang.* package (like Integer or String), but any Java Object is suitable. It must: implement Serializable have correctly implemented equals() and hashCode() functions be present in the server and the client There is no obligation to have the same type for the Id between the codes of a CodeType (meaning the same generic type parameter for the codes inner-class). However, it is a good practice to have the same type between the codes of a CodeType, because the Id are used as value of SmartFields. Therefore, the generic parameter describing the type of value of a SmartField must be compatible with the type of the codes contained in the CodeType. CodeType in a SmartField (or SmartColumn). @ClassId(\"08ccc68e-7b72-4fe0-b666-245ddb8b8441\") public class YesOrNoSmartField extends AbstractSmartField { // other configuration of properties. @Override protected Class> getConfiguredCodeType() { return YesOrNoCodeType.class; } } If the SmartField (or SmartColumn) works with a CodeType, a specific LookupCall is instantiated to get the LookupRows based on the Codes contained in a CodeType. Scout-runtime will handle the instantiation and the caching of CodeTypes. This function returns the text corresponding to the key using a CodeType: public String getCodeText(boolean key) { ICode c = BEANS.get(YesOrNoCodeType.class).getCode(key); if (c != null) { return c.getText(); } return null; } The common way to define a CodeType is to extend AbstractCodeType. Each code is an inner-class extending AbstractCode. Like usual the properties of Codes and CodeTypes can be set using the getConfiguredXxxxxx() methods. See the Java Code of a simple YesOrNoCodeType having just two codes: YesOrNoCodeType.YesCode YesOrNoCodeType.NoCode The SDK provides some help to generate CodeTypes and Codes. Use File → New → Scout → Scout Code Type to generate a new code. Code types are not necessarily hardcoded. It is possible to implement other mechanisms to load a CodeType dynamically. The description of the Codes can come from a database or from an XML files. If you want to do so, you just need to implement the method corresponding to the event LoadCodes. It is possible to use the static and the dynamic approach together. In this case, if there is a conflict (2 codes for the same id) the event OverwriteCode is triggered. Note for advanced users: Each CodeType is instantiated for each language each partition Note: A drawback is that the CodeType class is not aware of the language and the partition it is instantiated for. Only the CodeTypeStore that manages the CodeType instances knows for which language and which partition they have been instantiated.","title":"Code Type","component":"scout-docs","version":"23.1","name":"code-type","url":"/scout-docs/stable/technical-guide/working-with-data/code-type.html","titles":[{"text":"Description","hash":"description","id":1},{"text":"Organisation of the codes","hash":"organisation-of-the-codes","id":2},{"text":"Type of the key","hash":"type-of-the-key","id":3},{"text":"Using a CodeType","hash":"using-a-codetype","id":4},{"text":"SmartField or SmartColumn","hash":"smartfield-or-smartcolumn","id":5},{"text":"Accessing a code directly","hash":"accessing-a-code-directly","id":6},{"text":"Static CodeType","hash":"static-codetype","id":7},{"text":"Java Code and structure","hash":"java-code-and-structure","id":8},{"text":"With the SDK","hash":"with-the-sdk","id":9},{"text":"Dynamic CodeType","hash":"dynamic-codetype","id":10}]},"131":{"id":131,"text":"Data objects are Scout beans, which are used as data transfer objects for synchronous REST and asynchronous MOM interfaces. Furthermore, they can be used as domain objects within business logic. A data object extends the DoEntity base class and declares each attribute as a single accessor method. Attributes of two kinds are available: Value attribute of type T List attribute of type List The name of the accessor method defines the attribute name. The return value of the accessor method defines the attribute type. Listing 1. Example: ExampleEntityDo @TypeName(\"lorem.ExampleEntity\") @TypeVersion(Lorem_1_2_0.class) public class ExampleEntityDo extends DoEntity { public DoValue name() { (1) return doValue(\"name\"); } public DoList values() { (2) return doList(\"values\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityDo withName(String name) { name().set(name); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public String getName() { return name().get(); } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityDo withValues(Collection values) { values().updateAll(values); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityDo withValues(Integer... values) { values().updateAll(values); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public List getValues() { return values().get(); } } 1 Example attribute of type String 2 Example attribute of type List For convenience reasons when working with the data objects it is recommended to add a getter and a with (e.g. setter) method. Using the convenience with methods, new data objects can be created with fluent-style API: Listing 2. Example: Create ExampleEntityDo instance ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); Using the IDataObjectMapper interface a data object can be converted from and to its string representation. The marshalling strategy is generic and replaceable. The Scout platform defines the IDataObjectMapper interface, at runtime a Scout bean implementing the interface must be available. The Scout module org.eclipse.scout.rt.jackson provides a default implementation serializing data objects from and to JSON using the Jackson library. Listing 3. Example: Serialize ExampleEntityDo String string = BEANS.get(IDataObjectMapper.class).writeValue(entity); The data object ExampleEntityDo serialized to JSON: Listing 4. Example: ExampleEntityDo as JSON { \"_type\" : \"lorem.ExampleEntity\", \"_typeVersion\": \"lorem-1.2.0\", \"name\" : \"example\", \"values\" : [1,2,3,4,5] } Listing 5. Example: Deserialize ExampleEntityDo ExampleEntityDo marhalled = BEANS.get(IDataObjectMapper.class) .readValue(string, ExampleEntityDo.class); A data object is annotated with a logical type name using the @TypeName annotation. Declaring a logical type name using the @TypeName annotation for each data object is mandatory. The annotation value is added to the serialized JSON object as top-level _type property. Using the type property the data object marshaller is able to find and instantiate the matching data object class, without having to rely on a fully classified class name. It avoids a 1:1 dependency between the serialized JSON String and the fully classified class name. A stable type name is required in order to be able to change the data object structure without breaking the API. A data object may be annotated with a type version using the @TypeVersion annotation. The type version represents the version of the structure of the data object and not the version of the data within the data object. The type version value should be incremented, each time, the data object class is modified (add/remove/rename attributes). If a version is required for versioning the values of a data object, consider add a version attribute, incrementing its value, every time a value of the data object is modified. The annotation value is added to the serialized JSON object as top-level _typeVersion property. The serialized _typeVersion value is not deserialized into an attribute, since the deserializer creates a concrete data object class at runtime, having the @TypeVersion annotation providing the type version value. Declaring a logical type version using the `@TypeVersion`annotation is highly recommended if a data object is persisted as JSON document to a file or database. A namespace (implementation of INamespace) represents a container for data objects. Each data object must have a unique type name within a namespace. Scout has its own namespace (with ID scout), your project should use an own one. Listing 6. Example: LoremNamespace public final class LoremNamespace implements INamespace { public static final String ID = \"lorem\"; public static final double ORDER = 9000; @Override public String getId() { return ID; } @Override public double getOrder() { return ORDER; } } A class implementing ITypeVersion is used within the @TypeVersion annotation. Several type versions for one namespace may be bundled in a container class. There are a few different constructors provided by AbstractTypeVersion that simplify the definition of such a type version. The default constructor extracts the namespace and version based on the class name. Listing 7. Example: LoremTypeVersions public final class LoremTypeVersions { private LoremTypeVersions() { } public static final class Lorem_1_0_0 extends AbstractTypeVersion { } public static final class Lorem_1_2_0 extends AbstractTypeVersion { } } AbstractDataObjectSignatureTest provides an abstract implementation of a test that creates a signature of all data object annotated with a type version including additional signatures (e.g. referenced IEnum with their values). A signature test enables to detect changes in data object that might need a migration. Each module containing data objects with type version annotation should implement a data object signature test. Listing 8. Example: DocsSnippetsDataObjectSignatureTest public class DocsSnippetsDataObjectSignatureTest extends AbstractDataObjectSignatureTest { @Override protected String getFilenamePrefix() { return \"docs-snippets\"; } @Override protected String getPackageNamePrefix() { return \"org.eclipse.scout.docs.snippets\"; } } Scout objects use the following naming conventions: A data object class should use the `Do' suffix. The value of the @TypeName annotation corresponds to the simple class name without Do suffix A namespace prefix (separated by a dot) is recommended in order to avoid duplicated type names across different modules (e.g. scout.Bookmark, helloworld.MyDataObject) The default attribute name within the serialized string corresponds to the name of the attribute accessor method defined in the data object. To use a custom attribute name within the serialized string, the attribute accessor method can be annotated by @AttributeName providing the custom attribute name. Listing 9. Example: Custom Attribute Name @AttributeName(\"myCustomName\") public DoValue name() { return doValue(\"myCustomName\"); (1) } 1 Important: The annotation value must be equals to the string constant used for the doValue() or doList() attribute declaration. Listing 10. Example: Custom Attribute Name as JSON { \"_type\" : \"CustomAttributeNameEntity\", \"myCustomName\" : \"example\" } Using the ValueFormat annotation a data type dependent format string may be provided, which is used for the marshalling. Listing 11. Example: Custom Attribute Format @ValueFormat(pattern = IValueFormatConstants.DATE_PATTERN) public DoValue date() { return doValue(\"date\"); } The IValueFormatConstants interface declares a set of default format pattern constants. Attributes with type java.util.Date accept the format pattern specified by SimpleDateFormat class (see https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html) The @JsonIgnore annotation included in the Jackson library is currently not supported for data objects. To ignore an attribute when serializing a data object, the attribute must be removed from the data object by either not setting a value for the desired attribute or by explicitly removing the attribute before a data object is serialized: Listing 12. Example: Remove an attribute from a data object ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); // remove by attribute accessor method reference entity.remove(entity::name); // remove by attribute node entity.remove(entity.name()); // remove by attribute name entity.remove(entity.name().getAttributeName()); // remove by attribute name raw entity.remove(\"name\"); Instead of data objects, a REST or MOM interface could be built using simple plain old Java objects (POJOs). Compared to POJOs a Scout data object offers additional support and convenience when working with attributes. A JSON attribute may have three different states: Attribute available with a value Attribute available with value null Attribute not available These three states cannot be represented with a POJO object which is based on a single variable with a pair of getter/setter. In order to differ between value not available and value is null, a wrapper type is required, which beside the value stores the information, if the attribute is available. Scout data objects solve this issue: Data objects internally use a Map> where the abstract DoNode at runtime is represented by a DoValue or a DoList object instance wrapping the value. Value: DoNode.get() returns the (wrapped) value of the attribute Listing 13. Example: ExampleEntityDo Access the Attribute Value ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); // access using attribute accessor String name1 = entity.name().get(); List values1 = entity.values().get(); // access using generated attribute getter String name2 = entity.getName(); List values2 = entity.getValues(); Existence: Using the DoNode.exists() method, each attribute may be checked for existence Listing 14. Example: ExampleEntityDo Attribute Existence // check existence of attribute boolean hasName = entity.name().exists(); A simple data objects is implemented by subclassing the DoEntity class. For a complex hierarchy of data objects the base class may be abstract and extend the DoEntity class, further subclasses extend the abstract base class. The abstract base data object class does not need to specify a @TypeName annotation since there are no instances of the abstract class which are serialized or deserialized directly. Each non-abstract subclass must specify a unique @TypeName annotation value. Listing 15. Example: Abstract class AbstractExampleEntityDo with one attribute public abstract class AbstractExampleEntityDo extends DoEntity { public DoValue name() { return doValue(\"name\"); } Listing 16. Example: Subclass 1 with an additional attribute and a unique type name @TypeName(\"ExampleEntity1\") public class ExampleEntity1Do extends AbstractExampleEntityDo { public DoValue name1Ex() { return doValue(\"name1Ex\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity1Do withName1Ex(String name1Ex) { name1Ex().set(name1Ex); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public String getName1Ex() { return name1Ex().get(); } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity1Do withName(String name) { name().set(name); return this; } } Listing 17. Example: Subclass 2 with an additional attribute and a unique type name @TypeName(\"ExampleEntity2\") public class ExampleEntity2Do extends AbstractExampleEntityDo { public DoValue name2Ex() { return doValue(\"name2Ex\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity2Do withName2Ex(String name2Ex) { name2Ex().set(name2Ex); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public String getName2Ex() { return name2Ex().get(); } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity2Do withName(String name) { name().set(name); return this; } } Listing 18. Example: Class with attributes of type AbstractExampleEntityDo public class ExampleDoEntityListDo extends DoEntity { public DoList listAttribute() { return doList(\"listAttribute\"); } public DoValue singleAttribute() { return doValue(\"singleAttribute\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleDoEntityListDo withListAttribute(Collection listAttribute) { listAttribute().updateAll(listAttribute); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleDoEntityListDo withListAttribute(AbstractExampleEntityDo... listAttribute) { listAttribute().updateAll(listAttribute); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public List getListAttribute() { return listAttribute().get(); } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleDoEntityListDo withSingleAttribute(AbstractExampleEntityDo singleAttribute) { singleAttribute().set(singleAttribute); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public AbstractExampleEntityDo getSingleAttribute() { return singleAttribute().get(); } } Listing 19. Example: Using the ExampleDoEntityListDo class with different kinds of AbstractExampleEntityDo sub classes ExampleDoEntityListDo entity = BEANS.get(ExampleDoEntityListDo.class); entity.withListAttribute( BEANS.get(ExampleEntity1Do.class) .withName1Ex(\"one-ex\") .withName(\"one\"), BEANS.get(ExampleEntity2Do.class) .withName2Ex(\"two-ex\") .withName(\"two\")); entity.withSingleAttribute( BEANS.get(ExampleEntity1Do.class) .withName1Ex(\"single-one-ex\") .withName(\"single-one\")); If an instance of ExampleDoEntityListDo is serialized, each attribute is serialized using its runtime data type, adding an appropriate _type attribute to each serialized object. Therefore, the deserializer knows which concrete class to instantiate while deserializing the JSON document. This mechanism is used for simple value properties and list value properties. To each object which is part of a list value property the _type property is added to support polymorphism within single elements of a list. Listing 20. Example: ExampleDoEntityListDo as JSON { \"_type\" : \"ExampleDoEntityListDo\", \"listAttribute\" : [ { \"_type\" : \"ExampleEntity1\", \"name\" : \"one\", \"name1Ex\" : \"one-ex\" }, { \"_type\" : \"ExampleEntity2\", \"name\" : \"two\", \"name2Ex\" : \"two-ex\" } ], \"singleAttribute\" : { \"_type\" : \"ExampleEntity1\", \"name\" : \"single-one\", \"name1Ex\" : \"single-one-ex\" } } To rename a data object attribute in a subclass, override the attribute accessor method and annotate it with @AttributeName using the new attribute name as value. Additionally the overridden method must call the doValue() method providing the new attribute name as argument. Listing 21. Example: Rename attribute in a data object subclass @TypeName(\"ExampleEntityEx\") public class ExampleEntityExDo extends ExampleEntityDo { @Override @AttributeName(\"nameEx\") public DoValue name() { (1) return doValue(\"nameEx\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityExDo withName(String name) { name().set(name); return this; } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityExDo withValues(Collection values) { values().updateAll(values); return this; } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityExDo withValues(Integer... values) { values().updateAll(values); return this; } } 1 Rename name attribute of superclass to nameEx Use the basic data object interface IDoEntity to model a data object hierarchy with own base interfaces and a set of implementing classes. Interfaces extending IDataObject do not need a @TypeName annotation, since they are never directly serialized or deserialized. The interfaces may be used as types for attributes within a data object. At runtime the concrete classes implementing the interfaces are serialized and their @TypeName annotation value is used. The Data Object base class DoEntity defines a generic equals() and hashCode() implementation considering all attributes of a data object for equality. A data object is equals to another data object, if the Java class of both data objects is identical and the attribute maps (including their nested values) of both data objects are equals. For futher details see: org.eclipse.scout.rt.dataobject.DoEntity.equals(Object) org.eclipse.scout.rt.dataobject.DoNode.equals(Object) An instance of the DoEntity class can represent any kind of JSON document. If the JSON document contains no type attributes or no matching data object class exists at runtime, the JSON document is deserialized into a raw DoEntity instance holding all attributes. To access the attributes of the data object a set of generic getter methods may be used by specifying the attribute name. A generic JSON document is deserialized into a generic tree-like structure of nested DoEntity instances. If the serialized JSON document contains a _type and/or _typeVersion attribute, the attribute and its value is added as attribute to the generic raw DoEntity instance. Listing 22. Example: ExampleEntityDo accessing attribute \"by name\" ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); // access name attribute by its attribute name Object name1 = entity.get(\"name\"); (1) String name2 = entity.get(\"name\", String.class); (2) String name3 = entity.getString(\"name\"); (3) // access values attribute by its attribute name List values1 = entity.getList(\"values\"); (4) List values2 = entity.getList(\"values\", String.class); (5) List values3 = entity.getStringList(\"values\"); (6) // optional list attribute access by its attribute name Optional> values4 = entity.optList(\"values\"); (7) Optional> values5 = entity.optList(\"values\", String.class); (8) 1 Accessing value attribute, default type is Object 2 Accessing value attribute, specify the type as class object if known 3 Accessing value attribute, convenience method for a set of common types 4 Accessing list attribute, default type is Object 5 Accessing list attribute, specify the type as class object if known 6 Accessing list attribute, convenience method for a set of common types 7 Accessing optional list attribute, default type is Object 8 Accessing optional list attribute, specify the type as class object if known If a list attribute is not available, using one of the getList(…​) getters adds an empty list as attribute value into the entity and returns the list. Use optList(…​) in order to get an optionally available list without adding a new empty list as attribute. Apart of the convenience methods available directly within the DoEntity class, the DataObjectHelper class contains a set of further convenience methods to access raw values of a data object. If a generic JSON document is deserialized to a DoEntity class without using a subclass specifying the attribute types, all attributes of type JSON number are deserialized into the smallest possible Java type. For instance the number value 42 is deserialized into an Integer value, a large number may be deserialized into a BigInteger or BigDecimal if it is a floating point value. Using the convenience method DoEntity.getDecimal(…​) each number attribute is converted automatically into a BigDecimal instance on access. If a generic JSON document is deserialized, only a set of basic Java types like String, Number, Double are supported. Every JSON object is deserialized into a (nested) DoEntity structure, which internally is represented by a nested structure of Map. To build map-like a data object (corresponds to Map), the DoMapEntity base class may be used. Listing 23. Example: Map as ExampleMapEntityDo data object @TypeName(\"ExampleMapEntity\") public class ExampleMapEntityDo extends DoMapEntity { } The example JSON document of ExampleMapEntityDo instance with two elements: Listing 24. Example: ExampleMapEntityDo with two elements: { \"_type\" : \"ExampleMapEntity\", \"mapAttribute1\" : { \"_type\" : \"ExampleEntity\", \"name\" : \"example-1\", \"values\" : [1,2,3,4,5] }, \"mapAttribute2\" : { \"_type\" : \"ExampleEntity\", \"name\" : \"example-2\", \"values\" : [6,7,8,9] } } Listing 25. Example: Accessing attributes ExampleMapEntityDo mapEntity = BEANS.get(ExampleMapEntityDo.class); mapEntity.put(\"mapAttribute1\", BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5)); mapEntity.put(\"mapAttribute2\", BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(6, 7, 8, 9)); ExampleEntityDo attr1 = mapEntity.get(\"mapAttribute1\"); (1) Map allAttributes = mapEntity.all(); (2) 1 Accessing attribute using get method returns the attribute of declared type T 2 Accessing all attributes using all method returns a map with all attributes of type T A DoMapEntity subclass may declare custom attributes of another type than T (e.g. an integer size attribute). If attributes of other types are used, using the all method results in a ClassCastException since not all attributes are of the same type any longer. According to the JSON specification a JSON document at top level may contain a object or an array. If a JSON string of unknown structure is deserialized, the common super interface IDataObject may be used as target type for the call to the deserializer: Listing 26. Example: Deserialize a JSON document with unknown structure String json = \"\"; IDataObjectMapper mapper = BEANS.get(IDataObjectMapper.class); IDataObject dataObject = mapper.readValue(json, IDataObject.class); if (dataObject instanceof IDoEntity) { // handle object content } else if (dataObject instanceof DoList) { // handle array content } The DoEntityBuilder may be used to build ad-hoc data objects without a concrete Java class defining its attributes. Listing 27. Example: DoEntityBuilder IDoEntity entity = BEANS.get(DoEntityBuilder.class) .put(\"attr1\", \"foo\") .put(\"attr2\", \"bar\") .putList(\"listAttr\", 1, 2, 3) .build(); (1) String entityString = BEANS.get(DoEntityBuilder.class) .put(\"attr1\", \"foo\") .put(\"attr2\", \"bar\") .putList(\"listAttr\", 1, 2, 3) .buildString(); (2) 1 Builder for a DoEntity object 2 Builder for the string representation of a DoEntity objects The Scout data object implementation does not reference any specific Java serialization library or framework. The basic building blocs of data objects are part of the Scout platform and to not reference any thirdparty libraries. At runtime an implementation of the IDataObjectMapper interface must be provided. The Scout default implementation based on the JSON library Jackson is provided by adding a maven dependency to the module org.eclipse.scout.rt.jackson. The dependency to this module must be added in the top-level .dev/.app module. A dependency within the program code is not necessaray as long as no specific Jackson features should be used within the application code. The class org.eclipse.scout.rt.dataobject.DataObjectInventory provides access to all available data objects at runtime. For each data object all available attributes and their properties (name, type, accessor method and format pattern) are available: Listing 28. Example: Accessing data object inventory Map attributes = BEANS.get(DataObjectInventory.class).getAttributesDescription(ExampleEntityDo.class); attributes.forEach( (key, value) -> System.out.println(\"Attribute \" + key + \" type \" + value.getType())); Apart from attribute descriptions, the inventory provides access to type name and type version of each data object class. The application scoped beans DataObjectSerializers resp. DataObjectDeserializers define the available serializer and deserializer classes used to marshal the data objects. Own custom serializer and deserializer implementations can be added by replacing the corresponding base class and register its own custom serializer or deserializer. Implementations of org.eclipse.scout.rt.dataobject.enumeration.IEnum add a stringValue() method to each enumeration value, guaranteeing a constant, fixed string value for each enumeration value. An arbitrary Java enum may be used within a data object, but does not guarantee a stable serialized value, if an enumeration value is changed in future. Additionally implementations of IEnum can be annotated with @EnumName to support being referenced in a data object signature test. All instances of IEnum may be used within data objects and are automatically serialized to their JSON string value representation and deserialized back to the correct Java class instance. The default resolver mechanism for IEnum (see org.eclipse.scout.rt.dataobject.enumeration.EnumResolver) matches the given string with the available string values in the current enumeration implementation to look up the matching enumeration value. An optional static resolve() method handles the resolve of a given string value into the correct enumeration value allowing to support even string values, whose enumeration values where changed or deleted. Listing 29. Example IEnum implementation @EnumName(\"scout.ExampleEnum\") public enum ExampleEnum implements IEnum { ONE(\"one\"), TWO(\"two\"), THREE(\"three\"); private final String m_stringValue; ExampleEnum(String stringValue) { m_stringValue = stringValue; } @Override public String stringValue() { return m_stringValue; } public static ExampleEnum resolve(String value) { (1) // custom null handling if (value == null) { return null; } switch (value) { // custom handling of old values (assuming 'old' was used in earlier revisions) case \"one\": return ONE; case \"two\": return TWO; case \"three\": return THREE; case \"four\": return THREE; default: // custom handling of unknown values throw new AssertionException(\"unsupported status value '{}'\", value); } } } 1 Optional resolve method Implementations of org.eclipse.scout.rt.dataobject.id.IId interface wrap an arbitrary value adding a concrete Java type to a scalar value. E.g. the key of an example entity which technically is a UUID becomes an instance of the ExampleId class. All instances of IId may be used within data objects and are automatically serialized to their JSON string representation of the wrapped value and deserialized back to the correct Java class instance. An exampleId instance may then be used as type-safe parameter for further referencing a given example entity record, for instance as attribute value within a data object. Listing 30. Example ID implementation wrapping a UUID @IdTypeName(\"scout.ExampleId\") public static final class ExampleId extends AbstractUuId { private static final long serialVersionUID = 1L; public static ExampleId create() { return new ExampleId(UUID.randomUUID()); } public static ExampleId of(UUID id) { if (id == null) { return null; } return new ExampleId(id); } public static ExampleId of(String id) { if (id == null) { return null; } return new ExampleId(UUID.fromString(id)); } private ExampleId(UUID id) { super(id); } } A set of utility methods for unit tests with data objects are provided within the DataObjectTestHelper class. Commonly used are a set of assert methods (e.g. assertEquals(Object expected, Object actual)) for testing data objects for (deep) equality.","title":"Data Objects","component":"scout-docs","version":"23.1","name":"data-object","url":"/scout-docs/stable/technical-guide/working-with-data/data-object.html","titles":[{"text":"Data Object Definition","hash":"data-object-definition","id":1},{"text":"Marshalling","hash":"marshalling","id":2},{"text":"Type Name","hash":"type-name","id":3},{"text":"Type Version","hash":"type-version","id":4},{"text":"Namespace and ITypeVersion","hash":"cha-namespace-and-itypeversion","id":5},{"text":"Signature Test","hash":"signature-test","id":6},{"text":"Data Object Naming Convention","hash":"data-object-naming-convention","id":7},{"text":"Attribute Name","hash":"attribute-name","id":8},{"text":"Attribute Format","hash":"attribute-format","id":9},{"text":"Ignoring an Attribute","hash":"ignoring-an-attribute","id":10},{"text":"Handling of DoEntity Attributes","hash":"handling-of-doentity-attributes","id":11},{"text":"Access Data Object Attributes","hash":"access-data-object-attributes","id":12},{"text":"Abstract Data Objects & Polymorphism","hash":"abstract-data-objects-polymorphism","id":13},{"text":"Rename an attribute of a data object in a subclass","hash":"rename-an-attribute-of-a-data-object-in-a-subclass","id":14},{"text":"Interfaces to Data Objects","hash":"interfaces-to-data-objects","id":15},{"text":"Equals and Hashcode","hash":"equals-and-hashcode","id":16},{"text":"Generic DoEntity","hash":"generic-doentity","id":17},{"text":"Accessing number values","hash":"accessing-number-values","id":18},{"text":"Map of objects","hash":"map-of-objects","id":19},{"text":"IDataObject Interface - Data Objects with unknown structure","hash":"idataobject-interface-data-objects-with-unknown-structure","id":20},{"text":"Ad-Hoc Data Objects","hash":"ad-hoc-data-objects","id":21},{"text":"Maven Dependencies","hash":"maven-dependencies","id":22},{"text":"Data Object Inventory","hash":"data-object-inventory","id":23},{"text":"Extending with custom serializer and deserializer","hash":"extending-with-custom-serializer-and-deserializer","id":24},{"text":"Enumerations within Data Objects","hash":"enumerations-within-data-objects","id":25},{"text":"Typed IDs within Data Objects","hash":"typed-ids-within-data-objects","id":26},{"text":"Unit Testing","hash":"sec-unit-testing","id":27}]},"132":{"id":132,"text":"The Java API for XML-Based Web Services (JAX-WS) is a Java programming language API for creating web services. JAX-WS is one of the Java XML programming APIs, and is part of the Java EE platform. Scout facilitates working with webservices, supports you in the generation of artifacts, and provides the following functionality: ready to go Maven profile for easy webservice stub and artifact generation full JAX-WS 2.3 compliance JAX-WS implementor independence provides an up front port type EntryPoint to enforce for authentication, and to run web requests in a RunContext adds cancellation support for on-going webservice requests provides a port cache for webservice consumers allows to participate in 2PC protocol for webservice consumers allows to provide 'init parameters' to handlers The JAX-WS Scout integration provides a thin layer on top of JAX-WS implementors to facilitate working with webservices. It depends on the JAX-WS 2.3.x API as specified in JSR 224. It is implementor neutral, and was tested with with the following implementations: JAX-WS RI (reference implementation) JAX-WS METRO Apache CXF The integration does not require you to bundle the JAX-WS implementor with your application, which is a prerequisite for running in an EE container. A servlet container like Apache Tomcat typically does not ship with a JAX-WS implementor. As the actual implementor, you can either use JAX-WS RI as shipped with the JRE, or provide a separate implementor like JAX-WS METRO or Apache CXF in the form of a Maven dependency. However, JAX-WS RI does not provide a servlet based entry point, because the Servlet API is not part of the Java SE specification. When publishing webservices, it therefore is easiest to ship with a separate implementor: Declare a respective Maven dependency in your webbapp project - that is the Maven module typically containing the application’s web.xml. When running in an EE container, the container typically ships with a JAX-WS implementor. It is highly recommended to use that implementor, primarily to avoid classloading issues, and to further profit from the container’s monitoring and authentication facility. Refer to the containers documentation for more information. JAX-WS Scout integration is prepared to run with different implementors. Unfortunately, some implementors do not implement the JSR exactly, or some important functionality is missing in the JSR. To address this fact without loosing implementor independence, the delegate bean JaxWsImplementorSpecifics exists. As of now, Scout ships with three such implementor specific classes, which are activated via config.properties by setting the property scout.jaxws.implementor with its fully qualified class name. By default, JAX-WS METRO implementor is installed. For instance, support for Apache CXF implementor is activated as following: scout.jaxws.implementor=org.eclipse.scout.rt.server.jaxws.implementor.JaxWsCxfSpecifics class description JaxWsRISpecifics implementor specifics for JAX-WS Reference Implementation (RI) as contained in JRE JaxWsMetroSpecifics implementor specifics for JAX-WS METRO implementation JaxWsCxfSpecifics implementor specifics for Apache JAX-WS CXF implementation Of course, other implementors can be used as well. For that to work, install your own JaxWsImplementorSpecifics class, and reference its fully qualified name in config.properties. This class encapsulates functionality that is defined in JAX-WS JSR 224, but may diverge among JAX-WS implementors. As of now, the following points are addressed: missing support in JSR to set socket connect and read timeout; proprietary 'property' to set response code in Apache CXF; when working with Apache CXF, response header must be set directly onto Servlet Response, and not via MessageContext; when working with JAX-WS METRO or JAX-WS RI, the handler’s return value is ignored in one-way communication; instead, the chain must be exited by throwing a webservice exception; Learn more about how to configure a JAX-WS implementor: Configure JAX-WS implementor The effective dependency to the JAX-WS implementor is to be specified in the pom.xml of the webapp module (not the server module). That allows for running with a different implementor depending on the environment, e.g. to provide the implementor yourself when starting the application from within your IDE in Jetty, or to use the container’s implementor when deploying to an EE enabled application server. Even if providing the very same implementor for all environments yourself, it is good practice to do the configuration in the webapp module. A generally applicable configuration cannot be given, because the effective configuration depends on the implementor you choose, and whether it is already shipped with the application server you use. However, if JAX-WS RI is sufficient, you do not have to specify an implementor at all because already contained in JRE. If running in an EE application server, refer to the containers documentation for more information. Listing 1 provides sample configuration for shipping with JAX_WS METRO and Listing 2 does the same for Apache CXF Listing 1. Maven dependency for JAX-WS METRO com.sun.xml.ws jaxws-rt ... Listing 2. Maven dependency for Apache CXF org.apache.cxf cxf-rt-frontend-jaxws ... org.apache.cxf cxf-rt-transports-http ... org.springframework spring-web ... This section describes the configuration of the entry point Servlet to publish webservices. If working with webservice consumers only, no configuration is required. Similar to the pom.xml as described in Configure JAX-WS Maven dependency in pom.xml, the web.xml differs from implementor to implementor, and whether the implementor is already shipped with the application server. Nevertheless, the following Listing 3 show a sample configuration for JAX-WS METRO and Listing 4 for Apache CXF. Listing 3. web.xml for JAX-WS METRO Servlet com.sun.xml.ws.server.http.publishStatusPage true com.sun.xml.ws.server.http.publishWSDL true com.sun.xml.ws.transport.http.servlet.WSServletContextListener jaxws com.sun.xml.ws.transport.http.servlet.WSServlet jaxws /jaxws/* (1) 1 the base URL where to publish the webservice endpoints Listing 4. web.xml for Apache CXF Servlet CXF Servlet jaxws org.apache.cxf.transport.servlet.CXFServlet config-location /WEB-INF/cxf-jaxws.xml (1) 1 jaxws /jaxws/* (2) 1 Apache CXF specific configuration file for endpoints to be published. See Apache CXF for more information. 2 the base URL where to publish the webservice endpoints But, if running in an EE container, it is most likely that a Servlet configuration must not be configured, because the endpoints are discovered by the application server, or registered in a vendor specific way. Refer to the containers documentation for more information. Some application servers like Oracle WebLogic Server (WLS) allow the port types to be registered as a Servlet in web.xml. However, this is vendor specific, and works despite the fact that port type does not implement 'javax.servlet.Servlet'. Do not forget to exclude the webservice’s Servlet URL pattern from authentication filter. Scout JAX-WS integration does not prescribe how to organize your webservices in terms of Maven modules. You could either put all your webservices directly into the server module, or create a separate jaxws module containing all webservices, or even create a separate jaxws module for each webservice. Most often, the second approach of a single, separate jaxws module, which the server module depends on, is chosen. This is mainly because of the following benefits: annotation processing must not be enabled for the entire server module one module to build all webservice artifacts at once easier to work with shared element types among webservices Figure 1. typical modularization It is important to note, that the server depends on the jaxws module, and not vice versa. The jaxws module is primarily of technical nature, meaning that it knows how to generate its WS artifacts, and also contains those. However, implementing port type beans and even implementing handler beans are typically put into the server module to the access service and database layer. On the other hand, WS clients may be put into jaxws module, because they rarely contain any project specific business logic. You may ask yourself, how the jaxws module can access the implementing port type and handlers located in the server module. That works because of the indirection via bean manager, and because there is a flat classpath at runtime. See WebServiceEntryPoint for more information. The Maven plugin 'com.sun.xml.ws:jaxws-maven-plugin' with the goal 'wsimport' is used to generate a webservice stub from a WSDL file and its referenced XSD schema files. If your Maven module inherits from the Scout module 'maven_rt_plugin_config-master', the 'jaxws' profile is available, which activates automatically upon the presence of a 'WEB-INF/wsdl' folder. Instead of inheriting from that module, you can alternatively copy the 'jaxws' profile into your projects parent POM module. This profile is for convenience purpose, and provides a ready-to-go configuration to generate webservice stubs and webservice provider artifacts. It configures the 'jaxws-maven-plugin' to look for WSDL and XSD files in the folder 'src/main/resources/WEB-INF/wsdl', and for binding files in the folder '/src/main/resources/WEB-INF/binding'. Upon generation, the stub will be put into the folder 'target/generated-sources/wsimport'. The profiles requires the Scout runtime version to be specified, and which is used to refer to org.eclipse.scout.jaxws.apt module to generate webservice provider artifacts. However, this version is typically defined in pom.xml of the parent module, because also used to refer to other Scout runtime artifacts. Listing 5. Scout version defined as Maven property 5.2.0-SNAPSHOT If your project design envisions a separate JAR module per WSDL, you simply have to set the property 'jaxws.wsdl.file' with the name of your WSDL file in the module’s pom.xml (example in Listing 6). Listing 6. wsimport configuration in pom.xml if working with a single WSDL file per JAR module YourWebService.wsdl (1) 1 name of the wsdl file Otherwise, if having multiple WSDL files in your JAR module, some little more configuration is required, namely a respective execution section per WSDL file. Thereby, the 'id' of the execution section must be unique. Scout 'jaxws' profile already provides one such section, which is used to generate the stub for a single WSDL file (see such configuration in Listing 6), and names it 'wsimport-1'. It is simplest to name the subsequent execution sections 'wsimport-2', 'wsimport-3', and so on. For each execution section, you must configure its unique id, the goal 'wsimport', and in the configuration section the respective wsdlLocation and wsdlFile. For 'wsimport' to work, wsdlLocation is not required. However, that location will be referenced in generated artifacts to set the wsdl location via @WebService and @WebServiceClient. The complete configuration is presented in Listing 7. If you decide to configure multiple WSDL files in your POM as described in Listing 7, the configuration defined in the parent POM (maven_rt_plugin_config-master) and expecting a configuration as presented in Listing 6 needs to be overridden, therefore one of your execution id needs to be wsimport-1. Listing 7. wsimport configuration in pom.xml if working with multiple WSDL files per JAR module com.sun.xml.ws jaxws-maven-plugin (1) wsimport-1 (2) wsimport (3) WEB-INF/wsdl/YourFirstWebService.wsdl (4) YourFirstWebService.wsdl (5) (6) wsimport-2 wsimport WEB-INF/wsdl/YourSecondWebService.wsdl YourSecondWebService.wsdl ... 1 declare an execution section for each WSDL file 2 give the section a unique id (wsimport-1, wsimport-2, wsimport-3, …​) 3 specify the goal 'wsimport' to build the webservice stub 4 specify the project relative path to the WSDL file 5 specify the relative path to the WSDL file (relative to 'WEB-INF/wsdl') 6 declare an execution section for the next WSDL file Further, you can overwrite any configuration as defined by 'jaxws-maven-plugin'. See http://www.mojohaus.org/jaxws-maven-plugin/ for supported configuration properties. Also, it is good practice to create a separate folder for each WSDL file, which also contains all its referenced XSD schemas. Then, do not forget to change the properties wsdlLocation and wsdlFile accordingly. By default, all XML files contained in folder 'WEB-INF/binding' are used as binding files. But, most often, you will have a global binding file, which applies to all your WSDL files, and some custom binding files different per WSDL file and XSD schema files. See how to explicitly configure binding files in Listing 8. Listing 8. explicit configuration of binding files ... ... global-bindings.xml (1) your-first-webservice-ws-bindings.xml (2) your-first-webservice-xs-bindings.xml (3) ... ... global-bindings.xml (1) your-second-webservice-ws-bindings.xml (2) your-second-webservice-xs-bindings.xml (3) 1 global binding file which applies to all XSD schema elements. See Listing 9 for an example. 2 custom binding file to customize the webservice’s WSDL components in the namespace http://java.sun.com/xml/ns/jaxws. See Listing 10 for an example. 3 custom binding file to customize the webservice’s XSD schema elements in the namespace http://java.sun.com/xml/ns/jaxb. See Listing 11 for an example. With binding files in place, you can customize almost every WSDL component and XSD element that can be mapped to Java, such as the service endpoint interface class, packages, method name, parameter name, exception class, etc. The global binding file typically contains some customization for common data types like java.util.Date or java.util.Calendar, whereas the custom binding files are specific for a WSDL or XSD schema. See XML adapters to work with java.util.Date and java.util.Calendar. Listing 9. example of global binding file in the namespace http://java.sun.com/xml/ns/jaxb By default, generated artifacts are put into the package corresponding to the element’s namespace. Sometimes, you like to control the package names, but you want to do that on a per-namespace basis, and not put all the artifacts of a webservice into the very same package. That is mainly to omit collisions, and to have artifacts shared among webservices not duplicated. Two separate binding files are required to customize WSDL components and XSD schema elements. That is because WSDL component customization is to be done in 'jaxws' namespace http://java.sun.com/xml/ns/jaxws, whereas XSD schema element customization in 'jaxb' namespace http://java.sun.com/xml/ns/jaxb. Listing 10. example of jaxws component customization in the namespace http://java.sun.com/xml/ns/jaxws (1) (2) 1 customization via jaxws namespace: http://java.sun.com/xml/ns/jaxws 2 instructs to put all webservice components (port type, service) into package org.eclipse.ws.yourfirstwebservice Listing 11. example of xsd schema element customization in the namespace http://java.sun.com/xml/ns/jaxb (1) (2) (3) 1 customization via jaxb namespace: http://java.sun.com/xml/ns/jaxb 2 instructs to put all XSD schema elements in namespace http://eclipse.org/public/services/ws/soap into package org.eclipse.ws.yourfirstwebservice 3 instructs to put all XSD schema elements in namespace http://eclipse.org/public/services/ws/common/soap into package org.eclipse.ws.common wsimport allows to directly configure the package name for files to be generated (packageName). However, this is discouraged, because all artifacts are put into the very same package. Use package customization on a per-namespace basis instead. For shared webservice artifacts, you can also use XJC binding compiler to generate those artifacts in advance, and then provide the resulting episode binding file (META-INF/sun-jaxb.episode) to wsimport. See https://www.mojohaus.org/jaxb2-maven-plugin/Documentation/v2.4/example_xjc_basic.html for more information. Annotation Processing (APT) is a tool which can be enabled to fire for annotated types during compilation. In JAX-WS Scout integration, it is used as a trigger to generate webservice port type implementations. Such an auto-generated port type implementation is called an entry point. It is to be published as the webservice’s endpoint, and acts as an interceptor for webservice requests. It optionally enforces for authentication, and makes the request to be executed in a RunContext. Then, it handles the web request to the effectively implementing port type bean for actual processing. The entry point generated simplifies the actual port type implementation by removing lot of glue code to be written by hand otherwise. Of course, this entry point is just for convenience purpose, and it is up to you to make use of this artifact. When using 'jaxws' Scout Maven profile, annotation processing is enabled for that module by default. But, an entry point for a webservice port type will only be generated if enabled for that port type, meaning that a class annotated with WebServiceEntryPoint pointing to that very endpoint interface is found in this module. Anyway, for a sole webservice consumer, it makes no sense to generate an entry point at all. In Eclipse IDE, the workspace build ignores annotation processing as configured in pom.xml. Instead, it must be enabled separately with the following files. Nevertheless, to simply run Maven build with annotation support from within Eclipse IDE, those files are not required. file description .settings/org.eclipse.jdt.core.prefs Enables APT for this module via the property org.eclipse.jdt.core.compiler.processAnnotations=enabled .settings/org.eclipse.jdt.apt.core.prefs Enables APT for this module via the property org.eclipse.jdt.apt.aptEnabled=true .factorypath Specifies the annotation processor to be used (JaxWsAnnotationProcessor) and dependent artifacts Simply run mvn clean compile on the project. If you are experiencing some problems, run with -X debug flag to get a more detailed error message. In the Eclipse IDE, there are three ways to generate webservice stubs and APT artifacts. the implicit way on behalf of the workspace build and m2e integration (automatically, but sometimes not reliable) the explicit but potentially slow way by doing a 'Update Maven Project' with 'clean projects' checked (Alt+F5) the explicit and faster way by running a Maven build for that project. Thereto, right-click on the project or pom.xml, then select the menu 'Run As | Maven build…​', then choose 'clean compile' as its goal and check 'Resolve workspace artifacts', and finally click 'Run'. Afterwards, do not forget to refresh the project by pressing F5. If the webservice stub(s) or APT artifacts are not generated (anew or at all), delete the target folder manually, and continue according to procedure number three. A possible reason might be the presence of 'target\\jaxws\\wsartifact-hash'. Then, for each webservice, a 'hash file' is computed by 'wsimport', so that regeneration only occurs upon a change of WSDL or XSD files. Stub and APT artifacts are derived resources, and should be excluded from version control. When working with Eclipse IDE, this is done automatically by eGit, because it adds derived resources to .gitignore (if configured to do so). JaxWsAnnotationProcessor is an annotation processor provided by Scout JAX-WS integration to generate an entry point for an endpoint interface during compilation. The instructions how to generate the entry point is given via a Java class or Java interface annotated with WebServiceEntryPoint annotation. In this chapter, you will learn how to publish a webservice provider via an entry point. An entry point implements the endpoint interface (or port type interface), and is published as the webservice endpoint for that endpoint interface. The entry point itself is auto generated by JaxWsAnnotationProcessor during compile time, based on instructions as given by the respective class/interface annotated with WebServiceEntryPoint annotation. The entry point is responsible to enforce authentication and to run the web request in a RunContext. In turn, the request is propagated to the bean implementing the endpoint interface. Figure 2 illustrates the endpoint’s class hierarchy and the message flow for a web request. Figure 2. Interaction of entry point and port type As you can see, both, entry point and port type implement the endpoint interface. But it is the entry point which is actually installed as the webservice endpoint, and which receives web requests. However, the webservice itself is implemented in the implementing bean, which typically is located in server module. See Modularization for more information. Upon a web request, the entry point simply intercepts the web request, and then invokes the web method on the implementing bean for further processing. See an example of an implementing port type bean, which is invoked by entry point. Do not forget to annotate the implementing bean with ApplicationScoped annotation in order to be found by bean manager. This section describes the steps required to generate an entry point. For demonstration purposes, a simple ping webservice is used, which provides a single method 'ping' to accept and return a String object. See the WSDL file of ping webservice: PingWebService.wsdl See the endpoint interface of ping webservice: PingWebServicePortType.java To generate an entry point for the webservice’s endpoint interface, create an interface as following in your jaxws project. @WebServiceEntryPoint(endpointInterface = PingWebServicePortType.class) (2) interface PingWebServiceEntryPointDefinition { (1) } 1 Create an interface or class to act as an anchor for the WebServiceEntryPoint annotation. This class or interface has no special meaning, except that it declares the annotation to be interpreted by annotation processor. 2 Reference the endpoint interface for which an entry point should be generated for. Typically, the endpoint interface is generated by 'wsimport' and is annotated with WebService annotation. It is important to understand, that the interface PingWebServiceEntryPointDefinition solely acts as the anchor for the WebServiceEntryPoint annotation. This class or interface has no special meaning, except that it declares the annotation to be interpreted by annotation processor. Typically, this class is called Entry Point Definition. If running mvn clean compile, an entry point is generated for that endpoint interface. See the entry point as generated for ping webservice: PingWebServicePortTypeEntryPoint.java If you should experience some problems in the entry point generation, refer to Build webservice stubs and APT artifacts from within Eclipse IDE, or Build webservice stubs and APT artifacts from console. This section gives an overview on how to configure the entry point to be generated. attribute description endpointInterface (mandatory) Specifies the endpoint interface for which to generate an entry point for. An endpoint interface defines the service’s abstract webservice contract, and is also known as port type interface. Also, the endpoint interface is annotated with WebService annotation. entryPointName Specifies the class name of the entry point generated. If not set, the name is like the name of the endpoint interface suffixed with EntryPoint. entryPointPackage Specifies the package name of the entry point generated. If not set, the package name is the same as of the element declaring this WebServiceEntryPoint annotation. serviceName Specifies the service name as declared in the WSDL file, and must be set if publishing the webservice via auto discovery in an EE container. Both, 'serviceName' and 'portName' uniquely identify a webservice endpoint to be published. See for valid service names in the WSDL: …​ portName Specifies the name of the port as declared in the WSDL file, and must be set if publishing the webservice via auto discovery in an EE container. Both, 'serviceName' and 'portName' uniquely identify a webservice endpoint to be published. See for valid port names in the WSDL: wsdlLocation Specifies the location of the WSDL document. If not set, the location is derived from WebServiceClient annotation which is typically initialized with the 'wsdlLocation' as provided to 'wsimport'. authentication Specifies the authentication mechanism to be installed, and in which RunContext to run authenticated requests. By default, authentication is disabled. If enabled, an AuthenticationHandler is generated and registered in the handler chain as very first handler. However, the position of that handler can be changed via order field on Authentication annotation. See Configure Authentication for more information. handlerChain Specifies the handlers to be installed. The order of the handlers is as declared. A handler is looked up as a bean, and must implement javax.xml.ws.handler.Handler interface. See Configure JAX-WS Handlers for more information. Besides the instructions which can be set via WebServiceEntryPoint annotation, it is further possible to contribute other annotations to the entry point. Simply declare the annotation of your choice as a sibling annotation to WebServiceEntryPoint annotation. In turn, this annotation will be added to the entry point as well. This may be useful to enable some vendor specific features, or e.g. to enable MTOM to efficiently send binary data to a client. That also applies for WebService annotation to overwrite values as declared in the WSDL file. Further, you can also provide your own handler chain binding file. However, handlers and authentication as declared via WebServiceEntryPoint annotation are ignored then. Handlers registered via handlerChain must be beans, meaning either annotated with @Bean or @ApplicationScoped. The binding to the concrete endpoint is done via 'endpointInterface' attribute. If a WSDL declares multiple services, create a separate entry point definition for each service to be published. Annotate the Entry Point Definition class with `IgnoreWebServiceEntryPoint' to not generate an entry point for that definition. This is primarily used while developing an entry point, or for documenting purpose. Some fields require you to provide a Java class. Such fields are mostly of the annotation type Clazz, which accepts either the concrete Class, or its 'fully qualified name'. Use the latter if the class is not visible from within jaxws module. However, if ever possible specify a Class. Because most classes are looked up via bean manager, this can be achieved with an interface located in 'jaxws' module, but with an implementation in 'server' module. The field 'authentication' on WebServiceEntryPoint configures what authentication mechanism to install on the webservice endpoint, and in which RunContext to run authenticated webservice requests. It consists of the IAuthenticationMethod to challenge the client to provide credentials, and the ICredentialVerifier to verify request’s credentials against a data source. By default, authentication is disabled. If enabled, an AuthenticationHandler is generated and registered in the handler chain as very first handler. The position can be changed via order field on Authentication annotation. The following properties can be set. method (mandatory) Specifies the authentication method to be used to challenge the client to provide credentials. By default, NullAuthenticationMethod is used to disable authentication. See IAuthenticationMethod for more information. verifier Specifies against which data source credentials are to be verified. By default, ForbiddenCredentialVerifier is used to reject any webservice request. See ICredentialVerifier for more information. order Specifies the position where to register the authentication handler in the handler chain. By default, it is registered as the very first handler. principalProducer Indicates the principal producer to use to create principals to represent authenticated users. By default, SimplePrincipalProducer is used. runContextProducer Indicates which RunContext to use to run authenticated webservice requests. By default, ServerRunContextProducer is used, which is based on a session cache, and enforces to run in a new transaction. If using container based authentication (authentication enforced by the application server), use ContainerBasedAuthenticationMethod as authentication method, and do not configure a credential verifier. Listing 12. Example configuration for an entry point definition @WebServiceEntryPoint( endpointInterface = PingWebServicePortType.class, (1) entryPointName = \"PingWebServiceEntryPoint\", entryPointPackage = \"org.eclipse.scout.docs.ws.ping\", serviceName = \"PingWebService\", portName = \"PingWebServicePort\", handlerChain = {(2) @Handler(@Clazz(CorrelationIdHandler.class)), (3) @Handler(value = @Clazz(IPAddressFilter.class), initParams = { (4) @InitParam(key = \"rangeFrom\", value = \"192.200.0.0\"), @InitParam(key = \"rangeTo\", value = \"192.255.0.0\")}), @Handler(@Clazz(LogHandler.class)), (5) }, authentication = @Authentication( (6) order = 2, (7) method = @Clazz(BasicAuthenticationMethod.class), (8) verifier = @Clazz(ConfigFileCredentialVerifier.class))) (9) @MTOM (10) 1 References the endpoint interface for which to generate an entry point for. 2 Declares the handlers to be installed on that entry point. The order is as declared. 3 Registers the 'CorrelationIdHandler' as the first handler to set a correlation ID onto the current message context. See Propagate state among Handlers and port type for more information about state propagation. 4 Registers the 'IpAddressFilter' as the second handler to filter for IP addresses. Also, this handler is parameterized with 'init params' to configure the valid IP range. 5 Registers the LogHandler as the third handler to log SOAP messages. 6 Configures the webservice’s authentication. 7 Configures the 'AuthHandler' to be put at position 2 (0-based), meaning in between of IpAddressFilter and LogHandler. By default, AuthHandler would be the very first handler in the handler chain. 8 Configures to use BASIC AUTH as authentication method. 9 Configures to verify user’s credentials against 'config.properties' file. 10 Specification of an MTOM annotation to be added to the entry point. This configuration generates the following artifacts: Figure 3. generated artifacts All artifacts are generated into the package 'org.eclipse.scout.docs.ws.ping', as specified by the definition. The entry point itself is generated into 'PingWebServiceEntryPoint.java'. Further, for each handler, a respective handler delegate is generated. That allows handlers to be looked up via bean manager, and to run the handlers on behalf of a RunContext. Also, an AuthHandler is generated to authenticate web requests as configured. The handler-chain XML file generated looks as following. As specified, the authentication handler is installed as the third handler. Listing 13. PingWebServiceEntryPoint_handler-chain.xml org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_LogHandler org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_AuthHandler org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_IPAddressFilter org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_CorrelationIdHandler The following listing shows the beginning of the entry point generated. As you can see, the handler-chain XML file is referenced via HandlerChain annotation, and the MTOM annotation was added as well. Listing 14. PingWebServiceEntryPoint.java @WebService(name = \"PingWebServicePortType\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", endpointInterface = \"org.eclipse.scout.docs.snippets.JaxWsSnippet.PingWebServicePortType\", serviceName = \"PingWebService\", portName = \"PingWebServicePort\") @MTOM @HandlerChain(file = \"PingWebServiceEntryPoint_handler-chain.xml\") public class PingWebServiceEntryPoint implements PingWebServicePortType { See listing for an example of how to configure JAX-WS handlers. JAX-WS handlers are configured directly on the entry point definition via the array field handlerChain. In turn, JaxWsAnnotationProcessor generates a 'handler XML file' with the handler’s order preserved, and which is registered in entry point via annotation handlerChain. A handler can be initialized with static 'init parameters', which will be injected into the handler instance. For the injection to work, declare a member of the type Map in the handler class, and annotate it with javax.annotation.Resource annotation. Because handlers are looked up via bean manager, a handler must be annotated with ApplicationScoped annotation. If a handler requires to be run in a RunContext, annotate the handler with RunWithRunContext annotation, and optionally specify a RunContextProducer. If the web request is authenticated upon entering the handler, the RunContext is run on behalf of the authenticated user. Otherwise, if not authenticated yet, it is invoked with the Subject as configured in scout.jaxws.provider.user.handler config property. Listing 15. Example of a JAX-WS Handler @ApplicationScoped (1) @RunWithRunContext (2) public class IPAddressFilter implements SOAPHandler { @Resource private Map m_initParams; (3) @Override public boolean handleMessage(SOAPMessageContext context) { String rangeForm = m_initParams.get(\"rangeFrom\"); (4) String rangeTo = m_initParams.get(\"rangeTo\"); // ... return true; } @Override public boolean handleFault(SOAPMessageContext context) { return true; } @Override public Set getHeaders() { return Collections.emptySet(); } @Override public void close(MessageContext context) { } } 1 Annotate the Handler with ApplicationScoped annotation, so it can be looked up via bean manager 2 Optionally annotate the Handler with RunWithRunContext annotation, so the handler is invoked in a RunContext 3 Declare a Map member annotated with Resource annotation to make injection of 'init parameters' work 4 Access injected 'init parameters' Sometimes it is useful to share state among handlers, and even with the port type. This can be done via javax.xml.ws.handler.MessageContext. By default, a property put onto message context is only available in the handler chain. To make it available to the port type as well, set its scope to 'APPLICATION' accordingly. The following listings gives an example of how to propagate state among handlers and port type. Listing 16. This handler puts the correlation ID onto message context to be accessible by subsequent handlers and the port type. @ApplicationScoped public class CorrelationIdHandler implements SOAPHandler { @Override public boolean handleMessage(SOAPMessageContext context) { context.put(\"cid\", UUID.randomUUID().toString()); (1) context.setScope(\"cid\", Scope.APPLICATION); (2) return true; } @Override public boolean handleFault(SOAPMessageContext context) { return true; } @Override public Set getHeaders() { return Collections.emptySet(); } @Override public void close(MessageContext context) { } } 1 Put the 'correlation ID' onto message context. 2 Set scope to APPLICATION to be accessible in port type. By default, the scope if HANDLER only. Listing 17. This handler accesses the 'correlation ID' as set by the previous handler. @ApplicationScoped public class CorrelationIdLogger implements SOAPHandler { @Override public boolean handleMessage(SOAPMessageContext context) { String correlationId = (String) context.get(\"cid\"); (1) // ... return true; } @Override public boolean handleFault(SOAPMessageContext context) { return true; } @Override public void close(MessageContext context) { } @Override public Set getHeaders() { return Collections.emptySet(); } } 1 Get the 'correlation ID' from message context. Listing 18. This port type accesses the 'correlation ID' as set by the previous handler. @ApplicationScoped public class CorrelationIdPortType implements PingWebServicePortType { @Override public String ping(String ping) { MessageContext currentMsgCtx = IWebServiceContext.CURRENT.get().getMessageContext(); (1) String correlationId = (String) currentMsgCtx.get(\"cid\"); (2) // ... return ping; } } 1 Get the current message context via thread local IWebServiceContext 2 Get the 'correlation ID' from message context. Scout’s JAX-WS integration already provides complete support for reading a correlation ID from the HTTP header named X-Scout-Correlation-Id of the incoming web service request and propagates it to the RunContext that executes the actual service operation. A new correlation ID is created if the HTTP header is empty or missing. The CorrelationIdHandler example above just illustrates the capabilities of a SOAPHandler. You have to implement your own handler if the consumer provides a correlation ID in another header parameter or as part of the request’s payload. Listing 19. Add Scout’s WsProviderCorrelationIdHandler to the handler chain @WebServiceEntryPoint( endpointInterface = PingWebServicePortType.class, entryPointName = \"PingWebServiceEntryPoint\", entryPointPackage = \"org.eclipse.scout.docs.ws.ping2\", serviceName = \"PingWebService\", portName = \"PingWebServicePort\", handlerChain = { @Handler(@Clazz(WsProviderCorrelationIdHandler.class)), (1) @Handler(@Clazz(LogHandler.class)), }, authentication = @Authentication( method = @Clazz(BasicAuthenticationMethod.class), verifier = @Clazz(ConfigFileCredentialVerifier.class))) 1 Add the correlation ID handler at the beginning of the handler chain to ensure that all handlers can use its value (especially the LogHandler has to be added after the correlation ID handler). The registration of webservice endpoints depends on the implementor you use, and whether you are running in an EE container with webservice auto discovery enabled. When running in an EE container, webservice providers are typically found by their presence. In order to be found, such webservice providers must be annotated with WebService annotation, and must have the coordinates 'serviceName' and 'portName' set. Still, most application servers allow for manual registration as well. E.g. if using Oracle WebLogic Server (WLS), endpoints to be published can be registered directly in 'web.xml' as a Servlet. However, this is vendor specific. Refer to the container’s documentation for more information. If not running in an EE container, the registration is implementor specific. In the following, an example for JAX-WS METRO and Apache CXF is given. During startup, JAX-WS METRO looks for the file '/WEB-INF/sun-jaxws.xml', which contains the endpoint definitions. Listing 20. WEB-INF/sun-jaxws.xml During startup, Apache CXF looks for the config file as specified in 'web.xml' via 'config-location'. See Listing 4 for more information. Listing 21. WEB-INF/cxf-jaxws.xml As the webservice endpoint, specify the fully qualified name to the entry point, and not to the implementing port type. Depending on the implementor, a HTML page may be provided to see all webservices published. For JAX-WS METRO, enter the URL to a concrete webservice, e.g. http://localhost:8080/jaxws/PingWebService. For Apache CXF, enter the base URL where the webservices are published, e.g. http://localhost:8080/jaxws. Communication with a webservice endpoint is done based on the webservice’s port generated by 'wsimport'. Learn more how to generate a webservice stub from a WSDL file. To interact with a webservice endpoint, create a concrete 'WebServiceClient' class which extends from AbstractWebServiceClient, and specify the endpoint’s coordinates ('service' and 'port') via its bounded type parameters. Listing 22. Example of a WS-Client public class PingWebServiceClient extends AbstractWebServiceClient { (1) } 1 Specify 'service' and 'port' via bounded type parameters A WS-Client can be configured with some default values like the endpoint URL, credentials, timeouts and more. However, the configuration can also be set or overwritten later when creating the InvocationContext. See also Default configuration of WS-Clients. Listing 23. Example of a WS-Client configuration public class PingWebServiceClient1 extends AbstractWebServiceClient { @Override protected Class> getConfiguredEndpointUrlProperty() { return JaxWsPingEndpointUrlProperty.class; (1) } @Override protected Class> getConfiguredUsernameProperty() { return JaxWsPingUsernameProperty.class; (2) } @Override protected Class> getConfiguredPasswordProperty() { return JaxWsPingPasswordProperty.class; (2) } @Override protected Class> getConfiguredConnectTimeoutProperty() { return JaxWsPingConnectTimeoutProperty.class; (3) } @Override protected Class> getConfiguredReadTimeoutProperty() { return JaxWsPingReadTimeoutProperty.class; (3) } } 1 Specifies the endpoint URL 2 Specifies credentials 3 Specifies timeouts A webservice operation is invoked on behalf of an invocation context, which is associated with a dedicated port, and which specifies the data to be included in the web request. Upon a webservice call, the invocation context should be discarded. Listing 24. Example of a webservice call PingWebServicePortType port = BEANS.get(PingWebServiceClient.class).newInvocationContext().getPort(); (1) port.ping(\"Hello world\"); (2) 1 Obtain a new invocation context and port via WS-Client 2 Invoke the webservice operation Invoking newInvocationContext() returns a new context and port instance. The context returned inherits all properties as configured for the WS-Client (endpoint URL, credentials, timeouts, …​), but which can be overwritten for the scope of this context. The following listing illustrates how to set/overwrite properties. Listing 25. Configure invocation context with data to be included in the web request final InvocationContext context = BEANS.get(PingWebServiceClient.class).newInvocationContext(); PingWebServicePortType port = context .withUsername(\"test-user\") (1) .withPassword(\"secret\") .withConnectTimeout(10, TimeUnit.SECONDS) (2) .withoutReadTimeout() (3) .withHttpRequestHeader(\"X-ENV\", \"integration\") (4) .getPort(); port.ping(\"Hello world\"); (5) 1 Set the credentials 2 Change the connect timeout to 10s 3 Unset the read timeout 4 Add a HTTP request header 5 Invoke the webservice operation The WS-Client provides port instances via a preemptive port cache. This cache improves performance because port creation may be an expensive operation due to WSDL/schema validation. The cache is based on a 'corePoolSize', meaning that that number of ports is created on a preemptive basis. If more ports than that number are required, they are created on demand, and additionally added to the cache until expired, which is useful at a high load. The JAX-WS specification does not specify thread safety of a port instance. Therefore, a port should not be used concurrently among threads. Further, JAX-WS API does not support to reset the Port’s request and response context, which is why a port should only be used for a single webservice call. The WS-Client supports for cancellation of webservice requests. Internally, every web request is run in another thread, which the calling thread waits for to complete. Upon cancellation, that other thread is interrupted, and the calling thread released with a WebServiceRequestCancelledException. However, depending on the JAX-WS implementor, the web request may still be running, because JAX-WS API does not support the cancellation of a web request. The invocation context allows you to access HTTP status code and HTTP headers of the last web request. final InvocationContext context = BEANS.get(PingWebServiceClient.class).newInvocationContext(); String pingResult = context.getPort().ping(\"Hello world\"); // Get HTTP status code int httpStatusCode = context.getHttpStatusCode(); // Get HTTP response header List httpResponseHeader = context.getHttpResponseHeader(\"X-CUSTOM-HEADER\"); An invocation context can be associated with request context properties, which are propagated to handlers and JAX-WS implementor. BEANS.get(PingWebServiceClient.class).newInvocationContext() .withRequestContextProperty(\"cid\", UUID.randomUUID().toString()) (1) .getPort().ping(\"Hello world\"); (2) 1 Propagate the correlation ID 2 Invoke the web operation Learn more how to access context properties from within a handler in Listing 17. To install a handler, overwrite execInstallHandlers and add the handler to the given List. The handlers are invoked in the order as added to the handler-chain. By default, there is no handler installed. The method execInstallHandlers is invoked upon preemptive creation of the port. Consequently, you cannot do any assumption about the calling thread. If a handler requires to run in another RunContext than the calling context, annotate it with RunWithRunContext annotation, e.g. to start a new transaction to log into database. If the endpoint requires to authenticate requests, an authentication handler is typically added to the list, e.g. BasicAuthenticationHandler for 'Basic authentication', or WsseUsernameTokenAuthenticationHandler for 'Message Level WS-Security authentication', or some other handler to provide credentials. public class PingWebServiceClient2 extends AbstractWebServiceClient { @Override protected void execInstallHandlers(List> handlerChain) { handlerChain.add(new BasicAuthenticationHandler()); handlerChain.add(BEANS.get(LogHandler.class)); } } The credentials as provided via InvocationContext can be accessed via request context with the property InvocationContext.PROP_USERNAME and InvocationContext.PROP_PASSWORD. The current context’s correlation ID can be forwarded to the consumed web service. Scout provides a handler that sets the X-Scout-Correlation-Id HTTP header on the outgoing request. public class PingWebServiceClient3 extends AbstractWebServiceClient { @Override protected void execInstallHandlers(List> handlerChain) { handlerChain.add(new BasicAuthenticationHandler()); handlerChain.add(BEANS.get(LogHandler.class)); handlerChain.add(BEANS.get(WsConsumerCorrelationIdHandler.class)); (1) } } 1 The handler can be at any position in the handler chain. The following properties can be set globally for all WS-Clients. However, a WS-Client can overwrite any of these values. property description default value scout.jaxws.consumer.portCache.enabled To indicate whether to use a preemptive port cache for WS-Clients. Depending on the implementor used, cached ports may increase performance, because port creation is an expensive operation due to WSDL and schema validation. The cache is based on a 'corePoolSize', meaning that that number of ports is created on a preemptive basis. If more ports than that number is required, they are created on demand and also added to the cache until expired, which is useful at a high load. true scout.jaxws.consumer.portCache.corePoolSize Number of ports to be preemptively cached to speed up webservice calls. 10 scout.jaxws.consumer.portCache.ttl Maximum time in seconds to retain ports in the cache if the 'corePoolSize' is exceeded. That typically occurs at high load, or if 'corePoolSize' is undersized. 15 minutes scout.jaxws.consumer.connectTimeout Connect timeout in milliseconds to abort a webservice request, if establishment of the HTTP connection takes longer than this timeout. A timeout of null means an infinite timeout. infinite scout.jaxws.consumer.readTimeout Read timeout in milliseconds to abort a webservice request, if it takes longer than this timeout for data to be available for read. A timeout of null means an infinite timeout. infinite Scout ships with some XML adapters to not have to work with XMLGregorianCalendar, but with java.util.Date instead. It is recommended to configure your global binding file accordingly. See Listing 9 for an example. See the adapter’s JavaDoc for more detailed information. Table 1. UTC Date adapters adapter description UtcDateAdapter Use this adapter to work with UTC xsd:dates. A UTC date is also known as 'zulu' date, and has 'GMT+-00:00'. Unlike UtcDateTimeAdapter, this adapter truncates hours, minutes, seconds and milliseconds. UtcTimeAdapter Use this adapter to work with UTC xsd:times. A UTC time is also known as 'zulu' time, and has 'GMT+-00:00'. Unlike UtcDateTimeAdapter, this adapter sets year, month and day to the epoch, which is defined as 1970-01-01 in UTC. UtcDateTimeAdapter Use this adapter to work with UTC xsd:dateTimes. A UTC time is also known as 'zulu' time, and has 'GMT+-00:00'. This adapter converts xsd:dateTime into UTC milliseconds, by respecting the timezone as provided. If the timezone is missing, the date is interpreted as UTC-time, and not local to the default JVM timezone. To convert a Date into xsd:dateTime, the date’s milliseconds are used as UTC milliseconds from the epoch, and are formatted as 'zulu' time. Table 2. Calendar adapters adapter description CalendarDateAdapter Use this adapter to work with Calendar xsd:dates without loosing timezone information. Unlike CalendarDateTimeAdapter, this adapter truncates hours, minutes, seconds and milliseconds. CalendarTimeAdapter Use this adapter to work with Calendar xsd:times without loosing timezone information. Unlike CalendarDateTimeAdapter, this adapter sets year, month and day to the epoch, which is defined as 1970-01-01 in UTC. CalendarDateTimeAdapter Adapter to convert a xsd:dateTime to a Calendar and vice versa. For both directions, the timezone information is not lost. Use this adapter if you expect to work with dates from various timezones without losing the local time. If the UTC (Zulu-time) is sufficient, use UtcDateTimeAdapter instead. Table 3. Default timezone Date adapters adapter description DefaultTimezoneDateAdapter Use this adapter to work with xsd:dates in the default timezone of the Java Virtual Machine. Depending on the JVM installation, the timezone may differ: 'GMT+-XX:XX'. Unlike DefaultTimezoneDateTimeAdapter, this adapter truncates hours, minutes, seconds and milliseconds. Whenever possible, use UtcDateAdapter or CalendarDateAdapter instead. DefaultTimezoneTimeAdapter Use this adapter to work with xsd:times in the default timezone of the Java Virtual Machine. Depending on the JVM installation, the timezone may differ: 'GMT+-XX:XX'. Unlike DefaultTimezoneDateTimeAdapter, this adapter sets year, month and day to the epoch, which is defined as 1970-01-01 in UTC. Whenever possible, use UtcTimeAdapter or CalendarTimeAdapter instead. DefaultTimezoneDateTimeAdapter Use this adapter to work with xsd:dateTimes in the default timezone of the Java Virtual Machine. Depending on the JVM installation, the timezone may differ: 'GMT+-XX:XX'. Whenever possible, use UtcDateTimeAdapter or CalendarDateTimeAdapter instead. @FunctionalInterface @WebService(name = \"PingWebServicePortType\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\") @SOAPBinding(parameterStyle = ParameterStyle.BARE) public interface PingWebServicePortType { @WebMethod(action = \"http://scout.eclipse.org/docs/ws/PingWebService/ping\") @WebResult(name = \"pingResponse\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", partName = \"parameters\") String ping(@WebParam(name = \"pingRequest\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", partName = \"ping\") String ping); } @Generated(value = \"org.eclipse.scout.jaxws.apt.JaxWsAnnotationProcessor\", date = \"2016-01-25T14:22:58:583+0100\", comments = \"EntryPoint to run webservice requests on behalf of a RunContext\") @WebService(name = \"PingWebServicePortType\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", endpointInterface = \"org.eclipse.scout.docs.ws.pingwebservice.PingWebServicePortType\") public class PingWebServicePortTypeEntryPoint implements org.eclipse.scout.docs.ws.pingwebservice.PingWebServicePortType { @Resource protected WebServiceContext m_webServiceContext; @Override public String ping(final String ping) { try { return lookupRunContext().call(new Callable() { @Override public final String call() throws Exception { return BEANS.get(PingWebServicePortType.class).ping(ping); } }, DefaultExceptionTranslator.class); } catch (Exception e) { throw handleUndeclaredFault(e); } } protected RuntimeException handleUndeclaredFault(final Exception e) { throw BEANS.get(JaxWsUndeclaredExceptionTranslator.class).translate(e); } protected RunContext lookupRunContext() { return BEANS.get(JaxWsRunContextLookup.class).lookup(m_webServiceContext); } } @ApplicationScoped public class PingWebServicePortTypeBean implements PingWebServicePortType { @Override public String ping(String ping) { return \"ping: \" + ping; } } ... org.eclipse.jdt.core.compiler.processAnnotations=enabled ... org.eclipse.jdt.apt.aptEnabled=true org.eclipse.jdt.apt.genSrcDir=target/generated-sources/annotations org.eclipse.jdt.apt.processorOptions/consoleLog=true org.eclipse.jdt.apt.reconcileEnabled=true The authentication method specifies the protocol to challenge the webservice client to provide credentials. Scout provides an implementation for BASIC and WSSE_UsernameToken. You can implement your own authentication method by implementing IAuthenticationMethod interface. Authentication method to apply Basic Access Authentication. This requires requests to provide a valid user name and password to access content. User’s credentials are transported in HTTP headers. Basic authentication also works across firewalls and proxy servers. However, the disadvantage of Basic authentication is that it transmits unencrypted base64-encoded passwords across the network. Therefore, you only should use this authentication when you know that the connection between the client and the server is secure. The connection should be established either over a dedicated line or by using Secure Sockets Layer (SSL) encryption and Transport Layer Security (TLS). Authentication method to apply Message Level WS-Security with UsernameToken Authentication. This requires requests to provide a valid user name and password to access content. User’s credentials are included in SOAP message headers. However, the disadvantage of WSSE UsernameToken Authentication is that it transmits unencrypted passwords across the network. Therefore, you only should use this authentication when you know that the connection between the client and the server is secure. The connection should be established either over a dedicated line or by using Secure Sockets Layer (SSL) encryption and Transport Layer Security (TLS). Use this authentication method when using container based authentication, meaning that webservice requests are authenticated by the application server, or a Servlet filter. Verifies user’s credentials against a data source like database, config.properties, Active Directory, or others. Scout provides an implementation for verification against users in config.properties. You can implement your own verifier by implementing ICredentialVerifier interface. If you require to run in a specific RunContext like a transaction for user’s verification, annotate the verifier with RunWithRunContext annotation, and specify a RunContextProducer accordingly. Credential verifier against credentials configured in config.properties file. By default, this verifier expects the passwords in 'config.properties' to be a hash produced with SHA-512 algorithm. To support you in password hash generation, ConfigFileCredentialVerifier provides a static Java main method. Credentials are loaded from property scout.auth.credentials. Multiple credentials are separated with the semicolon, username and password with the colon. If using hashed passwords (by default), the password’s salt and hash are separated with the dot. To work with plaintext passwords, set the property scout.auth.credentialsPlaintext to true. Example of hashed passwords: scott:SALT.PASSWORD-HASH;jack:SALT.PASSWORD-HASH;john:SALT.PASSWORD-HASH Example of plaintext passwords: scott:*;jack:;john:*","title":"Webservices with JAX-WS","component":"scout-docs","version":"23.1","name":"jax-ws","url":"/scout-docs/stable/technical-guide/working-with-data/jax-ws.html","titles":[{"text":"Functionality","hash":"functionality","id":1},{"text":"JAX-WS implementor and deployment","hash":"jax-ws-implementor-and-deployment","id":2},{"text":"JAX-WS version and implementor","hash":"jax-ws-version-and-implementor","id":3},{"text":"Running JAX-WS in a servlet container","hash":"running-jax-ws-in-a-servlet-container","id":4},{"text":"Running JAX-WS in a EE container","hash":"running-jax-ws-in-a-ee-container","id":5},{"text":"Configure JAX-WS implementor","hash":"jaxws.implementor.configuration","id":6},{"text":"JaxWsImplementorSpecifics","hash":"JaxWsImplementorSpecifics","id":7},{"text":"Configure JAX-WS Maven dependency in pom.xml","hash":"jaxws.implementor.dependency","id":8},{"text":"Configure JAX-WS servlet in web.xml","hash":"configure-jax-ws-servlet-in-web-xml","id":9},{"text":"Modularization","hash":"jaxws.modularization","id":10},{"text":"Build webservice stubs and artifacts","hash":"build-webservice-stubs-and-artifacts","id":11},{"text":"Configure webservice stub generation via wsimport","hash":"jaxws.stub.generation","id":12},{"text":"Customize WSDL components and XSD schema elements via binding files","hash":"customize-wsdl-components-and-xsd-schema-elements-via-binding-files","id":13},{"text":"Annotation Processing Tool (APT)","hash":"annotation-processing-tool-apt","id":14},{"text":"Enable Annotation Processing Tool (APT) in Eclipse IDE","hash":"enable-annotation-processing-tool-apt-in-eclipse-ide","id":15},{"text":"Build webservice stubs and APT artifacts from console","hash":"generate_artifacts_from_console","id":16},{"text":"Build webservice stubs and APT artifacts from within Eclipse IDE","hash":"generate_artifacts_from_eclipse","id":17},{"text":"Exclude derived resources from version control","hash":"exclude-derived-resources-from-version-control","id":18},{"text":"JaxWsAnnotationProcessor","hash":"jaxwsannotationprocessor","id":19},{"text":"Provide a webservice","hash":"provide-a-webservice","id":20},{"text":"The concept of an Entry Point","hash":"WebServiceEntryPoint","id":21},{"text":"Generate an Entry Point as an endpoint interface","hash":"generate-an-entry-point-as-an-endpoint-interface","id":22},{"text":"Instrument the Entry Point generation","hash":"instrument-the-entry-point-generation","id":23},{"text":"Configure Authentication","hash":"jaxws.provider.authentication","id":24},{"text":"Example of an Entry Point definition","hash":"example.entrypoint.definition","id":25},{"text":"Configure JAX-WS Handlers","hash":"jaxws.provider.handlerChain","id":26},{"text":"Propagate state among Handlers and port type","hash":"jaxws.provider.statepropagation","id":27},{"text":"JAX-WS Correlation ID Propagation","hash":"jax-ws-correlation-id-propagation","id":28},{"text":"Registration of webservice endpoints","hash":"registration-of-webservice-endpoints","id":29},{"text":"JAX-WS METRO","hash":"jax-ws-metro","id":30},{"text":"Apache CXF","hash":"jaxws.registration.endpoints.cxf","id":31},{"text":"Consume a webservice","hash":"consume-a-webservice","id":32},{"text":"Invoke a webservice","hash":"invoke-a-webservice","id":33},{"text":"Cancel a webservice request","hash":"cancel-a-webservice-request","id":34},{"text":"Get information about the last web request","hash":"get-information-about-the-last-web-request","id":35},{"text":"Propagate state to Handlers","hash":"propagate-state-to-handlers","id":36},{"text":"Install handlers and provide credentials for authentication","hash":"install-handlers-and-provide-credentials-for-authentication","id":37},{"text":"JAX-WS Client Correlation ID Propagation","hash":"jax-ws-client-correlation-id-propagation","id":38},{"text":"Default configuration of WS-Clients","hash":"jaxws.consumer.configuration","id":39},{"text":"XML adapters to work with java.util.Date and java.util.Calendar","hash":"jaxws.xmladapters","id":40},{"text":"JAX-WS Appendix","hash":"jax-ws-appendix","id":41},{"text":"PingWebService.wsdl","hash":"PingWebService.wsdl","id":42},{"text":"PingWebServicePortType.java","hash":"PingWebServicePortType.java","id":43},{"text":"PingWebServicePortTypeEntryPoint.java","hash":"PingWebServicePortTypeEntryPoint.java","id":44},{"text":"PingWebServicePortTypeBean.java","hash":"PingWebServicePortTypeBean.java","id":45},{"text":".settings/org.eclipse.jdt.core.prefs file to enable APT in Eclipse IDE","hash":"settings_org.eclipse.jdt.core.prefs","id":46},{"text":".settings/org.eclipse.jdt.apt.core.prefs file to enable APT in Eclipse IDE","hash":"settings_org.eclipse.jdt.apt.core.prefs","id":47},{"text":".factorypath file to enable APT in Eclipse IDE","hash":"factorypath","id":48},{"text":"Authentication Method","hash":"IAuthenticationMethod","id":49},{"text":"BasicAuthenticationMethod","hash":"basicauthenticationmethod","id":50},{"text":"WsseUsernameTokenMethod","hash":"wsseusernametokenmethod","id":51},{"text":"ContainerBasedAuthenticationMethod","hash":"containerbasedauthenticationmethod","id":52},{"text":"Credential Verifier","hash":"ICredentialVerifier","id":53},{"text":"ConfigFileCredentialVerifier","hash":"configfilecredentialverifier","id":54}]},"133":{"id":133,"text":"A Lookup Call is used to lookup a single or multiple Lookup Rows. Several widgets like Smart Field, List Box or Tree Box take advantage of that concept in order to provide their proposals. The most important parts of a Lookup Row are the key and the value. The key can be of any type, the text must be of type String. In addition to the key and the text a Lookup Row can also define an icon, a tooltip text, CSS classes and more. Each Smart Field in Scout references a LookupCall class. The lookup call is in charge of querying a data source and returning results for that query. Example: when you type \"f\" into a Smart Field, a lookup call could return a result which contains lookup rows starting with \"F\", like \"Faz\" and \"Foo\". The lookup call may return static (hard-coded) data which is already available in the browser, or may fetch an external data-source via HTTP, typically some kind of REST API. Depending on how your Smart Field is configured and used, the Smart Field will call different methods on the LookupCall instance and pass data to that method, like the search text the user has typed into the field. These methods are: getAll, getByText, getByKey and getByRec. getByKey(): Retrieves a single lookup row for a specific key value. Used by Smart Fields and Smart Columns to get the display text for a given key value. getByText(): Retrieve multiple lookup rows which match a certain String. Used by Smart Fields when the user starts to enter some text in the field. getAll(): Retrieves all available lookup rows. Used by Smart Fields when the user clicks on the field. getByRec(): This can only be used for hierarchical lookup calls. It retrieves all available sub-tree lookup rows for a given parent. You must implement these methods. Start with creating a sub class of LookupCall(.js). Sub class StaticLookupCall(.js) when you need a simple lookup call that operates on data that is available locally. Sub class RemoteLookupCall(.js) when you must fetch lookup data from a remote server. This class is also used in Scout Classic to start a lookup on the Scout UI Server. Note that the lookup call works with Deferreds. This means the lookup call runs in the background and does not block the UI. When the lookup call is done eventually the Deferred is resolved and the Smart Field will process the result returned by the lookup call. Lookup calls provide different method to compute the set of LookupRows : getDataByKey(): Retrieves a single lookup row for a specific key value. Used by SmartFields and SmartColumns to get the display text for a given key value. getDataByText(): Retrieve multiple lookup rows which match a certain String. Used by SmartFields when the user starts to enter some text in the field. getDataByAll(): Retrieves all available lookup rows. Used by SmartFields when the user clicks on the browse icon. getDataByRec(): This can only be used for hierarchical lookup calls. It retrieves all available sub-tree lookup rows for a given parent. The Lookup call contains attributes (accessible with getter and setter) that can be used to compute the list of lookups rows. Out of the box you have: key: contains the key value when the lookup is queried by key. text: contains the text input in case of a text lookup (typically this is the text entered by the user smart field). all: contains the browse hint in case of a lookup by all (typically when a user click on the button to see all proposal in a smart field). rec: contains the key of the parent entry, in when the children of a node are loaded. master: contains the value of the master field (if a master field is associated to the field using the lookup call). It is possible to add you own additional attributes, for example validityFrom, validityTo as date parameter. Just add them as field with getter and setter: @ClassId(\"6154090e-86ac-4c08-9769-bf3ef61c1b4b\") public class LanguageLookupCall extends LookupCall { // other stuff like serialVersionUID, Lookup Service definition... private static final long serialVersionUID = 1L; private Date m_validityFrom; private Date m_validityTo; @Override protected Class> getConfiguredService() { return ILanguageLookupService.class; } public Date getValidityFrom() { return m_validityFrom; } public void setValidityFrom(Date validityFrom) { this.m_validityFrom = validityFrom; } public Date getValidityTo() { return m_validityTo; } public void setValidityTo(Date validityTo) { this.m_validityTo = validityTo; } } In this case, you might want to set your properties before the lookup call query is sent. This can be done with the PrepareLookup event of the SmartField or the ListBox: @Override protected void execPrepareLookup(ILookupCall call) { LanguageLookupCall c = (LanguageLookupCall) call; c.setValidityFrom(DateUtility.parse(\"2012-02-26\", \"yyyy-mm-dd\")); c.setValidityTo(DateUtility.parse(\"2013-02-27\", \"yyyy-mm-dd\")); } If you follow this pattern, you will consume the values on the server by casting the call: @Override public List> getDataByAll(ILookupCall call) { LanguageLookupCall c = (LanguageLookupCall) call; Date validityFrom = c.getValidityFrom(); Date validityTo = c.getValidityTo(); List> result = new ArrayList<>(); //compute result: corresponding lookup rows (depending on validityFrom and validityTo). return result; } Delegation to the Lookup Service on server side. They are not necessarily restricted to a fix number of records. Instead, they should be favoured if the set of records is rather large. Such a LookupCall is used if the data can be provided directly without the need to make a backend call. An example of this approach is when a SmartField or a SmartColumn is configured to be used with a CodeType. The code types are cached, so it is not necessary to fetch them using a lookup service. Instead, a LocalLookupCall, in that case the CodeLookupCall, may be used to load the data. It creates the LookupRows corresponding to the codes in the CodeType. Defined with getConfiguredXxxxxx() methods. Service: Defines which service is used to retrieve lookup rows MasterRequired: Defines whether a master value must be set in order to query for multiple lookup rows Using a LookupCall in a SmartField: @Override protected Class> getConfiguredLookupCall() { return LanguageLookupCall.class; } Accessing a LookupRow directly: It is possible to access a LookupRow directly. In this example the input is a key (thisKey) and the method getDataByKey() is used. Before accessing the text, we ensure that a LookupRow has been retrieved. //Execute the LookupCall (using DataByKey) LookupCall call = new LanguageLookupCall(); call.setKey(thisKey); List> rows = call.getDataByKey(); //Get the text (with a null check) String text = null; if (rows != null && !rows.isEmpty()) { text = rows.get(0).getText(); }","title":"Lookup Call","component":"scout-docs","version":"23.1","name":"lookup-call","url":"/scout-docs/stable/technical-guide/working-with-data/lookup-call.html","titles":[{"text":"Scout JS","hash":"scout-js","id":1},{"text":"Scout Classic","hash":"scout-classic","id":2},{"text":"Members","hash":"members","id":3},{"text":"Type of Lookup Calls","hash":"type-of-lookup-calls","id":4},{"text":"With a Lookup Service","hash":"with-a-lookup-service","id":5},{"text":"Local Lookup Call","hash":"local-lookup-call","id":6},{"text":"Overview","hash":"overview","id":7},{"text":"Properties","hash":"properties","id":8},{"text":"Code examples","hash":"code-examples","id":9}]},"134":{"id":134,"text":"Table 1. HTTP Methods for RESTful Services HTTP Method CRUD Description POST Create Is most-often used to create new resources. POST is not idempotent. Making two identical POST requests will most-likely result in two resources containing the same information or the action executed twice. GET Read Only used to read or retrieve a representation of a resource. According to the HTTP specification GET (and HEAD) requests are used to read data and must not change anything! If a REST API wants to violate the specification, such requests must be protected against CSRF which is not enabled for GET and HEAD requests by default. See the Scout Bean org.eclipse.scout.rt.rest.csrf.AntiCsrfHelper for more details. GET requests are idempotent, which means that making multiple identical requests ends up having the same result as a single request (assuming the data has not been changed in the meantime). PUT Update/Replace Is most-often used to update resources. PUT expects to send the complete resource (not like PATCH) and is idempotent. In other words, if you create or update a resource using PUT and then make that same call again, the resource is still there and still has the same state as it did with the first call. If, for instance, calling PUT on a resource increments a counter within the resource, the call is no longer idempotent. In such a scenario it is strongly recommended to use POST for non-idempotent requests. PATCH Update PATCH is used to update resources. The PATCH request typically only contains the changes to the resource, not the complete resource. PATCH is not required to be idempotent. But it is possible to implement it in a way to be idempotent, which also helps prevent bad outcomes from collisions between multiple requests on the same resource. DELETE Delete Used to delete a resource. DELETE operations are idempotent concerning the result but may return another status code after the first deletion (e.g. 404 NOT FOUND). A REST resource using the JAX-RS API is implemented by a POJO class annotated with a set of annotations. The Scout module org.eclipse.scout.rt.rest contains the basic IRestResource marker interface which integrates REST resources within the Scout framework. The interface is annotated by @Bean allowing the Scout platform to load and register all REST resources automatically at startup using the Jandex class inventory. Listing 1. Example: REST resource @Path(\"example\") public class ExampleResource implements IRestResource { @GET @Path(\"{id}\") @Produces(MediaType.APPLICATION_JSON) public ExampleEntityDo getExamlpeEntity(@PathParam(\"id\") String id) { return BEANS.get(ExampleEntityDo.class) .withName(\"example-\" + id) .withValues(1); } } All available REST resources are automatically registered by the RestApplication class while the Scout platform startup. Add the following snippet to your web.xml file to expose your REST API using the /api context path: Listing 2. web.xml api org.glassfish.jersey.servlet.ServletContainer javax.ws.rs.Application org.eclipse.scout.rt.rest.RestApplication 1 api /api/* The JAX-RS application API (javax.ws.rs.core.Application) allows a REST application implementation to specify a set of classes, a set of singleton instances and a map of custom properties to be registered. The Scout implementation of the REST application class org.eclipse.scout.rt.rest.RestApplication allows contributing classes, singletons and properties without needing to extend the RestApplication class. Three different contributor interfaces are available for contributions: IRestApplicationClassesContributor to contribute any classes IRestApplicationSingletonsContributor to contribute any object instances (singletons) IRestApplicationPropertiesContributor to contribute key/value properties Listing 3. Example class contributor public static class ExampleClassContributor implements IRestApplicationClassesContributor { @Override public Set> contribute() { return Collections.singleton(MyCustomExample.class); } } Scout data objects may be used as request and response objects for REST APIs. See Data Objects] for details and examples. A REST API may be used by non-Java consumers. In order to communicate using a platform-independent format, usually REST services use JSON as transport format. The marshaller between Java data objects and JSON is abstracted in the JAX-RS specification. Using the @Produces(MediaType.APPLICATION_JSON) annotation, each REST service method specifies the produced data format. The Scout REST integration uses the popular Jackson library as default marshaller. Like a usual service call using the Scout service tunnel a REST request must ensure that processing of the request takes place within a RunContext. The HttpServerRunContextFilter or HttpRunContextFilter can be used to intercept incoming REST requests and wrap them within a Scout RunContext. HttpServerRunContextFilter can be used if a Scout server dependency is available. Optionally this filter also supports the creation of a Scout server session if this should be required (stateful). Refer to the javadoc for more details. The HttpRunContextFilter on the other hand does not provide session support and is always stateless. Therefore, a REST resource implementation is not required to deal with setting up a RunContext to wrap the request within each method. The filter must be added in the web.xml configuration file and should be configured to be called after the authentication filter. The filter expects that the authentication has been performed and that a subject is available (JAAS context). All following filters and servlets and thus also the REST resources run automatically in the correct context. Listing 4. web.xml registration example for HttpServerRunContextFilter. HttpServerRunContextFilter org.eclipse.scout.rt.server.context.HttpServerRunContextFilter session false HttpServerRunContextFilter /api/* Beside the subject and other attributes the HttpServerRunContextFilter and HttpRunContextFilter setup the Correlation ID, as well as the locale. Both values are read from the incoming request header, the caller must ensure that the headers Accept-Language and X-Scout-Correlation-Id are set accordingly. Scout REST services based on JAX-RS using the Jersey library and the Jackson JSON marshaller need a maven dependency to jersey-media-json-jackson in the application pom.xml. This enables the use of Jackson as JAX-RS marshaller with the Jersey JAX-RS implementation. Additionally, a dependency to the Scout module org.eclipse.scout.rt.rest.jackson is necessary. This module adds a set of Jackson additions in order to use the Jackson library together with Scout data objects. Listing 5. Dependency section of pom.xml to use Scout REST services with Jackson & Jersey org.glassfish.jersey.containers jersey-container-servlet-core org.glassfish.jersey.inject jersey-hk2 org.glassfish.jersey.media jersey-media-json-jackson org.eclipse.scout.rt org.eclipse.scout.rt.rest.jackson The Scout module org.eclipse.scout.rt.rest offers a set of helper classes in order to call REST services. Each REST service endpoint is represented by a specific REST resource client helper class. The (usually application scoped bean) class is used to specify the resource URL and additional properties used to build up the connection (authentication, additional headers,…​). Further it provides a call-back method for transforming unsuccessful responses into appropriate exception. At least the REST resource’s base URI must be specified: Listing 6. Example: REST resource client helper public class ExampleRestClientHelper extends AbstractRestClientHelper { @Override protected String getBaseUri() { return \"https://api.example.org/\"; (1) } @Override protected void configureClientBuilder(ClientBuilder clientBuilder) { super.configureClientBuilder(clientBuilder); clientBuilder.property(RestClientProperties.COOKIE_SPEC, CookieSpecs.STANDARD); clientBuilder.property(RestClientProperties.PROXY_URI, \"http://my.proxy.com\"); } @Override protected RuntimeException transformException(RuntimeException e, Response response) { (2) if (response != null && response.hasEntity()) { ErrorDo error = response.readEntity(ErrorResponse.class).getError(); throw new VetoException(error.getMessage()) .withTitle(error.getTitle()); } return e; } } 1 Declare base uri. 2 Custom exception transformer that is used as default strategy for all invocations prepared by this helper. (This is just for demonstration. Better extend org.eclipse.scout.rt.rest.client.proxy.AbstractEntityRestClientExceptionTransformer). Based on the helper class, an example REST resource client may be implemented: Listing 7. Example: REST resource client public class ExampleResourceClient implements IRestResourceClient { protected static final String RESOURCE_PATH = \"example\"; protected ExampleRestClientHelper helper() { return BEANS.get(ExampleRestClientHelper.class); } public ExampleEntityDo getExampleEntity(String id) { WebTarget target = helper().target(RESOURCE_PATH) .property(RestClientProperties.FOLLOW_REDIRECTS, false) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .get(ExampleEntityDo.class); (1) } public ExampleEntityDo updateExampleEntity(String id, ExampleEntityDo entity) { WebTarget target = helper().target(RESOURCE_PATH) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .post(Entity.json(entity), ExampleEntityDo.class); (2) } public void deleteExampleEntity(String id) { WebTarget target = helper().target(RESOURCE_PATH) .path(\"/{id}\") .resolveTemplate(\"id\", id); Response response = target.request().delete(); (3) response.close(); } public ExampleEntityDo getExampleEntityCustomExceptionHandling(String id) { WebTarget target = helper().target(RESOURCE_PATH, this::transformCustomException) (4) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .get(ExampleEntityDo.class); } protected RuntimeException transformCustomException(RuntimeException e, Response r) { if (r != null && r.hasEntity() && MediaType.TEXT_PLAIN_TYPE.equals(r.getMediaType())) { String message = r.readEntity(String.class); throw new VetoException(message); } return e; } } 1 HTTP GET example: Directly read response into an object. Exceptions are transformed transparently and the underlying resources are released (e.g. HTTP client). 2 HTTP POST example: Again, directly read the response into an object. 3 HTTP DELETE example: This delete operation does not send a response if it was successful. Hence close the returned Response explicitly to release underlying resources (see next line). Note: Unsuccessful responses are already handled by the REST client proxy. 4 Use custom exception transformer. The Scout REST Client implementation offers a set of properties to customize the underlying REST- and HTTP client, see org.eclipse.scout.rt.rest.client.RestClientProperties for a list of supported properties. Properties can be set on the REST client during initialization (valid for all requests): Listing 8. Setting properties for REST Client for all requests @Override protected void configureClientBuilder(ClientBuilder clientBuilder) { super.configureClientBuilder(clientBuilder); clientBuilder.property(RestClientProperties.COOKIE_SPEC, CookieSpecs.STANDARD); clientBuilder.property(RestClientProperties.PROXY_URI, \"http://my.proxy.com\"); } Some properties (see JavaDoc for details) may also be set on a request level: Listing 9. Setting properties for REST Client for a single requests, e.g. setting FOLLOW_REDIRECTS to false public ExampleEntityDo getExampleEntity(String id) { WebTarget target = helper().target(RESOURCE_PATH) .property(RestClientProperties.FOLLOW_REDIRECTS, false) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .get(ExampleEntityDo.class); (1) } There are multiple possibilities to configure a REST client to use a HTTP proxy: Directly on REST client instance: see org.eclipse.scout.rt.rest.client.RestClientProperties.PROXY_URI (and PROXY_USER / PROXY_PASSWORD properties) Using the dynamic Scout org.eclipse.scout.rt.shared.http.proxy.ConfigurableProxySelector, see example configuration: Listing 10. Setting HTTP proxy for outgoing requests to *.example.com scout.http.proxyPatterns[0]=.*\\.example.com(:\\d+)?=127.0.0.1:8888 REST and the underlying HTTP protocol do not provide an explicit way to cancel running requests. Typically, a client terminates its connection to the HTTP server if it is no longer interested in the response. REST resources would have to monitor TCP connections and interpret a close as cancellation. Depending on the abstraction of the REST framework, connection events are not passed through and the cancellation is only recognized when the response is written to the closed connection. Until this happens, however, backend resources are used unnecessarily. Scout’s standard REST integration implements the described approach by closing the connection without any further action. It is not possible to react to this on the resource side. In order to enable a real cancellation, Scout also provides all necessary elements to assign an ID to a request, to manage these IDs in the backend during execution and to cancel transactions in the event of a cancellation. The following steps must be taken for their use: Scout does not impose nor provide a cancellation resource. It must be implemented by the project: Listing 11. Example: REST cancellation Resource @Path(\"cancellation\") public class CancellationResource implements IRestResource { @PUT @Path(\"{requestId}\") public void cancel(@PathParam(\"requestId\") String requestId) { String userId = BEANS.get(IAccessControlService.class).getUserIdOfCurrentSubject(); (1) BEANS.get(RestRequestCancellationRegistry.class).cancel(requestId, userId); (2) } } 1 Resolve the userId of the current user. This is optional and may depend on the current project. 2 Invoke the cancellation registry for the given requestId and userId. Listing 12. Example: REST cancellation Resource Client public class CancellationResourceClient implements IRestResourceClient { protected static final String RESOURCE_PATH = \"cancellation\"; protected CancellationRestClientHelper helper() { return BEANS.get(CancellationRestClientHelper.class); } public void cancel(String requestId) { WebTarget target = helper().target(RESOURCE_PATH) .path(\"{requestId}\") .resolveTemplate(\"requestId\", requestId); Response response = target.request() .put(Entity.json(\"\")); response.close(); } } To assign an ID to each request, an appropriate client request filter must be registered: Listing 13. Example: Register Client Request Cancellation Filter in REST Client Helper public class CancellationRestClientHelper extends AbstractRestClientHelper { @Override protected String getBaseUri() { return \"https://api.example.org/\"; } @Override protected void registerRequestFilters(ClientBuilder clientBuilder) { super.registerRequestFilters(clientBuilder); clientBuilder.register(new RestRequestCancellationClientRequestFilter(this::cancelRequest)); (1) } protected void cancelRequest(String requestId) { BEANS.get(CancellationResourceClient.class).cancel(requestId); (2) } } 1 Register the RestRequestCancellationClientRequestFilter that assigns a UUID to every request, which is sent as an HTTP header named X-ScoutRequestId. 2 Binds the actual cancel-operation to the cancel Method (in this case the cancellation rest resource client from above). Requests arriving at the backend need to be registered in the cancellation registry. This is done by a servlet filter (Note: REST container filters would have two issues: 1. there is no real interceptor around the resource call, but only a ContainerRequestFilter that is invoked before and a ContainerResponseFilter which is invoked after the the request is passed to the resource. 2. Cancellation in Scout is tied to an ITransaction that are managed by a RunContext and observed and controlled by a RunMonitor. Depending on sub-RunContexts and their transaction isolation it might happen, that the transaction visible in a container filter is not controlled by the currently active RunMonitor. Therefore, a cancel request would not cancel the transaction.) Listing 14. Example: Register client request cancellation filter in Rest Client Helper public class RestRequestCancellationServletFilter extends AbstractRestRequestCancellationServletFilter { @Override protected Object resolveUserId(HttpServletRequest request) { return BEANS.get(IAccessControlService.class).getUserIdOfCurrentSubject(); (1) } } 1 Implement the same userId Lookup as in the CancellationResource. Finally, declare the servlet filter in your web.xml: Listing 15. web.xml registration example for RestRequestCancellationFilter. RestRequestCancellationFilter org.eclipse.scout.docs.snippets.rest.RestRequestCancellationServletFilter RestRequestCancellationFilter /api/* Make sure the cancellation filter is registered after the HttpServerRunContextFilter.","title":"REST","component":"scout-docs","version":"23.1","name":"rest","url":"/scout-docs/stable/technical-guide/working-with-data/rest.html","titles":[{"text":"REST Resource Conventions","hash":"rest-resource-conventions","id":1},{"text":"REST Resource Provider","hash":"rest-resource-provider","id":2},{"text":"REST Resource Registration","hash":"rest-resource-registration","id":3},{"text":"Extend REST Application","hash":"extend-rest-application","id":4},{"text":"Data Objects","hash":"data-objects","id":5},{"text":"Marshaller","hash":"marshaller","id":6},{"text":"RunContext","hash":"runcontext","id":7},{"text":"Dependency Management","hash":"dependency-management","id":8},{"text":"REST Client","hash":"rest-client","id":9},{"text":"REST Client Properties","hash":"rest-client-properties","id":10},{"text":"REST Client HTTP Proxy","hash":"rest-client-http-proxy","id":11},{"text":"REST Cancellation Support","hash":"rest-cancellation-support","id":12},{"text":"Cancellation Resource and Resource Client","hash":"cancellation-resource-and-resource-client","id":13},{"text":"Install Cancellation Request Filter","hash":"install-cancellation-request-filter","id":14},{"text":"Implement Cancellation Servlet Filter","hash":"implement-cancellation-servlet-filter","id":15}]},"135":{"id":135,"text":"These pages document Eclipse Scout. Here you will find all Scout 23.2 related documentation, from getting started to architecture details to release upgrades. If you are interested in the documentation of another Scout version, use the version selector on the bottom left of this page. For older versions, please see Archived Versions. Read the Get Started Guide first to learn the difference between Scout Classic and Scout JS. This will help you to decide which tutorial is the right one to start with. Once you have completed the Hello Scout tutorial, you can continue with one of the following tutorials. Scout Classic Tutorials Hello Scout Classic Deploy to Tomcat One Day Tutorial Scout JS Tutorials Hello Scout JS Hello Scout JS Full Stack Hello Scout JS with CDN If you want to get serious about Scout, you should definitely have a look at the following documents. You will learn about best practices and architecture details and even find How Tos for some specific topics. To learn more about the functionality of the Scout plugins for various IDEs, have a look at the Scout SDK documents. Technical Guide Scout SDK Please read the following documents when doing a Scout release upgrade. The Release Notes describe the new features of the release. The Migration Guide explains how to migrate your code for a proper upgrade. Release Notes Migration Guide Scout is a mature framework and since we release at least one major version once a year, there are quite a few versions out there. This documentation describes Version 22 and newer. Older Scout Versions are not part of this documentation platform and have been archived. You’ll find them under the following links: Version 11 Browse Version 10 Browse Version 9 Browse Version 8 Browse Version 7 Browse Version 6 Browse Version 5.2 Browse Version 5 Browse Version 4 Browse Version 3.9 Browse","title":"Overview","component":"scout-docs","version":"23.2","name":"index","url":"/scout-docs/next/index.html","titles":[{"text":"Get Started","hash":"get-started","id":1},{"text":"Deepen Your Knowledge","hash":"deepen-your-knowledge","id":2},{"text":"Upgrade Your Version","hash":"upgrade-your-version","id":3},{"text":"Archived Versions","hash":"archived-versions","id":4}]},"136":{"id":136,"text":"This guide gets you through the “Hello World” Eclipse Scout application and shows you how to import the Scout demo application into your Eclipse IDE. In the second part, the Scout tooling available in the Eclipse IDE is described. Getting Started Scout Tooling Do you want to improve this document? Have a look at the sources on GitHub.","title":"Eclipse Scout User Guide","component":"scout-docs","version":"23.2","name":"scout_user_guide","url":"/scout-docs/next/eclipse-help/scout_user_guide.html","titles":[]},"137":{"id":137,"text":"The Eclipse Scout package also includes Scout specific tooling, the Scout SDK that is available for the Eclipse IDE. The Scout Tooling provides wizards to create new project and application components, adds code assistance to the Java Editor and comes with a NLS editor to manage all translated text entries of the application. Thanks to this tooling, developing Scout applications is made simpler, more productive and also more robust. Initially, a solid understanding of Java (and JavaScript for Scout JS) is sufficient to start developing Scout applications and only a rough understanding of the underlying Maven/Web technologies is required. The Scout SDK also helps developers to become more productive. Many repetitive and error prone tasks run automatically in the background or are taken care of by the component wizards of the Scout SDK. The application code created by the Scout SDK wizards helps to ensure that the resulting Scout application has a consistent and robust code base and is well aligned with the application model defined by the Scout runtime framework. To learn more about the wizards and the editor support follow the links provided below. Scout Wizards Java Editor Support NLS Editor Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk","url":"/scout-docs/next/eclipse-help/sdk.html","titles":[{"text":"Scout Tooling","hash":"_scout_tooling","id":1},{"text":"Effects on Productivity and Code Quality","hash":"effects-on-productivity-and-code-quality","id":2},{"text":"Learn More","hash":"learn-more","id":3}]},"138":{"id":138,"text":"Scout uses the standard Java Editor of the Eclipse IDE. To ease the development, the Scout SDK provides additional features for the Java Editor. To create new Scout components that are represented by inner classes in the Scout framework, the Scout tooling extends the Java content assist of the Eclipse Java editor. The offered proposals are context specific. Depending on the current cursor position in the Java editor, possible Scout components are added to the proposal list. In a class representing a group box in a form, the Scout content assist adds proposals for various form fields. In a table class the content assist adds proposals to add table columns or context menus. Those proposals trigger the creation of inner classes for form fields, table columns or codes. The Eclipse content assist can be started by typing Ctrl+Space. To add additional form fields to a form the current edit position needs to be inside of a Scout group box. Typing Ctrl+Space then provides access to the most frequently used Scout widgets as shown in Figure 1. Figure 1. Proposals to create new form fields in a GroupBox When a template is selected, it is possible to customize it by navigating between the different Edit-Groups with the Tab Key (this works exactly like other templates in the Eclipse Editor). With this mechanism you can quickly define the class name, the parent class and other properties. To exit the Edit-Mode just press Enter. For adding new columns in a table set the current edit position inside a Scout table. The Scout table itself may be located inside of a TableField as shown in Figure 2 or can also be located inside of a Scout TablePage. Figure 2. Proposals to create new columns in a Table Next to adding columns the content assist shown in Figure 2 can also be used to add key stroke actions and menus to tables. Adding new Codes to an existing CodeType is supported by the content assist as shown in Figure 3. Figure 3. Proposals to create new codes in a CodeType When the the current edit position is inside the String parameter of the TEXTS.get() code, the content assist (opened with Ctrl + Space) provides support for the NLS entries as shown in Figure 4. Figure 4. Proposals corresponding to NLS Support. Selecting one of proposal entries (like \"DateOfBirth\" in the example) shows the available translations on the right side. To select a specific proposal entry you may double click on the entry or hit the Enter key. To create a new text entry select New text…​ at the end of the proposal list. Selecting \"New text…​\" then opens the NLS Entry Wizard. Go back to the Scout Tooling. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_editor_java","url":"/scout-docs/next/eclipse-help/sdk_editor_java.html","titles":[{"text":"Additions to the Java Editor","hash":"_additions_to_the_java_editor","id":1},{"text":"Create new Form Fields","hash":"sec-sdk_new_form_field","id":2},{"text":"Create new Table Columns","hash":"sec-sdk_new_table_column","id":3},{"text":"Create new Codes","hash":"create-new-codes","id":4},{"text":"NLS-Entry support","hash":"nls-entry-support","id":5}]},"139":{"id":139,"text":"The NLS Editor allows to edit the different properties files containing the translated text entries. It is a efficient way to edit all the property files for multilingual texts in one go. Search for the *.nls files in the shared projects. Select Open With NLS Editor in the context menu The screenshot below shows the opened NLS editor. In the first column the key values are shown that are used in accessing translations through TEXTS.get(\"key\"). The second columns holds the default translations followed by columns holding the translations for other translated languages. Actions on the top right corner: Refresh NLS Project Reload the content of the editor. Show NLS entry usage For each row, search in the Java code where the NLS Key is used. Results are displayed in the first column. New entry…​ Opens the New Text Entry Wizard New language…​ Opens the Add a Language Wizard Import…​ Import the NLS entries of an external file Export…​ Export the NLS entries to an external file Import and Export requires additional components. Hide inherited rows checkbox On the top of each column, the text fields allow you to filter the entries in the table. With the Reset button on the right you will empty those filters. The entries in the table can be directly edited by pressing F2 or double-clicking into a text cell. On each row it is possible to call following context menu: Modify Entry Opens the New Text Entry Wizard Find references to 'Xxx' Search in the Java code where the NLS Key is used. Remove Xxx Delete the NLS Entry from the files The mapping between the properties files is registered in the \"Text Provider Service\" class. Per default the files follow this pattern: .shared/src/main/resources//texts/Texts.properties where: is a chain of folders following the same convention as the Java source files with the package name. For example the org.eclipse.contacts.shared project uses org/eclipse/scout/contacts/shared as path. is an identifier of the language and the country. Some possible file names: Texts.properties is the default language Texts_de.properties is for German Texts_fr_BE will be for French in Belgium If NLS keys are used in the code that do not exist in a properties file, an ugly placeholder is displayed to the user. To find such missing translations the Menu Scout → Search missing text keys…​ may be handy. The result is listed in the Eclipse Search view. The search also takes the scope of each NLS key into account. So that the key is considered to be available there must be a TextProviderService with that key on the classpath of that module. Reported false positives can be suppressed using the following comment at the end of the corresponding line: NO-NLS-CHECK. Matches on that line are then not reported in future searches anymore. Go back to the Scout Tooling. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_editor_nls","url":"/scout-docs/next/eclipse-help/sdk_editor_nls.html","titles":[{"text":"NLS Editor","hash":"_nls_editor","id":1},{"text":"Accessing the NLS Editor","hash":"accessing-the-nls-editor","id":2},{"text":"The NLS Editor","hash":"the-nls-editor","id":3},{"text":"Action Buttons","hash":"action-buttons","id":4},{"text":"Default Mapping to Properties Files","hash":"default-mapping-to-properties-files","id":5},{"text":"Find missing NLS Keys","hash":"find-missing-nls-keys","id":6}]},"140":{"id":140,"text":"The Scout SDK provides a set of wizards to create new Scout projects and various components for your Scout applications. To start any of these wizards press Ctrl+N or use menu File New Other…​. In the first wizard step type \"Scout\" into the Wizards field as shown in Figure 1. Figure 1. Selecting Scout Wizards in the Eclipse wizard dialog With the New Project Wizard a new Scout client server application project is created from scratch. To create new components such as Scout forms or pages the following component wizards are provided by the Scout SDK. New Form Wizard, includes creation of a form, a form data, a service and permissions. New Page Wizard, includes creation of a page and a page data. New LookupCall Wizard, includes creation of a lookup call and a lookup service. New CodeType Wizard New Permission Wizard For the Scout NLS support two additional wizards are provided by the Scout SDK. Content assistance for the String parameter in TEXTS.get() is added to the Java editor. There, the New Text Entry Wizard can be used to add translated texts. Adding additional translated languages with the Add a Language Wizard is handled in the NLS Editor. Go back to the Scout Tooling. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_wizard","url":"/scout-docs/next/eclipse-help/sdk_wizard.html","titles":[{"text":"Scout Wizards","hash":"_scout_wizards","id":1},{"text":"New Project Wizard","hash":"new-project-wizard","id":2},{"text":"Wizards for Scout Components","hash":"wizards-for-scout-components","id":3},{"text":"NLS Wizards","hash":"nls-wizards","id":4}]},"141":{"id":141,"text":"The New Scout CodeType wizard can be used to create a new code type classes. To start the wizard use File New Other…​ or press Ctrl+N as described in section Scout Wizards. Figure 1. The new CodeType wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.shared.helloworld has been selected in the Package Explorer. The wizard fields that then needs to be filled in manually are the Name, the First Argument and the Second Argument fields. By clicking on the Finish button the wizard is started and the specified component is created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven shared module used for the creation of the code type class. The default value is the src/main/java folder in the Maven shared module. Package The Java package that will contain the code type class. The Scout SDK will try to guess the package name from the current context. Name The name of the code type class. According to Scout conventions the class name ends with the suffix CodeType. Super Class The super class for the form. AbstractCodeType is the default value. First Argument The class used to identify this code type. Second Argument The class to identify individual codes within this code type. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.shared The MyCodeType class in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_wizard_code-type","url":"/scout-docs/next/eclipse-help/sdk_wizard_code-type.html","titles":[{"text":"New CodeType Wizard","hash":"_new_codetype_wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"142":{"id":142,"text":"The New Form wizard is be used to create a new form including a form data, permissions and and related service. To start the wizard use File New Other…​ or press Ctrl+N. Figure 1. The new Form Wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the form class. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the form class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared and server modules. Name The name of the form class. According to Scout conventions the class name ends with the suffix Form. Super Class The super class for the form. AbstractForm is the default value. Create FormData If ticked, a form data class will be created in the shared module. Create Service If ticked, a service interface is created in the shared module and a service implementation is created in the Maven server module. Create Permissions If ticked, read and update permissions are created in the Maven shared module. Shared Source Folder The source folder of the Maven shared module used for creation of the form data, the service interface and the permission classes. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for the service class creation. The default value is the src/main/java folder in the Maven server module. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyForm form class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared In folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld The IMyService service interface The ReadMyPermission permission class The UpdateMyPermission permission class The MyFormData form data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService service class in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_wizard_form","url":"/scout-docs/next/eclipse-help/sdk_wizard_form.html","titles":[{"text":"New Form Wizard","hash":"new-form-wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"143":{"id":143,"text":"The Add a Language wizard can be used to create additional translation files in order to localize the user interface. It can be started from the The NLS Editor. It is possible to crate one translation file that corresponds to the user locale, which are specified by a language and optionally a country (de, de_DE, de_CH and so on). Language The language of the locale. Country (optional) The country of the locale. Folder The location where the Texts properties file will be created. Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_wizard_language","url":"/scout-docs/next/eclipse-help/sdk_wizard_language.html","titles":[{"text":"Add a Language Wizard","hash":"_add_a_language_wizard","id":1}]},"144":{"id":144,"text":"The New Scout Lookup Call wizard can be used to create a lookup call and a corresponding lookup service. To start the wizard use File New Other…​ or press Ctrl+N as described in section Scout Wizards. Figure 1. The new LookupCall wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.shared.helloworld has been selected in the Package Explorer. The only wizard fields that then needs to be filled in manually are the Name and the Key Class fields. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven shared module used for the creation of the lookup call class. The default value is the src/main/java folder in the Maven shared module. Package The Java package that will contain the lookup call class. The Scout SDK will try to guess the package name from the current context and derive a matching package names for the Maven server module. Name The name of the lookup call class. According to Scout conventions the class name ends with the suffix LookupCall. Super Class The super class for the form. LookupCall is the default value. Key Class The class to be used for key values of the lookup call. Server Source Folder The source folder of the Maven server module used for the service class creation. The default value is the src/main/java folder in the Maven server module. Service Super Class The super class for the lookup service associated with this lookup call. The default value is AbstractLookupService. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.shared In folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld The MyLookupCall class The IMyLookupService interface In Maven module helloworld.server The MyLookupService service class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.server.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_wizard_lookupcall","url":"/scout-docs/next/eclipse-help/sdk_wizard_lookupcall.html","titles":[{"text":"New LookupCall Wizard","hash":"_new_lookupcall_wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"145":{"id":145,"text":"The NLS Entry wizard can be used to create or to modify a text entry that will be displayed to the user and the needs to be localized. It can be opened from: The NLS Editor by selecting \"New Entry\" or \"Modify Entry\". The Java Editor by using the proposal editor inside the string parameter of the TEXTS.get(\"\") code. Figure 1. Adding a new text with the New Entry wizard. Key Name This field holds the text key that is used to access translated text. default This field holds the default translated text for the key. Make sure to at least provide a translated text in this tab. French (France) Additional tabs to enter translations for other languages may be present. Adding additional languages is described in the text for the NLS editor. Copy key to the clipboard Select this checkbox to copy the key name to the clipboard and paste it later in your code. Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_wizard_nls-entry","url":"/scout-docs/next/eclipse-help/sdk_wizard_nls-entry.html","titles":[{"text":"NLS Entry Wizard","hash":"nls-entry-wizard","id":1}]},"146":{"id":146,"text":"The New Scout Page wizard can be used to create a new page and related classes. To start the wizard use File New Other…​ or press Ctrl+N. Figure 1. The new Page Wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the page. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the page class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared module. Name The name of the page class. According to Scout conventions the class name ends with the suffix TablePage (for subclasses of AbstractPageWithTable) or NodePage (for AbstractPageWithNodes). Super Class The super class for the form. AbstractPageWithTable is the default value. Shared Source Folder The source folder of the Maven shared module used for creation of the page data and the service interface. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for creation of the service implementation. The default value is the src/main/java folder in the Maven server module. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyTablePage page class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared The IMyService service interface in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld MyTablePageData page data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService implementation in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_wizard_page","url":"/scout-docs/next/eclipse-help/sdk_wizard_page.html","titles":[{"text":"New Page Wizard","hash":"new-page-wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"147":{"id":147,"text":"The New Scout Permission wizard can be used to create a new permission classes. To start the wizard use File New Other…​ or press Ctrl+N as described in section Scout Wizards. Figure 1. The new Permission wizard In the case of Figure 1 the package org.eclipse.scout.apps.helloworld.shared.helloworld has been selected in the Package Explorer. The only wizard fields that then needs to be filled in manually is the Name fields. By clicking on the Finish button the wizard is started and the specified component is created. Most of the fields of the Figure 1 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven shared module used for the creation of the permission class. The default value is the src/main/java folder in the Maven shared module. Package The Java package that will contain the permission class. The Scout SDK will try to guess the package name from the current context. Name The name of the permission class. According to Scout conventions the class name ends with the suffix Permission. Super Class The super class for the form. BasicPermission is the default value. In the Figure 1 example shown above the Scout SDK will create the following components. In Maven module helloworld.shared The MyPermission class in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_wizard_permission","url":"/scout-docs/next/eclipse-help/sdk_wizard_permission.html","titles":[{"text":"New Permission Wizard","hash":"_new_permission_wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"148":{"id":148,"text":"The New Scout Project wizard can be used to create a new Scout project from scratch. To open the wizard press Ctrl+N or use File New Other…​ and type \"Scout\" into the Wizards search field. Then, select the entry \"Scout Project\" and click on Next. This leads to the initial dialog of the New Scout Project wizard as shown in Figure 1. Figure 1. The new Project Wizard A detailed description of the indiviudal wizard fields of Figure 1 is provided in the next section. By clicking on the Finish button the wizard is started and a new Scout client server application is created in the form of a Maven multi-module project. All fields of the Figure 1 are initially filled with default values. Group Id Maven groupId used for all created projects. The default value is org.eclipse.scout.apps. Artifact Id Maven artifactId for the parent project. The additional projects are derived from this name. The default value is helloworld. Display Name The name of the application presented to the user. This name is shown in the Browser title bar. The default value is \"My Application\" With the Project Location group box, you can control where the project will be created. Unchecked the Use default Workspace location checkbox to enter an other value in the Target Directory Field. The Browse…​ button can help you to find the appropriate path. With the Figure 1 wizard a complete Maven multi-module project is created. Using the default artifact Id helloworld the following Maven modules are created. Maven module helloworld Contains the project’s parent pom.xml file Maven module helloworld.client Contains model components of the client application in src/main/java and model tests in src/test/java. The class HelloWorldForm in package org.eclipse.scout.apps.helloworld.client.helloworld is an example of a model class. Maven module helloworld.shared Contains components needed in both the client and the server application. For examples see the IHelloWorldService interface in src/main/java and class HelloWorldFormData in src/generated/java. The Texts.nls file that can be opened in the Scout NLS Editor. Maven module helloworld.server Contains the model components of the server application in src/main/java and model tests in src/test/java. The class HelloWorldService in package org.eclipse.scout.apps.helloworld.server.helloworld is an example of such a model class. Maven module helloworld.server.app.dev Contains all components to run the Scout server application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the Scout server application. The file pom.xml bundles the Jetty web server with the server application. The file [webapp] dev server.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.server.app.war Contains all components to create a Scout server WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the server configuration. The file pom.xml is used to build the Scout server WAR file. Maven module helloworld.ui.html Contains servlet filters and the HTML pages as well as custom CSS and JavaScript files for the Scout UI Server. See class UiServletFilter in src/main/java and folder WebContent in source/main/resources. The file js build.launch contains the launch configuration for the Eclipse IDE that executes the JavaScript build. Maven module helloworld.ui.html.app.dev Contains all components to run the Scout UI application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the application. The file web.xml in folder src/main/webapp contains the web configuration for the application. The file pom.xml bundles the Jetty web server with the application. The file [webapp] dev ui.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.ui.html.app.war Contains all components to create a Scout UI WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the application configuration. The file web.xml in folder src/main/webapp contains the web configuration. The file pom.xml is used to build the Scout UI WAR file. Go back to the Scout Wizards. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"sdk_wizard_project","url":"/scout-docs/next/eclipse-help/sdk_wizard_project.html","titles":[{"text":"New Scout Project Wizard","hash":"new-scout-project-wizard","id":1},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":2},{"text":"Created Components","hash":"created-components","id":3}]},"149":{"id":149,"text":"To get started with Eclipse Scout, we propose that you first go through the “Hello World” tutorial and then follow the tutorial to import the existing Scout demo applications. Hello World Tutorial Import the Scout Demo Applications Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"tutorial","url":"/scout-docs/next/eclipse-help/tutorial.html","titles":[{"text":"Getting Started","hash":"getting-started","id":1}]},"150":{"id":150,"text":"With this tutorial you will learn how to import the Scout Demo applications into your workspace. The tutorial consists of the following two parts: Install the Scout Demo applications Run the Scout demo from your IDE In the first part of the tutorial we import the demo applications using the Oomph Eclipse installer tool. In the Eclipse IDE open the Import wizard with menu File Import…​. This opens the dialog shown in Figure 1. Next, under folder Oomph select the node Projects into Workspace and click the Next button. Figure 1. The Import Wizard in Eclipse. Now select Scout Demo App, check in the table below that 'Stream' shows the desired Scout version and click Next. Figure 2. Select Scout Demo App On the next wizard page, select the Show all variables check box in the bottom left corner. Figure 3. \"Variables\" Step of the Importer. Before you proceed make sure that all shown variables are set appropriately for your use case. Git clone location rule: “Located in a folder named '.git/' within the workspace folder” Target Platform: “None” JRE Location: Path to your Java 11 or 17 JRE Scout Demo App Github repository: “HTTPS (read-only, anonymous)” Once you finished setting the variables click Next. This leads to the Confirmation dialog. This last step can be completed by clicking on Finish. The Oomph installer first makes sure that all necessary Scout components and M2E connectors are available. In case one or more components are missing, Oomph will first download and install them. This triggers a restart request as shown in Figure 4. If the dialog does not automatically appear, click on the small icon in the status bar on the bottom as shown in Figure 5. Figure 4. Restart of the IDE after installation. Figure 5. Status icon To complete the installation click Finish. If your IDE needs to be restarted, select the same workspace in the Eclipse Launcher dialog. After the restart Oomph will continue to download and install the Scout demo applications showing the progress in the Eclipse importer dialog. Once the download and installation has completed you can close the dialog with clicking the Finish button. After the Setup of the \"Scout Demo App\", a lot of projects are materialized in the workspace (see the screenshot in Figure 6). The projects are organized in three working sets: Demo App: Contacts The projects corresponding to the Scout Demo Application \"Contacts\". Demo App: Widgets The projects corresponding to the Scout Demo Applications \"Widgets\" and \"JSWidgets\". Demo Docs The scout documentation and the project containing most of the code snippets included in the documentation. Figure 6. Projects in the workspace after the \"Scout Demo App\" setup. If you do not see the workingsets, you might need to select \"Top Level Elements Working Sets\" from the Menu as displayed in Figure 7 Figure 7. Select \"Working Sets\" as \"Top Level Elements\" in the \"Package Explorer\". With the Scout demo installed in our workspace we are now ready to start the applications from within our IDE. Open the Run As menu as shown in Figure 8. There are 3 launch groups available, one for each application. Each launch group will start all the necessary builds and servers. Now select [contacts] all (Windows or Unix variant) to run the Contacts application. Figure 8. Start the Contacts application. Once the startup sequence of the Contacts application has completed the console view in your Eclipse IDE should look like Figure 9. Figure 9. Console view after starting the Contacts demo. With the Contacts demo running in the IDE open the application in your favorite browser via URL http://localhost:8082. To get the screen shown in Figure 10 first click on the [folder]_Persons node and then double click on the ''Alice'' row. Figure 10. The Contacts application. Play with the Contacts application. This provides a good overview of a typical Scout application. You can browse through the data, open different forms and add/change entities. Also have a quick look at the code. The list on the left side of the application containing the nodes Persons and Organizations is implemented in class ContactOutline as shown in Listing 1. Listing 1. ContactOutline implementation. @ClassId(\"303c0267-3c99-4736-a7f5-3097c5e011b6\") public class ContactOutline extends AbstractOutline { @Override protected void execCreateChildPages(List> pageList) { // pages to be shown in the navigation area of this outline pageList.add(new PersonTablePage()); (1) pageList.add(new OrganizationTablePage()); } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Contacts\"); } @Override protected String getConfiguredIconId() { return Icons.Folder; } } If you have clicked on the Persons node a page with all available persons is shown. This page is implemented in class PersonTablePage and the dialog to show/edit persons is implemented in class PersonForm. This is the end of the getting started guide. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"tutorial_existingdemo","url":"/scout-docs/next/eclipse-help/tutorial_existingdemo.html","titles":[{"text":"Import the Scout Demo Applications","hash":"_import_the_scout_demo_applications","id":1},{"text":"Install the Scout Demo Applications","hash":"install-the-scout-demo-applications","id":2},{"text":"Setup result","hash":"setup-result","id":3},{"text":"Run the Contacts Demo Application","hash":"run-the-contacts-demo-application","id":4},{"text":"Start the application in the IDE","hash":"start-the-application-in-the-ide","id":5},{"text":"Use the Contacts Demo in a Browser","hash":"use-the-contacts-demo-in-a-browser","id":6},{"text":"What’s Next?","hash":"whats-next","id":7}]},"151":{"id":151,"text":"With this tutorial you will learn how to create your first Scout application. First, Node.js needs to be installed as Scout uses it to build web assets. So if you don’t have it yet, visit the Node.js download site, choose the package for your platform and install it on your local machine. Make sure the Node.js installation is on the PATH. You can verify it by using your command line: c:\\> node -v v18.12.1 Scout uses pnpm 7 as package manager. Therefore, install it into your Node installation by using your command line: npm install -g pnpm@7.16.0 and verify that it was installed successfully with: c:\\> pnpm -v 7.16.0 Start your Eclipse IDE and select an empty directory for your workspace as shown in Figure 1. This workspace directory will then hold all the project code for the Hello Scout application. Once the Eclipse IDE is running, it will show the Java perspective. Figure 1. Select a new empty folder to hold your project workspace To create a new Scout project, select the menu File New Project…​ and type Scout Project in the wizard search field. Select the Scout Project wizard and press Next. The New Scout Project wizard is then started as shown in Figure 2. Figure 2. The new Scout project wizard. In the New Scout Project wizard you have to enter a Group Id, Artifact Id and a Display Name for your Scout project. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). For the Hello Scout application just use the already pre-filled values and ensure the user interface programming language is set to Java as sown in Figure 2. Then click the Finish button to let the Scout SDK create the initial project code for you. Depending on your Eclipse installation, some Maven plugin connectors may initially be missing. In that case, a dialog as shown in Figure 3 appears. In order to resolve the selected connectors and continue, click on Finish. Afterwards, confirm the installation, accept the license and the message that some content has not been signed. Finally, the installation of the maven plugin connectors requires a restart of the Eclipse IDE. Figure 3. The Maven plugin connector installation dialog. After the New Scout Project wizard has created the Maven modules for the Hello Scout application, the code is compiled by the Eclipse IDE. You can see the created Maven modules in the Package Explorer as shown in Figure 4. Figure 4. The initial set of Maven modules created for the Hello Scout application. After the compilation, you can start the Scout application for the first time. Since the Hello Scout app consists of a backend and a frontend, two servers need to be started. Before the frontend server can deliver any JavaScript code to the browser, the JavaScript build needs to be executed as well. You could start each launch configuration separately, but for the sake of convenience there is a launch group available which starts all at once. To start the launch group use the Run As menu as shown in Figure 5. Figure 5. Starting the Hello Scout application. The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites. Once the JS build has been completed successfully, the frontend and backend servers will be started automatically. The servers are ready as soon as the console shows Server ready. You can now access the Hello Scout application by navigating to http://localhost:8082/ in your favorite web browser. The Hello Scout application is then presented as shown in Figure 6. Figure 6. The Hello Scout application in the browser. In the next tutorial, you will learn how to import the Scout demo applications into your workspace. Do you want to improve this document? Have a look at the sources on GitHub.","title":"","component":"scout-docs","version":"23.2","name":"tutorial_helloworld","url":"/scout-docs/next/eclipse-help/tutorial_helloworld.html","titles":[{"text":"Hello World Tutorial","hash":"_hello_world_tutorial","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Add pnpm","hash":"add-pnpm","id":3},{"text":"Create a Scout Project","hash":"create-a-scout-project","id":4},{"text":"What’s Next?","hash":"whats-next","id":5}]},"152":{"id":152,"text":"At some point during the application development you will want to install your software on a machine that is intended for productive use. This is the moment where you need to be able to build and package your Scout application in a way that can be deployed to an application server. As Scout applications just need a servlet container to run, Scout applications can be deployed to almost any Java application server. For the purpose of this tutorial we will use Apache Tomcat. First you need a Tomcat installation. If you do not yet have such an installation, you may want to read and follow the instructions provided in Appendix A. Second you need to decide if the users of your application should communicate with the Scout frontend server using HTTPS. We strongly recommend to use HTTPS for any productive environment. This is why the Hello Scout applications are configured to use HTTPS for production by default. In case you don’t want to use HTTPS the application must be slightly modified. Then you can skip the next section and instead follow the instructions in section Update the Scout Application to work with HTTP. As a default Tomcat installation is configured to use HTTP only, you need to verify if the installation is properly configured for HTTPS too. In case HTTPS support is already enabled for your Tomcat installation, you may skip the next section. More details on the SSL configuration can be found in the Tomcat Documentation to enable SSL/TLS. This section describes the creation and usage of a self-signed certificate in a localhost setting. Create a keystore file with a self-signed certificate. Adapt the HTTPS connector port in Tomcat’s server.xml configuration. Export the self-signed certificate from the keystore. Import the self-signed certificate into the Java certificate store. The first step is to create a self-signed certificate using the keytool provided with the Java runtime. The example command line below will create such a certificate using the alias tomcat_localhost and place it into the keystore file tomcat_localhost.jks keytool.exe -genkey -keyalg RSA -dname CN=localhost -alias tomcat_localhost -keystore tomcat_localhost.jks -keypass changeit -storepass changeit The second step is to uncomment the HTTPS connector element in the Tomcat’s server.xml configuration file. Make sure parameter keystoreFile points to your newly created keystore file (if you are using a Windows box, make sure not to use the backslash characters in the path to the keystore). After a restart of Tomcat you should then be able to access Tomcat on https://localhost:8443/manager/html. The third step is to export the newly created self-signed certificate from the tomcat_localhost.jks keystore file into the tomcat_localhost.der certificate file. keytool.exe -exportcert -alias tomcat_localhost -storepass changeit -keystore tomcat_localhost.jks -file tomcat_localhost.der In the last step add the self-signed certificate to the known certificates of the Java runtime. Make sure you modify the cacerts file of the Java runtime that is used in your Tomcat installation and modify the path to the cacerts file accordingly. keytool.exe -import -alias tomcat_localhost -trustcacerts -storepass changeit -keystore C:\\java\\jdk11\\lib\\security\\cacerts -file tomcat_localhost.der Your Tomcat installation is now properly configured for HTTPS. In case the Scout frontend server cannot access the Scout backend server, your self-signed certificate might be missing in the Java installation used by Tomcat. To verify that the certificate has been included in the file cacerts file use the following command. keytool.exe -list -storepass changeit -keystore C:\\java\\jdk11\\lib\\security\\cacerts | find \"localhost\" Once you no longer need the self-signed certificate file in your Java installation make sure to remove the certificate again: keytool.exe -delete -alias tomcat_localhost -storepass changeit -keystore C:\\java\\jdk11\\lib\\security\\cacerts If you prefer to work with HTTP only, you need to modify the security settings of your Scout application. This can be done with the steps described below. In file config.properties (in the folder helloscout.ui.html.app.war/src/main/resources): Add the property scout.auth.cookieSessionValidateSecure=false to disable the check for an encrypted channel (HTTPS). Change the scout.backendUrl property to use HTTP instead of HTTPS and change the port according to your Tomcat setup, typically 8080. In file web.xml (in the folder helloscout.ui.html.app.war/src/main/webapp/WEB-INF) delete the true flag in the element. In file web.xml (in the folder helloscout.server.app.war/src/main/webapp/WEB-INF) delete the true flag in the element. More on this topic can be found in the Scout Architecture Documentation. You are now ready to move the Hello Scout application from our development environment to a productive setup. The simplest option to move our application into the 'wild' is to build it using Maven. This produces two WAR files [1]. The first WAR file contains the Scout backend server with all business logic. The second WAR file contains the Scout frontend server that is responsible for communicating with the web browser of the user. To start the build open the directory containing the module helloscout in the command line and execute the Maven command mvn clean verify. This starts the compilation, executes all test cases and bundles the result into two WAR files. As soon as the build is reporting success (this may take a few minutes) you can find the built WAR files: The Scout backend WAR file org.eclipse.scout.apps.helloscout.server.war in folder helloscout/helloscout.server.app.war/target The Scout frontend WAR file org.eclipse.scout.apps.helloscout.ui.html.war in folder helloscout/helloscout.ui.html.app.war/target To see the new files within Eclipse you may need to refresh the target folder below each project using the F5 keystroke. As the final step of this tutorial, you have to deploy the two WAR files representing your Hello Scout application to a Tomcat web server. To verify a running Tomcat instance, type http://localhost:8080/ into the address bar of the web browser of your choice. You should then see the page shown in Figure 1. Figure 1. The Tomcat shown after a successful installation. After clicking on the Manager App button (highlighted in red) the login box is shown in front. A successful login shows the \"Tomcat Web Application Manager\". Once the web browser displays the successful running of your Tomcat instance, switch to its Manager App by clicking on the button highlighted in Figure 1. After entering user name and password the browser will display the Tomcat Web Application Manager as shown in Figure 2. If you don’t know the credentials, you may look it up in the file tomcat-users.xml as described in Directories and Files. Figure 2. The “Tomcat Web Application Manager”. The WAR files to be deployed can then be selected using button “Choose File” highlighted in red. After logging into Tomcat’s manager application, you can select the WAR files to be deployed using the button Choose File as shown in Figure 2. Then pick your just built org.eclipse.scout.apps.helloscout.server.war, close the file chooser and click on the button Deploy (the one located directly below button Choose File) to deploy the application to the Tomcat web server. Then repeat this step with the second WAR file org.eclipse.scout.apps.helloscout.ui.html.war. This will copy the selected WAR files into Tomcat’s webapps directory and unpack its contents into subdirectories with the same name as the WAR file. You can now connect to the application using the browser of your choice by navigating to: http://localhost:8080/org.eclipse.scout.apps.helloscout.ui.html/ or https://localhost:8443/org.eclipse.scout.apps.helloscout.ui.html/ if you have chosen to configure HTTPS for the Tomcat installation. In this case you might need to accept your self-signed certificate as the browser does not yet trust it. Figure 3. The \"Hello Scout\" login page. Then you will see the login page as shown in Figure 3. Two users have been predefined: admin with password admin and scott with password tiger. You can find this configuration in the config.properties file of the application. In a productive environment it is recommended to deploy the server and the user interface into two different servlet containers running on dedicated machines. This is because these two tiers have different requirements on resources, load balancing and access protection. Furthermore, it is strongly recommended using an encrypted connection (e.g. TLS 1.3 [2]) between client browsers and the Scout frontend server AND between the Scout frontend and backend server! Apache Tomcat is an open source servlet container that is a widely used. In case you are interested in getting some general context around Tomcat you could start with the Wikipedia article.[3]. Then get introduced to its core component “Tomcat Catalina”.[4]. before you switch to the official Tomcat homepage.[5]. This section is not really a step by step download and installation guide. Rather, it points you to the proper places for downloading and installing Tomcat. We recommend to work with Tomcat version 9.0. Start your download from the official download site.[6]. Figure 4. A successful Tomcat installation. Once you have downloaded and installed Tomcat 9 (see the sections below for plattform specific guidelines) you can start the corresponding service or daemon. To verify that Tomcat is actually running open a web browser of your choice and type http://localhost:8080 into the address bar. You should then see a confirmation of the successful installation according to Figure 4. According to the Tomcat setup installation for Windows.[7] download the package “32-bit/64-bit Windows Service Installer” from the Tomcat 9 download site. Then, start the installer and accept the proposed default settings. For installing Tomcat on OS X systems download the “tar.gz” package from the Tomcat 9 download site. Then, follow the installation guide.[8] provided by Wolf Paulus. For Linux systems download the “tar.gz” package from the Tomcat 9 download site. Then, follow the description of the Unix setup.[9] to run Tomcat as a daemon. If you use Ubuntu, you may want to follow the tutorial.[10] for downloading and installing Tomcat provided by Lars Vogel. Tomcat’s installation directory follows the same organisation on all platforms. Here, we will only introduce the most important aspects of the Tomcat installation for the purpose of this tutorial. Figure 5. The organisation of a Tomcat installation including specific files of interest. As an example, a web app called \"helloworld_server\" is contained in subdirectory \"webapps\". Note that some folders and many files of a Tomcat installation are not represented in Figure 5. We just want to provide a basic understanding of the most important parts to operate the web server in the context of this tutorial. In the bin folder, the executable programs are contained, including scripts to start and stop the Tomcat instance. The conf folder contains a set of XML and property configuration files. The file server.xml represents Tomcat’s main configuration file. It is used to configure general web server aspects such as the port number of its connectors for the client server communication. For the default setup, port number 8080 is used for the communication between client applications and the web server. The file tomcat-users.xml contains a database of users, passwords and associated roles. Folder logs contains various logfiles of Tomcat itself as well as host and web application log files. The folder needed for deploying web applications into a Tomcat instance is called webapps. It can be used as the target for copying WAR files into the web server. The installation of the WAR file then extracts its content into the corresponding directory structure as shown in Figure 5. Finally, the folder work contains Tomcat’s runtime cache for the deployed web applications. Tomcat comes with the pre installed Manager App. This application is useful to manage web applications and perform tasks such as deploying a web application from a WAR file, or starting and stopping installed web applications. A comprehensive documentation for the Manager App can be found on the Tomcat homepage.[11]. Here we only show how to start this application from the homepage of a running Tomcat installation. To access this application you can switch to the Manager App with a click on the corresponding button on the right side as shown in Figure 4. Before you are allowed to access this application, you need to provide credentials of a user associated with Tomcats’s manager-gui role. Listing 1. Tomcat Users configuration file \"tomcat-users.xml\". To get at user names and passwords you can open file tomcat-users.xml located in Tomcat’s conf directory. In this file the active users with their passwords and associated roles are stored. See Listing 1 for an example. From the content of this file, you see that user admin has password s3cret and possesses the necessary role manager-gui to access the Manager App. If file tomcat-users.xml does not contain any user with this role, you can simply add new user with this role to the existing users. Alternatively, you also can add the necessary role to an existing user. Just append a comma to the existing roles followed by the string manager-gui. You will need to restart your Tomcat application after adapting the content of file tomcat-users.xml. 1. Web application Archive (WAR): http://en.wikipedia.org/wiki/WAR_file_format_%28Sun%29 2. TLS: https://en.wikipedia.org/wiki/Transport_Layer_Security 3. Apache Tomcat Wikipedia: http://en.wikipedia.org/wiki/Apache_Tomcat. 4. Mulesoft’s introduction to Tomcat Catalina: http://www.mulesoft.com/tomcat-catalina. 5. Apache Tomcat Homepage: http://tomcat.apache.org/ 6. Tomcat 9 Downloads: http://tomcat.apache.org/download-90.cgi 7. Tomcat Windows setup: http://tomcat.apache.org/tomcat-9.0-doc/setup.html#Windows 8. Installing Tomcat on macOS: https://wolfpaulus.com/?s=tomcat 9. Tomcat Linux setup: http://tomcat.apache.org/tomcat-9.0-doc/setup.html#Unix_daemon 10. Apache Tomcat Tutorial: http://www.vogella.com/articles/ApacheTomcat/article.html 11. The Tomcat Manager Application: http://tomcat.apache.org/tomcat-9.0-doc/manager-howto.html.","title":"Build Scout App and Deploy to Tomcat","component":"scout-docs","version":"23.2","name":"deploy-to-tomcat","url":"/scout-docs/next/getstarted/deploy-to-tomcat.html","titles":[{"text":"Verify the Container Security Settings","hash":"verify-the-container-security-settings","id":1},{"text":"Create and Install a Self-Signed Certificate","hash":"create-and-install-a-self-signed-certificate","id":2},{"text":"Update the Scout Application to work with HTTP","hash":"update-the-scout-application-to-work-with-http","id":3},{"text":"Create WAR Files","hash":"create-war-files","id":4},{"text":"Deploy to Tomcat","hash":"sec-helloworld_deploy","id":5},{"text":"Appendix A: Apache Tomcat Installation","hash":"apx-install_tomcat","id":6},{"text":"Platform Specific Instructions","hash":"platform-specific-instructions","id":7},{"text":"Directories and Files","hash":"apx-tomcat_dirs_and_files","id":8},{"text":"The Tomcat Manager Application","hash":"apx-tomcat_manager_app","id":9}]},"153":{"id":153,"text":"Eclipse Scout is a framework that can be used in several ways. Before you can start, you should decide which way you want to take. First of all, you need to decide which programming language you want to use for the user interface. Do you prefer Java or JavaScript? If you choose Java, your user interface code runs on a Java server. Scout takes care of sending your UI to the browser and displaying it. It also automatically directs the user interactions to the Java server and lets you process them. This approach is called Scout Classic. If you choose JavaScript, your user interface code runs in the browser. You still don’t work with HTML elements directly. Instead, you use the same widget model as a Scout Java developer without needing a Java server. This approach is called Scout JS. No matter what you choose, you can always adjust the existing widgets or write completely new widgets using HTML, CSS and JavaScript. In addition to the programming language, you should think about whether you want to go full stack (frontend, backend) or just focus on one tier. For example, you could use Scout JS on the frontend, Scout on the backend and a REST api for the communication. Or maybe you prefer to use an existing REST api and just want to use the powerful Scout widgets for the frontend. Or maybe you don’t need a backend at all because you plan to implement an offline app. Have you made your decision? Great! Then it’s now time to really get started. Depending on your decision regarding the programming language, we recommend that you start with one of the following tutorials. Both tutorials guide you through the installation process, and you will learn how to setup your first Scout Classic or Scout JS project. Hello Scout Classic Hello Scout JS Even though an IDE is not required to work with Scout it is recommended to use one because it makes your developer life easier. There are Scout plugins available for IntelliJ and Eclipse. For Scout Classic either one is fine. For Scout JS we recommend IntelliJ because the JavaScript support of Eclipse is very poor. Unfortunately, the IntelliJ Community Edition does not contain JavaScript support, so you would need IntelliJ Ultimate. There is a trial if you want to try it. You can also use Visual Studio code or any other IDE or editor but there are no official Scout plugins for these editors. All Scout artifacts are published on public repositories. The Scout Java packages are Maven modules and available on Maven Central. The Scout JavaScript packages are npm modules and available on npmjs. Just include these dependencies in your project and import the required Java or JavaScript classes. The Scout npm modules contain prebuilt scripts, stylesheets and other necessary resources in the dist folder. There are several CDNs out there that serve the content of all npm modules. A popular one is jsDelivr. Thanks to such CDNs you can easily download the prebuilt Scout assets or directly include them in your HTML files. https://www.jsdelivr.com/package/npm/@eclipse-scout/core?path=dist Even though this is a convenient way to get the Scout assets, we still recommend getting the artifacts via npm, because it gives you more control and flexibility to work with. If you want to learn more about using a CDN, please see Hello Scout for CDN.","title":"Get Started with Eclipse Scout","component":"scout-docs","version":"23.2","name":"getstarted","url":"/scout-docs/next/getstarted/getstarted.html","titles":[{"text":"Choose Wisely","hash":"choose-wisely","id":1},{"text":"Installation","hash":"installation","id":2},{"text":"IDE","hash":"ide","id":3},{"text":"Artifacts","hash":"artifacts","id":4},{"text":"CDN","hash":"cdn","id":5}]},"154":{"id":154,"text":"A typical approach to work with Scout JS is to use a package manager (e.g. pnpm) to download the modules and a bundler (e.g. webpack) to build them. Thanks to the Scout CLI this task is straightforward. The main advantage is the simplified development process. You can use Less variables from Scout (e.g. the color palette). Individual source files can be imported directly which facilitates code completion. It also enables you to use modern code but still target older browsers by the usage of Babel. If you don’t need all that and just want to include Scout as a script in your html page (as in the early days), you can do so, too! This article shows how to achieve this. A live demo of the app we’ll create is published on CodePen. First, you need to get the prebuilt Scout assets like scripts, stylesheets, fonts etc. These assets are part of the Scout npm modules and located in the dist folder. To get them you can either install the Scout modules using a package manager and take the necessary resources from the dist folder. Or you could use a CDN and download them manually from there or even link to that CDN in your html files. In this example we are going to use a CDN directly. There are several CDNs out there that serve the content of all npm modules. Popular are jsDelivr or unpkg which we will use here. Using such a CDN you can easily access all Scout assets: @eclipse-scout/core/dist. Now let’s create a new html file called index.html and paste the following content: Hello Scout CDN (1) (3) (2) (2) (1) (4) 1 As you can see, we include the Scout assets, namely eclipse-scout-core-theme.css and eclipse-scout-core.js. 2 Additionally, we need to include all dependencies, which are jquery and sourcemapped-stacktrace.js. These are the dependencies listed in the package.json of @eclipse-scout/core. 3 Finally, we need to add an empty scout where the html content generated by Scout will be placed. 4 The script hello.js contains the code of our application. Now create a file called hello.js and paste the following code: class Desktop extends scout.Desktop { constructor() { super(); } _jsonModel() { return { objectType: 'Desktop', navigationHandleVisible: false, navigationVisible: false, headerVisible: false, views: [ { objectType: 'Form', displayHint: 'view', modal: false, rootGroupBox: { objectType: 'GroupBox', borderDecoration: scout.GroupBox.BorderDecoration.EMPTY, fields: [ { id: 'NameField', objectType: 'StringField', label: 'Name' }, { id: 'GreetButton', objectType: 'Button', label: 'Say Hello', keyStroke: 'enter', processButton: false } ] } } ] }; } _init(model) { super._init(model); this.widget('GreetButton').on('click', event => { let name = this.widget('NameField').value || 'stranger'; scout.MessageBoxes.openOk(this.session.desktop, `Hello ${name}!`); }); } } scout.addObjectFactories({ 'Desktop': () => new Desktop() }); new scout.App().init({ bootstrap: { textsUrl: 'https://unpkg.com/@eclipse-scout/core@{node-version}/dist/texts.json', localesUrl: 'https://unpkg.com/@eclipse-scout/core@{node-version}/dist/locales.json' } }); As you can see, there are no imports at the top. Instead, we are using the global variable scout, that is automatically put on the window object, to reference Scout classes. Furthermore, we have to include the texts.json. This file needs to be included to make sure the texts used by Scout can be resolved for the language the user is using. In this case it is necessary for the text Ok which is visible on the message box when you click the button. Optionally the locales.json from Scout can be imported so that the application knows about locale dependent formatting (e.g. for numbers or dates). That’s it. This is all you need to do to use Scout in a plain html site without the need of build tools. If you like you could adjust the example to use the dark theme by using eclipse-scout-core-theme-dark.css instead of eclipse-scout-core-theme.css. Or you could try to add a Chart by including the @eclipse-scout/chart module. The procedure is the same: link to the @eclipse-scout/chart assets (script, stylesheet, texts) and include its dependencies, that are referenced by its package.json. The result could look like this: Eclipse Scout Chart on CodePen. Have fun!","title":"Hello Scout JS with a CDN","component":"scout-docs","version":"23.2","name":"helloscout-cdn","url":"/scout-docs/next/getstarted/helloscout-cdn.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Preparation","hash":"preparation","id":2},{"text":"Include Assets","hash":"include-assets","id":3},{"text":"Add your Code","hash":"add-your-code","id":4},{"text":"Summary","hash":"summary","id":5}]},"155":{"id":155,"text":"In this tutorial we will create a Scout JS application consisting of a JavaScript frontend connected using REST to a Java backend that stores the data in a database. If you don’t know what Scout JS is yet, please read the Get Started Guide first. We will create the application using IntelliJ. The generated application can display persons loaded from a database. These persons can be edited or deleted and new persons can be added. This section guides you through the installation of the tools required to start the Hello Scout JS Full Stack application. First, Node.js needs to be installed as Scout uses it to build web assets. So if you don’t have it yet, visit the Node.js download site, choose the package for your platform and install it on your local machine. Make sure the Node.js installation is on the PATH. You can verify it by using your command line: c:\\> node -v v18.12.1 Scout uses pnpm 7 as package manager. Therefore, install it into your Node installation by using your command line: npm install -g pnpm@7.16.0 and verify that it was installed successfully with: c:\\> pnpm -v 7.16.0 If you have no IntelliJ yet, you can download it from the JetBrains download site. We recommend selecting the Ultimate edition to have the JavaScript support included in the IDE. There is a 30-day trial if you have no licence. For this tutorial you can also use the free Community Edition, but it requires some extra steps indicated. Install or extract the package and start IntelliJ (see Run IntelliJ IDEA for the first time for instructions). Follow the instructions until the Welcome to IntelliJ IDEA screen is shown. On the left side switch to Plugins, search for Eclipse Scout and press the green Install button. In case a Third-Party Plugins Privacy Notice is shown, press Accept. The Scout plugin does not collect or process any personal data. Afterwards, the plugin is being downloaded from the JetBrains Marketplace and installed locally. As soon as this is completed, press the Restart IDE button. The same can also be achieved by navigating to File | Settings | Plugins in case you already have an existing IntelliJ project running. Congratulations! You have successfully set up IntelliJ IDEA for Scout development. Start your IntelliJ (if not already running) and in the Welcome to IntelliJ IDEA screen click on New Project. The New Project wizard starts. The same can also be achieved from the menu File | New | Project…​ if an existing project is open already. On the left side select the Scout type. You have to enter a Group Id, Artifact Id and a Display Name for your Scout project as shown in Figure 1. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). Figure 1. The new Scout project wizard. For the Hello Scout JS Full Stack application use helloscoutjs as the artifact id and ensure the user interface programming language is set to JavaScript as sown in Figure 1. You can keep the other default values. Then click the Next button. Figure 2. Specify name and location of the new project. On the second page please specify project name and location and press Finish. The Scout plugin then creates the initial project content for you (you will see some Maven build output). Wait until all tasks have completed. Afterwards, you will find the created Scout modules in the Project view as shown in Figure 3. Figure 3. The initial set of Maven modules created for the Hello Scout application. If the modules are not automatically created as indicated in Figure 3, right click on the root pom.xml and click Add as Maven Project. The Hello Scout JS Full Stack application’s backend accesses a local Derby database using jOOQ. For this to work, you first have to setup the local database. This is done be executing the database setup application. For this click the Add Configuration…​ menu on the top as shown in Figure 4. In the dialog, expand the Application type on the left side, select the prepared run configuration Setup local dev database and confirm with Ok. Then click on the green triangle symbol directly right of the Add Configuration…​ menu. This will launch the db setup application which creates a new Derby database in the helloscoutjs.app.dev/db folder. Figure 4. Selecting the db setup run configuration Now you are ready to start the Scout JS application. This includes downloading the necessary JavaScript dependencies, executing the Java and JavaScript builds and launching the Scout development server. It serves the JavaScript assets to the browser and acts as backend for the REST calls coming from the user interface. You could start each step separately, but for the sake of convenience, there is a compound run configuration available which performs all these tasks (IntelliJ Ultimate only, see below for instructions if using the Community Edition). To use it switch the run configuration by clicking the run configuration menu on the top again. Now there is no need to open the dialog as the available run configurations are shown in a dropdown menu. Select the launch all compound and run it using the green triangle button. The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites and check the IntelliJ settings in File | Settings | Languages & Frameworks | Node.js and NPM. The launch all compound uses JavaScript run configurations which are only available in IntelliJ Ultimate. If using the Community Edition, follow these instructions instead: Execute npm run pnpm-install on the command line in the root of your project (next to the pnpm-workspace.yaml) to install all JavaScript dependencies. Then execute npm run build:dev:watch in the helloscoutjs.app module to start the JavaScript build and watcher. The watcher keeps on running and will continuously update the JavaScript assets as you change your JavaScript source files (hot-code-replace). Finally start the run configuration Launch helloscoutjs dev server. Once the JS build has been completed (this may take a while for the first time as some dependencies need to be downloaded) and the server has been started, the Hello Scout JS Full Stack application can be accessed by navigating to http://localhost:8084/ in your favorite web browser. The Hello Scout JS Full Stack application is then presented as shown in Figure 5. Figure 5. The Hello Scout JS Full Stack application in the browser. To learn more about Scout JS, we recommend having a look at the other Scout JS Hello World tutorials and the Technical Guide. To see more example code of Scout JS, you should have a look at the Scout JS Widgets application and its source code. In case you should get stuck somewhere and need help, contact us on the Scout Forum or on Stack Overflow.","title":"Hello Scout JS Full Stack","component":"scout-docs","version":"23.2","name":"helloscout-js-fullstack","url":"/scout-docs/next/getstarted/helloscout-js-fullstack.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Node.js","hash":"node-js","id":3},{"text":"Add pnpm","hash":"add-pnpm","id":4},{"text":"IntelliJ","hash":"intellij","id":5},{"text":"Create the Project","hash":"create-the-project","id":6},{"text":"What’s Next?","hash":"whats-next","id":7}]},"156":{"id":156,"text":"In this tutorial we will create your first Scout JS application. If you don’t know what Scout JS is yet, please read the Get Started Guide first. The application will simply show a text field and a button. Once the user enters some text and presses the button, the application displays a message box including that text. The application does not require Maven or Java, only Node.js. Also, the tutorial does not require any specific IDE. The goal of this tutorial is to provide a first impression of the Scout JS framework. We will start by getting the application running and then take a look at the code. Make sure you have Node.js 16 installed. Clone the helloscoutjs repository and checkout the branch releases/23.2. Alternatively, you can also download and extract a ZIP file of the repository. After that, the file and folder structure of your local copy should look like this (apart from a few more files): Listing 1. Files and folders of the application . │ package.json │ webpack.config.js │ ├───res │ index.html │ └───src │ helloworld.js │ helloworld.less │ ├───desktop │ Desktop.js │ DesktopModel.js │ └───greeting HelloForm.js HelloFormModel.js In the main folder, where the file package.json is located, open a terminal and execute npm install --ignore-scripts. This creates a folder node_modules, containing all (direct and transitive) dependencies, as well as a file package-lock.json, listing all the specific versions of these dependencies. If the dependencies defined in package.json change, run npm install again to update the node_modules folder. Now execute npm run build:dev. This creates a dist folder that contains the transpiled and bundled files to be served to the browser. Use npm run build:dev:watch to have these files automatically updated when the corresponding source files change. Use the same or start a new terminal in the main folder and execute npm run serve. This starts a little development server and opens the URL http://127.0.0.1:8080/ in your default browser. The server has live reload capability, that is, as soon as files in the dist folder change, the browser tab will reload automatically. Type some text in the field and press the button to test the application. Also check out how the layout changes when you narrow the browser window (or e.g. use Google Chrome’s DevTools to emulate a smaller device). Let’s now have a closer look at the files that were needed to build this application. In the main folder there are files containing information for the build, e.g. dependencies and entry points. In the subfolder res/ there are static resources that are just copied to dist/ in the build. And in the subfolder src/ you find the source files that are transformed and bundled by webpack. For npm commands like npm install or npm run , the file package.json provides the necessary information. Listing 2. package.json { \"scripts\": { \"build:dev\": \"scout-scripts build:dev\", \"build:dev:watch\": \"scout-scripts build:dev:watch\", \"serve\": \"live-server --mount=/:dist\" }, \"devDependencies\": { \"@eclipse-scout/cli\": \"^23.1.2\", \"live-server\": \"^1.2.2\" }, \"dependencies\": { \"@eclipse-scout/core\": \"^23.1.2\" } } The scripts define what npm run should execute. They work a bit like aliases in Bash. To have all needed files available at http://127.0.0.1:8080/, we need to mount the folder dist to the root path / when starting the development server. Modules defined in devDependencies and dependencies are downloaded to the node_modules folder on npm install. The dependency versions are prefixed with a ^ (caret), which means compatible version. That is, when running npm install, the newest version with the same major-level will be downloaded, unless another compatible version already exists in the node_modules folder or is already defined in the package-lock.json file. For more detailed and general information about package.json and package-lock.json, see the official documentation on Node.js: The package.json guide and The package-lock.json file. As defined in package.json, the script build:dev executes scout-scripts build:dev. scout-scripts is a command provided by the @eclipse-scout/cli module. With the build:dev argument, this command uses webpack to transform and bundle the source files and write the results to the dist folder. Scout provides a default webpack configuration which we use and adjust as follows. Listing 3. webpack.config.js const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { args.resDirArray = [ './res', './node_modules/@eclipse-scout/core/res', './node_modules/@eclipse-scout/core/dist/locales.json', './node_modules/@eclipse-scout/core/dist/texts.json' ]; const config = baseConfig(env, args); config.entry = { 'helloworld': './src/helloworld.js', 'helloworld-theme': './src/helloworld.less' }; return config; }; The args.resDirArray defines the files or folders with static resources to be copied to dist. In addition to the static resources of our application, we also need Scout’s static resources in node_modules/@eclipse-scout/core/. In config.entry, the entry points for bundling JavaScript and CSS files are defined. For our application, the target files helloworld.js and helloworld-theme.css (defined without the file extension) are generated from the source files src/helloworld.js and src/helloworld.less, respectively. The -theme suffix of the target CSS file is important for Scout’s post-processing to work properly. Also, make sure that you don’t use exactly the same name as for the target JS file. Other than that, you can name the target files whatever you want, just make sure you also adjust the references in index.html accordingly (see next section). For more details on the build, see Build Stack. For an HTML file to be valid (see The W3C Markup Validation Service), it has to define a DOCTYPE, a default language and a title. Furthermore, to allow for responsive web design, we include the viewport element. Listing 4. res/index.html Hello World The and elements include the CSS and JavaScript files generated by the build. The order of these elements is important. In particular, the element with the class \"scout\" has to be placed before the inclusion of the scripts, since it is used to build the final DOM for our application. The other file in our res/ folder, helloworld-texts.json, contains your own texts used in the application. Listing 5. src/helloworld.js import { scout, App } from '@eclipse-scout/core'; import { Desktop } from './desktop/Desktop' scout.addObjectFactories({ 'Desktop': () => new Desktop() }); new App().init({ bootstrap: { textsUrl: 'texts.json', localesUrl: 'locales.json' } }); In our main JavaScript file, we import the scout namespace object as well as the class App. Before we initialize an instance of the Scout application (passing the location of the text urls and the locales url) we do two other things: Use scout.addObjectFactories to register a function (identified by 'Desktop') that provides an instance of our Desktop class. The desktop is the main widget of a Scout application and the root of every other widget. On application initialization, Scout is using that factory to create the desktop of our application. Define our own namespace object, helloworld, and put our HelloForm class in it, so Scout can use it to build modular widgets at runtime (see DesktopModel.js). Listing 6. src/helloworld.less @import \"~@eclipse-scout/core/src/index\"; Since we don’t need any custom styling for our application, we just import Scout’s LESS module as is in our LESS file. To try out Scout’s dark theme, just import index-dark instead of index. We follow the best practice of separating model (layout, structure) and behavior code. This also makes it easier to e.g. reuse a form that should look similar elsewhere but behave differently. A typical model definition for a Scout widget defines an objectType. This is specified as a string containing the corresponding class, prefixed with the namespace in which it is accessible. Without a namespace prefix, the namespace scout is used as default. Other object properties are used to configure the widget based on the specified objectType. Listing 7. src/greeting/DesktopModel.js import {HelloForm} from \"../greeting/HelloForm\"; import {Desktop} from \"./Desktop\"; export default () => ({ objectType: Desktop, navigationHandleVisible: false, navigationVisible: false, headerVisible: false, views: [ { objectType: HelloForm } ] }); The default desktop consists of a navigation, a header and a bench. We only need the bench for our application, so we hide the other parts, including the handle to toggle the navigation. A desktop can contain outlines and/or views. We provide an instance of our HelloForm as a view on our desktop. Listing 8. src/greeting/Desktop.js import {Desktop as ScoutDesktop} from '@eclipse-scout/core'; import DesktopModel from './DesktopModel'; export class Desktop extends ScoutDesktop { _jsonModel() { return DesktopModel(); } } Our desktop doesn’t have any custom behavior, so we only import the DesktopModel here, in the _jsonModel() function. Listing 9. src/greeting/HelloFormModel.js import {Button, Form, GroupBox, StringField} from '@eclipse-scout/core'; export default () => ({ objectType: Form, displayHint: Form.DisplayHint.VIEW, modal: false, rootGroupBox: { objectType: GroupBox, borderDecoration: GroupBox.BorderDecoration.EMPTY, fields: [ { id: 'NameField', objectType: StringField, label: 'Name' }, { id: 'GreetButton', objectType: Button, label: 'Say Hello', keyStroke: 'enter', processButton: false } ] } }) Our form is defined to be non-modal and displayed as a view (rather than a dialog). It consists of a string field and a button. These are in a group box inside the form. We define an empty border decoration around this group box to have a little padding. The Enter key is defined as the keyboard shortcut for our button and we set processButton: false to place the button next to our field instead of above it. Listing 10. src/greeting/HelloForm.js import {Form, MessageBoxes} from '@eclipse-scout/core'; import HelloFormModel from './HelloFormModel'; export class HelloForm extends Form { _jsonModel() { return HelloFormModel(); } _init(model) { super._init(model); this.widget('GreetButton').on('click', event => { let name = this.widget('NameField').value || 'stranger'; MessageBoxes.openOk(this.session.desktop, `Hello ${name}!`); }); } } As in Desktop.js, we import the model but additionally add an event handler in the _init(model) function to implement the desired behavior when the button is clicked. To accomplish this, we can access our button and field by their respective id (see HelloFormModel.js). An OK message box with the desired text is displayed using the convenience class MessageBoxes from Scout. If you want to add the created application to a Git repository, it is recommended to exclude some files from the SCM. As a starting point, use the file you cloned/downloaded from the helloscoutjs repository. Listing 11. .gitignore # Git *.orig # Node node_modules/ dist/ test-results/ package-lock.json # Do not check in any log files *.log # IDEs .idea See the gitignore Documentation for details. Now that you have successfully created your first Scout JS application, you might want to learn more about Scout JS. If you are interested in adding a REST backend you should have a look at Hello Scout JS Full Stack Tutorial. To see more example code of Scout JS, we recommend looking at the Scout JS Widgets application and its source code. If you are interested in Scout’s concepts, architecture and features you probably want to have a look at the Technical Guide. In case you should get stuck somewhere and need help, contact us on the Scout Forum or on Stack Overflow. We wish you all the best on your journey with Scout.","title":"Hello Scout JS","component":"scout-docs","version":"23.2","name":"helloscout-js","url":"/scout-docs/next/getstarted/helloscout-js.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Get the Code","hash":"get-the-code","id":3},{"text":"Build the Application","hash":"build-the-application","id":4},{"text":"Run the Application","hash":"run-the-application","id":5},{"text":"Understand the Code","hash":"understand-the-code","id":6},{"text":"Build Information","hash":"build-information","id":7},{"text":"npm","hash":"npm","id":8},{"text":"webpack","hash":"webpack","id":9},{"text":"Static Resources","hash":"static-resources","id":10},{"text":"Source Files","hash":"source-files","id":11},{"text":"Entry Points","hash":"entry-points","id":12},{"text":"Widgets","hash":"widgets","id":13},{"text":"Git configuration","hash":"git-configuration","id":14},{"text":"What’s Next?","hash":"whats-next","id":15}]},"157":{"id":157,"text":"In this tutorial we will create your first Scout Classic application. If you don’t know what Scout Classic is yet, please read the Get Started Guide first. We will create the application using Eclipse or IntelliJ. The generated application will consist of a client and server part and simply display a text sent from the server. This section guides you through the installation of the tools required to start the Hello Scout application. Currently there is IDE support for Scout application development for IntelliJ IDEA and Eclipse. Such an IDE is not required but makes the development much easier. This tutorial describes the setup for both IDEs. Please choose the one you prefer. First, Node.js needs to be installed as Scout uses it to build web assets. So if you don’t have it yet, visit the Node.js download site, choose the package for your platform and install it on your local machine. Make sure the Node.js installation is on the PATH. You can verify it by using your command line: c:\\> node -v v18.12.1 Scout uses pnpm 7 as package manager. Therefore, install it into your Node installation by using your command line: npm install -g pnpm@7.16.0 and verify that it was installed successfully with: c:\\> pnpm -v 7.16.0 If you have no IntelliJ yet, you can download it from the JetBrains download site. We recommend selecting the Ultimate edition to have the JavaScript support included in the IDE. There is a 30-day trial if you have no licence. For this tutorial you can also use the free Community Edition, but it requires some extra steps indicated. Install or extract the package and start IntelliJ (see Run IntelliJ IDEA for the first time for instructions). Follow the instructions until the Welcome to IntelliJ IDEA screen is shown. On the left side switch to Plugins, search for Eclipse Scout and press the green Install button. In case a Third-Party Plugins Privacy Notice is shown, press Accept. The Scout plugin does not collect or process any personal data. Afterwards, the plugin is being downloaded from the JetBrains Marketplace and installed locally. As soon as this is completed, press the Restart IDE button. The same can also be achieved by navigating to File | Settings | Plugins in case you already have an existing IntelliJ project running. Congratulations! You have successfully set up IntelliJ IDEA for Scout development. Then download the Eclipse IDE for Scout Developers package for your platform by visiting the official Eclipse download page. After the package selection, confirm the suggested mirror and extract the downloaded archive to your local disk. Congratulations! You have successfully installed Eclipse for Scout development. The Scout project creation depends on the IDE chosen. Therefore, please follow the instructions in the corresponding section below. Start your IntelliJ (if not already running) and in the Welcome to IntelliJ IDEA screen click on New Project. The New Project wizard starts. The same can also be achieved from the menu File | New | Project…​ if an existing project is open already. On the left side select the Scout type. You have to enter a Group Id, Artifact Id and a Display Name for your Scout project as shown in Figure 1. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). Figure 1. The new Scout project wizard. For the Hello Scout application just use the already pre-filled values and ensure the user interface programming language is set to Java as sown in Figure 1. Then click the Next button. Figure 2. Specify name and location of the new project. On the second page please specify project name and location and press Finish. The Scout plugin then creates the initial project content for you (you will see some Maven build output). Wait until all tasks have completed. Afterwards, you will find the created Scout modules in the Project view as shown in Figure 3. Figure 3. The initial set of Maven modules created for the Hello Scout application. If the modules are not automatically created as indicated in Figure 3, right click on the root pom.xml and click Add as Maven Project. Then you can start the Scout application for the first time. Since the Hello Scout app consists of a backend and a frontend, two servers need to be started. Before the frontend server can deliver any JavaScript code to the browser, the JavaScript build needs to be executed as well. You could start each run configuration separately, but for the sake of convenience there is a compound run configuration available which starts all at once. To start the launch configuration, use the Add Configuration…​ menu on the top as shown in Figure 4. In the dialog, expand the Compound type on the left side, select the prepared run configuration [webapp] all and confirm with Ok. Finally, click on the green triangle symbol directly right of the Add Configuration…​ menu. This will execute the Java build and start the Java frontend server and backend server afterwards. On IntelliJ Ultimate this will furthermore download all necessary JavaScript dependencies and execute the JavaScript build. If using the Community Edition, additionally execute the following commands on the command line manually: npm run pnpm-install in the root of your project (next to the pnpm-workspace.yaml) to install all JavaScript dependencies. npm run build:dev:watch in the helloscout.ui.html module to start the JavaScript build and watcher. The watcher keeps on running and will continuously update the JavaScript assets as you change your JavaScript source files (hot-code-replace). Figure 4. Selecting the compound run configuration The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites and check the IntelliJ settings in File | Settings | Languages & Frameworks | Node.js and NPM. Once the JS build has been completed (this may take a while for the first time as some dependencies need to be downloaded) and the two servers have been started, the Hello Scout application can be accessed by navigating to http://localhost:8082/ in your favorite web browser. The Hello Scout application is then presented as shown in Figure 5. Figure 5. The Hello Scout application in the browser. Start your Eclipse IDE and select an empty directory for your workspace as shown in Figure 6. This workspace directory will then hold all the project code for the Hello Scout application. Once the Eclipse IDE is running, it will show the Java perspective. Figure 6. Select a new empty folder to hold your project workspace To create a new Scout project, select the menu File New Project…​ and type Scout Project in the wizard search field. Select the Scout Project wizard and press Next. The New Scout Project wizard is then started as shown in Figure 7. Figure 7. The new Scout project wizard. In the New Scout Project wizard you have to enter a Group Id, Artifact Id and a Display Name for your Scout project. As the created project will make use of Apache Maven, please refer to the Maven naming conventions to choose Group Id and Artifact Id for your project. The Display Name is used as the application name presented to the user (e.g. in the browser title bar). For the Hello Scout application just use the already pre-filled values and ensure the user interface programming language is set to Java as sown in Figure 7. Then click the Finish button to let the Scout SDK create the initial project code for you. Depending on your Eclipse installation, some Maven plugin connectors may initially be missing. In that case, a dialog as shown in Figure 8 appears. In order to resolve the selected connectors and continue, click on Finish. Afterwards, confirm the installation, accept the license and the message that some content has not been signed. Finally, the installation of the maven plugin connectors requires a restart of the Eclipse IDE. Figure 8. The Maven plugin connector installation dialog. After the New Scout Project wizard has created the Maven modules for the Hello Scout application, the code is compiled by the Eclipse IDE. You can see the created Maven modules in the Package Explorer as shown in Figure 9. Figure 9. The initial set of Maven modules created for the Hello Scout application. After the compilation, you can start the Scout application for the first time. Since the Hello Scout app consists of a backend and a frontend, two servers need to be started. Before the frontend server can deliver any JavaScript code to the browser, the JavaScript build needs to be executed as well. You could start each launch configuration separately, but for the sake of convenience there is a launch group available which starts all at once. To start the launch group use the Run As menu as shown in Figure 10. Figure 10. Starting the Hello Scout application. The JavaScript build fails in case the installed Node.js was not found or is too old. In that case, follow the instructions in the section Prerequisites. Once the JS build has been completed successfully, the frontend and backend servers will be started automatically. The servers are ready as soon as the console shows Server ready. You can now access the Hello Scout application by navigating to http://localhost:8082/ in your favorite web browser. The Hello Scout application is then presented as shown in Figure 11. Figure 11. The Hello Scout application in the browser. Congratulations! You have successfully created your first Scout Classic application. To gain experience working with Scout, we recommend going through the One Day Tutorial. If you are interested in Scout’s concepts, architecture and features you probably want to have a look at the Technical Guide. In case you should get stuck somewhere and need help, contact us on the Scout Forum or on Stack Overflow. We wish you all the best on your journey with Scout.","title":"Hello Scout Classic","component":"scout-docs","version":"23.2","name":"helloscout","url":"/scout-docs/next/getstarted/helloscout.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Prerequisites","hash":"prerequisites","id":2},{"text":"Node.js","hash":"node-js","id":3},{"text":"Add pnpm","hash":"add-pnpm","id":4},{"text":"IntelliJ","hash":"intellij","id":5},{"text":"Eclipse","hash":"eclipse","id":6},{"text":"Create a Scout Project","hash":"create-a-scout-project","id":7},{"text":"IntelliJ","hash":"intellij-2","id":8},{"text":"Eclipse","hash":"eclipse-2","id":9},{"text":"What’s Next?","hash":"whats-next","id":10}]},"158":{"id":158,"text":"In this tutorial we will create the “Contacts” Scout application. The goal of this application is to learn about the most prominent features of the Eclipse Scout framework using a fully functional application. The application is kept small enough to complete this tutorial within less than a day. An extended version of “Contacts” is available as a Scout sample application on Github. For this tutorial you can use IntelliJ or Eclipse IDE with installed Scout SDK plugins. If you have successfully completed the Hello Scout Tutorial you should have a running Eclipse Scout installation. If not, then you should do the Hello Scout Tutorial now. The “One Day Tutorial” is organized as follows. In the first section, the finished “Contacts” application is explained from the user perspective. The remaining sections focus on the individual steps to implement the “Contacts” tutorial application. The “Contacts” demo application is a client server application to manage personal contacts, organizations and events. The persistence of entered data is achieved via simple JDBC access to a Derby database. It is recommended that you first import the full “Contacts” demo application into a separate workspace. This gives you the possibility to check your source code against the full implementation during the various steps of the tutorial. To do so, just clone the Scout demo repository and import it into your IDE. git clone https://github.com/bsi-software/org.eclipse.scout.docs.git Alternatively, you can also view the source code of the “Contacts” demo application on Github. Figure 1. The “Contacts” application with the person page. The “Contacts” application shows the basic user interface layout of a typical Scout application. The main areas of this layout are briefly introduced below. Outline Button In Figure 1 the top left area shows a folder icon that represents the \"Contacts\" outline. The small down arrow at the folder icon indicates that additional outlines are available when clicking on this view button. On the right of the button with the folder icon is a second outline button that activates a search outline (not implemented yet). Navigation Tree The navigation tree on the left side of the layout shows the pages that are available for the selected outline. For the \"Contacts\" outline, the navigation tree provides access to the pages \"Persons\", \"Organizations\" and \"Events\". Selecting a page then shows associated information on the right side in the bench area. In the case of the selected \"Persons\" page the bench area shows a list of persons in the form of a table. Header The header area is located at the top and holds the available top level menus. In this example these are the \"Quick access\", \"Options\" menu points as well as a user menu that shows the username of the currently logged in user \"mzi\". Bench The bench represents the main display area of a Scout application. When selecting the \"Persons\" page, a table provides access to all available persons as shown in Figure 1. Selecting a specific person provides access to all actions that are available for the selected person. The selected person can then be opened with the Edit menu which opens the person in a view that is displayed in the bench area again as shown in Figure 2. For entering and editing of data in Scout applications views are used in most cases. Views are displayed in the bench area of a Scout application. Several views can also be opened simultaneously. To show a specific view the user has to click on the view button associated with the desired view. An example of an opened view is shown for person \"Verónica\" in Figure 2. Figure 2. The “Contacts” application with a person opened in a form. This tutorial walks you through the implementation of a Scout application consisting of a frontend and a backend application. The frontend application contains outlines with navigation trees, pages to present information in tabular form, and forms to view and edit data. In the backend application the tutorial shows how to implement services, logging, database access, and several other aspects of Scout applications. The tutorial is organized as a sequence of consecutive steps as listed below. Each step is described in a individual section that results in a executable application that can be tested and compared against the full \"Contacts\" demo application. Step 1: Setting up the Initial Project (Setting up the Initial Project) We will create a new project and prepare the generated code base by adapting existing components and deleting unnecessary components. At the end of step one we have a project setup that allows us to start adding new components to the application. Step 2: Adding the Person and Organization Page (Adding the Person and Organization Page) The second step adds the user interface components to display persons and organizations. For this a \"Persons\" page and an \"Organizations\" page are created and added to the \"Contacts\" outline as shown in Figure 1. Step 3: Creating and Accessing the Database (Creating and Accessing the Database) This step concentrates on the backend of the \"Contacts\" application. The covered topics include dealing with application properties, setup and access of a database and using the database to provide data for the person and organization page created in the previous step. Step 4: Adding a Form to Create/Edit Persons (Adding a Form to Create/Edit Persons) After having access to the database the components that allow a user to create and edit persons and organizations in the user interface of the \"Contacts\" application can be added. In addition, this tutorial step also demonstrates how to design and implement complex form layouts with the Scout framework. Step 5: Form Field Validation and Template Fields (Form Field Validation and Template Fields) This step provides an introduction into form field validation and the creation of template fields. Validation of user input is important for many business applications and template fields help to improve code quality with a mechanism to reuse application specific user interface components. Step 6: Adding the Company Form (Adding the Company Form) We create the organization form to create and enter organizations in the \"Contacts\" application. As we can reuse many of the components developed so far this is the shortest tutorial step. Step 7: Linking Organizations and Persons (Linking Organizations and Persons) In this step we modify the user interface to implement a 1:n relationship between organizations and persons. This includes the creation of a hierarchical page structure for organization, adding an organization column to the person page and adding an organization field to the person form to manage the association of a person to an organization. This section deals with setting up the initial workspace and code base for the \"Contacts\" application. The creation up of the initial project setup consists of the tasks listed below. Creating the initial Codebase (Creating the initial Codebase) Removing unnecessary Components (Removing unnecessary Components) Changes to Class WorkOutline (Changes to Class WorkOutline) Changes to Class Desktop (Changes to Class Desktop) This first step of the \"Contacts\" tutorial ends with a review of the results of this first tutorial step in What have we achieved?. If you are using Eclipse and your workspace contains modules from the “Hello World” tutorial, you may want to multi-select them and to either close them by invoking the context menu “Close Projects” or to delete them by invoking the context menu “Delete”. The initial code for the “Contacts” application is then generated using the New Scout Project wizard. For the wizard fields you may use the values below and as shown in Figure 3 (IntelliJ) and Figure 4 (Eclipse). Group Id: org.eclipse.scout Artifact Id: contacts Display Name: \"Contacts Application\" Figure 3. The creation of the initial \"Contacts\" application in IntelliJ. Figure 4. The creation of the initial \"Contacts\" application in Eclipse. To create this initial application click on Next/Finish. The project wizard then creates a number of Maven modules as shown in Figure 5 (IntelliJ) and Figure 6 (Eclipse). Figure 5. The package explorer with the initial Maven modules created for the \"Contacts\" application in IntelliJ. Figure 6. The package explorer with the initial Maven modules created for the \"Contacts\" application in Eclipse. We start with removing the *.helloworld and \\*.settings packages in all Maven modules of the \"Contacts\" application. To delete packages, first select an individual package or packages in the package explorer as shown in Figure 6 (IntelliJ) and Figure 6 (Eclipse) and then hit the Delete key. The packages to delete is provided per Maven module in the list below. Client Module contacts.client In folder src/main/java Delete package org.eclipse.scout.contacts.client.helloworld Delete package org.eclipse.scout.contacts.client.settings In folder src/test/java Delete package org.eclipse.scout.contacts.client.helloworld Server Module contacts.server In folder src/main/java Delete package org.eclipse.scout.contacts.server.helloworld In folder src/test/java Delete package org.eclipse.scout.contacts.server.helloworld Shared Module contacts.shared In folder src/main/java Delete package org.eclipse.scout.contacts.shared.helloworld In folder src/generated/java Delete package org.eclipse.scout.contacts.shared.helloworld The deletion of these outlines results in a number of compile errors in classes WorkOutline and Desktop. All these errors will be resolved in the following two sections where we modify the two classes to our needs. Instead of adding a new \"Contacts\" outline to the application we reuse the generated code and rename the \"Work\" outline into \"Contacts\" outline. For this, we perform the following modifications to class WorkOutline. Rename the class package to org.eclipse.scout.contacts.client.contact Rename the class to ContactOutline Change the outline title to \"Contacts\" Change the outline icon to Icons.Folder To quickly find the class WorkOutline we first open the Open Type dialog by hitting Ctrl+Shift+N in IntelliJ or Ctrl+Shift+T in Eclipse and enter \"workoutline\" into the search field as shown in Figure 7 (IntelliJ) and Figure 8 (Eclipse). In the result list, we select the desired class and click the OK button to open the file WorkOutline.java in the Java editor of your IDE. Figure 7. Use the Open Type dialog to quickly find java types in IntelliJ. Figure 8. Use the Open Type dialog to quickly find java types in Eclipse. We start with the package rename. To rename the package org.eclipse.scout.contacts.client.work to org.eclipse.scout.contacts.client.contact click into the word \"work\" of the package name and hit Shift+F6 (Eclipse: Alt+Shift+R). This opens the package rename dialog as shown in Figure 9 (IntelliJ) and Figure 10 (Eclipse), where we replace \"work\" by \"contact\" in the New name field. After pressing the Ok button your IDE informs the programmer that the code modification may not be accurate as the resource has compile errors. This warning can be acknowledged by clicking Continue. Figure 9. Use the IntelliJ Rename Package dialog to rename a Java package in IntelliJ. Figure 10. Use the Eclipse Rename Package dialog to rename a Java package in Eclipse. In next step we rename class WorkOutline to ContactOutline. In the Java editor we can rename the class by clicking into the class identifier WorkOutline and hitting Shift+F6 (Eclipse: Alt+Shift+R). Inside the edit box we can then change the class name to ContactOutline and hit the Enter key to execute the change. If your IDE shows a Rename Type dialog just hit button Continue to complete the rename operation. To get rid of the compile error in method execCreateChildPages we simply delete the content in the method body. Next, we change the outline title in method getConfiguredTitle. Replace the string \"Work\" with \"Contacts\". Set the cursor at the end of the word \"Contacts\" and hit Ctrl+Space. For Eclipse: Double-click on the proposal New text…​ to open the Scout new entry wizard as shown in Figure 12 and Figure 13. Enter the text \"Contacts\" as shown in Figure 11 (IntelliJ) and Figure 13 (Eclipse) and click Ok. Figure 11. Use the Scout new entry wizard to add translated texts to the application in IntelliJ. Figure 12. Use the Scout content assist to add new translations. Figure 13. Use the Scout new entry wizard to add translated texts to the application in Eclipse. As the last modification we change the return value of method getConfiguredIconId to value Icons.Folder and end with the code shown in Listing 1. In IntelliJ, the import for the Icons class should be added automatically. If not, check your settings for auto import or use Alt enter to import it manually. In Eclipse, you can use Ctrl+Shift+O to add the imports manually. Listing 1. Initial implementation of class ContactOutline. @ClassId(\"303c0267-3c99-4736-a7f5-3097c5e011b6\") public class ContactOutline extends AbstractOutline { @Override protected void execCreateChildPages(List> pageList) { } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Contacts\"); } @Override protected String getConfiguredIconId() { return Icons.Folder; } } The second class to adapt for the \"Contacts\" application is the Desktop class. This class is implemented exactly once in each Scout application and holds the available outlines and top level menus of the application in the form of inner classes. For the \"Contacts\" application we adapt the initial implementation to have outline view buttons for the \"Contacts\" and \"Search\" outlines. The top level menus are then adapted to hold the menus \"Quick Access\", \"Options\" and a menu for the logged in user. Start with opening the class in the Java editor using Ctrl+Shift+N (Eclipse: Ctrl+Shift+T) to quickly access the class. In the source code of method getConfiguredOutlines remove SettingsOutline.class from the list of return values as shown in Listing 2. Listing 2. Method getConfiguredOutlines defines the outlines associated with the desktop of the application. @Override protected List> getConfiguredOutlines() { return CollectionUtility.> arrayList(ContactOutline.class, SearchOutline.class); } Then, perform the following changes in class Desktop Delete the inner class SettingOutlineViewButton Delete the inner class UserProfileMenu. Rename inner class WorkOutlineViewButton to ContactOutlineViewButton Create a new inner class called QuickAccessMenu after the SearchOutlineViewButton. For this navigate the cursor after the SearchOutlineViewButton class, press Ctrl+Space and select the Menu entry. Adapt the created code until it matches the template as shown in Listing 3. Note that in your implementation, the menu should extend AbstractMenu instead of AbstractFormMenu in contrast to what is shown in Listing 3. As a consequence, the method getConfiguredForm from Listing 3 is obsolete. Create another menu called OptionsMenu right after the newly created QuickAccessMenu according to Listing 3. Create a last menu called UserMenu after the OptionsMenu according to Listing 3. Delete the method onThemeChanged. Remove the statement in the body of the constructor. Note that it is not necessary to organize the imports since you have registered the organization of imports as a save action earlier in this tutorial. At the end of these changes the inner class structure of class Desktop will look similar to the sample shown in Listing 3. Listing 3. Structure of class Desktop with outline buttons and top level menus. @ClassId(\"70eda4c8-5aed-4e61-85b4-6098edad8416\") public class Desktop extends AbstractDesktop { // outline buttons of the application @Order(1) @ClassId(\"9405937b-66e8-491a-831d-69adca724b90\") public class ContactOutlineViewButton extends AbstractOutlineViewButton { } @Order(2) @ClassId(\"55febc84-ad6d-4ee8-9963-d1d40169a63a\") public class SearchOutlineViewButton extends AbstractOutlineViewButton { } // top level menus for the header area of the application @Order(10) @ClassId(\"50df7a9d-dd3c-40a3-abc4-4619eff8d841\") public class QuickAccessMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"QuickAccess\"); } } @Order(20) @ClassId(\"4fce42bf-85f9-4892-96a2-2e89e18eeaee\") public class OptionsMenu extends AbstractFormMenu { (1) @Override protected String getConfiguredText() { return TEXTS.get(\"Options\"); } @Override protected String getConfiguredIconId() { return Icons.Gear; } @Override protected Class getConfiguredForm() { return OptionsForm.class; } } @Order(30) @ClassId(\"8dbfbe9d-0382-471a-ae43-3178f7a9e720\") public class UserMenu extends AbstractFormMenu { (2) @Override protected String getConfiguredIconId() { return Icons.PersonSolid; } @Override protected String getConfiguredCssClass() { return \"profile-menu\"; } @Override protected Class getConfiguredForm() { return UserForm.class; } } } 1 In your implementation OptionsMenu should extend AbstractMenu and the method getConfiguredForm should be deleted. 2 In your implementation UserMenu should extend AbstractMenu and the method getConfiguredForm should be deleted. In the first step of the \"Contacts\" tutorial we have created the initial project setup that will serve as the basis for all the following tutorial steps. As the \"Contacts\" application is in a clean state you can now test the application using the following steps. The user interface of the application will now look as shown in Figure 14. Activate the launch group [webapp] all to start the JS build, the frontend and the backend Open address http://localhost:8082/ in your browser Figure 14. The \"Contacts\" application at the end of tutorial step 1. From the coding perspective we now have all necessary maven Modules for the \"Contacts\" application including Java package and class names to match with the complete Scout \"Contacts\" demo application. This point is important as it simplifies the comparison of intermediate stages of the tutorial application with the Scout demo application. The same is true for the user perspective: The layout of the current state of the tutorial matches with the complete \"Contacts\" sample application. In the second step of the Scout tutorial the components to display persons and organizations are added to the \"Contacts\" outline of the user interface of the Scout application. Specifically, a \"Persons\" page and an \"Organizations\" page are created and added to the navigation tree of the \"Contacts\" outline. Database access and populating the pages with actual data from the database is not part of this section but will be covered in the next tutorial step (Creating and Accessing the Database). The addition of the \"Persons\" page is described in detail in the sections listed below. Creating additional Packages (Creating additional Packages) Creating the Country Lookup Call (Creating the Country Lookup Call) Creating the Person Page (Creating the Person Page) Adding Table Columns to the Page (Adding Table Columns to the Page) Link the Person Page to the Contacts Outline (Link the Person Page to the Contacts Outline) The addition of the company page is described in Adding the Company Page. Finally, the state of the \"Contacts\" application is summarized in What have we achieved?. A substantial part of the \"Contacts\" application deals with persons. In addition to the \"Persons\" page we will also add a Scout form to enter/edit persons in a later tutorial step. For the \"Contacts\" application we use this fact to justify the addition of a specific Java package that will hold all classes related to persons. This person package can be created with the following steps. Open the \"Contacts\" Maven module contacts.client in the Eclipse Package Explorer Select the Java package org.eclipse.scout.contacts.client in folder src/main/java For IntelliJ: Create a package by right-clicking on the Java package and selecting New → Package as shown in Figure 15 Enter org.eclipse.scout.contacts.client.person and press Enter as shown in Figure 16. For Eclipse: Press Ctrl+N, enter \"package\" into the search field and select the Package wizard in the proposal box and click Next Press Finish as shown in Figure 17. Figure 15. Create the person package in IntelliJ. Figure 16. Add the person package to the \"Contacts\" application in IntelliJ. Figure 17. Add the person package to the \"Contacts\" application in Eclipse. We will also need a separate package for organizations and some common elements. Add package org.eclipse.scout.contacts.client.organization Add package org.eclipse.scout.contacts.client.common The pages for the persons and the organizations will also display country information. To display country names we will be using a special column, that maps the country codes received from the backend application to translated country names. As the Java class Locale already contains both country codes and country names we can take advantage of this class and use it in a Scout local lookup call. In package org.eclipse.scout.contacts.client.common create a new class CountryLookupCall according to the implementation provided in Listing 4. Listing 4. The Scout lookup call for countries. This lookup call will be used for the address field. @ClassId(\"37736ea5-e861-43d8-a6bc-144dad3c208f\") public class CountryLookupCall extends LocalLookupCall { (1) private static final long serialVersionUID = 1L; @Override protected List> execCreateLookupRows() { (2) List> rows = new ArrayList<>(); for (String countryCode : Locale.getISOCountries()) { Locale country = new Locale(\"\", countryCode); rows.add(new LookupRow<>(countryCode, country.getDisplayCountry())); (3) } return rows; } } 1 Makes the CountryLookupCall to work with key type String 2 Defines the set of lookup rows to be used 3 Add a row with the country code as key and the country name as display value In this section we create the Scout page that will be used to list all entered persons to the user of the \"Contacts\" application. Out-of-the box this page will support the sorting and filtering of all the persons. This \"Persons\" page is then added to the navigation tree below the \"Contacts\" outline. We can now add the Scout person page as described below. Select the newly created package org.eclipse.scout.contacts.client.person in the Package Explorer For IntelliJ Create a new Scout page by right-clicking on the package and selecting New → Scout Element → Page as shown in Figure 18 For Eclipse Press Ctrl+N, enter \"scout page\" into the search field and select the Scout Page wizard in the proposal box and click [button]. Un-check the Create an Abstract Super Page option, as we don’t need an additional abstract super class for our new page. Enter PersonTablePage as the class name and click Finish as shown in Figure 20 Figure 18. Create the person page in IntelliJ. Figure 19. Add the person page to the \"Contacts\" application in IntelliJ. Figure 20. Add the person page to the \"Contacts\" application in Eclipse. The Scout New Page Wizard then creates an initial implementation for the PersonTablePage class very similar to the listing provided in Listing 5 below. Listing 5. Initial implementation of class PersonTablePage. @PageData(PersonTablePageData.class) @ClassId(\"23c10251-66b1-4bd6-a9d7-93c7d1aedede\") public class PersonTablePage extends AbstractPageWithTable { @Override protected String getConfiguredTitle() { return TEXTS.get(\"Persons\"); (1) } @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IPersonService.class) .getPersonTableData(filter, getOrganizationId())); (2) } @Override (3) protected boolean getConfiguredLeaf() { return true; } @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { // container class to hold columns and other elements for this table page (4) } } Before we start to add the columns to the table of the page we need to do some minor adaptations to Listing 5. 1 Specify the title \"Persons\" for the page using the Scout NLS tooling. 2 You don’t need to update method execLoadData to match this listing for now. 3 Add method getConfiguredLeaf to specify that the person page will not have any child pages. 4 We will add the columns in the next section of this tutorial. We are now ready to populate the inner class Table of the person page with the columns to display various person attributes. Table pages are an important UI element of Scout applications as they frequently play a central role in the interactions of a user with the application. Out of the box table pages offer powerful options to sort, filter and re-arrange the data contained in the table. This functionality offers a good starting point to decide which columns to add to a table page. To decide about the columns to add the following criteria have been useful in practice. Unique identifier of an element Attributes that are most frequently used in searches Category attributes that are useful for filtering Fewer columns are better As the visible data of all users is held in the memory of the frontend server it is good practice to keep the number of columns as low as possible. Not taking this advice into account can substantially increase the memory footprint of the frontend server in production. For the person page of the \"Contacts\" application we will add the following columns. PersonId: Hidden attribute of type string to hold the person key. Class name: PersonIdColumn First Name: String column. Class name: FirstNameColumn Last Name String column. Class name: LastNameColumn City: String column. Class name: CityColumn Country: Smart column. Class name: CountryColumn Phone: String column, not visible per default. Class name: PhoneColumn Mobile Phone: String column, not visible per default. Class name: MobileColumn Email: String column, not visible per default. Class name: EmailColumn Organization: String column, not visible per default. Class name: OrganizationColumn Make sure to use column class names exactly as indicated above. Working with different names is possible but requires additional work later in the tutorial when the data retrieved from the database is mapped to these column class names. To add the first column PersonIdColumn we open class PersonTablePage in the Java editor and place the cursor inside of the body of the inner Table class. We then open the Scout content assist with Ctrl+Space and select the Column proposal as shown in Figure 21 (IntelliJ) and Figure 22 (Eclipse). Figure 21. Adding a column to the person page table in IntelliJ. Figure 22. Adding a column to the person page table in Eclipse. In the first edit box we type \"PersonId\" as shown in Figure 23 (IntelliJ) and Figure 24 (Eclipse) and press Enter. Figure 23. Adding a column to the person page table in IntelliJ. Figure 24. Adding a column to the person page table in Eclipse. To configure this column as an invisible primary key we modify the newly created column class according to Listing 6. Listing 6. Implementation of the person primary key column PersonIdColumn. @Order(1) @ClassId(\"1cbc9059-caef-4684-b013-bfa3bc0d0642\") public class PersonIdColumn extends AbstractStringColumn { @Override (1) protected boolean getConfiguredDisplayable() { return false; } @Override (2) protected boolean getConfiguredPrimaryKey() { return true; } } 1 Returning false here makes this column invisible. As this column will be excluded from the table control the user is not aware of the existence of this column. 2 Returning true marks this attibute as a primary key (or part of a primary key) We can now add the additional columns FirstNameColumn, LastNameColumn, CityColumn below. After entering the class name press Tab twice to move the cursor to the label text of the field. In the case of the first name enter \"FirstName\" and hit Ctrl+Space to open the wizard to add the translated text \"First Name\". For these three columns the default implementation is fine and does not need any adaptations. Listing 7 below provides an example for this type of columns. Listing 7. Implementation of the first name column. @Order(2) @ClassId(\"99df594a-6731-4757-a799-aacdbb4788d3\") public class FirstNameColumn extends AbstractStringColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"FirstName\"); } @Override protected int getConfiguredWidth() { return 120; } } For column CountryColumn we will use a smart column. We again use Ctrl+Space to open the wizard and enter \"Country\" for the class name box and press Tab once and select AbstractSmartColumn as column type. Next we press Tab again to enter \"Country\" as the translated text. In the created class CountryColumn we need to add the generic type parameter to the super class declaration (AbstractSmartColumn) and add the method getConfiguredLookupCall according to Listing 8. Listing 8. Implementation of the country smart column. @Order(5) @ClassId(\"a39ad408-b5e5-4794-b86a-ddc13025862e\") public class CountryColumn extends AbstractSmartColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"Country\"); } @Override protected int getConfiguredWidth() { return 120; } @Override (1) protected Class> getConfiguredLookupCall() { return CountryLookupCall.class; } } 1 The configured lookup call is used to map country codes to the country names used in the user interface. After the country column we add the four columns PhoneColumn, MobileColumn, EmailColumn and OrganizationColumn that are initially not visible in the user interface. As an example for such a column Listing 9 is provided below. Listing 9. Implementation of the (initially invisible) phone column. @Order(6) @ClassId(\"fa879506-d38c-46a6-990c-1f1ae4b74d4e\") public class PhoneColumn extends AbstractStringColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"Phone\"); } @Override (1) protected boolean getConfiguredVisible() { return false; } @Override protected int getConfiguredWidth() { return 120; } } 1 Returning false hides the column initially. Using the table control the user can then make this column visible in the user interface. Use the content assist to efficiently add method getConfiguredVisible. Place the cursor after method getConfiguredHeaderText, type \"getConVis\" and hit Ctrl+Space and the method is inserted for you. We have now created a person page with corresponding table columns. However, this new UI component is not yet visible in the user interface. What is missing is the link from the application’s contacts outline class to the newly created PersonTablePage class. This is what we will do in the following section. In this section we add the person page to the contacts outline created during the initial project setup of the first step of this tutorial. This will make the person page visible in the navigation area below the \"Contacts\" outline. For this we have to add a single line of code to method execCreateChildPages of class ContactOutline according to Listing 10 Listing 10. Adding the PersonTable to the ContactOutline. @Override protected void execCreateChildPages(List> pageList) { // pages to be shown in the navigation area of this outline pageList.add(new PersonTablePage()); (1) } 1 A new instance of the PersonTable is added to this outline. This makes the person page visible in the navigation area below the contacts outline. The application is now in a state where we can restart the backend and the frontend server to verify our changes in the user interface. This section creates and adds a table page for organization to the \"Contacts\" outline. To create an organizations page the same steps are required as for the creation of the person page. The description is therefore kept on a higher level and in the text below only the main steps are described. Where appropriate, pointers are provided to the detailed descriptions for the creation of the person page. Add page OrganizationTablePage with title \"Organizations\" using the Scout new page wizard Listing 11. Initial implementation of class OrganizationTablePage. @PageData(OrganizationTablePageData.class) @ClassId(\"18f7a78e-0dd0-4e4e-9234-99892bb4459f\") public class OrganizationTablePage extends AbstractPageWithTable { @Override protected String getConfiguredTitle() { return TEXTS.get(\"Organizations\"); (1) } @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IOrganizationService.class).getOrganizationTableData(filter)); } @ClassId(\"54f3d730-7a62-462b-99ec-78fd1e6bb69d\") public class Table extends AbstractTable { // container class to hold columns and other elements for this table page } } 1 Make sure to add a translated text entry for \"Organizations\" using the Scout NLS tooling The implementation of class OrganizationTablePage using the Scout new page wizard then looks as shown in Listing 11. As in the case of the person page you can now add the columns for the inner Table class. For the organization page add the columns according to the specification provided below. OrganizationId: Hidden attribute of type string to hold the organization key. Class name: OrganizationIdColumn Name: String column. Class name: NameColumn City: String column. Class name: CityColumn Country: Smart column. Class name: CountryColumn Homepage: String column, not visible per default. Class name: HomepageColumn As in the case of the person page we have to add the newly created class OrganizationTablePage in method execCreateChildPages of the outline class ContactOutline as shown in Listing 12. Listing 12. Adding the OrganizationTablePage to the ContactOutline. @Override protected void execCreateChildPages(List> pageList) { // pages to be shown in the navigation area of this outline pageList.add(new PersonTablePage()); (1) pageList.add(new OrganizationTablePage()); } 1 The pages will appear in the user interface according to the order in which they are added to the outline. In the second step of the \"Contacts\" tutorial we have created a person page and an organization page to display data of persons and organizations. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the user interface in your browser. The user interface should look like the screenshot provided in Figure 25. Figure 25. The \"Contacts\" application with the person and organization pages at the end of tutorial step 2. When comparing the state of the \"Contacts\" tutorial application with the Scout demo application in Figure 1 the main difference is the missing person data. Adding access to a database is the focus of the next tutorial step. This tutorial step shows how Scout applications can interact with databases via JDBC. Due to the clean layering implemented in the \"Contacts\" application only the Scout backend server connects to the database. We therefore focus on the Scout backend in this part of the tutorial. For the \"Contacts\" application we will work with a Derby database. The choice of Derby is based on the fact that no additional installation is required and it is possible to work with in-memory databases. We start this tutorial step with copying the classes that handle the database creation/access from the full \"Contacts\" demo application as described in Adding the Infrastructure. The setup is then explained in the following sections. Scout Config Properties (Scout Config Properties) The SQL Service and SQL Statements (The SQL Service and SQL Statements) The Database Setup Service (The Database Setup Service) With the basic infrastructure in place we review the existing \"Contacts\" backend to answer the question What is missing?. In Fetching Organization and Person Data we then add the missing pieces. At the end of this tutorial step the \"Contacts\" backend server provides person and organization data to the frontend server as summarized in What have we achieved?. This section describes the installation of the necessary components and classes that handle the database creation/access of the \"Contacts\" application. To add the support for the Scout JDBC components and the Derby database we first need to declare the corresponding dependencies in the pom.xml file of the Maven server module. This can be done using the following steps. Expanding the Maven module contacts.server in the Eclipse Package Explorer Open the pom.xml file (use a double click on the file in the package explorer) and switch to the \"pom.xml\" tab in the Maven POM Editor. Add the database related dependencies according to Listing 13 Listing 13. The additional dependencies needed in the server pom.xml to use the derby database 4.0.0 org.eclipse.scout.contacts org.eclipse.scout.contacts 23.2-SNAPSHOT ../org.eclipse.scout.contacts org.eclipse.scout.contacts.server (1) org.eclipse.scout.rt org.eclipse.scout.rt.server.jdbc org.apache.derby derby 10.15.2.0 org.apache.derby derbytools 10.15.2.0 1 Add the derby and the org.eclipse.scout.rt.server.jdbc dependencies to the pom.xml of your \"Contacts\" server module. After adding the database dependencies to the server’s pom.xml file we need to update all Maven server modules for the \"Contacts\" app. To do this: For IntelliJ, press the Maven button on the right side as shown in Figure 26 to open up the Maven modules and then press the refresh button on the left side as shown in Figure 27. For Eclipse, select the three modules org.eclipse.scout.contacts.server.* and hit Alt+F5 as shown in Figure 28 and start the update with OK. Figure 26. Locate the Maven server modules in IntelliJ. Figure 27. Update the Maven server modules for the \"Contacts\" application in IntelliJ. Figure 28. Update the Maven server modules for the \"Contacts\" application in Eclipse. The next step is to create the org.eclipse.scout.contacts.server.sql package. Expand folder src/main/java of Maven module contacts.server Select the existing package org.eclipse.scout.contacts.server For IntelliJ: Right click on it and select New → Package Enter org.eclipse.scout.contacts.server.sql into the Name field and hit Enter For Eclipse: Hit Ctrl+N on it This opens the dialog to select a wizard. Enter \"package\" into the search field Select the New Java Package wizard with a double click on the Java Package proposal Enter org.eclipse.scout.contacts.server.sql into the Name field of the wizard and click Finish We are now ready to copy the classes related to the database infrastructure from the \"Contacts\" demo application to our tutorial workspace. The simplest way to do this is to open a second Eclipse IDE with the workspace where you have imported the Scout demo applications. If you have not done this yet go to the beginning of this tutorial [cha-large_example] and catch up now. In the demo application workspace navigate to the same package org.eclipse.scout.contacts.server.sql and copy over all its classes. After copying these classes make sure that the structure of your server Maven module looks as shown in Figure 29 (IntelliJ) and Figure 30 (Eclipse). Figure 29. The copied database classes in the tutorial workspace in IntelliJ. Figure 30. The copied database classes in the tutorial workspace in Eclipse. The imported classes are described in the following sections. Additional information is provided where these classes are relying on Scout concepts that have not previously been introduced. Scout Config properties can greatly improve the flexibility of Scout applications. For the \"Contacts\" application this feature is used to keep its database setup configurable. Moving from a in-memory setup to a disk based database is then possible without any reprogramming. The Scout backend (and frontend) applications initialize config properties from matching values found in file config.properties. For missing property values the default values defined in the config property classes are used. In the case of the \"Contacts\" application the config property files are located in the subfolder src/main/resources of the Maven modules that specify the frontend and the backend application. Expand Maven module contacts.server.app.dev Expand subfolder src/main/resources Open file config.properties in the text editor Append all properties defined in Listing 14 to the file Listing 14. Properties relevant for creating and accessing the database. ### Database contacts.database.jdbc.mappingName=jdbc:derby:memory:contacts-database contacts.database.autocreate=true contacts.database.autopopulate=true ### Application specific contacts.superuser=system These added property values then match the config properties defined in the class DatabaseProperties provided in Listing 15. Remember that this is one of the database infrastructure classes we have copied before. Listing 15. Typed properties for the \"Contacts\" application public class DatabaseProperties { public static class DatabaseAutoCreateProperty extends AbstractBooleanConfigProperty { // defines default value and key @Override public Boolean getDefaultValue() { return Boolean.TRUE; (1) } @Override public String getKey() { return \"contacts.database.autocreate\"; (2) } @Override public String description() { return \"Specifies if the contacts database should automatically be created if it does not exist yet. The default value is true.\"; } } public static class DatabaseAutoPopulateProperty extends AbstractBooleanConfigProperty { // defines default value and key } public static class JdbcMappingNameProperty extends AbstractStringConfigProperty { // defines default value and key } public static class SuperUserSubjectProperty extends AbstractSubjectConfigProperty { // defines default value and key } } 1 Defines the default value of the property that is used if the property is not defined in file config.properties 2 Defines the key to be used in file config.properties In the Scout framework config properties are always typed and need to implement interface IConfigProperty. For commonly used types Scout already provides classes. A boolean property may be created by extending Scout class AbstractBooleanConfigProperty. Accessing the actual property values in the code is demonstrated in the next section. Accessing databases with the Scout framework is implemented with SQL services that extend base class AbstractSqlService. As the \"Contacts\" application will be working with a Derby database we also need a Derby specific SQL service. This is why we have copied over class DerbySqlService. The only project specific method is getConfiguredJdbcMappingName as implemented in Listing 16. Listing 16. The Derby SQL service to connect to the database public class DerbySqlService extends AbstractDerbySqlService { @Override protected String getConfiguredJdbcMappingName() { return CONFIG.getPropertyValue(JdbcMappingNameProperty.class); } public void createDB() { String mappingName = CONFIG.getPropertyValue(JdbcMappingNameProperty.class); try { runDerbyCommand(mappingName + \";create=true\"); (1) } catch (SQLException e) { throw BEANS.get(PlatformExceptionTranslator.class).translate(e); } } } 1 Check the Derby documentation for additional attributes. This listing also demonstrates how to use the config properties in the code. With the property values defined in the previous section the \"Contacts\" application is working with an in-memory database. To change the setup to a disk based version, we would have to change the value for the property contacts.database.jdbc.mappingName from jdbc:derby:memory:contacts-database to jdbc:derby:. For a Windows box a concrete example could look like this: jdbc:derby:c:\\\\derby\\\\contacts-database. Now we look at how the actual SQL statements of the \"Contacts\" application work. For our application all statements are collected into a single class. While there are many more options how to organize SQL and Java code this setup has its own advantages. Efficient maintenance as all SQL statements are located in a single place Code completion support in the Eclipse IDE when using the statements The setup is easy to explain The SQL statements related to the database structure are provided in Listing 17. The statements (or building blocks of statements) in interface SQLs are plain SQL in many cases. In the other cases the statement texts include Scout specific syntax extensions with : as a prefix character. Examples are : and :{.}. Listing 17. Interface SQLs with the SQL commands for the creation of the database tables. public interface SQLs { String SELECT_TABLE_NAMES = \"\" + \"SELECT UPPER(tablename) \" + \"FROM sys.systables \" + \"INTO :result\"; (1) String ORGANIZATION_CREATE_TABLE = \"\" + \"CREATE TABLE ORGANIZATION \" + \" (organization_id VARCHAR(64) NOT NULL CONSTRAINT ORGANIZATION_PK PRIMARY KEY,\" + \" name VARCHAR(64), \" + \" logo_url VARCHAR(512), \" + \" url VARCHAR(64), \" + \" street VARCHAR(64), \" + \" city VARCHAR(64), \" + \" country VARCHAR(2), \" + \" phone VARCHAR(20), \" + \" email VARCHAR(64), \" + \" notes VARCHAR(1024)\" + \" )\"; String PERSON_CREATE_TABLE = \"\" + \"CREATE TABLE PERSON \" + \" (person_id VARCHAR(64) NOT NULL CONSTRAINT PERSON_PK PRIMARY KEY, \" + \" first_name VARCHAR(64), \" + \" last_name VARCHAR(64), \" + \" picture_url VARCHAR(512), \" + \" date_of_birth DATE, \" + \" gender VARCHAR(1), \" + \" street VARCHAR(64), \" + \" city VARCHAR(64), \" + \" country VARCHAR(2), \" + \" phone VARCHAR(20), \" + \" mobile VARCHAR(20), \" + \" email VARCHAR(64), \" + \" organization_id VARCHAR(64), \" + \" position VARCHAR(512), \" + \" phone_work VARCHAR(20), \" + \" email_work VARCHAR(64), \" + \" notes VARCHAR(1024), \" + \" CONSTRAINT ORGANIZATION_FK FOREIGN KEY (organization_id) REFERENCES ORGANIZATION (organization_id)\" + \" )\"; } 1 The syntax ':identifier' adds convenience and is supported by the Scout framework The next section discusses how the components introduced above are used by the \"Contacts\" appliction to create an initial \"Contacts\" database during the startup phase of the application. The database setup service is responsible to create the \"Contacts\" database during the startup of the application. In order to implement such a service, a number of Scout concepts are combined into class DatabaseSetupService. Access config properties using class CONFIG Executing SQL statements via class SQL Logging via class LOG Scout platform with the annotations @ApplicationScoped, @CreateImmediately and @PostConstruct How these elements are used in class DatabaseSetupService is shown in Listing 18. The actual creation of the \"Contacts\" database is performed by the method autoCreateDatabase. At the time of the database creation no user is yet logged into the application. This is why we use a run context associated with the super user. The context is then used to execute the runnable that creates the organization and person tables. Listing 18. Class DatabaseSetupService to create the database tables for the \"Contacts\" application. @ApplicationScoped @CreateImmediately public class DatabaseSetupService implements IDataStoreService { private static final Logger LOG = LoggerFactory.getLogger(DatabaseSetupService.class); @PostConstruct public void autoCreateDatabase() { if (CONFIG.getPropertyValue(DatabaseAutoCreateProperty.class)) { try { BEANS.get(DerbySqlService.class).createDB(); RunContext context = BEANS.get(SuperUserRunContextProducer.class).produce(); IRunnable runnable = () -> { createOrganizationTable(); createPersonTable(); }; context.run(runnable); } catch (RuntimeException e) { BEANS.get(ExceptionHandler.class).handle(e); } } } public void createOrganizationTable() { if (!getExistingTables().contains(\"ORGANIZATION\")) { SQL.insert(SQLs.ORGANIZATION_CREATE_TABLE); LOG.info(\"Database table 'ORGANIZATION' created\"); if (CONFIG.getPropertyValue(DatabaseAutoPopulateProperty.class)) { SQL.insert(SQLs.ORGANIZATION_INSERT_SAMPLE + SQLs.ORGANIZATION_VALUES_01); SQL.insert(SQLs.ORGANIZATION_INSERT_SAMPLE + SQLs.ORGANIZATION_VALUES_02); LOG.info(\"Database table 'ORGANIZATION' populated with sample data\"); } } } public void createPersonTable() { if (!getExistingTables().contains(\"PERSON\")) { SQL.insert(SQLs.PERSON_CREATE_TABLE); LOG.info(\"Database table 'PERSON' created\"); if (CONFIG.getPropertyValue(DatabaseAutoPopulateProperty.class)) { SQL.insert(SQLs.PERSON_INSERT_SAMPLE + SQLs.PERSON_VALUES_01); SQL.insert(SQLs.PERSON_INSERT_SAMPLE + SQLs.PERSON_VALUES_02); LOG.info(\"Database table 'PERSON' populated with sample data\"); } } } private Set getExistingTables() { StringArrayHolder tables = new StringArrayHolder(); SQL.selectInto(SQLs.SELECT_TABLE_NAMES, new NVPair(\"result\", tables)); (1) return CollectionUtility.hashSet(tables.getValue()); } } 1 The existing tables are stored in the StringArrayHolder object named \"result\". The usage of CONFIG is already covered by the previous section. Introductions for SQL, LOG and the Scout platform annotations are provided below. Logging Scout uses the SLF4J framework for logging. For the actual implementation of the loggers Scout uses Logback per default. To use logging a local logger is first created using the SLF4J LoggerFactory class. Additional information regarding the logging configuration is provided below. Executing SQL Statements For the execution of SQL statements Scout provides the convenience class SQL. The various methods can be used with a simple SQL command as in SQL.insert(mySqlCommand) or using additional named objects as in SQL.insertInto(mySqlCommand, myHolder). The Scout class NVPair is frequently used to create such named objects. Make sure that the identifiers (using the Scout : syntax) provided in the SQL commands always match with the names associated with the named objects. Scout Platform The Scout platform provides the basic infrastructure and a number of services to a Scout application. Services are represented by Scout beans that are registered at startup with the platform and created once they are needed. For class DatabaseSetupService we can use the Scout annotation @ApplicationScoped to register the service and to make sure that there will only be a single instance of this class. To force the creation of a bean DatabaseSetupService at startup time we also add Scout annotation @CreateImmediately. Finally, the annotation @PostConstruct executes our method autoCreateDatabase as soon as the DatabaseSetupService bean is created. Changing the basic log level of an application is a frequently used scenario. As Scout is using Logback per default we can adapt the log level in the logback.xml configuration files as shown in Listing 19. For the \"Contacts\" application these configuration files are located in folder src/main/resources of the Maven modules that define the frontend and the backend applications. More information regarding these configuration files is provided in the Logback manual. Listing 19. Setting the log level in the logback.xml configuration file. (1) 1 The level attribute of the element is used as the basic log level. Try \"DEBUG\" or \"WARN\" as alternative values. This section reviews the backend infrastructure that has been created so far and identifies the pieces that are missing to fetch person and organization data to send it to the frontend server of the \"Contacts\" application. During the creation of the person page and the organization page the Scout wizards created more than just Scout pages that are visible in the user interface. It also added corresponding classes in the shared module and the server module of the \"Contacts\" application. The new page wizard basically added the complete round trip from the client (frontend server) to the server (backend server) and back. Using the organization page as an example, the setup created by the page wizard involves the following classes. Class OrganizationTablePage with method execLoadData in the client module The service interface IOrganizationService and class OrganizationTablePageData in the shared module Class OrganizationService with the method stub getOrganizationTableData in the server module On the client side the server roundtrip is implemented in method execLoadData as shown in Listing 20. Listing 20. Accessing the \"Contacts\" backend server to fetch organization data. @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IOrganizationService.class).getOrganizationTableData(filter)); } This roundtrip between class OrganizationTablePage and OrganizationService works through the following steps. BEANS.get(IOrganizationService.class) returns a reference to a client proxy service Method getOrganizationTableData(filter) is executed on the corresponding server service This method returns the organization data in the form of an OrganizationTablePageData object Method importPageData transfers the data from the page data into the table of the user interface On the server side fetching the data from the database will be implemented in class OrganizationService according to Listing 21. Listing 21. Method getTableData to access the database and map the data into a pageData object. public class OrganizationService implements IOrganizationService { @Override public OrganizationTablePageData getOrganizationTableData(SearchFilter filter) { OrganizationTablePageData pageData = new OrganizationTablePageData(); return pageData; } } In the next section we will implement the database access logic in the getOrganizationTableData methods of the server classes OrganizationService and PersonService. We are now ready to fetch data from the Derby database using the available infrastructure and the SQL statements prepared in class SQLs. For the implementation of method getOrganizationTableData in class OrganizationService we will use the two SQL snippets provided in Listing 22. Listing 22. Interface SQLs with the SQL to fetch the list of organizations with their attributes. public interface SQLs { String ORGANIZATION_PAGE_SELECT = \"\" + \"SELECT organization_id, \" + \" name, \" + \" city, \" + \" country, \" + \" url \" + \"FROM ORGANIZATION \"; String ORGANIZATION_PAGE_DATA_SELECT_INTO = \"\" + \"INTO :{page.organizationId}, \" (1) + \" :{page.name}, \" + \" :{page.city}, \" + \" :{page.country}, \" + \" :{page.homepage}\"; } 1 The syntax ':{identifier.attribute}' adds convenience to map SQL result sets to Scout page data objects. Taking advantage of the SQL convenience offered by the Scout framework, we can add the missing functionality with two lines of code. See Listing 23 for the full listing of method getOrganizationTableData. After adding the two additional lines, we update the imports of the classes with pressing Ctrl+Shift+O. Listing 23. Method getTableData to access the database and map the data into a pageData object. public class OrganizationService implements IOrganizationService { @Override public OrganizationTablePageData getOrganizationTableData(SearchFilter filter) { OrganizationTablePageData pageData = new OrganizationTablePageData(); String sql = SQLs.ORGANIZATION_PAGE_SELECT + SQLs.ORGANIZATION_PAGE_DATA_SELECT_INTO; (1) SQL.selectInto(sql, new NVPair(\"page\", pageData)); (2) return pageData; } } 1 Added line 1: Assembling of the SQL statement 2 Added line 2: Fetching the data from the database and storing the result in pageData Note that the identifier \"page\" in the NVPair object will be mapped to the same identifier used in the ORGANIZATION_PAGE_DATA_SELECT_INTO statement. Finally, we have to also implement the loading of the person data in class PersonService. The implementation of method getPersonTableData is provided in Listing 24. Listing 24. Method getPersonTableData to access the database and map the data into a page data object. public class PersonService implements IPersonService { @Override public PersonTablePageData getPersonTableData(SearchFilter filter) { PersonTablePageData pageData = new PersonTablePageData(); String sql = SQLs.PERSON_PAGE_SELECT + SQLs.PERSON_PAGE_DATA_SELECT_INTO; SQL.selectInto(sql, new NVPair(\"page\", pageData)); return pageData; } } In the third step of the \"Contacts\" tutorial we have added the infrastructure to work with a Derby database. The infrastructure is used to create and populate the initial database. In addition person and organization data is now fetched from the database on the \"Contacts\" backend server and handed to the \"Contacts\" frontend server via a page data object. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. Person and company data is now visible in the user interface as shown in Figure 31. Figure 31. The \"Contacts\" application displaying person data at the end of tutorial step 3. In this tutorial step we add the Scout forms that are used to create and edit persons and organizations in the user interface. This tutorial step also provides an introduction into the design and implementation of complex form layouts with the Scout framework. Before we start with the actual implementation of the form Designing the Person Form provides an introduction to the layouting concepts of the Scout framework. Based on this information we design a hierarchical form layout for the person form and can then dive into the creation of the person form. Implementing the Form (Implementing the Form) Adding a Gender Code Type (Adding a Gender Code Type) Adding Form Fields (Adding Form Fields) Person Form Handler and Person Service (Person Form Handler and Person Service) The tutorial step concludes with a summary in What have we achieved?. We start with the sketch of the form layout as shown in Figure 32. Figure 32. A sketch of the target layout for the person form. The upper half of the form shows a picture of the person and contains some primary attributes such as first name and the gender of the person. The lower half of the form contains tab boxes. A \"Contact Info\" tab provides contact details of the person and adding notes for the person in the form of free text is possible in the \"Notes\" tab. Figure 33 below shows how the sketched form can fit with the logical grid layout of the Scout framework. Scout containers have two columns (indicated in red) per default and as many rows (indicated in yellow) as needed. Figure 33. Logical columns and rows of the Scout form layout. Scout containers have two columns per default. Individual form fields consist of a label part and a field part and occupy a single cell in the logical grid. Examples for fields using the default configuration are the first name field or the email field. When needed, fields can be configured to occupy several columns or rows. An example for this case is the image field that will hold the picture of the person. This field is configured to occupy 5 logical rows. With Scout’s container widgets such as group boxes, tab boxes and sequence boxes complex layouts can be achieved. Containers provide a lot of flexibility as these widgets can be nested hierarchically as shown in Figure 34 Figure 34. The hierarchical organization of the form including Scout group boxes, tab boxes and a sequence box. The sketch above details the organization of the container components to match the desired layout for the person form. The different container widgets can all be used with their default settings except for the address box. For the address box we will have to modify its size and its inner organization. As group boxes occupy two columns per default we will need to reduce the width of the address box to a single column. The second change is to the inner layout of the address box. To force the location box to come below the street field we have to change the inner layout of the group box to a single column as well. Otherwise, the location box would be shown next to the street field. In the next section we will start to implement the person form with the layout described above. In this section we implement the person form with its container widgets as described in the previous section. To be able to use the form to create and edit persons we will add \"New\" and \"Edit\" context menus to the table in the person page. Finally, we will also add a \"Create Person\" entry to the \"Quick Access\" top level menu of the application. Start the form creation with the Scout new form wizard following the steps listed below. Expand the Maven module contacts.client in the package explorer Select package org.eclipse.scout.contacts.client.person in folder src/main/java For IntelliJ: Create a new Scout form by right-clicking on the package and selecting New → Scout Element → Form as shown in Figure 35 Enter \"Person\" into the Name as shown in Figure 36 and then hit Enter For Eclipse: Press Ctrl+N and enter \"form\" into the search field of the wizard selection dialog Select the Scout Form proposal and click the Next button Enter \"Person\" into the Name and verify that the field contents match Figure 37 Click Finish to start the creation of the form and its related components Figure 35. Create a New Scout Form in IntelliJ. Figure 36. Use the New Scout Form to create the person form in IntelliJ. Figure 37. Use the New Scout Form to create the person form in Eclipse. Now open the newly created class PersonForm in the Java editor and perform the changes listed below as shown in Listing 25. Add property personId with the corresponding getter and setter methods Add method computeExclusiveKey Add method getConfiguredDisplayHint Verify the translated text entry in method getConfiguredTitle Listing 25. Add getConfiguredDisplayHint and the methods related to the person’s primary key. @ClassId(\"1cde38c1-da32-4fdd-92e7-28d82a5d7bf9\") @FormData(value = PersonFormData.class, sdkCommand = SdkCommand.CREATE) (1) public class PersonForm extends AbstractForm { // represents the person's primary key private String personId; @FormData (2) public String getPersonId() { return personId; } @FormData (2) public void setPersonId(String personId) { this.personId = personId; } @Override public Object computeExclusiveKey() { (3) return getPersonId(); } @Override protected int getConfiguredDisplayHint() { (4) return IForm.DISPLAY_HINT_VIEW; } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Person\"); } } 1 Links the form with its form data class PersonFormData. 2 The annotation @FormData on the getter and setter method define the personId as a property that will be included in the form data. 3 The object returned by this method is used by the framework to verify if a specific entity is already opened in some other form. 4 Configure this form to be opened in the view mode. Views are opened in the bench area of the user interface. We are now going to add the layout containers according to Listing 26. First add class GeneralBox using the Scout content assist selecting the Group Box proposal. Delete method getConfiguredLabel, as we are only using this group box to organize fields. After the general box add a tab box container class by choosing the Tab Box proposal in the Scout content assist. Inside of class DetailsBox create the individual tab containers \"Contact Info\", \"Work\" and \"Notes\" as inner classes of the details box according to Listing 26. Listing 26. The layouting structure of the person form using Scout container widgets. public class PersonForm extends AbstractForm { @Order(10) @ClassId(\"27a040ac-eac5-47c6-a826-572633b9d4ef\") public class MainBox extends AbstractGroupBox { (1) @Order(10) @ClassId(\"08832a97-8845-4ff4-8dfd-c29366c22742\") public class GeneralBox extends AbstractGroupBox { (2) } @Order(20) @ClassId(\"3469046e-ee95-4e86-b0c9-a8ed01fbf664\") public class DetailsBox extends AbstractTabBox { (3) @Order(10) @ClassId(\"2081b483-3d6e-4239-b7da-b6e2d2aa3b7a\") public class ContactInfoBox extends AbstractGroupBox { (4) @Order(10) @ClassId(\"736450dd-ba89-43cd-ba52-bcd31196b462\") public class AddressBox extends AbstractGroupBox { } } @Order(20) @ClassId(\"8e18a673-aca5-44a2-898f-60a744e4467a\") public class WorkBox extends AbstractGroupBox { } @Order(30) @ClassId(\"fcb5b155-2c89-4ef8-9a96-ac41e9032107\") public class NotesBox extends AbstractGroupBox { } } @Order(30) @ClassId(\"e54548b8-601e-41a4-842c-db25b5f1cad1\") public class OkButton extends AbstractOkButton { } @Order(40) @ClassId(\"26612eb9-1832-4284-ac5a-9f450dc7ff9b\") public class CancelButton extends AbstractCancelButton { } } } 1 Every Scout form has a class MainBox. It contains all visible UI components. 2 The GeneralBox will hold the picture field, first name and last names, the date of birth and the gender. 3 The DetailsBox tab box will contain the various tabs implemented in inner group boxes. 4 The containers ContactInfoBox, WorkBox and Notes represent the three tabs of the tab box. To actually open the person form the form needs to be integrated in the user interface. In Scout application forms are typically opened by first selecting a specific row in a page and then using a context menu. For the \"Contacts\" application we will follow this pattern too. Open class PersonTablePage in the Java editor and create the context menus \"New\" and \"Edit\" in the inner class Table according to Listing 27. Listing 27. The page context menus to open the person form. @PageData(PersonTablePageData.class) @ClassId(\"23c10251-66b1-4bd6-a9d7-93c7d1aedede\") public class PersonTablePage extends AbstractPageWithTable { @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { @Override protected Class getConfiguredDefaultMenu() { (1) return EditMenu.class; } @Order(10) @ClassId(\"4a8f5e0e-6eb8-4296-8ad7-012151f572f2\") public class EditMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"Edit\"); } @Override protected void execAction() { PersonForm form = new PersonForm(); form.setPersonId(getPersonIdColumn().getSelectedValue()); (2) form.addFormListener(new PersonFormListener()); // start the form using its modify handler form.startModify(); } } @Order(20) @ClassId(\"8ac358f2-de17-4b2b-93f3-73e21a7415d8\") public class NewMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"New\"); } @Override protected Set getConfiguredMenuTypes() { (3) return CollectionUtility. hashSet( TableMenuType.EmptySpace, TableMenuType.SingleSelection); } @Override protected void execAction() { PersonForm form = new PersonForm(); form.addFormListener(new PersonFormListener()); // start the form using its new handler form.startNew(); } } private class PersonFormListener implements FormListener { @Override public void formChanged(FormEvent e) { // reload page to reflect new/changed data after saving any changes if (FormEvent.TYPE_CLOSED == e.getType() && e.getForm().isFormStored()) { reloadPage(); } } } } } 1 This action gets executed when the user presses Enter on a table row or double clicks on a table row. 2 Transfer the primary key of the selected person row to the person form. 3 Including TableMenuType.EmptySpace in the return value activates the \"New\" menu even when no row is selected. In addition to the context menus defined for the person page we also add a \"Create new person\" menu on the desktop under the \"Quick Access\" top level menu. To do this open class Desktop in the Java editor and navigate to the inner class QuickAccessMenu. We can then add a NewPersonMenu using the Scout content assist and selecting the Menu proposal entry. The final implementation for the \"Create new person\" menu is provided in Listing 28. Listing 28. The \"Create new person\" menu on the desktop. @ClassId(\"70eda4c8-5aed-4e61-85b4-6098edad8416\") public class Desktop extends AbstractDesktop { @Order(10) @ClassId(\"50df7a9d-dd3c-40a3-abc4-4619eff8d841\") public class QuickAccessMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"QuickAccess\"); } @Order(10) @ClassId(\"effb3b69-f488-4aed-8923-d430a5f1fd97\") public class NewPersonMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"NewPersonMenu\"); } @Override protected void execAction() { new PersonForm().startNew(); } } } } We have now created the initial implementation of the person form including context menus to open the form from the person page and the \"Quick Access\" top level menu of the \"Contacts\" application. At this point it is already possible to verify that the person form can be opened on the user interface via the context menus. A screenshot of the current state is shown in Figure 38. Figure 38. The initial person form and the top level menu \"Create new person\". This initial implementation of the person form is also ready to add the individual form fields into the container boxes. For the fields of the person form we can directly extend the abstract form field classes offered by the Scout framework. Only for the implementation of the gender field we need a Scout code type that represents the possible values for the radio buttons. In this section we will add a gender code type for the \"Contacts\" application. As code types can be used for the specification of the options of a radio button group, we will be able to implement the gender field by providing a reference to the code type. To keep things simple, the gender code type will contain a \"Male\" code and a \"Female\" code. Code types are frequently used in both the frontend and the backend of an application. This implies that code type classes need to be implemented in the application’s shared module. As the gender code type is related to persons we will implement this class in the person package. Follow the steps described below to create the gender code type. Expand the Maven module contacts.shared in the package explorer Select package org.eclipse.scout.contacts.shared.person in folder src/main/java For IntelliJ: Create a new Scout code type by right-clicking on the package and selecting New → Scout Element → Code Type as shown in Figure 39 Enter \"Gender\" into the Name as shown in Figure 40 and then hit Enter In the generated code type, change the generics from to . For Eclipse: Press Ctrl+N and enter \"code\" into the search field of the wizard selection dialog Select the Scout CodeType proposal and click the Next button Enter \"Gender\" into the Name field and use the type String for the first and second type argument according to Figure 41 Click Finish. Figure 39. Create the gender code in IntelliJ. Figure 40. Create the gender code using the Scout new code wizard in IntelliJ. Figure 41. Create the gender code using the Scout new code wizard in Eclipse. Then, open the newly created class GenderCodeType in the Java editor and set the ID constant to \"Gender\". The created class will then look like Listing 29 except for the missing inner code classes. We will add these inner codes as the next step. Listing 29. The Scout code type to represent the gender of a person. This code type will be used for the gender field. @ClassId(\"bbe8fae2-4923-42bc-9745-3bb3ef592b12\") public class GenderCodeType extends AbstractCodeType { private static final long serialVersionUID = 1L; public static final String ID = \"Gender\"; @Override public String getId() { return ID; } @Order(1000) @ClassId(\"8893e1e4-7b6c-46c2-8c84-42c914ec29d5\") public static class MaleCode extends AbstractCode { private static final long serialVersionUID = 1L; public static final String ID = \"M\"; @Override protected String getConfiguredText() { return TEXTS.get(\"Male\"); } @Override public String getId() { return ID; } } @Order(2000) @ClassId(\"23e1540e-2914-401f-9f42-e409ac2fb605\") public static class FemaleCode extends AbstractCode { private static final long serialVersionUID = 1L; public static final String ID = \"F\"; @Override protected String getConfiguredText() { return TEXTS.get(\"Female\"); } @Override public String getId() { return ID; } } } To add an inner class MaleCode code to the gender code type perform the steps below. Press Ctrl+Space and select the Code proposal with a double click Enter \"Male\" into the first box to be used in the MaleCode class name Tab to the value for the ID constant and set it to \"M\" Tab to the value in TEXTS.get and add \"Male\" and its translated text Hit Enter to finish Then repeat the steps above for the female code. In this section we will add the form fields to the layout containers of the person form. We will start with filling the general box with the picture field, followed by the other fields in the upper part of the person form. Finally, we fill the individual tab boxes into the details box in the lower part of the person form. As the first field we add the field that will show the picture of the person to the GeneralBox container. Open class PersonForm in the Java editor Place the cursor in the body of the inner class GeneralBox. Copy the code provided in Listing 30 into the general box. Add for each field a getter method above the MainBox (where all other getters are). Alternatively you could use the SDK to create both fields (including getters) and add the code from Listing 30. Listing 30. The picture field for the person form. @Order(10) @ClassId(\"617ffd40-0d69-4d02-b4f8-90c28c68c6ce\") public class PictureUrlField extends AbstractStringField { @Override (1) protected boolean getConfiguredVisible() { return false; } } @Order(20) @ClassId(\"6366a23e-f8ba-4b50-b814-202e63daffc8\") public class PictureField extends AbstractImageField { @Override (2) protected Class getConfiguredMasterField() { return PictureUrlField.class; } @Override (3) protected void execChangedMasterValue(Object newMasterValue) { updateImage((String) newMasterValue); } @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected int getConfiguredGridH() { return 5; } @Override protected boolean getConfiguredAutoFit() { return true; } @Override protected String getConfiguredImageId() { return Icons.User; } protected void updateImage(String url) { setImageUrl(url); } } 1 Sets the field invisible. An invisible field does not occupy space in the user interface. 2 Declares PictureUrlField as the master field of the picture field. 3 This method will be called when the value of the master field has changed. Using the combination of the PictureField and PictureUrlField as its master field has two benefits. First, having a field that contains the the URL makes sure that this information is also stored in the form data and second, the method execChangedMasterValue can then be used to trigger the refresh of the actual picture when the picture URL is changed. For security reasons, the browser is not allowed to load content from other servers by default. For our demo images, we add a well-considered exception. Open the config.properties file of your UI server project and make sure it contains the following line: Listing 31. Content Security Policy Configuration (config.properties) scout.cspDirective[img-src]='self' www.gravatar.com wiki.eclipse.org upload.wikimedia.org The remaining fields for the general box can then be added using the Scout content assist or by copying Listing 32 into the code below the picture field, again not forgetting the getters above the MainBox. Listing 32. The other fields in the general box. @Order(30) @ClassId(\"359be835-439f-456e-9b0d-c832b034a298\") public class FirstNameField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"FirstName\"); } } @Order(40) @ClassId(\"8679ade5-21fb-470e-8f00-13bd15199101\") public class LastNameField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"LastName\"); } } @Order(50) @ClassId(\"7c602360-9daa-44b8-abb6-94ccf9b9db59\") public class DateOfBirthField extends AbstractDateField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"DateOfBirth\"); } } @Order(60) @ClassId(\"b9d0593e-3938-4f97-bdca-fdb6a1ce1d77\") public class GenderGroup extends AbstractRadioButtonGroup { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Gender\"); } @Override (1) protected Class> getConfiguredCodeType() { return GenderCodeType.class; } } 1 The codes defined in GenderCodeType will be used to determine the actual radio buttons to add to the gender field. Whenever we add several fields to a Scout container field the individual fields will be displayed according to their order specified by the @Order annotation in the source code. Using the default two column layout, the Scout layouting engine uses the first fields to fill up the first column before the remaining fields are assigned to the second column. In general the Scout layouting engine tries to balance the number of fields over all available columns. For the general box this rule has the effect that the picture field (this is the first field according to its order value) is assigned to the left column and all other fields are assigned to the right column. After having added all the fields to the general box of the person form we can now fill the individual tabs of the DetailsBox container. We start with adding the content to the tabs \"Work\" and \"Notes\" as described below. Now add the string fields listed below to the \"Work\" tab as inner classes of the container field WorkBox. Use the Scout content assist to add the fields and select String Field as the type of each field. Class PositionField, using label \"Position\" Class OrganizationField, using label \"Organization\" Class PhoneWorkField, using label \"Phone\" Class EmailWorkField, using label \"E-Mail\" The \"Notes\" tab represented by the container field NotesBox only contains a single string field. This field will not need a label, span 4 rows of the logical grid and hold a multi line text according to Listing 33. Listing 33. The notes tab box with its multi line text field. @Order(30) @ClassId(\"fcb5b155-2c89-4ef8-9a96-ac41e9032107\") public class NotesBox extends AbstractGroupBox { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Notes\"); } @Order(10) @ClassId(\"ce791f14-fca6-4f11-8476-89cbf905eb2e\") public class NotesField extends AbstractStringField { @Override protected int getConfiguredGridH() { return 4; } @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected boolean getConfiguredMultilineText() { return true; } } } } Next is the implementation of the address box in the \"Contact Info\" tab. The address box is realized as a single column group box that holds a street field, a city field and a country field. According to the form layout defined in Designing the Person Form the city field and the country field will be located on the same logical row and in the same cell of the logical grid. In the Scout default layout each form field uses up a single cell of the logical grid. Whenever we like to be more economical with the space occupied by several fields, we can work with a Scout sequence box. Inner fields of a sequence box will be arranged on a single row from left to right and the spacing between the inner fields will be minimal. Taking advantage of these properties we implement the location box as a sequence field according to Listing 34. To further optimize screen real estate we also switch to on-field labels for the city field and the country field. Listing 34. The content of the address box. @Order(10) @ClassId(\"736450dd-ba89-43cd-ba52-bcd31196b462\") public class AddressBox extends AbstractGroupBox { @Override protected boolean getConfiguredBorderVisible() { return false; } @Override protected int getConfiguredGridH() { (1) return 3; } @Override protected int getConfiguredGridW() { (1) return 1; } @Override protected int getConfiguredGridColumnCount() { (2) return 1; } @Order(10) @ClassId(\"a9137ad1-af9d-4fef-a69d-3e3d9ce48f21\") public class StreetField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Street\"); } } // use a sequence box for horizontal layout (3) @Order(20) @ClassId(\"a278333c-057e-4c1d-a442-0c1dd62fdca7\") public class LocationBox extends AbstractSequenceBox { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Location\"); } @Override protected boolean getConfiguredAutoCheckFromTo() { (4) return false; } @Order(10) @ClassId(\"3ea6ac2a-976e-4c7f-b04b-ec0d7d1ae5ec\") public class CityField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"City\"); } @Override protected byte getConfiguredLabelPosition() { return LABEL_POSITION_ON_FIELD; (5) } } @Order(20) @ClassId(\"d4dfce4f-019b-4a61-ba78-347ef67cf80f\") public class CountryField extends AbstractSmartField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Country\"); } @Override protected byte getConfiguredLabelPosition() { return LABEL_POSITION_ON_FIELD; } @Override protected Class> getConfiguredLookupCall() { return CountryLookupCall.class; } } } } 1 Makes the address box to occupy 1 column and 3 rows. 2 The content in the address box will use a single column layout. 3 Extending a Scout sequence box will place the inner fields of the LocationBox on a single row. 4 Disables the default check if the value of the first field in the sequence box is less than the value in the second field. 5 On field labels do not take any additional space and are shown in the field itself. While string fields are used for the street field and the city field, the country field is implemented as a smart field. Scout smart fields can be viewed as a powerful drop down lists with search-as-you-type support. In the case of the country field the smart field is backed by the lookup class CountryLookupCall that we already used for the country smart column in the person page. After the address box the \"Contact Info\" box contains the three fields mentioned below. Use the Scout content assist to add the fields and select String Field as the type of each field. Class PhoneField, using label \"Phone\" Class MobileField, using label \"Mobile\" Class EmailField, using label \"E-Mail\" We have now completed the implementation of the form layout and added all form fields of the person form. You might not have enough permissions yet to access the person form. For simplicity we will give all permissions to anyone. Follow the steps described below. Expand the Maven module contacts.server in the Eclipse package explorer Navigate to the package org.eclipse.scout.contacts.server.security in folder src/main/java Adjust the file ServerAccessControlService.java according to Listing 35. Listing 35. The content of the class ServiceAccessControlService. @Replace public class ServerAccessControlService extends AccessControlService { @Override protected IPermissionCollection execLoadPermissions(String userId) { return BEANS.get(AllPermissionCollection.class); } } The application is now in a state where we can verify the layout of the person form and check the handling of the different input fields. (Re)start the application and enter some values into the various fields of the person form. To view and enter person data with the form we have yet to add the interaction with the database in the backend of the \"Contacts\" application. This is the topic of the next section. This section shows how we can integrate the person form created in the previous sections with the \"Contacts\" backend application to load and store person data with the database. Most of the necessary infrastructure such as the transfer objects between the frontend and the backend application has already been created by the Scout form wizard. In the text below we will first discuss the setup created by the new form wizard and then add the missing code snippets to interact with the database. On the frontend side, the Scout new form wizard has also created the two form handler classes ModifyHandler and NewHandler. By convention a ModifyHandler is used to change existing data and a NewHandler implements the creation of new data. Form handler classes provide a number of callback methods that are invoked at various stages during the life cycle of the form. The implementation created by the Scout wizard includes the methods execLoad and execStore for each form handler. In these methods the form fetches data from the Scout backend application and/or sends new data to the backend server. Adapt the default implementation of the form handlers according to Listing 36. Listing 36. The new handler and modify handler for the person form. public class PersonForm extends AbstractForm { public class ModifyHandler extends AbstractFormHandler { @Override protected void execLoad() { IPersonService service = BEANS.get(IPersonService.class); (1) PersonFormData formData = new PersonFormData(); exportFormData(formData); (2) formData = service.load(formData); (3) importFormData(formData); (4) getForm().setSubTitle(calculateSubTitle()); (5) } @Override protected void execStore() { IPersonService service = BEANS.get(IPersonService.class); PersonFormData formData = new PersonFormData(); exportFormData(formData); service.store(formData); (6) } } public class NewHandler extends AbstractFormHandler { @Override protected void execStore() { IPersonService service = BEANS.get(IPersonService.class); PersonFormData formData = new PersonFormData(); exportFormData(formData); formData = service.create(formData); (7) importFormData(formData); } } protected String calculateSubTitle() { return StringUtility.join(\" \", getFirstNameField().getValue(), getLastNameField().getValue()); } } 1 Obtains a reference to the person service located on the Scout backend application. 2 All form field values are transferred to the form data. In this case the person primary key property will be transferred to the form data. Remember that we have set this key in the \"Edit\" context menu. 3 The form data (including the person primary key) is sent to the load method. The load method returns the person data from the backend. 4 The field values in the form data are loaded into the form fields of the person form. 5 The sub title on the view tab of the form is updated to reflect the name of the person. 6 Calls the store method of the person service providing the updated person data. 7 Calls the create method of the person service providing the new person data. With the implementation provided in Listing 36 the classes ModifyHandler and NewHandler orchestrate the complete roundtrip between the frontend and the backend of the \"Contacts\" application. The only part that is now missing is the implementation of the form service methods create, load and store on the backend of the \"Contacts\" application. For these methods we can again rely on the default implementations created by the Scout new form wizard. Modify the person service methods according to Listing 37. Listing 37. The PersonService methods to load, create and update person data. public class PersonService implements IPersonService { @Override public PersonFormData create(PersonFormData formData) { if (!ACCESS.check(new CreatePersonPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } // add a unique person id if necessary if (StringUtility.isNullOrEmpty(formData.getPersonId())) { formData.setPersonId(UUID.randomUUID().toString()); } SQL.insert(SQLs.PERSON_INSERT, formData); (1) return store(formData); (2) } @Override public PersonFormData load(PersonFormData formData) { if (!ACCESS.check(new ReadPersonPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.selectInto(SQLs.PERSON_SELECT, formData); (3) return formData; } @Override public PersonFormData store(PersonFormData formData) { if (!ACCESS.check(new UpdatePersonPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.update(SQLs.PERSON_UPDATE, formData); (4) return formData; } } 1 The SQL insert statement adds a new person entry in the database. Only the primary key is used to create this entry. 2 To save all other person attributes provided in the form data, the store method is reused. 3 The SQL select into transfers the person data from the database into the form data. 4 The SQL update statement transfers all person attributes provided in the form data to the person table. In the fourth step of the \"Contacts\" tutorial we have added the person form to add, view and change persons. Using the person form as an example we have learned how to implement complex form layouts using the Scout layouting mechanism, Scout container fields and individual form field properties. We have also seen how we can use context menus to integrate the forms in the user interface of the application and have implemented the interaction of the frontend with the backend application including the persistance of person data in the database. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. We can now verify the creation of new person entries and the modification of existing person data in the current state of the \"Contacts\" application. The created person form is shown in Figure 42. In case you copied some code snippets from the tutorial, you may see the text \"undefined text {…​}\" in some labels in the person field. You may want to define these texts using the Scout content assist for defining new texts as was already presented earlier in this tutorial. Figure 42. The \"Contacts\" application with the person form at the end of tutorial step 4. This tutorial step introduces two additional concepts that are used in most Scout applications. Form field validation and template fields. Form field validation helps to keep data quality high and template fields are used to increase the code quality of a Scout application. In addition to just retrieving and storing new data, a business application should also help the user to maintain the quality of the entered data. To validate user input, the Scout framework offers form field validation. Simple input validation is possible on the level of individual fields as shown in Simple Form Field Validation. Scout also offers mechanisms to validate field values on the level of container fields or on the level of a form as shown in Complex Form Field Validation. In the text below we add a number of form field validations that implement this approach for the person form. In Creating Template Fields we refactor the picture field code into a template field that can later be re-used for the organization form. To edit the image URL we add a simple edit form to the refactored picture field in Adding a simple URL Input Form to the Picture Field. In More Template Fields we outline the creation of additional template fields and provide a summary of this tutorial step in What have we achieved?. This section explains the form field validation on the level of a single field. As an example we will use the email address field defined in the \"Contact Info\" tab. The validation implemented in Listing 38 checks the length and the format of the entered email address. Listing 38. The validation of the email field @Order(40) @ClassId(\"5f9d9363-8e57-4151-b281-7d401e64702c\") public class EmailField extends AbstractStringField { private static final String EMAIL_PATTERN = (1) \"^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@\" + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\"; @Override protected String getConfiguredLabel() { return TEXTS.get(\"Email\"); } @Override (2) protected int getConfiguredMaxLength() { return 64; } @Override (3) protected String execValidateValue(String rawValue) { if (rawValue != null && !Pattern.matches(EMAIL_PATTERN, rawValue)) { throw new VetoException(TEXTS.get(\"BadEmailAddress\")); (4) } return rawValue; (5) } } 1 Email verification is performed against a simple regular expression. 2 This prevents the field from accepting more than 64 characters. The return value should match the size of the corresponding table column. 3 Method execValidateValue is called during validation of the new field value. 4 If the value violates any business rules, a VetoException should be thrown. 5 If the new value passes all business rules the method returns the value. In the next section we use the address box to demonstrate the joint validation of several fields. Often the values of several fields have to be considered jointly to evaluate if the entered data is actually valid. As an example we will add a more complex form field validation on the level of the AddressBox group box widget that takes into account the data entered into the street, city, and country fields. The implemented validation for the address box example should enforce the following set of business rules. Only valid countries should be allowed If a city is provided a country must also be provided If street information is provided, both a city and a country must be provided The address may be empty The simplest rule is about entering only valid countries. This rule is already implemented as the country smart field only allows the user to select a single entry of the list of valid countries. A possible implementation to enforce the other rules is provided in Listing 39. Listing 39. The validation of the fields in the address box @Order(10) @ClassId(\"736450dd-ba89-43cd-ba52-bcd31196b462\") public class AddressBox extends AbstractGroupBox { @Order(10) @ClassId(\"a9137ad1-af9d-4fef-a69d-3e3d9ce48f21\") public class StreetField extends AbstractStringField { @Override (1) protected void execChangedValue() { validateAddressFields(); (2) } } @Order(20) @ClassId(\"a278333c-057e-4c1d-a442-0c1dd62fdca7\") public class LocationBox extends AbstractSequenceBox { @Order(10) @ClassId(\"3ea6ac2a-976e-4c7f-b04b-ec0d7d1ae5ec\") public class CityField extends AbstractStringField { @Override protected void execChangedValue() { validateAddressFields(); (2) } } @Order(20) @ClassId(\"d4dfce4f-019b-4a61-ba78-347ef67cf80f\") public class CountryField extends AbstractSmartField { @Override protected void execChangedValue() { validateAddressFields(); (2) } } } protected void validateAddressFields() { boolean hasStreet = StringUtility.hasText(getStreetField().getValue()); boolean hasCity = StringUtility.hasText(getCityField().getValue()); getCityField().setMandatory(hasStreet); (3) getCountryField().setMandatory(hasStreet || hasCity); } } 1 This method is called after the value of this field has been changed. 2 After changing the street, the city or the country recompute which address fields are mandatory. 3 The city becomes mandatory if the street field is not empty. The country is mandatory if the street or the city is not empty. Whenever the content of the street field, the city field, or the country field is changed the mechanism implemented above triggers a re-evaluation of the mandatory status of the city field and the country field. As the Scout default form validation ensures that every mandatory field receives some content the application prevents the user from entering address data that does not satisfy the business rules mentioned above. The verification of user input can also be triggered before the form is closed. This behavior can be implemented by overriding method execValidate on the form level. As an example we use this mechanism to make sure that a user can only enter persons that have at least some name information. Now add this validation to the person form using the implementation provided in Listing 40. Listing 40. The validation of the first and last names on the form level public class PersonForm extends AbstractForm { @Override (1) protected boolean execValidate() { boolean noFirstName = StringUtility.isNullOrEmpty(getFirstNameField().getValue()); boolean noLastName = StringUtility.isNullOrEmpty(getLastNameField().getValue()); if (noFirstName && noLastName) { getFirstNameField().requestFocus(); (2) throw new VetoException(TEXTS.get(\"MissingName\")); (3) } return true; (4) } } 1 This method is called during the form validation and before the form is stored/closed. 2 Place the focus on the first name field. 3 In case both the first name and the last name fields are empty throw a VetoException, this will fail the validation. 4 The return value indicates if the validation has passed successfully or not. As we have now implemented a number of form field validations we are now ready to test the result in the running application. Re-start the \"Contacts\" application and try to trigger the different validation rules. Figure 43 shows the response of the user interface when trying to save invalid person data. Figure 43. The form field validation implemented for the person form. In this section we show how to refactor a group of fields into a Scout template field that is ready for reuse. As an example we refactor the picture field into a template field. Later in tutorial step Adding the Company Form we can then reuse this field in the company form to show the company’s logo. The generic approach to refactor a form field into a template field is listed below. Create an empty field data class in the shared module Create the template field class in the client module Copy the existing field code to the template field Let the original field extend the new template field and fix imports For refactoring the picture field we can exactly follow these steps. To create the empty field data class perform the following steps. Expand the shared module of the \"Contacts\" application Navigate into folder src/generated/java Add a new package org.eclipse.scout.contacts.shared.common Create class AbstractUrlImageFieldData in this package as shown in Listing 41 Listing 41. The empty form data class for the picture template field. package org.eclipse.scout.contacts.shared.common; public abstract class AbstractUrlImageFieldData { } We are now ready to implement the template field class according to the following steps. Navigate to the client module of the \"Contacts\" application Select package org.eclipse.scout.contacts.client.common in folder src/main/java Create a new Java class called AbstractUrlImageField and update the implementation according to Listing 42 Listing 42. The refactored picture field. @ClassId(\"73a4276f-77b2-4ad2-b414-7f806284bdb3\") @FormData(value = AbstractUrlImageFieldData.class, (1) sdkCommand = SdkCommand.CREATE, defaultSubtypeSdkCommand = DefaultSubtypeSdkCommand.CREATE) public abstract class AbstractUrlImageField extends AbstractImageField { private String url; (2) @FormData (2) public String getUrl() { return url; } @FormData (2) public void setUrl(String url) { this.url = url; updateImage(); } @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected int getConfiguredGridH() { return 5; } @Override protected boolean getConfiguredAutoFit() { return true; } @Override protected String getConfiguredImageId() { return Icons.User; } protected void updateImage() { setImageUrl(this.url); } } 1 The link to the corresponding field data class. 2 Field PictureUrlField is refactored into the property url value. To transfer the content of this property to the field data object we need to add annotation @FormData to its getter and setter methods. The next step is to replace the original code of the picture field with the newly created template field. Delete the field PictureUrlField and remove all the code from the field PictureField and let PictureField extend the newly created template field as shown in Listing 43. Listing 43. The refactored picture field. @Order(10) @ClassId(\"e7efc084-fe7a-462f-ba23-914e58f7b82d\") public class MainBox extends AbstractGroupBox { @Order(10) @ClassId(\"b20aad47-e070-4f3c-bafc-ddbaa3ae2a4c\") public class GeneralBox extends AbstractGroupBox { @Order(10) @ClassId(\"d80625e3-b548-47e4-9cae-42d70aaa568f\") public class PictureField extends AbstractUrlImageField { (1) } // additional form field } } 1 The implementation of the picture field is now provided by the template field AbstractUrlImageField. As the last step we need to slightly modify the SQL statement that loads and stores the picture URL information. The reason for the change is the replacement of the picture url field by an url property defined as a member of the picture field. For this change perform the steps listed below. Open class SQLs in the Java editor. In string PERSON_SELECT change the token ':pictureUrl' with ':picture.url' In string PERSON_UPDATE change the token ':pictureUrl' with ':picture.url' Based on the picture field example we have now walked through the complete process to turn normal fields into template fields. This process remains the same for refactoring container fields into template fields. Using the refactored picture template field we want the user to be able to enter and update the URL of the shown picture. We create a new form called PictureUrl as we’ve done before as shown in Figure 44 (IntelliJ) or Figure 45 (Eclipse). For Eclipse: Verify that you use the correct source folder and package name. In the Name field enter \"PictureUrl\". In section Additional Components deselect all checkboxes. Click Finish to let the wizard implement the form. Figure 44. Creating the picture URL form with the new form wizard in IntelliJ. Figure 45. Creating the picture URL form with the new form wizard in Eclipse. Now adapt the content of the URL form according to Listing 44. As you can see, there is no roundtrip to a backend server and the form only contains a single editable field. Listing 44. The form to edit the picture URL @ClassId(\"3b30ebf1-e8fe-4dd3-8124-5f5038b1d47c\") public class PictureUrlForm extends AbstractForm { @Override protected String getConfiguredTitle() { return TEXTS.get(\"PictureURL\"); } public void startModify() { startInternal(new ModifyHandler()); } public UrlField getUrlField() { return getFieldByClass(UrlField.class); } public InfoField getInfoField() { return getFieldByClass(InfoField.class); } @Order(10) @ClassId(\"6c5e0da2-cf04-402f-9784-43e3a138796b\") public class MainBox extends AbstractGroupBox { @Order(10) @ClassId(\"fdcc7087-a693-45e8-a889-3725b0995558\") public class UrlBox extends AbstractGroupBox { @Order(10) @ClassId(\"32b71aa6-1109-4b39-996f-f35a677faa06\") public class UrlField extends AbstractStringField { @Override protected boolean getConfiguredLabelVisible() { (1) return false; } @Override protected boolean getConfiguredStatusVisible() { return false; } @Override protected int getConfiguredGridW() { return 2; } } @Order(20) @ClassId(\"999c32e9-ca87-4b5c-a907-29d7a7400abf\") public class InfoField extends AbstractHtmlField { @Override protected boolean getConfiguredLabelVisible() { return false; } @Override protected boolean getConfiguredStatusVisible() { return false; } @Override protected int getConfiguredGridW() { return 2; } @Override protected boolean getConfiguredGridUseUiHeight() { return true; } @Override protected void execInitField() { setValue(HTML.fragment(HTML.icon(Icons.Info), HTML.bold(\" \" + TEXTS.get(\"PleaseNote\") + \": \"), TEXTS.get(\"SecurityUrlRestrictedMsg\")).toHtml()); } } } @Order(20) @ClassId(\"4e15ce0e-502c-4290-aeca-e83359f3bc5b\") public class OkButton extends AbstractOkButton { } @Order(30) @ClassId(\"f278815a-f4cf-4e86-a057-66cb7ce43fc3\") public class CancelButton extends AbstractCancelButton { } } public class ModifyHandler extends AbstractFormHandler { (2) } } 1 No label is needed as the name of the field is already provided by the title of the form. 2 As no round trip to the backend is required the modify handler can remain empty. We can now add an \"Edit URL\" menu to the picture template field. The implementation of the edit context menu is provided in Listing 45. Listing 45. The \"Edit URL\" menu for the refactored picture field public abstract class AbstractUrlImageField extends AbstractImageField { @Order(10) @ClassId(\"99c1c12a-84d4-4c1a-a009-dfd2b7b55ded\") public class EditURLMenu extends AbstractMenu { @Override protected String getConfiguredText() { return TEXTS.get(\"EditURL\"); } @Override protected Set getConfiguredMenuTypes() { return CollectionUtility. hashSet( ImageFieldMenuType.ImageUrl, ImageFieldMenuType.ImageId, ImageFieldMenuType.Null); } @Override protected void execAction() { PictureUrlForm form = new PictureUrlForm(); String oldUrl = getUrl(); if (StringUtility.hasText(oldUrl)) { (1) form.getUrlField().setValue(oldUrl); } form.startModify(); form.waitFor(); (2) if (form.isFormStored()) { (3) setUrl(form.getUrlField().getValue()); getForm().touch(); } } } } 1 If we already have an URL for the picture prefill the url field in the form with its value. 2 Method waitFor makes the application wait until the user has closed the form. 3 Only store the new URL if the user has saved a new value. Storing the value will refresh the picture in the user interface. Based on the example with the picture field we have now walked through the complete process to turn normal fields into template fields. This process remains the same for refactoring container fields into template fields. To reduce the amount of copy & paste for the implementation of the company form in the next tutorial step, we recommend that you refactor the following fields into templates. Email field Address group box field Notes group box field You can follow the steps described in the previous section for the picture field. To be able to copy & paste the code in the following tutorial step you may use the following class names. AbstractEmailField for the email template field AbstractAddressBox for the address group template field AbstractNotesBox for the notes tab template field Note that both the AbstractAddressBox and the AbstractNotesBox need their own form data object, whereas the AbstractEmailField does not. Replacing the concrete fields with the template fields in the person form will result in a number of compile errors in the field getter methods of the person form. In the case of the \"Contacts\" application these getter methods are not needed and can simply be deleted. Moving from concrete fields to template fields also implies some minor changes as we have seen with the picture template field. Therefore make sure to modify the SQL statements in class SQLs accordingly. Replace token ':street' by ':addressBox.street' Replace token ':city' by ':addressBox.city' Replace token ':country' by ':addressBox.country' Replace token ':notes' by ':notesBox.notes' In this step of the \"Contacts\" tutorial we have covered two important concepts for implementing business applications. Validation of user input on the level of fields, components and the complete form Creation and usage of template fields to minimize copy & paste where possible The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. Using the created picture template field we can now update the image in the picture form as shown in Figure 46. Figure 46. The person form with the refactored picture template field including a menu (red square) and a URL edit form. In the next tutorial step we are going to implement the company form to enter and edit company information. For the creation of this form we can reuse the template fields that we have created. This section describes the implementation of the organization form. For the implementation of the organization form we can apply many of the concepts we have learned in the previous sections. As a result, the descriptions of this section can be kept on a much higher level. Figure 47. The sketch of the organization form layout. Considering the layout sketch for the organization form shown in Figure 47 we can already see how we can reuse the following fields / templates. The picture field The address box with street, city and country including its validation The email field with its validation The complete \"Notes\" tab For the remaining fields \"Name\", \"Homepage\" and \"Phone\" we will use simple string fields with matching label texts. We can now implement the company form according to the following steps. Expand folder src/main/java in the client module in the package explorer Select package org.eclipse.scout.contacts.client.organization and create a new form called \"OrganizationForm\" as we’ve done before Hit Enter for IntelliJ or click Finish for Eclipse After creating the initial form class using Scout’s new form wizard the form layout can be implemented according to Listing 46. Listing 46. The layout implementation of the organization form public class OrganizationForm extends AbstractForm { private String organizationId; @FormData public String getOrganizationId() { return organizationId; } @FormData public void setOrganizationId(String organizationId) { this.organizationId = organizationId; } @Override public Object computeExclusiveKey() { return getOrganizationId(); } @Override protected String getConfiguredTitle() { return TEXTS.get(\"Organization\"); } @Override protected int getConfiguredDisplayHint() { return IForm.DISPLAY_HINT_VIEW; } @Order(10) @ClassId(\"e7efc084-fe7a-462f-ba23-914e58f7b82d\") public class MainBox extends AbstractGroupBox { @Order(10) @ClassId(\"b20aad47-e070-4f3c-bafc-ddbaa3ae2a4c\") public class GeneralBox extends AbstractGroupBox { @Order(10) @ClassId(\"d80625e3-b548-47e4-9cae-42d70aaa568f\") public class PictureField extends AbstractUrlImageField { (1) @Override protected int getConfiguredGridH() { (2) return 4; } @Override protected double getConfiguredGridWeightY() { (3) return 0; } } @Order(20) @ClassId(\"4c1a0dea-6c04-4cad-b26b-8d5cc1b786a9\") public class NameField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Name\"); } @Override protected boolean getConfiguredMandatory() { (4) return true; } } @Order(30) @ClassId(\"68008603-257f-45dc-b8ea-d1e066682205\") public class HomepageField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Homepage\"); } } } @Order(20) @ClassId(\"4e48c196-22e4-4e22-965a-5e305af5e6a9\") public class DetailsBox extends AbstractTabBox { @Order(10) @ClassId(\"c6c9e644-2ab3-436e-9d8a-bdcc5482eb5b\") public class ContactInfoBox extends AbstractGroupBox { @Override protected String getConfiguredLabel() { return TEXTS.get(\"ContactInfo\"); } @Order(10) @ClassId(\"2a10bd00-de56-4a97-a5b2-6a8a0aae925f\") public class AddressBox extends AbstractAddressBox { (5) } @Order(20) @ClassId(\"504a4845-d307-4238-a2e9-9e785c1477ac\") public class PhoneField extends AbstractStringField { @Override protected String getConfiguredLabel() { return TEXTS.get(\"Phone\"); } } @Order(30) @ClassId(\"0b4d059d-ec81-4e93-9a99-2512d734ebac\") public class EmailField extends AbstractEmailField { (6) } } @Order(20) @ClassId(\"85f4dfb0-f375-4e90-be92-b59e9bc2ebcf\") public class NotesBox extends AbstractNotesBox { (7) } } @Order(30) @ClassId(\"97c3ceed-d005-47da-b44d-def4b07f92ab\") public class OkButton extends AbstractOkButton { } @Order(40) @ClassId(\"d63bfcd6-7464-4e4f-a07e-eb1173a77f8c\") public class CancelButton extends AbstractCancelButton { } } } 1 We reuse the picture template field to display the company logo. 2 We reduce the number of rows for the company logo compared to the person picture. 3 We do not allow the general box to grow or shrink vertically 4 We configure the company name field to be mandatory for an organization. 5 As-is reuse of the address template box. 6 As-is reuse of the email template field. 7 As-is reuse of the notes tab box. To be able to open the organization form we need to link the form to the user interface. Following the pattern for the person form we define the context menus \"Edit\" and \"New\" for the organization table and a menu \"Create new organization\" under the \"Quick access\" top level menu. The implementation of the organization form is completed by providing the logic to interact with the database in the organization service according to Listing 47. The technical setup exactly follows the implementation of the person service. Listing 47. The OrganizationService methods to load, create and update organization data. public class OrganizationService implements IOrganizationService { @Override public OrganizationFormData create(OrganizationFormData formData) { if (!ACCESS.check(new CreateOrganizationPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } if (StringUtility.isNullOrEmpty(formData.getOrganizationId())) { formData.setOrganizationId(UUID.randomUUID().toString()); } SQL.insert(SQLs.ORGANIZATION_INSERT, formData); return store(formData); } @Override public OrganizationFormData load(OrganizationFormData formData) { if (!ACCESS.check(new ReadOrganizationPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.selectInto(SQLs.ORGANIZATION_SELECT, formData); return formData; } @Override public OrganizationFormData store(OrganizationFormData formData) { if (!ACCESS.check(new UpdateOrganizationPermission())) { throw new VetoException(TEXTS.get(\"InsufficientPrivileges\")); } SQL.update(SQLs.ORGANIZATION_UPDATE, formData); return formData; } } Method prepareCreate is not needed for the creation of a new organization and we can remove it from OrganizationService and IOrganizationService. Therefore, the implementation of the method execLoad in the new handler of the organization form can also be removed. With these implementations of the organization form and organization service the \"Contacts\" application can now also be used to maintain a list of organizations. In the sixth step of the \"Contacts\" tutorial we have added the Scout form to edit and create organizations. The focus of this part of the tutorial was on re-using previous work and applying the concepts that have been introduced in previous tutorial steps. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. As shown in Figure 48 company data can now be viewed and entered in the user interface. Figure 48. The \"Contacts\" application with the newly created organization form. In this step we modify the user interface to represent the 1:n relationship between organizations and persons. For the implementation of this 1:n relation we follow the Scout standard pattern. In the \"Contacts\" application any person can be assigned to a single organization. This fact is represented in the database schema created using the statement SQLs.PERSON_CREATE_TABLE. We will therefore need to be able to assign a person to an existing organization by selecting an existing organization in the field. For this we modify the organization field on the person to a smart field. To display the assigned organizations we will also modify the person page accordingly. In addition we would like to be able to easily access all persons assigned to a specific organization. Using the existing organization page we will add a child page that will then show all associated persons. This will result in a drill-down functionality for the organization page. The implementation of the features described above can be achieved by the the following steps. Creating an Organization Lookup Call (Creating an Organization Lookup Call) Using the Lookup Call in the Person Form and the Person Table (Using the Lookup Call in the Person Form and the Person Table) Link the Person Page to Organizations (Link the Person Page to Organizations) This last tutorial step ends with a short review in What have we achieved? Before we can change the organization field on the person form from a string field to a smart field we need a organization lookup call that provides the necessary data to the smartfield. We have been using this approach for the country field already. The difference to the lookup call for countries lies in the fact that we no longer have a static list of entries but need to fetch possible the organizations dynamically. We will therefore need to access the database to provide the data to the lookup call. As this is a common requirement the Scout framework comes with the base class AbstractSqlLookupService and a default mechanism to route lookup calls from the frontend sever to database calls on the backend server. The necessary infrastructure can be created using the Scout lookup wizard according to the steps described below. Expand folder src/main/java in the shared module in the package explorer Select package org.eclipse.scout.contacts.shared.organization For IntelliJ Create a new Scout lookup call by right-clicking on the package and selecting New → Scout Element → Lookup Call as shown in Figure 49 Enter \"Organization\" into the name field as shown in Figure 50 and press Enter. In the generated lookup call, change the generic from to . For Eclipse Hit Ctrl+N Enter \"lookup\" into the search field of the wizard selection and double click on proposal Scout LookupCall Use \"OrganizationLookupCall\" as class name Enter \"String\" as the key class and use service super class \"AbstractSqlLookupService\" in the wizard Verify that the fields in the wizard match the values provided in Figure 51 Click Finish Figure 49. Creating the OrganizationLookupCall in IntelliJ. Figure 50. Using the Scout lookup call wizard for creating class OrganizationLookupCall in IntelliJ. Figure 51. Using the Scout lookup call wizard for creating class OrganizationLookupCall in Eclipse. The Scout wizard creates the lookup class OrganizationLookupCall and the corresponding lookup service with the interface IOrganizationLookupService and its initial implementation OrganizationLookupService. Beside making sure the generic uses the correct data type (String), the service interface and the lookup call class can be used as provided by the Scout wizard. We will only need to provide some implementation for the lookup service. Listing 48 shows the generated code for the lookup call. Listing 48. The OrganizationLookupCall implemented by the Scout wizard. @ClassId(\"22789824-ad89-4208-bc11-5c08b56ce998\") public class OrganizationLookupCall extends LookupCall { private static final long serialVersionUID = 1L; @Override protected Class> getConfiguredService() { return IOrganizationLookupService.class; } } We are now ready to implement method getConfiguredSqlSelect of the organization lookup service. Open class OrganizationLookupService in the Java editor and change the implementation according to Listing 49. Listing 49. The OrganizationService methods to load, create and update organization data. public class OrganizationLookupService extends AbstractSqlLookupService implements IOrganizationLookupService { @Override protected String getConfiguredSqlSelect() { return SQLs.ORGANIZATION_LOOKUP; (1) } } 1 We only need to return a single SQL statement for lookup services that extend AbstractSqlLookupService The SQL statement that backs the lookup service is provided in Listing 50. Lookup services can provide data for three different use cases. The most straightforward case is the mapping of a key to a specific lookup row. Next is the case where the lookup service returns a number of lookup rows that match a provided substring and finally the case where the lookup service simply returns all available rows. Listing 50. The SQL statement to provide the data for the organization lookup service. String ORGANIZATION_LOOKUP = \"\" + \"SELECT organization_id, \" + \" name \" + \"FROM ORGANIZATION \" + \"WHERE 1 = 1 \" + \" AND organization_id = :key \" (1) + \" AND UPPER(name) LIKE UPPER(:text||'%') \" (2) + \"\"; (3) 1 The where clause to be used for a search for a specific key 2 The where clause to be used when some search text is provided 3 The where clause that defines the full set of lookup rows Now we can use the organization lookup call to transform the organization field in the \"Work\" tab of the person form into a smart field. To do this we open class PersonForm in the Java editor and navigate to its inner class WorkBox. Then, update the implementation of the OrganizationField according to Listing 51 Listing 51. The organization smart field in the \"Work\" tab backed by the OrganizationLookupCall. @Order(20) @ClassId(\"8e18a673-aca5-44a2-898f-60a744e4467a\") public class WorkBox extends AbstractGroupBox { @Order(20) @ClassId(\"cd4a7afd-e0ac-4c79-bf2e-819aa491db27\") public class OrganizationField extends AbstractSmartField { (1) @Override protected String getConfiguredLabel() { return TEXTS.get(\"Organization\"); } @Override (2) protected Class> getConfiguredLookupCall() { return OrganizationLookupCall.class; } } } 1 The OrganizationField now extends a Scout smart field 2 The smart field is backed by the newly created organization lookup call This change has the effect, that now we can assign an organization in the person form by typing a substring of the organizations name into the organization field. The conversion of the field into a smart field has the additional benefit that only valid organizations can be selected that respect the referential integrity defined by the database. As a next step we also modify the organization column of the person page. For this open class PersonTablePage in the Java editor and navigate to its inner class Table. Then, change the implementation of OrganizationColumn according to Listing 52. Listing 52. The organization smart column in the person page. @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { @Order(9) @ClassId(\"2e53e50e-5bd5-421e-8bca-fc50f27d790b\") public class OrganizationColumn extends AbstractSmartColumn { @Override protected String getConfiguredHeaderText() { return TEXTS.get(\"Organization\"); } @Override protected Class> getConfiguredLookupCall() { return OrganizationLookupCall.class; } } } Using the created organization lookup calls we have now completed the modifications on the person form and also used the lookup call to display the a person’s organization in the person page. The next section will focus on the necessary modifications and new components to re-use the person page as a sub page of the organization page. In this section we will implement a drill-down functionality on the organization page. The goal is to let the user of the application expand a row in the organization page to provide access to the persons of the organization. Scout node pages are useful when we want to display different entities that are related to a specific entry in a parent page. In the \"Contacts\" demo application this mechanism is used to link both persons and events to an organization as shown in Figure 52. Note that this is a screenshot of the \"Contacts\" demo application, not the tutorial application that we are building here. Figure 52. A drill-down on an organization in the \"Contacts\" demo application provides access to related persons and events. In the \"Contacts\" demo application this hierarchical page structure is implemented as follows. Organization page implemented in class OrganizationTablePage A node page implemented in class OrganizationNodePage Person page implemented in class OrganizationTablePage Event page implemented in class EventTablePage For the \"Contacts\" tutorial application we will create the exact same structure but only add the person page as child page to the organization node page. To implement this sequence of linked pages we will follow the dependencies of the linked classes. We start with adapting method getPersonTableData in the person service by adding an organization id parameter. Using this parameter we can then restrict the person search to the subset that is linked to the specified organization. For this change we first update the person service interface as shown in Listing 53. Listing 53. The updated method getPersonTableData for the person service interface. @ApplicationScoped @TunnelToServer public interface IPersonService { PersonTablePageData getPersonTableData(SearchFilter filter, String organizationId); (1) PersonFormData create(PersonFormData formData); PersonFormData load(PersonFormData formData); PersonFormData store(PersonFormData formData); } 1 Add parameter organizationId We now adapt the method implementation in the person service according to Listing 54. Listing 54. Method getPersonTableData to access the database and map the data into a page data object. public class PersonService implements IPersonService { @Override public PersonTablePageData getPersonTableData(SearchFilter filter, String organizationId) { PersonTablePageData pageData = new PersonTablePageData(); StringBuilder sql = new StringBuilder(SQLs.PERSON_PAGE_SELECT); // if an organization is defined, restrict result set to persons that are linked to it if (StringUtility.hasText(organizationId)) { sql.append(String.format(\"WHERE LOWER(organization_id) LIKE LOWER('%s') \", organizationId)); } sql.append(SQLs.PERSON_PAGE_DATA_SELECT_INTO); SQL.selectInto(sql.toString(), new NVPair(\"page\", pageData)); return pageData; } } Having modified the person service we add a organization id property to the person page. We can then populate this property when the person page is attached to the organization node page. Finally, we can use in method execLoadData according to Listing 55. Listing 55. Add the possibility to restrict the list of persons to those assigned to a specific organization. @PageData(PersonTablePageData.class) @ClassId(\"23c10251-66b1-4bd6-a9d7-93c7d1aedede\") public class PersonTablePage extends AbstractPageWithTable { private String organizationId; (1) public String getOrganizationId() { return organizationId; } public void setOrganizationId(String organizationId) { this.organizationId = organizationId; } @Override protected void execLoadData(SearchFilter filter) { importPageData(BEANS.get(IPersonService.class) .getPersonTableData(filter, getOrganizationId())); (2) } @ClassId(\"3fa1374b-9635-441b-b2f8-feb24b50740a\") public class Table extends AbstractTable { @Order(20) @ClassId(\"8ac358f2-de17-4b2b-93f3-73e21a7415d8\") public class NewMenu extends AbstractMenu { @Override protected void execAction() { PersonForm form = new PersonForm(); form.getOrganizationField().setValue(getOrganizationId()); (3) form.addFormListener(new PersonFormListener()); // start the form using its new handler form.startNew(); } } } } 1 This property lets the person page remember an organization key 2 Provides the organization key to the person search on the backend server 3 If the user creates a new person below an organization pre-fill the corresponding field In the cases where the modified person page is shown as a child page of the organization page we can now improve the usability of the page’s new menu. When creating a person under an existing organization we create the new person with a pre-filled organization id. See the modified execAction method in NewMenu of Listing 55. The next step in the setup of the page hierarchy is the creation of the organization node page. Node pages allow to define a list of child pages that typically represent different entities. As mentioned before we will only have the person page as a child page in the \"Contacts\" tutorial application. To create the organization node page follow the steps listed below. Expand folder src/main/java in the client module in the package explorer Select package org.eclipse.scout.contacts.client.organization For IntelliJ Create a new Scout page by right-clicking on the package and selecting New → Scout Element → Page as we’ve done before Enter \"OrganizationNode\" into the name field and press Enter Finally, rename \"OrganizationNodeTablePage\" to \"OrganizationNodePage\" For Eclipse Hit Ctrl+N and enter \"scout page\" into the search field of the wizard selection and double click on proposal Scout Page Add \"Organization\" to the class name field Switch the super class field to \"AbstractPageWithNodes\" Verify that the fields in the wizard match the values provided in Figure 53 Click Finish Figure 53. Creating the organization node page. After the wizard has created the initial implementation of the node page, open class OrganizationNodePage in the Java editor and adapt its implementation according to Listing 56. Listing 56. The complete implementation of the class OrganizationNodePage. @ClassId(\"f074181d-462a-40dc-b7cd-46bb4e50e7fb\") public class OrganizationNodePage extends AbstractPageWithNodes { private String organizationId; (1) public String getOrganizationId() { return organizationId; } public void setOrganizationId(String organizationId) { this.organizationId = organizationId; } @Override (2) protected void execCreateChildPages(List> pageList) { PersonTablePage personTablePage = new PersonTablePage(); personTablePage.setOrganizationId(getOrganizationId()); (3) pageList.add(personTablePage); } } 1 The organization id property that represents the selected organization in the parent page 2 Method execCreateChildPages defines the list of child pages 3 Define the organization id property for the person child page We have now created an organization node page that contains a person page as its child page. The only missing step to create the discussed page hierarchy is the link between the organization page with the organization node page. Create this missing link by adding method execCreateChildPage to the organization page as shown in Listing 57. Listing 57. Add the organization node page as a child page to the organization page. @PageData(OrganizationTablePageData.class) @ClassId(\"18f7a78e-0dd0-4e4e-9234-99892bb4459f\") public class OrganizationTablePage extends AbstractPageWithTable { @Override protected IPage execCreateChildPage(ITableRow row) { OrganizationNodePage childPage = new OrganizationNodePage(); childPage.setOrganizationId(getTable().getOrganizationIdColumn().getValue(row)); return childPage; } } The difference between Scout table pages and node pages is also reflected in the different signatures of AbstractPageWithTable.execCreateChildPage and AbstractPageWithNodes.execCreateChildPages. Table pages can have a single child page while node pages may contain a list of child pages. In the seventh step of the \"Contacts\" tutorial we have introduced a typical Scout user interface pattern for 1:n relationships. We have created a dynamic lookup call and used the lookup call to provide the data for a smart field and a smart column. To implement a drill-down functionality for the organization table we have created a page hierarchy using the existing organization page and person page. To link the two table pages we have also created and integrated a Scout node page. The \"Contacts\" application is in a clean state again and you can (re)start the backend and the frontend of the application and verify the result in your browser. As shown in Figure 54 the organization specific person data is now presented in a hierarchical form in the navigation area of the application. Figure 54. The linked person page only shows persons related to the parent organization page. If you want to add the created application to a Git repository there might some configurations be helpful. If there are no plans to use Git, this chapter can be skipped. E.g. it is best practice to exclude some files from adding to a Git repository. These exclusions can be configured by creating a file named .gitignore in the root folder of the repository (see the Git Documentation for details). Here is a sample file that might be used as starting point: # Git *.orig # Maven target/ .surefire-* .flattened-pom.xml # Node node_modules/ test-results/ # Do not check in any log files *.log","title":"Eclipse Scout One Day Tutorial","component":"scout-docs","version":"23.2","name":"one-day-tutorial","url":"/scout-docs/next/getstarted/one-day-tutorial.html","titles":[{"text":"The “Contacts” Application","hash":"sec-my_contacts_guide","id":1},{"text":"Tutorial Overview","hash":"sec-contacts_overview","id":2},{"text":"Setting up the Initial Project","hash":"sec-contacts_initial_project","id":3},{"text":"Creating the initial Codebase","hash":"sec-contacts_initial_codebase","id":4},{"text":"Removing unnecessary Components","hash":"sec-contacts_remove_stuff","id":5},{"text":"Changes to Class WorkOutline","hash":"sec-contacts_change_workoutline","id":6},{"text":"Changes to Class Desktop","hash":"sec-contacts_change_desktop","id":7},{"text":"What have we achieved?","hash":"sec-contacts_summary","id":8},{"text":"Adding the Person and Organization Page","hash":"sec-contacts_pages","id":9},{"text":"Creating additional Packages","hash":"sec-contacts_creating_person_package","id":10},{"text":"Creating the Country Lookup Call","hash":"sec-contacts_country_lookup_call","id":11},{"text":"Creating the Person Page","hash":"sec-contacts_creating_person_page","id":12},{"text":"Adding Table Columns to the Page","hash":"sec-contacts_adding_page_columns","id":13},{"text":"Link the Person Page to the Contacts Outline","hash":"sec-contacts_link_person_page","id":14},{"text":"Adding the Company Page","hash":"sec-contacts_adding_company_page","id":15},{"text":"What have we achieved?","hash":"sec-contacts_summary_step_2","id":16},{"text":"Creating and Accessing the Database","hash":"sec-contacts_jdbc","id":17},{"text":"Adding the Infrastructure","hash":"sec-contacts_jdbc_infra","id":18},{"text":"Scout Config Properties","hash":"sec-contacts_jdbc_properties","id":19},{"text":"The SQL Service and SQL Statements","hash":"sec-contacts_jdbc_sql","id":20},{"text":"The Database Setup Service","hash":"sec-contacts_jdbc_initial_db","id":21},{"text":"What is missing?","hash":"sec-contacts_jdbc_starting","id":22},{"text":"Fetching Organization and Person Data","hash":"sec-contacts_jdbc_fetching_data","id":23},{"text":"What have we achieved?","hash":"sec-contacts_jdbc_summary","id":24},{"text":"Adding a Form to Create/Edit Persons","hash":"sec-contacts_forms","id":25},{"text":"Designing the Person Form","hash":"sec-contacts_form_design","id":26},{"text":"Implementing the Form","hash":"sec-contacts_form_implement","id":27},{"text":"Adding a Gender Code Type","hash":"sec-contacts_form_code","id":28},{"text":"Adding Form Fields","hash":"sec-contacts_form_add_fields","id":29},{"text":"Person Form Handler and Person Service","hash":"sec-contacts_form_integrate_service","id":30},{"text":"What have we achieved?","hash":"sec-contacts_forms_summary","id":31},{"text":"Form Field Validation and Template Fields","hash":"sec-contacts_fields","id":32},{"text":"Simple Form Field Validation","hash":"sec-contacts_field_validation","id":33},{"text":"Complex Form Field Validation","hash":"sec-contacts_field_validation_complex","id":34},{"text":"Creating Template Fields","hash":"sec-contacts_form_templatefields","id":35},{"text":"Adding a simple URL Input Form to the Picture Field","hash":"sec-contacts_form_urleditform","id":36},{"text":"More Template Fields","hash":"sec-contacts_form_templatefields_more","id":37},{"text":"What have we achieved?","hash":"sec-contacts_form_templatefields_summary","id":38},{"text":"Adding the Company Form","hash":"sec-contacts_form_add_company","id":39},{"text":"What have we achieved?","hash":"sec-contacts_form_rest_summary","id":40},{"text":"Linking Organizations and Persons","hash":"sec-contacts_link_organization_person","id":41},{"text":"Creating an Organization Lookup Call","hash":"sec-contacts_company_lookup_call","id":42},{"text":"Using the Lookup Call in the Person Form and the Person Table","hash":"sec-contacts_modify_person_form_and_page","id":43},{"text":"Link the Person Page to Organizations","hash":"sec-contacts_organization_node_page","id":44},{"text":"What have we achieved?","hash":"sec-contacts_link_person_organization_summary","id":45},{"text":"Git configuration","hash":"sec-source_control","id":46}]},"159":{"id":159,"text":"This chapter provides various small technical guides to very specific Scout subjects.","title":"How-Tos","component":"scout-docs","version":"23.2","name":"how-tos","url":"/scout-docs/next/howtos/how-tos.html","titles":[]},"160":{"id":160,"text":"This document describes all relevant changes from Eclipse Scout 23.1 to Eclipse Scout 23.2. If existing code has to be migrated, instructions are provided here. The here described functionality has not yet been released and is part of an upcoming release. Scout Runtime artifacts for Java are distributed using Maven Central: 23.2.0 on Maven Central 23.2.0 on mvnrepository.com Usage example in the parent POM of your Scout application: org.eclipse.scout.rt org.eclipse.scout.rt 23.2.0 pom import Scout Runtime artifacts for JavaScript are distributed using npm: Scout Core Runtime All official Scout JavaScript packages Usage example in your package.json: { \"name\": \"my-module\", \"version\": \"1.0.0\", \"devDependencies\": { \"@eclipse-scout/cli\": \"23.2.0\", \"@eclipse-scout/releng\": \"^22.0.0\" }, \"dependencies\": { \"@eclipse-scout/core\": \"23.2.0\", \"jquery\": \"3.6.0\" } } The pre-built Scout JavaScript assets are also available using a CDN (e.g. to be directly included in a html document): https://www.jsdelivr.com/package/npm/@eclipse-scout/core?path=dist Scout officially supports IntelliJ IDEA and Eclipse for Scout Developers. You can download the Scout plugin for IntelliJ IDEA from the JetBrains Plugin Repository or you can use the plugins client built into IntelliJ IDEA. Please refer to the IntelliJ Help on how to install and manage plugins. You can download the complete Eclipse IDE with Scout SDK included here: Eclipse for Scout Developers To install the Scout SDK into your existing Eclipse IDE, use this P2 update site: https://download.eclipse.org/scout/releases Since this version, the method DateUtility#formatDateTime returns the date formatted with the DateFormat.DEFAULT and no longer with the DateFormat.SHORT. Now, both methods, DateUtility#formatDate and DateUtility#formatDateTime, are formatting the date identically. To apply the old formatting, use DateUtility#formatDateTimeShort. The transformation logic for exceptions which occur while invoking a REST client was slightly adapted. For HTTP error codes 502 (bad gateway), 503 (service unavailable) and 504 (gateway timeout) the adapted ErrorDoRestClientExceptionTransformer returns a org.eclipse.scout.rt.platform.exception.RemoteSystemUnavailableException instead of the former generic org.eclipse.scout.rt.platform.exception.ProcessingException.","title":"Eclipse Scout Migration Guide","component":"scout-docs","version":"23.2","name":"migration-guide","url":"/scout-docs/next/migration/migration-guide.html","titles":[{"text":"About This Document","hash":"about-this-document","id":1},{"text":"Obtaining the Latest Version","hash":"obtaining-the-latest-version","id":2},{"text":"Scout Runtime for Java","hash":"scout-runtime-for-java","id":3},{"text":"Scout Runtime for JavaScript","hash":"scout-runtime-for-javascript","id":4},{"text":"IDE Tooling (Scout SDK)","hash":"ide-tooling-scout-sdk","id":5},{"text":"IntelliJ IDEA","hash":"intellij-idea","id":6},{"text":"Eclipse","hash":"eclipse","id":7},{"text":"Utilities","hash":"utilities","id":8},{"text":"DateUtility: New Default Date Time Format","hash":"dateutility-new-default-date-time-format","id":9},{"text":"Adapted REST ErrorDoRestClientExceptionTransformer","hash":"adapted-rest-errordorestclientexceptiontransformer","id":10}]},"161":{"id":161,"text":"The latest version of this release is: 23.2.0. You can see the detailed change log on GitHub. Coming from an older Scout version? Check out the Migration Guide for instructions on how to obtain the new version and upgrade existing applications. The here described functionality has not yet been released and is part of an upcoming release. The demo applications for this version can be found on the features/version/23.2.0 branch of our docs repository on GitHub. If you just want to play around with them without looking at the source code, you can always use the deployed versions: https://scout.bsi-software.com/contacts/ https://scout.bsi-software.com/widgets/ https://scout.bsi-software.com/jswidgets/","title":"Eclipse Scout Release Notes","component":"scout-docs","version":"23.2","name":"release-notes","url":"/scout-docs/next/releasenotes/release-notes.html","titles":[{"text":"About This Release","hash":"about-this-release","id":1},{"text":"Demo Applications","hash":"demo-applications","id":2}]},"162":{"id":162,"text":"After installing the Eclipse Scout package you are ready for testing the SDK version Before executing the SDK tests described below, make sure that you already have (at least) checked that the Scout Hello World is working properly. Eclipse must be launched with a JDK! Check this in the Eclipse About Dialog → Installation Details → Configuration. Otherwise many operations (especially the generation of webservices) will fail. This can be set in the eclipse.ini file. Windows: The -vm parameter pointing to the JDK subdirectory …​\\jre\\bin\\server\\jvm.dll Open Eclipse About dialog Click on Eclipse Scout project button Check Scout SDK feature version Click on button Plug-in Details Check Scout SDK plug-in version (same as feature version) SDK Version Check: Scout SDK version matches expected version for testing. Open HelloWorld Form and create a new form field using Ctrl+Space. Ensure the Scout Templates (E.g. StringField, TableField) are available. Select a Template. The corresponding code is inserted and edit locations can be switched using Tab key. When moving to a super class by using the Tab key, ensure the possible super class proposals are displayed (see screenshot below). Create a new Form using the New Form wizard. As soon as the Form is opened, directly invoke the code completion in a group box without closing the file and ensure the template can be inserted. Figure 1. Select the desired super class proposal Ensure the newly created form field (test before) is reflected in the corresponding form data (DTO auto update). When pressing Ctrl+Space in a TEXTS.get(\"\") statement ensure the NLS proposals are displayed and that a new one can be created Open the *.nls file and test that the NLS Editor opens and that new entries can be created. Press the menu Scout → Create all missing @Classid Annotations and ensure they are correctly created (all types that implement ITypeWithClassId should have a class id after this step) Create a new Form (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Table Page (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new CodeType (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Form (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new LookupCall (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Table Page (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Permission (Ctrl+N) and verify that it is created correctly (no compilation errors) Create a new Web Service (Ctrl+N) Consumer for WSDL http://services.nexus6studio.com/StockQuoteService.asmx?wsdl and verify that it is created correctly (no compilation errors)","title":"Scout SDK Testing Procedure","component":"scout-docs","version":"23.2","name":"scout-sdk-testing","url":"/scout-docs/next/sdk/scout-sdk-testing.html","titles":[{"text":"Precondition","hash":"precondition","id":1},{"text":"Verify Version","hash":"verify-version","id":2},{"text":"Test Code Completion","hash":"test-code-completion","id":3},{"text":"Test DTO update","hash":"test-dto-update","id":4},{"text":"Test NLS","hash":"test-nls","id":5},{"text":"Test ClassId creation","hash":"test-classid-creation","id":6},{"text":"Test Wizards Small Set","hash":"test-wizards-small-set","id":7},{"text":"Test Wizards Full Set","hash":"test-wizards-full-set","id":8}]},"163":{"id":163,"text":"This chapter presents the Scout SDK plugins available for the Eclipse IDE. The Scout SDK provides wizards to create new project and application components, adds code assistance to the Java Editor and comes with a NLS editor to manage all translated text entries of the application. The chapter is organized as follows: Because the Scout Tooling is based on the Eclipse IDE, Eclipse IDE tooling provides a short overview of frequently used Eclipse features. A high level description of the Scout tooling is provided in Scout SDK Overview. Scout Wizards, Scout Content Assistance and Scout NLS Tooling then provide detailed descriptions of the functionality offered by the Scout SDK. The Scout tooling is an extension of the Eclipse IDE. The goal of this section is not to provide a complete overview on the features contained in the Eclipse IDE. It provides a short overview of the important eclipse features, frequently used during the development of a Scout Application. Experienced Eclipse IDE users might skip this section. To start the New Wizard wizard press Ctrl+N or use menu File New Other…​. In the first wizard step type the name of the object you want to create into the Wizards field as shown in Figure 1. Figure 1. \"New\" Wizard Start the New Wizard and type Class in the Wizards field. Select Class Click on Next to open the New class wizard Figure 2. \"New Java Class\" Wizard You can choose define the following properties: Source folder: Click on Browse to choose the project where the class belongs. Package: Click on Browse to choose the package in the given project. If the package does not exist it will be created a new one automatically. Name: Type the class name Modifiers: Choose public or default. Or abstract and/or final. Superclass: Choose the parent class clicking on Browse Interfaces: Click on Add to add the list of interfaces your class implements. Method stubs: Include methods in your class. Comments: Generate predefine comments. Click on Finish when you are done with the class definition. The java editor will open and you can start editing. Start the New Wizard and type Package in the Wizards field. Select Package Click on Next to open the New package wizard In the New package wizard you can define the following properties: Source folder: Click on Browse to choose the project where the package belongs. Name: Write the name of the package. Package info: Choose the checkbox if you want package-info Click on Next to create the project. The Project Browser The import section of a java class needs to be kept up-to-date. New imports need to be added and no longer used ones should be removed. Eclipse offers a the shortcut Ctrl+Shift+O to accomplish this task. In case an import cannot be resolved because several candidates exist, a selection list is displayed. Renaming a class without SDK support is not so easy. The class and possibly the compilation unit need to be renamed. Then every reference to the class within the workspace needs to be updated. All this work is accomplished by using the Class rename Wizard. Open the Wizard using one of the following methods Alt+Shift+R Context Menu Refactor Rename…​ Select the class in the tree and press F2 Choose the new name for the class Specify which references need to be updated Click [Finish] or [Next] to continue A class can be renamed by select the class name anywhere in code and pressing Ctrl+1. The option [Rename in Workspace] will rename the class without using a the wizard. Renaming a package without SDK support would be a tedious undertaking. All classes in the package and its subpackages would have to be modified as well as the directory structure on disk. Then every reference to the package within the workspace needs to be updated. All this work is accomplished by using the Package rename Wizard. Open the Wizard using one of the following methods Alt+Shift+R Context Menu Refactor Rename…​ Select the package in the tree and press F2 Choose the new name for the package Specify which references need to be updated Click [OK] or [Prview] to continue The Scout SDK tooling helps the Scout developer to quickly create frequently used Scout components. This Scout Tooling is implemented as extensions of the Eclipse IDE in the form of wizards, content assist extension to the Eclipse Java editor and support for dealing with translated texts called NLS support. Scout Wizards The Scout SDK tooling includes a number of wizards for the creation of frequently used Scout components. In many cases the execution of such wizards involves the creation/editing of several source files. In the case of the creation of a new Scout form this includes the form class in the client module of the Scout application, a form data class and a service that communicates Descriptions for the individual wizards are provided in Scout Wizards. Content Assist In the Scout framework the hierarchical organization of Scout components if frequently reflected in the form of inner classes. This allows the Scout tooling to provide context specific proposals in the form of content assist proposals offered in the Java editor of the Eclipse IDE. Examples for this form of the tooling includes the creation of form fields or adding columns and context menus to tables. Content assist support is described in detail in Scout Content Assistance. NLS Tooling Eclipse Scout comes with NLS (National Language Support). To support Scout developers in using Scout’s NLS (National Language Support) the Scout SDK offers corresponding tooling to work with translated texts. This tooling is described in Scout NLS Tooling. The Scout SDK provides a set of wizards to create new Scout projects and various components for your Scout applications. To start any of these wizards press Ctrl+N or use menu File New Other…​. In the first wizard step type \"Scout\" into the Wizards field as shown in Figure 3. Figure 3. Selecting Scout Wizards in the Eclipse wizard dialog The wizards provided by the Scout SDK are introduced and described in the sections listed below. New Project Wizard (New Project Wizard) New Page Wizard (New Page Wizard) New Form Wizard (New Form Wizard) The New Scout Project wizard can be used to create a new Scout project from scratch. To open the wizard press Ctrl+N or use File New Other…​ and type \"Scout\" into the Wizards search field. Then, select the entry \"Scout Project\" and click on Next. This leads to the initial dialog of the New Scout Project wizard as shown in Figure 4. Figure 4. The new Project Wizard A detailed description of the indiviudal wizard fields of Figure 4 is provided in the next section. By clicking on the Finish button the wizard is started and a new Scout client server application is created in the form of a Maven multi-module project. All fields of the Figure 4 are initially filled with default values. Group Id Maven groupId used for all created projects. The default value is org.eclipse.scout.apps. Artifact Id Maven artifactId for the parent project. The additional projects are derived from this name. The default value is helloworld. Display Name The name of the application presented to the user. This name is shown in the Browser title bar. The default value is \"My Application\" With the Project Location group box, you can control where the project will be created. Unchecked the Use default Workspace location checkbox to enter an other value in the Target Directory Field. The Browse…​ button can help you to find the appropriate path. With the Figure 4 wizard a complete Maven multi-module project is created. Using the default artifact Id helloworld the following Maven modules are created. Maven module helloworld Contains the project’s parent pom.xml file Maven module helloworld.client Contains model components of the client application in src/main/java and model tests in src/test/java. The class HelloWorldForm in package org.eclipse.scout.apps.helloworld.client.helloworld is an example of a model class. Maven module helloworld.shared Contains components needed in both the client and the server application. For examples see the IHelloWorldService interface in src/main/java and class HelloWorldFormData in src/generated/java. The Texts.nls file that can be opened in the Scout NLS Editor. Maven module helloworld.server Contains the model components of the server application in src/main/java and model tests in src/test/java. The class HelloWorldService in package org.eclipse.scout.apps.helloworld.server.helloworld is an example of such a model class. Maven module helloworld.server.app.dev Contains all components to run the Scout server application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the Scout server application. The file pom.xml bundles the Jetty web server with the server application. The file [webapp] dev server.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.server.app.war Contains all components to create a Scout server WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the server configuration. The file pom.xml is used to build the Scout server WAR file. Maven module helloworld.ui.html Contains servlet filters and the HTML pages as well as custom CSS and JavaScript files for the Scout UI Server. See class UiServletFilter in src/main/java and folder WebContent in source/main/resources. The file js build.launch contains the launch configuration for the Eclipse IDE that executes the JavaScript build. Maven module helloworld.ui.html.app.dev Contains all components to run the Scout UI application from within the Eclipse IDE. The file config.properties in folder src/main/resources contains the development configuration for the application. The file web.xml in folder src/main/webapp contains the web configuration for the application. The file pom.xml bundles the Jetty web server with the application. The file [webapp] dev ui.launch contains the launch configuration for the Eclipse IDE. Maven module helloworld.ui.html.app.war Contains all components to create a Scout UI WAR file to deploy to an external web server. The file config.properties in folder src/main/resources contains the application configuration. The file web.xml in folder src/main/webapp contains the web configuration. The file pom.xml is used to build the Scout UI WAR file. The New Scout Page wizard can be used to create a new page and related classes. To start the wizard use File New Other…​ or press Ctrl+N. Figure 5. The new Page Wizard In the case of Figure 5 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 5 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the page. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the page class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared module. Name The name of the page class. According to Scout conventions the class name ends with the suffix TablePage (for subclasses of AbstractPageWithTable) or NodePage (for AbstractPageWithNodes). Super Class The super class for the form. AbstractPageWithTable is the default value. Shared Source Folder The source folder of the Maven shared module used for creation of the page data and the service interface. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for creation of the service implementation. The default value is the src/main/java folder in the Maven server module. In the Figure 5 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyTablePage page class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared The IMyService service interface in folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld MyTablePageData page data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService implementation in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld The New Form wizard is be used to create a new form including a form data, permissions and and related service. To start the wizard use File New Other…​ or press Ctrl+N. Figure 6. The new Form Wizard In the case of Figure 6 the package org.eclipse.scout.apps.helloworld.client.helloworld has been selected in the Package Explorer. The only wizard field that then needs to be filled in manually is the Name field. By clicking on the Finish button the wizard is started and the specified components are created. Most of the fields of the Figure 6 will be filled with default values depending on the current context of the IDE. The context can be derived from a package selected in the Package Explorer or from the class in the active Java Editor. Source Folder The source folder of the Maven client module used for the creation of the form class. The default value is the src/main/java folder in the Maven client module. Package The Java package that will contain the form class. The Scout SDK will try to guess the package name from the current context and derive matching package names for the Maven shared and server modules. Name The name of the form class. According to Scout conventions the class name ends with the suffix Form. Super Class The super class for the form. AbstractForm is the default value. Create FormData If ticked, a form data class will be created in the shared module. Create Service If ticked, a service interface is created in the shared module and a service implementation is created in the Maven server module. Create Permissions If ticked, read and update permissions are created in the Maven shared module. Shared Source Folder The source folder of the Maven shared module used for creation of the form data, the service interface and the permission classes. The default value is the src/main/java folder in the Maven shared module. Server Source Folder The source folder of the Maven server module used for the service class creation. The default value is the src/main/java folder in the Maven server module. In the Figure 6 example shown above the Scout SDK will create the following components. In Maven module helloworld.client The MyForm form class in folder src/main/java and package org.eclipse.scout.apps.helloworld.client.helloworld In Maven module helloworld.shared In folder src/main/java and package org.eclipse.scout.apps.helloworld.shared.helloworld The IMyService service interface The ReadMyPermission permission class The UpdateMyPermission permission class The MyFormData form data class in folder src/generated/java and package org.eclipse.scout.apps.helloworld.shared.helloworld In Maven module helloworld.server The MyService service class in folder src/main/java and package org.eclipse.scout.apps.helloworld.server.helloworld To create new Scout components that are represented by inner classes in the Scout framework, the Scout tooling extends the Java content assist of the Eclipse Java editor. The offered proposals are context specific. Depending on the current cursor position in the Java editor, possible Scout components are added to the proposal list. In a class representing a group box in a form, the Scout content assist adds proposals for various form fields. In a table class the content assist adds proposals to add table columns or context menus. Those proposals trigger the creation of inner classes for form fields, table columns or codes. The Eclipse content assist can be started by typing Ctrl+Space. To add additional form fields to a form the current edit position needs to be inside of a Scout group box. Typing Ctrl+Space then provides access to the most frequently used Scout widgets as shown in Figure 7. Figure 7. Proposals to create new form fields in a GroupBox When a template is selected, it is possible to customize it by navigating between the different Edit-Groups with the Tab Key (this works exactly like other templates in the Eclipse Editor). With this mechanism you can quickly define the class name, the parent class and other properties. To exit the Edit-Mode just press Enter. For adding new columns in a table set the current edit position inside a Scout table. The Scout table itself may be located inside of a TableField as shown in Figure 8 or can also be located inside of a Scout TablePage. Figure 8. Proposals to create new columns in a Table Next to adding columns the content assist shown in Figure 8 can also be used to add key stroke actions and menus to tables. Adding new Codes to an existing CodeType is supported by the content assist as shown in Figure 9. Figure 9. Proposals to create new codes in a CodeType Translated text entries are most frequently added when working in the Java editor view. When the the current edit position is inside the String parameter of the TEXTS.get() code, the content assist (opened with Ctrl + Space) provides support for the NLS entries as shown in Figure 10. Figure 10. Proposals corresponding to NLS Support. Selecting one of proposal entries (like \"DateOfBirth\" in the example) shows the available translations on the right side. To select a specific proposal entry you may double click on the entry or hit the Enter key. To create a new text entry select New text…​ at the end of the proposal list. Adding a translated text can then be done in the New Entry wizard provided by the Scout SDK as shown in Figure 11. Figure 11. Adding a new text with the New Entry wizard. Key Name This field holds the text key that is used to access translated text. default This field holds the default translated text for the key. Make sure to at least provide a translated text in this tab. French (France) Additional tabs to enter translations for other languages may be present. Adding additional languages is described in the text for the NLS editor. Copy key to the clipboard Select this checkbox to copy the key name to the clipboard and paste it later in your code. To manage translated application texts for different languages the Scout SDK includes a NLS editor. This editor helps to efficiently deal to edit all the property files that are used with the default setup of Scout. The NLS editor can be accessed for each text provider service of a Scout application via the *.nls files of the shared Maven modules of the application. In the case of the \"Hello World\" application you will find the Texts.nls file in module org.eclipse.scout.helloworld.shared. To open the editor for the \"Hello World\" application select the Texts.nls file first and then use context menu Open With NLS Editor. The screenshot below shows the opened NLS editor. In the first column the key values are shown that are used in accessing translations through TEXTS.get(\"key\"). The second columns holds the default translations followed by columns holding the translations for other translated languages. Actions on the top right corner: Refresh NLS Project Reload the content of the editor. Show NLS entry usage For each row, search in the Java code where the NLS Key is used. Results are displayed in the first column. New entry…​ Opens the New Text Entry Wizard New language…​ Opens the Add a Language Wizard Import…​ Import the NLS entries of an external file Export…​ Export the NLS entries to an external file Import and Export requires additional components. Hide inherited rows checkbox On the top of each column, the text fields allow you to filter the entries in the table. With the Reset button on the right you will empty those filters. The entries in the table can be directly edited by pressing F2 or double-clicking into a text cell. On each row it is possible to call following context menu: Modify Entry Opens the New Text Entry Wizard Find references to 'Xxx' Search in the Java code where the NLS Key is used. Remove Xxx Delete the NLS Entry from the files The mapping between the properties files is registered in the \"Text Provider Service\" class. Per default the files follow this pattern: .shared/src/main/resources//texts/Texts.properties where: is a chain of folders following the same convention as the Java source files with the package name. For example the org.eclipse.contacts.shared project uses org/eclipse/scout/contacts/shared as path. is an identifier of the language and the country. Some possible file names: Texts.properties is the default language Texts_de.properties is for German Texts_fr_BE will be for French in Belgium If NLS keys are used in the code that do not exist in a properties file, an ugly placeholder is displayed to the user. To find such missing translations the Menu Scout → Search missing text keys…​ may be handy. The result is listed in the Eclipse Search view. The search also takes the scope of each NLS key into account. So that the key is considered to be available there must be a TextProviderService with that key on the classpath of that module. Reported false positives can be suppressed using the following comment at the end of the corresponding line: NO-NLS-CHECK. Matches on that line are then not reported in future searches anymore. This chapter walks you through the installation of the Eclipse Scout SDK. There are two ways to install it. Install a prepackaged Eclipse IDE tailored for Scout developers. Install the Scout SDK plugins into an existing Eclipse IDE. The installation process for the Eclipse package containing Scout is described in the Hello Scout Tutorial. This section describes the installation of Scout into an existing Eclipse installation. As the audience of this section is assumed to be familiar with Eclipse, we do not describe how you got your Eclipse installation in the first place. For the provided screenshots we start from the popular package Eclipse IDE for Java EE Developers. Figure 12. Eclipse menu to install additional software To add Scout to your existing Eclipse installation, you need to start Eclipse. Then select the Help Install New Software…​ menu as shown in Figure 12 to open the install dialog. Figure 13. Select the Scout features to add to the Eclipse installation In the install dialog, select the update site matching your Eclipse installation. Type Scout into the filter field below and select Eclipse Scout SDK (Binary only). Then, move through the installation with the Next button. On the last installation step, accept the presented EPL terms by clicking on the appropriate radio button. To complete the installation, click the Finish button and accept the request for a restart of Eclipse. After the restart of the Eclipse IDE the Scout SDK is ready to use! The simplest way to verify your Scout installation is to create a “Hello World” Scout project and run the corresponding Scout application as described in Hello Scout.","title":"Scout SDK for Eclipse","component":"scout-docs","version":"23.2","name":"sdk-eclipse","url":"/scout-docs/next/sdk/sdk-eclipse.html","titles":[{"text":"Eclipse IDE tooling","hash":"sec-eclipse_ide_tooling","id":1},{"text":"Start the New Wizard","hash":"start-the-new-wizard","id":2},{"text":"Create a new Java class","hash":"create-a-new-java-class","id":3},{"text":"Create a new Java package","hash":"create-a-new-java-package","id":4},{"text":"Organize Java imports","hash":"organize-java-imports","id":5},{"text":"Rename a class","hash":"rename-a-class","id":6},{"text":"Alternative Method","hash":"alternative-method","id":7},{"text":"Rename a package","hash":"rename-a-package","id":8},{"text":"Scout SDK Overview","hash":"sec-sdk_overview","id":9},{"text":"Scout Wizards","hash":"sec-sdk_wizard","id":10},{"text":"New Project Wizard","hash":"sec-wizard_project","id":11},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values","id":12},{"text":"Created Components","hash":"created-components","id":13},{"text":"New Page Wizard","hash":"sec-wizard_page","id":14},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values-2","id":15},{"text":"Created Components","hash":"created-components-2","id":16},{"text":"New Form Wizard","hash":"sec-wizard_form","id":17},{"text":"Wizard Fields and Default Values","hash":"wizard-fields-and-default-values-3","id":18},{"text":"Created Components","hash":"created-components-3","id":19},{"text":"Scout Content Assistance","hash":"sec-sdk_content_assist","id":20},{"text":"Create new Form Fields","hash":"sec-sdk_new_form_field","id":21},{"text":"Create new Table Columns","hash":"sec-sdk_new_table_column","id":22},{"text":"Create new Codes","hash":"create-new-codes","id":23},{"text":"Scout NLS Tooling","hash":"sec-sdk_nls","id":24},{"text":"Adding a new Translated Text Entry","hash":"sec-add_text_entry","id":25},{"text":"The NLS Editor","hash":"sec-nls_editor","id":26},{"text":"Action Buttons","hash":"action-buttons","id":27},{"text":"Default Mapping to Properties Files","hash":"default-mapping-to-properties-files","id":28},{"text":"Find missing NLS Keys","hash":"find-missing-nls-keys","id":29},{"text":"Appendix A: Scout SDK Installation","hash":"apx-install_scout","id":30},{"text":"Install Eclipse IDE for Scout Developers","hash":"install-eclipse-ide-for-scout-developers","id":31},{"text":"Add Scout to your Existing Eclipse IDE","hash":"add-scout-to-your-existing-eclipse-ide","id":32},{"text":"Verifying the Installation","hash":"verifying-the-installation","id":33}]},"164":{"id":164,"text":"The Scout SDK plugin for IntelliJ is available at the JetBrains Marketplace. Please see the Installation Guide on how to install it. Make sure to check out https://plugins.jetbrains.com/plugin/13393-eclipse-scout to learn what the plugin contains.","title":"Scout SDK for IntelliJ","component":"scout-docs","version":"23.2","name":"sdk-intellij","url":"/scout-docs/next/sdk/sdk-intellij.html","titles":[]},"165":{"id":165,"text":"Scout provides plugins for IntelliJ and Eclipse that support developing Eclipse Scout applications. The Scout SDK plugins helps to create a new project and application components, improve code completion and come with a NLS editor to manage all translated text entries of the application. Thanks to this tooling, developing Scout applications is made simpler, more productive and also more robust. Initially, a solid understanding of Java (and JavaScript for Scout JS) is sufficient to start developing Scout applications and only a rough understanding of the underlying Maven/Web technologies is required. The Scout SDK also helps developers to become more productive. Many repetitive and error prone tasks run automatically in the background or are taken care of by the component wizards of the Scout SDK. The application code created by the Scout SDK wizards helps to ensure that the resulting Scout application has a consistent and robust code base and is well aligned with the application model defined by the Scout runtime framework.","title":"Scout SDK","component":"scout-docs","version":"23.2","name":"sdk","url":"/scout-docs/next/sdk/sdk.html","titles":[{"text":"Motivation for the Tooling","hash":"sec-sdk_motivation","id":1}]},"166":{"id":166,"text":"Scout is a framework for creating modern business applications. Such applications are typically separated into multiple tiers where each tier is responsible for a specific part of the application like presenting information to the user or processing business logic and persisting data. Scout solves these requirements by providing a separation of such tiers out of the box. A typical Scout Classic application consists of the following parts: A server layer responsible for persisting data on a database and possibly providing and consuming webservices. The scout server layer provides utilities to simplify the most common tasks. A client layer responsible for handling the Java UI code. It consists of a model represented by plain Java classes as well as services and utilities to implement behaviour associated with client code. The scout client layer provides utilities to simplify the most common tasks. For simplicity, the client model is processed in a single threaded way to avoid synchronization. Callbacks, e.g. for validating a field or calling services when opening a form run inside a Model Job. A UI layer responsible for rendering the client model in the browser. Since the scout UI layer already provides JavaScript/HTML/CSS code for many common UIs, the project specific code in this layer is typically quite small. Examples are specific CSS styling or a new custom input field for special purposes. Server and client both run in a servlet container, such as Apache Tomcat. They are usually deployed as separate war files in order to be able to scale them differently. However, it is also possible to create a single war file. Scout JS is used to build the user interface of an Eclipse Scout application. It consists of a large widget library including simple widgets like buttons or menu items and more complex widgets like tables, tile grids or trees. Beside the widget library itself, Scout JS also helps to interact with the widgets, from accessing a widget, to configuring data binding or adding input validation. But with the widgets alone you cannot create an application. You need a frame to put the widgets into, a setup to easily write tests and prevent errors, a centralized error handling to analyze errors, possibilities to customize the look of your app and tooling to build it, so it can be published and used. For all these topics Scout JS provides solutions with the goal to make developing a user interface as easy as possible. This means, with Scout JS you’ll create your user interface of an Eclipse Scout application using JavaScript. Compared to using Scout Classic, you don’t need a UI server which helps to create stateless applications. Scout JS is used in classic Scout applications as well to render the client model written in Java. So, if you understand the concepts of Scout JS, writing custom widgets for Scout Classic will be a lot easier.","title":"Technical Guide","component":"scout-docs","version":"23.2","name":"technical-guide","url":"/scout-docs/next/technical-guide/technical-guide.html","titles":[{"text":"Scout Classic","hash":"scout-classic","id":1},{"text":"Scout JS","hash":"scout-js","id":2}]},"167":{"id":167,"text":"This cheat sheet shows how to create your own chart for a ScoutJS application. In this example we will visualize the sold scoops of an ice cream shop. We assume the ice cream shop already has a running ScoutJS application and a place where it wants to create the chart. Everything related to charts has its own Maven and npm modules and is not part of Scout core. Therefore, the following Maven dependencies need to be added to the ui.html-module of the ice cream shop app. org.eclipse.scout.rt org.eclipse.scout.rt.chart.ui.html A npm dependency to @eclipse-scout/chart needs to be added in the package.json of the ice cream shop app and in addition, an import needs to be added to the entry-files icecream.js, import * as chart from '@eclipse-scout/chart'; Object.assign({}, chart); // workaround so that the imports are not unused icecream-theme.less and icecream-theme-dark.less. @import \"~@eclipse-scout/chart/src/index\"; @import \"~@eclipse-scout/chart/src/index-dark\"; The chart is created by scout.create('Chart', { parent: this }); The ice cream shop has sold the following amount of scoops: Table 1. Table Scoops per month and flavor Jan. Feb. Mar. Apr. May Jun. Jul. Aug. Sept. Oct. Nov. Dec. Vanilla 0 0 0 94 162 465 759 537 312 106 0 0 Chocolate 0 0 0 81 132 243 498 615 445 217 0 0 Strawberry 0 0 0 59 182 391 415 261 75 31 0 0 We create a data object and pass it to the chart. let data = { axes: [ [{label: 'Jan.'}, {label: 'Feb.'}, {label: 'Mar.'}, {label: 'Apr.'}, {label: 'May'}, {label: 'Jun.'}, {label: 'Jul.'}, {label: 'Aug.'}, {label: 'Sept.'}, {label: 'Oct.'}, {label: 'Nov.'}, {label: 'Dec.'}] ], chartValueGroups: [ { groupName: 'Vanilla', values: [0, 0, 0, 94, 162, 465, 759, 537, 312, 106, 0, 0] }, { groupName: 'Chocolate', values: [0, 0, 0, 81, 132, 243, 498, 615, 445, 217, 0, 0] }, { groupName: 'Strawberry', values: [0, 0, 0, 59, 182, 391, 415, 261, 75, 31, 0, 0] } ] }; chart.setData(data); The chart will now look like this: It looks like this, because the default type is pie, the default value of maxSegments is 5 and the first three segments in each dataset are 0. Let’s change it to a bar chart and use another color scheme: let config = { type: Chart.Type.BAR, options: { colorScheme: colorSchemes.ColorSchemeId.RAINBOW } }; chart.setConfig(config); Now we add labels to the scales and set some custom colors. data.chartValueGroups[0].colorHexValue = '#fdf2d1'; data.chartValueGroups[1].colorHexValue = '#94654c'; data.chartValueGroups[2].colorHexValue = '#f89fa1'; config.options.autoColor = false; config.options.scales = { x: { title: { display: true, text: 'Month' } }, y: { title: { display: true, text: 'Scoops' } } }; chart.setData(data); chart.setConfig(config); Finally, we want to make the chart interactive. config.options = $.extend(true, {}, config.options, { clickable: true, checkable: true, plugins: { legend: { clickable: true } } }); chart.setConfig(config); The chart is now clickable and checkable and datasets can be hidden via the legend. Figure 1. The dataset \"Vanilla\" is hidden and some segments are checked. Each time a segment is clicked an event is triggered. This event can be handled by let clickHandler = event => { let clickObject = event.data, datasetIndex = clickObject.datasetIndex, dataIndex = clickObject.dataIndex, xIndex = clickObject.xIndex, yIndex = clickObject.yIndex; console.log('Segment clicked\\n' + ' - datasetIndex: ' + datasetIndex + '\\n' + ' - dataIndex: ' + dataIndex + '\\n' + ' - xIndex: ' + xIndex + '\\n' + ' - yIndex: ' + yIndex); }; chart.on('valueClick', clickHandler); A list of all checked segments is held in chart.checkedItems. Even if some charts are rendered on a -element the colors can be changed via CSS. We add a custom grey color scheme for the bubble chart, which is rendered on a . To achieve this, we need to add a LESS file with the following content: @chart-grey-1: #191919; @chart-grey-2: #4C4C4C; @chart-grey-3: #737373; @chart-grey-4: #999999; @chart-grey-5: #BFBFBF; @chart-grey-6: #D8D8D8; .color-scheme-grey > .bubble-chart { & > .elements { > .label { fill: black; } > .grid { fill: lightslategrey; } > .tooltip-border { fill: black; } #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 20); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 35, @additional-classes: ~\".hover\"); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".legend\"); } &.checkable > .elements { #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".checked\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover.checked\"); } } This color scheme can now be used in a config object: let config = { type: Chart.Type.BUBBLE, options: { colorScheme: 'color-scheme-grey' } }; Figure 2. A checkable bubble chart using the custom grey color scheme.","title":"How to Create a Chart","component":"scout-docs","version":"23.2","name":"chart-how-to","url":"/scout-docs/next/howtos/scout-js/chart-how-to.html","titles":[{"text":"Prerequisites","hash":"prerequisites","id":1},{"text":"Minimal Code for a New Chart","hash":"minimal-code-for-a-new-chart","id":2},{"text":"Add data to the chart","hash":"add-data-to-the-chart","id":3},{"text":"Chart configuration","hash":"chart-configuration","id":4},{"text":"Events","hash":"events","id":5},{"text":"Change colors using CSS","hash":"change-colors-using-css","id":6}]},"168":{"id":168,"text":"This cheat sheet shows how to implement your own custom field for a ScoutJS application. In this example we will write a FlipCard field that will show a playing card. Clicking on the card will flip it from one side to the other. For this example we use the helloscout git repository, but you can easily create the field in your own code base as well. In case you want to use the helloscout repo, clone and import it into your favourite IDE: git clone https://github.com/bsi-software/helloscout.git Read the readme and start the hellojs application to make sure it works. Create the following files in the folder org.eclipse.scout.hellojs.ui.html src/main/js/flipcard/FlipCardField.js The JavaScript file representing the field. src/main/js/flipcard/FlipCardField.less The LESS file containing the styles of the field. Listing 1. index.js ... export {default as FlipCardField} from './flipcard/FlipCardField'; ... Listing 2. index.less ... @import \"flipcard/FlipCardField\"; ... The FlipCard will inherit from FormField. Every form field consists of a container, a label, the actual field, a mandatory-indicator and a status. Listing 3. FlipCardField.js import {FormField} from '@eclipse-scout/core'; export default class FlipCardField extends FormField { _render() { // Create the container this.addContainer(this.$parent, 'flip-card-field'); // Add a label this.addLabel(); // Create the actual field. This will be your flip card. var $field = this.$parent.appendDiv('content'); // add the field to the form field. this.addField($field); // Add other required form field elements this.addMandatoryIndicator(); this.addStatus(); }; } Don’t forget to add the import for your FlipCardField. Listing 4. HelloFormModel.js { id: \"hellojs.HelloForm\", ... rootGroupBox: { ... fields: [ { id: 'DetailBox', ... fields: [ { id: 'NameField', ... }, (1) { id: 'FlipCardField', objectType: FlipCardField, label: 'Flip the card', gridDataHints: { h: 5, weightY: 0 } }, { id: 'GreetButton', ... } ] } ] } } 1 The FlipCard field Now reload your browser and you should get the following result: Result Minimal Form Field Listing 5. FlipCard.js import {FormField} from '@eclipse-scout/core'; export default class FlipCardField extends FormField { constructor() { super(); this.$card = null; this.$front = null; this.$back = null; this.flipped = false; this.frontImage = null; this.backImage = null; } _render() { // Create the container this.addContainer(this.$parent, 'flip-card-field'); // Add a label this.addLabel(); // Create the actual field (1) var $field = this.$parent.appendDiv('content'); // Create the card inside the field this.$card = $field.appendDiv('card') .on('mousedown', this._onCardMouseDown.bind(this)); //(2) this.$front = this.$card.appendDiv('front'); this.$back = this.$card.appendDiv('back'); // Add the field to the form field. It will be available as this.$field. this.addField($field); // Add other required form field elements this.addMandatoryIndicator(); this.addStatus(); } _renderProperties() { (3) super._renderProperties(); this._renderFrontImage(); this._renderBackImage(); this._renderFlipped(); } _renderFrontImage() { if (this.frontImage) { this.$front.append(''); } } _renderBackImage() { if (this.backImage) { this.$back.append(''); } } _remove() { (4) super._remove(); this.$card = null; this.$front = null; this.$back = null; } _onCardMouseDown() { (2) this.setFlipped(!this.flipped); } setFlipped(flipped) { this.setProperty('flipped', flipped); } _renderFlipped() { this.$card.toggleClass('flipped', this.flipped); } } 1 Create the dom elements in the render function. 2 Add event handler which toggles the CSS class flipped. 3 Initial rendering of the properties. Applies the state to the DOM. 4 Keep the references clean. Reset DOM references when the field has been removed. Listing 6. HelloForm.json import {FlipCardField} from '../index'; export default { id: 'hellojs.HelloForm', ... rootGroupBox': { ... fields: [ { id: 'DetailBox', ... fields: [ { id: 'NameField', ... }, (1) { id: 'FlipCardField', objectType: FlipCardField, label: 'Flip the card', frontImage: 'img/card-back.jpg', backImage: 'img/card-front.jpg', gridDataHints: { h: 5, weightY: 0 } }, { id: 'GreetButton', ... } ] } ] } } 1 FlipCard field is inserted after the name field. Listing 7. FlipCardField.less .flip-card-field { .card { position: absolute; cursor: pointer; height: 100%; width: 152px; transition: transform 1s; (1) transform-style: preserve-3d; &.flipped { transform: rotateY( 180deg ); } & > div { display: block; height: 100%; width: 100%; position: absolute; backface-visibility: hidden; (2) &.back { transform: rotateY( 180deg ); (3) } & > img { height: 100%; width: 100%; } } } } 1 Animation of the card. 2 Ensure back side is not visible. 3 Rotation to back side. Finally, create a folder img in the WebContent folder (org.eclipse.scout.hellojs.ui.html.app/src/main/resources/WebContent) and paste the two images of the card into that folder. You should be able to find the images using Google ;-) Result Flip Card","title":"How to Create a Custom Field","component":"scout-docs","version":"23.2","name":"flip-card-how-to","url":"/scout-docs/next/howtos/scout-js/flip-card-how-to.html","titles":[{"text":"Setup","hash":"setup","id":1},{"text":"Add Empty JS and CSS Files","hash":"add-empty-js-and-css-files","id":2},{"text":"Add the JS file to the JS index","hash":"add-the-js-file-to-the-js-index","id":3},{"text":"Add the LESS file to the LESS index","hash":"add-the-less-file-to-the-less-index","id":4},{"text":"Minimal Code for a New FormField","hash":"minimal-code-for-a-new-formfield","id":5},{"text":"Create a Minimal FormField","hash":"create-a-minimal-formfield","id":6},{"text":"Add the FlipCard to the HelloForm","hash":"add-the-flipcard-to-the-helloform","id":7},{"text":"Full Featured Flip Card Field","hash":"full-featured-flip-card-field","id":8}]},"169":{"id":169,"text":"This how-to shows how to provide JAX-RS RESTful services and consume them from a Scout JS Single Page Application. The goal is to provide a ServerState service in the org.eclipse.scout.hellojs.ui.html module. Add the following dependencies to the org.eclipse.scout.hellojs.ui.html module. org.eclipse.scout.hellojs.ui.html/pom.xml ... org.eclipse.scout.rt org.eclipse.scout.rt.rest org.glassfish.jersey.containers jersey-container-servlet-core org.glassfish.jersey.inject jersey-hk2 org.glassfish.jersey.media jersey-media-json-jackson Register the REST servlet in the web.xml of org.eclipse.scout.hellojs.ui.html.app.dev and org.eclipse.scout.hellojs.ui.html.app.war. org.eclipse.scout.hellojs.ui.html.app.dev/src/main/webapp/WEB-INF/web.xml org.eclipse.scout.hellojs.ui.html.app.war/src/main/webapp/WEB-INF/web.xml ... apiServlet org.glassfish.jersey.servlet.ServletContainer javax.ws.rs.Application org.eclipse.scout.rt.rest.RestApplication 1 ... apiServlet /api/* ... Create the server state service in the org.eclipse.scout.hellojs.ui.html module. The service returns a OK status whenever it is accessible. org.eclipse.scout.hellojs.ui.html/src/main/java/org/eclipse/scout/hellojs/ui/html/helloworld/ServerStateService.java package org.eclipse.scout.hellojs.ui.html.helloworld; import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.Produces; import javax.ws.rs.core.MediaType; import org.eclipse.scout.rt.platform.status.IStatus; import org.eclipse.scout.rt.platform.status.Status; import org.eclipse.scout.rt.rest.IRestResource; /** * {@link HelloWorldService} */ @Path(\"serverstatus\") (1) public class ServerStateService implements IRestResource { @GET @Produces(MediaType.APPLICATION_JSON) public Status getStatus() { return new Status(IStatus.OK); } } 1 The path under which the service will be provided. Note: the full path is /api/serverstatus since the apiServlet is mapped to /api/* in the web.xml. Start the dev ui application org.eclipse.scout.hellojs.ui.html.app.dev/[org.eclipse.scout.hellojs] dev ui.launch. Connect to the url http:localhost:[ui server port]/api/serverstatus and ensure the service is up an running. var ajaxOptions = { type: 'GET', dataType: 'json', contentType: 'application/json; charset=UTF-8', cache: false, url: 'api/serverstatus', timeout: 0 }; this.ajaxCall = scout.create('AjaxCall', { ajaxOptions: ajaxOptions, name: 'server status request' }, { ensureUniqueId: false }); this.ajaxCall.retryIntervals = []; (1) this.ajaxCall.call() (2) .done(function(result) { (3) // TODO handle the success state. result.severity if filled with the severity code. }.bind(this)) .fail( (4) function() { // TODO handle the failure case. }.bind(this) ); 1 The ajax call retries by default 4 times for our example it is not needed to retry at all. 2 The ajax call 3 Success callback 4 Error callback","title":"How to Use a REST Service","component":"scout-docs","version":"23.2","name":"rest-service-how-to","url":"/scout-docs/next/howtos/scout-js/rest-service-how-to.html","titles":[{"text":"Maven Dependencies","hash":"maven-dependencies","id":1},{"text":"REST Servlet","hash":"rest-servlet","id":2},{"text":"Provide a RESTful service","hash":"provide-a-restful-service","id":3},{"text":"Test if the service is up an running","hash":"test-if-the-service-is-up-an-running","id":4},{"text":"Use the service from Scout JS","hash":"use-the-service-from-scout-js","id":5}]},"170":{"id":170,"text":"This cheat sheet shows how to create your own chart for a Scout application. In this example we will visualize the sold scoops of an ice cream shop. We assume the ice cream shop already has a running Scout application and a place where it wants to create the chart. Everything related to charts has its own Maven and npm modules and is not part of Scout core. Therefore, the following Maven dependencies need to be added to the client-, shared- and ui.html-module of the ice cream shop app. org.eclipse.scout.rt org.eclipse.scout.rt.chart.client org.eclipse.scout.rt org.eclipse.scout.rt.chart.shared org.eclipse.scout.rt org.eclipse.scout.rt.chart.ui.html A npm dependency to @eclipse-scout/chart needs to be added in the package.json of the ice cream shop app and in addition, an import needs to be added to the entry-files icecream.js, import * as chart from '@eclipse-scout/chart'; Object.assign({}, chart); // workaround so that the imports are not unused icecream-theme.less and icecream-theme-dark.less. @import \"~@eclipse-scout/chart/src/index\"; @import \"~@eclipse-scout/chart/src/index-dark\"; The chart is created using an AbstractChartField and placed inside a GroupBox. public class ChartField extends AbstractChartField { public class Chart extends AbstractChart { } } The ice cream shop has sold the following amount of scoops: Table 1. Table Scoops per month and flavor Jan. Feb. Mar. Apr. May Jun. Jul. Aug. Sept. Oct. Nov. Dec. Vanilla 0 0 0 94 162 465 759 537 312 106 0 0 Chocolate 0 0 0 81 132 243 498 615 445 217 0 0 Strawberry 0 0 0 59 182 391 415 261 75 31 0 0 We create a data object and pass it to the chart (e.g. in the execLoad method of our FormHandler). ChartData data = new ChartData(); List axis = new ArrayList<>(); Stream.of(\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May\", \"Jun.\", \"Jul.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\") .forEach(label -> axis.add(new ChartAxisBean(label, label))); data.getAxes().add(axis); MonupleChartValueGroupBean vanilla = new MonupleChartValueGroupBean(); vanilla.setGroupName(\"Vanilla\"); IntStream.of(0, 0, 0, 94, 162, 465, 759, 537, 312, 106, 0, 0) .forEach(value -> vanilla.getValues().add(new BigDecimal(value))); data.getChartValueGroups().add(vanilla); MonupleChartValueGroupBean chocolate = new MonupleChartValueGroupBean(); chocolate.setGroupName(\"Chocolate\"); IntStream.of(0, 0, 0, 81, 132, 243, 498, 615, 445, 217, 0, 0) .forEach(value -> chocolate.getValues().add(new BigDecimal(value))); data.getChartValueGroups().add(chocolate); MonupleChartValueGroupBean strawberry = new MonupleChartValueGroupBean(); strawberry.setGroupName(\"Strawberry\"); IntStream.of(0, 0, 0, 59, 182, 391, 415, 261, 75, 31, 0, 0) .forEach(value -> strawberry.getValues().add(new BigDecimal(value))); data.getChartValueGroups().add(strawberry); getFieldByClass(ChartField.class).getChart().setData(data); The chart will now look like this: It looks like this, because the default type is pie, the default value of maxSegments is 5 and the first three segments in each dataset are 0. Let’s change it to a bar chart and use another color scheme: IChartConfig config = BEANS.get(IChartConfig.class) .withType(IChartType.BAR) .withColorScheme(ColorScheme.RAINBOW); getFieldByClass(ChartField.class).getChart().setConfig(config); Now we add labels to the scales and set some custom colors. vanilla.setColorHexValue(\"#fdf2d1\"); chocolate.setColorHexValue(\"#94654c\"); strawberry.setColorHexValue(\"#f89fa1\"); config.withAutoColor(false) .withXAxisLabelDisplay(true) .withXAxisLabel(\"Month\") .withYAxisLabelDisplay(true) .withYAxisLabel(\"Scoops\"); getFieldByClass(ChartField.class).getChart().setData(data); getFieldByClass(ChartField.class).getChart().setConfig(config); Finally, we want to make the chart interactive. getFieldByClass(ChartField.class).getChart().extendConfig(BEANS.get(IChartConfig.class) .withClickable(true) .withCheckable(true) .withLegendClickable(true), true); The chart is now clickable and checkable and datasets can be hidden via the legend. Figure 1. The dataset \"Vanilla\" is hidden and some segments are checked. Each time a segment is clicked an event is triggered. This event can be handled by overriding execValueClick on the chart. @Override protected void execValueClick(BigDecimal xIndex, BigDecimal yIndex, Integer datasetIndex) { System.out.println(\"Segment clicked\\n\" + \" - datasetIndex: \" + datasetIndex + \"\\n\" + \" - xIndex: \" + xIndex + \"\\n\" + \" - yIndex: \" + yIndex); } Even if some charts are rendered on a -element the colors can be changed via CSS. We add a custom grey color scheme for the bubble chart, which is rendered on a . To achieve this, we need to add a LESS file with the following content: @chart-grey-1: #191919; @chart-grey-2: #4C4C4C; @chart-grey-3: #737373; @chart-grey-4: #999999; @chart-grey-5: #BFBFBF; @chart-grey-6: #D8D8D8; .color-scheme-grey > .bubble-chart { & > .elements { > .label { fill: black; } > .grid { fill: lightslategrey; } > .tooltip-border { fill: black; } #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 20); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @opacity: 35, @additional-classes: ~\".hover\"); #scout.chart-auto-stroke-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".legend\"); } &.checkable > .elements { #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @additional-classes: ~\".checked\"); #scout.chart-auto-colors(@chart-grey-1, @chart-grey-2, @chart-grey-3, @chart-grey-4, @chart-grey-5, @chart-grey-6, @darken: 10, @additional-classes: ~\".hover.checked\"); } } This color scheme can now be used in a config object: BEANS.get(IChartConfig.class) .withType(IChartType.BUBBLE) .withColorScheme(() -> \"color-scheme-grey\"); Figure 2. A checkable bubble chart using the custom grey color scheme.","title":"How to Create a Chart","component":"scout-docs","version":"23.2","name":"chart-how-to","url":"/scout-docs/next/howtos/scout-classic/chart-how-to.html","titles":[{"text":"Prerequisites","hash":"prerequisites","id":1},{"text":"Minimal Code for a New Chart","hash":"minimal-code-for-a-new-chart","id":2},{"text":"Add data to the chart","hash":"add-data-to-the-chart","id":3},{"text":"Chart configuration","hash":"chart-configuration","id":4},{"text":"Events","hash":"events","id":5},{"text":"Change colors using CSS","hash":"change-colors-using-css","id":6}]},"171":{"id":171,"text":"A Scout Classic application is able to open a form implemented in Scout JS. This works via the JsForm, a Java form wrapping a form implemented in JS. The next few code snippets demonstrate how to use the JsForm. Listing 1. Example of a simple JsForm package example.client; import org.eclipse.scout.rt.client.ui.form.js.AbstractJsForm; public class ExampleJsForm extends AbstractJsForm { @Override protected String getConfiguredJsFormObjectType() { return \"example.ExampleJsForm\"; } } The form can be started handing over some input data in the form of an IDoEntity and the whole lifecycle (close, cancel, save, …​) of this form will be handled by Scout JS. If the form is saved the data of the Scout JS form will be available on to the Java form as output data. Listing 2. Use of a JsForm ExampleJsForm exampleJsForm = new ExampleJsForm(); exampleJsForm.setInputData(getExampleJsFormInputData()); exampleJsForm.start(); exampleJsForm.waitFor(); if (exampleJsForm.isFormStored()) { ExampleJsFormDo outputData = exampleJsForm.getOutputData(); // ... } The complete form and its business logic is implemented in JS in the same way a form is implemented in a Scout JS application. The only property that needs to be set in Java is the displayHint of the form. Listing 3. Implementation of the form in Scout JS import {Form, models, StringField} from '@eclipse-scout/core'; import ExampleJsFormModel from './ExampleJsFormModel'; export class ExampleJsForm extends Form { declare data: ExampleJsFormDo; exampleId: string; exampleField: StringField; constructor() { super(); this.exampleId = null; this.exampleField = null; } protected override _jsonModel(): FormModel { return models.get(ExampleJsFormModel); } protected override _init(model: InitModelOf) { super._init(model); this.exampleField = this.widget('ExampleField'); } override importData() { if (!this.data) { return; } this.exampleId = this.data.exampleId; this.exampleField.setValue(this.data.example); } override exportData(): ExampleJsFormDo { return { exampleId: this.exampleId, example: this.exampleField.value }; } } export type ExampleJsFormDo = { exampleId: string; example: string; };","title":"How to open a Scout JS form in a Scout Classic application","component":"scout-docs","version":"23.2","name":"js-form-how-to","url":"/scout-docs/next/howtos/scout-classic/js-form-how-to.html","titles":[]},"172":{"id":172,"text":"When a user selects a lookup-row from the proposal chooser in Scout versions ⇐ 6.0, the properties foregroundColor, backgroundColor, font and tooltipText have been automatically copied from the lookup-row to the field. In some cases this was exactly what a specific application needed, but in other cases it was hard to implement a specific behavior without overriding internal methods from the SmartField. For instance it was not possible to have a lookup-row with background-color red in the proposal-chooser and at the same time avoid the background-color of the field changing to red, when that row was being selected. Since that automatic behavior didn’t fit every business requirement, we removed it completely. This means a programmer must now implement specific code to read properties from the lookup-row and set them on the field. The following example is from the Scout widgets app. It changes the background-color of the field. Listing 1. Java example, set the background-color of the lookup-row on the field @Override protected void execChangedValue() { updateFieldBackgroundColor(); } /** * Sets the color of the field to the color of the selected lookup row. */ protected void updateFieldBackgroundColor() { ILookupRow lookupRow = getLookupRow(); String bgColor = lookupRow == null ? null : lookupRow.getBackgroundColor(); setBackgroundColor(bgColor); } Since Scout 8.0 the property cssClass from the lookup-row is automatically applied to the .form-field DIV. This gives the programmer the flexibility to style either both, lookup-row and field, or only the lookup-row in the proposal-chooser via CSS/LESS. Here’s a LESS example from the Scout widget app that sets the background-color of lookup-row and field. It is used for the EventTypeCodeType which defines 3 codes with the CSS classes public, private and external: Listing 2. LESS example, style lookup-row and field with the same CSS class .form-field.public > .field, .table-row.public { background-color: @palette-green-0; } .form-field.private > .field, .table-row.private { background-color: @palette-orange-1; } .form-field.external > .field, .table-row.external { background-color: @palette-gray-3; } Conclusion: older Scout apps that rely on the automatic behavior for the properties mentioned above, should use CSS classes instead of the properties back-/foregroundColor or font. If that’s not possible you should implement logic as shown in the example above where required, possibly moving that code in a class that extends AbstractSmartField, if the same code is required in multiple places.","title":"SmartField: How to Apply Colors and Styles From a Lookup Row","component":"scout-docs","version":"23.2","name":"smart-field-how-to","url":"/scout-docs/next/howtos/scout-classic/smart-field-how-to.html","titles":[]},"173":{"id":173,"text":"Exceptions can be logged via SLF4J Logger, or given to exception handler for centralized, consistent exception handling, or translated into other exceptions. Scout provides some few exceptions/errors, which are used by the framework. All scout throwables are unchecked and typically implementing the IThrowableWithContextInfo interface, which provides functionality for associating context information with the occurred error. Most scout throwables are runtime exceptions, and typically inherit from PlatformException. See Scout Runtime Exceptions for more information. Some scout throwables are instances of java.lang.Error by extending PlatformError. Those errors usually provide functionality to interrupt Jobs, for example when a user is canceling a long running operation. Note: PlatformErrors should never be catched by business logic! See Scout Runtime Errors for more information. Base runtime exception of the Scout platform, which allows for message formatting anchors and context information to be associated. There is a single constructor which accepts the exception’s message, and optionally a variable number of arguments. Typically, a potential cause is given as its argument. The message allows further the use of formatting anchors in the form of {} pairs. The respective formatting arguments are provided via the constructor’s varArg parameter. If the last argument is of the type Throwable and not referenced as formatting anchor in the message, that Throwable is used as the exception’s cause. Internally, SLF4J MessageFormatter is used to provide substitution functionality. Hence, The format is the very same as if using SLF4j Logger. Further, PlatformException allows to associate context information, which are available in SLF4J diagnostic context map (MDC) upon logging the exception. Listing 1. PlatformException examples Exception cause = new Exception(); // Create a PlatformException with a message new PlatformException(\"Failed to persist data\"); // Create a PlatformException with a message and cause new PlatformException(\"Failed to persist data\", cause); // Create a PlatformException with a message with formatting anchors new PlatformException(\"Failed to persist data [entity={}, id={}]\", \"person\", 123); // Create a PlatformException with a message containing formatting anchors and a cause new PlatformException(\"Failed to persist data [entity={}, id={}]\", \"person\", 123, cause); // Create a PlatformException with context information associated new PlatformException(\"Failed to persist data\", cause) .withContextInfo(\"entity\", \"person\") .withContextInfo(\"id\", 123); Represents a PlatformException and is thrown in case of a processing failure, and which can be associated with an exception error code and severity. Represents a ProcessingException with VETO character. If thrown server-side, exceptions of this type are transported to the client and typically visualized in the form of a message box. Represents a PlatformException and indicates an assertion error about the application’s assumptions about expected values. Represents a PlatformException and is thrown if a ServerRunContext requires a transaction to be available. Runtime Errors are used to indicate an error, that shouldn’t be catched/treated by business logic and therefore bubble up to the appropriate exception handler in the scout framework. Because those errors are handled by the framework internals, they should never be catched on the server (Services etc.) nor on the client side (Pages, Forms, etc.). All Scout Runtime Errors extend PlatformError. Like PlatformException, PlatformErrors implement IThrowableWithContextInfo for associating context information with the occurred error. See PlatformException for usage and example code. Represents a PlatformError and indicates that a thread was interrupted while waiting for some condition to become true, e.g. while waiting for a job to complete. Unlike java.lang.InterruptedException, the thread’s interrupted status is not cleared when catching this exception. Represents a PlatformError and indicates that the result of a job cannot be retrieved, or the IFuture’s completion not be awaited because the job was cancelled. Represents a PlatformError and indicates that the maximal wait time elapsed while waiting for some condition to become true, e.g. while waiting a job to complete. An exception handler is the central point for exception handling. It provides a single method 'handle' which accepts a Throwable, and which never throws an exception. It is implemented as a bean, meaning managed by the bean manager to allow easy replacement, e.g. to use a different handler when running client or server side. By default, a ProcessingException is logged according to its severity, a VetoException, ThreadInterruptedError or FutureCancelledError logged in DEBUG level, and any other exception logged as an ERROR. If running client side, exceptions are additionally visualized and showed to the user. Exception translators are used to translate an exception into another exception. Also, they unwrap the cause of wrapper exceptions, like UndeclaredThrowableException, or InvocationTargetException, or ExecutionException. If the exception is of the type Error, it is normally not translated, but re-thrown instead. That is because an Error indicates a serious problem due to an abnormal condition. Use this translator to work with checked exceptions and runtime exceptions, but not with Throwable. If given an Exception, or a RuntimeException, or if being a subclass thereof, that exception is returned as given. Otherwise, a PlatformException is returned which wraps the given Throwable. Use this translator to work with runtime exceptions. When working with RunContext] or IFuture, some methods optionally accept a translator. If not specified, this translator is used by default. If given a RuntimeException, it is returned as given. For a checked exception, a PlatformException is returned which wraps the given checked exception. Use this translator to work with PlatformExceptions. If given a PlatformException, it is returned as given. For all other exceptions (checked or unchecked), a PlatformException is returned which wraps the given exception. Typically, this translator is used if you require to add some context information via IThrowableWithContextInfo.withContextInfo(String, Object, Object). Listing 2. PlatformException examples try { // do something } catch (Exception e) { throw BEANS.get(PlatformExceptionTranslator.class).translate(e) .withContextInfo(\"cid\", \"12345\") .withContextInfo(\"user\", Subject.getSubject(AccessController.getContext())) .withContextInfo(\"job\", IFuture.CURRENT.get()); } Use this translator to work with Throwable as given. Also, if given a wrapped exception like UndeclaredThrowableException, InvocationTargetException or ExecutionException, that exception is returned as given without unwrapping its cause. For instance, this translator can be used if working with the Job API, e.g. to distinguish between a FutureCancelledError thrown by the job’s runnable, or because the job was effectively cancelled. The Scout framework logs via SLF4J (Simple Logging Facade for Java). It serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging or logback) allowing the end user to plug in the desired logging framework at deployment time. SLF4J allows the use of formatting anchors in the form of {} pairs in the message which will be replaced by the respective argument. If the last argument is of the type Throwable and not referenced as formatting anchor in the message, that Throwable is used as the exception. Listing 3. Logging examples Exception e = new Exception(); Logger logger = LoggerFactory.getLogger(getClass()); // Log a message logger.error(\"Failed to persist data\"); // Log a message with exception logger.error(\"Failed to persist data\", e); // Log a message with formatting anchors logger.error(\"Failed to persist data [entity={}, id={}]\", \"person\", 123); // Log a message and exception with a message containing formatting anchors logger.error(\"Failed to persist data [entity={}, id={}]\", \"person\", 123, e);","title":"Working with exceptions","component":"scout-docs","version":"23.2","name":"exception-handling","url":"/scout-docs/next/technical-guide/common-concepts/exception-handling.html","titles":[{"text":"Scout Throwables","hash":"scout-throwables","id":1},{"text":"Scout Runtime Exceptions","hash":"scout-runtime-exceptions","id":2},{"text":"PlatformException","hash":"platformexception","id":3},{"text":"ProcessingException","hash":"processingexception","id":4},{"text":"VetoException","hash":"vetoexception","id":5},{"text":"AssertionException","hash":"assertionexception","id":6},{"text":"TransactionRequiredException","hash":"transactionrequiredexception","id":7},{"text":"Scout Runtime Errors","hash":"scout-runtime-errors","id":8},{"text":"PlatformError","hash":"platformerror","id":9},{"text":"ThreadInterruptedError","hash":"threadinterruptederror","id":10},{"text":"FutureCancelledError","hash":"futurecancellederror","id":11},{"text":"TimedOutError","hash":"timedouterror","id":12},{"text":"Exception handling","hash":"exception-handling","id":13},{"text":"Exception translation","hash":"exception-translation","id":14},{"text":"DefaultExceptionTranslator","hash":"defaultexceptiontranslator","id":15},{"text":"DefaultRuntimeExceptionTranslator","hash":"default-runtime-exception-translator","id":16},{"text":"PlatformExceptionTranslator","hash":"platformexceptiontranslator","id":17},{"text":"NullExceptionTranslator","hash":"nullexceptiontranslator","id":18},{"text":"Exception Logging","hash":"exception-logging","id":19}]},"174":{"id":174,"text":"Scout provides a job manager based on Java Executors framework to run tasks in parallel, and on Quartz Trigger API to support for schedule plans and to compute firing times. A task (aka job) can be scheduled to commence execution either immediately upon being scheduled, or delayed some time in the future. A job can be single executing, or recurring based on some schedule plan. The job manager itself is implemented as an application scoped bean, meaning that it is a singleton which exists once in the web application. immediate, delayed or timed execution single (one-shot) or repetitive execution (based on Quartz schedule plans) listen for job lifecycle events wait for job completion job cancellation limitation of the maximal concurrently level among jobs RunContext based execution configurable thread pool size (core pool size, max pool size) association of job execution hints to select jobs (e.g. to cancel or await job’s completion) named jobs and threads to ease debugging A job is defined as some work to be executed asynchronously and is associated with a JobInput to describe how to run that work. The work is given to the job manager in the form of a Runnable or Callable. The only difference is, that a Runnable represents a 'fire-and-forget' action, meaning that the submitter of the job does not expect the job to return a result. On the other hand, a Callable returns the computation’s result, which the submitter can await for. Of course, a runnable’s completion can also be waited for. Listing 1. Work that does not return a result public class Work implements IRunnable { @Override public void run() throws Exception { // do some work } } Listing 2. Work that returns a computation result public class WorkWithResult implements Callable { @Override public String call() throws Exception { // do some work return \"result\"; } } Upon scheduling a job, the job manager returns a IFuture to interact with the job, e.g. to cancel its execution, or to await its completion. The job itself can also access its IFuture, namely via IFuture.CURRENT() ThreadLocal. Listing 3. Accessing the Future from within the job public class Job implements IRunnable { @Override public void run() throws Exception { IFuture myFuture = IFuture.CURRENT.get(); } } The job manager provides two scheduling methods, which only differ in the work they accept for execution (callable or runnable). IFuture schedule(IRunnable runnable, JobInput input); (1) IFuture schedule(Callable callable, JobInput input); (2) 1 Use to schedule a runnable which does not return a result to the submitter 2 Use to schedule a callable which does return a result to the submitter The second and mandatory argument to be provided is the JobInput, which tells the job manager how to run the job. Learn more about JobInput. The following snippet illustrates how a job is actually scheduled. Listing 4. Schedule a job IJobManager jobManager = BEANS.get(IJobManager.class); (1) (2) jobManager.schedule(() -> { // do something }, BEANS.get(JobInput.class)); (3) 1 Obtain the job manager via bean manager (application scoped bean) 2 Provide the work to be executed (either runnable or callable) 3 Provide the JobInput to instrument job execution This looks a little clumsy, which is why Scout provides you with the Jobs class to simplify dealing with the job manager, and to support you in the creation of job related artifacts like JobInput, filter builders and more. Most importantly, it allows to schedule jobs in a shorter and more readable form. Listing 5. Schedule a job via Jobs helper class Jobs.schedule(() -> { // do something }, Jobs.newInput()); The job input tells the job manager how to run the job. It further names the job to ease debugging, declares in which context to run the job, and how to deal with unhandled exceptions. The job input itself is a bean, useful if adding some additional features to the job manager. The API of JobInput supports for method chaining for reduced and more solid code. Listing 6. Schedule a job and control execution via JobInput Jobs.schedule(() -> { // do something }, Jobs.newInput() .withName(\"job name\") (1) .withRunContext(ClientRunContexts.copyCurrent()) (2) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(10, TimeUnit.SECONDS) (3) .withSchedule(FixedDelayScheduleBuilder.repeatForever(5, TimeUnit.SECONDS))) (4) .withExceptionHandling(new ExceptionHandler() { (5) @Override public void handle(Throwable t) { System.err.println(t); } }, true)); This snippet instructs the job manager to run the job as following: 1 Give the job a name. 2 Run the job in the current calling context, meaning in the very same context as the submitter is running when giving this job to the job manager. By copying the current context, the job will also be cancelled upon cancellation of the current RunContext. 3 Commence execution in 10 seconds (delayed execution). 4 Execute the job repeatedly, with a delay of 5 seconds between the termination of one and the commencement of the next execution. Also, repeat the job infinitely, until being cancelled. 5 Print any uncaught exception to the error console, and do not propagate the exception to the submitter, nor cancel the job upon an uncaught exception. The following paragraphs describe the functionality of JobInput in more detail. To optionally specify the name of the job, which is used to name the worker thread (only in development environment) and for logging purpose. Optionally, formatting anchors in the form of {} pairs can be used in the name, which will be replaced by the respective argument. Jobs.newInput() .withName(\"Sending emails [from={}, to={}]\", \"frank\", \"john@eclipse.org, jack@eclipse.org\"); To optionally specify the RunContext to be installed during job execution. The RunMonitor associated with the RunContext will be used as the job’s monitor, meaning that cancellation requests to the job future or the context’s monitor are equivalent. If no context is given, the job manager ensures a monitor to be installed, so that executing code can always query its cancellation status via RunMonitor.CURRENT.get().isCancelled(). To optionally set the trigger to define the schedule upon which the job will commence execution. If not set, the job will commence execution immediately after being scheduled, and will execute exactly once. The trigger mechanism is provided by Quartz Scheduler, meaning that you can profit from the powerful Quartz schedule capabilities. For more information, see http://www.quartz-scheduler.org. Use the static factory method Jobs.newExecutionTrigger() to get an instance: // Schedules a delayed single executing job Jobs.newInput() .withName(\"job\") .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(10, TimeUnit.SECONDS)); // Schedules a repeatedly running job at a fixed rate (every hour), which ends in 24 hours Jobs.newInput() .withName(\"job\") .withExecutionTrigger(Jobs.newExecutionTrigger() .withEndIn(1, TimeUnit.DAYS) .withSchedule(SimpleScheduleBuilder.repeatHourlyForever())); // Schedules a job which runs at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday Jobs.newInput() .withName(\"job\") .withExecutionTrigger(Jobs.newExecutionTrigger() .withSchedule(CronScheduleBuilder.cronSchedule(\"0 15 10 ? * MON-FRI\"))); Learn more about ExecutionTrigger. To optionally control the maximal concurrently level among jobs assigned to the same semaphore. With a semaphore in place, this job only commences execution, once a permit is free or gets available. If free, the job commences execution immediately at the next reasonable opportunity, unless no worker thread is available. A semaphore initialized to one allows to run jobs in a mutually exclusive manner, and a semaphore initialized to zero to run no job at all. The number of total permits available can be changed at any time, which allows to adapt the maximal concurrency level to some dynamic criteria like time of day or system load. However, a semaphore can be sealed, meaning that the number of permits cannot be changed anymore, and any attempts will be rejected. A new semaphore instance can be obtained via Jobs class. IExecutionSemaphore semaphore = Jobs.newExecutionSemaphore(5); (1) for (int i = 0; i { // doing something }, Jobs.newInput() .withName(\"job-{}\", i) .withExecutionSemaphore(semaphore)); (3) } 1 Create a new ExecutionSemaphore via Jobs class. The semaphore is initialized with 5 permits, meaning that at any given time, there are no more than 5 jobs running concurrently. 2 Schedule 100 jobs in a row. 3 Set the semaphore to limit the maximal concurrency level to 5 jobs. Learn more about ExecutionSemaphore. To associate the job with an execution hint. An execution hint is simply a marker to mark a job, and can be evaluated by filters to select jobs, e.g. to listen to job lifecycle events of some particular jobs, or to wait for some particular jobs to complete, or to cancel some particular jobs. A job may have multiple hints associated. Further, hints can be registered directly on the future via IFuture.addExecutionHint(hint), or removed via IFuture.removeExecutionHint(hint). To control how to deal with uncaught exceptions. By default, an uncaught exception is handled by ExceptionHandler bean and then propagated to the submitter, unless the submitter is not waiting for the job to complete via IFuture.awaitDoneAndGet(). This method expects two arguments: an optional exception handler, and a boolean flag indicating whether to swallow exceptions. 'Swallow' is independent of the specified exception handler, and indicates whether an exception should be propagated to the submitter, or swallowed otherwise. If running a repetitive job with swallowing set to true, the job will continue its repetitive execution upon an uncaught exception. If set to false, the execution would exit. To set the thread name of the worker thread that will execute the job. To set the maximal expiration time upon which the job must commence execution. If elapsed, the job is cancelled and does not commence execution. By default, a job never expires. For a job that executes once, the expiration is evaluated just before it commences execution. For a job with a repeating schedule, it is evaluated before every single execution. In contrast, the trigger’s end time specifies the time at which the trigger will no longer fire. However, if fired, the job may not be executed immediately at this time, which depends on whether having to compete for an execution permit first. So the end time may already have elapsed once commencing execution. In contrast, the expiration time is evaluated just before starting execution. A future represents the result of an asynchronous computation, and is returned by the job manager upon scheduling a job. The future provides functionality to await for the job to complete, or to get its computation result or exception, or to cancel its execution, and more. Learn more about job cancellation in Job cancellation. Learn more about listening for job lifecycle events in Subscribe for job lifecycle events. Learn more about awaiting the job’s completion in Awaiting job completion. Upon scheduling a job, the job transitions different states. The current state of a job can be queried from its associated IFuture. state description SCHEDULED Indicates that a job was given to the job manager for execution. REJECTED Indicates that a job was rejected for execution. This might happen if the job manager has been shutdown, or if no more worker threads are available. PENDING Indicates that a job’s execution is pending, either because scheduled with a delay, or because of being a repetitive job while waiting for the commencement of the next execution. RUNNING Indicates that a job is running. DONE Indicates that a job finished execution, either normally or because it was cancelled. Use IFuture.isCancelled() to check for cancellation. WAITING_FOR_PERMIT Indicates that a semaphore aware job is competing for a permit to become available. WAITING_FOR_BLOCKING_CONDITION Indicates that a job is blocked by a blocking condition, and is waiting for it to fall. The state 'done' does not necessarily imply that the job already finished execution. That is because a job also enters 'done' state upon cancellation, but may still continue execution. A future filter is a filter which can be passed to various methods of the job manager to select some futures. The filter must implement IFilter interface, and has a single method to accept futures of interest. Listing 7. Example of a future filter public class FutureFilter implements Predicate> { @Override public boolean test(IFuture future) { // Accept or reject the future return false; } } Scout provides you with FutureFilterBuilder class to ease building filters which match multiple criteria joined by logical 'AND' operation. Listing 8. Usage of FutureFilterBuilder Predicate> filter = Jobs.newFutureFilterBuilder() (1) .andMatchExecutionHint(\"computation\") (2) .andMatchNotState(JobState.PENDING) (3) .andAreSingleExecuting() (4) .andMatchNotFuture(IFuture.CURRENT.get()) (5) .andMatchRunContext(ClientRunContext.class) (6) .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) (7) .toFilter(); (8) 1 Returns an instance of the future filter builder 2 Specifies to match only futures associated with execution hint 'computation' 3 Specifies to match only jobs not in state pending 4 Specifies to match only single executing jobs, meaning no recurring jobs 5 Specifies to exclude the current future (if any) 6 Specifies to match only jobs running on behalf of a ClientRunContext 7 Specifies to match only jobs of the current session 8 Builds the filters to get a Filter instance Fore more information, refer to the JavaDoc of FutureFilterBuilder. A job event filter is a filter which can be given to job manager to subscribe for job lifecycle events. The filter must implement IFilter interface, and has a single method to accept events of interest. Listing 9. Example of an event filter public class EventFilter implements Predicate { @Override public boolean test(JobEvent event) { // Accept or reject the event return false; } } Scout provides you with JobEventFilterBuilder class to ease building filters which match multiple criteria joined by logical 'AND' operation. Listing 10. Usage of JobEventFilterBuilder Predicate filter = Jobs.newEventFilterBuilder() (1) .andMatchEventType(JobEventType.JOB_STATE_CHANGED) (2) .andMatchState(JobState.RUNNING) (3) .andMatch(new SessionJobEventFilter(ISession.CURRENT.get())) (4) .andMatchExecutionHint(\"computation\") (5) .toFilter(); (6) 1 Returns an instance of the job event filter builder 2 Specifies to match all events representing a job state change 3 Specifies to match only events for jobs which transitioned into running state 4 Specifies to match only events for jobs of the current session 5 Specifies to match only events for jobs which are associated with the execution hint 'computation' 6 Builds the filters to get a Filter instance Fore more information, refer to the JavaDoc of JobEventFilterBuilder. A job can be cancelled in two ways, either directly via its IFuture, or via job manager. Both expect you to provide a boolean flag indicating whether to interrupt the executing working thread. Upon cancellation, the job immediately enters 'done' state. Learn more about Job states. If cancelling via job manager, a future filter must be given to select the jobs to be cancelled. Learn more about Future filter The cancellation attempt will be ignored if the job has already completed or was cancelled. If not running yet, the job will never run. If the job has already started, then the interruptIfRunning parameter determines whether the thread executing the job should be interrupted in an attempt to stop the job. In the following some examples: Listing 11. Cancel a job via its future // Schedule a job IFuture future = Jobs.schedule(new Work(), Jobs.newInput()); // Cancel the job via its future future.cancel(false); Listing 12. Cancel multiple jobs via job manager Jobs.getJobManager().cancel(Jobs.newFutureFilterBuilder() .andMatchFuture(future1, future2, future3) .toFilter(), false); Listing 13. Cancel multiple jobs which match a specific execution hint and the current session Jobs.getJobManager().cancel(Jobs.newFutureFilterBuilder() .andMatchExecutionHint(\"computation\") .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), false); A job can query its current cancellation status via RunMonitor.CURRENT.get().isCancelled(). If doing some long-running operations, it is recommended for the job to regularly check for cancellation. A job which is scheduled to run on a copy of the submitting RunContext, it gets also cancelled once the RunMonitor of that context gets cancelled. Sometimes it is useful to register for some job lifecycle events. The following event types can be subscribed for: state description JOB_STATE_CHANGED Signals that a job transitioned to a new JobState, e.g. form JobState.SCHEDULED to JobState.RUNNING. JOB_EXECUTION_HINT_ADDED Signals that an execution hint was added to a job. JOB_EXECUTION_HINT_REMOVED Signals that an execution hint was removed from a job. JOB_MANAGER_SHUTDOWN Signals that the job manager was shutdown. The listener is registered via job manager as following: Listing 14. Subscribe for global job events Jobs.getJobManager().addListener(Jobs.newEventFilterBuilder() (1) .andMatchEventType(JobEventType.JOB_STATE_CHANGED) .andMatchState(JobState.RUNNING) .andMatch(new SessionJobEventFilter(ISession.CURRENT.get())) .toFilter(), event -> { IFuture future = event.getData().getFuture(); (2) System.out.println(\"Job commences execution: \" + future.getJobInput().getName()); }); 1 Subscribe for all events related to jobs just about to commence execution, and which belong to the current session 2 Get the future this event was fired for If interested in only events of a single future, the listener can be registered directly on the future. Listing 15. Subscribe for local job events future.addListener(Jobs.newEventFilterBuilder() .andMatchEventType(JobEventType.JOB_STATE_CHANGED) .andMatchState(JobState.RUNNING) .toFilter(), event -> System.out.println(\"Job commences execution\")); A job’s completion can be either awaited on its IFuture, or via job manager - the first optionally allows to consume the job’s computation result, whereas the second allows multiple futures to be awaited for. When awaiting futures, the definition of 'done' and 'finished' state should be understood - 'done' means that the future completed either normally, or was cancelled. But, if cancelled while running, the job may still continue its execution, whereas a job which not commenced execution yet, will never do so. The latter typically applies for jobs scheduled with a delay. However, 'finished' state differs from 'done' state insofar as a cancelled, currently running job enters 'finished' state only upon its actual completion. Otherwise, if not cancelled, or cancelled before executing, it is equivalent to 'done' state. In most situations, it is sufficient to await for the future’s done state, especially because a cancelled job cannot return a result to the submitter anyway. Besides of some overloaded methods, IFuture basically provides two methods to wait for a future to enter 'done' state, namely awaitDone and awaitDoneAndGet, with the difference that the latter additionally returns the job’s result or exception. If the future is already done, those methods will return immediately. For both methods, there exists an overloaded version to wait for at most a given time, which once elapsed results in a TimedOutError thrown. Further, awaitDoneAndGet allows to specify an IExceptionTranslator to control exception translation. By default, DefaultRuntimeExceptionTranslator is used, meaning that a RuntimeException is propagated as it is, whereas a checked exception would be wrapped into a PlatformException. If you require checked exceptions to be thrown as they are, use DefaultExceptionTranslator instead, or even NullExceptionTranslator to work with the raw ExecutionException as being thrown by Java Executor framework. Listing 16. Examples of how to await done state on a future IFuture future = Jobs.schedule(() -> { // doing something return \"computation result\"; }, Jobs.newInput()); // Wait until done without consuming the result future.awaitDone(); (1) future.awaitDone(10, TimeUnit.SECONDS); (2) // Wait until done and consume the result String result = future.awaitDoneAndGet(); (3) result = future.awaitDoneAndGet(10, TimeUnit.SECONDS); (4) // Wait until done, consume the result, and use a specific exception translator result = future.awaitDoneAndGet(DefaultExceptionTranslator.class); (5) result = future.awaitDoneAndGet(10, TimeUnit.SECONDS, DefaultExceptionTranslator.class); (6) 1 Waits if necessary for the job to complete, or until cancelled. This method does not throw an exception if cancelled or the computation failed, but throws ThreadInterruptedError if the current thread was interrupted while waiting. 2 Waits if necessary for at most 10 seconds for the job to complete, or until cancelled, or the timeout elapses. This method does not throw an exception if cancelled, or the computation failed, but throws TimedOutError if waiting timeout elapsed, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 3 Waits if necessary for the job to complete, and then returns its result, if available, or throws its exception according to DefaultRuntimeExceptionTranslator, or throws FutureCancelledError if cancelled, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 4 Waits if necessary for at most 10 seconds for the job to complete, and then returns its result, if available, or throws its exception according to DefaultRuntimeExceptionTranslator, or throws FutureCancelledError if cancelled, or throws TimedOutError if waiting timeout elapsed, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 5 Waits if necessary for the job to complete, and then returns its result, if available, or throws its exception according to the given DefaultExceptionTranslator, or throws FutureCancelledError if cancelled, or throws ThreadInterruptedError if the current thread was interrupted while waiting. 6 Waits if necessary for at most the given time for the job to complete, and then returns its result, if available, or throws its exception according to the given DefaultExceptionTranslator, or throws FutureCancelledError if cancelled, or throws TimedOutError if waiting timeout elapsed, or throws ThreadInterruptedError if the current thread was interrupted while waiting. It is further possible to await asynchronously on a future to enter done state by registering a callback via whenDone method. The advantage over registering a listener is that the callback is invoked even if the future already entered done state upon registration. Listing 17. Example of when-done callback future.whenDone(event -> { // invoked upon entering done state. }, ClientRunContexts.copyCurrent()); Because invoked in another thread, this method optionally accepts a RunContext] to be applied when being invoked. Use the method awaitFinished to wait for the job to finish, meaning that the job either completed normally or by an exception, or that it will never commence execution due to a premature cancellation. To learn more about the difference between 'done' and 'finished' state, click here. Please note that this method does not return the job’s result, because by Java Future definition, a cancelled job cannot provide a result. Listing 18. Examples of how to await finished state on a future IFuture future = Jobs.schedule(() -> { // doing something return \"computation result\"; }, Jobs.newInput()); // Wait until finished future.awaitFinished(10, TimeUnit.SECONDS); Job Manager allows to await for multiple futures at once. The filter to be provided limits the futures to await for. This method requires you to provide a maximal time to wait. Filters can be plugged by using logical filters like AndFilter or OrFilter, or negated by enclosing a filter in NotFilter. Also see Future filter to create a filter to match multiple criteria joined by logical 'AND' operation. Listing 19. Examples of how to await done state of multiple futures // Wait for some futures Jobs.getJobManager().awaitDone(Jobs.newFutureFilterBuilder() (1) .andMatchFuture(future1, future2, future3) .toFilter(), 1, TimeUnit.MINUTES); // Wait for all futures marked as 'reporting' jobs of the current session Jobs.getJobManager().awaitDone(Jobs.newFutureFilterBuilder() (2) .andMatchExecutionHint(\"reporting\") .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), 1, TimeUnit.MINUTES); 1 Waits if necessary for at most 1 minute for all three futures to complete, or until cancelled, or the timeout elapses. 2 Waits if necessary for at most 1 minute until all jobs marked as 'reporting' jobs of the current session complete, or until cancelled, or the timeout elapses. Use the method awaitFinished to wait for multiple jobs to finish, meaning that the jobs either completed normally or by an exception, or that they will never commence execution due to a premature cancellation. To learn more about the difference between 'done' and 'finished' state, click here. Listing 20. Examples of how to await finish state of multiple futures // Wait for some futures Jobs.getJobManager().awaitFinished(Jobs.newFutureFilterBuilder() (1) .andMatchFuture(future1, future2, future3) .toFilter(), 1, TimeUnit.MINUTES); // Wait for all futures marked as 'reporting' jobs of the current session Jobs.getJobManager().awaitFinished(Jobs.newFutureFilterBuilder() (2) .andMatchExecutionHint(\"reporting\") .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), 1, TimeUnit.MINUTES); 1 Waits if necessary for at most 1 minute for all three futures to finish, or until cancelled, or the timeout elapses. 2 Waits if necessary for at most 1 minute until all jobs marked as 'reporting' jobs of the current session finish, or until cancelled, or the timeout elapses. If a job throws an exception, that exception is handled by ExceptionHandler, and propagated to the submitter. However, the exception is only propagated if having a waiting submitter. Also, an uncaught exception causes repetitive jobs to terminate. This default behavior as described can be changed via JobInput.withExceptionHandling(..). A blocking condition allows a thread to wait for a condition to become true. That is similar to the Java Object’s 'wait/notify' mechanism, but with some additional functionality regarding semaphore aware jobs. If a semaphore aware job enters a blocking condition, it releases ownership of the permit, which allows another job of that same semaphore to commence execution. Upon the condition becomes true, the job then must compete for a permit anew. A condition can be used across multiple threads to wait for the same condition. Also, a condition is reusable upon invalidation. And finally, a condition can be used even if not running within a job. A blocking condition is often used by model jobs to wait for something to happen, but to allow another model job to run while waiting. A typical use case would be to wait for a MessageBox to be closed. You are running in a semaphore aware job and require to do some long-running operation. During that time you do not require to be the permit owner. A simple but wrong approach would be the following: // Schedule a long running operation. IFuture future = Jobs.schedule(new LongRunningOperation(), Jobs.newInput()); // Wait until done. future.awaitDone(); The problem with this approach is, that you still are the permit owner while waiting, meaning that you possibly prevent other jobs from running. Instead, you could use a blocking condition for that to achieve: // Create a blocking condition. final IBlockingCondition operationCompleted = Jobs.newBlockingCondition(true); // Schedule a long running operation. IFuture future = Jobs.schedule(new LongRunningOperation(), Jobs.newInput()); // Register done callback to unblock the condition. future.whenDone(event -> { // Let the waiting job re-acquire a permit and continue execution. operationCompleted.setBlocking(false); }, null); // Wait until done. Thereby, the permit of the current job is released for the time while waiting. operationCompleted.waitFor(); Represents a fair counting semaphore used in Job API to control the maximal number of jobs running concurrently. Jobs which are assigned to the same semaphore run concurrently until they reach the maximal concurrency level defined for that semaphore. Subsequent tasks then wait in the queue until a permit becomes available. A semaphore initialized to one allows to run jobs in a mutually exclusive manner, and a semaphore initialized to zero to run no job at all. The number of total permits available can be changed at any time, which allows to adapt the maximal concurrency level to some dynamic criteria like time of day or system load. However, once calling seal(), the number of permits cannot be changed anymore, and any attempts will result in an AssertionException. By default, a semaphore is unbounded. Component that defines the schedule upon which a job will commence execution. A trigger can be as simple as a 'one-shot' execution at some specific point in time in the future, or represent a schedule which executes a job on a repeated basis. The latter can be configured to run infinitely, or to end at a specific point in time. It is further possible to define rather complex triggers, like to execute a job every second Friday at noon, but with the exclusion of all the business’s holidays. See the various schedule builders provided by Quartz Scheduler: SimpleScheduleBuilder, CronScheduleBuilder, CalendarIntervalScheduleBuilder, DailyTimeIntervalScheduleBuilder. The most powerful builder is CronScheduleBuilder. Cron is a UNIX tool with powerful and proven scheduling capabilities. For more information, see http://www.quartz-scheduler.org. Additionally, Scout provides you with FixedDelayScheduleBuilder to run a job with a fixed delay between the termination of one execution and the commencement of the next execution. Use the static factory method 'Jobs.newExecutionTrigger()' to get an instance. Regardless of the schedule used, job manager guarantees no concurrent execution of the same job. That may happen, if using a repeated schedule with the job not terminated its last execution yet, but the schedule’s trigger would like to fire for the next execution already. Such a situation is called a misfiring. The action to be taken upon a misfiring is configurable via the schedule’s misfiring policy. A policy can be to run the job immediately upon termination of the previous execution, or to just ignore that missed firing. See the JavaDoc of the schedule for more information. Upon stopping the platform, the job manager will also be shutdown.If having a IPlatformListener to perform some cleanup work, and which requires the job manager to be still functional, that listener must be annotated with an @Order less than IJobManager.DESTROY_ORDER, which is 5'900. If not specifying an @Order explicitly, the listener will have the default order of 5, meaning being invoked before job manager shutdown anyway. Model jobs exist client side only, and are used to interact with the Scout client model to read and write model values in a serial manner per session.That enables no synchronization to be used when interacting with the model. By definition, a model job requires to be run on behalf of a ClientRunContext with a IClientSession set, and must have the session’s model job semaphore set as its ExecutionSemaphore.That causes all such jobs to be run in sequence in the model thread.At any given time, there is only one model thread active per client session. The class ModelJobs is a helper class, and is for convenience purpose to facilitate the creation of model job related artifacts, and to schedule model jobs. Listing 21. Running work in model thread (1) ModelJobs.schedule(() -> { // doing something in model thread }, ModelJobs.newInput(ClientRunContexts.copyCurrent()) (2) .withName(\"Doing something in model thread\")); 1 Schedules the work to be executed in the model thread 2 Creates the JobInput to become a model job, meaning with the session’s model job semaphore set For model jobs, it is also allowed to run according to a Quartz schedule plan, or to be executed with a delay. Then the model permit is acquired just before each execution, and not upon being scheduled. Furthermore, the class ModelJobs provides some useful static methods: // Returns true if the current thread represents the model thread for the current client session. At any given time, there is only one model thread active per client session. ModelJobs.isModelThread(); // Returns true if the given Future belongs to a model job. ModelJobs.isModelJob(IFuture.CURRENT.get()); // Returns a builder to create a filter for future objects representing a model job. ModelJobs.newFutureFilterBuilder(); // Returns a builder to create a filter for JobEvent objects originating from model jobs. ModelJobs.newEventFilterBuilder(); // Instructs the job manager that the current model job is willing to temporarily yield its current model job permit. It is rarely appropriate to use this method. It may be useful for debugging or testing purposes. ModelJobs.yield(); Job manager can be configured with properties starting with scout.jobmanager. See Scout Config Properties. Job manager is implemented as an application scoped bean, and which can be replaced. To do so, create a class which extends JobManager, and annotate it with @Replace annotation. Most likely, you like to use the EE container’s ThreadPoolExecutor, or to contribute some behavior to the callable chain which finally executes the job. To change the executor, overwrite createExecutor method and return the executor of your choice. But do not forget to register a rejection handler to reject futures upon rejection. Also, overwrite shutdownExecutor to not shut down the container’s executor. To contribute some behavior to the callable chain, overwrite the method interceptCallableChain and contribute your decorator or interceptor. Refer to the method’s JavaDoc for more information. This sections contains some common scheduling examples. Listing 22. Schedule a one-shot job Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running once\") .withRunContext(ClientRunContexts.copyCurrent())); Listing 23. Schedule a job with a delay Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running in 10 seconds\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(10, TimeUnit.SECONDS))); // delay of 10 seconds Listing 24. Schedule a repetitive job at a fixed rate Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running every minute\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(SimpleScheduleBuilder.simpleSchedule() (2) .withIntervalInMinutes(1) (3) .repeatForever()))); (4) 1 Configure to fire in 1 minute for the first time 2 Use Quartz simple schedule to achieve fixed-rate execution 3 Repetitively fire every minute 4 Repeat forever Listing 25. Schedule a repetitive job which runs 60 times at every minute Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running every minute for total 60 times\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(SimpleScheduleBuilder.simpleSchedule() (2) .withIntervalInMinutes(1) (3) .withRepeatCount(59)))); (4) 1 Configure to fire in 1 minute for the first time 2 Use Quartz simple schedule to achieve fixed-rate execution 3 Repetitively fire every minute 4 Repeat 59 times, plus the initial execution Listing 26. Schedule a repetitive job at a fixed delay Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running forever with a delay of 1 minute between the termination of the previous and the next execution\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(FixedDelayScheduleBuilder.repeatForever(1, TimeUnit.MINUTES)))); (2) 1 Configure to fire in 1 minute for the first time 2 Use fixed delay schedule Listing 27. Schedule a repetitive job which runs 60 times, but waits 1 minute between the termination of the previous and the commencement of the next execution Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running 60 times with a delay of 1 minute between the termination of the previous and the next execution\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withStartIn(1, TimeUnit.MINUTES) (1) .withSchedule(FixedDelayScheduleBuilder.repeatForTotalCount(60, 1, TimeUnit.MINUTES)))); (2) 1 Configure to fire in 1 minute for the first time 2 Use fixed delay schedule Listing 28. Running at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withSchedule(CronScheduleBuilder.cronSchedule(\"0 15 10 ? * MON-FRI\")))); (1) 1 Cron format: [second] [minute] [hour] [day_of_month] [month] [day_of_week] [year]? Listing 29. Running every minute starting at 14:00 and ending at 14:05, every day Jobs.schedule(() -> { // doing something }, Jobs.newInput() .withName(\"Running every minute starting at 14:00 and ending at 14:05, every day\") .withRunContext(ClientRunContexts.copyCurrent()) .withExecutionTrigger(Jobs.newExecutionTrigger() .withSchedule(CronScheduleBuilder.cronSchedule(\"0 0-5 14 * * ?\")))); (1) 1 Cron format: [second] [minute] [hour] [day_of_month] [month] [day_of_week] [year]? Listing 30. Limit the maximal concurrency level among jobs IExecutionSemaphore semaphore = Jobs.newExecutionSemaphore(5); (1) for (int i = 0; i { // doing something }, Jobs.newInput() .withName(\"job-{}\", i) .withExecutionSemaphore(semaphore)); (2) } 1 Create the execution semaphore initialized with 5 permits 2 Set the execution semaphore to the job subject for limited concurrency Listing 31. Cancel all jobs of the current session Jobs.getJobManager().cancel(Jobs.newFutureFilterBuilder() .andMatch(new SessionFutureFilter(ISession.CURRENT.get())) .toFilter(), true); Listing 32. Query for cancellation public class CancellableWork implements IRunnable { @Override public void run() throws Exception { // do first chunk of operations if (RunMonitor.CURRENT.get().isCancelled()) { return; } // do next chunk of operations if (RunMonitor.CURRENT.get().isCancelled()) { return; } // do next chunk of operations } } Listing 33. Release current semaphore permit while executing // Create a blocking condition. final IBlockingCondition operationCompleted = Jobs.newBlockingCondition(true); // Schedule a long running operation. IFuture future = Jobs.schedule(new LongRunningOperation(), Jobs.newInput()); // Register done callback to unblock the condition. future.whenDone(event -> { // Let the waiting job re-acquire a permit and continue execution. operationCompleted.setBlocking(false); }, null); // Wait until done. Thereby, the permit of the current job is released for the time while waiting. operationCompleted.waitFor();","title":"JobManager","component":"scout-docs","version":"23.2","name":"job-manager","url":"/scout-docs/next/technical-guide/common-concepts/job-manager.html","titles":[{"text":"Functionality","hash":"functionality","id":1},{"text":"Job","hash":"job","id":2},{"text":"Scheduling a Job","hash":"scheduling-a-job","id":3},{"text":"JobInput","hash":"jobinput","id":4},{"text":"JobInput.withName","hash":"jobinput-withname","id":5},{"text":"JobInput.withRunContext","hash":"jobinput-withruncontext","id":6},{"text":"JobInput.withExecutionTrigger","hash":"jobinput-withexecutiontrigger","id":7},{"text":"JobInput.withExecutionSemaphore","hash":"jobinput-withexecutionsemaphore","id":8},{"text":"JobInput.withExecutionHint","hash":"jobinput-withexecutionhint","id":9},{"text":"JobInput.withExceptionHandling","hash":"jobinput-withexceptionhandling","id":10},{"text":"JobInput.withThreadName","hash":"jobinput-withthreadname","id":11},{"text":"JobInput.withExpirationTime","hash":"jobinput-withexpirationtime","id":12},{"text":"IFuture","hash":"ifuture","id":13},{"text":"Job states","hash":"job-states","id":14},{"text":"Future filter","hash":"future-filter","id":15},{"text":"Event filter","hash":"event-filter","id":16},{"text":"Job cancellation","hash":"job-cancellation","id":17},{"text":"Subscribe for job lifecycle events","hash":"subscribe-for-job-lifecycle-events","id":18},{"text":"Awaiting job completion","hash":"awaiting-job-completion","id":19},{"text":"Difference between 'done' and 'finished' state","hash":"difference-between-done-and-finished-state","id":20},{"text":"Awaiting a single future’s 'done' state","hash":"awaiting-a-single-futures-done-state","id":21},{"text":"Awaiting a single future’s 'finished' state","hash":"awaiting-a-single-futures-finished-state","id":22},{"text":"Awaiting multiple future’s 'done' state","hash":"awaiting-multiple-futures-done-state","id":23},{"text":"Awaiting multiple future’s 'finished' state","hash":"awaiting-multiple-futures-finished-state","id":24},{"text":"Uncaught job exceptions","hash":"uncaught-job-exceptions","id":25},{"text":"Blocking condition","hash":"blocking-condition","id":26},{"text":"Example of a blocking condition","hash":"example-of-a-blocking-condition","id":27},{"text":"ExecutionSemaphore","hash":"executionsemaphore","id":28},{"text":"ExecutionTrigger","hash":"executiontrigger","id":29},{"text":"Misfiring","hash":"misfiring","id":30},{"text":"Stopping the platform","hash":"stopping-the-platform","id":31},{"text":"Model Jobs","hash":"model-jobs","id":32},{"text":"Configuration","hash":"configuration","id":33},{"text":"Extending job manager","hash":"extending-job-manager","id":34},{"text":"Scheduling examples","hash":"scheduling-examples","id":35}]},"175":{"id":175,"text":"Scout contains a platform which provides basic functionality required by many software applications. The following list gives some examples for which tasks the platform is responsible for: Application Lifecycle Management Object Instance Management (Bean Management) Configuration Management Application Inventory The lifecycle of a Scout application is controlled by implementations of org.eclipse.scout.rt.platform.IPlatform. This interface contains methods to start and stop the application and to retrieve the Bean Manager associated with this application. The class org.eclipse.scout.rt.platform.Platform provides access to the current platform instance. On first access the platform is automatically created and started. During its startup, the platform transitions through several states. Depending on the state of the platform some components may already be initialized and ready to use while others are not available yet. See enum org.eclipse.scout.rt.platform.IPlatform.State for a description of each state and what may be used in a certain state. To participate in the application startup or shutdown a platform listener can be created. For this a class implementing org.eclipse.scout.rt.platform.IPlatformListener must be created. The listener is automatically a bean and must therefore not be registered anywhere. See Bean Manager to learn more about bean management in Scout and how the listener becomes a bean. As soon as the state of the platform changes the listener will be notified. Listing 1. A listener that will do some work as soon as the platform has been started. public class MyListener implements IPlatformListener { @Override public void stateChanged(PlatformEvent event) { if (event.getState() == State.PlatformStarted) { // do some work as soon as the platform has been started completely } } } As platform listeners may run as part of the startup or shutdown not the full Scout platform may be available. Depending on the state some tasks cannot be performed or some platform models are not available yet! Scout applications use an inventory containing the classes available together with some meta data about them. This allows finding classes available on the classpath by certain criteria: All subclasses of a certain base class (also known as type hierarchy) All classes having a specific annotation. This class inventory can be accessed as described in listing Listing 2. Listing 2. Access the Scout class inventory. IClassInventory classInventory = ClassInventory.get(); // get all classes below IService Set services = classInventory.getAllKnownSubClasses(IService.class); // get all classes having a Bean annotation (directly on them self). Set classesHavingBeanAnnot = classInventory.getKnownAnnotatedTypes(Bean.class); In its static initializer, the ClassInventory collects classes in projects containing a resource called META-INF/scout.xml. Scanning all classes would be unnecessarily slow and consume too much memory. The file scout.xml is just an empty xml file. Scout itself also includes scout.xml files in all its projects. The format XML was chosen to allow adding exclusions in large projects, but this feature is not implemented right now. It is recommended to add an emtpy scout.xml file into the META-INF folder of your projects, such that the classes are available in the 'ClassInventory'. Scout uses Jandex [1] to build the class inventory. The meta data to find classes can be pre-computed during build time into an index file describing the contents of the jar file. See the jandex project for details. The Scout bean manager is a dynamic registry for beans. Beans are normal Java classes usually having some meta data describing the characteristics of the class. The bean manager can be changed at any time. This means beans can be registered or unregistered while the application is running. For this the bean manager contains methods to register and unregister beans. Furthermore methods to retrieve beans are provided. The next sections describe how beans are registered, the different meta data of beans, how instances are created, how they can be retrieved and finally how the bean decoration works. Usually beans are registered during application startup. The application startup can be intercepted using platform listeners as described in Platform Listener. Listing 3. A listener that registers a bean (direct class or with meta data). public class RegisterBeansListener implements IPlatformListener { @Override public void stateChanged(PlatformEvent event) { if (event.getState() == State.BeanManagerPrepared) { // register the class directly BEANS.getBeanManager().registerClass(BeanSingletonClass.class); // Or register with meta information BeanMetaData beanData = new BeanMetaData(BeanClass.class).withApplicationScoped(true); BEANS.getBeanManager().registerBean(beanData); } } } There is also a predefined bean registration built into the Scout runtime. This automatically registers all classes having an org.eclipse.scout.rt.platform.@Bean annotation. Therefore it is usually sufficient to only annotate a class with @Bean to have it available in the bean manager as shown in listing Listing 4. Listing 4. A normal bean @Bean public class BeanClass { } As the @Bean annotation is an java.lang.annotation.@Inherited annotation, this automatically registers all child classes too. This means that also interfaces may be @Bean annotated making all implementations automatically available in the bean manager! Furthermore other annotations may be @Bean annotated making all classes holding these annotations automatically to beans as well. If you inherit a @Bean annotation from one of you super types but don’t want to be automatically registered into the bean manger you can use the org.eclipse.scout.rt.platform.@IgnoreBean annotation. Those classes will then be skipped. There is a built in annotation org.eclipse.scout.rt.shared.@TunnelToServer. Interfaces marked with this annotation are called on the server. The server itself ignores this annotation. To achieve this a bean is registered on client side for each of those interfaces. Because the platform cannot directly create an instance for these beans a specific producer is registered which creates a proxy that delegates the call to the server. Please note that this annotation is not inherited. Therefore if an interface extends a tunnel-to-server interface and the new methods of this interface should be called on the server as well the new child interface has to repeat the annotation! The proxy is created only once for a specific interface bean. The most important meta data of a bean is the scope. It describes how many instances of a bean can exist in a single application. There are two different possibilities: Unlimited instances: Each bean retrieval results in a new instance of the bean. This is the default. Only one instance: There can only be one instance by Scout platform. From an application point of view this can be seen as singleton. The instance is created on first use and each subsequent retrieval of the bean results in this same cached instance. As like all bean meta data this characteristic can be provided in two different ways: With a Java annotation on the bean class as shown in the listing Listing 5. With bean meta data as shown in listing Listing 3. Listing 5. An application scoped bean using annotations @ApplicationScoped public class BeanSingletonClass { } So the Java annotation org.eclipse.scout.rt.platform.@ApplicationScoped describes a bean having singleton characteristics. Also @ApplicationScoped is an @Inherited annotation. Therefore all child classes automatically inherit this characteristic like with the @Bean annotation. It is not only possible to influence the number of instances to be created (see Bean Scopes), but also to create beans eagerly, execute methods after creation (like constructors) or to delegate the bean creation completely. These topics are described in the next sections. By default beans are created on each request. An exception are the beans marked to be application scoped (as shown in Bean Scopes). Those beans are only created on first request (lazy). This means if a bean is never requested while the application is running, there will never be an instance of this class. But sometimes it is necessary to create beans already at the application startup (eager). This can be done by marking the bean as org.eclipse.scout.rt.platform.@CreateImmediately. All classes holding this annotation must also be marked as @ApplicationScoped! These beans will then be created as part of the application startup. Beans must have empty constructors so that the bean manager can create instances. But furthermore it is possible to mark methods with the javax.annotation.@PostConstruct annotation. Those methods must have no parameters and will be called after instances have been created. When querying the bean manager for an application scoped bean, it will always return the same instance. However, the constructor of an application scoped bean may run more than once, whereas a method annotated with @PostConstruct in an application scoped been is guaranteed to run exactly once. To retrieve a bean the class org.eclipse.scout.rt.platform.BEANS should be used. This class provides (amongst others) the following methods: Listing 6. How to get beans. BeanSingletonClass bean = BEANS.get(BeanSingletonClass.class); BeanClass beanOrNull = BEANS.opt(BeanClass.class); The get() method throws an exception if there is not a single bean result. So if no bean can be found or if multiple equivalent bean candidates are available this method fails! The opt() method requires a single or no bean result. It fails if multiple equivalent bean candidates are available and returns null if no one can be found. The all() method returns all beans in the correct order. The list may also contain no beans at all. There are now two more annotations that have an effect on which beans are returned if multiple beans match a certain class. Consider the following example bean hierarchy: Figure 1. A sample bean hierarchy. In this situation 4 bean candidates are available: MyServiceImpl, MyServiceMod, MySpecialVersion and AnotherVersion. But which one is returned by BEANS.get(IMyService.class)? Or by BEANS.get(MySpecialVersion.class)? This can be influenced with the org.eclipse.scout.rt.platform.@Order and org.eclipse.scout.rt.platform.@Replace annotations. The next sections describe the idea behind these annotations and gives some examples. This annotation works exactly the same as in the Scout user interface where it brings classes into an order. It allows to assign a double value to a class. All beans of a certain type are sorted according to this value in ascending order. This means a low order value is equivalent with a low position in a list (come first). Please note that the @Order annotation is not inherited so that each bean must declare its own value where it fits in. The @Order annotation value may be inherited in case it replaces. See the next section for details. If a bean does not declare an order value, the default of 5000 is used. Scout itself uses orders from 4001 to 5999. So for user applications the value 4000 and below can be used to declare more important beans. For testing bean mocks the value -10'000 can be used which then usually comes before each normal Scout or application bean. The @Replace annotation can be set to beans having another bean as super class. This means that the original bean (the super class) is no longer available in the Scout bean manager and only the new child class is returned. If the replacing bean (the child class) has no own @Order annotation defined but the replaced bean (the super class) has an @Order value, this order is inherited to the child. This is the only special case in which the @Order annotation value is inherited! The next examples use the bean situation as shown in figure Figure 1. In this situation the bean manager actually contains 3 beans: AnotherVersion with @Order of 4000. This bean has no own order and would therefore get the default order of 5000. But because it is replacing another bean it inherits its order. MyServiceMod with @Order of 4500. This bean declares its own order. MyServiceImpl with @Order of 5000. This bean gets the default order of 5000 because it does not declare an order. The bean MySpecialVersion is not part of the bean manager because it has been replaced by AnotherVersion. BEANS.get(IMyService.class): Returns AnotherVersion instance. The result cannot be an exact match because the requested type is an interface. Therefore of all candidates there is one single candidate with lowest order (comes first). BEANS.get(MyServiceImpl.class): Returns MyServiceImpl because there is an exact match available. BEANS.get(MySpecialVersion.class): Returns AnotherVersion. The result cannot be an exact match because there is no exact bean with this class in the bean manager (MySpecialVersion has been replaced). Therefore only AnotherVersion remains as candidate in the hierarchy below MySpecialVersion. BEANS.get(MyServiceMod.class): Returns MyServiceMod because there is no other candidate. BEANS.all(IMyService.class): Returns a list with all beans sorted by @Order. This results in: AnotherVersion, MyServiceMod, MyServiceImpl. If MyServiceMod would have no @Order annotation, there would be two bean candidates available with the same default order of 5000: MyServiceImpl and MyServiceMod. In this case a call to BEANS.get(IMyService.class) would fail because there are several equivalent candidates. Equivalent candidates means they have the same @Order value and the system cannot decide which one is the right one. Bean decorations allow to wrap interfaces with a proxy to intercept each method call to the interface of a bean and apply some custom logic. For this a IBeanDecorationFactory has to be implemented. This is one single factory instance for the entire application. It decides which decorators are created for a bean request. The factory is asked for decorators on every bean retrieval. This allows to write bean decoration factories depending on dynamic conditions. As bean decoration factories are beans themselves, it is sufficient to create an implementation of org.eclipse.scout.rt.platform.IBeanDecorationFactory and to ensure this implementation is used (see Bean Retrieval). This factory receives the bean to be decorated and the originally requested bean class to decide which decorators it should create. In case no decoration is required the factory may return null. Then the original bean is used without decorations. Decorations are only supported if the class obtained by the bean manager (e.g. by using BEANS.get()) is an interface! It is best practice to mark all annotations that are interpreted in the bean decoration factory with the annotation org.eclipse.scout.rt.platform.@BeanInvocationHint. However this annotation has no effect at runtime and is only for documentation reasons. The sample in listing Listing 7 wraps each call to the server with a profiler decorator that measures how long a server call takes. Listing 7. Bean decoration example. @Replace public class ProfilerDecorationFactory extends SimpleBeanDecorationFactory { @Override public IBeanDecorator decorate(IBean bean, Class queryType) { return new BackendCallProfilerDecorator<>(super.decorate(bean, queryType)); } } public class BackendCallProfilerDecorator implements IBeanDecorator { private final IBeanDecorator m_inner; public BackendCallProfilerDecorator(IBeanDecorator inner) { m_inner = inner; } @Override public Object invoke(IBeanInvocationContext context) { final String className; if (context.getTargetObject() == null) { className = context.getTargetMethod().getDeclaringClass().getSimpleName(); } else { className = context.getTargetObject().getClass().getSimpleName(); } String timerName = className + '.' + context.getTargetMethod().getName(); TuningUtility.startTimer(); try { if (m_inner != null) { // delegate to the next decorator in the chain return m_inner.invoke(context); } // forward to real bean return context.proceed(); } finally { TuningUtility.stopTimer(timerName); } } } Application scoped beans can declare methods annotated with javax.annotation.@PreDestroy. These methods will be called when the Scout platform is stopping. The methods may have any visibility modifier but must not be static and must not declare any parameters. If such a pre-destroy method throws an exception, the platform will continue to call all other pre-destroy methods (even methods on the same bean). Please note that pre-destroy methods are only called for application-scoped beans that already have created their instance. Pre-destroy methods inherited from super classes are always called after the ones from the class itself. Methods that are overridden are only called on the leaf class. Private methods are always called (because they cannot be overridden). The order in which multiple methods in the same declaring class are called is undefined. Applications usually require some kind of configuration mechanism to use the same binaries in a different environment or situation. Scout applications provide a configuration mechanism using properties files [2]. For each property a class cares about default values and value validation. These classes share the org.eclipse.scout.rt.platform.config.IConfigProperty interface and are normal application scoped beans providing access to a specific configuration value as shown in listing Listing 8. If the property class is an inner class it has to be defined as a static class with the static modifier. Listing 8. A configuration property of type Long. import org.eclipse.scout.rt.platform.config.AbstractLongConfigProperty; /** * Property of data type {@link Long} with key 'my.custom.timeout' and default value '3600L'. */ public class MyCustomTimeoutProperty extends AbstractLongConfigProperty { @Override public String getKey() { return \"my.custom.timeout\"; (1) } @Override public String description() { return \"Description of the custom timeout property. The default value is 3600.\"; } @Override public Long getDefaultValue() { return 3600L; (2) } } 1 key 2 default value To read the configured value you can use the CONFIG class as demonstrated in Listing 9. Listing 9. Read the configured value in your code. Long value = CONFIG.getPropertyValue(MyCustomTimeoutProperty.class); The given property key is searched in the following environments: In the system properties (java.lang.System.getProperty(String)). In the environment variables of the system (java.lang.System.getenv(String)). In the properties file. The properties file can be a file on the local filesystem where the system property with key config.properties holds an absolute URL to the file or a file on the classpath with path /config.properties (recommended). If none of the above is found, the default value of the property is applied. Supported formats are simple key-value pairs, list values and map values. For more details about the format please refer to the JavaDoc of the org.eclipse.scout.rt.platform.config.PropertiesHelper class. Since the environment variable names are more restrictive in many shells and systems than the property names in Java, overriding a property containing a dot/period (.) with an environment variable would not be possible. To still allow overriding of such properties, the following lookup rules are applied in-order to find a matching environment variable: An exact match of your property key (my.property) A match where periods are replaced by underscores (my_property) An uppercase match of your property key (MY.PROPERTY) An uppercase match where periods are replaced by underscores (MY_PROPERTY) When it comes to working with mapped config properties (subclasses of org.eclipse.scout.rt.platform.config.AbstractMapConfigProperty), there’s also some special mechanic to consider in terms of providing or overriding property map values using environment variables. Since it is not possible to reliably retrieve the original map key from an environment variable (again, due to the restrictions mentioned above), property map values may be supplied using environment variables whose value is a JSON object string: my_map_property={\"map-key-01\": \"value-01\", \"map-key-02\": \"value-02\", \"map-key-03\": null} The following rules apply, when such environment variables are read: * property map key/value pairs are added from the JSON object to the property map, overriding keys already being defined by sources of lower precedence (e.g. config.properties file) * a JSON object attribute value of \"null\" will remove a key potentially being defined by sources of lower precedence The parsing of JSON object strings is abstracted away using the new org.eclipse.scout.rt.platform.config.IJsonPropertyReader interface as parsing JSON strings is not implemented in the platform itself. However, there is a default implementation of this interface available in org.eclipse.scout.rt.dataobject which uses the org.eclipse.scout.rt.platform.dataobject.IDataObjectMapper feature to deserialize the JSON string into a Java Map. In order to use this, an implementation of the IDataObjectMapper interface is also required (e.g. org.eclipse.scout.rt.jackson.dataobject.JacksonDataObjectMapper). So in case you want to use this feature, you have to define * org.eclipse.scout.rt:org.eclipse.scout.rt.dataobject * org.eclipse.scout.rt:org.eclipse.scout.rt.jackson as new dependencies of your application aggregator module (if they are not already present). A properties file may import other config files from the classpath or any other absolute URL. This is done using the special key import. It can be a single value or a list or map (e.g. import[anyKey or number]: import[0]=classpath:myConfigs/other.properties import[1]=file:/C:/path/to/my/settings.properties import[2]=file:${catalina.base}/conf/db_connection.properties Scout already has some config properties. For a list and the corresponding documentation see Scout Config Properties. Because the property classes are managed by the bean manager, you can use all the mechanisms to change the behavior (@Replace in particular). Listing 10 demonstrates how you can use the replace annotation to change the existing ApplicationNameProperty class. The value is no longer fetched via the config mechanism, because the getValue(String) method is overridden. In this case a fixed value is returned. Listing 10. Property class providing a constant value. import org.eclipse.scout.rt.platform.IgnoreBean; import org.eclipse.scout.rt.platform.Replace; import org.eclipse.scout.rt.platform.config.PlatformConfigProperties.ApplicationNameProperty; @Replace public class ApplicationNameConstant extends ApplicationNameProperty { @Override protected String readFromSource(String namespace) { return \"Contacts Application\"; } } The next example presented in Listing 11 uses the same idea. In this case, the getKey() method is overridden to read the value from an other key as demonstrated is the Listing 12. Listing 11. Property class reading the value from an other key. import org.eclipse.scout.rt.platform.IgnoreBean; import org.eclipse.scout.rt.platform.Replace; import org.eclipse.scout.rt.platform.config.PlatformConfigProperties.ApplicationNameProperty; @Replace public class ApplicationNamePropertyRedirection extends ApplicationNameProperty { @Override public String getKey() { return \"myproject.applicationName\"; } } Listing 12. Read the configured value in your code. ### Redirected Application Config myproject.applicationName=My Project Application During the Platform startup all classes implementing the interface org.eclipse.scout.rt.platform.config.IConfigurationValidator are asked to validate configuration provided in the config.properties files. If there is at least one IConfigurationValidator that accepts a given key-value-pair the configuration is considered to be valid. Otherwise the platform will not start. The concrete implementation org.eclipse.scout.rt.platform.config.ConfigPropertyValidator will also check if a configured value matches the default value. In case it does an info message (warn in development mode) will be logged but the platform will still start. To minimize configuration files such entries should be removed from config.properties files. Table 1. Config Properties Key Description Data Type Kind scout.application.name The display name of the application. Used e.g. in the info form and the diagnostic views. The default value is unknown. String Config Property scout.application.version The application version as displayed to the user. Used e.g. in the info form and the diagnostic views. The default value is 0.0.0. String Config Property scout.auth.anonymousEnabled Specifies if the AnonymousAccessController is enabled. Therefore, if a security filter uses this controller no login is required. Boolean Config Property scout.auth.cookieEnabled Specifies if the CookieAccessController is enabled. Boolean Config Property scout.auth.cookieMaxAge If the CookieAccessController is enabled, specifies the maximum age in seconds for the cookie. A positive value indicates that the cookie will expire after that many seconds have passed. A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted. The default value is 10 hours. Long Config Property scout.auth.cookieName If the CookieAccessController is enabled, specifies the name for the cookie. The name must conform to RFC 2109. However, vendors may provide a configuration option that allows cookie names conforming to the original Netscape Cookie Specification to be accepted. By default sso.user.id is used as cookie name. String Config Property scout.auth.cookieSessionValidateSecure Specifies if the UI server should ensure a secure cookie configuration of the webapp. If enabled the application validates that the httpOnly and Secure flags are set in the cookie configuration in the web.xml. This property should be disabled if no secure connection (https) is used to the client browser (not recommended). The default value is true. Boolean Config Property scout.auth.credentials Specifies the known credentials (username & passwords) of the org.eclipse.scout.rt.platform.security.ConfigFileCredentialVerifier. Credentials are separated by semicolon. Username and password information are separated by colon. Usernames are case-insensitive, and it is recommended that they should only consist of ASCII characters. Plain text passwords are case-sensitive. By default the password information consists of Base64 encoded salt followed by a dot followed by the Base64 encoded SHA-512 hash of the password (using UTF-16). Example: username1:base64EncodedSalt.base64EncodedPasswordHash;username2:base64EncodedSalt.base64EncodedPasswordHash To create a salt and hash tuples based on a clear text password use the org.eclipse.scout.rt.platform.security.ConfigFileCredentialVerifier.main() method that can be invoked from the command line. If scout.auth.credentialsPlaintext is set to true the password information just consists of the cleartext password. String Config Property scout.auth.credentialsPlaintext Specifies if the passwords specified in property scout.auth.credentials is plaintext (not recommended) or hashed. A value of false indicates hashed passwords which is the default. Boolean Config Property scout.auth.privateKey Specifies the Base64 encoded private key for signing requests from the UI server to the backend server. By validating the signature the server can ensure the request is trustworthy. Furthermore, the CookieAccessController uses this private key to sign the cookie. New public-private-key-pairs can be created by invoking the class org.eclipse.scout.rt.platform.security.SecurityUtility on the command line. Base64 encoded String Config Property scout.auth.publicKey Specifies the Base64 encoded public key used to validate signed requests on the backend server. The public key must match the private key stored in the property scout.auth.privateKey on the UI server. New public-private-key-pairs can be created by invoking the class org.eclipse.scout.rt.platform.security.SecurityUtility on the command line. Base64 encoded String Config Property scout.auth.tokenTtl Number of milliseconds a signature on a request from the UI server to the backend server is valid (TTL for the authentication token). If a request is not received within this time, it is rejected. By default this property is set to 10 minutes. Long >= 0 Config Property scout.backendUrl The URL of the scout backend server (without any servlets). E.g.: http://localhost:8080 By default this property is null. String Config Property scout.client.jobCompletionDelayOnSessionShutdown Specifies the maximal time (in seconds) to wait until running jobs are cancelled on session shutdown. The default value is 10 seconds. Long >= 0 Config Property scout.client.memoryPolicy Specifies how long the client keeps fetched data before it is discarded. One of small, medium or large. The default value is large. String Config Property scout.client.notificationSubject Technical subject under which received client notifications are executed. By default notification-authenticator is used. Subject name as String Config Property scout.client.testingSessionTtl Testing client session expiration in milliseconds. The default value is 1 day. Long >= 0 Config Property scout.client.userArea User data area (e.g. in the user home) to store user preferences. If nothing is specified the user home of the operating system is used. By default no user home is set. String Config Property scout.clientnotification.chunkSize The maximum number of client notifications that are consumed at once. The default is 30. Integer >= 0 Config Property scout.clientnotification.maxNotificationBlockingTimeOut The maximum amount of time in millisecons a consumer blocks while waiting for new notifications. The default is 10 seconds. Integer >= 0 Config Property scout.clientnotification.nodeQueueCapacity Capacity of the client notification queue. If maximum capacity is reached, notification messages are dropped. The default value is 200. Integer >= 0 Config Property scout.clientnotification.notificationQueueExpireTime If no message is consumed for the specified number of milliseconds, client notification queues (with possibly pending notifications) are removed. This avoids overflows and unnecessary memory consumption. Old queues may exist if a node does not properly unregister (e.g. due to a crash). The default value is 10 minutes. Integer >= 0 Config Property scout.clustersync.user Technical subject under which received cluster sync notifications are executed. The default value is system. String Config Property scout.createTunnelToServerBeans Specifies if the Scout platform should create proxy beans for interfaces annotated with TunnelToServer. Calls to beans of such types are then tunneled to the Scout backend. By default this property is enabled if the property scout.servicetunnel.targetUrl is set. Boolean Config Property scout.cspDirective Configures individual Content Security Policy (CSP) directives. See https://www.w3.org/TR/CSP2/ and the Bean org.eclipse.scout.rt.server.commons.servlet.ContentSecurityPolicy for more details. The value must be provided as a Map. Example: scout.cspDirective[img-src]=self data: https: http://localhost:8086 Map Config Property scout.cspEnabled Enable or disable Content Security Policy (CSP) headers. The headers can be modified by replacing the bean org.eclipse.scout.rt.server.commons.servlet.ContentSecurityPolicy or using the property scout.cspDirective. Boolean Config Property scout.cspExclusions A list of regex strings. If the pathInfo of the request matches one of these strings the csp headers won`t be set. This property only has an effect if csp is enabled, see scout.cspEnabled. List Config Property scout.devMode Property to specify if the application is running in development mode. Default is false. Boolean Config Property scout.externalBaseUrl Absolute URL to the deployed http(s):// base of the web-application. The URL should include proxies, redirects, etc. Example: https://www.my-company.com/my-scout-application/. This URL is used to replace tags. String Config Property scout.healthCheckRemoteUrls Comma separated list of URLs the RemoteHealthChecker should access. By default no URLs are set. List Config Property scout.http.connectionTtl Specifies the maximum life time in milliseconds for kept alive connections of the Apache HTTP client. The default value is 1 hour. Integer Config Property scout.http.ignoreProxyPatterns Configure the proxy ignore list for the ConfigurableProxySelector. If an URI matches the pattern no proxy connection is used. By default no proxy is configured. Example: scout.http.ignoreProxyPatterns[0]=https?://localhost(?::\\d+)?(?:/.*)? scout.http.ignoreProxyPatterns[1]=…​ List Config Property scout.http.keepAlive Enable/disable HTTP keep-alive connections. The default value is defined by the system property http.keepAlive or true if the system property is undefined. Boolean Config Property scout.http.maxConnectionsPerRoute Configuration property to define the default maximum connections per route of the Apache HTTP client. The default value is 32. Integer Config Property scout.http.maxConnectionsTotal Specifies the total maximum connections of the Apache HTTP client. The default value is 128. Integer Config Property scout.http.proxyPatterns Configure proxies for the ConfigurableProxySelector. If an URI matches a pattern the corresponding proxy will be used. By default no proxy is used. The property value is of the format REGEXP_FOR_URI=PROXY_HOST:PROXY_PORT Example: scout.http.proxyPatterns[0]=.\\.example.com(:\\d+)?=127.0.0.1:8888 scout.http.proxyPatterns[1]=.\\.example.org(:\\d+)?=proxy.company.com List Config Property scout.http.redirectPost Enable redirect of POST requests (includes non-idempotent requests). The default value is true Boolean Config Property scout.http.retryOnNoHttpResponseException Enable retry of request (includes non-idempotent requests) on NoHttpResponseException Assuming that the cause of the exception was most probably a stale socket channel on the server side. For apache tomcat see http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d5e659 The default value is true Boolean Config Property scout.http.retryOnSocketExceptionByConnectionReset Enable retry of request (includes non-idempotent requests) on {@link SocketException} with message Connection reset Assuming that the cause of the exception was most probably a stale socket channel on the server side. For apache tomcat see http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d5e659 The default value is true Boolean Config Property scout.http.transportFactory Fully qualified class name of the HTTP transport factory the application uses. The class must implement org.eclipse.scout.rt.shared.http.IHttpTransportFactory. By default org.eclipse.scout.rt.shared.http.ApacheHttpTransportFactory is used. Fully qualified class name. The class must have org.eclipse.scout.rt.shared.http.IHttpTransportFactory in its super hierarchy. Config Property scout.jandex.rebuild Specifies if Jandex indexes should be rebuilt. Is only necessary to enable during development when the class files change often. The default value is false. RebuildStrategy Config Property scout.jaxws.consumer.connectTimeout Connect timeout in milliseconds to abort a webservice request, if establishment of the connection takes longer than this timeout. A timeout of null means an infinite timeout. The default value is null. Integer >= 0 Config Property scout.jaxws.consumer.portCache.corePoolSize Number of ports to be preemptively cached to speed up webservice calls. The default value is 10. Integer >= 0 Config Property scout.jaxws.consumer.portCache.enabled Indicates whether to use a preemptive port cache for webservice clients. Depending on the implementor used, cached ports may increase performance, because port creation is an expensive operation due to WSDL and schema validation. The cache is based on a corePoolSize, meaning that that number of ports is created on a preemptive basis. If more ports than that number is required, they are are created on demand and also added to the cache until expired, which is useful at a high load. The default value is true. Boolean Config Property scout.jaxws.consumer.portCache.ttl Maximum time in seconds to retain ports in the cache if the value of scout.jaxws.consumer.portCache.corePoolSize is exceeded. That typically occurs at high load, or if scout.jaxws.consumer.portCache.corePoolSize is undersized. The default value is 15 minutes. Long >= 0 Config Property scout.jaxws.consumer.portPoolEnabled To indicate whether to pool webservice clients. Creating new service and Port instances is expensive due to WSDL and schema validation. Using the pool helps to reduce these costs. The default value is true. The pool size is unlimited but its elements are removed after a certain time (configurable) If this value is true, the value of property scout.jaxws.consumer.portCache.enabled has no effect. Boolean Config Property scout.jaxws.consumer.readTimeout Read timeout in milliseconds to abort a webservice request, if it takes longer than this timeout for data to be available for read. A timeout of null means an infinite timeout. The default value is null. Integer >= 0 Config Property scout.jaxws.implementor Fully qualified class name of the JAX-WS implementor to use. The class must extend org.eclipse.scout.rt.server.jaxws.implementor.JaxWsImplementorSpecifics. By default JAX-WS Metro (not bundled with JRE) is used. For that to work, add the Maven dependency to JAX-WS Metro to your server application`s pom.xml: com.sun.xml.ws:jaxws-rt:2.3.5. Fully qualified class name. The class must have org.eclipse.scout.rt.server.jaxws.implementor.JaxWsImplementorSpecifics in its super hierarchy. Config Property scout.jaxws.loghandlerDebug Indicates whether to log SOAP messages in debug or info level. The default value is false. Boolean Config Property scout.jaxws.provider.authentication.basicRealm Security Realm used for Basic Authentication; used by org.eclipse.scout.rt.server.jaxws.provider.auth.method.BasicAuthenticationMethod. The default value is JAX-WS. String Config Property scout.jaxws.provider.user.authenticator Technical Subject used to authenticate webservice requests. The default value is jaxws-authenticator. Subject name as String Config Property scout.jaxws.provider.user.handler Technical subject used to invoke JAX-WS handlers if the request is not authenticated yet; used by org.eclipse.scout.rt.server.jaxws.provider.handler.HandlerDelegate. The default value is jaxws-handler. Subject name as String Config Property scout.jetty.port The port under which the jetty will be running. Integer between 1 and 65535 Config Property scout.jobmanager.allowCoreThreadTimeOut Specifies whether threads of the core-pool should be terminated after being idle for longer than the value of property scout.jobmanager.keepAliveTime. The defautl value is false. Boolean Config Property scout.jobmanager.corePoolSize The number of threads to keep in the pool, even if they are idle. The default value is 25. Integer >= 0 Config Property scout.jobmanager.keepAliveTime The time limit (in seconds) for which threads, which are created upon exceeding the scout.jobmanager.corePoolSize limit, may remain idle before being terminated. The default value is 1 minute. Long >= 0 Config Property scout.jobmanager.maximumPoolSize The maximal number of threads to be created once the value of scout.jobmanager.corePoolSize is exceeded. The default value is unlimited (which means limited by the resources of the machine). Integer >= 0 Config Property scout.jobmanager.prestartCoreThreads Specifies whether all threads of the core-pool should be started upon job manager startup, so that they are idle waiting for work. By default this is disabled in development mode (property scout.devMode is true) and enabled otherwise. Boolean Config Property scout.loadWebResourcesFromFilesystem Specifies if the application should look for web resources (like .js, .html or .css) on the local filesystem. If true, the resources will be searched in modules that follow the Scout naming conventions (e.g. name.ui.app.dev, name.ui.app, name.ui) on the local filesystem first and (if not found) on the classpath second. If false, the resources are searched on the Java classpath only. By default this property is true in dev mode and false otherwise. Boolean Config Property scout.mail.bouncedetector.heuristic.contents Non standard email bounce detection: content is checked against the provided list of heuristic contents (partial match, case-insensitive) List Config Property scout.mail.bouncedetector.heuristic.senderPrefixes Non standard email bounce detection: sender is checked against the provided list of heuristic sender prefixes (prefix match, case-insensitive) List Config Property scout.mail.bouncedetector.heuristic.subjects Non standard email bounce detection: subject is checked against the provided list of heuristic subjects (partial match, case-insensitive) List Config Property scout.malwareScanner.path Path to a malware scanner checked directory. The default value is null which means the system temp path is used. String Config Property scout.mom.cluster.destination.clusterNotificationTopic Name of the topic for cluster notifications published by scout application. IDestination Config Property scout.mom.cluster.environment Contains the configuration to connect to the network or broker. This configuration is specific to the MOM implementor Example to connect to a peer based cluster, which is useful in development mode because there is no central broker: scout.mom.cluster.environment[scout.mom.name]=Scout Cluster MOM scout.mom.cluster.environment[scout.mom.connectionfactory.name]=ClusterMom scout.mom.cluster.environment[java.naming.factory.initial]=org.apache.activemq.jndi.ActiveMQInitialContextFactory scout.mom.cluster.environment[java.naming.provider.url]=failover:(peer://mom/cluster?persistent=false) scout.mom.cluster.environment[connectionFactoryNames]=ClusterMom Map Config Property scout.mom.cluster.implementor Specifies the MOM implementor. Example to work with a JMS based implementor: scout.mom.cluster.implementor=org.eclipse.scout.rt.mom.jms.JmsMomImplementor Fully qualified class name. The class must have org.eclipse.scout.rt.mom.api.IMomImplementor in its super hierarchy. Config Property scout.mom.failover.connectionRetryCount Specifies the connection retry count for connection failover. Default is 15. The value 0 disables connection failover. Integer Config Property scout.mom.failover.connectionRetryIntervalMillis Specifies the connection retry interval in milliseconds. Default is 2000ms. Integer Config Property scout.mom.failover.sessionRetryIntervalMillis Specifies the session retry interval in milliseconds. Default is 5000ms. Integer Config Property scout.mom.marshaller Specifies the default Marshaller to use if no marshaller is specified for a MOM or a destination. By default the JsonDataObjectMarshaller is used. Fully qualified class name. The class must have org.eclipse.scout.rt.mom.api.marshaller.IMarshaller in its super hierarchy. Config Property scout.mom.requestreply.cancellationTopic Specifies the default topic to receive cancellation request for request-reply communication. By default a defined topic with the name scout.mom.requestreply.cancellation is used. IDestination Config Property scout.mom.requestreply.enabled Specifies if request-reply messaging is enabled by default. This value can also be configured individually per MOM. The default value is true. Boolean Config Property scout.nodeId Specifies the cluster node name. If not specified a default id is computed. String Config Property scout.remotefileRootPath Absolute path to the root directory of the RemoteFileService. The default value is null. String Config Property scout.serverSessionTtl Server sessions that have not been accessed for the specified number of milliseconds are removed from the cache. The default value is one day. Long >= 0 Config Property scout.servicetunnel.compress Specifies if the service tunnel should compress the data. If null, the response decides which is default to true. Boolean Config Property scout.servicetunnel.maxConnectionsPerRoute Specifies the default maximum connections per route property for the HTTP service tunnel. Overrides the value from scout.http.maxConnectionsPerRoute for the service tunnel. Default value is 2048. Integer Config Property scout.servicetunnel.maxConnectionsTotal Specifies the default total maximum connections property for the HTTP service tunnel. Overrides the value from scout.http.maxConnectionsTotal for the service tunnel. The default value is 2048. Integer Config Property scout.servicetunnel.targetUrl Specifies the URL to the ServiceTunnelServlet on the backend server. By default this property points to the value of property scout.backendUrl with /process appended. String Config Property scout.smtp.connectionTimeout Socket connection timeout value in milliseconds. Integer >= 0 Config Property scout.smtp.debugReceiverEmail If specified all emails are sent to this address instead of the real one. This may be useful during development to not send emails to real users by accident. String Config Property scout.smtp.pool.maxConnectionLifetime Max. lifetime of pooled connections in seconds. Integer >= 0 Config Property scout.smtp.pool.maxIdleTime Max. idle time for pooled connections in seconds. Integer >= 0 Config Property scout.smtp.pool.waitForConnectionTimeout Max. wait time for SMTP connection in seconds. If the value is 0, callers will wait infinitely long for SMTP connections. Integer >= 0 Config Property scout.smtp.readTimeout Socket read timeout value in milliseconds. Integer >= 0 Config Property scout.sql.directJdbcConnection If true a direct JDBC connection is created. Otherwise a JNDI connection is used. The default value is true. Boolean Config Property scout.sql.jdbc.driverName The driver name to use. By default oracle.jdbc.OracleDriver is used. String Config Property scout.sql.jdbc.mappingName The JDBC mapping name. By default jdbc:oracle:thin:@localhost:1521:ORCL is used. String Config Property scout.sql.jdbc.pool.connectionBusyTimeout Connections will be closed after this timeout in milliseconds even if the connection is still busy. The default value is 6 hours. Long >= 0 Config Property scout.sql.jdbc.pool.connectionIdleTimeout Idle connections will be closed after this timeout in milliseconds. The default value is 5 minutes. Long >= 0 Config Property scout.sql.jdbc.pool.size The maximum number of connections to create. The default pool size is 25. Integer >= 0 Config Property scout.sql.jdbc.properties Semicolon separated list of properties to pass to the JDBC connection. The default value is null. E.g.: key1=val1;key2=val2 String Config Property scout.sql.jdbc.statementCacheSize Maximum number of cached SQL statements. The default value is 25. Integer >= 0 Config Property scout.sql.jndi.initialContextFactory The name of the object to lookup in the JNDI context. Default is null. String Config Property scout.sql.jndi.name The name of the object to lookup in the JNDI context. Default is null. String Config Property scout.sql.jndi.providerUrl JNDI provider url (e.g. ldap://somehost:389). Default is null. String Config Property scout.sql.jndi.urlPkgPrefixes A colon-separated list of package prefixes for the class name of the factory class that will create a URL context factory. Default is null. String Config Property scout.sql.password The password to connect to the database (JDBC or JNDI) String Config Property scout.sql.transactionMemberId Id of the transaction member on which the connection is available. String Config Property scout.sql.username The username to connect to the database (JDBC or JNDI) String Config Property scout.texts.showKeys If this property is set to true, the TextKeyTextProviderService will be registered with high priority, and each call to TEXTS.get() will return the given text key instead of the translation. This is useful for debug/testing purposes or exporting forms to JSON. By default this property is false. Boolean Config Property scout.tiles.dataLoadQueueTimeoutSeconds Maximum number of seconds a tile load job can execute until it is automatically cancelled. The default value is 2 minutes. Integer >= 0 Config Property scout.tiles.maxConcurrentDataLoadThreads Maximum number of threads per server that can be created to load tiles. The default value is 25. Integer >= 0 Config Property scout.trustedCertificates URIs to DER (Base64) encoded certificate files that should be trusted. The URI may refer to a local file or a resource on the classpath (use classpath: prefix). The default value is an empty list. List Config Property scout.ui.backgroundPollingMaxWaitTime The polling request (which waits for a background job to complete) stays open until a background job has completed or the specified number of seconds elapsed. This property must have a value between 3 and the value of property scout.ui.maxUserIdleTime. By default this property is set to 1 minute. Long >= 0 Config Property scout.ui.locales Contains a comma separated list of supported locales (e.g. en,en-US,de-CH). This is only relevant if locales.json and texts.json should be sent to the client, which is not the case for remote apps. So this property is only used for JS only apps. By default no locales are supported. List Config Property scout.ui.maxUserIdleTime If a user is inactive (no user action) for the specified number of seconds, the session is stopped and the user is logged out. By default this property is set to 4 hours. Long >= 0 Config Property scout.ui.modelJobTimeout The maximal timeout in seconds to wait for model jobs to complete during a UI request. After that timeout the model jobs will be aborted so that the request may return to the client. By default this property is set to 1 hour. Long >= 0 Config Property scout.ui.sessionstore.housekeepingDelay Number of seconds before the housekeeping job starts after a UI session has been unregistered from the store. By default this property is set to 30 seconds. Integer >= 0 Config Property scout.ui.theme The name of the UI theme which is activated when the application starts. String Config Property scout.urlHints.enabled Enable or disable changing UrlHints using URL parameters in the browser address line. By default has the same value as the config property scout.devMode meaning it is by default only enabled in development mode. Boolean Config Property scout.util.defaultDecimalSupportProvider Specifies the default DefaultDecimalSupportProvider to use. By default the DefaultDecimalSupportProvider is used. Fully qualified class name. The class must have org.eclipse.scout.rt.platform.util.DECIMAL$DefaultDecimalSupportProvider in its super hierarchy. Config Property 1. https://github.com/wildfly/jandex 2. https://en.wikipedia.org/wiki/.properties","title":"Platform","component":"scout-docs","version":"23.2","name":"platform","url":"/scout-docs/next/technical-guide/common-concepts/platform.html","titles":[{"text":"Application Lifecycle","hash":"sec-app.lifecycle","id":1},{"text":"Platform Listener","hash":"platform-listener","id":2},{"text":"Class Inventory","hash":"sec-class.inventory","id":3},{"text":"scout.xml","hash":"scout-xml","id":4},{"text":"Bean Manager","hash":"sec-bean.manager","id":5},{"text":"Bean registration","hash":"bean-registration","id":6},{"text":"@TunnelToServer","hash":"tunneltoserver","id":7},{"text":"Bean Scopes","hash":"bean-scopes","id":8},{"text":"Bean Creation","hash":"bean-creation","id":9},{"text":"Eager Beans","hash":"eager-beans","id":10},{"text":"Constructors","hash":"constructors","id":11},{"text":"Bean Retrieval","hash":"bean-retrieval","id":12},{"text":"@Order","hash":"order","id":13},{"text":"@Replace","hash":"replace","id":14},{"text":"Examples","hash":"examples","id":15},{"text":"Bean Decoration","hash":"bean-decoration","id":16},{"text":"Destroy Beans","hash":"destroy-beans","id":17},{"text":"Configuration Management","hash":"sec-config.management","id":18},{"text":"Property resolution","hash":"property-resolution","id":19},{"text":"Additional examples","hash":"additional-examples","id":20},{"text":"Configuration validation","hash":"configuration-validation","id":21},{"text":"Scout Config Properties","hash":"sec-app.configProperties","id":22}]},"176":{"id":176,"text":"Mostly, code is run on behalf of some semantic context, for example as a particular Subject and with some context related ThreadLocals set, e.g. the user’s session and its Locale. Scout provides you with different RunContexts, such as ClientRunContext or ServerRunContext. They all share some common characteristics like Subject, Locale and RunMonitor, but also provide some additional functionality like transaction boundaries if using ServerRunContext. Also, a RunContext facilitates propagation of state among different threads. In order to ease readability, the 'setter-methods' of the RunContext support method chaining. All a RunContext does is to provide some setter methods to construct the context, and a run and call method to run an action on behalf of that context. Thereby, the only difference among those two methods is their argument. Whereas run takes a IRunnable instance, call takes a Callable to additionally return a result to the caller. The action is run in the current thread, meaning that the caller is blocked until completion. By default, a RunContext is associated with a RunMonitor, and the monitor’s cancellation status can be queried via RunMonitor.CURRENT.get().isCancelled(). The monitor allows for hard cancellation, meaning that the executing thread is interrupted upon cancellation. For instance if waiting on an interruptible construct like Object.wait() or IFuture.awaitDone(), the waiting thread returns with an interruption exception. Typically, a RunContext is created from a respective factory like RunContexts to create a RunContext, or ServerRunContexts to create a ServerRunContext, or ClientRunContexts to create a ClientRunContext. Internally, the BeanManager is asked to provide a new instance of the RunContext, which allows you to replace the default implementation of a RunContext in an easy way. The factories declare two factory methods: empty() and copyCurrent(). Whereas empty() provides you an empty RunContext, copyCurrent() takes a snapshot of the current calling context and initializes the RunContext accordingly. That is useful if only some few values are to be changed, or, if using ServerRunContext, to run the code on behalf of a new transaction. The following Listing 1 illustrates the creation of an empty RunContext initialized with a particular Subject and Locale. Listing 1. Creation of an empty RunContext Subject subject = new Subject(); (1) subject.getPrincipals().add(new SimplePrincipal(\"john\")); subject.setReadOnly(); (2) RunContexts.empty() .withSubject(subject) .withLocale(Locale.US) .run(() -> { // run some code (3) System.out.println(NlsLocale.CURRENT.get()); // > Locale.US System.out.println(Subject.getSubject(AccessController.getContext())); // > john }); 1 create the Subject to do some work on behalf 2 Create and initialize the RunContext 3 This code is run on behalf of the RunContext The following Listing 2 illustrates the creation of a 'snapshot' of the current calling RunContext with another Locale set. Listing 2. Create a copy of the current calling RunContext RunContexts.copyCurrent() .withLocale(Locale.US) .run(() -> { // run some code }); An important difference is related to the RunMonitor. By using the copyCurrent() factory method, the context’s monitor is additionally registered as child monitor of the monitor of the current calling context. That way, a cancellation request to the calling context is propagated down to this context as well. Of course, that behavior can be overwritten by providing another monitor yourself. The following properties are declared on a RunContext and are inherited by ServerRunContext and ClientRunContext. property description accessibility runMonitor Monitor to query the cancellation status of the context. * must not be null * is automatically set if creating the context by its factory * is automatically registered as child monitor if creating the context by copyCurrent() factory method RunMonitor.CURRENT.get() subject Subject to run the code on behalf Subject.getSubject(AccessController.getContext()) locale Locale to be bound to the Locale ThreadLocal NlsLocale.CURRENT.get() propertyMap Properties to be bound to the Property ThreadLocal PropertyMap.CURRENT.get() A ServerRunContext controls propagation of server-side state and sets the transaction boundaries, and is a specialization of RunContext. property description accessibility session Session to be bound to Session ThreadLocal ISession.CURRENT.get() transactionScope To control transaction boundaries. By default, a new transaction is started, and committed or rolled back upon completion. * Use TransactionScope.REQUIRES_NEW to run the code in a new transaction (by default). * Use TransactionScope.REQUIRED to only start a new transaction if not running in a transaction yet. * Use TransactionScope.MANDATORY to enforce that the caller is already running in a transaction. Otherwise, a TransactionRequiredException is thrown. ITransaction.CURRENT.get() transaction Sets the transaction to be used to run the runnable. Has only an effect, if transaction scope is set to TransactionScope.REQUIRED or TransactionScope.MANDATORY. Normally, this property should not be set manually. ITransaction.CURRENT.get() clientNotificationCollector To associate the context with the given ClientNotificationCollector, meaning that any code running on behalf of this context has that collector set in ClientNotificationCollector.CURRENT thread-local. That collector is used to collect all transactional client notifications, which are to be published upon successful commit of the associated transaction, and which are addressed to the client node which triggered processing (see withClientNodeId(String)). That way, transactional client notifications are not published immediately upon successful commit, but included in the client’s response instead (piggyback). Typically, that collector is set by ServiceTunnelServlet for the processing of a service request. ClientNotificationCollector.CURRENT.get() clientNodeId Associates this context with the given 'client node ID', meaning that any code running on behalf of this context has that id set in IClientNodeId.CURRENT thread-local. Every client node (that is every UI server node) has its unique 'node ID' which is included with every 'client-server' request, and is mainly used to publish client notifications. If transactional client notifications are issued by code running on behalf of this context, those will not be published to that client node, but included in the request’s response instead (piggyback). However, transactional notifications are only sent to clients upon successful commit of the transaction. Typically, this node ID is set by ServiceTunnelServlet for the processing of a service request. IClientNodeId.CURRENT.get() A ClientRunContext controls propagation of client-side state, and is a specialization of RunContext. property description accessibility session Session to be bound to Session ThreadLocal ISession.CURRENT.get() form Associates this context with the given IForm, meaning that any code running on behalf of this context has that IForm set in IForm.CURRENT thread-local. That information is mainly used to determine the current calling model context, e.g. when opening a message-box to associate it with the proper IDisplayParent. Typically, that information is set by the UI facade when dispatching a request from UI, or when constructing UI model elements. IForm.CURRENT.get() outline Associates this context with the given IOutline, meaning that any code running on behalf of this context has that IOutline set in IOutline.CURRENT thread-local. That information is mainly used to determine the current calling model context, e.g. when opening a message-box to associate it with the proper IDisplayParent. Typically, that information is set by the UI facade when dispatching a request from UI, or when constructing UI model elements. IOutline.CURRENT.get() desktop Associates this context with the given IDesktop, meaning that any code running on behalf of this context has that IDesktop set in IDesktop.CURRENT thread-local. That information is mainly used to determine the current calling model context, e.g. when opening a message-box to associate it with the proper IDisplayParent. Typically, that information is set by the UI facade when dispatching a request from UI, or when constructing UI model elements. IDesktop.CURRENT.get()","title":"RunContext","component":"scout-docs","version":"23.2","name":"run-context","url":"/scout-docs/next/technical-guide/common-concepts/run-context.html","titles":[{"text":"Factory methods to create a RunContext","hash":"factory-methods-to-create-a-runcontext","id":1},{"text":"Properties of a RunContext","hash":"properties-of-a-runcontext","id":2},{"text":"Properties of a ServerRunContext","hash":"properties-of-a-serverruncontext","id":3},{"text":"Properties of a ClientRunContext","hash":"properties-of-a-clientruncontext","id":4}]},"177":{"id":177,"text":"A RunMonitor allows the registration of ICancellable objects, which are cancelled upon cancellation of this monitor. A RunMonitor is associated with every RunContext and IFuture, meaning that executing code can always query its current cancellation status via RunMonitor.CURRENT.get().isCancelled(). A RunMonitor itself is also of the type ICancellable, meaning that it can be registered within another monitor as well. That way, a monitor hierarchy can be created with support of nested cancellation. That is exactly what is done when creating a copy of the current calling context, namely that the new monitor is registered as ICancellable within the monitor of the current calling context. Cancellation only works top-down, and not bottom up, meaning that a parent monitor is not cancelled once a child monitor is cancelled. When registering a ICancellable and this monitor is already cancelled, the ICancellable is cancelled immediately. Furthermore, a job’s Future is linked with the job’s RunMonitor, meaning that cancellation requests targeted to the Future are also propagated to the RunMonitor, and vice versa. The following Figure 1 illustrates the RunMonitor and its associations. Figure 1. RunMonitor and its associations","title":"RunMonitor","component":"scout-docs","version":"23.2","name":"run-monitor","url":"/scout-docs/next/technical-guide/common-concepts/run-monitor.html","titles":[]},"178":{"id":178,"text":"All Scout HTTP servlets delegate to a central authority to append HTTP response headers. This is the bean HttpServletControl. It enables developers to control which headers that should be added to the HTTP response for each servlet and request. The next sections describe the headers that are added to any response by default. Beside these also the following headers may be of interest for an end user application (consider adding them to your application if possible): Public Key Pinning Strict Transport Security (HSTS) X-Content-Type-Options Please note that not all headers are supported in all user agents! The X-Frame-Options HTTP response header [1] can be used to indicate whether a user agent should be allowed to render a page in a , or . Sites can use this to avoid clickjacking [2] attacks, by ensuring that their content is not embedded into other sites. The X-Frame-Options header is described in RFC 7034 [3]. In Scout this header is set to SAMEORIGIN which allows the page to be displayed in a frame on the same origin (scheme, host and port) as the page itself only. This header enables the XSS [4] filter built into most recent user agents. It’s usually enabled by default anyway, so the role of this header is to re-enable the filter for the website if it was disabled by the user. The X-XSS-Protection header is described in controlling-the-xss-filter. In Scout this header is configured to enable XSS protections and instructs the user-agent to block a page from loading if reflected XSS is detected. Content Security Policy is an HTTP response header that helps you reduce XSS risks on modern user agents by declaring what dynamic resources are allowed to load [5]. The CSP header is described in Level 1 and Level 2. There is also a working draft for a Level 3. Scout makes use of Level 1 (and one directive from Level 2) and sets by default the following settings: JavaScript [6]: Only accepts JavaScript resources from the same origin (same scheme, host and port). Inline JavaScript is allowed and unsafe dynamic code evaluation (like eval(string), setTimeout(string), setInterval(string), new Function(string)) is allowed as well. Stylesheets (CSS) [7]: Only accepts Stylesheet resources from the same origin (same scheme, host and port). Inline style attributes are allowed. Frames [8]: All sources are allowed because the iframes created by the Scout BrowserField run in the sandbox mode and therefore handle the security policy on their own. All other types (Image, WebSocket [9], EventSource [10], AJAX calls [11], fonts, [12], [13], [14], [15] and [16]) only allow resources from the same origin (same scheme, host and port). If a resource is blocked because it violates the CSP a report is created and logged on server side using level warning. This is done in the class ContentSecurityPolicyReportHandler. This enables admins to monitor the application and to react if a CSP violation is detected. The UiServlet checks if the session cookie is configured safely. The validation is only performed on first access to the UiServlet. There is no automatic validation on the backend server side or on any custom servlets! If the validation fails, a corresponding error message is logged to the server and an exception is thrown making the UiServlet inaccessible. Because of security reasons the exception shown to the user includes no details about the error. These can only be seen on the server side log. First the existence of the HttpOnly flag is checked. The servlet container will then add this flag to the Set-Cookie HTTP response header. If the user agent supports this flag, the cookie cannot be accessed through a client side script. As a result even if a cross-site scripting (XSS) flaw exists and a user accidentally accesses a link that exploits this flaw, the user agent will not reveal the cookie to a third party. For a list of user agents supporting this feature please refer to OWASP. It is recommended to always enable this flag. Since Java Servlet 3.0 specification this property can be set in the configuration in the deployment descriptor WEB-INF/web.xml: ... ... true (1) ... ... ... 1 The HttpOnly flag activated Second the existence of the Secure flag is checked. The servlet container will then add this flag to the Set-Cookie HTTP response header. The purpose of the secure flag is to prevent cookies from being observed by unauthorized parties due to the transmission of a cookie in clear text. Therefore, setting this flag will prevent the user agent from transmitting the session id over an unencrypted channel. Since Java Servlet 3.0 specification this property can be set in the configuration in the deployment descriptor WEB-INF/web.xml: ... ... true (1) ... ... ... 1 The Secure flag activated This of course only makes sense if the application is exposed to the end user using an encrypted channel like HTTPS (which is strongly recommended). Unfortunately for the UI server it is not possible to detect if an application uses a secured channel. Consider the following example: The servlet container is protected by a reverse proxy. The communication between the user agent and the proxy is encrypted while the channel between the proxy and the servlet container is not. In this scenario the container cannot know that from a user agent point of view the channel is secured. Because of this the validation assumes that the channel from the user agent to the entering node is secured and by default checks for the Secure flag. In case this assumption is not true and an unencrypted channel must be used this validation step can be disabled by setting the following property in the config.propertis file: scout.auth.cookieSessionValidateSecure=false This skips the Secure flag check completely. In this scenario (not using https) it is also required to remove the secure tag from the cookie config in the WEB-INF/web.xml. This chapter describes how HTML Output can be handled in a secure way. Scout applications often display potentially dangerous data, e.g. user input or data from other systems. Encoding this input in such a way, that it can not be executed, prevents security vulnerabilities like cross-site scripting. By default, all input in the Scout model is encoded. Examples are values/labels in value fields, cells in tables, message in message box. The reason behind this default choice is that developers do not have to think about output encoding in the standard case and are therefore less likely to forget output encoding and introduce a security vulnerability. Example: In the following label field, the HTML tag is encoded as bold text: public class LabelField extends AbstractLabelField { @Override protected void execInitField() { setValue(\"...Bold text...\"); } Sometimes developers may want to use HTML in the Scout model. Examples are Simple styling of dynamic content, such as addresses or texts in message boxes Text containing application-internal or external links Html or XML content received from other systems, such as e-mails or html pages Html input should only partially be encoded or not at all. To disable the encoding of the whole value, the property HtmlEnabled can be used: public class NoEncodingLabelField extends AbstractLabelField { @Override protected boolean getConfiguredHtmlEnabled() { return true; } @Override protected void execInitField() { setValue(\"...Bold text...\"); } There are several ways to implement the use cases above. Some typical implementations are described in the following sections. Often using HTML in value fields or table cells is not necessary for styling. Very basic styling can be done for example by setting the CSS class. For creating simple HTML files or fragments with encoded user input, the class org.eclipse.scout.rt.platform.html.HTML can be used. It is also easily possible to create application internal and external link with this approach. For more complex HTML, using IBeanField in the scout model and implementing the styling in the UI-Layer is often the preferred way. Links are possible as well. It is also possible to encode any String manually using StringUtility.htmlEncode(String). org.eclipse.scout.rt.platform.html.HTML uses this method internally for encoding. However, using HTML is recommended, where possible, because it is more concise and leads to less errors. If HTML or XML from external sources or more complex HTML are used in the Scout model, using a white-list filter might be the best way to avoid security bugs. Libraries, such as JSoup provide such a white-list filter. Scout currently does not include any services or utilities for using white-list filters, because the configuration and usage is very use-case-specific and would therefore not add much benefit. Scout uses the java.security API principles to grant access to a specific resource. Each user has a set of granted java.security.Permission instances. This set is a java.security.PermissionCollection. A call to PermissionCollection.implies(Permission p) does the access check. The argument p in this call is a new permission instance for which we want to do the access check and which is compared against the granted permissions. Usually, the permission collection implementation iterates through all granted permissions and calls on each Permission.implies(Permission p) until one call returns true. Scout adds some concepts and helpers to this API: IPermission Unlike other permissions, a permission implementing this interface can only be implied by another IPermission with the same name. A permission used together with scouts security API does not have to implement the IPermission interface, but it is recommended. PermissionLevel An IPermission, which is part of an IPermissionCollection has always a granted access level assigned (IPermission.getLevel()). If the granted level is PermissionLevel.NONE, any access checks will fail. IAccessControlService This service is responsible to provide and manage a users set of granted permissions. A scout application usually extends AbstractAccessControlService and implements #execLoadPermissions. ACCESS Provides a set of convenience methods to check access. Let us assume you require a permission to allow a user to access companies. public class ReadCompanyPermission extends AbstractPermission { private static final long serialVersionUID = 1L; public ReadCompanyPermission() { super(\"scoutdoc.ReadCompany\"); } } To check access one can use ACCESS. if (ACCESS.check(new ReadCompanyPermission())) { (1) throw new AccessForbiddenException(TEXTS.get(\"YouAreNotAllowedToReadThisData\")); } ACCESS.checkAndThrow(new ReadCompanyPermission()); (2) 1 Checks permission against granted permissions of current user. 2 Checks permission and if this check fails, throw an AccessForbiddenException with a default message. We can define a default access check failed message for a permission. public class CreateCompanyPermission extends AbstractPermission { private static final long serialVersionUID = 1L; public CreateCompanyPermission() { super(\"scoutdoc.CreateCompany\"); } @Override public String getAccessCheckFailedMessage() { return TEXTS.get(\"YouAreNotAllowedToRegisterThisData\"); } } ACCESS allows to check multiple permissions at once. ACCESS.checkAllAndThrow(new ReadCompanyPermission(), new CreateCompanyPermission()); ACCESS.checkAnyAndThrow(new ReadCompanyPermission(), new CreateCompanyPermission()); We have seen some simple permission checks. Now let us assume, that some users may modify a company only if they have registered the company by themselves. For this use case we introduce a new permission level ScoutdocPermissionLevels.OWN. This is the permission level which is granted for those users. public final class ScoutdocPermissionLevels { private ScoutdocPermissionLevels() { } public static final int LEVEL_NONE = PermissionLevel.LEVEL_NONE; public static final int LEVEL_OWN = 10; public static final int LEVEL_ALL = PermissionLevel.LEVEL_ALL; public static final PermissionLevel NONE = PermissionLevel.NONE; public static final PermissionLevel OWN = PermissionLevel.register(LEVEL_OWN, \"OWN\", true, () -> TEXTS.get(\"Own\")); public static final PermissionLevel ALL = PermissionLevel.ALL; public static void init() { // ensures all static initializers have been called } } In order to check access for this new level we have to override AbstractPermission#evalPermission. public class UpdateCompanyPermission extends AbstractPermission { private static final long serialVersionUID = 1L; private final UUID m_companyId; public UpdateCompanyPermission() { this(null); } public UpdateCompanyPermission(UUID companyId) { super(\"scoutdoc.UpdateCompany\"); m_companyId = companyId; } public UUID getCompanyId() { return m_companyId; } @Override protected boolean evalPermission(IPermission p) { // Precondition: p.getClass() == getClass() && getName().equals(p.getName()) && // getLevel() != PermissionLevel.NONE if (ScoutdocPermissionLevels.OWN == getLevel()) { UUID companyId = ((UpdateCompanyPermission) p).getCompanyId(); return BEANS.get(ICompanyService.class).isOwnCompany(companyId); } return true; // ScoutdocPermissionLevels.ALL == getLevel() } @Override public int hashCode() { final int prime = 31; int result = super.hashCode(); result = prime * result + ((m_companyId == null) ? 0 : m_companyId.hashCode()); return result; } @Override public boolean equals(Object obj) { if (this == obj) { return true; } if (!super.equals(obj)) { return false; } if (getClass() != obj.getClass()) { return false; } UpdateCompanyPermission other = (UpdateCompanyPermission) obj; if (m_companyId == null) { if (other.m_companyId != null) { return false; } } else if (!m_companyId.equals(other.m_companyId)) { return false; } return true; } } ACCESS.checkAndThrow(new UpdateCompanyPermission(companyId)); If such a service call would be expensive, one may cache the result of such a permission check. You have to implement this by yourself. A recommended solution is to create a wrapper around IPermissionCollection and this wrapper caches calls to IPermissionCollection#implies if required. 1. https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options 2. https://en.wikipedia.org/wiki/Clickjacking 3. https://tools.ietf.org/html/rfc7034 4. https://en.wikipedia.org/wiki/Cross-site_scripting 5. http://content-security-policy.com/ 6. https://en.wikipedia.org/wiki/JavaScript 7. https://en.wikipedia.org/wiki/Cascading_Style_Sheets 8. https://en.wikipedia.org/wiki/Framing_(World_Wide_Web) 9. https://en.wikipedia.org/wiki/WebSocket 10. https://developer.mozilla.org/en-US/docs/Web/API/EventSource 11. https://en.wikipedia.org/wiki/Ajax_%28programming%29 12. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object 13. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed 14. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/applet 15. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio 16. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video","title":"Security","component":"scout-docs","version":"23.2","name":"security","url":"/scout-docs/next/technical-guide/common-concepts/security.html","titles":[{"text":"Default HTTP Response Headers","hash":"default-http-response-headers","id":1},{"text":"X-Frame-Options","hash":"x-frame-options","id":2},{"text":"X-XSS-Protection","hash":"x-xss-protection","id":3},{"text":"Content Security Policy","hash":"content-security-policy","id":4},{"text":"Session Cookie (JSESSIONID Cookie) Configuration Validation","hash":"session-cookie-jsessionid-cookie-configuration-validation","id":5},{"text":"HttpOnly","hash":"httponly","id":6},{"text":"Secure","hash":"secure","id":7},{"text":"Secure Output","hash":"secure-output","id":8},{"text":"Encoding by Default","hash":"encoding-by-default","id":9},{"text":"Html Enabled","hash":"html-enabled","id":10},{"text":"CSS Class and Other Model Properties","hash":"css-class-and-other-model-properties","id":11},{"text":"HTML Builder","hash":"html-builder","id":12},{"text":"Styling in the UI-Layer","hash":"styling-in-the-ui-layer","id":13},{"text":"Manual Encoding","hash":"manual-encoding","id":14},{"text":"Using a White-List Filter","hash":"using-a-white-list-filter","id":15},{"text":"Authorization (Granting)","hash":"authorization-granting","id":16}]},"179":{"id":179,"text":"The org.eclipse.scout.rt.mail.smtp.SmtpHelper is an @ApplicationScoped Bean that provides means of sending emails described by javax.mail.internet.MimeMessage objects via SMTP. The SMTP connection can either be provided as a org.eclipse.scout.rt.mail.smtp.SmtpServerConfig object containing all the required connection parameters or as an already created javax.mail.Session object. The SmtpHelper also supports pooling of SMTP connections as described in the section Connection Pooling. The org.eclipse.scout.rt.mail.smtp.SmtpServerConfig class allows to specify details of an SMTP connection to be made. It supports the following properties: Property Description Example host The hostname or ip address of the SMTP server to use. localhost or 192.168.10.199. port The TCP port the SMTP server listens on. E.g. 25 or 465. username The username to use for authentication. - password The password to use for authentication. - useAuthentication Whether to use authentication or not. This setting is only effective, if a username has been provided. - useSmtps If true, the protocol will be 'smtps', else the protocol will be 'smtp'. - useStartTls If true, STARTTLS will be used to create the connection to the SMTP server. - sslProtocols Limits the SSL protocols to support when connecting to the SMTP server. The value is a space separated list of protocol names returned by the javax.net.ssl.SSLSocket.getSupportedProtocols() method. E.g. \"TLSv1.1 TLSv1.2\" additionalSessionProperties Can be used to specify any other property for the javax.mail.Session that is created from org.eclipse.scout.rt.mail.smtp.SmtpServerConfig. These additional properties are applied after all the other properties, thus may override already specified properties. \"mail.smtp.socketFactory.class\": \"com.example.net.SocketFactory\" poolSize Allows to specify the size of the connection pool for this SmtpServerConfig. The Default value is 0 which effectively deactives connection pooling. 4 maxMessagesPerConnection Allows to specify the max number of messages to be sent per connection when using connection pooling (poolSize > 0). The default value is 0 which effectively disables limiting the maximum number of messages sent per connection. You should consult with the operator of the SMTP server you are using to define this value. Local mail servers probably allow less than 20 messages per connection, bigger white mailers may allow up to 100 or even more. 20 Listing 1 demonstrates how to use the SmtpServerConfig class. Listing 1. Create and configure an instance of org.eclipse.scout.rt.mail.smtp.SmtpServerConfig @SuppressWarnings(\"unused\") SmtpServerConfig smtpServerConfig = BEANS.get(SmtpServerConfig.class) .withHost(\"mail.example.com\") .withPort(465) .withUsername(\"smtpuser\") .withPassword(\"smtpuserpwd\") .withUseAuthentication(true) .withUseSmtps(true) .withUseStartTls(true); Messages can be sent using the sendMessage Methods of the SmtpHelper class. In Order to prepare the message to be sent, Scout provides a number of classes and helpers: Class Description org.eclipse.scout.rt.mail.MailMessage Encapsulates all the information about a single mail message (sender, recipient, carbon-copy recipients, subject, body, attachments, etc.). org.eclipse.scout.rt.mail.MailParticipant Defines email address and name of a mail participant. A participant can be a recipient, a carbon-copy recipient, a blind-carbon-copy recipient, the sender and a replyTo contact. org.eclipse.scout.rt.mail.MailAttachment Contains information about an email attachment. org.eclipse.scout.rt.mail.MailHelper Provides various helper methods around email bodies, attachments, etc. Listing 2 shows the usage of the mentioned classes Scout provides in order to create a MimeMessage object. Listing 2. Create org.eclipse.scout.rt.mail.CharsetSafeMimeMessage object // create BinaryResource for an attachment. BinaryResource screenshotResource = BinaryResources.create() .withFilename(\"screenshot.jpg\") .withContentType(\"image/jpeg\") .withContent(bytes) .build(); // wrap BinaryResource in MailAttachment MailAttachment screenshotAttachment = new MailAttachment(screenshotResource); // prepare Scout MailMessage MailMessage mailMessage = BEANS.get(MailMessage.class) .withSender(BEANS.get(MailParticipant.class).withName(\"sender\").withEmail(\"me@example.com\")) .addToRecipient(BEANS.get(MailParticipant.class).withName(\"recipient\").withEmail(\"somebody@example.com\")) .withAttachment(screenshotAttachment) .withSubject(\"Screenshot\") .withBodyPlainText(\"Dear recipient,\\n\\nPlease have a look at my screenshot!\\n\\nRegards,\\nsender\"); // convert MailMessage to MimeMessage CharsetSafeMimeMessage mimeMessage = BEANS.get(MailHelper.class).createMimeMessage(mailMessage); In order to send the message you can either use a org.eclipse.scout.rt.mail.smtp.SmtpServerConfig object or an existing javax.mail.Session object as demonstrated in Listing 3 and Listing 4. Listing 3. Send email using an org.eclipse.scout.rt.mail.smtp.SmtpServerConfig object. BEANS.get(SmtpHelper.class).sendMessage(smtpServerConfig, mimeMessage); Listing 4. Send email using an existing javax.mail.Session object. // The password has to be provided additionally as it is not stored in the session object. BEANS.get(SmtpHelper.class).sendMessage(session, password, mimeMessage); The SmtpHelper provides some config properties that allow to modify certain behaviour. Key Description Example scout.smtp.debugReceiverEmail If this property is set, the SmtpHelper sends all emails to the specified email address instead of the recipients specified in the MimeMessage object. This is useful for development and testing environments. debug-receiver@example.com scout.smtp.connectionTimeout Specifies the connection timeout for SMTP connections in milliseconds. Default is 60 seconds. 30000 scout.smtp.readTimeout Specifies the read timeout for SMTP connections in milliseconds. Default is 60 seconds. 30000 Normally, the SmtpHelper opens a new connection for every email which is then closed after the email has been sent. If you want to send a lot of emails, this behaviour is rather inefficient as opening a new SMTP connection takes a long time compared to sending the email especially when using encrypted connections. To mitigate this overhead, the SmtpHelper supports pooling of SMTP connections which is activated using the poolSize property of SmtpServerConfig objects. If you set the pool size property to a value > 0, the SmtpHelper will create parallel connections up to the specified number. This means, that connection pooling is not possible when you use the sendMessage method accepting an already prepared javax.mail.Session object. Pooling in this context means the following: All SMTP server connections sharing the same SmtpServerConfig object (by same meaning being equal according to SmtpServerConfig.equals()) belong to the same pool For each different SmtpServerConfig object (again using SmtpServerConfig.equals()) up to the specified pool size connections are created Connections are not immediately closed after an email has been sent, instead they are returned to the pool as idle connections. Before creating new connections, idle connections are reused. When trying to send an email while all the SMTP connections are currently in use and the pool size has already been reached, the calling thread is blocked until a connection is returned as idle to the pool or as soon as the wait-for-connection-timeout has exceeded. As long as connections are open, a background job monitors their state and closes idle and old connections. The following config properties allow to modify the behavior of the connection pool implementation at the global level: key Description Example scout.smtp.pool.maxIdleTime Specifies how long in seconds a connection can be idle before it is closed by the background cleanup job. Default is 60 seconds. 30 scout.smtp.pool.maxConnectionLifetime Specifies how long in seconds a connection can be open before it is closed. This is to prevent connections from being open forever when sending emails on a regular basis. Default is 1h. 7200 scout.smtp.pool.waitForConnectionTimeout Max. wait time for SMTP connection in seconds. If the value is 0, callers will wait infinitely long for SMTP connections. Default is 300 seconds. 100","title":"SmtpHelper","component":"scout-docs","version":"23.2","name":"smtp-helper","url":"/scout-docs/next/technical-guide/common-concepts/smtp-helper.html","titles":[{"text":"SmtpServerConfig","hash":"smtpserverconfig","id":1},{"text":"Sending messages","hash":"sending-messages","id":2},{"text":"SmtpHelper Configuration","hash":"smtphelper-configuration","id":3},{"text":"Connection Pooling","hash":"connection-pooling-chapter","id":4},{"text":"SmtpConnectionPool Configuration","hash":"smtpconnectionpool-configuration","id":5}]},"180":{"id":180,"text":"The Scout HTML UI requires a web browser with modern built-in technologies: HTML 5, CSS 3, JavaScript (ECMAScript 5). Scout does its best to support all browsers widely in use today by making use of vendor-specific prefixes, polyfills or other workarounds. However, some older or obscure browsers are not supported deliberately, simply because they are lacking basic capabilities or the required effort would be beyond reason. Here is a non-exhaustive list of supported browsers: Desktop Mozilla Firefox >= 69 Chromium (like Google Chrome, Microsoft Edge, Brave or Opera) >= 71 Apple Safari >= 12.1 Mobile (Due to the nature of mobile operating systems, it is hard to specify exact versions of supported browsers. Usually, the screen size and the device speed are the limiting factors.) iOS >= 13 Android >= 5","title":"Browser Support","component":"scout-docs","version":"23.2","name":"browser-support","url":"/scout-docs/next/technical-guide/user-interface/browser-support.html","titles":[]},"181":{"id":181,"text":"JavaScript and CSS assets of a typical Scout application are built by Webpack using npm and Node.js. In order to make the building as easy as possible for you, there is a CLI module available. That module contains a default webpack and karma configuration and several build scripts you can use. The goal is to reduce the time you need to setup your build to a minimum. If you have created your Scout project using a Scout archetype, it should all be already setup for you. Nevertheless, you will get to a point where it is important to know how the building works in detail and how the several build tools are wired together. If you are there, this chapter should help you out. In every modern application you will have dependencies to other modules, either modules you created to separate your code, or third party modules like Scout. Such dependencies to other JavaScript modules are managed by the Node Package Manager (npm). So every module containing JavaScript or Less code needs to be a Node module with a package.json file that defines its dependencies. This setup gives you the possibility to easier integrate and update 3rd party JavaScript frameworks available in the huge npm registry. Scout itself is also published to that registry and will therefore be downloaded automatically once you execute npm install, as long as your package.json contains a Scout dependency. You will recognize a Scout module based on its name: all official Scout modules are published using the scope @eclipse-scout. The most important one is @eclipse-scout/core which contains the core runtime functionality. Other modules are @eclipse-scout/cli for the building support, @eclipse-scout/eslint-config for our ESLint rules, or @eclipse-scout/karma-jasmine-scout for enhanced testing support. In addition to Node module dependencies, a Scout application uses ES6 imports to define dependencies between each JavaScript files. So if you want to use a class or utility from @eclipse-scout/core, you’ll need to import that class or utility in your own JavaScript file. Listing 1. Importing ES6 modules import PersonFormModel from './PersonFormModel'; import {Form, models} from '@eclipse-scout/core'; export default class PersonForm extends Form { _jsonModel() { return models.get(PersonFormModel); } } In the code above there are two imports defined: the first one imports the file PersonFormModel into the variable PersonFormModel. The second one imports the class Form and the utility models from the scout core module. Notice that the first import directly addresses a specific file while the second import addresses the node module itself. This is possible because Scout provides an index file specifying all available exports. That file is linked in the package.json. If your application contains more than one Node modules as well, you can do the same. Scout provides a default Webpack configuration containing all the necessary settings for Webpack and the plugins needed for a typical Scout application setup. To make your application use the Scout defaults, you need to create a file called webpack.config.js in your Node module and reexport the Scout configuration. Listing 2. Using Scout’s default Webpack config const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { return baseConfig(env, args); }; If you don’t like the defaults you can easily adjust them by customizing the object returned by the baseConfig(env, args) call. Beside using the default configuration, you’ll need to configure some small things in order to make your application work. In this chapter we’ll have a look at these things you have to configure and the things that are provided by default. The main purpose of Webpack is to bundle the many small source files into one or a few larger JavaScript or CSS files which are included in the HTML files as resp. tags and therefore loaded by the browser. Scout does not provide any special bundling rules, but relies on the Webpack default configuration. It is optimized for best performance and user experience on modern browsers. If you want to customize the bundling please have a look at the SplitChunksPlugin of Webpack. To let Webpack know about your entry files you need to specify them in your webpack.config.js. Listing 3. Using Scout’s default Webpack config const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { const config = baseConfig(env, args); config.entry = { 'helloworld': './src/main/js/index.js', 'helloworld-theme': './src/main/js/theme.less', 'helloworld-theme-dark': './src/main/js/theme-dark.less' }; return config; }; In this example the application is called helloworld and there is a bundle created with the same name. In order to create the bundle, Webpack uses the entry file, which is index.js in this case, follows all the ES 6 imports and includes these files. It then extracts chunks into separate files based on the predefined Webpack default rules. So you don’t have to care about these chunks unless you want to customize it. Also notice that the same applies to CSS files. The above example defines 2 CSS bundles in addition to the JavaScript bundle: helloworld-theme.css and helloworld-theme-dark.css. There are no predefined chunks for CSS files, we just put all the CSS code in one big file. In addition to JavaScript and CSS resources bundled by webpack, your application will probably also require resources like images or fonts. Such resources should be placed in a resource folder, e.g. src/main/resources/WebContent if you use the Maven module structure, or just res otherwise. Because there are multiple modules that could provide such resources, you need to specify them in your webpack.config.js using the resDir array. Listing 4. Specifying res folders const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { args.resDirArray = ['src/main/resources/WebContent', 'node_modules/@eclipse-scout/core/res']; return baseConfig(env, args); }; In the snippet above the resDir array contains a folder of your module and a folder of Scout itself. The resource folder of Scout mainly contains the scoutIcons.woff, which is the icon font used by some Scout widgets. When the build runs all the folders specified by the resDir array are visited and the resources collected. These resources are then available under / (if you use the Scout backend). If you want to know how to start the build, have a look at the Command Line Interface (CLI). In order to use the latest EcmaScript features like the ES6 Modules but still support older browsers, Scout uses Babel to transpile ES6+ code into ES5. The transpiler is enabled by default if you use the Webpack configuration provided by Scout, so you don’t have to configure it by yourself. The CSS preprocessor used by Scout is Less, so the default webpack configuration already supports it by using the less-loader plugin. In order to profit from Scout`s less variables (see Styling]) we recommend to use Less as well. Since it is already configured, you won’t have to do anything but to write your CSS rules. Scout uses Karma as test runner for its unit tests. The tests itself are written with the test framework Jasmine. We also use some plugins like karma-jasmine-jquery, karma-jasmine-ajax or karma-jasmine-scout to make writing tests for a Scout application even easier. All this is configured in the file karma-defaults.js. If you want to use them too, you need to provide your own Karma file called karma.conf.js and import the defaults, similar to the Webpack Configuration. You can now adjust or override the defaults or just leave them as they are. To let Karma know about your tests, you need to define the entry point. Listing 5. karma.conf.js const baseConfig = require('@eclipse-scout/cli/scripts/karma-defaults'); module.exports = config => baseConfig(config, './src/test/js/test-index.js'); In the snippet above you see two things: The Scout defaults are imported and the entry point test-index.js is defined. This is all you need to do in this file if you are fine with the defaults. The file test-index.js defines where your unit tests are and what the context is for the Webpack build. Because a unit test is called a spec when using Jasmine, a typical test-index.js looks like this: Listing 6. karma.conf.js import {JasmineScout} from '@eclipse-scout/core/testing'; let context = require.context('./', true, /[sS]pec\\.js$/); JasmineScout.runTestSuite(context); This code tells the karma-webpack plugin to require all files ending in Spec.js. This will generate one big test bundle, but since source maps are enabled, you can debug the actual test files easily. The last line installs the given context and also runs a Scout app so that the Scout environment is properly set up. After running the tests, all results are put in a folder called test-results. There is a sub folder for each browser that executed the tests containing a file called test-results.xml. Since the karma-defaults.js uses the junit reporter, the file can be interpreted by any tool supporting the junit format, e.g. Jenkins. The Scout CLI is a bunch of npm-scripts that help you building and testing your application. In order to use them you need to add a devDependency to @eclipse-scout/cli to the package.json of your module. We also suggest to add some scripts to make the execution easier. If you use the Scout archetype, the following will be created for you. Listing 7. CLI dependency and scripts in package.json \"scripts\": { \"testserver:start\": \"scout-scripts test-server:start\", \"testserver:stop\": \"scout-scripts test-server:stop\", \"test:ci\": \"scout-scripts test:ci\", \"build:dev\": \"scout-scripts build:dev\", \"build:prod\": \"scout-scripts build:prod\", \"build:all\": \"scout-scripts build:dev && scout-scripts build:prod\", \"build:dev:watch\": \"scout-scripts build:dev:watch\" }, \"devDependencies\": { \"@eclipse-scout/cli\": \"10.0.0\" } Before you can open your application in the browser, you need to build it. The build takes all your source code and resources and creates the artifacts needed for the browser according to your Webpack Configuration. Once the build is complete all the produced artifacts are put in the target/dist folder. The target/dist folder contains three sub folders: dev: contains not minified versions of the JS and CSS bundles with Source Maps. The source maps are necessary to map the bundles to the actual source files which makes debugging a lot easier. The Scout server delivers such bundles if it runs in dev mode (scout.devMode=true). prod: contains minified versions of the JS and CSS bundles with restricted source maps (the maps don’t contain the actual source code, only the information necessary to create meaningful stack traces, see also the devtool property nosources-source-map). Content hashes are generated and added to the bundles for optimal cashing. The Scout server delivers such bundles if it runs in production mode (scout.devMode=false). res: contains all static resources from the various resource folders specified by the resDir array, see Static Web Resources. If the property scout.urlHints.enabled is set to true, the dev files can be requested on the fly even if the server does not run in devMode. Just add the query parameter ?debug=true and the files in the dev folder instead of the ones in the prod folder are delivered. This can be very useful to debug a deployed application. In order to start the build, use the following command: npm run build:dev This will fill the dev and res folders with the appropriate files. To make the files available to your browser you need to start a webserver. When using the Scout backend just start the class JettyServer. Once the build is complete and Jetty runs, you can open your application in the browser. If you now make adjustments on your JS or CSS files, you would have to rerun the buid script, which could be time consuming and annoying. To make your developer life easier you can run the following script instead: npm run build:dev:watch This will also build your application but additionally starts a watcher that watches your source code. As soon as you change your code that watcher will notice and start a build. Since it knows which files changed, only these files need to be rebuilt which makes it a lot faster. The build commands accept some arguments you can use to adjust the build without modifying your webpack config file. The following arguments are available: mode: development or production. This argument is set automatically when using build:dev or build:prod. clean: true, to clean the target/dist folder before each build. Default is false if watcher is enabled (build:dev:watch), otherwise true. progress: true, to show build progress in percentage. Default is true. profile: true, to show timing information for each build step. Default is false. resDirArray: an array containing directories which should be copied to dist/res. stats: object to control the build output. There are some presets available as shortcuts (e.g. 'detailed' or 'errors-only'), see also: https://webpack.js.org/configuration/stats/. In order to set an argument make sure to separate the arguments using -- from the command. Example: npm run build:dev -- --progress false All arguments are passed to the webpack config file as parameter args which is the second parameter. The first parameter called env is actually just a convenience accessor to args.env and does not contain system environment variables. If you want to access them just use the regular node syntax process.env. Before you can run your unit tests you need to properly setup the files as described in Karma Configuration. If all is setup correctly, you can run your tests using the following command: npm run test:ci This will execute all unit tests with the headless browser. The default headless browser is Chrome, so you need to make sure Chrome is installed. This includes your Continuous Integration Environment, if you plan to automatically run the tests on a regular basis (e.g. with Jenkins). The above command will execute the tests once and does not watch for changes. This is typically not desired during development. When you are actively developing a component and want to run your tests while you are developing, you can use the following command: npm run testserver:start This will start a real browser and enable the watch mode. This means every time you adjust your code and save it, the web pack build is started, the browser reloaded and your tests executed. If you don’t like the automatic browser reloading, you can press debug on the top right corner of the browser or manually navigate to http://localhost:9876/debug.html. The test commands accept some arguments you can use to adjust the karma runner without modifying your karma config file. All passed arguments are merged with the karma config object, so all karma configuration options are available (see http://karma-runner.github.io/4.0/config/configuration-file.html). Example usage: npm run test:ci -- --junitReporter.outputDir=custom-out-dir Please note that no type conversion happens which is especially relevant for boolean arguments. If you for example want to disable the watcher, you cannot use --auto-watch false. Instead, you would have to use --no-auto-watch. In addition to the karma configuration options you can also pass the webpack arguments (checkout Arguments for a list of available arguments). To do that, you need to use the argument called webpackArgs. Example: npm run testserver:start -- --webpackArgs.progress=false test:ci automatically disables the webpack progress because you don’t want the progress when the tests run on a continuous integration server. In case you need to test the files built by build:prod locally, follow this procedure: Stop the UI server. Run npm run build:prod, this script will copy minified script files to the /dist folder. Start the UI server. Stopping and starting the UI server makes sure the server-side script cache is cleared. Start the application with the URL parameter /?debug=false. Check your index.html in the browser. Each referenced script or CSS file should have a fingerprint, example: yourapp-2c6053b2fdf5b816fae5.min.js. If you set the config property scout.devMode to false instead of using the URL parameter, the resources will be loaded from the Java classpath. In that case you need to additionally copy the content of the dist folder to target/classes before starting the UI server. Or you can also set scout.loadWebResourcesFromFilesystem to true to disable classpath loading (see also LoadWebResourcesFromFilesystemConfigProperty). For the Scout code base we use ESLint to analyze the JavaScript and TypeScript code. The configuration we use is stored in the module @eclipse-scout/eslint-config. If you like, you can use the same configuration for your application, but you don’t have to. You can use your custom config or even a different linter. When using the Scout archetype to generate your app, the ESLint configuration is already setup for you and you don’t need to do the following steps. In order to use the Scout eslint-config, you need to add devDependencies to the modules @eclipse-scout/eslint-config and eslint in your package.json. Listing 8. ESLint Dependencies \"devDependencies\": { \"@eclipse-scout/eslint-config\": \"23.1.0\", \"eslint\": \"8.27.0\" } Then create a file called .eslintrc.js with the following content: Listing 9. .eslintrc.js module.exports = { extends: '@eclipse-scout' }; This tells ESLint to inherit the configuration from the Scout module. In order to run the analysis, you can either use an IDE that supports it (e.g. IntelliJ), or the command line. npx eslint . If the command takes very long and prints a lot of errors, you may have to ignore the target/dist folder, see ESLint Ignore. The command above will analyze your current directory including all sub-directories. Depending on your environment, it is likely that you’ll see some errors regarding linebreaks. This is because the Scout config enforces the UNIX format (LF). You can now either convert the linebreaks of your files to that format and adjust your editor to always use the UNIX format, or you can disable the rule. To do that, just add the following to your .eslintrc.js: Listing 10. Disabling the linebreak rule rules: { 'linebreak-style': 'off' } Now run the command again to make the linebreak errors disappear. If you plan to configure your IDE to use the UNIX linebreak format, we recommend having a look at Editor Config. The file can be interpreted by various IDEs. Just add end_of_line=lf to that file and you are done. Similar to .gitignore, you can create a file called .eslintignore to exclude specific files or directories from the analysis. Because analyzing the build output probably does not make any sense, we recommend to at least ignore the target folder. The only thing you need to do is to create that file and add a line with the word target. For more details please see the official ESLint documentation at https://eslint.org/docs/user-guide/configuring#eslintignore. If you are writing a Scout JS library module, you probably want to prebuild your JavaScript code so the consumer of your library don’t have to do it. This is especially important if you write your module in TypeScript because the Scout build does not transpile TypeScript code of libraries by default. Basically, the following things are necessary to create a library: Edit your webpack.config.js or create a new one if you don’t have one already. Create a new entry point and define a name for your library. Use the libraryConfig function provided by Scout to create a library configuration. The library config takes care of defining the externals (the code that won’t be bundled into your library) based on the dependencies of your package.json. This means, if an import points to code from a dependency (or dev-, optional-, bundled- or peer-dependency), the code won’t be bundled and the import is preserved. The library itself will be an ESM module and provide an export so it can be imported by consumers. Link the entry point (main) of your package.json to the entry point of your library. Define where your entry point and your type declarations are in a bundled module using publishConfig. The library will be created in the dist folder, as well as the type declarations (see the outDir property of your tsconfig.json). The attributes in the publishConfig will replace the regular attributes when the library is published. During development, the publishConfig has no effect. Ensure the dist folder will be part of the bundled module by adding it to the list of files in package.json. Consult the Webpack Guide if you want to learn more about authoring libraries in general. Listing 11. Library Webpack Config const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { args.resDirArray = []; const config = baseConfig(env, args); return { entry: { 'your-library': './src/main/js/index.ts' (2) }, ...baseConfig.libraryConfig(config) (3) }; }; Listing 12. package.json for a library { \"main\": \"./src/main/js/index.ts\", \"publishConfig\": { \"main\": \"./target/dist/dev/your-library.js\", \"types\": \"./target/dist/d.ts/index.d.ts\" }, \"files\": [ \"src/main/js\", \"target/dist\" ] } If you need to build multiple libraries in a single npm module, you can use the run argument of Scout`s webpack build to control which library should be built. Scout itself for example uses it to build a testing library (@eclipse-scout/core/testing) with some utilities for writing tests. For each library specified by the run argument a new webpack build is started, so the libraries are built consecutively which is ideal for the memory consumption. To use this feature, just check for the run args in your webpack config and load another config instead. module.exports = (env, args) => { args.resDirArray = []; if (args.run == 'other') { return require('./webpack.config.other.js')(env, args); } // ... default config }; In the webpack.config.other.js define your other library. If it should only contain a part of the source code, make sure to specify the externals correctly. The function rewriteIndexImports of the base config may help you to externalize all imports to the index file. const baseConfig = require('@eclipse-scout/cli/scripts/webpack-defaults'); module.exports = (env, args) => { const config = baseConfig(env, args); let otherConfig = { entry: { 'other-library': './src/main/js/folder-with-other-library/index.ts' }, ...baseConfig.libraryConfig(config) }; otherConfig.externals = [ baseConfig.rewriteIndexImports('@your/core', 'folder-with-other-library'), otherConfig.externals ]; return otherConfig; }; Then, make sure every library will be built by specifying the run argument in the package.json: { \"scripts\": { \"build:dev\": \"scout-scripts build:dev --run default other\", \"build:prod\": \"scout-scripts build:prod --run default other\" } } Finally, you need to define the entry points in your package.json. You can do so using the exports attribute. Listing 13. package.json for a library { \"exports\": { \".\": \"./src/main/js/index.ts\", \"./other\": \"./src/main/js/folder-with-other-library/index.ts\", \"./src/main/js/*\": \"./src/main/js/*\" }, \"main\": \"./src/main/js/index.ts\", \"publishConfig\": { \"exports\": { \".\": \"./target/dist/dev/your-library.js\", \"./testing\": \"./target/dist/dev/other-library.js\", \"./src/main/js/*\": \"./src/main/js/*\" }, \"main\": \"./target/dist/dev/your-library.js\" } } Important: As soon as the exports attribute is used, consumers of the module can only import code that is explicitly exported. In order to still allow imports to individual source files directly (e.g. for CSS Files), you can export them using wildcard syntax (./src/main/js/*). If you don’t need or want that, just omit this configuration.","title":"Build Stack","component":"scout-docs","version":"23.2","name":"build-stack","url":"/scout-docs/next/technical-guide/user-interface/build-stack.html","titles":[{"text":"Dependency Management","hash":"dependency-management","id":1},{"text":"ES6 Modules","hash":"es6-modules","id":2},{"text":"Webpack Configuration","hash":"webpack-configuration","id":3},{"text":"Bundling","hash":"bundling","id":4},{"text":"Static Web Resources","hash":"static-web-resources","id":5},{"text":"EcmaScript Transpiler","hash":"ecmascript-transpiler","id":6},{"text":"CSS Preprocessor","hash":"css-preprocessor","id":7},{"text":"Karma Configuration","hash":"karma-configuration","id":8},{"text":"Reporting","hash":"reporting","id":9},{"text":"Command Line Interface (CLI)","hash":"command-line-interface-cli","id":10},{"text":"Building","hash":"building","id":11},{"text":"Arguments","hash":"webpack-arguments","id":12},{"text":"Testing","hash":"testing","id":13},{"text":"Arguments","hash":"arguments","id":14},{"text":"Test prod scripts on your local machine","hash":"test-prod-scripts-on-your-local-machine","id":15},{"text":"ESLint","hash":"eslint","id":16},{"text":"ESLint Ignore","hash":"eslint-ignore","id":17},{"text":"Authoring Libraries","hash":"authoring-libraries","id":18},{"text":"Multiple Libraries in a Single Module","hash":"multiple-libraries-in-a-single-module","id":19}]},"182":{"id":182,"text":"The Desktop Layout can be configured using the IDesktop.setBenchLayoutData method. This property is observed and might be changed during the application lifecycle. The desktop consists out of 9 view stacks (see Figure 1). Each form can be assigned to a single view stack using the property DisplayViewId (IForm.getConfiguredDisplayViewId). If multiple forms are assigned to the same view stack the views will be displayed as tabs where the top form is visible and the corresponding tab selected. Tabs are only visible if the form does have a title, subtitle or an image. Figure 1. Desktop Bench overview The east, center and west columns are separated with splitters which can be moved according to the layout data properties. Each column is split into a north, center and south part. Within a column the north, center and south parts can not differ in their width. The modifications (splitter movements) are cached when a cache key (BenchLayoutData.withCacheKey) is set. In case the cache key is null the layout starts always with the initial values. An example of a bench layout data configuration with a fixed north (N) view stack and a south (S) view stack with a minimal size. See org.eclipse.scout.rt.client.ui.desktop.bench.layout.FlexboxLayoutData API for the documentation of the properties. desktop.setBenchLayoutData( (1) new BenchLayoutData() .withCacheKey(\"a-cache-key\") (2) .withCenter( (3) new BenchColumnData() .withNorth(new FlexboxLayoutData().withGrow(0).withShrink(0).withInitial(280).withRelative(false)) (4) .withCenter(new FlexboxLayoutData()) (5) .withSouth(new FlexboxLayoutData().withShrink(0).withInitial(-1)))); (6) 1 set the BenchLayoutData to the desktop. 2 set a cache key to store the layout modifications (dragging splitters) to the session store. Aware the settings are stored to the browsers session store they are not transferred over different browsers nor systems. 3 configure the center column (N, C, S). 4 The north part is fixed in size so the splitter between north (N) and center © view stack is disabled. The size is fixed to 280 pixel. 5 Use default for the center © view stack. 6 The south part is using the UI height as initial size and is growable but not shrinkable.","title":"Desktop","component":"scout-docs","version":"23.2","name":"desktop","url":"/scout-docs/next/technical-guide/user-interface/desktop.html","titles":[{"text":"Desktop Bench Layout","hash":"desktop-bench-layout","id":1}]},"183":{"id":183,"text":"The extensibility concepts of Scout allow you to extend or even replace methods of Scout widgets or objects. You can also use it to extend your own objects or objects from a Scout based third party library. There are mainly two ways to extend an object: Extension by Sub-Classing Extension by Composition Extending an object using sub-classing is simple and straight forward. It can either be used to create a custom widget and only use it for certain cases. And it can even be used to replace a specific widget completely, so your widget will be used every time the original widget is requested. To extend from a widget, just create a new class, extend from the desired widget class and override the methods you want to adjust. Listing 1. SpecialStringField.js import {StringField} from '@eclipse-scout/core'; export default class SpecialStringField extends StringField { // Override desired methods } Then, register it in your index file as usual and use it in your code by creating a new instance with scout.create('yournamespace.SpecialStringField') or as part of a model: Listing 2. index.js // ... export {default as SpecialStringField} from './SpecialStringField'; // ... window.yournamespace = Object.assign(window.yournamespace || {}, self); Listing 3. ExampleFormModel.js export default () => ({ rootGroupBox: { objectType: 'GroupBox', fields: [ { id: 'SpecialField', objectType: 'yournamespace.SpecialStringField', label: 'Your special field' } ] } }); If you want to replace every StringField in your application with SpecialStringField, you need to register a new object factory for the objectType StringField as follows: Listing 4. Adding a new object factory registration import {SpecialStringField} from './index'; import {scout} from '@eclipse-scout/core'; scout.addObjectFactories({ 'StringField': () => new SpecialStringField() }); More details can be found in the chapter [Object Factory]. If you need to extend a widget that uses a model (see [Creating a Widget Declaratively]), you may have to extend that model as well. To do so, extend the widget as described above and either adjust the widgets in the init function directly. Listing 5. ExtendedForm.js import ExampleForm from './ExampleForm'; export default class ExtendedForm extends ExampleForm { _init(model) { super._init(model); this.widget('SpecialField').setLabel('New label for the special field'); } } Or, for more complex cases, you can put your model adjustments in a separate file and use the declarative approach. To do so, override the _jsonModel method and use models.extend to adapt the original model. Listing 6. ExtendedForm.js with separate model import {models} from '@eclipse-scout/core'; import ExampleForm from './ExampleForm'; import ExtendedFormModel from './ExtendedFormModel'; export default class ExtendedForm extends ExampleForm { _jsonModel() { let baseModel = super._jsonModel(); return models.extend(ExtendedFormModel, baseModel); } } Then, create a new file that will contain your model extensions. Use the target keyword to specify which widget should be adjusted. With the operation keyword you define, whether properties should be adjusted (appendTo) or new objects should be inserted (insert). The following example contains an extension for the field with the id SpecialField that sets a new value for the label. Listing 7. ExtendedFormModel.js export default () => ({ type: 'extension', extensions: [ { operation: 'appendTo', target: { id: 'SpecialField' }, extension: { label: 'New label for the special field' } } ] }); Extension by Composition allows to have multiple, independent extensions of a Scout object. It also allows the adjustment of super classes of objects from which it is not possible to inherit, e.g. FormField or even Widget. This extension feature works by wrapping functions on the prototype of a Scout object with a wrapper function which is provided by an extension. The extension feature doesn’t rely on subclassing, instead we simply register one or more extensions for a single Scout class. When a function is called on an extended object, the functions are called on the registered extensions first. Since a Scout class can have multiple extensions, we speak of an extension chain, where the last element of the chain is the original (extended) object. The base class for all extensions is Extension. This class is used to extend an existing Scout object. In order to use the extension feature you must subclass Extension and implement an init function, where you register the functions you want to extend. Example: import {Extension, StringField} from '@eclipse-scout/core'; export default class MyExtension extends Extension { init() { this.extend(StringField.prototype, '_init'); } } Then you implement functions with the same name and signature on the extension class. Example: _init(model) { // Call the original _init() method of the StringField class this.next(model); // Extend the instance with a new property called bar with the value foo // -> EVERY string field now has this new property this.extended.setProperty('bar', 'foo'); } The extension feature sets two properties on the extension instance before the extended method is called. These two properties are described below. The function scope (this) is set to the extension instance when the extended function is called. next is a reference to the next extended function or the original function of the extended object, in case the current extension is the last extension in the extension chain. extended is the extended or original object. All extensions must be registered in the _installExtensions function of your App (make sure to use the namespace which is defined in your index.js instead of yournamespace). You can find your app in your entrypoint file that is linked in your webpack.config.js. If you already have a custom App, just override _installExtensions and register the extension. Otherwise, you need to create a custom App first by extending from the Scout App (or RemoteApp for Scout Classic) and make sure this new app is initialized rather than the default one. Listing 8. CustomApp.js import {App, Extension} from '@eclipse-scout/core'; export default class CustomApp extends App { _installExtensions() { Extension.install([ 'yournamespace.MyExtension' ]); } } Listing 9. Entry point file import CustomApp from './CustomApp'; let app = new CustomApp(); app.init(); Required version: The API described here requires Scout version 4.2 or newer. When working with large business applications it is often required to split the application into several modules. Some of those modules may be very basic and can be reused in multiple applications. For those it makes sense to provide them as binary library. But what if you have created great templates for your applications but in one special case you want to include one more column in a table or want to execute some other code when a pre-defined context menu is pressed? You cannot just modify the code because it is a general library used everywhere. This is where the extensibility concept helps. To achieve this two new elements have been introduced: Extension Classes: Contains modifications for a target class. Modifications can be new elements or changed behavior of existing elements. Extension Registry: Service holding all Extensions that should be active in the application. The Scout extensibility concept offers three basic possibilites to extend existing components: Extensions Changing behavior of a class Contributions Add new elements to a class Moves Move existing elements within a class The following chapers will introduce this concepts and present some examples. Extensions contain modifications to a target class. This target class must be extensible. All elements that implement org.eclipse.scout.rt.shared.extension.IExtensibleObject are extensible. And for all extensible elements there exists a corresponding abstract extension class. Examples: AbstractStringField is extensible. Therefore, there is a class AbstractStringFieldExtension. AbstractCodeType is extensible. Therefore, there is a class AbstractCodeTypeExtension. Target classes can be all that are instanceof those extensible elements. This means an AbstractStringFieldExtension can be applied to AbstractStringField and all child classes. Extensions contain methods for all Scout Operations (see Exec Methods). Those methods have the same signature except that they have one more input parameter. This method allows you to intercept the given Scout Operation and execute your own code even though the declaring class exists in a binary library. It is then your decision if you call the original code or completely replace it. To achieve this the Chain Pattern is used: All extensions for a target class are called as part of a chain. The order is given by the order in which the extensions are registered. And the original method of the Scout element is an extension as well. Extensions to specific types of elements are prepared as abstract classes: AbstractGroupBoxExtension AbstractImageFieldExtension The following image visualizes the extension chain used to intercept the default behavior of a component: The following example changes the initial value of a StringField called NameField: Listing 10. Extension for NameField public class NameFieldExtension extends AbstractStringFieldExtension { public NameFieldExtension(NameField owner) { super(owner); } @Override public void execInitField(FormFieldInitFieldChain chain) { chain.execInitField(); // call the original exec init. whatever it may do. getOwner().setValue(\"FirstName LastName\"); // overwrite the initial value of the name field } } Note: The type parameter of the extension (e.g. NameField) denotes the element which is extended. The extension needs to be registeres when starting the application: Listing 11. Register extension for NameField Jobs.schedule(() -> BEANS.get(IExtensionRegistry.class).register(NameFieldExtension.class), Jobs.newInput() .withRunContext(ClientRunContexts.copyCurrent()) .withName(\"register extension\")); The section before explained how to modify the behavior of existing Scout elements. This section will describe how to contribute new elements into existing containers. This is done by using the same mechanism as before. It is required to create an Extension too. But instead of overwriting any Scout Operation we directly define the new elements within the Extension. A lot of new elements can be added this way: Fields, Menus, Columns, Codes, …​ Some new elements may also require a new DTO (FormData, TablePageData, TableData) to be filled with data from the server. The corresponding DTO for the extension is automatically created when using the SDK 4.2 or newer and having the @Data annotation specified on your extension. As soon as the DTO extension has been registered in the IExtensionRegistry service it is automatically created when the target DTO is created and will also be imported and exported automatically! The following example adds two new fields for salary and birthday to a PersonForm. Please note the @Data annotation which describes where the DTO for this extension should be created. Listing 12. Extension for PersonForm /** * Extension for the MainBox of the PersonForm */ @Data(PersonFormMainBoxExtensionData.class) public class PersonFormMainBoxExtension extends AbstractGroupBoxExtension { public PersonFormMainBoxExtension(MainBox ownerBox) { super(ownerBox); } @Order(2000) @ClassId(\"fda7cd67-0df1-4194-9d70-22a9b3ce890d\") public class SalaryField extends AbstractBigDecimalField { } @Order(3000) @ClassId(\"478037fb-759f-4fa1-b737-c77f903c6881\") public class BirthdayField extends AbstractDateField { } } Beware: Field names must be unique throughout form and extensions (e.g. there may not be a field on the form or another extension contributing to the same form with the same field name). However, it is possible to create templates (e.g. a group box as container with its own @FormData annotation) which is added multiple times through a form or extensions. The extension data must be registered manually in the job like in the example before: Listing 13. Register extension for PersonForm BEANS.get(IExtensionRegistry.class).register(PersonFormMainBoxExtension.class); Then the SDK automatically creates the extension DTO which could look as follows. Please note: The DTO is generated automatically, but you have to register the generated DTO manually! Listing 14. Extension Data for PersonForm @Extends(PersonFormData.class) @Generated(value = \"org.eclipse.scout.docs.snippets.person.PersonFormMainBoxExtension\", comments = \"This class is auto generated by the Scout SDK. No manual modifications recommended.\") public class PersonFormMainBoxExtensionData extends AbstractFormFieldData { private static final long serialVersionUID = 1L; public Birthday getBirthday() { return getFieldByClass(Birthday.class); } public Salary getSalary() { return getFieldByClass(Salary.class); } @ClassId(\"478037fb-759f-4fa1-b737-c77f903c6881-formdata\") public static class Birthday extends AbstractValueFieldData { private static final long serialVersionUID = 1L; } @ClassId(\"fda7cd67-0df1-4194-9d70-22a9b3ce890d-formdata\") public static class Salary extends AbstractValueFieldData { private static final long serialVersionUID = 1L; } } You can also access the values of the DTO extension as follows: Listing 15. Access extended fields // create a normal FormData // contributions are added/imported/exported automatically PersonFormData data = new PersonFormData(); // access the data of an extension PersonFormMainBoxExtensionData c = data.getContribution(PersonFormMainBoxExtensionData.class); c.getSalary().setValue(new BigDecimal(\"200.0\")); Extending a AbstractForm and one (or more) of its AbstractFormHandlers that can be achieved as follows: Listing 16. Extension for PersonForm public class PersonFormExtension extends AbstractFormExtension { public PersonFormExtension(PersonForm ownerForm) { super(ownerForm); } @Override public void execInitForm(FormInitFormChain chain) { chain.execInitForm(); // Example logic: Access the form, disable field getOwner().getNameField().setEnabled(false, true, true); } public void testMethod() { MessageBoxes.create().withHeader(\"Extension method test\").withBody(\"A method from the form extension was called\").show(); } public static class NewFormHandlerExtension extends AbstractFormHandlerExtension { public NewFormHandlerExtension(NewHandler owner) { super(owner); } @Override public void execPostLoad(FormHandlerPostLoadChain chain) { chain.execPostLoad(); // Example logic: Show a message box after load MessageBoxes.create().withHeader(\"Extension test\").withBody(\"If you can read this, the extension works correctly\").show(); // Access element from the outer extension. PersonFormExtension extension = ((AbstractForm) getOwner().getForm()).getExtension(PersonFormExtension.class); extension.testMethod(); } } } There are a few things to note about this example: It is only necessary to register the outer form extension, not the inner handler extension as well. The inner handler extension must be static, otherwise an Exception will occur when the extended form is being started! You can access the element you are extending by calling getOwner(). Since you cannot access elements from your form extension directly from the inner handler extension (because it is static), you will need to retrieve the form extension via the getExtension(Class>) method on the extended object, as done here to retrieve the form extension from the form handler extension. You can also move existing Scout elements to other positions. For this you have to register a move command in the IExtensionRegistry. As with all extension registration it is added to the extension registration Job in your Activator class: Listing 17. Move NameField to LastBox BEANS.get(IExtensionRegistry.class).registerMove(NameField.class, 20d, LastBox.class); The new extensibility concept is added on top of all existing extension possibilities like injection or sub-classing. Therefore, it works together with the current mechanisms. But for some use cases (like modifying template classes) it offers a lot of benefits. Therefore no migration is necessary. The concepts do exist alongside each others. However there is one impact: Because the Scout Operation methods are now part of a call chain they may no longer be invoked directly. So any call to e.g. execValidateValue() is no longer allowed because this would exclude the extensions for this call. The Scout SDK marks such calls with error markers in the Eclipse Problems view. If really required the corresponding intercept-Method can be used. So instead directly calling myField.execChangedValue you may call myField.interceptChangedValue().","title":"Extensibility","component":"scout-docs","version":"23.2","name":"extensibility","url":"/scout-docs/next/technical-guide/user-interface/extensibility.html","titles":[{"text":"Scout JS Extensibility","hash":"scout-js-extensibility","id":1},{"text":"Extension by Sub-Classing","hash":"extension-by-sub-classing","id":2},{"text":"Extending a Model","hash":"extending-a-model","id":3},{"text":"Extension by Composition","hash":"extension-by-composition","id":4},{"text":"Scout Classic Extensibility","hash":"scout-classic-extensibility","id":5},{"text":"Overview","hash":"overview","id":6},{"text":"Extensions","hash":"extensions","id":7},{"text":"Extending a StringField example","hash":"extending-a-stringfield-example","id":8},{"text":"Contributions","hash":"contributions","id":9},{"text":"Extending a form and a handler","hash":"extending-a-form-and-a-handler","id":10},{"text":"Move elements","hash":"move-elements","id":11},{"text":"Migration","hash":"migration","id":12}]},"184":{"id":184,"text":"A form field is a special kind of a widget. It is mainly used on forms but may actually be added to any other widget. Every form field contains of the following parts: Figure 1. Parts of a form field Typical form fields are StringField, DateField or TableField. All these fields have the API of FormField in common (like setLabel(), setErrorStatus(), etc.) but also provide additional API. Some form fields are actually just a wrapper for another widget. This is for example the case for the TableField. The Table itself may be used stand-alone, just call scout.create(Table, {}). But if you want to use it in a GroupBox, which is a form field, you have to use a TableField wrapping the Table.","title":"Form Field","component":"scout-docs","version":"23.2","name":"form-field","url":"/scout-docs/next/technical-guide/user-interface/form-field.html","titles":[]},"185":{"id":185,"text":"A form is typically used for two purposes: Allowing the user to enter data in a structured way Displaying the data in a structured way This is achieved by using Form Field]s. Every form has one root group box (also called main box) which has 1:n form fields. The form fields are layouted using the logical grid layout, unless no custom layout is used. This makes it easy to arrange the fields in a uniform way. A form may be displayed in various ways, mainly controlled by the property displayHint. The following display hints are available by default: view: the form will be opened in a tab and will take full width and height of the bench dialog: the form will be opened as overlaying dialog and will be as width and height as necessary popup-window: the form will be opened in a separate browser window (please note that this feature does not work properly with Internet Explorer) To display the form, just set one of the above display hints and call form.open(). Beside opening the form as separate dialog or view, you can also embed it into any other widget because it is actually a widget by itself. Just call form.render() for that purpose. When working with forms, you likely want to load, validate and save data as well. The form uses a so called FormLifecycle to manage the state of that data. The lifecycle is installed by default, so you don’t have to care about it. So whenever the user enters some data and presses the save button, the data is validated and if invalid, a message is shown. If it is valid the data will be saved. The following functions of a form may be used to control that behavior. open: calls load and displays the form once the loading is complete. load: calls _load and importData which you can implement to load the data and then marks the fields as saved to set their initial values. Finally, a postLoad event is fired. save: validates the data by checking the mandatory and validation state of the fields. If every mandatory field is filled and every field contains a valid value, the exportData and _save functions are called which you can implement to save the data. After that every field is marked as saved and the initial value set to the current value. reset: resets the value of every field to its initial value marking the fields as untouched. ok: saves and closes the form. cancel: closes the form if there are no changes made. Otherwise, it shows a message box asking to save the changes. close: closes the form and discards any unsaved changes. abort: called when the user presses the \"x\" icon. It will call close if there is a close menu or button, otherwise cancel. If you need to perform form validation which is not related to a particular form-field, you can implement the _validate function. This function is always called, even when there is no touched field. If you embed the form into another widget, you probably don’t need the functions open, ok, close, cancel and abort. But load, reset and save may come in handy as well. Because it is quite common to have a button activating one of these functions (like an 'ok' or 'cancel' button), the following buttons (resp. menus because they are used in the menu bar) are available by default: OkMenu, CancelMenu, SaveMenu, ResetMenu, CloseMenu.","title":"Form","component":"scout-docs","version":"23.2","name":"form","url":"/scout-docs/next/technical-guide/user-interface/form.html","titles":[{"text":"Form Lifecycle","hash":"form-lifecycle","id":1}]},"186":{"id":186,"text":"The HTML document parser is only available in the Scout UI server. If your Scout JS application uses a different backend, you cannot use the features described in this chapter. The class HtmlDocumentParser is used by the Scout UI server in order to create dynamic HTML output on the server-side. Like JSP the parser supports a set of tags that are processed by the sever. The main purpose of the parser is to provide functions used for login.html and index.html, like bootstrapping and localization before JavaScript can be executed in the browser. Note: some tags like scout-version and scout-text will be removed from the DOM once the Scout App is initialized. Outputs the context-path (or the root-directory) of the deployed web application as base tag in the HTML document. Example: Output: This tag is used for server-side inlcudes, which means you can embed the HTML content of another file into the current HTML document. This avoids unnecessary code duplication by referencing the same fragement in multiple HTML documents. Example: Depending on the current user language provided by the browser, this tag outputs a list of localized text strings. The texts are used to display error-messages during login in the correct language, because at this point we don’t have a Scout session and thus no user language. The parser replaces the message tag through scout-text tags. These tags will be read by scout.texts#readFromDOM. Example: Output: Converts the tag to a regular script tag in the HTML document so that the referenced JavaScript bundle can be loaded by the browser. Prior to that, the file name will be augmented depending on Scout’s runtime properties: if caching is enabled an additional fingerprint is added to the filename. If minifying is enabled the suffix \".min\" is appended to the filename. This tag may be used if custom chunks are defined in webpack.config.js and names of these chunks are known at development time. Example: Output: Writes all script tags in the HTML document which contain the webpack entryPoint name given. This requires that no custom splitChunks are defined. It automatically includes all chunks that are required by the given entry point. The entry point name must match the name in the entry section of the webpack.config.js file. Example: Output: Converts the tag to a regular style tag in the HTML document so that the referenced CSS bundle can be loaded by the browser. Prior to that, the file name will be augmented depending on Scout’s runtime properties: if caching is enabled an additional fingerprint is added to the filename. If minifying is enabled the suffix \"-min\" is appended to the filename. Example: Output: Writes all link tags in the HTML document which contain the webpack entryPoint name given. This requires that no custom splitChunks are defined. It automatically includes all chunks that are required by the given entry point. The entry point name must match the name in the entry section of the webpack.config.js file. Example: Output: Outputs the current version of the Scout application as scout-version tag in the HTML document. This tag is read by scout.App#_initVersion. Example: Output:","title":"HTML Document Parser","component":"scout-docs","version":"23.2","name":"html-document-parser","url":"/scout-docs/next/technical-guide/user-interface/html-document-parser.html","titles":[{"text":"scout:base","hash":"scoutbase","id":1},{"text":"scout:include","hash":"scoutinclude","id":2},{"text":"scout:message","hash":"scoutmessage","id":3},{"text":"scout:script","hash":"scoutscript","id":4},{"text":"scout:scripts","hash":"scoutscripts","id":5},{"text":"scout:stylesheet","hash":"scoutstylesheet","id":6},{"text":"scout:stylesheets","hash":"scoutstylesheets","id":7},{"text":"scout:version","hash":"scoutversion","id":8}]},"187":{"id":187,"text":"A lot of Scout widgets support icons. For instance a menu item can show an icon next to the menu text. Icons in Scout can be either a bitmap image (GIF, PNG, JPEG, etc.), an SVG or a character from an icon-font. An example for an icon-font is the scoutIcons.woff which comes shipped with Scout. It’s a good practice to define the available icons in your application in a class that defines each icon as a constant. Create a class Icons in the shared module of your project. These constants should be references, when you set the IconId property in your code. For bitmap images you simply specify the filename of the image file without the file extension. Place all your icon files in the resource folder of your client module. Assuming your project name is \"org.scout.hello\", the correct location to store icon files would be: org.scout.hello.client/ # Client project directory src/main/resources/ # Resources directory org/scout/hello/client/icons/ # Path to icons application_logo.png person.png ... Listing 1. Icons.java // Bitmap image (references icons/application_logo.png) public static final String ApplicationLogo = \"application_logo\"; // Character from icon-font scoutIcons.woff (default) public static final String Calendar =\"font:\\uE003\"; // Character from a custom icon-font public static final String Phone =\"font:awesomeIcons \\uF095\"; Listing 2. Usage of iconId in a Scout widget @Override protected String getConfiguredIconId(){ return Icons.Calendar; } The icons used by Scout itself are mainly font icons. Even though font icons are scalable, an icon can get very thick when the size is increased, which is not always desired. To overcome that, Scout icons come in 2 flavors: regular and light. The regular icons can be used, if the icon is displayed at about 16px. This is the case for most widgets (menu, button etc.) If the icon should be displayed larger, the light icons can be used. To use a light icon for your custom widget, just set the font-weight to @icon-font-weight-light. If you create a custom icon font (or use an existing one), you may want to use icons that are compatible with the Scout icons in terms of line width. This allows you to use the Scout icons and your custom icons side by side. Alternatively, only use your custom icons and forget about the Scout icons. The scout icons use the following dimensions: Regular: 1.5px line width and 24px artboard height Light: 1px line width and 24px artboard height You can use your own icon font. The required file format for an icon font is .woff. For the following examples we assume the name of your font file is awesomeIcons.woff. The following steps are required: Place the font file in the WebContent/fonts directory of your html.ui module. This makes it available for http requests on the URL http://[base]/fonts/awesomeIcons.woff. Create a CSS/LESS definition to reference the icon font in stylesheets (e.g. in a file called fonts.less). Make sure the definition is added to the index.less of your project. Listing 3. The CSS/LESS font definition should look like this: @font-face { font-family: awesomeIcons; font-weight: normal; src: url('fonts/awesomeIcons.woff') format('woff'); } /* Overrides definitions in fonts.css > .font-icon * Use iconId 'font:awesomeIcons [character]' in Scout model. * See icons.js and usage of this class to see how iconId is used. */ .font-awesomeIcons { font-family: awesomeIcons, @font-default-family; } To check if your CSS definition is correct, you should download the CSS file directly via URL and check if the CSS file contains the required font definition. Have a look at your index.html to find the path to your CSS (e.g. http://[base]/yourapp-theme.css). When you request resources from the WebContent folder via http, Scout will find resources from other modules on the classpath too. Thus the scoutIcons.woff is always available in a Scout project. However, you must avoid naming conflicts, since at runtime all files exist on the same classpath. Here’s what we do to create and maintain our own icon font scoutIcons.woff. There may be other methods to achieve the same. To create and modify our icon font we use the online application IcoMoon. IcoMoon allows you to assemble a set of icons from various sources (e.g. FontAwesome or custom SVG graphics) and create a font file from that set. You can export/import your icon set from and to IcoMoon, and you should store the files exported from IcoMoon in a SCM system like GIT. IcoMoon stores all important data in the file selection.json. Make sure you also store the raw SVG graphics you’ve uploaded to IcoMoon in your SCM, in case you have to change a single icon later. To edit the icon font in IcoMoon follow these steps: Import selection.json in IcoMoon, click on the \"Import Icons\" button. With the Select tool (arrow) you select the icons you want to add to your set. You can also add one or more characters from other icon fonts like FontAwesome by choosing Add Icons From Library…​ Your can import your custom SVG graphics with Import to Set, which you find in the hamburger menu on the icon set. The SVG graphic should have the same size as the other icons in the set and must use only a single color, black. The background must be transparent. Hint: the filename of the SVG graphic should contain the unicode of the character in the font in order to simplify maintencance. Only use unicodes from the Private Use Area from U+E000 to U+F8FF. When you’re happy with your icon set, you hit the Generate Font button in the footer in IcoMoon. On the following page you can set the unicode of each icon/character. Click on the prefences button (cog icon), to set the name of your icon font (e.g. scoutIcons). Finally click on Download and you receive a ZIP file which contains the new selection.json, and font files like .ttf and .woff. When you’ve added new unicodes to the icon font, you should also update Icons.java and add constants for the new characters. When you’re using Scout JS you should also update icons.js and icons.less. Important! don’t forget to check in the new selection.js to your SCM. Windows tool Character Map: first you must install your custom TrueType Font .ttf in Windows. Simply double-click on the .ttf file and choose Install. After that you can start Character Map and browse through the font. The ZIP archive from IcoMoon contains a file demo.html. This file shows a preview of your icon font. Works in Chrome, but we had trouble viewing the font with Firefox. This tool from Wikipedia also creates a preview for an icon font: Vorlage:Private-Use-Area-Test. Icon font must be installed first.","title":"Icons","component":"scout-docs","version":"23.2","name":"icons","url":"/scout-docs/next/technical-guide/user-interface/icons.html","titles":[{"text":"Font Icons","hash":"font-icons","id":1},{"text":"Using a custom icon font","hash":"using-a-custom-icon-font","id":2},{"text":"How to create a custom icon font","hash":"how-to-create-a-custom-icon-font","id":3},{"text":"Tools","hash":"tools","id":4}]},"188":{"id":188,"text":"Figure 1. Scout apps run on desktops, tablets and mobile phones Scout applications are mobile capable, meaning that they can be used on portable touch devices like smartphones and tablets. This capability is based on 2 main parts: Responsive and Touch Capable Widgets Device Transformation Responsive design in context of a web application means that the design reacts to screen size changes. A Scout application does not use responsive design for the whole page, but many widgets itself may change the appearance when they don’t fit into screen. One example is the menu bar that stacks all menus which don’t fit into an ellipsis menu. Figure 2. Responsive menu bar Beside being responsive, the widgets may deal with touch devices as well. This means they are big enough to be used with the finger. And they don’t need a mouse, especially the right mouse button. One example is the tooltip of a form field which is reflected by an info icon on the right side of the field. Instead of hovering over the field the user can press that info icon to bring up the tooltip. This approach not only provides an indicator where tooltips are available, it also works for mouse and touch based devices. Figure 3. Touch friendly widgets Another widget that will react to changing sizes is the group box. Once a group box becomes smaller than its preferred width it will transform its internal fields. Example: For all internal fields the labelPosition will be set to 'top' to give the field more horizontal space. Figure 4. Responsive group box Those transformations are handled by scout.GroupBoxResponsiveHandler and managed by scout.ResponsiveManager. The manager decides when to switch to a responsive mode and back. If desired, the responsive transformations can be completely disabled by calling scout.responsiveManager.setActive(false). By default, all the main boxes will be responsive. In order to exclude a group box from the responsive transformations you could do the following: @Order(20) @ClassId(\"98af1bc6-2d62-4132-9953-55e08492f65f\") public class MyGroupBox extends AbstractGroupBox { @Override protected TriState getConfiguredResponsive() { return TriState.FALSE; } } The handler is called when the manager detects a changed responsive state to perform its transformations. There are three responsive modes, of which only the first two are supported in scout classic. Normal (e.g. width >= 500): Regular case, no transformations are applied. Condensed (e.g. 300 ⇐ width { CompactBean bean = new CompactBean(); bean.setTitle(\"custom title\"); bean.addContentLine(new CompactLine(\"label\", \"text\")); return bean; }); } } If the MobileDeviceTransformer is active, the responsive feature of the GroupBox will be disabled. Instead, some transformations will be applied like moving the label and status to top, reducing the column count to one, disabling cancel confirmation and more. Have a look at MobileDeviceTransformation and at MobileDeviceTransformer to learn more about it. Figure 9. Form on Mobile Since the transformers are plain Scout beans, you can easily replace them and adjust their behavior. To disable some transformations just get the configuration and disable the unwanted ones. @Replace public class CustomMobileDeviceTransformer extends MobileDeviceTransformer { @Override protected void initTransformationConfig() { super.initTransformationConfig(); getDeviceTransformationConfig().disableTransformation(MobileDeviceTransformation.MOVE_FIELD_LABEL_TO_TOP); } } Have a look at the class MobileDeviceTransformation to get a list of all available transformations. All these transformations are triggered by extensions to components like form fields or the desktop. These extensions are registered by DeviceTransformationPlatformListener. If you don’t want any of these transformers to be active you could simply replace that listener and do nothing. @Replace public class CustomDeviceTransformationPlatformListener extends DeviceTransformationPlatformListener { @Override public void stateChanged(PlatformEvent event) { // Do nothing to not register any extension so no transformation will happen } } The device transformers take care of global transformations which should be applied for most of the components. If you need to adapt a specific component you can do it at the component itself. Let’s say you want to hide a field if the application is running on a smart-phone, you could do the following. @Order(20) @ClassId(\"032f5ffb-bb1a-477a-95c8-f185e930a977\") public class MyField extends AbstractStringField { @Override protected void execInitField() { if (UserAgentUtility.isMobileDevice()) { setVisibleGranted(false); } } } Sometimes a transformation done by a device transformer is not desired, but you don’t want to turn it off globally. If that is the case you can disable that transformation for a specific form or form field. @Override protected void execInitField() { BEANS.get(IDeviceTransformationService.class).excludeFieldTransformation(this, MobileDeviceTransformation.REDUCE_GROUPBOX_COLUMNS_TO_ONE); } Or you can exclude a specific form or form field from all transformations. @Override protected void execInitField() { BEANS.get(IDeviceTransformationService.class).excludeField(this); } Once you have done your adjustments on the model and transformations, and you are still not pleased how your app looks, you still have the possibility to add some custom CSS. To do so, just add a CSS class to your component and define the rules in a Less file. Also have a look at the Java file CssClasses. Scout provides a few predefined css classes for some specific use cases. @Override protected void execInitField() { if (UserAgentUtility.isMobileDevice()) { addCssClass(\"mobile\"); } } For details on how to write the Less code please see Styling. If you just want to reduce some padding maybe it is sufficient to adjust the gaps of a group box. To do so just override the method getConfiguredBodyLayoutConfig of your group box and do the adjustments. @Override protected LogicalGridLayoutConfig getConfiguredBodyLayoutConfig() { return super.getConfiguredBodyLayoutConfig() .withVGap(0); } The class UserAgent is essential for the mobile support. It stores information about the running device like the used browser or OS. The user agent is available on the UI server as well as on the backend server and can be accessed using the static method UserAgent.get(). The class UserAgentUtility provides some useful helper methods to check which type of device is running, like if it’s a mobile phone, a tablet, or a desktop device. When creating a Scout application which should run on touch devices as well, the following tipps may help you. Focus on the essential. Even though most of the application should run fine on a mobile device, some parts may not make sense. Identify those parts and make them invisible using setVisibleGranted(false). The advantage of using setVisibleGranted over setVisible is that the model of the invisible components won’t be sent to the client at all, which might increase the performance a little. But remember: The users nowadays might expect every functionality to be available even on a mobile phone, so don’t take them away too much. Limit the usage of custom HTML. Custom HTML cannot be automatically transformed, so you need to do it by yourself. Example: You created a table with several columns using HTML. On a small screen this table will be too large, so you have to make sure that your table is responsive, or provide other HTML code when running on a mobile device. Don’t use too large values for gridH. GridH actually is the minimum grid height, so if you set gridH to 10 the field will always be at least 10 logical grid rows height. This may be too big on a mobile device. Use appropriate values for table column width. Tables are displayed the same way on a mobile phone as on the desktop device (unless compact is set to true), if the content is not fully visible the user can scroll. If you have tables with autoResizeColumns set to true, you should make sure that the column widths are set properly. Just check how the table looks on a small screen and adjust the values accordingly. Know the difference between small screens and touch capable. If you do checks against different device types, you should be aware that a touch device is not necessarily a small device. That means UserAgentUtility.isTouchDevice() may be true on a laptop as well, so use it with care. If you use filler fields for layouting purpose, make sure you use the official IPlaceholderField. Such filler fields normally waste space on a one column layout, so the mobile transformer will make them invisible.","title":"Mobile Support","component":"scout-docs","version":"23.2","name":"mobile","url":"/scout-docs/next/technical-guide/user-interface/mobile.html","titles":[{"text":"Responsive and Touch Capable Widgets","hash":"responsive-and-touch-capable-widgets","id":1},{"text":"GroupBox","hash":"ResponsiveGroupBox","id":2},{"text":"Add a Custom Handler","hash":"add-a-custom-handler","id":3},{"text":"Device Transformation","hash":"device-transformation","id":4},{"text":"Compact Desktop","hash":"compact-desktop","id":5},{"text":"Adjusting Summary Cells","hash":"adjusting-summary-cells","id":6},{"text":"Compact Table","hash":"compact-table","id":7},{"text":"Form Transformation","hash":"form-transformation","id":8},{"text":"Disable Transformations","hash":"disable-transformations","id":9},{"text":"Adapt Specific Components","hash":"adapt-specific-components","id":10},{"text":"Optimize the Look","hash":"optimize-the-look","id":11},{"text":"User Agent","hash":"user-agent","id":12},{"text":"Best Practices","hash":"best-practices","id":13}]},"189":{"id":189,"text":"Several components support multiple dimensions for visibility or enabled flags. This means the component is only visible or enabled if all dimensions are set to true. This gives developers the flexibility to e.g. use a dimension for granting and one for the business logic. A total of 8 dimensions are available for a certain component type and attribute. This means you e.g. have a total of 8 dimensions for Form Field visibility in your application. And 8 dimensions for enabled-states of Actions. So the dimensions are not consumed by component instance but by component type. This means you have to be careful in defining new dimensions as all components of the same type share these dimensions. Some of these dimensions are already used internally. Refer to the implementation and JavaDoc of the component for details about how many dimensions are available for custom use. menu.setEnabled(false); (1) menu.setEnabledGranted(false); (2) menu.setVisible(false, IDimensions.VISIBLE_CUSTOM); (3) formField.setVisible(true, false, true, \"MyCustomDimension\"); (4) formField2.setVisible(true, true, true); (5) formField3.isEnabled(IDimensions.ENABLED_CUSTOM); (6) formField3.isEnabled(IDimensions.ENABLED); (7) formField3.isEnabled(); (8) formField3.isEnabledIncludingParents(); (9) 1 Disables the menu using the internal default dimension 2 Disables the menu using the internal granted dimension 3 Hides the menu with a third custom dimension 4 Form Fields also support the propagation of new values to children and parents. This sets the custom dimension of this field and all of its children to true. 5 This sets the internal default enabled dimension of this field and all of its parents and children to true. 6 Checks if the custom dimension is set to true 7 Checks if the internal default dimension is set to true 8 Checks if all dimensions of formField2 are true 9 Checks if all dimensions of formField2 and all dimensions of all parent Form Fields are enabled. In the example above the instance 'formField3' uses 4 dimensions for the enabled attribute: ENABLED_CUSTOM because it is explicitly used and the 3 dimensions that are used internally (ENABLED, ENABLED_GRANTED, ENABLED_SLAVE). Even though the instance 'formField2' makes no use of the custom dimension it is consumed for this instance as well because the dimensions do not exist by instance but by attribute (as explained above).","title":"Multiple Dimensions Support (Scout Classic)","component":"scout-docs","version":"23.2","name":"multi-dimensions","url":"/scout-docs/next/technical-guide/user-interface/multi-dimensions.html","titles":[]},"190":{"id":190,"text":"As seen in the Creating a Widget, a widget may be created using scout.create. When using this function, the call is delegated to the ObjectFactory. The ObjectFactory is responsible to create and initialize a Scout object. A typical Scout object has an objectType and an init function. But actually any kind of object with a constructor function may be created. If you use a string based object type, objects are created using naming convention by default. This means when calling scout.create('scout.Table', model), the scout namespace is searched for a class called Table. Since scout is the default namespace, it may be omitted. So calling scout.create('Table', model) has the same effect. If there is such a class found, it will be instantiated and the init function called, if there is one. The model is passed to that init function. So instead of using scout.create you could also use the following code: Listing 1. Creating an object without the ObjectFactory import {Table} from '@eclipse-scout/core'; var table = new Table(); table.init(model); This will work fine, but you will lose the big benefit of the ObjectFactory: the ability to replace existing classes. So if you want to customize the default Table, you would likely extend that table and override some functions. In that case you need to make sure every time a table is created, your class is used instead of the default. To do that you have to register your class in the ObjectFactory with the objectType Table. If scout.create('Table') is called the object factory will check if there is a class registered for the type Table and, if yes, that class is used. Only if there is no registration found, the default approach using the naming convention is performed. In order to register you class, you need a file called objectFactories and add that to your JavaScript module (e.g. index.js). The content of that file may look as following: Listing 2. Adding a new object factory registration import {CustomTable} from './index'; import {scout} from '@eclipse-scout/core'; scout.addObjectFactories({ 'Table': () => new CustomTable() }); This will simply add a new factory for the type Table the the list of existing factories. From now on yourproject.CustomTable will be instantiated every time a Table should be created. This replacement also works if scout.create is used with class references (which is the recommended approach). So, scout.create('Table') as well as scout.create(Table) will return a new CustomTable.","title":"Object Factory","component":"scout-docs","version":"23.2","name":"object-factory","url":"/scout-docs/next/technical-guide/user-interface/object-factory.html","titles":[]},"191":{"id":191,"text":"Beside JavaScript for business logic and for the models, every Scout JS app probably needs some CSS code at some point in time. If you are writing custom widgets, you need it for sure. But also if you are just using the given widgets you might have the need to adjust the look here and there. Scout uses LESS as CSS preprocessor. It has a lot of advantages to pure CSS: variables, mixins, functions, imports etc. If you use the default build infrastructure provided by Scout, you cannot only use LESS easily without getting a headache on how to integrate it in your build system, you get access to all the LESS constructs used by Scout itself. This means you can use variables for colors, icons and sizes, mixins for animations and to avoid browser specific prefixes. You can import whole Scout LESS files for your custom themes, and you get a lot of sample code in the Scout code base because Scout itself uses the same concepts. In order to get started you need a place to put all your LESS code. The recommendation is to create one LESS file for each widget. That means if your widget is called MyWidget.js you would create a file called MyWidget.less. Even if you adjust the look of an existing widget you can create a file called let’s say StringField.less and put the rules there. If you only have a few rules or non widget specific rules you can create a file called main.less and put them there. However, these are only recommendations, you can always do it as you like. The creation of these files won’t make them load automatically. You have to register them in your index file. This file should be put into your src/main/js folder and named index.less. Just include your new files using the LESS @import keyword. Listing 1. Include a LESS file @import \"style/colors\"; In addition to this index file you normally also have a theme file which will be used as entry point in your webpack.config.js and included in the index.html. The intention of the theme file is to group individual index files and make one file in order to load all rules at once within one request. Now that we have all the infrastructure set up, we can start adding some rules. As already said, you can use all the LESS variables from Scout. The variables can be found in the scout/style folder of the @eclipse-scout/core module. If you have a look at the file colors.less you find all the colors you can use or customize. Let’s say you want to change the background color of the header, you can redefine the variable @desktop-header-background-color. Listing 2. Changing the background color of the header @desktop-header-background-color: @palette-red-4; That’s it! As you can see, changing this variable not only changes the background color of the header, it also changes the background color of the view-buttons on the top left, because they are supposed to have the same color. You could do the same by using CSS rules, but you would have to write several selectors to achieve the same. Figure 1. Helloworld default and with a custom header background color In this example a color from the Scout color palette is used. You can also use a custom hex code instead of @palette-red-4 or define a custom color palette, if you want to use the same colors for different rules. Beside colors there are some other files in the style folder of the Scout module: animations.less, fonts.less, icons.less, mixins.less and sizes.less. All these files contain variables or mixins which are used by various Scout widgets and may be used by your project as well. In the above example to change the header background color, we adjusted a specific less variable to only change the header. As you may have noticed on the screenshot, the pencil on the top left, the title below and the text on the tile are still blue. This is expected, because they are not related to the header background color. If you want to change these colors as well, you could do it in the same way: Look for the LESS variables and adjust them. But you could also try to adjust the accent colors. Scout has a dedicated color palette for accent colors. Accent colors are used by many widgets, for titles, for links, for hover states etc. The default accent color of Scout is blue. So, instead of changing specific colors, you can try to change the accent color palette. For this example we use the slightly adjusted red palette, but you can use your own colors of course: @accent-color-0: @palette-red-0; @accent-color-1: @palette-red-1; @accent-color-2: @palette-red-2; @accent-color-3: @palette-red-4; @accent-color-4: @palette-red-5; @accent-color-5: darken(@palette-red-5, 10%); Figure 2. Accent color change Redefining a LESS variable is the simplest way of customizing. If you need more control you can always write a custom CSS rule. Keep in mind that these rules need to be more specific than the default CSS rules of Scout, otherwise they won’t be executed (see https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity for details). We cannot guarantee that your custom rules will still work when migrating to a newer Scout version, because changing only a small part of the rule might make it more specific so that your rule won’t work anymore. That only applies to custom rules which are supposed to change existing look or behavior. If you are writing a custom widget without overriding default Scout rules there shouldn’t be any problems regarding migration. Scout applications support styling via CSS/LESS themes. Scout comes with two themes by default: the default theme with blue colors and the dark theme with gray/black colors. Technically a theme has a name and a set of LESS files. In Scout Classic a theme is activated by calling the method AbstractDesktop#setTheme(String name). This causes the browser to reload the page and loads the CSS theme for that name, like myapp-theme.css for the default theme or myapp-theme-dark.css for the dark theme. The default theme is activated by passing a null value as name. In Scout JS you do the same thing by calling the method Desktop#setTheme(name). If you have multiple themes and you want to start with a defined theme by default, you can set a property in the config.properties file on the Scout UI server. In the following example the theme rainbow will be activated, which means the Scout application tries to load the CSS file myapp-theme-rainbow.css on start-up: config.properties scout.ui.theme=rainbow Note that Scout only provides an API to switch between themes. If the user of your Scout application should switch between various themes, your application must provide an UI element to do that. Scout provides no standard UI element for that. However, the Widgets apps for Scout Classic and Scout JS give you an idea of how you could implement that feature. You have two options to customize CSS styles in your Scout project: Change CSS properties (or LESS variables) by overriding styles from the default theme Provide your own theme with a unique name like rainbow If your Scout application should have only a single theme, option 1 is the way to go. If users should have the option to switch between various themes, you should go with option 2. In this chapter we will focus on the latter option. In order to understand Scout themes, take a look at the myapp-theme.less file which has been generated for your project by the Scout archetype. In the following examples we assume that the name of your project is myapp. Listing 3. myapp-theme.less @import \"~@eclipse-scout/core/src/index\"; @import \"./src/main/js/index\"; As you can see the theme bundles various LESS modules. Line 1 imports the LESS module from the Scout core. This module contains style definitions for all UI elements provided by Scout. Line 2 imports the LESS module from your application. This module contains style definitions for custom widgets used in your project. The build creates a single CSS file myapp-theme.css, which is used as theme for your project. We recommend making an index file for each Scout module. These index files import each single LESS file which belongs to that module. This excerpt from Scouts index.less shows how we import all distinct LESS files required to style the desktop or the LESS variable definitions for all colors used in the stylesheet: Listing 4. Excerpt from Scout core index.less @import \"desktop/Desktop\"; @import \"desktop/DesktopLogo\"; @import \"desktop/DesktopDense\"; @import \"desktop/bench/DesktopBench\"; @import \"desktop/bench/BenchColumn\"; @import \"style/colors\"; How does the dark theme for your Scout application look like? Like for the default theme, we create a LESS file myapp-theme-dark.less, but this time we import the index-dark modules. Listing 5. myapp-theme-dark.less @import \"~@eclipse-scout/core/src/index-dark\"; @import \"./src/main/js/index-dark\"; Let’s take a look at the details in the index-dark.less file from the Scout core: Listing 6. index-dark.less @import \"index\"; @import \"style/colors-dark\"; @import \"style/sizes-dark\"; As you see, the first thing we do on line 1 is to import the default theme 'index'. This means the dark theme inherits all style definitions from the default theme. The dark theme only extends new additional style and LESS variables or overrides styles or LESS variables from the default theme. This is what happens on line 2: colors-dark.less overrides some variables defined in the colors.less file from the default theme, like the gray colors: Listing 7. Excerpt from Scout core index-dark.less @palette-gray-0: @palette-white; @palette-gray-1: #F5F5F5; @palette-gray-2: #E9EBEB; @palette-gray-3: #BFC2C3; @palette-gray-4: #A7ACAD; @palette-gray-5: #7E8588; Scout uses Webpack to run the LESS parser and build the CSS themes. Your application needs at least one default theme. The Scout archetype adds this theme to your webpack.config.js. If your application needs to work with multiple themes you must add them to the list of config entries. In this example we add the two themes dark and rainbow: Listing 8. Excerpt from webpack.config.js config.entry = { 'bsicrm': './src/main/js/myapp.js', 'login': './src/main/js/login.js', 'logout': './src/main/js/logout.js', 'myapp-theme': './src/main/js/myapp-theme.less', 'myapp-theme-dark': './src/main/js/myapp-theme-dark.less', 'myapp-theme-rainbow': './src/main/js/myapp-theme-rainbow.less' }; When you use a Scout UI server as backend for your Scout JS application the class WebResourceLoader is responsible for supplying the requested CSS theme file to the browser. This class uses the current theme name as provided by the UiThemeHelper, which checks if a theme name is set by a cookie, the HTTP session or by an HTTP request parameter. These are good starting points for debugging, in case something unexpected happens while developing themes.","title":"Styling","component":"scout-docs","version":"23.2","name":"styling","url":"/scout-docs/next/technical-guide/user-interface/styling.html","titles":[{"text":"Setup Less Files","hash":"setup-less-files","id":1},{"text":"Basic Customization","hash":"basic-customization","id":2},{"text":"Accent Colors","hash":"accent-colors","id":3},{"text":"Advanced Customization","hash":"advanced-customization","id":4},{"text":"Themes","hash":"themes","id":5},{"text":"Build and Runtime","hash":"build-and-runtime","id":6}]},"192":{"id":192,"text":"The TEXTS class is a convenience class to access the default Text Provider Service used for the localization of the texts in the user interface. Listing 1. Text lookup TEXTS.get(\"persons\"); Its also possible to use some parameters: Listing 2. Text lookup String name = \"Bob\"; int age = 13; TEXTS.get(\"NameWithAge\", name, age); In this case, some placeholders for the parameters are needed in the translated text: Listing 3. Text lookup NameWithAge={0} is {1} years old; Scout uses the java.util.ResourceBundle mechanism for native language support. So whatever language files you have in your .shared/resources/texts/*.properties are taken as translation base. Example setup: .shared/resources/texts/Texts.properties .shared/resources/texts/Texts_fr.properties If your application starts with the -vmargs -Duser.language=fr or eclipse.exe -nl=fr the translations in Texts_fr.properties are considered. In case of any other user language the translations in Texts.properties are considered. It is possible to edit these files in the Eclipse Scout SDK with the NLS Editor. Text Provider Services are services responsible to provide localization for texts in the user interface. A typical application contains a such service contributed by the Shared Project. implements: ITextProviderService extends: AbstractDynamicNlsTextProviderService (default, translations are stored in properties files) Using Text Provider Services developers can decide to store the translations in a custom container like a database or XML files. Furthermore using TextProviderServices it is very easy to overwrite any translated text in the application (also texts used in Scout itself) using the service ranking. The mechanism is aligned with the icon retrieval which is also managed using Icon Provider Services. By default the internationalization mechanism relies on .properties files using a reference implementation of the TextProviderServices: Service extending the AbstractDynamicNlsTextProviderService class. A Text Provider Service working with the default implementation need to define where the properties files are located. This is realized by overriding the getter getDynamicNlsBaseName(). Here an example: Listing 4. Text lookup @Override protected String getDynamicNlsBaseName() { return \"resources.texts.Texts\"; } If configured like this, it means that the .properties files will be located in the same plug-in at the location: /resources/texts/Texts.properties (default) /resources/texts/Texts_fr.properties (french) /resources/texts/Texts_de.properties (german) …​ (additional languages) If you decide to store your translated texts in .properties files, you migth want to use the NLS Editor to edit them. You need to respect the format defined by the Java Properties class. In particular the encoding of a .properties file is ISO-8859-1 (also known as Latin-1). All non-Latin-1 characters must be encoded. Examples: 'à' => \"\\u00E0\" 'ç' => \"\\u00E7\" 'ß' => \"\\u00DF\" The encoding is the \"Unicode escape characters\": \\uHHHH where HHHH is a hexadecimal id of the character in the Unicode character table. Read more on the .properties File on wikipedia. The NlsFileWatcher observes changes in text property files. If a change in a text property file occurs, the nls resource bundle cache will be invalidated. This means that there is no need to restart the server when working on texts and translations. The file watcher is only active if scout.devMode=true is set and can be disabled with scout.dev.texts.fileWatcherEnabled=false. By default, the file watcher is enabled in development mode.","title":"Texts","component":"scout-docs","version":"23.2","name":"texts","url":"/scout-docs/next/technical-guide/user-interface/texts.html","titles":[{"text":"Text properties files","hash":"text-properties-files","id":1},{"text":"Text Provider Service","hash":"text-provider-service","id":2},{"text":"Localization using .properties files","hash":"localization-using-properties-files","id":3},{"text":"File Watcher","hash":"file-watcher","id":4}]},"193":{"id":193,"text":"Eclipse Scout is written in TypeScript and therefore comes with a fully typed TypeScript API. This gives you many benefits: More efficient development Typing allows your IDE to better assist with code completion during development and to only suggest methods and properties for an object that actually exists. Figure 1. Better Code Completion Easier entry With better code completion and clear method signatures, a not-so-experienced JavaScript developer can more easily get up to speed and understand the relationships in the code. More confidence when updating If a used API has changed, the code turns red and the build fails. More confidence during development Incorrect use of an API or code in general is detected at an early stage. The developer gets more security that his code will work. In addition to the TypeScript API, Scout also tries to make it as easy as possible for you so you can write TypeScript yourself in your project. This includes: An enhanced build stack that can transpile TypeScript code to JavaScript. An improved Scout SDK so IntelliJ can handle Scout code written in TypeScript. Predefined TypeScript configuration and ESLint rules for TypeScript. To use TypeScript in your Project, you need to create a tsconfig.json that extends from the Scout tsconfig.json. Follow the instructions at @eclipse-scout/tsconfig to create one. Now, just create a TypeScript file (a new file ending with .ts) and start writing TypeScript! The build automatically processes these files, so you don’t have to adjust the build unless you are writing a JavaScript library. If that is the case, see technical-guide:user-interface/build-stack.adoc#authoring-libraries. To enable code linting for TypeScript files just ensure your ESLint configuration is correctly setup as described in technical-guide:user-interface/build-stack.adoc#eslint. The Scout default configuration can handle JavaScript as well as TypeScript code, so there is no separate configuration needed. Note: if you are using third party libraries, we suggest you check if they include types. Some libraries contain the types directly in the package, for others the types are often available as a separate npm module from DefinitelyTyped which you need to add as devDependency to your package.json. If there are no types available at all, you will have to provide at least some types for the library by yourself in order to work efficiently with it. To get started with TypeScript or to learn more about it, we recommend visiting https://www.typescriptlang.org/. If you would like to migrate your existing code base to TypeScript, you can use the Scout Migration Tool for an initial automatic migration. But be aware, that the majority of the work, which is adding types, will need to be done manually. Migrating to TypeScript is not required, you can still use JavaScript or write only new code with TypeScript. However, if you are a library developer, we recommend migrating to TypeScript to make the usage of the library easier. Detailed instruction for the migration can be found here: @eclipse-scout/migrate","title":"TypeScript Support","component":"scout-docs","version":"23.2","name":"typescript","url":"/scout-docs/next/technical-guide/user-interface/typescript.html","titles":[{"text":"Project Setup for TypeScript","hash":"project-setup-for-typescript","id":1},{"text":"TypeScript Migration","hash":"typescript-migration","id":2}]},"194":{"id":194,"text":"A value field extends the form field by the ability to store a value. Typical form fields are StringField, NumberField, DateField or SmartField. All these fields provide a value which is accessible using field.value and may be set using field.setValue(value). The value always has the target data type of the field. When using a StringField the type is string, when using a NumberField the type is number, when using a DateField the type is date. This means you don’t have to care about how to parse the value from the user input, this will be done by the field for you. The field also validates the value, meaning if the user entered an invalid value, an error is shown. Furthermore, if you already have the value and want to show it in the field, you don’t have to format the value by yourself. This process of parsing, validating and formatting is provided by every value field. The responsible functions are parseValue, validateValue and formatValue. If a user enters text, it will be parsed to get the value with the correct type. The value will then be validated to ensure it is allowed to enter that specific value. Afterwards it will be formatted again to make sure the input looks as expected (e.g. if the user enters 2 it may be formatted to 2.0). If you set the vaue programmatically using setValue it is expected that the value already has the correct type, this means parse won’t be executed. But the value will be validated, formatted and eventually displayed in the field. Even though the fields already provide a default implementation of this functionality, you may want to extend or replace it. For that purpose you may set a custom parser and formatter or one or more validators. Typically, you don’t have to add a custom parser or formatter for a NumberField or DateField. They work with a DecimalFormat or DateFormat which means you can specify a pattern how the number or date should be represented. By default, it uses the pattern of the current locale, so you don’t even have to specify anything. For a StringField on the other hand, adding a custom parser or formatter could make sense. Let’s say you want to group the text into 4 digit blocks, so that if the user inputs 1111222233334444 it should be converted to 1111-2222-3333-4444. This could be done using the following formatter. Listing 1. Example of a formatter function formatter(value, defaultFormatter) { var displayText = defaultFormatter(value); if (!displayText) { return displayText; } return displayText.match(/.{4}/g).join('-'); }; Keep in mind that you should call the default formatter first unless you want to replace it completely. To make your formatter active, just use the corresponding setter. Listing 2. Setting the formatter field.setFormatter(formatter); Formatting the value is most of the time only half the job. You probably want to set a parser as well, so that if the user enters the text with the dashes it will be converted to a string without dashes. Listing 3. Example of a parser function parser(displayText, defaultParser) { if (displayText) { return displayText.replace(/-/g, ''); } return defaultParser(displayText); }; Use the corresponding setter to activate the parser. Listing 4. Setting the parser field.setParser(parser); The purpose of a validator is to only allow valid values. This mostly depends on your business rules, this is why the default validators don’t do a whole lot of things. See the following example of a validator used by a DateField. Listing 5. Example of a validator import {dates} from '@eclipse-scout/core'; function(value) { if (dates.isSameDay(value, new Date())) { throw 'You are not allowed to select the current date'; } return value; }; This validator ensures that the user may not enter the current date. If he does, en error status will be shown on the right side of the date field saying 'You are not allowed to select the current date'. Figure 1. Validation error of a date field As you can see in the example, in order to mark a value as invalid just throw the error message you want to show to the user. You could also throw an error or a Status object. In that case a generic error message will be displayed. In order to activate your validator, you can either call setValidator to replace the existing validator. In that case you should consider calling the default validator first, like you did it for the formatter or parser. Or you can use addValidator which adds the validator to the list of validators of the field. Listing 6. Adding a validator field.addValidator(validator); Compared to parse and format you may have multiple validators. When the value is validated, every validator is called and has to agree. If one validation fails, the value is not accepted. This should make it easier to reuse existing validators or separate your validation into tiny validators according to your business rules. If you now ask yourself why this is not possible for parsing and formatting, consider the following: Validate takes a value and returns a value, the data type is the same for input and output. Parse takes a text and creates a value, format takes a value and creates a text. The data type is likely not the same (besides for the StringField). If you had multiple parsers, the output of the previous parser would be the input of the next one, so depending on the index of your parser you would either get the text or the already parsed value as input. Confusing, isn’t it? So in order to keep it simple, there is only one parser and only one formatter for each field.","title":"Value Field","component":"scout-docs","version":"23.2","name":"value-field","url":"/scout-docs/next/technical-guide/user-interface/value-field.html","titles":[{"text":"Parser, Validator, Formatter","hash":"parser-validator-formatter","id":1},{"text":"Custom Parser and Formatter","hash":"custom-parser-and-formatter","id":2},{"text":"Custom Validator","hash":"custom-validator","id":3}]},"195":{"id":195,"text":"This chapter describes some of the widgets available in Scout. At the moment most of the widgets are not described yet, but they are already available at the Scout JS Widgets Application. With this application you can try the widgets out and get a feel of what they are capable of and how they are used. A Smart Field provides a list of proposals the user can choose from to pick one single value. In contrast to a common drop down list, the Smart Field provides search as you type which is especially useful for large lists. A very common case is to call a REST service and lookup the proposals while typing. This combination of a drop down list and a search field is the reason why it is called smart. Figure 1. Smart Field If you don’t need the search as you type feature, you can switch it off by setting the property displayHint to dropdown so that it behaves like a regular drop down list. This means the user cannot filter the values anymore using key board and can choose the values only by mouse / touch. Figure 2. Smart Field with display style set to 'dropdown' Another type of Smart Field is the so called Proposal Field. A Proposal Field does not require the user to choose from the available proposals but allows him to enter custom text as well. Figure 3. Proposal Field In order to provide the proposals you can either use a Lookup Call or a Code Type. In a Scout JS application you can use SmartFields like in a classic Scout application. Any REST service can be used to provide results for a SmartField lookup call. However, the SmartField expects the result to have a defined structure. If the REST service API is in your hands, you can simply return a JSON response with the right structure. This means less work to do for you in the JavaScript layer, because you don’t have to transform the response to a structure the SmartField can process. If you must use a service which API you cannot change, you have no other choice than doing some kind of transformation in JavaScript. Here’s how the response for a lookup call should look like in order to be processed by the SmartField: { \"queryBy\": \"ALL|TEXT|KEY|REC\", # lookup type, as requested by the client \"text\": \"foo\", # [optional] only set when queryBy=TEXT, contains the requested search text \"key\": \"123\", # [optional] only set when queryBy=KEY, contains the key of the requested lookup row \"rec\": \"234\", # [optional] only set when queryBy=REC, contains the key of the requested parent lookup row \"lookupRows\": [ # the result set of this lookup, contains 0-n lookup rows { # key and text are mandatory properties, all other properties are optional \"key\": \"unique lookup row key\", \"text\": \"lookup row text\", \"iconId\": \"person.svg\", \"tooltipText\": \"foo\", \"enabled\": false, \"active\": false, \"cssClass\": \"special-format\", \"backgroundColor\": \"#cc00ee\", # deprecated, use cssClass instead \"foregroundColor\": \"#333333\", # deprecated, use cssClass instead \"font\": \"Dialog-PLAIN-12\", # deprecated, use cssClass instead \"parentKey\": \"234\", # only used for hierarchical smart fields \"additionalTableRowData\": [ # only used for table like lookup results with multiple columns # contains 0-n objects with arbitrary properties { \"foo\": \"bar\" } ] } ], \"exception\": \"something went wrong\" # [optional] only set when an error occurred during the lookup request } Here’s how the request for a Scout JS SmartField lookup call could look like. Your request to a REST API can look completely different. This example just gives you an idea of how to implement your own LookupCall. { \"type\": \"lookupByAll|Text|Key|Rec\", # lookup type \"text\": \"foo\", # [optional] only set when type=lookupByText, contains the requested search text \"key\": \"123\", # [optional] only set when type=lookupByKey, contains the key of the requested lookup row \"rec\": \"234\", # [optional] only set when type=lookupByRec, contains the key of the requested parent lookup } A Chart visualizes data in several ways like bars, lines or a pie. The Chart has two main properties, a data and a config object. Imagine you are an ice cream shop, and you want to display how many scoops you sold in which month. The data object holds the data about the sold scoops, their flavours and the date you sold them. The config object defines how your chart should be styled, e.g. it should be a bar chart and the axes should get an extra label like 'month' and 'flavour'. Depending on the type that is set on the config object the Chart picks a renderer to display the chart. The renderer is now creating a - or -element and renders the chart. Each time you update the data or the config it is rerendered. Most of the charts are rendered using chart.js and the config object is handed over so you can use all properties chart.js provides to style your chart. In addition to the chart.js-properties we added custom properties, some of them only have an impact on certain charts: options.autoColor Whether the colors should be computed automatically. options.colorScheme A specific color scheme for the colors, also inverted ones are possible for dark backgrounds. options.transparent Whether the chart should be transparent or opaque. options.maxSegments Max. number of segments for radial charts like pie, doughnut, radar, polar area. options.clickable Whether a chart is clickable. options.checkable Whether a chart is checkable. options.otherSegmentClickable Whether the consolidated others segment is clickable. options.plugins.legend.clickable Whether the legend is clickable. options.xLabelMap and options.yLabelMap Label mapping for discrete values. options.handleResize Whether the chart should handle resizing itself (not necessary if the containers size is updated). options.numberFormatter A custom number formatter, e.g. 1000000 → 1 Mio. €. options.reformatLabels Whether the data labels should be reformatted. It is assumed that data labels (incl. numeric labels) are correctly formatted. If one wants to have the data labels formatted using the number formatter, this flag can be used. Consider a bar chart and the x-axis displays the years 2010-2020, these labels should not be reformatted. However, if the x-axis displays the prices 250, 500, 750 and 1000, these labels should be reformatted to 250 €, 500 €, 750 € and 1.000 €. options.plugins.tooltip.cssClass Custom css class for additional styling of the tooltip Bubble: options.bubble.sizeOfLargestBubble The size to which the largest bubble is scaled. options.bubble.minBubbleSize Min. size of a bubble. Fulfillment: options.fulfillment.startValue Where the animation should start. Salesfunnel: options.salesfunnel.normalized Defines if the bars should be rendered smaller from top to bottom or if they get a size according to their values. options.salesfunnel.calcConversionRate Whether the conversion rate should be rendered. Speedo: options.speedo.greenAreaPosition Define where the green area is located. Venn: options.venn.numberOfCircles Between 1 and 3. The colors used for grid lines, axes, etc. and the auto colors for datasets can be overridden using CSS. For a more detailed example see How to Create a Chart for Scout JS resp. How to Create a Chart for Scout Classic The widgets Table.js, Tree.js, TileGrid.js and TileAccordion.js share a common filter API which includes a filter field. This filter field is enabled by default and can be turned off using the property textFilterEnabled. Figure 4. Filter field This filter field will filter the rows, nodes or tiles by their display text. This is simple for rows and nodes but quite complicated for tiles due to the large number of different types of tiles. Therefore, it is possible to provide a strategy to the TileGrid.js and TileAccordion.js how to create a text filter for the tile type used in this case and how to update the text this filter accepts. Consider a tile CustomTile with a property relevantTextForFilter. A filter for this tile type might look like this: import {objects, strings} from '@eclipse-scout/core'; class CustomTileFilter { constructor() { this.acceptedText = null; } setAcceptedText(acceptedText) { acceptedText = (acceptedText || '').trim().toLowerCase(); if (objects.equals(this.acceptedText, acceptedText)) { return false; } this.acceptedText = acceptedText; return true; } accept(tile) { if (strings.empty(this.acceptedText)) { return true; } let filterText = strings.toLowerCase(tile.relevantTextForFilter); if (strings.empty(filterText)) { return false; } return filterText.indexOf(this.acceptedText) > -1; } } This CustomTileFilter is now passed to a TileGrid via tileGrid.createTextFilter = () => scout.create(CustomTileFilter); tileGrid.updateTextFilterText = (filter, text) => filter.setAcceptedText(text); The common filter API which Table.js, Tree.js, TileGrid.js and TileAccordion.js share can also be implemented by all other widgets. A minimal example of a widget implementing the filter API looks like this class FilterWidget extends Widget { constructor() { super(); this.elements = []; this.filters = []; this.textFilterEnabled = true; this.filterSupport = this._createFilterSupport(); this.filteredElementsDirty = false; } _init(model) { super._init(model); this.setElements(this.elements); this.setFilters(this.filters); } _createKeyStrokeContext() { return new KeyStrokeContext(); } _render() { this.$container = this.$parent.appendDiv(); this.htmlComp = HtmlComponent.install(this.$container, this.session); } _renderProperties() { super._renderProperties(); this._renderTextFilterEnabled(); } _remove() { this.filterSupport.remove(); super._remove(); } setElements(elements) { this.setProperty('elements', elements); this.filter(); } setTextFilterEnabled(textFilterEnabled) { this.setProperty('textFilterEnabled', textFilterEnabled); } _renderTextFilterEnabled() { this.filterSupport.renderFilterField(); } isTextFilterFieldVisible() { return this.textFilterEnabled; } /** * @returns {FilterSupport} */ _createFilterSupport() { return new FilterSupport({ widget: this, $container: () => this.$container, getElementsForFiltering: () => this.elements, getElementText: element => element.text }); } addFilter(filter, applyFilter = true) { this.filterSupport.addFilter(filter, applyFilter); } removeFilter(filter, applyFilter = true) { this.filterSupport.removeFilter(filter, applyFilter); } setFilters(filters, applyFilter = true) { this.filterSupport.setFilters(filters, applyFilter); } filter() { this.filterSupport.filter(); } updateFilteredElements(result, opts) { this.filteredElementsDirty = false; } } class Element { constructor() { this.text = null; this.filterAccepted = true; } setFilterAccepted(filterAccepted) { this.filterAccepted = filterAccepted; } } The widget creates a FilterSupport and passes all filter-related calls to this object. This FilterSupport manages the filters and the filter field. It only needs a small amount of information from the widget: widget Widget that created the support $container jQuery element that will be used for the visualization. It may be a function to resolve the container later. If this property is not set the $container of the widget is used by default. getElementsForFiltering Get all elements to which the filters should be applied. getElementText Get text of an element. There are several other options that can be passed to the FilterSupport, e.g. a strategy to create a custom text filter. For a complete list of the options please see the JS-Doc of the FilterSupport. The methods addFilter(filter, applyFilter = true), removeFilter(filter, applyFilter = true) and setFilters(filters, applyFilter = true) of the FilterSupport work with filter objects containing an accept-function and accept-functions directly. These methods will check if the list of filters really changed and then apply the new filters if applyFilter is set to true. The filters are stored in the widgets filters property. The widget needs to implement a updateFilteredElements(result, opts) method, which is called after the filters were applied if the list of filtered elements changed. Before this method is called the widgets filteredElementsDirty is set to false and the values passed are result An object containing the newlyHidden and newlyShown elements. opts An object containing additional information, e.g. the text from the text filter. The elements that are filtered needs to have a setFilterAccepted(filterAccepted)-method which is used by the FilterSupport to indicate whether this element is accepted by the filters or not. In order to use the filter field the widget needs an isTextFilterFieldVisible()-method and a KeyStrokeContext. The isTextFilterFieldVisible()-method is used to determine whether the filter field needs to be added to or removed from the $container when filterSupport.renderFilterField() is called. The KeyStrokeContext is needed to register KeyStrokes that move the focus towards the filter field while typing. A menu type provides a way to control the visibility of a menu for common use cases. For example: a menu should be displayed only if an item is selected or a value present. Menu types are context specific and interpreted by the menu container (e.g. by a table or value field). Please refer to the respective container for the available menu types and their functions. Most widgets specify some default menuTypes. Menus without any menuTypes are treated as if these default menuTypes are set. The defaults are: Calendar Calendar.MenuTypes.EmptySpace ImageField ImageField.MenuTypes.ImageUrl ImageField.MenuTypes.Null Planner Planner.MenuTypes.EmptySpace Table Table.MenuTypes.EmptySpace TileGrid TileGrid.MenuTypes.EmptySpace Tree Tree.MenuTypes.EmptySpace ValueField ValueField.MenuTypes.NotNull ValueField.MenuTypes.Null The ValueField support the menu types ValueField.MenuTypes.Null and ValueField.MenuTypes.NotNull. This means that the ValueField will only display menus with ValueField.MenuTypes.Null if the value is null or those with ValueField.MenuTypes.NotNull if the value is set. Menus added to a ValueField that need to be visible all the time do not need to specify all possible menu types. The ValueField will treat a menu without menu types as if it had set all menu types and therefore will always display it. import {Menu, ValueField} from '@eclipse-scout/core'; [ { id: 'AlwaysVisibleMenu', text: 'Always visible', objectType: Menu }, { id: 'VisibleIfNullMenu', text: 'Visible if value is null', objectType: Menu, menuTypes: [ ValueField.MenuTypes.Null ] } ] The ImageField supports the menu types ImageField.MenuTypes.ImageUrl and ImageField.MenuTypes.Null.","title":"Widget Reference","component":"scout-docs","version":"23.2","name":"widget-reference","url":"/scout-docs/next/technical-guide/user-interface/widget-reference.html","titles":[{"text":"Smart Field","hash":"smart-field","id":1},{"text":"Chart","hash":"chart","id":2},{"text":"Filter Field","hash":"filter-field","id":3},{"text":"MenuTypes","hash":"menu-types","id":4},{"text":"ValueField","hash":"valuefield","id":5},{"text":"ImageField","hash":"imagefield","id":6}]},"196":{"id":196,"text":"A widget is a component which may be rendered. It may be simple like a label, or more complex like a tree or table. A form is a widget and a form field, too. A widget contains the model, which represents the state of the widget. In a Scout Classic application, that model will be sent from the UI server to the browser and the Scout UI will use that model to create the widget. In a Scout JS app, the model may be provided using JSON or directly with JavaScript. Every widget has a lifecycle. After a widget is instantiated, it has to be initialized using init. If you want to display it, you have to call the render method. If you want to remove it from the DOM, call the remove method. Removing a widget is not the same as destroying it. You can still use it, you can for example change some properties and then render it again. If it is really not needed anymore, the destroy method is called (typically by Scout itself). So you see the widget actually has 3 important states: initialized rendered destroyed The big advantage of this concept is that the model of the widget may be changed any time, even if the widget is not rendered. This means you can prepare a widget like a form, prepare all its child widgets like the form fields, and then render them at once. If you want to hide the form, just remove it. It won’t be displayed anymore, but you can still modify it, like changing the label of a field or adding rows to a table. The next time it is rendered the changes will be reflected. If you do such a modification when it is rendered, it will be reflected immediately. Destroying a widget means it will detach itself from the parent and destroy all its children. Typically this is done by Scout itself e.g. when closing a form. If you want to destroy a widget yourself, it is recommended to do that by deleting it in its owner or parent (e.g. a GroupBox has a method deleteField which will destroy the field if the GroupBox is its owner). If you have attached listeners to other widgets at initialization time, now is the time to detach them. After a widget is destroyed it cannot be used anymore. Every attempt will result in a Widget is destroyed error. A widget may be created using the constructor function or scout.create. Best practice is to always use scout.create which gives you two benefits: You don’t have to call init by yourself. The widget may be extended (see Object Factory for details). The following example creates a StringField. Listing 1. Creating a string field import {scout, StringField} from '@eclipse-scout/core'; let field = scout.create(StringField, { parent: groupBox, label: 'hello', value: 'world' }); The first parameter is the object type. Typically, it is a class reference pointing to the widget you want to create. When using a class reference, the return value will be typed, so the IDE can assist you with code completion. For this reason, this syntax is recommended. The object type can also be a string, like the name of the class. Listing 2. Creating a string field by string based object type let field = scout.create('StringField', { parent: groupBox, label: 'hello', value: 'world' }); In that case, the ObjectFactory will look for the class in the namespace object, which is put on the window. StringField belongs to the scout namespace which is the default and can therefore be omitted. If the string field belonged to another name space called mynamespace, you would have to write the following: Listing 3. Creating a field considering the name space scout.create('mynamespace.StringField', {}) The second parameter of scout.create is the model. The model is the specification for your widget. In case of the StringField you can specify properties like the label, the max length, whether it is enabled and visible and more. If you don’t specify them, the defaults are used. The only needed property is the parent. To get a list of all available StringField properties, have a look at the interface StringFieldModel. Such a model definition is available for every widget. Just add the suffix Model to the widget name and you’ll find it. Figure 1. Widget Model Definition Every widget needs a parent. The parent is responsible to render (and remove) its children. In the example above, the parent is a group box. This group box has a property called fields. If the group box is rendered, it will render its fields too. You don’t need a group box to render the string field, you could render it directly onto the desktop. But if you want to use a form, you need a group box and create the form, group box and the field. Doing this programmatically, meaning creating each widget separately using scout.create, is time consuming, that is why we suggest to use the declarative approach. Have a look at the above example again. The second parameter, the model, defines some properties of the string field. This actually already is the declarative approach, because you could also set each property manually after creating the string field using the according methods. In order to create a form, we need to specify multiple widgets, respectively a widget hierarchy, at once. The following example defines a form with a group box and a string field. Listing 4. A form model defined declaratively import {GroupBox, StringField} from '@eclipse-scout/core'; export default { title: 'My first form!', rootGroupBox: { id: 'MainBox', objectType: GroupBox, fields: [ { id: 'MyStringField', objectType: StringField, label: 'hello', value: 'world' } ] } } To keep things nice and clean we separate the model from the code by putting this description of the form in a separate file called MyFormModel.js. Typically, you would create a file called MyForm.js as well, which contains the logic to interact with the fields. But since we just want to open the form it is not necessary. Instead, you can use the following code to create the form: import {Form, scout} from '@eclipse-scout/core'; import model from './MyFormModel'; let form = scout.create(Form, $.extend({parent: desktop}, model)); Now you can open the form using form.open() and it will look like this: Figure 2. First form As soon as you would like to add some code that interacts with the fields or maybe just want to not always load the model manually when creating the form, you should create a file called MyForm.js. The content of that file would be a class MyForm that extends the Form from Scout and a method called _jsonModel that returns our model. import {Form} from '@eclipse-scout/core'; import model from './MyFormModel'; export default class MyForm extends Form { _jsonModel() { return model; } } Creating the form is now possible using the following code. let form = scout.create(MyForm, {parent: desktop}); In previous Scout versions, the model was defined in a JSON file. Even though it is still possible, it is not recommended anymore, because writing the model using JavaScript is much more convenient. One advantage is, that you can use constants the same way as in your regular JavaScript code. import {FormField} from '@eclipse-scout/core'; export default { ... labelPosition: FormField.LabelPosition.TOP } If you use a JSON based model, you cannot reference Scout’s JavaScript enums/constants, and you’d have to write the following to assign the constant value: { \"labelPosition\": 2 } Obviously this makes the JSON code harder to read and understand and the developer has to lookup the enum/constant definition first. This is where the ${const:NAME} tag comes to help. A widget can define a list of properties that can be used with the const-tag. The widget defines in which enum/constant the name provided by the tag is resolved. Using the const-tag, the JSON example now looks like this: { \"labelPosition\": \"${const:ON_FIELD}\" } When you want to provide const-tag support for a custom widget, you need to call scout.Widget#resolveConsts in the _init function of your widget and for each supported property specify the property name and the object that contains the enum/constant definition. In the example from the previous chapter we have seen how to create a widget, in that specific case we created a form. Typically, it is not sufficient to just create a form, you most likely want to interact with the fields, like reading the values the user entered. In order to do that you need access to the fields. The easiest way is to use the IDs specified in the JSON. Let’s have a look at our example form again: export default { title: 'My first form!', rootGroupBox: { id: 'MainBox', objectType: GroupBox, fields: [ { id: 'MyStringField', objectType: StringField, label: 'hello', value: 'world' } ] } } In this example we have 3 widgets: the form, the root group box and a string field. These widgets are linked to each other which enables us to find the string field starting from the form. This can be done by using the following command: let stringField = form.widget('MyStringField'); Now you can read its value, change properties, add event handlers and so on. The result of the widget function to find a widget is a generic Widget, so it is not possible to call a method of a specific widget without casting (at least with TypeScript). To do the type casting, you can either specify the return type directly at the time of usage. Listing 5. Using the second parameter import {Menu} from '@eclipse-scout/core'; let menu = this.widget('YourId', Menu); Listing 6. Cast manually (TypeScript) import {Menu} from '@eclipse-scout/core'; let menu = this.widget('YourId') as Menu; Or you can use widget maps. A widget map is a type that maps the ids of the widgets to their object type. This allows TypeScript to determine the return type automatically. Figure 3. Typed widget function Scout SDK takes care of creating the widget maps, so you don’t have to write them manually. But there is one precondition: your model has to be in a TypeScript file. Nevertheless, here is how you would do it manually for our example form from above. Create a type called 'MyFormWidgetMap' in the file 'MyFormModel.ts' Link it to the form by re declaring the type of widgetMap. Listing 7. Create Widget Map export type MyFormWidgetMap = { 'MainBox': GroupBox; 'MyStringField': StringField; } Listing 8. Link Widget Map import {Form} from '@eclipse-scout/core'; import {MyFormWidgetMap} from './MyFormModel'; export class MyForm extends Form { declare widgetMap: MyFormWidgetMap; } If you’re using JavaScript for your form, you can use JSDoc to link the widgetMap: Listing 9. Link Widget Map in JavaScript import {Form} from '@eclipse-scout/core'; import {MyFormWidgetMap} from './MyFormModel'; export default class MyForm extends Form { constructor() { super(); /** @type MyFormWidgetMap */ this.widgetMap = null; } } As seen before, every widget has a model representing its state. This model is written onto the widget at the time it is being instantiated. The properties of that model are now available as properties of the widget. So in order to access such a property, just call widget.yourProperty. If you want to modify the property, just call widget.setYourProperty(value). Listing 10. Accessing and modifying a property import {scout, StringField} from '@eclipse-scout/core'; var field = scout.create(StringField, { parent: parent, labelVisible: false }); console.log(field.labelVisible); // prints false field.setLabelVisible(true); console.log(field.labelVisible); // prints true It is important to always use the setter to modify a property, because calling it does not just change the value. Instead it will call the method setProperty(propertyName, value) which does the following: It will check if the property has changed at all. If the value is still the same, nothing happens. To compare the values objects.equals is used, which uses === to compare and if that returns false, uses the equals methods of the given objects, if available. If the values are not equal, the model is updated using the method _setProperty (notice the _). Beside setting the value it also notifies every listener about the property change. So if another widget is interested in that property it may attach a listener and will be informed on every property change (see also the Events for details). In order to reflect the property change in the UI, the _render method is called, if available. The name of this method depends on the property name, it always starts with _render and ends with the property name. Example: _renderLabelVisible. If the widget does not implement such a method, nothing happens. It is worth to mention that the behavior of step 2 may be influenced by the widget. If the widget provides a method called _setPropertyName (e.g. _setLabelVisible, notice the _), that method will be called instead of _setProperty. This may be useful if something other should be done beside setting the property. If that is the case, that new function is responsible to call _setProperty by itself in order to set the property and inform the listeners. That method may also be called by the _init method to make sure the additional code is also executed during initialization (calling the public setter in _init would not have any effect due to the equals check at the beginning). A widget property is a special kind of a property which references another widget. Defining a property as widget property has the benefit that the widget is created automatically. Lets take the group box as an example. A group box has a widget property called fields. The fields are widgets, namely form fields. If you create a group box, you may specify its fields directly: Listing 11. Creating the string field automatically using a widget property import {scout, StringField, GroupBox} from '@eclipse-scout/core'; var groupBox = scout.create(GroupBox, { parent: parent, label: 'My Group Box', fields: [{ objectType: StringField, label: 'My String Field' }] }); // check if the string field was created as well console.log(groupBox.fields[0] instanceof StringField); In the above example the group box is created using scout.create. After creating the group box you can access the property fields and you will notice that the string field was created as well, even though scout.create has not been called explicitly for the string field. This is because the property fields is defined as widget property. During the initialization of the group box it sets the property fields and because the value is not a widget yet (resp. the elements in the array), scout.create will be called. This will also happen if you use a setter of a widget property. You can either call the setter with a previously created widget, or just pass the model and the widget will be created automatically. In addition to creating widgets, calling such a setter will also make sure that obsolete widgets are destroyed. This means if the widget was created using the setter, it will be destroyed when the setter is called with another widget which replaces the previous one. If the widget was created before calling the setter, meaning the owner is another widget, it won’t be destroyed. So if a property is defined as widget property, calling a setter will do the following: It checks if the property has changed at all (same as for regular properties). If the values are not equal, _prepareWidgetProperty is called which checks if the new value already is a widget and if not creates it. It also destroys the old widget unless the property should not be preserved (see _preserveOnPropertyChangeProperties). If the value is an array, it does so for each element in the array (only widgets which are not part of the new array will be destroyed). If the widget is rendered, the old widget is removed unless the property should not be preserved. If there is a custom remove function (e.g. _removeXY where XY is the property name), it will be called instead of removing the widgets directly. Note that the widget may have already been removed by the destroy function at the prepare phase. The model is updated (same as for regular properties). The render method is called (same as for regular properties). Every widget supports event handling by using the class EventSupport. This allows the widgets to attach listeners to other widgets and getting informed when an event happens. The 3 most important methods are the following: on: adds a listener off: removes a listener trigger: triggers an event So if a widget is interested in an event of another widget, it calls the function on with a callback function as parameter. If it is not interested anymore, it uses the function off with the same callback function as parameter. The following example shows how to handle a button click event. Listing 12. Handling an event import {scout, Button} from '@eclipse-scout/core'; let button = scout.create(Button, { parent: parent, label: 'click me!' }); button.render(); button.on('click', event => { // print 'Button \"click me!\" has been clicked' console.log('Button \"' + event.source.label + '\" has been clicked'); }); Every click on the button will execute the callback function. To stop listening, you could call button.off('click'), but this would remove every listener listening to the 'click' event. Better is to pass the same reference to the callback used with on as parameter for off. Listing 13. Stop listening for an event import {scout, Button} from '@eclipse-scout/core'; let button = scout.create(Button, { parent: parent, label: 'click me!' }); button.render(); let callback = event => { // print 'Button \"click me!\" has been clicked' console.log('Button \"' + event.source.label + '\" has been clicked'); // stop listening, a second click won't print anything button.off('click', callback); }; button.on('click', callback); If the callback function is bound using bind(), the bound function has to be used when removing the listener using off. This is because bind() returns a new function wrapping the original callback. In order to trigger an event rather than listening to one, you would use the function trigger. This is what the button in the above example does. When it is being clicked, it calls this.trigger('click') (this points to the instance of the button). With the second parameter you may specify additional data which will be copied onto the event. By default, the event contains the type (e.g. 'click') and the source which triggered it (e.g. the button). Listing 14. Triggering an event with custom event data trigger('click', { foo: 'bar' }); // callback function(event) { console.log(event.foo); // prints bar } A special kind of event is the property change event. Whenever a property changes, such an event is triggered. The event has the following properties: type: the type of the event which is always propertyChange source: the widget which triggered the event name: the name of the property newValue: the new value of the property oldValue: the old value of the property Listening to such an event works in the same way as for other events, just use the type propertyChange. The listening below shows how to handle the property change event if the selected property of a toggle button changes. Listing 15. Example of a property change event import {scout, Button} from '@eclipse-scout/core'; let button = scout.create(Button, { parent: parent, label: 'click me!', displayStyle: Button.DisplayStyle.TOGGLE }); button.render(); button.on('propertyChange', event => { if (event.propertyName == 'selected') { // prints 'Property selected changed from false to true' console.log('Property ' + event.propertyName + ' changed from ' + event.oldValue + ' to ' + event.newValue); } }); button.setSelected(true); The above propertyChange handler ist executed for ALL property changes of that button. This makes it necessary to check for the right property name inside the listener as it is done here with the if statement at the start of the listener. Because this is a very common pattern there is a shortcut available. You can listen for a specific property change with the following notation: propertyChange:propertyName. Listing 16. Listen for specific property changes button.on('propertyChange:selected', event => { // This listener is only executed when the 'selected' property changes console.log('Property ' + event.propertyName + ' changed from ' + event.oldValue + ' to ' + event.newValue); }); button.setSelected(true); If you want to know what events are available for a specific widget, you can have a look at its event map. The event map is a TypeScript interface and named after the widget with the suffix EventMap. For example, you will find the event map of a Menu under the name MenuEventMap. Beside having a complete list of the available events, these event maps are also used by TypeScript to provide code completion for the event name when adding an event handler: Figure 4. Event Name Completion You also get the correct type of the event itself including its members in the handler: Figure 5. Typed Event See chapter Icons for a general introduction to icons in Scout. Widgets that have a property iconId (for instance Menu) can display an icon. This iconId references an icon which can be either a bitmap image (GIF, PNG, JPEG, etc.) or a character from an icon-font. An example for an icon-font is the scoutIcons.ttf which comes shipped with Scout. Depending on the type (image, font-icon) the iconId property references: Image: iconId is an URL which points to an image resource accessible via HTTP. Example: /icons/person.png Font-icon: iconId has the format font:[UTF-character]. Example: font:\\uE043, references a character in scoutIcons.ttf Example: font:fooIcons \\uE109, references a character in custom font fooIcons.ttf Icon Constants: iconId has the format: ${iconId:[constant]}, where constant is a constant in the module icons.js. This format is especially useful when you configure a Scout widget with a JSON model. The value of the constant is again either an image or a font-icon as described above. Example: ${iconId:ANGLE_UP} uses icons.ANGLE_UP, icons predefined by Scout Example: ${iconId:foo.BAR} uses foo.icons.BAR, use this for custom icon constant objects As seen in the previous chapters, the creation of a widget requires a parent. This establishes a link between the child and the parent widget which is necessary for several actions. Rendering a widget into the container of the parent If you call widget.render() you don’t have to specify the HTML container to which the widget should be appended. It takes the container of the parent widget by default which is parent.$container. You can still pass a custom $parent if you like. Removing a widget and its children If widget.remove() is called, the widget will be removed from the DOM. Even though removing the parent HTML node would be sufficient in order to make the children disappear from the screen, every child widget will be removed as well. This gives the child widgets the possibility to clean up their rendering state and detach listeners. This is necessary because the widgets still exist after removal and their data can still be updated. Such cleanup actions are typically done by overriding widget._remove(). Remember to call the _remove of the super class as well. Finding child widgets This is something you will have to do very often if you specified your widgets in a JSON file. If you want to access these widgets from JavaScript you need to get them first. This is easy due to the linkage of the widgets. You can just use the function widget(id). See also chapter Finding a Widget for more details. Establishing a link independent of the DOM structure Normally a child widget contains HTML elements which are children of the parent’s HTML elements. Even though this is the regular case it is not a must. Amongst others the following widgets have HTML elements appended to the HTML element of the desktop rather than their actual parents: dialogs, popups, tooltips. The main reason is because these widgets lay on top of every other widget. In order to not get into the z-index hell it is a lot easier to put these widgets on the top level of the DOM structure. But since the HTML elements are now separated, the only link is the parent/child hierarchy. Imagine you have a string field which displays a tooltip. The parent of the tooltip is the string field but the HTML element is appended to the HTML element of the desktop. Removing the string field will now remove the tooltip as well even though their HTML elements are not linked. Or think about the following case: there is a popup open which contains a smart field. The smart field shows a popup by itself displaying the proposals. The HTML elements of the main popup and the smart field popup are siblings meaning they are on the same level in the DOM. Normally a popup gets closed when an element not belonging to the popup is clicked. But why is the main popup not closed if the user clicks into the smart field popup even though their HTML elements are not linked? Exactly, because the smart field popup is a child of the smart field and therefore a child of the main popup. So far we have learned what the parent is. But what is the owner? The owner is the only one which is allowed to destroy its children. Normally, the parent and the owner are the same, that is why you don’t have to specify the owner explicitly when creating a widget. The owner will be different if you specify it explicitly or if you use setParent() to temporarily change the parent of a widget. In that case the owner points to the old parent. This means if the new parent were destroyed, the newly linked child would not be destroyed, only removed from the DOM. This comes in handy if you want to temporarily give the control over rendering/removal to another widget (like a popup) but don’t let the other widget destroy your widget (e.g. when the popup is closed) because you want to use your widget again (e.g. display it on another popup).","title":"Widget","component":"scout-docs","version":"23.2","name":"widget","url":"/scout-docs/next/technical-guide/user-interface/widget.html","titles":[{"text":"Lifecycle","hash":"lifecycle","id":1},{"text":"Creating a Widget","hash":"creating-a-widget","id":2},{"text":"Creating a Widget Declaratively","hash":"creating-a-widget-declaratively","id":3},{"text":"Using constants in a JSON model","hash":"using-constants-in-a-json-model","id":4},{"text":"Finding a Widget","hash":"finding-a-widget","id":5},{"text":"Widget Maps","hash":"widget-maps","id":6},{"text":"Properties","hash":"properties","id":7},{"text":"Widget Properties","hash":"widget-properties","id":8},{"text":"Events","hash":"events","id":9},{"text":"Property Change Event","hash":"property-change-event","id":10},{"text":"Event Maps","hash":"event-maps","id":11},{"text":"Icons","hash":"icons","id":12},{"text":"Parent and Owner","hash":"parent-and-owner","id":13}]},"197":{"id":197,"text":"In a scout application, typically, the scout client requests some data from the scout server. Sometimes, however, the communication needs to go the other way: The scout server needs to inform the scout client about something. With client notifications it is possible to do so. Figure 1. Client Notifications Example scenarios for client notifications are: some data shared by client and server has changed (e.g. a cache on the client is no longer up-to-date, or a shared variable has changed) a new incoming phone call is available for a specific client and should be shown in the GUI a user wants to send a message to another user Scout itself uses client notifications to synchronize code type and permission caches and session shared variables. A client notification message is just a serializable object. It is published on the server and can be addressed either to all client nodes or only to a specific session or user. On the UI server side, handlers can be used to react upon incoming notifications. Client notification handlers may change the state of the client model. In case of visible changes in the UI, these changes are automatically reflected in the UI. In case of multiple server nodes, the client notifications are synchronized using cluster notifications to ensure that all UI servers receive the notifications. Figure 2. Long Polling Client notifications are implemented using long polling as described below, because long polling works reliably in most corporate networks with proxy servers between server and client as well as with security policies that do not allow server push. With long polling, the client requests notifications from the server repeatedly. If no new notifications are available on the server, instead of sending an empty response, the server holds the request open and waits until new notifications are available or a timeout is reached. In addition to the long polling mechanism, pending client notifications are also transferred to the client along with the response of regular client requests. A client notification can be published on the server using the ClientNotificationRegistry. Publishing can be done either in a non-transactional or transactional way (only processed, when the transaction is committed). The UI Server either receives the notifications via the ClientNotificationPoller or in case of transactional notifications together with the response of a regular service request. The notification is then dispatched to the corresponding handler. When a client notifications is published on the server, it is automatically synchronized with the other server nodes (by default). Figure 3. Client Notification Big Picture Figure 4. Client Notification Multiple Server Nodes In order to deal with multiple ui-server nodes, the server holds a single notifications queue per ui-server node. In these queues only the relevant notifications need to be kept: If a client notification is addressed to a session or user, that does not exist on a ui-server node, it is not added to the queue. Sessions and corresponding users are registered on the server upon creation (and de-registered after destruction). Listing 1. Publishing Client Notifications BEANS.get(ClientNotificationRegistry.class).putForUser(\"admin\", new PersonTableChangedNotification()); There are several options to choose from when publishing a new client notification: The ClientNotificationAddress determines which how the client notification needs to be dispatched and handled. A client notification can be addressed to all nodes all sessions one or more specific session one or more specific user Client notifications can be published in a transactional or non-transactional way. Transactional means that the client notifications are only published once the transaction is committed. If the transaction fails, client notifications are disregarded. Non-transactional means that client notifications are published immediately without considering any transactions. Generally, it makes sense to distribute the client notifications automatically to all other server cluster nodes (if available). This is achieved using ClusterNotifications. It is however also possible to publish client notifications without cluster distribution. E.g. in case of client notifications already received from other cluster nodes. It is possible that a service generates a lot of client notifications that are obsolete once a newer notification is created. In this case a coalescer can be created to reduce the notifications: Listing 2. Client Notification Coalescer public class BookmarkNotificationCoalescer implements ICoalescer { @Override public List coalesce(List notifications) { // reduce to one return CollectionUtility.arrayList(CollectionUtility.firstElement(notifications)); } } The ClientNotificationDispatcher is responsible for dispatching the client notifications to the correct handler. To create a new client notification handler for a specific client notification, all you need to do is creating a class implementing org.eclipse.scout.rt.shared.notification.INotificationHandler, where T is the type (or subtype) of the notification to handle. The new handler does not need to be registered anywhere. It is available via jandex class inventory. Listing 3. Notification Handler for MessageNotifications public class MessageNotificationHandler implements INotificationHandler { @Override public void handleNotification(final MessageNotification notification) { Sometimes it is necessary to start and stop handling notification dynamically, (e.g. when a form is opened) in this case AbstractObservableNotificationHandler can be used to add and remove listeners. Dispatching is always done asynchronously. However, in case of transactional notifications, a service call blocks until all transactional notifications returned with the service response are handled. This behavior was implemented to simplify for example the usage of shared caches: Listing 4. Blocking until notification handling completed CodeService cs = BEANS.get(CodeService.class); cs.reloadCodeType(UiThemeCodeType.class); //client-side reload triggered by client notifications is finished List> reloadedCodes = cs.getCodeType(UiThemeCodeType.class).getCodes(); In the example above, it is guaranteed, that the codetype is up-to-date as soon as reloadCodeType is finished. Notification handlers are never called from a scout model thread. If the scout model needs to be updated when handling notifications, a model job needs to be created for that task. Listing 5. Notification Handler Creating Model Job @Override public void handleNotification(final MessageNotification notification) { ModelJobs.schedule(() -> { IDesktop desktop = ClientSessionProvider.currentSession().getDesktop(); // e.g. send dataChanged event to UI listeners desktop.dataChanged(notification.getMessage()); }, ModelJobs.newInput(ClientRunContexts.copyCurrent())); } Make sure to always run updates to the scout models in a model job (forms, pages, …​): Use ModelJobs.schedule(…​) where necessary in notification handlers.","title":"Client Notifications","component":"scout-docs","version":"23.2","name":"client-notification","url":"/scout-docs/next/technical-guide/working-with-data/client-notification.html","titles":[{"text":"Examples","hash":"examples","id":1},{"text":"Data Flow","hash":"data-flow","id":2},{"text":"Push Technology","hash":"push-technology","id":3},{"text":"Components","hash":"components","id":4},{"text":"Multiple Server Nodes","hash":"multiple-server-nodes","id":5},{"text":"Publishing","hash":"publishing","id":6},{"text":"ClientNotificationAddress","hash":"clientnotificationaddress","id":7},{"text":"Transactional vs. Non-transactional","hash":"transactional-vs-non-transactional","id":8},{"text":"Distributing to all Cluster Nodes","hash":"distributing-to-all-cluster-nodes","id":9},{"text":"Coalescing Notifications","hash":"coalescing-notifications","id":10},{"text":"Handling","hash":"handling","id":11},{"text":"Creating a Client Notification Handler","hash":"creating-a-client-notification-handler","id":12},{"text":"Handling Notifications Temporarily","hash":"handling-notifications-temporarily","id":13},{"text":"Asynchronous Dispatching","hash":"asynchronous-dispatching","id":14},{"text":"Updating Scout Model","hash":"updating-scout-model","id":15}]},"198":{"id":198,"text":"A CodeType is a structure to represent a tree key-code association. They are used in SmartField and SmartColumn. implements: ICodeType extends: AbstractCodeType CodeTypes are used in SmartField to let the user choose between a finite list of values. The value stored by the field corresponds to the key of the selected code. A CodeType can be seen as a tree of Codes. Each code associates to the key (the Id) other properties: among others a Text and an IconId. In order to have the same resolving mechanism (getting the display text of a key), CodeTypes are also used in SmartColumns. To choose multiple values in the list, the fields ListBox (flat CodeType) and TreeBox (hierarchical CodeType) can be used. The codes are organized in a tree. Therefore, a CodeType can have one or more child codes at the root level, and each code can have other child codes. In a lot of cases a list of codes (meaning a tree containing only leaves at the first level) is sufficient to cover most of the need. Child codes are ordered in their parent code. This is realized with the order annotation. The type of the key is defined by its generic parameter . It is very common to use a type from the java.lang.* package (like Integer or String), but any Java Object is suitable. It must: implement Serializable have correctly implemented equals() and hashCode() functions be present in the server and the client There is no obligation to have the same type for the Id between the codes of a CodeType (meaning the same generic type parameter for the codes inner-class). However, it is a good practice to have the same type between the codes of a CodeType, because the Id are used as value of SmartFields. Therefore, the generic parameter describing the type of value of a SmartField must be compatible with the type of the codes contained in the CodeType. CodeType in a SmartField (or SmartColumn). @ClassId(\"08ccc68e-7b72-4fe0-b666-245ddb8b8441\") public class YesOrNoSmartField extends AbstractSmartField { // other configuration of properties. @Override protected Class> getConfiguredCodeType() { return YesOrNoCodeType.class; } } If the SmartField (or SmartColumn) works with a CodeType, a specific LookupCall is instantiated to get the LookupRows based on the Codes contained in a CodeType. Scout-runtime will handle the instantiation and the caching of CodeTypes. This function returns the text corresponding to the key using a CodeType: public String getCodeText(boolean key) { ICode c = BEANS.get(YesOrNoCodeType.class).getCode(key); if (c != null) { return c.getText(); } return null; } The common way to define a CodeType is to extend AbstractCodeType. Each code is an inner-class extending AbstractCode. Like usual the properties of Codes and CodeTypes can be set using the getConfiguredXxxxxx() methods. See the Java Code of a simple YesOrNoCodeType having just two codes: YesOrNoCodeType.YesCode YesOrNoCodeType.NoCode The SDK provides some help to generate CodeTypes and Codes. Use File → New → Scout → Scout Code Type to generate a new code. Code types are not necessarily hardcoded. It is possible to implement other mechanisms to load a CodeType dynamically. The description of the Codes can come from a database or from an XML files. If you want to do so, you just need to implement the method corresponding to the event LoadCodes. It is possible to use the static and the dynamic approach together. In this case, if there is a conflict (2 codes for the same id) the event OverwriteCode is triggered. Note for advanced users: Each CodeType is instantiated for each language each partition Note: A drawback is that the CodeType class is not aware of the language and the partition it is instantiated for. Only the CodeTypeStore that manages the CodeType instances knows for which language and which partition they have been instantiated.","title":"Code Type","component":"scout-docs","version":"23.2","name":"code-type","url":"/scout-docs/next/technical-guide/working-with-data/code-type.html","titles":[{"text":"Description","hash":"description","id":1},{"text":"Organisation of the codes","hash":"organisation-of-the-codes","id":2},{"text":"Type of the key","hash":"type-of-the-key","id":3},{"text":"Using a CodeType","hash":"using-a-codetype","id":4},{"text":"SmartField or SmartColumn","hash":"smartfield-or-smartcolumn","id":5},{"text":"Accessing a code directly","hash":"accessing-a-code-directly","id":6},{"text":"Static CodeType","hash":"static-codetype","id":7},{"text":"Java Code and structure","hash":"java-code-and-structure","id":8},{"text":"With the SDK","hash":"with-the-sdk","id":9},{"text":"Dynamic CodeType","hash":"dynamic-codetype","id":10}]},"199":{"id":199,"text":"Data objects are Scout beans, which are used as data transfer objects for synchronous REST and asynchronous MOM interfaces. Furthermore, they can be used as domain objects within business logic. A data object extends the DoEntity base class and declares each attribute as a single accessor method. Attributes of two kinds are available: Value attribute of type T List attribute of type List The name of the accessor method defines the attribute name. The return value of the accessor method defines the attribute type. Listing 1. Example: ExampleEntityDo @TypeName(\"lorem.ExampleEntity\") @TypeVersion(Lorem_1_2_0.class) public class ExampleEntityDo extends DoEntity { public DoValue name() { (1) return doValue(\"name\"); } public DoList values() { (2) return doList(\"values\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityDo withName(String name) { name().set(name); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public String getName() { return name().get(); } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityDo withValues(Collection values) { values().updateAll(values); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityDo withValues(Integer... values) { values().updateAll(values); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public List getValues() { return values().get(); } } 1 Example attribute of type String 2 Example attribute of type List For convenience reasons when working with the data objects it is recommended to add a getter and a with (e.g. setter) method. Using the convenience with methods, new data objects can be created with fluent-style API: Listing 2. Example: Create ExampleEntityDo instance ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); Using the IDataObjectMapper interface a data object can be converted from and to its string representation. The marshalling strategy is generic and replaceable. The Scout platform defines the IDataObjectMapper interface, at runtime a Scout bean implementing the interface must be available. The Scout module org.eclipse.scout.rt.jackson provides a default implementation serializing data objects from and to JSON using the Jackson library. Listing 3. Example: Serialize ExampleEntityDo String string = BEANS.get(IDataObjectMapper.class).writeValue(entity); The data object ExampleEntityDo serialized to JSON: Listing 4. Example: ExampleEntityDo as JSON { \"_type\" : \"lorem.ExampleEntity\", \"_typeVersion\": \"lorem-1.2.0\", \"name\" : \"example\", \"values\" : [1,2,3,4,5] } Listing 5. Example: Deserialize ExampleEntityDo ExampleEntityDo marhalled = BEANS.get(IDataObjectMapper.class) .readValue(string, ExampleEntityDo.class); A data object is annotated with a logical type name using the @TypeName annotation. Declaring a logical type name using the @TypeName annotation for each data object is mandatory. The annotation value is added to the serialized JSON object as top-level _type property. Using the type property the data object marshaller is able to find and instantiate the matching data object class, without having to rely on a fully classified class name. It avoids a 1:1 dependency between the serialized JSON String and the fully classified class name. A stable type name is required in order to be able to change the data object structure without breaking the API. A data object may be annotated with a type version using the @TypeVersion annotation. The type version represents the version of the structure of the data object and not the version of the data within the data object. The type version value should be incremented, each time, the data object class is modified (add/remove/rename attributes). If a version is required for versioning the values of a data object, consider add a version attribute, incrementing its value, every time a value of the data object is modified. The annotation value is added to the serialized JSON object as top-level _typeVersion property. The serialized _typeVersion value is not deserialized into an attribute, since the deserializer creates a concrete data object class at runtime, having the @TypeVersion annotation providing the type version value. Declaring a logical type version using the `@TypeVersion`annotation is highly recommended if a data object is persisted as JSON document to a file or database. A namespace (implementation of INamespace) represents a container for data objects. Each data object must have a unique type name within a namespace. Scout has its own namespace (with ID scout), your project should use an own one. Listing 6. Example: LoremNamespace public final class LoremNamespace implements INamespace { public static final String ID = \"lorem\"; public static final double ORDER = 9000; @Override public String getId() { return ID; } @Override public double getOrder() { return ORDER; } } A class implementing ITypeVersion is used within the @TypeVersion annotation. Several type versions for one namespace may be bundled in a container class. There are a few different constructors provided by AbstractTypeVersion that simplify the definition of such a type version. The default constructor extracts the namespace and version based on the class name. Listing 7. Example: LoremTypeVersions public final class LoremTypeVersions { private LoremTypeVersions() { } public static final class Lorem_1_0_0 extends AbstractTypeVersion { } public static final class Lorem_1_2_0 extends AbstractTypeVersion { } } AbstractDataObjectSignatureTest provides an abstract implementation of a test that creates a signature of all data object annotated with a type version including additional signatures (e.g. referenced IEnum with their values). A signature test enables to detect changes in data object that might need a migration. Each module containing data objects with type version annotation should implement a data object signature test. Listing 8. Example: DocsSnippetsDataObjectSignatureTest public class DocsSnippetsDataObjectSignatureTest extends AbstractDataObjectSignatureTest { @Override protected String getFilenamePrefix() { return \"docs-snippets\"; } @Override protected String getPackageNamePrefix() { return \"org.eclipse.scout.docs.snippets\"; } } Scout objects use the following naming conventions: A data object class should use the `Do' suffix. The value of the @TypeName annotation corresponds to the simple class name without Do suffix A namespace prefix (separated by a dot) is recommended in order to avoid duplicated type names across different modules (e.g. scout.Bookmark, helloworld.MyDataObject) The default attribute name within the serialized string corresponds to the name of the attribute accessor method defined in the data object. To use a custom attribute name within the serialized string, the attribute accessor method can be annotated by @AttributeName providing the custom attribute name. Listing 9. Example: Custom Attribute Name @AttributeName(\"myCustomName\") public DoValue name() { return doValue(\"myCustomName\"); (1) } 1 Important: The annotation value must be equals to the string constant used for the doValue() or doList() attribute declaration. Listing 10. Example: Custom Attribute Name as JSON { \"_type\" : \"CustomAttributeNameEntity\", \"myCustomName\" : \"example\" } Using the ValueFormat annotation a data type dependent format string may be provided, which is used for the marshalling. Listing 11. Example: Custom Attribute Format @ValueFormat(pattern = IValueFormatConstants.DATE_PATTERN) public DoValue date() { return doValue(\"date\"); } The IValueFormatConstants interface declares a set of default format pattern constants. Attributes with type java.util.Date accept the format pattern specified by SimpleDateFormat class (see https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html) The @JsonIgnore annotation included in the Jackson library is currently not supported for data objects. To ignore an attribute when serializing a data object, the attribute must be removed from the data object by either not setting a value for the desired attribute or by explicitly removing the attribute before a data object is serialized: Listing 12. Example: Remove an attribute from a data object ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); // remove by attribute accessor method reference entity.remove(entity::name); // remove by attribute node entity.remove(entity.name()); // remove by attribute name entity.remove(entity.name().getAttributeName()); // remove by attribute name raw entity.remove(\"name\"); Instead of data objects, a REST or MOM interface could be built using simple plain old Java objects (POJOs). Compared to POJOs a Scout data object offers additional support and convenience when working with attributes. A JSON attribute may have three different states: Attribute available with a value Attribute available with value null Attribute not available These three states cannot be represented with a POJO object which is based on a single variable with a pair of getter/setter. In order to differ between value not available and value is null, a wrapper type is required, which beside the value stores the information, if the attribute is available. Scout data objects solve this issue: Data objects internally use a Map> where the abstract DoNode at runtime is represented by a DoValue or a DoList object instance wrapping the value. Value: DoNode.get() returns the (wrapped) value of the attribute Listing 13. Example: ExampleEntityDo Access the Attribute Value ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); // access using attribute accessor String name1 = entity.name().get(); List values1 = entity.values().get(); // access using generated attribute getter String name2 = entity.getName(); List values2 = entity.getValues(); Existence: Using the DoNode.exists() method, each attribute may be checked for existence Listing 14. Example: ExampleEntityDo Attribute Existence // check existence of attribute boolean hasName = entity.name().exists(); A simple data objects is implemented by subclassing the DoEntity class. For a complex hierarchy of data objects the base class may be abstract and extend the DoEntity class, further subclasses extend the abstract base class. The abstract base data object class does not need to specify a @TypeName annotation since there are no instances of the abstract class which are serialized or deserialized directly. Each non-abstract subclass must specify a unique @TypeName annotation value. Listing 15. Example: Abstract class AbstractExampleEntityDo with one attribute public abstract class AbstractExampleEntityDo extends DoEntity { public DoValue name() { return doValue(\"name\"); } Listing 16. Example: Subclass 1 with an additional attribute and a unique type name @TypeName(\"ExampleEntity1\") public class ExampleEntity1Do extends AbstractExampleEntityDo { public DoValue name1Ex() { return doValue(\"name1Ex\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity1Do withName1Ex(String name1Ex) { name1Ex().set(name1Ex); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public String getName1Ex() { return name1Ex().get(); } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity1Do withName(String name) { name().set(name); return this; } } Listing 17. Example: Subclass 2 with an additional attribute and a unique type name @TypeName(\"ExampleEntity2\") public class ExampleEntity2Do extends AbstractExampleEntityDo { public DoValue name2Ex() { return doValue(\"name2Ex\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity2Do withName2Ex(String name2Ex) { name2Ex().set(name2Ex); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public String getName2Ex() { return name2Ex().get(); } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntity2Do withName(String name) { name().set(name); return this; } } Listing 18. Example: Class with attributes of type AbstractExampleEntityDo public class ExampleDoEntityListDo extends DoEntity { public DoList listAttribute() { return doList(\"listAttribute\"); } public DoValue singleAttribute() { return doValue(\"singleAttribute\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Generated(\"DoConvenienceMethodsGenerator\") public ExampleDoEntityListDo withListAttribute(Collection listAttribute) { listAttribute().updateAll(listAttribute); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleDoEntityListDo withListAttribute(AbstractExampleEntityDo... listAttribute) { listAttribute().updateAll(listAttribute); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public List getListAttribute() { return listAttribute().get(); } @Generated(\"DoConvenienceMethodsGenerator\") public ExampleDoEntityListDo withSingleAttribute(AbstractExampleEntityDo singleAttribute) { singleAttribute().set(singleAttribute); return this; } @Generated(\"DoConvenienceMethodsGenerator\") public AbstractExampleEntityDo getSingleAttribute() { return singleAttribute().get(); } } Listing 19. Example: Using the ExampleDoEntityListDo class with different kinds of AbstractExampleEntityDo sub classes ExampleDoEntityListDo entity = BEANS.get(ExampleDoEntityListDo.class); entity.withListAttribute( BEANS.get(ExampleEntity1Do.class) .withName1Ex(\"one-ex\") .withName(\"one\"), BEANS.get(ExampleEntity2Do.class) .withName2Ex(\"two-ex\") .withName(\"two\")); entity.withSingleAttribute( BEANS.get(ExampleEntity1Do.class) .withName1Ex(\"single-one-ex\") .withName(\"single-one\")); If an instance of ExampleDoEntityListDo is serialized, each attribute is serialized using its runtime data type, adding an appropriate _type attribute to each serialized object. Therefore, the deserializer knows which concrete class to instantiate while deserializing the JSON document. This mechanism is used for simple value properties and list value properties. To each object which is part of a list value property the _type property is added to support polymorphism within single elements of a list. Listing 20. Example: ExampleDoEntityListDo as JSON { \"_type\" : \"ExampleDoEntityListDo\", \"listAttribute\" : [ { \"_type\" : \"ExampleEntity1\", \"name\" : \"one\", \"name1Ex\" : \"one-ex\" }, { \"_type\" : \"ExampleEntity2\", \"name\" : \"two\", \"name2Ex\" : \"two-ex\" } ], \"singleAttribute\" : { \"_type\" : \"ExampleEntity1\", \"name\" : \"single-one\", \"name1Ex\" : \"single-one-ex\" } } To rename a data object attribute in a subclass, override the attribute accessor method and annotate it with @AttributeName using the new attribute name as value. Additionally the overridden method must call the doValue() method providing the new attribute name as argument. Listing 21. Example: Rename attribute in a data object subclass @TypeName(\"ExampleEntityEx\") public class ExampleEntityExDo extends ExampleEntityDo { @Override @AttributeName(\"nameEx\") public DoValue name() { (1) return doValue(\"nameEx\"); } /* ************************************************************************** * GENERATED CONVENIENCE METHODS * *************************************************************************/ @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityExDo withName(String name) { name().set(name); return this; } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityExDo withValues(Collection values) { values().updateAll(values); return this; } @Override @Generated(\"DoConvenienceMethodsGenerator\") public ExampleEntityExDo withValues(Integer... values) { values().updateAll(values); return this; } } 1 Rename name attribute of superclass to nameEx Use the basic data object interface IDoEntity to model a data object hierarchy with own base interfaces and a set of implementing classes. Interfaces extending IDataObject do not need a @TypeName annotation, since they are never directly serialized or deserialized. The interfaces may be used as types for attributes within a data object. At runtime the concrete classes implementing the interfaces are serialized and their @TypeName annotation value is used. The Data Object base class DoEntity defines a generic equals() and hashCode() implementation considering all attributes of a data object for equality. A data object is equals to another data object, if the Java class of both data objects is identical and the attribute maps (including their nested values) of both data objects are equals. For futher details see: org.eclipse.scout.rt.dataobject.DoEntity.equals(Object) org.eclipse.scout.rt.dataobject.DoNode.equals(Object) An instance of the DoEntity class can represent any kind of JSON document. If the JSON document contains no type attributes or no matching data object class exists at runtime, the JSON document is deserialized into a raw DoEntity instance holding all attributes. To access the attributes of the data object a set of generic getter methods may be used by specifying the attribute name. A generic JSON document is deserialized into a generic tree-like structure of nested DoEntity instances. If the serialized JSON document contains a _type and/or _typeVersion attribute, the attribute and its value is added as attribute to the generic raw DoEntity instance. Listing 22. Example: ExampleEntityDo accessing attribute \"by name\" ExampleEntityDo entity = BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5); // access name attribute by its attribute name Object name1 = entity.get(\"name\"); (1) String name2 = entity.get(\"name\", String.class); (2) String name3 = entity.getString(\"name\"); (3) // access values attribute by its attribute name List values1 = entity.getList(\"values\"); (4) List values2 = entity.getList(\"values\", String.class); (5) List values3 = entity.getStringList(\"values\"); (6) // optional list attribute access by its attribute name Optional> values4 = entity.optList(\"values\"); (7) Optional> values5 = entity.optList(\"values\", String.class); (8) 1 Accessing value attribute, default type is Object 2 Accessing value attribute, specify the type as class object if known 3 Accessing value attribute, convenience method for a set of common types 4 Accessing list attribute, default type is Object 5 Accessing list attribute, specify the type as class object if known 6 Accessing list attribute, convenience method for a set of common types 7 Accessing optional list attribute, default type is Object 8 Accessing optional list attribute, specify the type as class object if known If a list attribute is not available, using one of the getList(…​) getters adds an empty list as attribute value into the entity and returns the list. Use optList(…​) in order to get an optionally available list without adding a new empty list as attribute. Apart of the convenience methods available directly within the DoEntity class, the DataObjectHelper class contains a set of further convenience methods to access raw values of a data object. If a generic JSON document is deserialized to a DoEntity class without using a subclass specifying the attribute types, all attributes of type JSON number are deserialized into the smallest possible Java type. For instance the number value 42 is deserialized into an Integer value, a large number may be deserialized into a BigInteger or BigDecimal if it is a floating point value. Using the convenience method DoEntity.getDecimal(…​) each number attribute is converted automatically into a BigDecimal instance on access. If a generic JSON document is deserialized, only a set of basic Java types like String, Number, Double are supported. Every JSON object is deserialized into a (nested) DoEntity structure, which internally is represented by a nested structure of Map. To build map-like a data object (corresponds to Map), the DoMapEntity base class may be used. Listing 23. Example: Map as ExampleMapEntityDo data object @TypeName(\"ExampleMapEntity\") public class ExampleMapEntityDo extends DoMapEntity { } The example JSON document of ExampleMapEntityDo instance with two elements: Listing 24. Example: ExampleMapEntityDo with two elements: { \"_type\" : \"ExampleMapEntity\", \"mapAttribute1\" : { \"_type\" : \"ExampleEntity\", \"name\" : \"example-1\", \"values\" : [1,2,3,4,5] }, \"mapAttribute2\" : { \"_type\" : \"ExampleEntity\", \"name\" : \"example-2\", \"values\" : [6,7,8,9] } } Listing 25. Example: Accessing attributes ExampleMapEntityDo mapEntity = BEANS.get(ExampleMapEntityDo.class); mapEntity.put(\"mapAttribute1\", BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(1, 2, 3, 4, 5)); mapEntity.put(\"mapAttribute2\", BEANS.get(ExampleEntityDo.class) .withName(\"Example\") .withValues(6, 7, 8, 9)); ExampleEntityDo attr1 = mapEntity.get(\"mapAttribute1\"); (1) Map allAttributes = mapEntity.all(); (2) 1 Accessing attribute using get method returns the attribute of declared type T 2 Accessing all attributes using all method returns a map with all attributes of type T A DoMapEntity subclass may declare custom attributes of another type than T (e.g. an integer size attribute). If attributes of other types are used, using the all method results in a ClassCastException since not all attributes are of the same type any longer. According to the JSON specification a JSON document at top level may contain a object or an array. If a JSON string of unknown structure is deserialized, the common super interface IDataObject may be used as target type for the call to the deserializer: Listing 26. Example: Deserialize a JSON document with unknown structure String json = \"\"; IDataObjectMapper mapper = BEANS.get(IDataObjectMapper.class); IDataObject dataObject = mapper.readValue(json, IDataObject.class); if (dataObject instanceof IDoEntity) { // handle object content } else if (dataObject instanceof DoList) { // handle array content } The DoEntityBuilder may be used to build ad-hoc data objects without a concrete Java class defining its attributes. Listing 27. Example: DoEntityBuilder IDoEntity entity = BEANS.get(DoEntityBuilder.class) .put(\"attr1\", \"foo\") .put(\"attr2\", \"bar\") .putList(\"listAttr\", 1, 2, 3) .build(); (1) String entityString = BEANS.get(DoEntityBuilder.class) .put(\"attr1\", \"foo\") .put(\"attr2\", \"bar\") .putList(\"listAttr\", 1, 2, 3) .buildString(); (2) 1 Builder for a DoEntity object 2 Builder for the string representation of a DoEntity objects The Scout data object implementation does not reference any specific Java serialization library or framework. The basic building blocs of data objects are part of the Scout platform and to not reference any thirdparty libraries. At runtime an implementation of the IDataObjectMapper interface must be provided. The Scout default implementation based on the JSON library Jackson is provided by adding a maven dependency to the module org.eclipse.scout.rt.jackson. The dependency to this module must be added in the top-level .dev/.app module. A dependency within the program code is not necessaray as long as no specific Jackson features should be used within the application code. The class org.eclipse.scout.rt.dataobject.DataObjectInventory provides access to all available data objects at runtime. For each data object all available attributes and their properties (name, type, accessor method and format pattern) are available: Listing 28. Example: Accessing data object inventory Map attributes = BEANS.get(DataObjectInventory.class).getAttributesDescription(ExampleEntityDo.class); attributes.forEach( (key, value) -> System.out.println(\"Attribute \" + key + \" type \" + value.getType())); Apart from attribute descriptions, the inventory provides access to type name and type version of each data object class. The application scoped beans DataObjectSerializers resp. DataObjectDeserializers define the available serializer and deserializer classes used to marshal the data objects. Own custom serializer and deserializer implementations can be added by replacing the corresponding base class and register its own custom serializer or deserializer. Implementations of org.eclipse.scout.rt.dataobject.enumeration.IEnum add a stringValue() method to each enumeration value, guaranteeing a constant, fixed string value for each enumeration value. An arbitrary Java enum may be used within a data object, but does not guarantee a stable serialized value, if an enumeration value is changed in future. Additionally implementations of IEnum can be annotated with @EnumName to support being referenced in a data object signature test. All instances of IEnum may be used within data objects and are automatically serialized to their JSON string value representation and deserialized back to the correct Java class instance. The default resolver mechanism for IEnum (see org.eclipse.scout.rt.dataobject.enumeration.EnumResolver) matches the given string with the available string values in the current enumeration implementation to look up the matching enumeration value. An optional static resolve() method handles the resolve of a given string value into the correct enumeration value allowing to support even string values, whose enumeration values where changed or deleted. Listing 29. Example IEnum implementation @EnumName(\"scout.ExampleEnum\") public enum ExampleEnum implements IEnum { ONE(\"one\"), TWO(\"two\"), THREE(\"three\"); private final String m_stringValue; ExampleEnum(String stringValue) { m_stringValue = stringValue; } @Override public String stringValue() { return m_stringValue; } public static ExampleEnum resolve(String value) { (1) // custom null handling if (value == null) { return null; } switch (value) { // custom handling of old values (assuming 'old' was used in earlier revisions) case \"one\": return ONE; case \"two\": return TWO; case \"three\": return THREE; case \"four\": return THREE; default: // custom handling of unknown values throw new AssertionException(\"unsupported status value '{}'\", value); } } } 1 Optional resolve method Implementations of org.eclipse.scout.rt.dataobject.id.IId interface wrap an arbitrary value adding a concrete Java type to a scalar value. E.g. the key of an example entity which technically is a UUID becomes an instance of the ExampleId class. All instances of IId may be used within data objects and are automatically serialized to their JSON string representation of the wrapped value and deserialized back to the correct Java class instance. An exampleId instance may then be used as type-safe parameter for further referencing a given example entity record, for instance as attribute value within a data object. Listing 30. Example ID implementation wrapping a UUID @IdTypeName(\"scout.ExampleId\") public static final class ExampleId extends AbstractUuId { private static final long serialVersionUID = 1L; public static ExampleId create() { return new ExampleId(UUID.randomUUID()); } public static ExampleId of(UUID id) { if (id == null) { return null; } return new ExampleId(id); } public static ExampleId of(String id) { if (id == null) { return null; } return new ExampleId(UUID.fromString(id)); } private ExampleId(UUID id) { super(id); } } A set of utility methods for unit tests with data objects are provided within the DataObjectTestHelper class. Commonly used are a set of assert methods (e.g. assertEquals(Object expected, Object actual)) for testing data objects for (deep) equality.","title":"Data Objects","component":"scout-docs","version":"23.2","name":"data-object","url":"/scout-docs/next/technical-guide/working-with-data/data-object.html","titles":[{"text":"Data Object Definition","hash":"data-object-definition","id":1},{"text":"Marshalling","hash":"marshalling","id":2},{"text":"Type Name","hash":"type-name","id":3},{"text":"Type Version","hash":"type-version","id":4},{"text":"Namespace and ITypeVersion","hash":"cha-namespace-and-itypeversion","id":5},{"text":"Signature Test","hash":"signature-test","id":6},{"text":"Data Object Naming Convention","hash":"data-object-naming-convention","id":7},{"text":"Attribute Name","hash":"attribute-name","id":8},{"text":"Attribute Format","hash":"attribute-format","id":9},{"text":"Ignoring an Attribute","hash":"ignoring-an-attribute","id":10},{"text":"Handling of DoEntity Attributes","hash":"handling-of-doentity-attributes","id":11},{"text":"Access Data Object Attributes","hash":"access-data-object-attributes","id":12},{"text":"Abstract Data Objects & Polymorphism","hash":"abstract-data-objects-polymorphism","id":13},{"text":"Rename an attribute of a data object in a subclass","hash":"rename-an-attribute-of-a-data-object-in-a-subclass","id":14},{"text":"Interfaces to Data Objects","hash":"interfaces-to-data-objects","id":15},{"text":"Equals and Hashcode","hash":"equals-and-hashcode","id":16},{"text":"Generic DoEntity","hash":"generic-doentity","id":17},{"text":"Accessing number values","hash":"accessing-number-values","id":18},{"text":"Map of objects","hash":"map-of-objects","id":19},{"text":"IDataObject Interface - Data Objects with unknown structure","hash":"idataobject-interface-data-objects-with-unknown-structure","id":20},{"text":"Ad-Hoc Data Objects","hash":"ad-hoc-data-objects","id":21},{"text":"Maven Dependencies","hash":"maven-dependencies","id":22},{"text":"Data Object Inventory","hash":"data-object-inventory","id":23},{"text":"Extending with custom serializer and deserializer","hash":"extending-with-custom-serializer-and-deserializer","id":24},{"text":"Enumerations within Data Objects","hash":"enumerations-within-data-objects","id":25},{"text":"Typed IDs within Data Objects","hash":"typed-ids-within-data-objects","id":26},{"text":"Unit Testing","hash":"sec-unit-testing","id":27}]},"200":{"id":200,"text":"The Java API for XML-Based Web Services (JAX-WS) is a Java programming language API for creating web services. JAX-WS is one of the Java XML programming APIs, and is part of the Java EE platform. Scout facilitates working with webservices, supports you in the generation of artifacts, and provides the following functionality: ready to go Maven profile for easy webservice stub and artifact generation full JAX-WS 2.3 compliance JAX-WS implementor independence provides an up front port type EntryPoint to enforce for authentication, and to run web requests in a RunContext adds cancellation support for on-going webservice requests provides a port cache for webservice consumers allows to participate in 2PC protocol for webservice consumers allows to provide 'init parameters' to handlers The JAX-WS Scout integration provides a thin layer on top of JAX-WS implementors to facilitate working with webservices. It depends on the JAX-WS 2.3.x API as specified in JSR 224. It is implementor neutral, and was tested with with the following implementations: JAX-WS RI (reference implementation) JAX-WS METRO Apache CXF The integration does not require you to bundle the JAX-WS implementor with your application, which is a prerequisite for running in an EE container. A servlet container like Apache Tomcat typically does not ship with a JAX-WS implementor. As the actual implementor, you can either use JAX-WS RI as shipped with the JRE, or provide a separate implementor like JAX-WS METRO or Apache CXF in the form of a Maven dependency. However, JAX-WS RI does not provide a servlet based entry point, because the Servlet API is not part of the Java SE specification. When publishing webservices, it therefore is easiest to ship with a separate implementor: Declare a respective Maven dependency in your webbapp project - that is the Maven module typically containing the application’s web.xml. When running in an EE container, the container typically ships with a JAX-WS implementor. It is highly recommended to use that implementor, primarily to avoid classloading issues, and to further profit from the container’s monitoring and authentication facility. Refer to the containers documentation for more information. JAX-WS Scout integration is prepared to run with different implementors. Unfortunately, some implementors do not implement the JSR exactly, or some important functionality is missing in the JSR. To address this fact without loosing implementor independence, the delegate bean JaxWsImplementorSpecifics exists. As of now, Scout ships with three such implementor specific classes, which are activated via config.properties by setting the property scout.jaxws.implementor with its fully qualified class name. By default, JAX-WS METRO implementor is installed. For instance, support for Apache CXF implementor is activated as following: scout.jaxws.implementor=org.eclipse.scout.rt.server.jaxws.implementor.JaxWsCxfSpecifics class description JaxWsRISpecifics implementor specifics for JAX-WS Reference Implementation (RI) as contained in JRE JaxWsMetroSpecifics implementor specifics for JAX-WS METRO implementation JaxWsCxfSpecifics implementor specifics for Apache JAX-WS CXF implementation Of course, other implementors can be used as well. For that to work, install your own JaxWsImplementorSpecifics class, and reference its fully qualified name in config.properties. This class encapsulates functionality that is defined in JAX-WS JSR 224, but may diverge among JAX-WS implementors. As of now, the following points are addressed: missing support in JSR to set socket connect and read timeout; proprietary 'property' to set response code in Apache CXF; when working with Apache CXF, response header must be set directly onto Servlet Response, and not via MessageContext; when working with JAX-WS METRO or JAX-WS RI, the handler’s return value is ignored in one-way communication; instead, the chain must be exited by throwing a webservice exception; Learn more about how to configure a JAX-WS implementor: Configure JAX-WS implementor The effective dependency to the JAX-WS implementor is to be specified in the pom.xml of the webapp module (not the server module). That allows for running with a different implementor depending on the environment, e.g. to provide the implementor yourself when starting the application from within your IDE in Jetty, or to use the container’s implementor when deploying to an EE enabled application server. Even if providing the very same implementor for all environments yourself, it is good practice to do the configuration in the webapp module. A generally applicable configuration cannot be given, because the effective configuration depends on the implementor you choose, and whether it is already shipped with the application server you use. However, if JAX-WS RI is sufficient, you do not have to specify an implementor at all because already contained in JRE. If running in an EE application server, refer to the containers documentation for more information. Listing 1 provides sample configuration for shipping with JAX_WS METRO and Listing 2 does the same for Apache CXF Listing 1. Maven dependency for JAX-WS METRO com.sun.xml.ws jaxws-rt ... Listing 2. Maven dependency for Apache CXF org.apache.cxf cxf-rt-frontend-jaxws ... org.apache.cxf cxf-rt-transports-http ... org.springframework spring-web ... This section describes the configuration of the entry point Servlet to publish webservices. If working with webservice consumers only, no configuration is required. Similar to the pom.xml as described in Configure JAX-WS Maven dependency in pom.xml, the web.xml differs from implementor to implementor, and whether the implementor is already shipped with the application server. Nevertheless, the following Listing 3 show a sample configuration for JAX-WS METRO and Listing 4 for Apache CXF. Listing 3. web.xml for JAX-WS METRO Servlet com.sun.xml.ws.server.http.publishStatusPage true com.sun.xml.ws.server.http.publishWSDL true com.sun.xml.ws.transport.http.servlet.WSServletContextListener jaxws com.sun.xml.ws.transport.http.servlet.WSServlet jaxws /jaxws/* (1) 1 the base URL where to publish the webservice endpoints Listing 4. web.xml for Apache CXF Servlet CXF Servlet jaxws org.apache.cxf.transport.servlet.CXFServlet config-location /WEB-INF/cxf-jaxws.xml (1) 1 jaxws /jaxws/* (2) 1 Apache CXF specific configuration file for endpoints to be published. See Apache CXF for more information. 2 the base URL where to publish the webservice endpoints But, if running in an EE container, it is most likely that a Servlet configuration must not be configured, because the endpoints are discovered by the application server, or registered in a vendor specific way. Refer to the containers documentation for more information. Some application servers like Oracle WebLogic Server (WLS) allow the port types to be registered as a Servlet in web.xml. However, this is vendor specific, and works despite the fact that port type does not implement 'javax.servlet.Servlet'. Do not forget to exclude the webservice’s Servlet URL pattern from authentication filter. Scout JAX-WS integration does not prescribe how to organize your webservices in terms of Maven modules. You could either put all your webservices directly into the server module, or create a separate jaxws module containing all webservices, or even create a separate jaxws module for each webservice. Most often, the second approach of a single, separate jaxws module, which the server module depends on, is chosen. This is mainly because of the following benefits: annotation processing must not be enabled for the entire server module one module to build all webservice artifacts at once easier to work with shared element types among webservices Figure 1. typical modularization It is important to note, that the server depends on the jaxws module, and not vice versa. The jaxws module is primarily of technical nature, meaning that it knows how to generate its WS artifacts, and also contains those. However, implementing port type beans and even implementing handler beans are typically put into the server module to the access service and database layer. On the other hand, WS clients may be put into jaxws module, because they rarely contain any project specific business logic. You may ask yourself, how the jaxws module can access the implementing port type and handlers located in the server module. That works because of the indirection via bean manager, and because there is a flat classpath at runtime. See WebServiceEntryPoint for more information. The Maven plugin 'com.sun.xml.ws:jaxws-maven-plugin' with the goal 'wsimport' is used to generate a webservice stub from a WSDL file and its referenced XSD schema files. If your Maven module inherits from the Scout module 'maven_rt_plugin_config-master', the 'jaxws' profile is available, which activates automatically upon the presence of a 'WEB-INF/wsdl' folder. Instead of inheriting from that module, you can alternatively copy the 'jaxws' profile into your projects parent POM module. This profile is for convenience purpose, and provides a ready-to-go configuration to generate webservice stubs and webservice provider artifacts. It configures the 'jaxws-maven-plugin' to look for WSDL and XSD files in the folder 'src/main/resources/WEB-INF/wsdl', and for binding files in the folder '/src/main/resources/WEB-INF/binding'. Upon generation, the stub will be put into the folder 'target/generated-sources/wsimport'. The profiles requires the Scout runtime version to be specified, and which is used to refer to org.eclipse.scout.jaxws.apt module to generate webservice provider artifacts. However, this version is typically defined in pom.xml of the parent module, because also used to refer to other Scout runtime artifacts. Listing 5. Scout version defined as Maven property 5.2.0-SNAPSHOT If your project design envisions a separate JAR module per WSDL, you simply have to set the property 'jaxws.wsdl.file' with the name of your WSDL file in the module’s pom.xml (example in Listing 6). Listing 6. wsimport configuration in pom.xml if working with a single WSDL file per JAR module YourWebService.wsdl (1) 1 name of the wsdl file Otherwise, if having multiple WSDL files in your JAR module, some little more configuration is required, namely a respective execution section per WSDL file. Thereby, the 'id' of the execution section must be unique. Scout 'jaxws' profile already provides one such section, which is used to generate the stub for a single WSDL file (see such configuration in Listing 6), and names it 'wsimport-1'. It is simplest to name the subsequent execution sections 'wsimport-2', 'wsimport-3', and so on. For each execution section, you must configure its unique id, the goal 'wsimport', and in the configuration section the respective wsdlLocation and wsdlFile. For 'wsimport' to work, wsdlLocation is not required. However, that location will be referenced in generated artifacts to set the wsdl location via @WebService and @WebServiceClient. The complete configuration is presented in Listing 7. If you decide to configure multiple WSDL files in your POM as described in Listing 7, the configuration defined in the parent POM (maven_rt_plugin_config-master) and expecting a configuration as presented in Listing 6 needs to be overridden, therefore one of your execution id needs to be wsimport-1. Listing 7. wsimport configuration in pom.xml if working with multiple WSDL files per JAR module com.sun.xml.ws jaxws-maven-plugin (1) wsimport-1 (2) wsimport (3) WEB-INF/wsdl/YourFirstWebService.wsdl (4) YourFirstWebService.wsdl (5) (6) wsimport-2 wsimport WEB-INF/wsdl/YourSecondWebService.wsdl YourSecondWebService.wsdl ... 1 declare an execution section for each WSDL file 2 give the section a unique id (wsimport-1, wsimport-2, wsimport-3, …​) 3 specify the goal 'wsimport' to build the webservice stub 4 specify the project relative path to the WSDL file 5 specify the relative path to the WSDL file (relative to 'WEB-INF/wsdl') 6 declare an execution section for the next WSDL file Further, you can overwrite any configuration as defined by 'jaxws-maven-plugin'. See http://www.mojohaus.org/jaxws-maven-plugin/ for supported configuration properties. Also, it is good practice to create a separate folder for each WSDL file, which also contains all its referenced XSD schemas. Then, do not forget to change the properties wsdlLocation and wsdlFile accordingly. By default, all XML files contained in folder 'WEB-INF/binding' are used as binding files. But, most often, you will have a global binding file, which applies to all your WSDL files, and some custom binding files different per WSDL file and XSD schema files. See how to explicitly configure binding files in Listing 8. Listing 8. explicit configuration of binding files ... ... global-bindings.xml (1) your-first-webservice-ws-bindings.xml (2) your-first-webservice-xs-bindings.xml (3) ... ... global-bindings.xml (1) your-second-webservice-ws-bindings.xml (2) your-second-webservice-xs-bindings.xml (3) 1 global binding file which applies to all XSD schema elements. See Listing 9 for an example. 2 custom binding file to customize the webservice’s WSDL components in the namespace http://java.sun.com/xml/ns/jaxws. See Listing 10 for an example. 3 custom binding file to customize the webservice’s XSD schema elements in the namespace http://java.sun.com/xml/ns/jaxb. See Listing 11 for an example. With binding files in place, you can customize almost every WSDL component and XSD element that can be mapped to Java, such as the service endpoint interface class, packages, method name, parameter name, exception class, etc. The global binding file typically contains some customization for common data types like java.util.Date or java.util.Calendar, whereas the custom binding files are specific for a WSDL or XSD schema. See XML adapters to work with java.util.Date and java.util.Calendar. Listing 9. example of global binding file in the namespace http://java.sun.com/xml/ns/jaxb By default, generated artifacts are put into the package corresponding to the element’s namespace. Sometimes, you like to control the package names, but you want to do that on a per-namespace basis, and not put all the artifacts of a webservice into the very same package. That is mainly to omit collisions, and to have artifacts shared among webservices not duplicated. Two separate binding files are required to customize WSDL components and XSD schema elements. That is because WSDL component customization is to be done in 'jaxws' namespace http://java.sun.com/xml/ns/jaxws, whereas XSD schema element customization in 'jaxb' namespace http://java.sun.com/xml/ns/jaxb. Listing 10. example of jaxws component customization in the namespace http://java.sun.com/xml/ns/jaxws (1) (2) 1 customization via jaxws namespace: http://java.sun.com/xml/ns/jaxws 2 instructs to put all webservice components (port type, service) into package org.eclipse.ws.yourfirstwebservice Listing 11. example of xsd schema element customization in the namespace http://java.sun.com/xml/ns/jaxb (1) (2) (3) 1 customization via jaxb namespace: http://java.sun.com/xml/ns/jaxb 2 instructs to put all XSD schema elements in namespace http://eclipse.org/public/services/ws/soap into package org.eclipse.ws.yourfirstwebservice 3 instructs to put all XSD schema elements in namespace http://eclipse.org/public/services/ws/common/soap into package org.eclipse.ws.common wsimport allows to directly configure the package name for files to be generated (packageName). However, this is discouraged, because all artifacts are put into the very same package. Use package customization on a per-namespace basis instead. For shared webservice artifacts, you can also use XJC binding compiler to generate those artifacts in advance, and then provide the resulting episode binding file (META-INF/sun-jaxb.episode) to wsimport. See https://www.mojohaus.org/jaxb2-maven-plugin/Documentation/v2.4/example_xjc_basic.html for more information. Annotation Processing (APT) is a tool which can be enabled to fire for annotated types during compilation. In JAX-WS Scout integration, it is used as a trigger to generate webservice port type implementations. Such an auto-generated port type implementation is called an entry point. It is to be published as the webservice’s endpoint, and acts as an interceptor for webservice requests. It optionally enforces for authentication, and makes the request to be executed in a RunContext. Then, it handles the web request to the effectively implementing port type bean for actual processing. The entry point generated simplifies the actual port type implementation by removing lot of glue code to be written by hand otherwise. Of course, this entry point is just for convenience purpose, and it is up to you to make use of this artifact. When using 'jaxws' Scout Maven profile, annotation processing is enabled for that module by default. But, an entry point for a webservice port type will only be generated if enabled for that port type, meaning that a class annotated with WebServiceEntryPoint pointing to that very endpoint interface is found in this module. Anyway, for a sole webservice consumer, it makes no sense to generate an entry point at all. In Eclipse IDE, the workspace build ignores annotation processing as configured in pom.xml. Instead, it must be enabled separately with the following files. Nevertheless, to simply run Maven build with annotation support from within Eclipse IDE, those files are not required. file description .settings/org.eclipse.jdt.core.prefs Enables APT for this module via the property org.eclipse.jdt.core.compiler.processAnnotations=enabled .settings/org.eclipse.jdt.apt.core.prefs Enables APT for this module via the property org.eclipse.jdt.apt.aptEnabled=true .factorypath Specifies the annotation processor to be used (JaxWsAnnotationProcessor) and dependent artifacts Simply run mvn clean compile on the project. If you are experiencing some problems, run with -X debug flag to get a more detailed error message. In the Eclipse IDE, there are three ways to generate webservice stubs and APT artifacts. the implicit way on behalf of the workspace build and m2e integration (automatically, but sometimes not reliable) the explicit but potentially slow way by doing a 'Update Maven Project' with 'clean projects' checked (Alt+F5) the explicit and faster way by running a Maven build for that project. Thereto, right-click on the project or pom.xml, then select the menu 'Run As | Maven build…​', then choose 'clean compile' as its goal and check 'Resolve workspace artifacts', and finally click 'Run'. Afterwards, do not forget to refresh the project by pressing F5. If the webservice stub(s) or APT artifacts are not generated (anew or at all), delete the target folder manually, and continue according to procedure number three. A possible reason might be the presence of 'target\\jaxws\\wsartifact-hash'. Then, for each webservice, a 'hash file' is computed by 'wsimport', so that regeneration only occurs upon a change of WSDL or XSD files. Stub and APT artifacts are derived resources, and should be excluded from version control. When working with Eclipse IDE, this is done automatically by eGit, because it adds derived resources to .gitignore (if configured to do so). JaxWsAnnotationProcessor is an annotation processor provided by Scout JAX-WS integration to generate an entry point for an endpoint interface during compilation. The instructions how to generate the entry point is given via a Java class or Java interface annotated with WebServiceEntryPoint annotation. In this chapter, you will learn how to publish a webservice provider via an entry point. An entry point implements the endpoint interface (or port type interface), and is published as the webservice endpoint for that endpoint interface. The entry point itself is auto generated by JaxWsAnnotationProcessor during compile time, based on instructions as given by the respective class/interface annotated with WebServiceEntryPoint annotation. The entry point is responsible to enforce authentication and to run the web request in a RunContext. In turn, the request is propagated to the bean implementing the endpoint interface. Figure 2 illustrates the endpoint’s class hierarchy and the message flow for a web request. Figure 2. Interaction of entry point and port type As you can see, both, entry point and port type implement the endpoint interface. But it is the entry point which is actually installed as the webservice endpoint, and which receives web requests. However, the webservice itself is implemented in the implementing bean, which typically is located in server module. See Modularization for more information. Upon a web request, the entry point simply intercepts the web request, and then invokes the web method on the implementing bean for further processing. See an example of an implementing port type bean, which is invoked by entry point. Do not forget to annotate the implementing bean with ApplicationScoped annotation in order to be found by bean manager. This section describes the steps required to generate an entry point. For demonstration purposes, a simple ping webservice is used, which provides a single method 'ping' to accept and return a String object. See the WSDL file of ping webservice: PingWebService.wsdl See the endpoint interface of ping webservice: PingWebServicePortType.java To generate an entry point for the webservice’s endpoint interface, create an interface as following in your jaxws project. @WebServiceEntryPoint(endpointInterface = PingWebServicePortType.class) (2) interface PingWebServiceEntryPointDefinition { (1) } 1 Create an interface or class to act as an anchor for the WebServiceEntryPoint annotation. This class or interface has no special meaning, except that it declares the annotation to be interpreted by annotation processor. 2 Reference the endpoint interface for which an entry point should be generated for. Typically, the endpoint interface is generated by 'wsimport' and is annotated with WebService annotation. It is important to understand, that the interface PingWebServiceEntryPointDefinition solely acts as the anchor for the WebServiceEntryPoint annotation. This class or interface has no special meaning, except that it declares the annotation to be interpreted by annotation processor. Typically, this class is called Entry Point Definition. If running mvn clean compile, an entry point is generated for that endpoint interface. See the entry point as generated for ping webservice: PingWebServicePortTypeEntryPoint.java If you should experience some problems in the entry point generation, refer to Build webservice stubs and APT artifacts from within Eclipse IDE, or Build webservice stubs and APT artifacts from console. This section gives an overview on how to configure the entry point to be generated. attribute description endpointInterface (mandatory) Specifies the endpoint interface for which to generate an entry point for. An endpoint interface defines the service’s abstract webservice contract, and is also known as port type interface. Also, the endpoint interface is annotated with WebService annotation. entryPointName Specifies the class name of the entry point generated. If not set, the name is like the name of the endpoint interface suffixed with EntryPoint. entryPointPackage Specifies the package name of the entry point generated. If not set, the package name is the same as of the element declaring this WebServiceEntryPoint annotation. serviceName Specifies the service name as declared in the WSDL file, and must be set if publishing the webservice via auto discovery in an EE container. Both, 'serviceName' and 'portName' uniquely identify a webservice endpoint to be published. See for valid service names in the WSDL: …​ portName Specifies the name of the port as declared in the WSDL file, and must be set if publishing the webservice via auto discovery in an EE container. Both, 'serviceName' and 'portName' uniquely identify a webservice endpoint to be published. See for valid port names in the WSDL: wsdlLocation Specifies the location of the WSDL document. If not set, the location is derived from WebServiceClient annotation which is typically initialized with the 'wsdlLocation' as provided to 'wsimport'. authentication Specifies the authentication mechanism to be installed, and in which RunContext to run authenticated requests. By default, authentication is disabled. If enabled, an AuthenticationHandler is generated and registered in the handler chain as very first handler. However, the position of that handler can be changed via order field on Authentication annotation. See Configure Authentication for more information. handlerChain Specifies the handlers to be installed. The order of the handlers is as declared. A handler is looked up as a bean, and must implement javax.xml.ws.handler.Handler interface. See Configure JAX-WS Handlers for more information. Besides the instructions which can be set via WebServiceEntryPoint annotation, it is further possible to contribute other annotations to the entry point. Simply declare the annotation of your choice as a sibling annotation to WebServiceEntryPoint annotation. In turn, this annotation will be added to the entry point as well. This may be useful to enable some vendor specific features, or e.g. to enable MTOM to efficiently send binary data to a client. That also applies for WebService annotation to overwrite values as declared in the WSDL file. Further, you can also provide your own handler chain binding file. However, handlers and authentication as declared via WebServiceEntryPoint annotation are ignored then. Handlers registered via handlerChain must be beans, meaning either annotated with @Bean or @ApplicationScoped. The binding to the concrete endpoint is done via 'endpointInterface' attribute. If a WSDL declares multiple services, create a separate entry point definition for each service to be published. Annotate the Entry Point Definition class with `IgnoreWebServiceEntryPoint' to not generate an entry point for that definition. This is primarily used while developing an entry point, or for documenting purpose. Some fields require you to provide a Java class. Such fields are mostly of the annotation type Clazz, which accepts either the concrete Class, or its 'fully qualified name'. Use the latter if the class is not visible from within jaxws module. However, if ever possible specify a Class. Because most classes are looked up via bean manager, this can be achieved with an interface located in 'jaxws' module, but with an implementation in 'server' module. The field 'authentication' on WebServiceEntryPoint configures what authentication mechanism to install on the webservice endpoint, and in which RunContext to run authenticated webservice requests. It consists of the IAuthenticationMethod to challenge the client to provide credentials, and the ICredentialVerifier to verify request’s credentials against a data source. By default, authentication is disabled. If enabled, an AuthenticationHandler is generated and registered in the handler chain as very first handler. The position can be changed via order field on Authentication annotation. The following properties can be set. method (mandatory) Specifies the authentication method to be used to challenge the client to provide credentials. By default, NullAuthenticationMethod is used to disable authentication. See IAuthenticationMethod for more information. verifier Specifies against which data source credentials are to be verified. By default, ForbiddenCredentialVerifier is used to reject any webservice request. See ICredentialVerifier for more information. order Specifies the position where to register the authentication handler in the handler chain. By default, it is registered as the very first handler. principalProducer Indicates the principal producer to use to create principals to represent authenticated users. By default, SimplePrincipalProducer is used. runContextProducer Indicates which RunContext to use to run authenticated webservice requests. By default, ServerRunContextProducer is used, which is based on a session cache, and enforces to run in a new transaction. If using container based authentication (authentication enforced by the application server), use ContainerBasedAuthenticationMethod as authentication method, and do not configure a credential verifier. Listing 12. Example configuration for an entry point definition @WebServiceEntryPoint( endpointInterface = PingWebServicePortType.class, (1) entryPointName = \"PingWebServiceEntryPoint\", entryPointPackage = \"org.eclipse.scout.docs.ws.ping\", serviceName = \"PingWebService\", portName = \"PingWebServicePort\", handlerChain = {(2) @Handler(@Clazz(CorrelationIdHandler.class)), (3) @Handler(value = @Clazz(IPAddressFilter.class), initParams = { (4) @InitParam(key = \"rangeFrom\", value = \"192.200.0.0\"), @InitParam(key = \"rangeTo\", value = \"192.255.0.0\")}), @Handler(@Clazz(LogHandler.class)), (5) }, authentication = @Authentication( (6) order = 2, (7) method = @Clazz(BasicAuthenticationMethod.class), (8) verifier = @Clazz(ConfigFileCredentialVerifier.class))) (9) @MTOM (10) 1 References the endpoint interface for which to generate an entry point for. 2 Declares the handlers to be installed on that entry point. The order is as declared. 3 Registers the 'CorrelationIdHandler' as the first handler to set a correlation ID onto the current message context. See Propagate state among Handlers and port type for more information about state propagation. 4 Registers the 'IpAddressFilter' as the second handler to filter for IP addresses. Also, this handler is parameterized with 'init params' to configure the valid IP range. 5 Registers the LogHandler as the third handler to log SOAP messages. 6 Configures the webservice’s authentication. 7 Configures the 'AuthHandler' to be put at position 2 (0-based), meaning in between of IpAddressFilter and LogHandler. By default, AuthHandler would be the very first handler in the handler chain. 8 Configures to use BASIC AUTH as authentication method. 9 Configures to verify user’s credentials against 'config.properties' file. 10 Specification of an MTOM annotation to be added to the entry point. This configuration generates the following artifacts: Figure 3. generated artifacts All artifacts are generated into the package 'org.eclipse.scout.docs.ws.ping', as specified by the definition. The entry point itself is generated into 'PingWebServiceEntryPoint.java'. Further, for each handler, a respective handler delegate is generated. That allows handlers to be looked up via bean manager, and to run the handlers on behalf of a RunContext. Also, an AuthHandler is generated to authenticate web requests as configured. The handler-chain XML file generated looks as following. As specified, the authentication handler is installed as the third handler. Listing 13. PingWebServiceEntryPoint_handler-chain.xml org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_LogHandler org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_AuthHandler org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_IPAddressFilter org.eclipse.scout.docs.ws.ping.PingWebServiceEntryPoint_CorrelationIdHandler The following listing shows the beginning of the entry point generated. As you can see, the handler-chain XML file is referenced via HandlerChain annotation, and the MTOM annotation was added as well. Listing 14. PingWebServiceEntryPoint.java @WebService(name = \"PingWebServicePortType\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", endpointInterface = \"org.eclipse.scout.docs.snippets.JaxWsSnippet.PingWebServicePortType\", serviceName = \"PingWebService\", portName = \"PingWebServicePort\") @MTOM @HandlerChain(file = \"PingWebServiceEntryPoint_handler-chain.xml\") public class PingWebServiceEntryPoint implements PingWebServicePortType { See listing for an example of how to configure JAX-WS handlers. JAX-WS handlers are configured directly on the entry point definition via the array field handlerChain. In turn, JaxWsAnnotationProcessor generates a 'handler XML file' with the handler’s order preserved, and which is registered in entry point via annotation handlerChain. A handler can be initialized with static 'init parameters', which will be injected into the handler instance. For the injection to work, declare a member of the type Map in the handler class, and annotate it with javax.annotation.Resource annotation. Because handlers are looked up via bean manager, a handler must be annotated with ApplicationScoped annotation. If a handler requires to be run in a RunContext, annotate the handler with RunWithRunContext annotation, and optionally specify a RunContextProducer. If the web request is authenticated upon entering the handler, the RunContext is run on behalf of the authenticated user. Otherwise, if not authenticated yet, it is invoked with the Subject as configured in scout.jaxws.provider.user.handler config property. Listing 15. Example of a JAX-WS Handler @ApplicationScoped (1) @RunWithRunContext (2) public class IPAddressFilter implements SOAPHandler { @Resource private Map m_initParams; (3) @Override public boolean handleMessage(SOAPMessageContext context) { String rangeForm = m_initParams.get(\"rangeFrom\"); (4) String rangeTo = m_initParams.get(\"rangeTo\"); // ... return true; } @Override public boolean handleFault(SOAPMessageContext context) { return true; } @Override public Set getHeaders() { return Collections.emptySet(); } @Override public void close(MessageContext context) { } } 1 Annotate the Handler with ApplicationScoped annotation, so it can be looked up via bean manager 2 Optionally annotate the Handler with RunWithRunContext annotation, so the handler is invoked in a RunContext 3 Declare a Map member annotated with Resource annotation to make injection of 'init parameters' work 4 Access injected 'init parameters' Sometimes it is useful to share state among handlers, and even with the port type. This can be done via javax.xml.ws.handler.MessageContext. By default, a property put onto message context is only available in the handler chain. To make it available to the port type as well, set its scope to 'APPLICATION' accordingly. The following listings gives an example of how to propagate state among handlers and port type. Listing 16. This handler puts the correlation ID onto message context to be accessible by subsequent handlers and the port type. @ApplicationScoped public class CorrelationIdHandler implements SOAPHandler { @Override public boolean handleMessage(SOAPMessageContext context) { context.put(\"cid\", UUID.randomUUID().toString()); (1) context.setScope(\"cid\", Scope.APPLICATION); (2) return true; } @Override public boolean handleFault(SOAPMessageContext context) { return true; } @Override public Set getHeaders() { return Collections.emptySet(); } @Override public void close(MessageContext context) { } } 1 Put the 'correlation ID' onto message context. 2 Set scope to APPLICATION to be accessible in port type. By default, the scope if HANDLER only. Listing 17. This handler accesses the 'correlation ID' as set by the previous handler. @ApplicationScoped public class CorrelationIdLogger implements SOAPHandler { @Override public boolean handleMessage(SOAPMessageContext context) { String correlationId = (String) context.get(\"cid\"); (1) // ... return true; } @Override public boolean handleFault(SOAPMessageContext context) { return true; } @Override public void close(MessageContext context) { } @Override public Set getHeaders() { return Collections.emptySet(); } } 1 Get the 'correlation ID' from message context. Listing 18. This port type accesses the 'correlation ID' as set by the previous handler. @ApplicationScoped public class CorrelationIdPortType implements PingWebServicePortType { @Override public String ping(String ping) { MessageContext currentMsgCtx = IWebServiceContext.CURRENT.get().getMessageContext(); (1) String correlationId = (String) currentMsgCtx.get(\"cid\"); (2) // ... return ping; } } 1 Get the current message context via thread local IWebServiceContext 2 Get the 'correlation ID' from message context. Scout’s JAX-WS integration already provides complete support for reading a correlation ID from the HTTP header named X-Scout-Correlation-Id of the incoming web service request and propagates it to the RunContext that executes the actual service operation. A new correlation ID is created if the HTTP header is empty or missing. The CorrelationIdHandler example above just illustrates the capabilities of a SOAPHandler. You have to implement your own handler if the consumer provides a correlation ID in another header parameter or as part of the request’s payload. Listing 19. Add Scout’s WsProviderCorrelationIdHandler to the handler chain @WebServiceEntryPoint( endpointInterface = PingWebServicePortType.class, entryPointName = \"PingWebServiceEntryPoint\", entryPointPackage = \"org.eclipse.scout.docs.ws.ping2\", serviceName = \"PingWebService\", portName = \"PingWebServicePort\", handlerChain = { @Handler(@Clazz(WsProviderCorrelationIdHandler.class)), (1) @Handler(@Clazz(LogHandler.class)), }, authentication = @Authentication( method = @Clazz(BasicAuthenticationMethod.class), verifier = @Clazz(ConfigFileCredentialVerifier.class))) 1 Add the correlation ID handler at the beginning of the handler chain to ensure that all handlers can use its value (especially the LogHandler has to be added after the correlation ID handler). The registration of webservice endpoints depends on the implementor you use, and whether you are running in an EE container with webservice auto discovery enabled. When running in an EE container, webservice providers are typically found by their presence. In order to be found, such webservice providers must be annotated with WebService annotation, and must have the coordinates 'serviceName' and 'portName' set. Still, most application servers allow for manual registration as well. E.g. if using Oracle WebLogic Server (WLS), endpoints to be published can be registered directly in 'web.xml' as a Servlet. However, this is vendor specific. Refer to the container’s documentation for more information. If not running in an EE container, the registration is implementor specific. In the following, an example for JAX-WS METRO and Apache CXF is given. During startup, JAX-WS METRO looks for the file '/WEB-INF/sun-jaxws.xml', which contains the endpoint definitions. Listing 20. WEB-INF/sun-jaxws.xml During startup, Apache CXF looks for the config file as specified in 'web.xml' via 'config-location'. See Listing 4 for more information. Listing 21. WEB-INF/cxf-jaxws.xml As the webservice endpoint, specify the fully qualified name to the entry point, and not to the implementing port type. Depending on the implementor, a HTML page may be provided to see all webservices published. For JAX-WS METRO, enter the URL to a concrete webservice, e.g. http://localhost:8080/jaxws/PingWebService. For Apache CXF, enter the base URL where the webservices are published, e.g. http://localhost:8080/jaxws. Communication with a webservice endpoint is done based on the webservice’s port generated by 'wsimport'. Learn more how to generate a webservice stub from a WSDL file. To interact with a webservice endpoint, create a concrete 'WebServiceClient' class which extends from AbstractWebServiceClient, and specify the endpoint’s coordinates ('service' and 'port') via its bounded type parameters. Listing 22. Example of a WS-Client public class PingWebServiceClient extends AbstractWebServiceClient { (1) } 1 Specify 'service' and 'port' via bounded type parameters A WS-Client can be configured with some default values like the endpoint URL, credentials, timeouts and more. However, the configuration can also be set or overwritten later when creating the InvocationContext. See also Default configuration of WS-Clients. Listing 23. Example of a WS-Client configuration public class PingWebServiceClient1 extends AbstractWebServiceClient { @Override protected Class> getConfiguredEndpointUrlProperty() { return JaxWsPingEndpointUrlProperty.class; (1) } @Override protected Class> getConfiguredUsernameProperty() { return JaxWsPingUsernameProperty.class; (2) } @Override protected Class> getConfiguredPasswordProperty() { return JaxWsPingPasswordProperty.class; (2) } @Override protected Class> getConfiguredConnectTimeoutProperty() { return JaxWsPingConnectTimeoutProperty.class; (3) } @Override protected Class> getConfiguredReadTimeoutProperty() { return JaxWsPingReadTimeoutProperty.class; (3) } } 1 Specifies the endpoint URL 2 Specifies credentials 3 Specifies timeouts A webservice operation is invoked on behalf of an invocation context, which is associated with a dedicated port, and which specifies the data to be included in the web request. Upon a webservice call, the invocation context should be discarded. Listing 24. Example of a webservice call PingWebServicePortType port = BEANS.get(PingWebServiceClient.class).newInvocationContext().getPort(); (1) port.ping(\"Hello world\"); (2) 1 Obtain a new invocation context and port via WS-Client 2 Invoke the webservice operation Invoking newInvocationContext() returns a new context and port instance. The context returned inherits all properties as configured for the WS-Client (endpoint URL, credentials, timeouts, …​), but which can be overwritten for the scope of this context. The following listing illustrates how to set/overwrite properties. Listing 25. Configure invocation context with data to be included in the web request final InvocationContext context = BEANS.get(PingWebServiceClient.class).newInvocationContext(); PingWebServicePortType port = context .withUsername(\"test-user\") (1) .withPassword(\"secret\") .withConnectTimeout(10, TimeUnit.SECONDS) (2) .withoutReadTimeout() (3) .withHttpRequestHeader(\"X-ENV\", \"integration\") (4) .getPort(); port.ping(\"Hello world\"); (5) 1 Set the credentials 2 Change the connect timeout to 10s 3 Unset the read timeout 4 Add a HTTP request header 5 Invoke the webservice operation The WS-Client provides port instances via a preemptive port cache. This cache improves performance because port creation may be an expensive operation due to WSDL/schema validation. The cache is based on a 'corePoolSize', meaning that that number of ports is created on a preemptive basis. If more ports than that number are required, they are created on demand, and additionally added to the cache until expired, which is useful at a high load. The JAX-WS specification does not specify thread safety of a port instance. Therefore, a port should not be used concurrently among threads. Further, JAX-WS API does not support to reset the Port’s request and response context, which is why a port should only be used for a single webservice call. The WS-Client supports for cancellation of webservice requests. Internally, every web request is run in another thread, which the calling thread waits for to complete. Upon cancellation, that other thread is interrupted, and the calling thread released with a WebServiceRequestCancelledException. However, depending on the JAX-WS implementor, the web request may still be running, because JAX-WS API does not support the cancellation of a web request. The invocation context allows you to access HTTP status code and HTTP headers of the last web request. final InvocationContext context = BEANS.get(PingWebServiceClient.class).newInvocationContext(); String pingResult = context.getPort().ping(\"Hello world\"); // Get HTTP status code int httpStatusCode = context.getHttpStatusCode(); // Get HTTP response header List httpResponseHeader = context.getHttpResponseHeader(\"X-CUSTOM-HEADER\"); An invocation context can be associated with request context properties, which are propagated to handlers and JAX-WS implementor. BEANS.get(PingWebServiceClient.class).newInvocationContext() .withRequestContextProperty(\"cid\", UUID.randomUUID().toString()) (1) .getPort().ping(\"Hello world\"); (2) 1 Propagate the correlation ID 2 Invoke the web operation Learn more how to access context properties from within a handler in Listing 17. To install a handler, overwrite execInstallHandlers and add the handler to the given List. The handlers are invoked in the order as added to the handler-chain. By default, there is no handler installed. The method execInstallHandlers is invoked upon preemptive creation of the port. Consequently, you cannot do any assumption about the calling thread. If a handler requires to run in another RunContext than the calling context, annotate it with RunWithRunContext annotation, e.g. to start a new transaction to log into database. If the endpoint requires to authenticate requests, an authentication handler is typically added to the list, e.g. BasicAuthenticationHandler for 'Basic authentication', or WsseUsernameTokenAuthenticationHandler for 'Message Level WS-Security authentication', or some other handler to provide credentials. public class PingWebServiceClient2 extends AbstractWebServiceClient { @Override protected void execInstallHandlers(List> handlerChain) { handlerChain.add(new BasicAuthenticationHandler()); handlerChain.add(BEANS.get(LogHandler.class)); } } The credentials as provided via InvocationContext can be accessed via request context with the property InvocationContext.PROP_USERNAME and InvocationContext.PROP_PASSWORD. The current context’s correlation ID can be forwarded to the consumed web service. Scout provides a handler that sets the X-Scout-Correlation-Id HTTP header on the outgoing request. public class PingWebServiceClient3 extends AbstractWebServiceClient { @Override protected void execInstallHandlers(List> handlerChain) { handlerChain.add(new BasicAuthenticationHandler()); handlerChain.add(BEANS.get(LogHandler.class)); handlerChain.add(BEANS.get(WsConsumerCorrelationIdHandler.class)); (1) } } 1 The handler can be at any position in the handler chain. The following properties can be set globally for all WS-Clients. However, a WS-Client can overwrite any of these values. property description default value scout.jaxws.consumer.portCache.enabled To indicate whether to use a preemptive port cache for WS-Clients. Depending on the implementor used, cached ports may increase performance, because port creation is an expensive operation due to WSDL and schema validation. The cache is based on a 'corePoolSize', meaning that that number of ports is created on a preemptive basis. If more ports than that number is required, they are created on demand and also added to the cache until expired, which is useful at a high load. true scout.jaxws.consumer.portCache.corePoolSize Number of ports to be preemptively cached to speed up webservice calls. 10 scout.jaxws.consumer.portCache.ttl Maximum time in seconds to retain ports in the cache if the 'corePoolSize' is exceeded. That typically occurs at high load, or if 'corePoolSize' is undersized. 15 minutes scout.jaxws.consumer.connectTimeout Connect timeout in milliseconds to abort a webservice request, if establishment of the HTTP connection takes longer than this timeout. A timeout of null means an infinite timeout. infinite scout.jaxws.consumer.readTimeout Read timeout in milliseconds to abort a webservice request, if it takes longer than this timeout for data to be available for read. A timeout of null means an infinite timeout. infinite Scout ships with some XML adapters to not have to work with XMLGregorianCalendar, but with java.util.Date instead. It is recommended to configure your global binding file accordingly. See Listing 9 for an example. See the adapter’s JavaDoc for more detailed information. Table 1. UTC Date adapters adapter description UtcDateAdapter Use this adapter to work with UTC xsd:dates. A UTC date is also known as 'zulu' date, and has 'GMT+-00:00'. Unlike UtcDateTimeAdapter, this adapter truncates hours, minutes, seconds and milliseconds. UtcTimeAdapter Use this adapter to work with UTC xsd:times. A UTC time is also known as 'zulu' time, and has 'GMT+-00:00'. Unlike UtcDateTimeAdapter, this adapter sets year, month and day to the epoch, which is defined as 1970-01-01 in UTC. UtcDateTimeAdapter Use this adapter to work with UTC xsd:dateTimes. A UTC time is also known as 'zulu' time, and has 'GMT+-00:00'. This adapter converts xsd:dateTime into UTC milliseconds, by respecting the timezone as provided. If the timezone is missing, the date is interpreted as UTC-time, and not local to the default JVM timezone. To convert a Date into xsd:dateTime, the date’s milliseconds are used as UTC milliseconds from the epoch, and are formatted as 'zulu' time. Table 2. Calendar adapters adapter description CalendarDateAdapter Use this adapter to work with Calendar xsd:dates without loosing timezone information. Unlike CalendarDateTimeAdapter, this adapter truncates hours, minutes, seconds and milliseconds. CalendarTimeAdapter Use this adapter to work with Calendar xsd:times without loosing timezone information. Unlike CalendarDateTimeAdapter, this adapter sets year, month and day to the epoch, which is defined as 1970-01-01 in UTC. CalendarDateTimeAdapter Adapter to convert a xsd:dateTime to a Calendar and vice versa. For both directions, the timezone information is not lost. Use this adapter if you expect to work with dates from various timezones without losing the local time. If the UTC (Zulu-time) is sufficient, use UtcDateTimeAdapter instead. Table 3. Default timezone Date adapters adapter description DefaultTimezoneDateAdapter Use this adapter to work with xsd:dates in the default timezone of the Java Virtual Machine. Depending on the JVM installation, the timezone may differ: 'GMT+-XX:XX'. Unlike DefaultTimezoneDateTimeAdapter, this adapter truncates hours, minutes, seconds and milliseconds. Whenever possible, use UtcDateAdapter or CalendarDateAdapter instead. DefaultTimezoneTimeAdapter Use this adapter to work with xsd:times in the default timezone of the Java Virtual Machine. Depending on the JVM installation, the timezone may differ: 'GMT+-XX:XX'. Unlike DefaultTimezoneDateTimeAdapter, this adapter sets year, month and day to the epoch, which is defined as 1970-01-01 in UTC. Whenever possible, use UtcTimeAdapter or CalendarTimeAdapter instead. DefaultTimezoneDateTimeAdapter Use this adapter to work with xsd:dateTimes in the default timezone of the Java Virtual Machine. Depending on the JVM installation, the timezone may differ: 'GMT+-XX:XX'. Whenever possible, use UtcDateTimeAdapter or CalendarDateTimeAdapter instead. @FunctionalInterface @WebService(name = \"PingWebServicePortType\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\") @SOAPBinding(parameterStyle = ParameterStyle.BARE) public interface PingWebServicePortType { @WebMethod(action = \"http://scout.eclipse.org/docs/ws/PingWebService/ping\") @WebResult(name = \"pingResponse\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", partName = \"parameters\") String ping(@WebParam(name = \"pingRequest\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", partName = \"ping\") String ping); } @Generated(value = \"org.eclipse.scout.jaxws.apt.JaxWsAnnotationProcessor\", date = \"2016-01-25T14:22:58:583+0100\", comments = \"EntryPoint to run webservice requests on behalf of a RunContext\") @WebService(name = \"PingWebServicePortType\", targetNamespace = \"http://scout.eclipse.org/docs/ws/PingWebService/\", endpointInterface = \"org.eclipse.scout.docs.ws.pingwebservice.PingWebServicePortType\") public class PingWebServicePortTypeEntryPoint implements org.eclipse.scout.docs.ws.pingwebservice.PingWebServicePortType { @Resource protected WebServiceContext m_webServiceContext; @Override public String ping(final String ping) { try { return lookupRunContext().call(new Callable() { @Override public final String call() throws Exception { return BEANS.get(PingWebServicePortType.class).ping(ping); } }, DefaultExceptionTranslator.class); } catch (Exception e) { throw handleUndeclaredFault(e); } } protected RuntimeException handleUndeclaredFault(final Exception e) { throw BEANS.get(JaxWsUndeclaredExceptionTranslator.class).translate(e); } protected RunContext lookupRunContext() { return BEANS.get(JaxWsRunContextLookup.class).lookup(m_webServiceContext); } } @ApplicationScoped public class PingWebServicePortTypeBean implements PingWebServicePortType { @Override public String ping(String ping) { return \"ping: \" + ping; } } ... org.eclipse.jdt.core.compiler.processAnnotations=enabled ... org.eclipse.jdt.apt.aptEnabled=true org.eclipse.jdt.apt.genSrcDir=target/generated-sources/annotations org.eclipse.jdt.apt.processorOptions/consoleLog=true org.eclipse.jdt.apt.reconcileEnabled=true The authentication method specifies the protocol to challenge the webservice client to provide credentials. Scout provides an implementation for BASIC and WSSE_UsernameToken. You can implement your own authentication method by implementing IAuthenticationMethod interface. Authentication method to apply Basic Access Authentication. This requires requests to provide a valid user name and password to access content. User’s credentials are transported in HTTP headers. Basic authentication also works across firewalls and proxy servers. However, the disadvantage of Basic authentication is that it transmits unencrypted base64-encoded passwords across the network. Therefore, you only should use this authentication when you know that the connection between the client and the server is secure. The connection should be established either over a dedicated line or by using Secure Sockets Layer (SSL) encryption and Transport Layer Security (TLS). Authentication method to apply Message Level WS-Security with UsernameToken Authentication. This requires requests to provide a valid user name and password to access content. User’s credentials are included in SOAP message headers. However, the disadvantage of WSSE UsernameToken Authentication is that it transmits unencrypted passwords across the network. Therefore, you only should use this authentication when you know that the connection between the client and the server is secure. The connection should be established either over a dedicated line or by using Secure Sockets Layer (SSL) encryption and Transport Layer Security (TLS). Use this authentication method when using container based authentication, meaning that webservice requests are authenticated by the application server, or a Servlet filter. Verifies user’s credentials against a data source like database, config.properties, Active Directory, or others. Scout provides an implementation for verification against users in config.properties. You can implement your own verifier by implementing ICredentialVerifier interface. If you require to run in a specific RunContext like a transaction for user’s verification, annotate the verifier with RunWithRunContext annotation, and specify a RunContextProducer accordingly. Credential verifier against credentials configured in config.properties file. By default, this verifier expects the passwords in 'config.properties' to be a hash produced with SHA-512 algorithm. To support you in password hash generation, ConfigFileCredentialVerifier provides a static Java main method. Credentials are loaded from property scout.auth.credentials. Multiple credentials are separated with the semicolon, username and password with the colon. If using hashed passwords (by default), the password’s salt and hash are separated with the dot. To work with plaintext passwords, set the property scout.auth.credentialsPlaintext to true. Example of hashed passwords: scott:SALT.PASSWORD-HASH;jack:SALT.PASSWORD-HASH;john:SALT.PASSWORD-HASH Example of plaintext passwords: scott:*;jack:;john:*","title":"Webservices with JAX-WS","component":"scout-docs","version":"23.2","name":"jax-ws","url":"/scout-docs/next/technical-guide/working-with-data/jax-ws.html","titles":[{"text":"Functionality","hash":"functionality","id":1},{"text":"JAX-WS implementor and deployment","hash":"jax-ws-implementor-and-deployment","id":2},{"text":"JAX-WS version and implementor","hash":"jax-ws-version-and-implementor","id":3},{"text":"Running JAX-WS in a servlet container","hash":"running-jax-ws-in-a-servlet-container","id":4},{"text":"Running JAX-WS in a EE container","hash":"running-jax-ws-in-a-ee-container","id":5},{"text":"Configure JAX-WS implementor","hash":"jaxws.implementor.configuration","id":6},{"text":"JaxWsImplementorSpecifics","hash":"JaxWsImplementorSpecifics","id":7},{"text":"Configure JAX-WS Maven dependency in pom.xml","hash":"jaxws.implementor.dependency","id":8},{"text":"Configure JAX-WS servlet in web.xml","hash":"configure-jax-ws-servlet-in-web-xml","id":9},{"text":"Modularization","hash":"jaxws.modularization","id":10},{"text":"Build webservice stubs and artifacts","hash":"build-webservice-stubs-and-artifacts","id":11},{"text":"Configure webservice stub generation via wsimport","hash":"jaxws.stub.generation","id":12},{"text":"Customize WSDL components and XSD schema elements via binding files","hash":"customize-wsdl-components-and-xsd-schema-elements-via-binding-files","id":13},{"text":"Annotation Processing Tool (APT)","hash":"annotation-processing-tool-apt","id":14},{"text":"Enable Annotation Processing Tool (APT) in Eclipse IDE","hash":"enable-annotation-processing-tool-apt-in-eclipse-ide","id":15},{"text":"Build webservice stubs and APT artifacts from console","hash":"generate_artifacts_from_console","id":16},{"text":"Build webservice stubs and APT artifacts from within Eclipse IDE","hash":"generate_artifacts_from_eclipse","id":17},{"text":"Exclude derived resources from version control","hash":"exclude-derived-resources-from-version-control","id":18},{"text":"JaxWsAnnotationProcessor","hash":"jaxwsannotationprocessor","id":19},{"text":"Provide a webservice","hash":"provide-a-webservice","id":20},{"text":"The concept of an Entry Point","hash":"WebServiceEntryPoint","id":21},{"text":"Generate an Entry Point as an endpoint interface","hash":"generate-an-entry-point-as-an-endpoint-interface","id":22},{"text":"Instrument the Entry Point generation","hash":"instrument-the-entry-point-generation","id":23},{"text":"Configure Authentication","hash":"jaxws.provider.authentication","id":24},{"text":"Example of an Entry Point definition","hash":"example.entrypoint.definition","id":25},{"text":"Configure JAX-WS Handlers","hash":"jaxws.provider.handlerChain","id":26},{"text":"Propagate state among Handlers and port type","hash":"jaxws.provider.statepropagation","id":27},{"text":"JAX-WS Correlation ID Propagation","hash":"jax-ws-correlation-id-propagation","id":28},{"text":"Registration of webservice endpoints","hash":"registration-of-webservice-endpoints","id":29},{"text":"JAX-WS METRO","hash":"jax-ws-metro","id":30},{"text":"Apache CXF","hash":"jaxws.registration.endpoints.cxf","id":31},{"text":"Consume a webservice","hash":"consume-a-webservice","id":32},{"text":"Invoke a webservice","hash":"invoke-a-webservice","id":33},{"text":"Cancel a webservice request","hash":"cancel-a-webservice-request","id":34},{"text":"Get information about the last web request","hash":"get-information-about-the-last-web-request","id":35},{"text":"Propagate state to Handlers","hash":"propagate-state-to-handlers","id":36},{"text":"Install handlers and provide credentials for authentication","hash":"install-handlers-and-provide-credentials-for-authentication","id":37},{"text":"JAX-WS Client Correlation ID Propagation","hash":"jax-ws-client-correlation-id-propagation","id":38},{"text":"Default configuration of WS-Clients","hash":"jaxws.consumer.configuration","id":39},{"text":"XML adapters to work with java.util.Date and java.util.Calendar","hash":"jaxws.xmladapters","id":40},{"text":"JAX-WS Appendix","hash":"jax-ws-appendix","id":41},{"text":"PingWebService.wsdl","hash":"PingWebService.wsdl","id":42},{"text":"PingWebServicePortType.java","hash":"PingWebServicePortType.java","id":43},{"text":"PingWebServicePortTypeEntryPoint.java","hash":"PingWebServicePortTypeEntryPoint.java","id":44},{"text":"PingWebServicePortTypeBean.java","hash":"PingWebServicePortTypeBean.java","id":45},{"text":".settings/org.eclipse.jdt.core.prefs file to enable APT in Eclipse IDE","hash":"settings_org.eclipse.jdt.core.prefs","id":46},{"text":".settings/org.eclipse.jdt.apt.core.prefs file to enable APT in Eclipse IDE","hash":"settings_org.eclipse.jdt.apt.core.prefs","id":47},{"text":".factorypath file to enable APT in Eclipse IDE","hash":"factorypath","id":48},{"text":"Authentication Method","hash":"IAuthenticationMethod","id":49},{"text":"BasicAuthenticationMethod","hash":"basicauthenticationmethod","id":50},{"text":"WsseUsernameTokenMethod","hash":"wsseusernametokenmethod","id":51},{"text":"ContainerBasedAuthenticationMethod","hash":"containerbasedauthenticationmethod","id":52},{"text":"Credential Verifier","hash":"ICredentialVerifier","id":53},{"text":"ConfigFileCredentialVerifier","hash":"configfilecredentialverifier","id":54}]},"201":{"id":201,"text":"A Lookup Call is used to lookup a single or multiple Lookup Rows. Several widgets like Smart Field, List Box or Tree Box take advantage of that concept in order to provide their proposals. The most important parts of a Lookup Row are the key and the value. The key can be of any type, the text must be of type String. In addition to the key and the text a Lookup Row can also define an icon, a tooltip text, CSS classes and more. Each Smart Field in Scout references a LookupCall class. The lookup call is in charge of querying a data source and returning results for that query. Example: when you type \"f\" into a Smart Field, a lookup call could return a result which contains lookup rows starting with \"F\", like \"Faz\" and \"Foo\". The lookup call may return static (hard-coded) data which is already available in the browser, or may fetch an external data-source via HTTP, typically some kind of REST API. Depending on how your Smart Field is configured and used, the Smart Field will call different methods on the LookupCall instance and pass data to that method, like the search text the user has typed into the field. These methods are: getAll, getByText, getByKey and getByRec. getByKey(): Retrieves a single lookup row for a specific key value. Used by Smart Fields and Smart Columns to get the display text for a given key value. getByText(): Retrieve multiple lookup rows which match a certain String. Used by Smart Fields when the user starts to enter some text in the field. getAll(): Retrieves all available lookup rows. Used by Smart Fields when the user clicks on the field. getByRec(): This can only be used for hierarchical lookup calls. It retrieves all available sub-tree lookup rows for a given parent. You must implement these methods. Start with creating a sub class of LookupCall(.js). Sub class StaticLookupCall(.js) when you need a simple lookup call that operates on data that is available locally. Sub class RemoteLookupCall(.js) when you must fetch lookup data from a remote server. This class is also used in Scout Classic to start a lookup on the Scout UI Server. Note that the lookup call works with Deferreds. This means the lookup call runs in the background and does not block the UI. When the lookup call is done eventually the Deferred is resolved and the Smart Field will process the result returned by the lookup call. Lookup calls provide different method to compute the set of LookupRows : getDataByKey(): Retrieves a single lookup row for a specific key value. Used by SmartFields and SmartColumns to get the display text for a given key value. getDataByText(): Retrieve multiple lookup rows which match a certain String. Used by SmartFields when the user starts to enter some text in the field. getDataByAll(): Retrieves all available lookup rows. Used by SmartFields when the user clicks on the browse icon. getDataByRec(): This can only be used for hierarchical lookup calls. It retrieves all available sub-tree lookup rows for a given parent. The Lookup call contains attributes (accessible with getter and setter) that can be used to compute the list of lookups rows. Out of the box you have: key: contains the key value when the lookup is queried by key. text: contains the text input in case of a text lookup (typically this is the text entered by the user smart field). all: contains the browse hint in case of a lookup by all (typically when a user click on the button to see all proposal in a smart field). rec: contains the key of the parent entry, in when the children of a node are loaded. master: contains the value of the master field (if a master field is associated to the field using the lookup call). It is possible to add you own additional attributes, for example validityFrom, validityTo as date parameter. Just add them as field with getter and setter: @ClassId(\"6154090e-86ac-4c08-9769-bf3ef61c1b4b\") public class LanguageLookupCall extends LookupCall { // other stuff like serialVersionUID, Lookup Service definition... private static final long serialVersionUID = 1L; private Date m_validityFrom; private Date m_validityTo; @Override protected Class> getConfiguredService() { return ILanguageLookupService.class; } public Date getValidityFrom() { return m_validityFrom; } public void setValidityFrom(Date validityFrom) { this.m_validityFrom = validityFrom; } public Date getValidityTo() { return m_validityTo; } public void setValidityTo(Date validityTo) { this.m_validityTo = validityTo; } } In this case, you might want to set your properties before the lookup call query is sent. This can be done with the PrepareLookup event of the SmartField or the ListBox: @Override protected void execPrepareLookup(ILookupCall call) { LanguageLookupCall c = (LanguageLookupCall) call; c.setValidityFrom(DateUtility.parse(\"2012-02-26\", \"yyyy-mm-dd\")); c.setValidityTo(DateUtility.parse(\"2013-02-27\", \"yyyy-mm-dd\")); } If you follow this pattern, you will consume the values on the server by casting the call: @Override public List> getDataByAll(ILookupCall call) { LanguageLookupCall c = (LanguageLookupCall) call; Date validityFrom = c.getValidityFrom(); Date validityTo = c.getValidityTo(); List> result = new ArrayList<>(); //compute result: corresponding lookup rows (depending on validityFrom and validityTo). return result; } Delegation to the Lookup Service on server side. They are not necessarily restricted to a fix number of records. Instead, they should be favoured if the set of records is rather large. Such a LookupCall is used if the data can be provided directly without the need to make a backend call. An example of this approach is when a SmartField or a SmartColumn is configured to be used with a CodeType. The code types are cached, so it is not necessary to fetch them using a lookup service. Instead, a LocalLookupCall, in that case the CodeLookupCall, may be used to load the data. It creates the LookupRows corresponding to the codes in the CodeType. Defined with getConfiguredXxxxxx() methods. Service: Defines which service is used to retrieve lookup rows MasterRequired: Defines whether a master value must be set in order to query for multiple lookup rows Using a LookupCall in a SmartField: @Override protected Class> getConfiguredLookupCall() { return LanguageLookupCall.class; } Accessing a LookupRow directly: It is possible to access a LookupRow directly. In this example the input is a key (thisKey) and the method getDataByKey() is used. Before accessing the text, we ensure that a LookupRow has been retrieved. //Execute the LookupCall (using DataByKey) LookupCall call = new LanguageLookupCall(); call.setKey(thisKey); List> rows = call.getDataByKey(); //Get the text (with a null check) String text = null; if (rows != null && !rows.isEmpty()) { text = rows.get(0).getText(); }","title":"Lookup Call","component":"scout-docs","version":"23.2","name":"lookup-call","url":"/scout-docs/next/technical-guide/working-with-data/lookup-call.html","titles":[{"text":"Scout JS","hash":"scout-js","id":1},{"text":"Scout Classic","hash":"scout-classic","id":2},{"text":"Members","hash":"members","id":3},{"text":"Type of Lookup Calls","hash":"type-of-lookup-calls","id":4},{"text":"With a Lookup Service","hash":"with-a-lookup-service","id":5},{"text":"Local Lookup Call","hash":"local-lookup-call","id":6},{"text":"Overview","hash":"overview","id":7},{"text":"Properties","hash":"properties","id":8},{"text":"Code examples","hash":"code-examples","id":9}]},"202":{"id":202,"text":"Table 1. HTTP Methods for RESTful Services HTTP Method CRUD Description POST Create Is most-often used to create new resources. POST is not idempotent. Making two identical POST requests will most-likely result in two resources containing the same information or the action executed twice. GET Read Only used to read or retrieve a representation of a resource. According to the HTTP specification GET (and HEAD) requests are used to read data and must not change anything! If a REST API wants to violate the specification, such requests must be protected against CSRF which is not enabled for GET and HEAD requests by default. See the Scout Bean org.eclipse.scout.rt.rest.csrf.AntiCsrfHelper for more details. GET requests are idempotent, which means that making multiple identical requests ends up having the same result as a single request (assuming the data has not been changed in the meantime). PUT Update/Replace Is most-often used to update resources. PUT expects to send the complete resource (not like PATCH) and is idempotent. In other words, if you create or update a resource using PUT and then make that same call again, the resource is still there and still has the same state as it did with the first call. If, for instance, calling PUT on a resource increments a counter within the resource, the call is no longer idempotent. In such a scenario it is strongly recommended to use POST for non-idempotent requests. PATCH Update PATCH is used to update resources. The PATCH request typically only contains the changes to the resource, not the complete resource. PATCH is not required to be idempotent. But it is possible to implement it in a way to be idempotent, which also helps prevent bad outcomes from collisions between multiple requests on the same resource. DELETE Delete Used to delete a resource. DELETE operations are idempotent concerning the result but may return another status code after the first deletion (e.g. 404 NOT FOUND). A REST resource using the JAX-RS API is implemented by a POJO class annotated with a set of annotations. The Scout module org.eclipse.scout.rt.rest contains the basic IRestResource marker interface which integrates REST resources within the Scout framework. The interface is annotated by @Bean allowing the Scout platform to load and register all REST resources automatically at startup using the Jandex class inventory. Listing 1. Example: REST resource @Path(\"example\") public class ExampleResource implements IRestResource { @GET @Path(\"{id}\") @Produces(MediaType.APPLICATION_JSON) public ExampleEntityDo getExamlpeEntity(@PathParam(\"id\") String id) { return BEANS.get(ExampleEntityDo.class) .withName(\"example-\" + id) .withValues(1); } } All available REST resources are automatically registered by the RestApplication class while the Scout platform startup. Add the following snippet to your web.xml file to expose your REST API using the /api context path: Listing 2. web.xml api org.glassfish.jersey.servlet.ServletContainer javax.ws.rs.Application org.eclipse.scout.rt.rest.RestApplication 1 api /api/* The JAX-RS application API (javax.ws.rs.core.Application) allows a REST application implementation to specify a set of classes, a set of singleton instances and a map of custom properties to be registered. The Scout implementation of the REST application class org.eclipse.scout.rt.rest.RestApplication allows contributing classes, singletons and properties without needing to extend the RestApplication class. Three different contributor interfaces are available for contributions: IRestApplicationClassesContributor to contribute any classes IRestApplicationSingletonsContributor to contribute any object instances (singletons) IRestApplicationPropertiesContributor to contribute key/value properties Listing 3. Example class contributor public static class ExampleClassContributor implements IRestApplicationClassesContributor { @Override public Set> contribute() { return Collections.singleton(MyCustomExample.class); } } Scout data objects may be used as request and response objects for REST APIs. See Data Objects] for details and examples. A REST API may be used by non-Java consumers. In order to communicate using a platform-independent format, usually REST services use JSON as transport format. The marshaller between Java data objects and JSON is abstracted in the JAX-RS specification. Using the @Produces(MediaType.APPLICATION_JSON) annotation, each REST service method specifies the produced data format. The Scout REST integration uses the popular Jackson library as default marshaller. Like a usual service call using the Scout service tunnel a REST request must ensure that processing of the request takes place within a RunContext. The HttpServerRunContextFilter or HttpRunContextFilter can be used to intercept incoming REST requests and wrap them within a Scout RunContext. HttpServerRunContextFilter can be used if a Scout server dependency is available. Optionally this filter also supports the creation of a Scout server session if this should be required (stateful). Refer to the javadoc for more details. The HttpRunContextFilter on the other hand does not provide session support and is always stateless. Therefore, a REST resource implementation is not required to deal with setting up a RunContext to wrap the request within each method. The filter must be added in the web.xml configuration file and should be configured to be called after the authentication filter. The filter expects that the authentication has been performed and that a subject is available (JAAS context). All following filters and servlets and thus also the REST resources run automatically in the correct context. Listing 4. web.xml registration example for HttpServerRunContextFilter. HttpServerRunContextFilter org.eclipse.scout.rt.server.context.HttpServerRunContextFilter session false HttpServerRunContextFilter /api/* Beside the subject and other attributes the HttpServerRunContextFilter and HttpRunContextFilter setup the Correlation ID, as well as the locale. Both values are read from the incoming request header, the caller must ensure that the headers Accept-Language and X-Scout-Correlation-Id are set accordingly. Scout REST services based on JAX-RS using the Jersey library and the Jackson JSON marshaller need a maven dependency to jersey-media-json-jackson in the application pom.xml. This enables the use of Jackson as JAX-RS marshaller with the Jersey JAX-RS implementation. Additionally, a dependency to the Scout module org.eclipse.scout.rt.rest.jackson is necessary. This module adds a set of Jackson additions in order to use the Jackson library together with Scout data objects. Listing 5. Dependency section of pom.xml to use Scout REST services with Jackson & Jersey org.glassfish.jersey.containers jersey-container-servlet-core org.glassfish.jersey.inject jersey-hk2 org.glassfish.jersey.media jersey-media-json-jackson org.eclipse.scout.rt org.eclipse.scout.rt.rest.jackson The Scout module org.eclipse.scout.rt.rest offers a set of helper classes in order to call REST services. Each REST service endpoint is represented by a specific REST resource client helper class. The (usually application scoped bean) class is used to specify the resource URL and additional properties used to build up the connection (authentication, additional headers,…​). Further it provides a call-back method for transforming unsuccessful responses into appropriate exception. At least the REST resource’s base URI must be specified: Listing 6. Example: REST resource client helper public class ExampleRestClientHelper extends AbstractRestClientHelper { @Override protected String getBaseUri() { return \"https://api.example.org/\"; (1) } @Override protected void configureClientBuilder(ClientBuilder clientBuilder) { super.configureClientBuilder(clientBuilder); clientBuilder.property(RestClientProperties.COOKIE_SPEC, CookieSpecs.STANDARD); clientBuilder.property(RestClientProperties.PROXY_URI, \"http://my.proxy.com\"); } @Override protected RuntimeException transformException(RuntimeException e, Response response) { (2) if (response != null && response.hasEntity()) { ErrorDo error = response.readEntity(ErrorResponse.class).getError(); throw new VetoException(error.getMessage()) .withTitle(error.getTitle()); } return e; } } 1 Declare base uri. 2 Custom exception transformer that is used as default strategy for all invocations prepared by this helper. (This is just for demonstration. Better extend org.eclipse.scout.rt.rest.client.proxy.AbstractEntityRestClientExceptionTransformer). Based on the helper class, an example REST resource client may be implemented: Listing 7. Example: REST resource client public class ExampleResourceClient implements IRestResourceClient { protected static final String RESOURCE_PATH = \"example\"; protected ExampleRestClientHelper helper() { return BEANS.get(ExampleRestClientHelper.class); } public ExampleEntityDo getExampleEntity(String id) { WebTarget target = helper().target(RESOURCE_PATH) .property(RestClientProperties.FOLLOW_REDIRECTS, false) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .get(ExampleEntityDo.class); (1) } public ExampleEntityDo updateExampleEntity(String id, ExampleEntityDo entity) { WebTarget target = helper().target(RESOURCE_PATH) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .post(Entity.json(entity), ExampleEntityDo.class); (2) } public void deleteExampleEntity(String id) { WebTarget target = helper().target(RESOURCE_PATH) .path(\"/{id}\") .resolveTemplate(\"id\", id); Response response = target.request().delete(); (3) response.close(); } public ExampleEntityDo getExampleEntityCustomExceptionHandling(String id) { WebTarget target = helper().target(RESOURCE_PATH, this::transformCustomException) (4) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .get(ExampleEntityDo.class); } protected RuntimeException transformCustomException(RuntimeException e, Response r) { if (r != null && r.hasEntity() && MediaType.TEXT_PLAIN_TYPE.equals(r.getMediaType())) { String message = r.readEntity(String.class); throw new VetoException(message); } return e; } } 1 HTTP GET example: Directly read response into an object. Exceptions are transformed transparently and the underlying resources are released (e.g. HTTP client). 2 HTTP POST example: Again, directly read the response into an object. 3 HTTP DELETE example: This delete operation does not send a response if it was successful. Hence close the returned Response explicitly to release underlying resources (see next line). Note: Unsuccessful responses are already handled by the REST client proxy. 4 Use custom exception transformer. The Scout REST Client implementation offers a set of properties to customize the underlying REST- and HTTP client, see org.eclipse.scout.rt.rest.client.RestClientProperties for a list of supported properties. Properties can be set on the REST client during initialization (valid for all requests): Listing 8. Setting properties for REST Client for all requests @Override protected void configureClientBuilder(ClientBuilder clientBuilder) { super.configureClientBuilder(clientBuilder); clientBuilder.property(RestClientProperties.COOKIE_SPEC, CookieSpecs.STANDARD); clientBuilder.property(RestClientProperties.PROXY_URI, \"http://my.proxy.com\"); } Some properties (see JavaDoc for details) may also be set on a request level: Listing 9. Setting properties for REST Client for a single requests, e.g. setting FOLLOW_REDIRECTS to false public ExampleEntityDo getExampleEntity(String id) { WebTarget target = helper().target(RESOURCE_PATH) .property(RestClientProperties.FOLLOW_REDIRECTS, false) .path(\"/{id}\") .resolveTemplate(\"id\", id); return target.request() .accept(MediaType.APPLICATION_JSON) .get(ExampleEntityDo.class); (1) } There are multiple possibilities to configure a REST client to use a HTTP proxy: Directly on REST client instance: see org.eclipse.scout.rt.rest.client.RestClientProperties.PROXY_URI (and PROXY_USER / PROXY_PASSWORD properties) Using the dynamic Scout org.eclipse.scout.rt.shared.http.proxy.ConfigurableProxySelector, see example configuration: Listing 10. Setting HTTP proxy for outgoing requests to *.example.com scout.http.proxyPatterns[0]=.*\\.example.com(:\\d+)?=127.0.0.1:8888 REST and the underlying HTTP protocol do not provide an explicit way to cancel running requests. Typically, a client terminates its connection to the HTTP server if it is no longer interested in the response. REST resources would have to monitor TCP connections and interpret a close as cancellation. Depending on the abstraction of the REST framework, connection events are not passed through and the cancellation is only recognized when the response is written to the closed connection. Until this happens, however, backend resources are used unnecessarily. Scout’s standard REST integration implements the described approach by closing the connection without any further action. It is not possible to react to this on the resource side. In order to enable a real cancellation, Scout also provides all necessary elements to assign an ID to a request, to manage these IDs in the backend during execution and to cancel transactions in the event of a cancellation. The following steps must be taken for their use: Scout does not impose nor provide a cancellation resource. It must be implemented by the project: Listing 11. Example: REST cancellation Resource @Path(\"cancellation\") public class CancellationResource implements IRestResource { @PUT @Path(\"{requestId}\") public void cancel(@PathParam(\"requestId\") String requestId) { String userId = BEANS.get(IAccessControlService.class).getUserIdOfCurrentSubject(); (1) BEANS.get(RestRequestCancellationRegistry.class).cancel(requestId, userId); (2) } } 1 Resolve the userId of the current user. This is optional and may depend on the current project. 2 Invoke the cancellation registry for the given requestId and userId. Listing 12. Example: REST cancellation Resource Client public class CancellationResourceClient implements IRestResourceClient { protected static final String RESOURCE_PATH = \"cancellation\"; protected CancellationRestClientHelper helper() { return BEANS.get(CancellationRestClientHelper.class); } public void cancel(String requestId) { WebTarget target = helper().target(RESOURCE_PATH) .path(\"{requestId}\") .resolveTemplate(\"requestId\", requestId); Response response = target.request() .put(Entity.json(\"\")); response.close(); } } To assign an ID to each request, an appropriate client request filter must be registered: Listing 13. Example: Register Client Request Cancellation Filter in REST Client Helper public class CancellationRestClientHelper extends AbstractRestClientHelper { @Override protected String getBaseUri() { return \"https://api.example.org/\"; } @Override protected void registerRequestFilters(ClientBuilder clientBuilder) { super.registerRequestFilters(clientBuilder); clientBuilder.register(new RestRequestCancellationClientRequestFilter(this::cancelRequest)); (1) } protected void cancelRequest(String requestId) { BEANS.get(CancellationResourceClient.class).cancel(requestId); (2) } } 1 Register the RestRequestCancellationClientRequestFilter that assigns a UUID to every request, which is sent as an HTTP header named X-ScoutRequestId. 2 Binds the actual cancel-operation to the cancel Method (in this case the cancellation rest resource client from above). Requests arriving at the backend need to be registered in the cancellation registry. This is done by a servlet filter (Note: REST container filters would have two issues: 1. there is no real interceptor around the resource call, but only a ContainerRequestFilter that is invoked before and a ContainerResponseFilter which is invoked after the the request is passed to the resource. 2. Cancellation in Scout is tied to an ITransaction that are managed by a RunContext and observed and controlled by a RunMonitor. Depending on sub-RunContexts and their transaction isolation it might happen, that the transaction visible in a container filter is not controlled by the currently active RunMonitor. Therefore, a cancel request would not cancel the transaction.) Listing 14. Example: Register client request cancellation filter in Rest Client Helper public class RestRequestCancellationServletFilter extends AbstractRestRequestCancellationServletFilter { @Override protected Object resolveUserId(HttpServletRequest request) { return BEANS.get(IAccessControlService.class).getUserIdOfCurrentSubject(); (1) } } 1 Implement the same userId Lookup as in the CancellationResource. Finally, declare the servlet filter in your web.xml: Listing 15. web.xml registration example for RestRequestCancellationFilter. RestRequestCancellationFilter org.eclipse.scout.docs.snippets.rest.RestRequestCancellationServletFilter RestRequestCancellationFilter /api/* Make sure the cancellation filter is registered after the HttpServerRunContextFilter.","title":"REST","component":"scout-docs","version":"23.2","name":"rest","url":"/scout-docs/next/technical-guide/working-with-data/rest.html","titles":[{"text":"REST Resource Conventions","hash":"rest-resource-conventions","id":1},{"text":"REST Resource Provider","hash":"rest-resource-provider","id":2},{"text":"REST Resource Registration","hash":"rest-resource-registration","id":3},{"text":"Extend REST Application","hash":"extend-rest-application","id":4},{"text":"Data Objects","hash":"data-objects","id":5},{"text":"Marshaller","hash":"marshaller","id":6},{"text":"RunContext","hash":"runcontext","id":7},{"text":"Dependency Management","hash":"dependency-management","id":8},{"text":"REST Client","hash":"rest-client","id":9},{"text":"REST Client Properties","hash":"rest-client-properties","id":10},{"text":"REST Client HTTP Proxy","hash":"rest-client-http-proxy","id":11},{"text":"REST Cancellation Support","hash":"rest-cancellation-support","id":12},{"text":"Cancellation Resource and Resource Client","hash":"cancellation-resource-and-resource-client","id":13},{"text":"Install Cancellation Request Filter","hash":"install-cancellation-request-filter","id":14},{"text":"Implement Cancellation Servlet Filter","hash":"implement-cancellation-servlet-filter","id":15}]}},"components":{},"componentVersions":{"scout-docs/23.2":{"displayVersion":"23.2","title":"Eclipse Scout","version":"23.2","name":"scout-docs","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Eclipse Scout","source-language":"asciidoc@","experimental":true},"sourcemap":false},"url":"/scout-docs/next/index.html","navigation":[{"items":[{"content":"Overview","url":"/scout-docs/next/index.html","urlType":"internal"}],"root":true,"order":0},{"items":[{"content":"Get Started","url":"/scout-docs/next/getstarted/getstarted.html","urlType":"internal","items":[{"content":"Scout Classic","items":[{"content":"Hello Scout Classic","url":"/scout-docs/next/getstarted/helloscout.html","urlType":"internal"},{"content":"Build Scout App and Deploy to Tomcat","url":"/scout-docs/next/getstarted/deploy-to-tomcat.html","urlType":"internal"},{"content":"One Day Tutorial","url":"/scout-docs/next/getstarted/one-day-tutorial.html","urlType":"internal"}]},{"content":"Scout JS","items":[{"content":"Hello Scout JS","url":"/scout-docs/next/getstarted/helloscout-js.html","urlType":"internal"},{"content":"Hello Scout JS Full Stack","url":"/scout-docs/next/getstarted/helloscout-js-fullstack.html","urlType":"internal"},{"content":"Hello Scout JS with a CDN","url":"/scout-docs/next/getstarted/helloscout-cdn.html","urlType":"internal"}]}]}],"root":true,"order":1},{"items":[{"content":"Technical Guide","url":"/scout-docs/next/technical-guide/technical-guide.html","urlType":"internal","items":[{"content":"Common Concepts","items":[{"content":"Platform","url":"/scout-docs/next/technical-guide/common-concepts/platform.html","urlType":"internal"},{"content":"Working with exceptions","url":"/scout-docs/next/technical-guide/common-concepts/exception-handling.html","urlType":"internal"},{"content":"JobManager","url":"/scout-docs/next/technical-guide/common-concepts/job-manager.html","urlType":"internal"},{"content":"RunContext","url":"/scout-docs/next/technical-guide/common-concepts/run-context.html","urlType":"internal"},{"content":"RunMonitor","url":"/scout-docs/next/technical-guide/common-concepts/run-monitor.html","urlType":"internal"},{"content":"Security","url":"/scout-docs/next/technical-guide/common-concepts/security.html","urlType":"internal"},{"content":"SmtpHelper","url":"/scout-docs/next/technical-guide/common-concepts/smtp-helper.html","urlType":"internal"}]},{"content":"User Interface","items":[{"content":"Widget","url":"/scout-docs/next/technical-guide/user-interface/widget.html","urlType":"internal"},{"content":"Object Factory","url":"/scout-docs/next/technical-guide/user-interface/object-factory.html","urlType":"internal"},{"content":"Form","url":"/scout-docs/next/technical-guide/user-interface/form.html","urlType":"internal"},{"content":"Form Field","url":"/scout-docs/next/technical-guide/user-interface/form-field.html","urlType":"internal"},{"content":"Value Field","url":"/scout-docs/next/technical-guide/user-interface/value-field.html","urlType":"internal"},{"content":"Desktop","url":"/scout-docs/next/technical-guide/user-interface/desktop.html","urlType":"internal"},{"content":"Styling","url":"/scout-docs/next/technical-guide/user-interface/styling.html","urlType":"internal"},{"content":"Mobile Support","url":"/scout-docs/next/technical-guide/user-interface/mobile.html","urlType":"internal"},{"content":"Extensibility","url":"/scout-docs/next/technical-guide/user-interface/extensibility.html","urlType":"internal"},{"content":"Texts","url":"/scout-docs/next/technical-guide/user-interface/texts.html","urlType":"internal"},{"content":"Icons","url":"/scout-docs/next/technical-guide/user-interface/icons.html","urlType":"internal"},{"content":"Widget Reference","url":"/scout-docs/next/technical-guide/user-interface/widget-reference.html","urlType":"internal"},{"content":"HTML Document Parser","url":"/scout-docs/next/technical-guide/user-interface/html-document-parser.html","urlType":"internal"},{"content":"TypeScript Support","url":"/scout-docs/next/technical-guide/user-interface/typescript.html","urlType":"internal"},{"content":"Build Stack","url":"/scout-docs/next/technical-guide/user-interface/build-stack.html","urlType":"internal"},{"content":"Browser Support","url":"/scout-docs/next/technical-guide/user-interface/browser-support.html","urlType":"internal"}]},{"content":"Working with Data","items":[{"content":"Lookup Call","url":"/scout-docs/next/technical-guide/working-with-data/lookup-call.html","urlType":"internal"},{"content":"Code Type","url":"/scout-docs/next/technical-guide/working-with-data/code-type.html","urlType":"internal"},{"content":"Client Notifications","url":"/scout-docs/next/technical-guide/working-with-data/client-notification.html","urlType":"internal"},{"content":"Data Objects","url":"/scout-docs/next/technical-guide/working-with-data/data-object.html","urlType":"internal"},{"content":"REST","url":"/scout-docs/next/technical-guide/working-with-data/rest.html","urlType":"internal"},{"content":"Webservices with JAX-WS","url":"/scout-docs/next/technical-guide/working-with-data/jax-ws.html","urlType":"internal"}]}]}],"root":true,"order":2},{"items":[{"content":"Scout SDK","url":"/scout-docs/next/sdk/sdk.html","urlType":"internal","items":[{"content":"Scout SDK for IntelliJ","url":"/scout-docs/next/sdk/sdk-intellij.html","urlType":"internal"},{"content":"Scout SDK for Eclipse","url":"/scout-docs/next/sdk/sdk-eclipse.html","urlType":"internal"}]}],"root":true,"order":3},{"items":[{"content":"How-Tos","url":"/scout-docs/next/howtos/how-tos.html","urlType":"internal","items":[{"content":"Scout Classic","items":[{"content":"How to Create a Chart","url":"/scout-docs/next/howtos/scout-classic/chart-how-to.html","urlType":"internal"},{"content":"SmartField: How to Apply Colors and Styles From a Lookup Row","url":"/scout-docs/next/howtos/scout-classic/smart-field-how-to.html","urlType":"internal"},{"content":"How to open a Scout JS form in a Scout Classic application","url":"/scout-docs/next/howtos/scout-classic/js-form-how-to.html","urlType":"internal"}]},{"content":"Scout JS","items":[{"content":"How to Create a Chart","url":"/scout-docs/next/howtos/scout-js/chart-how-to.html","urlType":"internal"},{"content":"How to Create a Custom Field","url":"/scout-docs/next/howtos/scout-js/flip-card-how-to.html","urlType":"internal"}]}]}],"root":true,"order":4},{"items":[{"content":"Release Notes","url":"/scout-docs/next/releasenotes/release-notes.html","urlType":"internal"}],"root":true,"order":5},{"items":[{"content":"Migration Guide","url":"/scout-docs/next/migration/migration-guide.html","urlType":"internal"}],"root":true,"order":6}]},"scout-docs/23.1":{"displayVersion":"23.1","title":"Eclipse Scout","version":"23.1","name":"scout-docs","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Eclipse Scout","source-language":"asciidoc@","experimental":true},"sourcemap":false},"url":"/scout-docs/stable/index.html","navigation":[{"items":[{"content":"Overview","url":"/scout-docs/stable/index.html","urlType":"internal"}],"root":true,"order":0},{"items":[{"content":"Get Started","url":"/scout-docs/stable/getstarted/getstarted.html","urlType":"internal","items":[{"content":"Scout Classic","items":[{"content":"Hello Scout Classic","url":"/scout-docs/stable/getstarted/helloscout.html","urlType":"internal"},{"content":"Build Scout App and Deploy to Tomcat","url":"/scout-docs/stable/getstarted/deploy-to-tomcat.html","urlType":"internal"},{"content":"One Day Tutorial","url":"/scout-docs/stable/getstarted/one-day-tutorial.html","urlType":"internal"}]},{"content":"Scout JS","items":[{"content":"Hello Scout JS","url":"/scout-docs/stable/getstarted/helloscout-js.html","urlType":"internal"},{"content":"Hello Scout JS Full Stack","url":"/scout-docs/stable/getstarted/helloscout-js-fullstack.html","urlType":"internal"},{"content":"Hello Scout JS with a CDN","url":"/scout-docs/stable/getstarted/helloscout-cdn.html","urlType":"internal"}]}]}],"root":true,"order":1},{"items":[{"content":"Technical Guide","url":"/scout-docs/stable/technical-guide/technical-guide.html","urlType":"internal","items":[{"content":"Common Concepts","items":[{"content":"Platform","url":"/scout-docs/stable/technical-guide/common-concepts/platform.html","urlType":"internal"},{"content":"Working with exceptions","url":"/scout-docs/stable/technical-guide/common-concepts/exception-handling.html","urlType":"internal"},{"content":"JobManager","url":"/scout-docs/stable/technical-guide/common-concepts/job-manager.html","urlType":"internal"},{"content":"RunContext","url":"/scout-docs/stable/technical-guide/common-concepts/run-context.html","urlType":"internal"},{"content":"RunMonitor","url":"/scout-docs/stable/technical-guide/common-concepts/run-monitor.html","urlType":"internal"},{"content":"Security","url":"/scout-docs/stable/technical-guide/common-concepts/security.html","urlType":"internal"},{"content":"SmtpHelper","url":"/scout-docs/stable/technical-guide/common-concepts/smtp-helper.html","urlType":"internal"}]},{"content":"User Interface","items":[{"content":"Widget","url":"/scout-docs/stable/technical-guide/user-interface/widget.html","urlType":"internal"},{"content":"Object Factory","url":"/scout-docs/stable/technical-guide/user-interface/object-factory.html","urlType":"internal"},{"content":"Form","url":"/scout-docs/stable/technical-guide/user-interface/form.html","urlType":"internal"},{"content":"Form Field","url":"/scout-docs/stable/technical-guide/user-interface/form-field.html","urlType":"internal"},{"content":"Value Field","url":"/scout-docs/stable/technical-guide/user-interface/value-field.html","urlType":"internal"},{"content":"Desktop","url":"/scout-docs/stable/technical-guide/user-interface/desktop.html","urlType":"internal"},{"content":"Styling","url":"/scout-docs/stable/technical-guide/user-interface/styling.html","urlType":"internal"},{"content":"Mobile Support","url":"/scout-docs/stable/technical-guide/user-interface/mobile.html","urlType":"internal"},{"content":"Extensibility","url":"/scout-docs/stable/technical-guide/user-interface/extensibility.html","urlType":"internal"},{"content":"Texts","url":"/scout-docs/stable/technical-guide/user-interface/texts.html","urlType":"internal"},{"content":"Icons","url":"/scout-docs/stable/technical-guide/user-interface/icons.html","urlType":"internal"},{"content":"Widget Reference","url":"/scout-docs/stable/technical-guide/user-interface/widget-reference.html","urlType":"internal"},{"content":"HTML Document Parser","url":"/scout-docs/stable/technical-guide/user-interface/html-document-parser.html","urlType":"internal"},{"content":"TypeScript Support","url":"/scout-docs/stable/technical-guide/user-interface/typescript.html","urlType":"internal"},{"content":"Build Stack","url":"/scout-docs/stable/technical-guide/user-interface/build-stack.html","urlType":"internal"},{"content":"Browser Support","url":"/scout-docs/stable/technical-guide/user-interface/browser-support.html","urlType":"internal"}]},{"content":"Working with Data","items":[{"content":"Lookup Call","url":"/scout-docs/stable/technical-guide/working-with-data/lookup-call.html","urlType":"internal"},{"content":"Code Type","url":"/scout-docs/stable/technical-guide/working-with-data/code-type.html","urlType":"internal"},{"content":"Client Notifications","url":"/scout-docs/stable/technical-guide/working-with-data/client-notification.html","urlType":"internal"},{"content":"Data Objects","url":"/scout-docs/stable/technical-guide/working-with-data/data-object.html","urlType":"internal"},{"content":"REST","url":"/scout-docs/stable/technical-guide/working-with-data/rest.html","urlType":"internal"},{"content":"Webservices with JAX-WS","url":"/scout-docs/stable/technical-guide/working-with-data/jax-ws.html","urlType":"internal"}]}]}],"root":true,"order":2},{"items":[{"content":"Scout SDK","url":"/scout-docs/stable/sdk/sdk.html","urlType":"internal","items":[{"content":"Scout SDK for IntelliJ","url":"/scout-docs/stable/sdk/sdk-intellij.html","urlType":"internal"},{"content":"Scout SDK for Eclipse","url":"/scout-docs/stable/sdk/sdk-eclipse.html","urlType":"internal"}]}],"root":true,"order":3},{"items":[{"content":"How-Tos","url":"/scout-docs/stable/howtos/how-tos.html","urlType":"internal","items":[{"content":"Scout Classic","items":[{"content":"How to Create a Chart","url":"/scout-docs/stable/howtos/scout-classic/chart-how-to.html","urlType":"internal"},{"content":"SmartField: How to Apply Colors and Styles From a Lookup Row","url":"/scout-docs/stable/howtos/scout-classic/smart-field-how-to.html","urlType":"internal"},{"content":"How to open a Scout JS form in a Scout Classic application","url":"/scout-docs/stable/howtos/scout-classic/js-form-how-to.html","urlType":"internal"}]},{"content":"Scout JS","items":[{"content":"How to Create a Chart","url":"/scout-docs/stable/howtos/scout-js/chart-how-to.html","urlType":"internal"},{"content":"How to Create a Custom Field","url":"/scout-docs/stable/howtos/scout-js/flip-card-how-to.html","urlType":"internal"}]}]}],"root":true,"order":4},{"items":[{"content":"Release Notes","url":"/scout-docs/stable/releasenotes/release-notes.html","urlType":"internal"}],"root":true,"order":5},{"items":[{"content":"Migration Guide","url":"/scout-docs/stable/migration/migration-guide.html","urlType":"internal"}],"root":true,"order":6}]},"scout-docs/22":{"displayVersion":"22","title":"Eclipse Scout","version":"22","name":"scout-docs","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Eclipse Scout","source-language":"asciidoc@","experimental":true},"sourcemap":false},"url":"/scout-docs/22/index.html","navigation":[{"items":[{"content":"Overview","url":"/scout-docs/22/index.html","urlType":"internal"}],"root":true,"order":0},{"items":[{"content":"Get Started","url":"/scout-docs/22/getstarted/getstarted.html","urlType":"internal","items":[{"content":"Scout Classic","items":[{"content":"Hello Scout Classic","url":"/scout-docs/22/getstarted/helloscout.html","urlType":"internal"},{"content":"Build Scout App and Deploy to Tomcat","url":"/scout-docs/22/getstarted/deploy-to-tomcat.html","urlType":"internal"},{"content":"One Day Tutorial","url":"/scout-docs/22/getstarted/one-day-tutorial.html","urlType":"internal"}]},{"content":"Scout JS","items":[{"content":"Hello Scout JS","url":"/scout-docs/22/getstarted/helloscout-js.html","urlType":"internal"},{"content":"Hello Scout JS Full Stack","url":"/scout-docs/22/getstarted/helloscout-js-fullstack.html","urlType":"internal"},{"content":"Hello Scout JS with a CDN","url":"/scout-docs/22/getstarted/helloscout-cdn.html","urlType":"internal"}]}]}],"root":true,"order":1},{"items":[{"content":"Technical Guide","url":"/scout-docs/22/technical-guide/technical-guide.html","urlType":"internal","items":[{"content":"Common Concepts","items":[{"content":"Platform","url":"/scout-docs/22/technical-guide/common-concepts/platform.html","urlType":"internal"},{"content":"Working with exceptions","url":"/scout-docs/22/technical-guide/common-concepts/exception-handling.html","urlType":"internal"},{"content":"JobManager","url":"/scout-docs/22/technical-guide/common-concepts/job-manager.html","urlType":"internal"},{"content":"RunContext","url":"/scout-docs/22/technical-guide/common-concepts/run-context.html","urlType":"internal"},{"content":"RunMonitor","url":"/scout-docs/22/technical-guide/common-concepts/run-monitor.html","urlType":"internal"},{"content":"Security","url":"/scout-docs/22/technical-guide/common-concepts/security.html","urlType":"internal"},{"content":"SmtpHelper","url":"/scout-docs/22/technical-guide/common-concepts/smtp-helper.html","urlType":"internal"}]},{"content":"User Interface","items":[{"content":"Widget","url":"/scout-docs/22/technical-guide/user-interface/widget.html","urlType":"internal"},{"content":"Object Factory","url":"/scout-docs/22/technical-guide/user-interface/object-factory.html","urlType":"internal"},{"content":"Form","url":"/scout-docs/22/technical-guide/user-interface/form.html","urlType":"internal"},{"content":"Form Field","url":"/scout-docs/22/technical-guide/user-interface/form-field.html","urlType":"internal"},{"content":"Value Field","url":"/scout-docs/22/technical-guide/user-interface/value-field.html","urlType":"internal"},{"content":"Desktop","url":"/scout-docs/22/technical-guide/user-interface/desktop.html","urlType":"internal"},{"content":"Styling","url":"/scout-docs/22/technical-guide/user-interface/styling.html","urlType":"internal"},{"content":"Mobile Support","url":"/scout-docs/22/technical-guide/user-interface/mobile.html","urlType":"internal"},{"content":"Extensibility","url":"/scout-docs/22/technical-guide/user-interface/extensibility.html","urlType":"internal"},{"content":"Texts","url":"/scout-docs/22/technical-guide/user-interface/texts.html","urlType":"internal"},{"content":"Icons","url":"/scout-docs/22/technical-guide/user-interface/icons.html","urlType":"internal"},{"content":"Widget Reference","url":"/scout-docs/22/technical-guide/user-interface/widget-reference.html","urlType":"internal"},{"content":"HTML Document Parser","url":"/scout-docs/22/technical-guide/user-interface/html-document-parser.html","urlType":"internal"},{"content":"Build Stack","url":"/scout-docs/22/technical-guide/user-interface/build-stack.html","urlType":"internal"},{"content":"Browser Support","url":"/scout-docs/22/technical-guide/user-interface/browser-support.html","urlType":"internal"}]},{"content":"Working with Data","items":[{"content":"Lookup Call","url":"/scout-docs/22/technical-guide/working-with-data/lookup-call.html","urlType":"internal"},{"content":"Code Type","url":"/scout-docs/22/technical-guide/working-with-data/code-type.html","urlType":"internal"},{"content":"Client Notifications","url":"/scout-docs/22/technical-guide/working-with-data/client-notification.html","urlType":"internal"},{"content":"Data Objects","url":"/scout-docs/22/technical-guide/working-with-data/data-object.html","urlType":"internal"},{"content":"REST","url":"/scout-docs/22/technical-guide/working-with-data/rest.html","urlType":"internal"},{"content":"Webservices with JAX-WS","url":"/scout-docs/22/technical-guide/working-with-data/jax-ws.html","urlType":"internal"}]}]}],"root":true,"order":2},{"items":[{"content":"Scout SDK","url":"/scout-docs/22/sdk/sdk.html","urlType":"internal","items":[{"content":"Scout SDK for IntelliJ","url":"/scout-docs/22/sdk/sdk-intellij.html","urlType":"internal"},{"content":"Scout SDK for Eclipse","url":"/scout-docs/22/sdk/sdk-eclipse.html","urlType":"internal"}]}],"root":true,"order":3},{"items":[{"content":"How-Tos","url":"/scout-docs/22/howtos/how-tos.html","urlType":"internal","items":[{"content":"Scout Classic","items":[{"content":"How to Create a Chart","url":"/scout-docs/22/howtos/scout-classic/chart-how-to.html","urlType":"internal"},{"content":"SmartField: How to Apply Colors and Styles From a Lookup Row","url":"/scout-docs/22/howtos/scout-classic/smart-field-how-to.html","urlType":"internal"}]},{"content":"Scout JS","items":[{"content":"How to Create a Chart","url":"/scout-docs/22/howtos/scout-js/chart-how-to.html","urlType":"internal"},{"content":"How to Create a Custom Field","url":"/scout-docs/22/howtos/scout-js/flip-card-how-to.html","urlType":"internal"}]}]}],"root":true,"order":4},{"items":[{"content":"Release Notes","url":"/scout-docs/22/releasenotes/release-notes.html","urlType":"internal"}],"root":true,"order":5},{"items":[{"content":"Migration Guide","url":"/scout-docs/22/migration/migration-guide.html","urlType":"internal"}],"root":true,"order":6}]}}}})